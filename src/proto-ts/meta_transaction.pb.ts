// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: meta_transaction.proto
/* eslint-disable */

import type { ByteSource } from "protoscript";
import { BinaryReader, BinaryWriter } from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import { BigNumberJs, BigNumberJsJSON } from "./big_number_js.pb";

//========================================//
//                 Types                  //
//========================================//

export interface LiquiditySource {
  name: string;
  proportion: BigNumberJs;
  intermediateToken?: string | null | undefined;
  hops: string[];
}

export interface Quote {
  sellTokenAddress: string;
  sellAmount: BigNumberJs;
  buyTokenAddress: string;
  buyAmount: BigNumberJs;
  price: BigNumberJs;
  estimatedPriceImpact?: BigNumberJs | null | undefined;
  sellTokenToNativeTokenRate: BigNumberJs;
  buyTokenToNativeTokenRate: BigNumberJs;
  chainId: number;
  gas: BigNumberJs;
  estimatedGas: BigNumberJs;
  gasPrice: BigNumberJs;
  value: BigNumberJs;
  protocolFee: BigNumberJs;
  minimumProtocolFee: BigNumberJs;
  allowanceTarget: string;
  liquiditySources: LiquiditySource[];
}

/**
 **
 * MetaTransaction
 * https://github.com/0xProject/protocol/blob/development/packages/protocol-utils/src/meta_transactions.ts#L39
 */
export interface MetaTransaction {
  signerAddress: string;
  senderAddress: string;
  minGasPrice: BigNumberJs;
  maxGasPrice: BigNumberJs;
  expirationTimeSeconds: BigNumberJs;
  salt: BigNumberJs;
  callData: string;
  value: BigNumberJs;
  feeTokenAddress: string;
  feeAmount: BigNumberJs;
  chainId: number;
  verifyingContract: string;
}

export interface GetQuoteRequest {
  sellTokenAddress: string;
  buyTokenAddress: string;
  sellAmount?: BigNumberJs | null | undefined;
  buyAmount?: BigNumberJs | null | undefined;
  chainId: number;
  takerAddress: string;
  integratorId: string;
  affiliateAddress?: string | null | undefined;
  slippagePercentage?: BigNumberJs | null | undefined;
  /**
   * ID to use for the quote report `decodedUniqueId`
   */
  quoteUniqueId?: string | null | undefined;
}

export interface GetQuoteResponse {
  quote: Quote;
  metaTransaction: MetaTransaction;
}

//========================================//
// MetaTransactionService Protobuf Client //
//========================================//

export async function GetQuote(
  getQuoteRequest: GetQuoteRequest,
  config?: ClientConfiguration
): Promise<GetQuoteResponse> {
  const response = await PBrequest(
    "/MetaTransactionService/GetQuote",
    GetQuoteRequest.encode(getQuoteRequest),
    config
  );
  return GetQuoteResponse.decode(response);
}

//========================================//
//   MetaTransactionService JSON Client   //
//========================================//

export async function GetQuoteJSON(
  getQuoteRequest: GetQuoteRequest,
  config?: ClientConfiguration
): Promise<GetQuoteResponse> {
  const response = await JSONrequest(
    "/MetaTransactionService/GetQuote",
    GetQuoteRequestJSON.encode(getQuoteRequest),
    config
  );
  return GetQuoteResponseJSON.decode(response);
}

//========================================//
//         MetaTransactionService         //
//========================================//

export interface MetaTransactionService<Context = unknown> {
  GetQuote: (
    getQuoteRequest: GetQuoteRequest,
    context: Context
  ) => Promise<GetQuoteResponse> | GetQuoteResponse;
}

export function createMetaTransactionService<Context>(
  service: MetaTransactionService<Context>
) {
  return {
    name: "MetaTransactionService",
    methods: {
      GetQuote: {
        name: "GetQuote",
        handler: service.GetQuote,
        input: { protobuf: GetQuoteRequest, json: GetQuoteRequestJSON },
        output: { protobuf: GetQuoteResponse, json: GetQuoteResponseJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const LiquiditySource = {
  /**
   * Serializes LiquiditySource to protobuf.
   */
  encode: function (msg: Partial<LiquiditySource>): Uint8Array {
    return LiquiditySource._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes LiquiditySource from protobuf.
   */
  decode: function (bytes: ByteSource): LiquiditySource {
    return LiquiditySource._readMessage(
      LiquiditySource.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes LiquiditySource with all fields set to their default value.
   */
  initialize: function (): LiquiditySource {
    return {
      name: "",
      proportion: BigNumberJs.initialize(),
      intermediateToken: undefined,
      hops: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<LiquiditySource>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.proportion) {
      writer.writeMessage(2, msg.proportion, BigNumberJs._writeMessage);
    }
    if (msg.intermediateToken != undefined) {
      writer.writeString(3, msg.intermediateToken);
    }
    if (msg.hops?.length) {
      writer.writeRepeatedString(4, msg.hops);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: LiquiditySource,
    reader: BinaryReader
  ): LiquiditySource {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.proportion, BigNumberJs._readMessage);
          break;
        }
        case 3: {
          msg.intermediateToken = reader.readString();
          break;
        }
        case 4: {
          msg.hops.push(reader.readString());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Quote = {
  /**
   * Serializes Quote to protobuf.
   */
  encode: function (msg: Partial<Quote>): Uint8Array {
    return Quote._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Quote from protobuf.
   */
  decode: function (bytes: ByteSource): Quote {
    return Quote._readMessage(Quote.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Quote with all fields set to their default value.
   */
  initialize: function (): Quote {
    return {
      sellTokenAddress: "",
      sellAmount: BigNumberJs.initialize(),
      buyTokenAddress: "",
      buyAmount: BigNumberJs.initialize(),
      price: BigNumberJs.initialize(),
      estimatedPriceImpact: undefined,
      sellTokenToNativeTokenRate: BigNumberJs.initialize(),
      buyTokenToNativeTokenRate: BigNumberJs.initialize(),
      chainId: 0,
      gas: BigNumberJs.initialize(),
      estimatedGas: BigNumberJs.initialize(),
      gasPrice: BigNumberJs.initialize(),
      value: BigNumberJs.initialize(),
      protocolFee: BigNumberJs.initialize(),
      minimumProtocolFee: BigNumberJs.initialize(),
      allowanceTarget: "",
      liquiditySources: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Quote>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.sellTokenAddress) {
      writer.writeString(1, msg.sellTokenAddress);
    }
    if (msg.sellAmount) {
      writer.writeMessage(2, msg.sellAmount, BigNumberJs._writeMessage);
    }
    if (msg.buyTokenAddress) {
      writer.writeString(3, msg.buyTokenAddress);
    }
    if (msg.buyAmount) {
      writer.writeMessage(4, msg.buyAmount, BigNumberJs._writeMessage);
    }
    if (msg.price) {
      writer.writeMessage(5, msg.price, BigNumberJs._writeMessage);
    }
    if (msg.estimatedPriceImpact != undefined) {
      writer.writeMessage(
        6,
        msg.estimatedPriceImpact,
        BigNumberJs._writeMessage
      );
    }
    if (msg.sellTokenToNativeTokenRate) {
      writer.writeMessage(
        7,
        msg.sellTokenToNativeTokenRate,
        BigNumberJs._writeMessage
      );
    }
    if (msg.buyTokenToNativeTokenRate) {
      writer.writeMessage(
        8,
        msg.buyTokenToNativeTokenRate,
        BigNumberJs._writeMessage
      );
    }
    if (msg.chainId) {
      writer.writeInt32(9, msg.chainId);
    }
    if (msg.gas) {
      writer.writeMessage(10, msg.gas, BigNumberJs._writeMessage);
    }
    if (msg.estimatedGas) {
      writer.writeMessage(11, msg.estimatedGas, BigNumberJs._writeMessage);
    }
    if (msg.gasPrice) {
      writer.writeMessage(12, msg.gasPrice, BigNumberJs._writeMessage);
    }
    if (msg.value) {
      writer.writeMessage(13, msg.value, BigNumberJs._writeMessage);
    }
    if (msg.protocolFee) {
      writer.writeMessage(14, msg.protocolFee, BigNumberJs._writeMessage);
    }
    if (msg.minimumProtocolFee) {
      writer.writeMessage(
        15,
        msg.minimumProtocolFee,
        BigNumberJs._writeMessage
      );
    }
    if (msg.allowanceTarget) {
      writer.writeString(16, msg.allowanceTarget);
    }
    if (msg.liquiditySources?.length) {
      writer.writeRepeatedMessage(
        17,
        msg.liquiditySources as any,
        LiquiditySource._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Quote, reader: BinaryReader): Quote {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.sellTokenAddress = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.sellAmount, BigNumberJs._readMessage);
          break;
        }
        case 3: {
          msg.buyTokenAddress = reader.readString();
          break;
        }
        case 4: {
          reader.readMessage(msg.buyAmount, BigNumberJs._readMessage);
          break;
        }
        case 5: {
          reader.readMessage(msg.price, BigNumberJs._readMessage);
          break;
        }
        case 6: {
          msg.estimatedPriceImpact = BigNumberJs.initialize();
          reader.readMessage(
            msg.estimatedPriceImpact,
            BigNumberJs._readMessage
          );
          break;
        }
        case 7: {
          reader.readMessage(
            msg.sellTokenToNativeTokenRate,
            BigNumberJs._readMessage
          );
          break;
        }
        case 8: {
          reader.readMessage(
            msg.buyTokenToNativeTokenRate,
            BigNumberJs._readMessage
          );
          break;
        }
        case 9: {
          msg.chainId = reader.readInt32();
          break;
        }
        case 10: {
          reader.readMessage(msg.gas, BigNumberJs._readMessage);
          break;
        }
        case 11: {
          reader.readMessage(msg.estimatedGas, BigNumberJs._readMessage);
          break;
        }
        case 12: {
          reader.readMessage(msg.gasPrice, BigNumberJs._readMessage);
          break;
        }
        case 13: {
          reader.readMessage(msg.value, BigNumberJs._readMessage);
          break;
        }
        case 14: {
          reader.readMessage(msg.protocolFee, BigNumberJs._readMessage);
          break;
        }
        case 15: {
          reader.readMessage(msg.minimumProtocolFee, BigNumberJs._readMessage);
          break;
        }
        case 16: {
          msg.allowanceTarget = reader.readString();
          break;
        }
        case 17: {
          const m = LiquiditySource.initialize();
          reader.readMessage(m, LiquiditySource._readMessage);
          msg.liquiditySources.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const MetaTransaction = {
  /**
   * Serializes MetaTransaction to protobuf.
   */
  encode: function (msg: Partial<MetaTransaction>): Uint8Array {
    return MetaTransaction._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes MetaTransaction from protobuf.
   */
  decode: function (bytes: ByteSource): MetaTransaction {
    return MetaTransaction._readMessage(
      MetaTransaction.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes MetaTransaction with all fields set to their default value.
   */
  initialize: function (): MetaTransaction {
    return {
      signerAddress: "",
      senderAddress: "",
      minGasPrice: BigNumberJs.initialize(),
      maxGasPrice: BigNumberJs.initialize(),
      expirationTimeSeconds: BigNumberJs.initialize(),
      salt: BigNumberJs.initialize(),
      callData: "",
      value: BigNumberJs.initialize(),
      feeTokenAddress: "",
      feeAmount: BigNumberJs.initialize(),
      chainId: 0,
      verifyingContract: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MetaTransaction>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.signerAddress) {
      writer.writeString(1, msg.signerAddress);
    }
    if (msg.senderAddress) {
      writer.writeString(2, msg.senderAddress);
    }
    if (msg.minGasPrice) {
      writer.writeMessage(3, msg.minGasPrice, BigNumberJs._writeMessage);
    }
    if (msg.maxGasPrice) {
      writer.writeMessage(4, msg.maxGasPrice, BigNumberJs._writeMessage);
    }
    if (msg.expirationTimeSeconds) {
      writer.writeMessage(
        5,
        msg.expirationTimeSeconds,
        BigNumberJs._writeMessage
      );
    }
    if (msg.salt) {
      writer.writeMessage(6, msg.salt, BigNumberJs._writeMessage);
    }
    if (msg.callData) {
      writer.writeString(7, msg.callData);
    }
    if (msg.value) {
      writer.writeMessage(8, msg.value, BigNumberJs._writeMessage);
    }
    if (msg.feeTokenAddress) {
      writer.writeString(9, msg.feeTokenAddress);
    }
    if (msg.feeAmount) {
      writer.writeMessage(10, msg.feeAmount, BigNumberJs._writeMessage);
    }
    if (msg.chainId) {
      writer.writeInt32(11, msg.chainId);
    }
    if (msg.verifyingContract) {
      writer.writeString(12, msg.verifyingContract);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MetaTransaction,
    reader: BinaryReader
  ): MetaTransaction {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.signerAddress = reader.readString();
          break;
        }
        case 2: {
          msg.senderAddress = reader.readString();
          break;
        }
        case 3: {
          reader.readMessage(msg.minGasPrice, BigNumberJs._readMessage);
          break;
        }
        case 4: {
          reader.readMessage(msg.maxGasPrice, BigNumberJs._readMessage);
          break;
        }
        case 5: {
          reader.readMessage(
            msg.expirationTimeSeconds,
            BigNumberJs._readMessage
          );
          break;
        }
        case 6: {
          reader.readMessage(msg.salt, BigNumberJs._readMessage);
          break;
        }
        case 7: {
          msg.callData = reader.readString();
          break;
        }
        case 8: {
          reader.readMessage(msg.value, BigNumberJs._readMessage);
          break;
        }
        case 9: {
          msg.feeTokenAddress = reader.readString();
          break;
        }
        case 10: {
          reader.readMessage(msg.feeAmount, BigNumberJs._readMessage);
          break;
        }
        case 11: {
          msg.chainId = reader.readInt32();
          break;
        }
        case 12: {
          msg.verifyingContract = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetQuoteRequest = {
  /**
   * Serializes GetQuoteRequest to protobuf.
   */
  encode: function (msg: Partial<GetQuoteRequest>): Uint8Array {
    return GetQuoteRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetQuoteRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetQuoteRequest {
    return GetQuoteRequest._readMessage(
      GetQuoteRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetQuoteRequest with all fields set to their default value.
   */
  initialize: function (): GetQuoteRequest {
    return {
      sellTokenAddress: "",
      buyTokenAddress: "",
      sellAmount: undefined,
      buyAmount: undefined,
      chainId: 0,
      takerAddress: "",
      integratorId: "",
      affiliateAddress: undefined,
      slippagePercentage: undefined,
      quoteUniqueId: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetQuoteRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.sellTokenAddress) {
      writer.writeString(1, msg.sellTokenAddress);
    }
    if (msg.buyTokenAddress) {
      writer.writeString(2, msg.buyTokenAddress);
    }
    if (msg.sellAmount != undefined) {
      writer.writeMessage(3, msg.sellAmount, BigNumberJs._writeMessage);
    }
    if (msg.buyAmount != undefined) {
      writer.writeMessage(4, msg.buyAmount, BigNumberJs._writeMessage);
    }
    if (msg.chainId) {
      writer.writeInt32(5, msg.chainId);
    }
    if (msg.takerAddress) {
      writer.writeString(6, msg.takerAddress);
    }
    if (msg.integratorId) {
      writer.writeString(7, msg.integratorId);
    }
    if (msg.affiliateAddress != undefined) {
      writer.writeString(8, msg.affiliateAddress);
    }
    if (msg.slippagePercentage != undefined) {
      writer.writeMessage(9, msg.slippagePercentage, BigNumberJs._writeMessage);
    }
    if (msg.quoteUniqueId != undefined) {
      writer.writeString(10, msg.quoteUniqueId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetQuoteRequest,
    reader: BinaryReader
  ): GetQuoteRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.sellTokenAddress = reader.readString();
          break;
        }
        case 2: {
          msg.buyTokenAddress = reader.readString();
          break;
        }
        case 3: {
          msg.sellAmount = BigNumberJs.initialize();
          reader.readMessage(msg.sellAmount, BigNumberJs._readMessage);
          break;
        }
        case 4: {
          msg.buyAmount = BigNumberJs.initialize();
          reader.readMessage(msg.buyAmount, BigNumberJs._readMessage);
          break;
        }
        case 5: {
          msg.chainId = reader.readInt32();
          break;
        }
        case 6: {
          msg.takerAddress = reader.readString();
          break;
        }
        case 7: {
          msg.integratorId = reader.readString();
          break;
        }
        case 8: {
          msg.affiliateAddress = reader.readString();
          break;
        }
        case 9: {
          msg.slippagePercentage = BigNumberJs.initialize();
          reader.readMessage(msg.slippagePercentage, BigNumberJs._readMessage);
          break;
        }
        case 10: {
          msg.quoteUniqueId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetQuoteResponse = {
  /**
   * Serializes GetQuoteResponse to protobuf.
   */
  encode: function (msg: Partial<GetQuoteResponse>): Uint8Array {
    return GetQuoteResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetQuoteResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetQuoteResponse {
    return GetQuoteResponse._readMessage(
      GetQuoteResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetQuoteResponse with all fields set to their default value.
   */
  initialize: function (): GetQuoteResponse {
    return {
      quote: Quote.initialize(),
      metaTransaction: MetaTransaction.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetQuoteResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.quote) {
      writer.writeMessage(1, msg.quote, Quote._writeMessage);
    }
    if (msg.metaTransaction) {
      writer.writeMessage(
        2,
        msg.metaTransaction,
        MetaTransaction._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetQuoteResponse,
    reader: BinaryReader
  ): GetQuoteResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.quote, Quote._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(msg.metaTransaction, MetaTransaction._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const LiquiditySourceJSON = {
  /**
   * Serializes LiquiditySource to JSON.
   */
  encode: function (msg: Partial<LiquiditySource>): string {
    return JSON.stringify(LiquiditySourceJSON._writeMessage(msg));
  },

  /**
   * Deserializes LiquiditySource from JSON.
   */
  decode: function (json: string): LiquiditySource {
    return LiquiditySourceJSON._readMessage(
      LiquiditySourceJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes LiquiditySource with all fields set to their default value.
   */
  initialize: function (): LiquiditySource {
    return {
      name: "",
      proportion: BigNumberJs.initialize(),
      intermediateToken: undefined,
      hops: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<LiquiditySource>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.proportion) {
      const proportion = BigNumberJsJSON._writeMessage(msg.proportion);
      if (Object.keys(proportion).length > 0) {
        json["proportion"] = proportion;
      }
    }
    if (msg.intermediateToken != undefined) {
      json["intermediateToken"] = msg.intermediateToken;
    }
    if (msg.hops?.length) {
      json["hops"] = msg.hops;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: LiquiditySource, json: any): LiquiditySource {
    const _name = json["name"];
    if (_name) {
      msg.name = _name;
    }
    const _proportion = json["proportion"];
    if (_proportion) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _proportion);
      msg.proportion = m;
    }
    const _intermediateToken =
      json["intermediateToken"] ?? json["intermediate_token"];
    if (_intermediateToken) {
      msg.intermediateToken = _intermediateToken;
    }
    const _hops = json["hops"];
    if (_hops) {
      msg.hops = _hops;
    }
    return msg;
  },
};

export const QuoteJSON = {
  /**
   * Serializes Quote to JSON.
   */
  encode: function (msg: Partial<Quote>): string {
    return JSON.stringify(QuoteJSON._writeMessage(msg));
  },

  /**
   * Deserializes Quote from JSON.
   */
  decode: function (json: string): Quote {
    return QuoteJSON._readMessage(QuoteJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Quote with all fields set to their default value.
   */
  initialize: function (): Quote {
    return {
      sellTokenAddress: "",
      sellAmount: BigNumberJs.initialize(),
      buyTokenAddress: "",
      buyAmount: BigNumberJs.initialize(),
      price: BigNumberJs.initialize(),
      estimatedPriceImpact: undefined,
      sellTokenToNativeTokenRate: BigNumberJs.initialize(),
      buyTokenToNativeTokenRate: BigNumberJs.initialize(),
      chainId: 0,
      gas: BigNumberJs.initialize(),
      estimatedGas: BigNumberJs.initialize(),
      gasPrice: BigNumberJs.initialize(),
      value: BigNumberJs.initialize(),
      protocolFee: BigNumberJs.initialize(),
      minimumProtocolFee: BigNumberJs.initialize(),
      allowanceTarget: "",
      liquiditySources: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Quote>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.sellTokenAddress) {
      json["sellTokenAddress"] = msg.sellTokenAddress;
    }
    if (msg.sellAmount) {
      const sellAmount = BigNumberJsJSON._writeMessage(msg.sellAmount);
      if (Object.keys(sellAmount).length > 0) {
        json["sellAmount"] = sellAmount;
      }
    }
    if (msg.buyTokenAddress) {
      json["buyTokenAddress"] = msg.buyTokenAddress;
    }
    if (msg.buyAmount) {
      const buyAmount = BigNumberJsJSON._writeMessage(msg.buyAmount);
      if (Object.keys(buyAmount).length > 0) {
        json["buyAmount"] = buyAmount;
      }
    }
    if (msg.price) {
      const price = BigNumberJsJSON._writeMessage(msg.price);
      if (Object.keys(price).length > 0) {
        json["price"] = price;
      }
    }
    if (msg.estimatedPriceImpact != undefined) {
      const estimatedPriceImpact = BigNumberJsJSON._writeMessage(
        msg.estimatedPriceImpact
      );
      json["estimatedPriceImpact"] = estimatedPriceImpact;
    }
    if (msg.sellTokenToNativeTokenRate) {
      const sellTokenToNativeTokenRate = BigNumberJsJSON._writeMessage(
        msg.sellTokenToNativeTokenRate
      );
      if (Object.keys(sellTokenToNativeTokenRate).length > 0) {
        json["sellTokenToNativeTokenRate"] = sellTokenToNativeTokenRate;
      }
    }
    if (msg.buyTokenToNativeTokenRate) {
      const buyTokenToNativeTokenRate = BigNumberJsJSON._writeMessage(
        msg.buyTokenToNativeTokenRate
      );
      if (Object.keys(buyTokenToNativeTokenRate).length > 0) {
        json["buyTokenToNativeTokenRate"] = buyTokenToNativeTokenRate;
      }
    }
    if (msg.chainId) {
      json["chainId"] = msg.chainId;
    }
    if (msg.gas) {
      const gas = BigNumberJsJSON._writeMessage(msg.gas);
      if (Object.keys(gas).length > 0) {
        json["gas"] = gas;
      }
    }
    if (msg.estimatedGas) {
      const estimatedGas = BigNumberJsJSON._writeMessage(msg.estimatedGas);
      if (Object.keys(estimatedGas).length > 0) {
        json["estimatedGas"] = estimatedGas;
      }
    }
    if (msg.gasPrice) {
      const gasPrice = BigNumberJsJSON._writeMessage(msg.gasPrice);
      if (Object.keys(gasPrice).length > 0) {
        json["gasPrice"] = gasPrice;
      }
    }
    if (msg.value) {
      const value = BigNumberJsJSON._writeMessage(msg.value);
      if (Object.keys(value).length > 0) {
        json["value"] = value;
      }
    }
    if (msg.protocolFee) {
      const protocolFee = BigNumberJsJSON._writeMessage(msg.protocolFee);
      if (Object.keys(protocolFee).length > 0) {
        json["protocolFee"] = protocolFee;
      }
    }
    if (msg.minimumProtocolFee) {
      const minimumProtocolFee = BigNumberJsJSON._writeMessage(
        msg.minimumProtocolFee
      );
      if (Object.keys(minimumProtocolFee).length > 0) {
        json["minimumProtocolFee"] = minimumProtocolFee;
      }
    }
    if (msg.allowanceTarget) {
      json["allowanceTarget"] = msg.allowanceTarget;
    }
    if (msg.liquiditySources?.length) {
      json["liquiditySources"] = msg.liquiditySources.map(
        LiquiditySourceJSON._writeMessage
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Quote, json: any): Quote {
    const _sellTokenAddress =
      json["sellTokenAddress"] ?? json["sell_token_address"];
    if (_sellTokenAddress) {
      msg.sellTokenAddress = _sellTokenAddress;
    }
    const _sellAmount = json["sellAmount"] ?? json["sell_amount"];
    if (_sellAmount) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _sellAmount);
      msg.sellAmount = m;
    }
    const _buyTokenAddress =
      json["buyTokenAddress"] ?? json["buy_token_address"];
    if (_buyTokenAddress) {
      msg.buyTokenAddress = _buyTokenAddress;
    }
    const _buyAmount = json["buyAmount"] ?? json["buy_amount"];
    if (_buyAmount) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _buyAmount);
      msg.buyAmount = m;
    }
    const _price = json["price"];
    if (_price) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _price);
      msg.price = m;
    }
    const _estimatedPriceImpact =
      json["estimatedPriceImpact"] ?? json["estimated_price_impact"];
    if (_estimatedPriceImpact) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _estimatedPriceImpact);
      msg.estimatedPriceImpact = m;
    }
    const _sellTokenToNativeTokenRate =
      json["sellTokenToNativeTokenRate"] ??
      json["sell_token_to_native_token_rate"];
    if (_sellTokenToNativeTokenRate) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _sellTokenToNativeTokenRate);
      msg.sellTokenToNativeTokenRate = m;
    }
    const _buyTokenToNativeTokenRate =
      json["buyTokenToNativeTokenRate"] ??
      json["buy_token_to_native_token_rate"];
    if (_buyTokenToNativeTokenRate) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _buyTokenToNativeTokenRate);
      msg.buyTokenToNativeTokenRate = m;
    }
    const _chainId = json["chainId"] ?? json["chain_id"];
    if (_chainId) {
      msg.chainId = _chainId;
    }
    const _gas = json["gas"];
    if (_gas) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _gas);
      msg.gas = m;
    }
    const _estimatedGas = json["estimatedGas"] ?? json["estimated_gas"];
    if (_estimatedGas) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _estimatedGas);
      msg.estimatedGas = m;
    }
    const _gasPrice = json["gasPrice"] ?? json["gas_price"];
    if (_gasPrice) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _gasPrice);
      msg.gasPrice = m;
    }
    const _value = json["value"];
    if (_value) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _value);
      msg.value = m;
    }
    const _protocolFee = json["protocolFee"] ?? json["protocol_fee"];
    if (_protocolFee) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _protocolFee);
      msg.protocolFee = m;
    }
    const _minimumProtocolFee =
      json["minimumProtocolFee"] ?? json["minimum_protocol_fee"];
    if (_minimumProtocolFee) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _minimumProtocolFee);
      msg.minimumProtocolFee = m;
    }
    const _allowanceTarget =
      json["allowanceTarget"] ?? json["allowance_target"];
    if (_allowanceTarget) {
      msg.allowanceTarget = _allowanceTarget;
    }
    const _liquiditySources =
      json["liquiditySources"] ?? json["liquidity_sources"];
    if (_liquiditySources) {
      for (const item of _liquiditySources) {
        const m = LiquiditySource.initialize();
        LiquiditySourceJSON._readMessage(m, item);
        msg.liquiditySources.push(m);
      }
    }
    return msg;
  },
};

export const MetaTransactionJSON = {
  /**
   * Serializes MetaTransaction to JSON.
   */
  encode: function (msg: Partial<MetaTransaction>): string {
    return JSON.stringify(MetaTransactionJSON._writeMessage(msg));
  },

  /**
   * Deserializes MetaTransaction from JSON.
   */
  decode: function (json: string): MetaTransaction {
    return MetaTransactionJSON._readMessage(
      MetaTransactionJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes MetaTransaction with all fields set to their default value.
   */
  initialize: function (): MetaTransaction {
    return {
      signerAddress: "",
      senderAddress: "",
      minGasPrice: BigNumberJs.initialize(),
      maxGasPrice: BigNumberJs.initialize(),
      expirationTimeSeconds: BigNumberJs.initialize(),
      salt: BigNumberJs.initialize(),
      callData: "",
      value: BigNumberJs.initialize(),
      feeTokenAddress: "",
      feeAmount: BigNumberJs.initialize(),
      chainId: 0,
      verifyingContract: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MetaTransaction>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.signerAddress) {
      json["signerAddress"] = msg.signerAddress;
    }
    if (msg.senderAddress) {
      json["senderAddress"] = msg.senderAddress;
    }
    if (msg.minGasPrice) {
      const minGasPrice = BigNumberJsJSON._writeMessage(msg.minGasPrice);
      if (Object.keys(minGasPrice).length > 0) {
        json["minGasPrice"] = minGasPrice;
      }
    }
    if (msg.maxGasPrice) {
      const maxGasPrice = BigNumberJsJSON._writeMessage(msg.maxGasPrice);
      if (Object.keys(maxGasPrice).length > 0) {
        json["maxGasPrice"] = maxGasPrice;
      }
    }
    if (msg.expirationTimeSeconds) {
      const expirationTimeSeconds = BigNumberJsJSON._writeMessage(
        msg.expirationTimeSeconds
      );
      if (Object.keys(expirationTimeSeconds).length > 0) {
        json["expirationTimeSeconds"] = expirationTimeSeconds;
      }
    }
    if (msg.salt) {
      const salt = BigNumberJsJSON._writeMessage(msg.salt);
      if (Object.keys(salt).length > 0) {
        json["salt"] = salt;
      }
    }
    if (msg.callData) {
      json["callData"] = msg.callData;
    }
    if (msg.value) {
      const value = BigNumberJsJSON._writeMessage(msg.value);
      if (Object.keys(value).length > 0) {
        json["value"] = value;
      }
    }
    if (msg.feeTokenAddress) {
      json["feeTokenAddress"] = msg.feeTokenAddress;
    }
    if (msg.feeAmount) {
      const feeAmount = BigNumberJsJSON._writeMessage(msg.feeAmount);
      if (Object.keys(feeAmount).length > 0) {
        json["feeAmount"] = feeAmount;
      }
    }
    if (msg.chainId) {
      json["chainId"] = msg.chainId;
    }
    if (msg.verifyingContract) {
      json["verifyingContract"] = msg.verifyingContract;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: MetaTransaction, json: any): MetaTransaction {
    const _signerAddress = json["signerAddress"] ?? json["signer_address"];
    if (_signerAddress) {
      msg.signerAddress = _signerAddress;
    }
    const _senderAddress = json["senderAddress"] ?? json["sender_address"];
    if (_senderAddress) {
      msg.senderAddress = _senderAddress;
    }
    const _minGasPrice = json["minGasPrice"] ?? json["min_gas_price"];
    if (_minGasPrice) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _minGasPrice);
      msg.minGasPrice = m;
    }
    const _maxGasPrice = json["maxGasPrice"] ?? json["max_gas_price"];
    if (_maxGasPrice) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _maxGasPrice);
      msg.maxGasPrice = m;
    }
    const _expirationTimeSeconds =
      json["expirationTimeSeconds"] ?? json["expiration_time_seconds"];
    if (_expirationTimeSeconds) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _expirationTimeSeconds);
      msg.expirationTimeSeconds = m;
    }
    const _salt = json["salt"];
    if (_salt) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _salt);
      msg.salt = m;
    }
    const _callData = json["callData"] ?? json["call_data"];
    if (_callData) {
      msg.callData = _callData;
    }
    const _value = json["value"];
    if (_value) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _value);
      msg.value = m;
    }
    const _feeTokenAddress =
      json["feeTokenAddress"] ?? json["fee_token_address"];
    if (_feeTokenAddress) {
      msg.feeTokenAddress = _feeTokenAddress;
    }
    const _feeAmount = json["feeAmount"] ?? json["fee_amount"];
    if (_feeAmount) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _feeAmount);
      msg.feeAmount = m;
    }
    const _chainId = json["chainId"] ?? json["chain_id"];
    if (_chainId) {
      msg.chainId = _chainId;
    }
    const _verifyingContract =
      json["verifyingContract"] ?? json["verifying_contract"];
    if (_verifyingContract) {
      msg.verifyingContract = _verifyingContract;
    }
    return msg;
  },
};

export const GetQuoteRequestJSON = {
  /**
   * Serializes GetQuoteRequest to JSON.
   */
  encode: function (msg: Partial<GetQuoteRequest>): string {
    return JSON.stringify(GetQuoteRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetQuoteRequest from JSON.
   */
  decode: function (json: string): GetQuoteRequest {
    return GetQuoteRequestJSON._readMessage(
      GetQuoteRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetQuoteRequest with all fields set to their default value.
   */
  initialize: function (): GetQuoteRequest {
    return {
      sellTokenAddress: "",
      buyTokenAddress: "",
      sellAmount: undefined,
      buyAmount: undefined,
      chainId: 0,
      takerAddress: "",
      integratorId: "",
      affiliateAddress: undefined,
      slippagePercentage: undefined,
      quoteUniqueId: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetQuoteRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.sellTokenAddress) {
      json["sellTokenAddress"] = msg.sellTokenAddress;
    }
    if (msg.buyTokenAddress) {
      json["buyTokenAddress"] = msg.buyTokenAddress;
    }
    if (msg.sellAmount != undefined) {
      const sellAmount = BigNumberJsJSON._writeMessage(msg.sellAmount);
      json["sellAmount"] = sellAmount;
    }
    if (msg.buyAmount != undefined) {
      const buyAmount = BigNumberJsJSON._writeMessage(msg.buyAmount);
      json["buyAmount"] = buyAmount;
    }
    if (msg.chainId) {
      json["chainId"] = msg.chainId;
    }
    if (msg.takerAddress) {
      json["takerAddress"] = msg.takerAddress;
    }
    if (msg.integratorId) {
      json["integratorId"] = msg.integratorId;
    }
    if (msg.affiliateAddress != undefined) {
      json["affiliateAddress"] = msg.affiliateAddress;
    }
    if (msg.slippagePercentage != undefined) {
      const slippagePercentage = BigNumberJsJSON._writeMessage(
        msg.slippagePercentage
      );
      json["slippagePercentage"] = slippagePercentage;
    }
    if (msg.quoteUniqueId != undefined) {
      json["quoteUniqueId"] = msg.quoteUniqueId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetQuoteRequest, json: any): GetQuoteRequest {
    const _sellTokenAddress =
      json["sellTokenAddress"] ?? json["sell_token_address"];
    if (_sellTokenAddress) {
      msg.sellTokenAddress = _sellTokenAddress;
    }
    const _buyTokenAddress =
      json["buyTokenAddress"] ?? json["buy_token_address"];
    if (_buyTokenAddress) {
      msg.buyTokenAddress = _buyTokenAddress;
    }
    const _sellAmount = json["sellAmount"] ?? json["sell_amount"];
    if (_sellAmount) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _sellAmount);
      msg.sellAmount = m;
    }
    const _buyAmount = json["buyAmount"] ?? json["buy_amount"];
    if (_buyAmount) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _buyAmount);
      msg.buyAmount = m;
    }
    const _chainId = json["chainId"] ?? json["chain_id"];
    if (_chainId) {
      msg.chainId = _chainId;
    }
    const _takerAddress = json["takerAddress"] ?? json["taker_address"];
    if (_takerAddress) {
      msg.takerAddress = _takerAddress;
    }
    const _integratorId = json["integratorId"] ?? json["integrator_id"];
    if (_integratorId) {
      msg.integratorId = _integratorId;
    }
    const _affiliateAddress =
      json["affiliateAddress"] ?? json["affiliate_address"];
    if (_affiliateAddress) {
      msg.affiliateAddress = _affiliateAddress;
    }
    const _slippagePercentage =
      json["slippagePercentage"] ?? json["slippage_percentage"];
    if (_slippagePercentage) {
      const m = BigNumberJs.initialize();
      BigNumberJsJSON._readMessage(m, _slippagePercentage);
      msg.slippagePercentage = m;
    }
    const _quoteUniqueId = json["quoteUniqueId"] ?? json["quote_unique_id"];
    if (_quoteUniqueId) {
      msg.quoteUniqueId = _quoteUniqueId;
    }
    return msg;
  },
};

export const GetQuoteResponseJSON = {
  /**
   * Serializes GetQuoteResponse to JSON.
   */
  encode: function (msg: Partial<GetQuoteResponse>): string {
    return JSON.stringify(GetQuoteResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetQuoteResponse from JSON.
   */
  decode: function (json: string): GetQuoteResponse {
    return GetQuoteResponseJSON._readMessage(
      GetQuoteResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetQuoteResponse with all fields set to their default value.
   */
  initialize: function (): GetQuoteResponse {
    return {
      quote: Quote.initialize(),
      metaTransaction: MetaTransaction.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetQuoteResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.quote) {
      const quote = QuoteJSON._writeMessage(msg.quote);
      if (Object.keys(quote).length > 0) {
        json["quote"] = quote;
      }
    }
    if (msg.metaTransaction) {
      const metaTransaction = MetaTransactionJSON._writeMessage(
        msg.metaTransaction
      );
      if (Object.keys(metaTransaction).length > 0) {
        json["metaTransaction"] = metaTransaction;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetQuoteResponse, json: any): GetQuoteResponse {
    const _quote = json["quote"];
    if (_quote) {
      const m = Quote.initialize();
      QuoteJSON._readMessage(m, _quote);
      msg.quote = m;
    }
    const _metaTransaction =
      json["metaTransaction"] ?? json["meta_transaction"];
    if (_metaTransaction) {
      const m = MetaTransaction.initialize();
      MetaTransactionJSON._readMessage(m, _metaTransaction);
      msg.metaTransaction = m;
    }
    return msg;
  },
};
