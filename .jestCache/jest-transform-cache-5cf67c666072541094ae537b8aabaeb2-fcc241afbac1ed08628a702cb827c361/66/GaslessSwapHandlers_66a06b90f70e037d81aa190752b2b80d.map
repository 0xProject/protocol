{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/GaslessSwapHandlers.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/GaslessSwapHandlers.ts"],"sourcesContent":["// tslint:disable:max-file-line-count\r\nimport {\r\n    InternalServerError,\r\n    InvalidAPIKeyError,\r\n    isAPIError,\r\n    ValidationError,\r\n    ValidationErrorCodes,\r\n} from '@0x/api-utils';\r\nimport { MetaTransaction, OtcOrder } from '@0x/protocol-utils';\r\nimport { getTokenMetadataIfExists, isNativeSymbolOrAddress, nativeWrappedTokenSymbol } from '@0x/token-metadata';\r\nimport { addressUtils, BigNumber } from '@0x/utils';\r\nimport * as express from 'express';\r\nimport * as HttpStatus from 'http-status-codes';\r\nimport { Counter } from 'prom-client';\r\n\r\nimport { Integrator } from '../config';\r\nimport { schemas } from '../core/schemas';\r\nimport { GaslessSwapService } from '../services/GaslessSwapService';\r\nimport {\r\n    FetchFirmQuoteParams,\r\n    FetchIndicativeQuoteParams,\r\n    FetchQuoteParamsBase,\r\n    SubmitMetaTransactionSignedQuoteParams,\r\n    SubmitRfqmSignedQuoteWithApprovalParams,\r\n} from '../services/types';\r\nimport {\r\n    ExecuteMetaTransactionEip712Context,\r\n    GaslessApprovalTypes,\r\n    GaslessTypes,\r\n    PermitEip712Context,\r\n} from '../core/types';\r\nimport { ConfigManager } from '../utils/config_manager';\r\nimport { HealthCheckResult, transformResultToShortResponse } from '../utils/rfqm_health_check';\r\nimport {\r\n    RawMetaTransactionFields,\r\n    RawOtcOrderFields,\r\n    StringSignatureFields,\r\n    stringsToEIP712Context,\r\n    stringsToMetaTransactionFields,\r\n    stringsToOtcOrderFields,\r\n    stringsToSignature,\r\n} from '../utils/rfqm_request_utils';\r\nimport { schemaUtils } from '../core/schema_utils';\r\nimport { GASLESS_V1_PATH, ZERO_G_PATH, ZERO_G_ALIAS_PATH } from '../core/constants';\r\n\r\n// Minimum slippage allowed. This value should be kept consistent with the value set in 0x-api\r\nconst MIN_ALLOWED_SLIPPAGE = 0.001; // 0.1%\r\n\r\n// If the cache is more milliseconds old than the value specified here, it will be refreshed.\r\nconst HEALTH_CHECK_RESULT_CACHE_DURATION_MS = 30000;\r\n\r\nconst ZEROG_GASLESS_SWAP_REQUEST = new Counter({\r\n    name: 'zerog_gasless_swap_request_total',\r\n    help: 'Number of requests of a gasless swap endpoint',\r\n    labelNames: ['chainId', 'integratorLabel', 'endpoint'],\r\n});\r\nconst ZEROG_GASLESS_SWAP_REQUEST_ERROR = new Counter({\r\n    name: 'zerog_gasless_swap_request_error',\r\n    help: 'Number of request errors of a gasless swap endpoint',\r\n    labelNames: ['chainId', 'integratorLabel', 'endpoint'],\r\n});\r\n\r\ntype HealthCheckResultCache = [HealthCheckResult, Date];\r\n\r\n/**\r\n * Logic to bridge Gasless Swap API requests to the `GaslessSwapService` and translate\r\n * results from the `GaslessSwapService` back to API responses.\r\n */\r\nexport class GaslessSwapHandlers {\r\n    private readonly _cachedHealthCheckResultByChainId = new Map<number, HealthCheckResultCache>();\r\n    constructor(\r\n        private readonly _gaslessSwapServices: Map<number, GaslessSwapService>,\r\n        private readonly _configManager: ConfigManager,\r\n    ) {}\r\n\r\n    /**\r\n     * Handler for the /price endpoint\r\n     */\r\n    public async getPriceAsync(req: express.Request, res: express.Response): Promise<void> {\r\n        const metaTransactionType = getMetaTransactionType(req.baseUrl);\r\n        const { chainId, params } = await this._parsePriceParamsAsync(req, metaTransactionType);\r\n        // Consistent with `rfqm_handlers`: not all requests are emitted if they fail parsing\r\n        ZEROG_GASLESS_SWAP_REQUEST.inc({\r\n            chainId,\r\n            integratorLabel: params.integrator.label,\r\n            endpoint: '/price',\r\n        });\r\n\r\n        let price;\r\n        try {\r\n            price = await this._getServiceForChain(chainId).fetchPriceAsync(params);\r\n        } catch (err) {\r\n            ZEROG_GASLESS_SWAP_REQUEST_ERROR.inc({\r\n                chainId,\r\n                integratorLabel: params.integrator.label,\r\n                endpoint: '/price',\r\n            });\r\n            throw err;\r\n        }\r\n\r\n        // Result\r\n        res.status(HttpStatus.OK).send({\r\n            liquidityAvailable: price !== null,\r\n            ...price,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handler for the /quote endpoint\r\n     */\r\n    public async getQuoteAsync(req: express.Request, res: express.Response): Promise<void> {\r\n        const metaTransactionType = getMetaTransactionType(req.baseUrl);\r\n        // Parse request\r\n        const { chainId, params } = await this._parseFetchFirmQuoteParamsAsync(req, metaTransactionType);\r\n        // Consistent with `rfqm_handlers`: not all requests are emitted if they fail parsing\r\n        ZEROG_GASLESS_SWAP_REQUEST.inc({\r\n            chainId,\r\n            integratorLabel: params.integrator.label,\r\n            endpoint: '/quote',\r\n        });\r\n\r\n        let quote;\r\n        try {\r\n            quote = await this._getServiceForChain(chainId).fetchQuoteAsync(params);\r\n        } catch (err) {\r\n            ZEROG_GASLESS_SWAP_REQUEST_ERROR.inc({\r\n                chainId,\r\n                integratorLabel: params.integrator.label,\r\n                endpoint: '/quote',\r\n            });\r\n            throw err;\r\n        }\r\n        // Result\r\n        res.status(HttpStatus.OK).send({\r\n            liquidityAvailable: quote !== null,\r\n            ...quote,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handler for the `/healthz` endpoint.\r\n     */\r\n    public async getHealthAsync(req: express.Request, res: express.Response): Promise<void> {\r\n        const chainId = extractChainId(req, this._gaslessSwapServices);\r\n        const cachedResult = this._cachedHealthCheckResultByChainId.get(chainId);\r\n        let result: HealthCheckResult;\r\n        if (!cachedResult) {\r\n            result = await this._getServiceForChain(chainId).runHealthCheckAsync();\r\n            this._cachedHealthCheckResultByChainId.set(chainId, [result, new Date()]);\r\n        } else {\r\n            const cacheAgeMs = Date.now() - cachedResult[1].getTime();\r\n            if (cacheAgeMs >= HEALTH_CHECK_RESULT_CACHE_DURATION_MS) {\r\n                result = await this._getServiceForChain(chainId).runHealthCheckAsync();\r\n                this._cachedHealthCheckResultByChainId.set(chainId, [result, new Date()]);\r\n            } else {\r\n                result = cachedResult[0];\r\n            }\r\n        }\r\n\r\n        const response = transformResultToShortResponse(result);\r\n        res.status(HttpStatus.OK).send(response);\r\n    }\r\n\r\n    /**\r\n     * Handler for the /status/:hash endpoint\r\n     */\r\n    public async getStatusAsync(req: express.Request, res: express.Response): Promise<void> {\r\n        const chainId = extractChainId(req, this._gaslessSwapServices);\r\n        const { hash } = req.params;\r\n\r\n        const status = await this._getServiceForChain(chainId).getStatusAsync(hash);\r\n\r\n        status ? res.status(HttpStatus.OK).send(status) : res.status(HttpStatus.NOT_FOUND).send();\r\n    }\r\n\r\n    /**\r\n     * Handler for the /submit endpoint\r\n     */\r\n    public async processSubmitAsync(req: express.Request, res: express.Response): Promise<void> {\r\n        const { chainId, integrator, params } = this._parseSubmitParams(req);\r\n        // Consistent with `rfqm_handlers`: not all requests are emitted if they fail parsing\r\n        ZEROG_GASLESS_SWAP_REQUEST.inc({\r\n            chainId,\r\n            integratorLabel: integrator.label,\r\n            endpoint: '/submit',\r\n        });\r\n\r\n        try {\r\n            const response = await this._getServiceForChain(chainId).processSubmitAsync(\r\n                params,\r\n                integrator.integratorId,\r\n            );\r\n            res.status(HttpStatus.CREATED).send(response);\r\n        } catch (err) {\r\n            ZEROG_GASLESS_SWAP_REQUEST_ERROR.inc({\r\n                chainId,\r\n                integratorLabel: integrator.label,\r\n                endpoint: '/submit',\r\n            });\r\n            req.log.error(err, 'Encountered an error while queuing a signed quote');\r\n            if (isAPIError(err)) {\r\n                throw err;\r\n            } else {\r\n                throw new InternalServerError(`An unexpected error occurred`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _parseFetchFirmQuoteParamsAsync(\r\n        req: express.Request,\r\n        metaTransactionType: GaslessTypes,\r\n    ): Promise<{ chainId: number; params: FetchFirmQuoteParams }> {\r\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        schemaUtils.validateSchema(req.query, schemas.firmQuoteRequestSchema as any);\r\n        const takerAddress = req.query.takerAddress;\r\n        const shouldCheckApproval = req.query.checkApproval === 'true' ? true : false;\r\n        const { chainId, params } = await this._parseIndicativeAndFirmQuoteSharedParamsAsync(req, metaTransactionType);\r\n        if (!addressUtils.isAddress(takerAddress as string)) {\r\n            throw new ValidationError([\r\n                {\r\n                    field: 'takerAddress',\r\n                    code: ValidationErrorCodes.InvalidAddress,\r\n                    reason: `Must provide a valid takerAddress`,\r\n                },\r\n            ]);\r\n        }\r\n        return {\r\n            chainId,\r\n            params: {\r\n                ...params,\r\n                takerAddress: takerAddress as string,\r\n                checkApproval: shouldCheckApproval,\r\n            },\r\n        };\r\n    }\r\n\r\n    private _getServiceForChain(chainId: number): GaslessSwapService {\r\n        const service = this._gaslessSwapServices.get(chainId);\r\n\r\n        if (!service) {\r\n            throw new Error('No configuration exists for chain');\r\n        }\r\n        return service;\r\n    }\r\n\r\n    /**\r\n     * Examines the API key provided in the request, ensures it is valid for RFQM, and fetches the associated\r\n     * integrator ID.\r\n     */\r\n    private _validateApiKey(apiKey: string | undefined, chainId: number): { apiKey: string; integrator: Integrator } {\r\n        if (apiKey === undefined) {\r\n            throw new InvalidAPIKeyError('Must access with an API key');\r\n        }\r\n        if (!this._configManager.getRfqmApiKeyWhitelist().has(apiKey)) {\r\n            throw new InvalidAPIKeyError('API key not authorized for RFQM access');\r\n        }\r\n        const integratorId = this._configManager.getIntegratorIdForApiKey(apiKey);\r\n        if (!integratorId) {\r\n            // With a valid configuration this should never happen\r\n            throw new InvalidAPIKeyError('API key has no associated Integrator ID');\r\n        }\r\n        const integrator = this._configManager.getIntegratorByIdOrThrow(integratorId);\r\n        if (!integrator.allowedChainIds.includes(chainId)) {\r\n            throw new InvalidAPIKeyError(`API Key not authorized to access chain ${chainId}`);\r\n        }\r\n        return { apiKey, integrator };\r\n    }\r\n\r\n    private async _parsePriceParamsAsync(\r\n        req: express.Request,\r\n        metaTransactionType: GaslessTypes,\r\n    ): Promise<{ chainId: number; params: FetchIndicativeQuoteParams }> {\r\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        schemaUtils.validateSchema(req.query, schemas.indicativeQuoteRequestSchema as any);\r\n        const { takerAddress } = req.query;\r\n        const { chainId, params } = await this._parseIndicativeAndFirmQuoteSharedParamsAsync(req, metaTransactionType);\r\n\r\n        return {\r\n            chainId,\r\n            params: {\r\n                ...params,\r\n                takerAddress: takerAddress as string,\r\n            },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Parse shared params of indicative and firm quotes\r\n     */\r\n    private async _parseIndicativeAndFirmQuoteSharedParamsAsync(\r\n        req: express.Request,\r\n        metaTransactionType: GaslessTypes,\r\n    ): Promise<{ chainId: number; params: FetchQuoteParamsBase }> {\r\n        const chainId = extractChainId(req, this._gaslessSwapServices);\r\n        const { integrator } = this._validateApiKey(req.header('0x-api-key'), chainId);\r\n        const { affiliateAddress } = req.query;\r\n\r\n        // Parse tokens\r\n        const sellTokenRaw = req.query.sellToken as string;\r\n        const buyTokenRaw = req.query.buyToken as string;\r\n        validateNotNativeTokenOrThrow(sellTokenRaw, chainId, 'sellToken');\r\n\r\n        let buyTokenDecimals: number;\r\n        let sellTokenDecimals: number;\r\n        let buyTokenContractAddress: string;\r\n        let sellTokenContractAddress: string;\r\n\r\n        try {\r\n            buyTokenContractAddress = buyTokenRaw.toLocaleLowerCase().startsWith('0x')\r\n                ? buyTokenRaw\r\n                : contractAddressForSymbol(buyTokenRaw, chainId);\r\n            buyTokenDecimals = await this._getServiceForChain(chainId).getTokenDecimalsAsync(buyTokenRaw);\r\n        } catch (e) {\r\n            throw new ValidationError([\r\n                {\r\n                    field: 'buyToken',\r\n                    code: ValidationErrorCodes.AddressNotSupported,\r\n                    reason: `Token ${buyTokenRaw} is currently unsupported`,\r\n                },\r\n            ]);\r\n        }\r\n\r\n        try {\r\n            sellTokenContractAddress = sellTokenRaw.toLocaleLowerCase().startsWith('0x')\r\n                ? sellTokenRaw\r\n                : contractAddressForSymbol(sellTokenRaw, chainId);\r\n            sellTokenDecimals = await this._getServiceForChain(chainId).getTokenDecimalsAsync(sellTokenRaw);\r\n        } catch {\r\n            throw new ValidationError([\r\n                {\r\n                    field: 'sellToken',\r\n                    code: ValidationErrorCodes.AddressNotSupported,\r\n                    reason: `Token ${sellTokenRaw} is currently unsupported`,\r\n                },\r\n            ]);\r\n        }\r\n\r\n        // Parse number params\r\n        const sellAmount =\r\n            req.query.sellAmount === undefined ? undefined : new BigNumber(req.query.sellAmount as string);\r\n        const buyAmount = req.query.buyAmount === undefined ? undefined : new BigNumber(req.query.buyAmount as string);\r\n        const slippagePercentage =\r\n            req.query.slippagePercentage === undefined\r\n                ? undefined\r\n                : new BigNumber(req.query.slippagePercentage as string);\r\n\r\n        let feeType: 'volume' | undefined;\r\n        let feeSellTokenPercentage: BigNumber | undefined;\r\n        let feeRecipient: string | undefined;\r\n\r\n        if (metaTransactionType === GaslessTypes.MetaTransaction) {\r\n            if (slippagePercentage?.lt(MIN_ALLOWED_SLIPPAGE) || slippagePercentage?.gt(1)) {\r\n                throw new ValidationError([\r\n                    {\r\n                        field: 'slippagePercentage',\r\n                        code: ValidationErrorCodes.ValueOutOfRange,\r\n                        reason: `slippagePercentage ${slippagePercentage} is out of range`,\r\n                    },\r\n                ]);\r\n            }\r\n        } else if (metaTransactionType === GaslessTypes.MetaTransactionV2) {\r\n            // slippage percentage of gasless v1 is on scale of 100 which is what percentage means (a fix from zero-g)\r\n            if (slippagePercentage?.lt(MIN_ALLOWED_SLIPPAGE * 100) || slippagePercentage?.gt(100)) {\r\n                throw new ValidationError([\r\n                    {\r\n                        field: 'slippagePercentage',\r\n                        code: ValidationErrorCodes.ValueOutOfRange,\r\n                        reason: `slippagePercentage ${slippagePercentage} is out of range`,\r\n                    },\r\n                ]);\r\n            }\r\n\r\n            if (req.query.feeType) {\r\n                if (req.query.feeType !== 'volume') {\r\n                    throw new ValidationError([\r\n                        {\r\n                            field: 'feeType',\r\n                            code: ValidationErrorCodes.IncorrectFormat,\r\n                            reason: `feeType ${req.query.feeType} is of wrong format`,\r\n                        },\r\n                    ]);\r\n                }\r\n\r\n                feeType = 'volume';\r\n                if (req.query.feeSellTokenPercentage === undefined) {\r\n                    throw new ValidationError([\r\n                        {\r\n                            field: 'feeSellTokenPercentage',\r\n                            code: ValidationErrorCodes.RequiredField,\r\n                            reason: `feeSellTokenPercentage is a required field when feeType ${feeType} is specified`,\r\n                        },\r\n                    ]);\r\n                }\r\n                feeSellTokenPercentage = new BigNumber(req.query.feeSellTokenPercentage as string);\r\n                if (feeSellTokenPercentage.lt(0) || feeSellTokenPercentage.gte(100)) {\r\n                    throw new ValidationError([\r\n                        {\r\n                            field: 'feeSellTokenPercentage',\r\n                            code: ValidationErrorCodes.ValueOutOfRange,\r\n                            reason: `feeSellTokenPercentage ${feeSellTokenPercentage} is out of range`,\r\n                        },\r\n                    ]);\r\n                }\r\n\r\n                if (req.query.feeRecipient === undefined) {\r\n                    throw new ValidationError([\r\n                        {\r\n                            field: 'feeRecipient',\r\n                            code: ValidationErrorCodes.RequiredField,\r\n                            reason: `feeRecipient is a required field when feeType ${feeType} is specified`,\r\n                        },\r\n                    ]);\r\n                }\r\n                feeRecipient = req.query.feeRecipient as string;\r\n            }\r\n        }\r\n\r\n        return {\r\n            chainId,\r\n            params: {\r\n                buyAmount,\r\n                buyToken: buyTokenContractAddress,\r\n                buyTokenDecimals,\r\n                integrator,\r\n                sellAmount,\r\n                sellToken: sellTokenContractAddress,\r\n                sellTokenDecimals,\r\n                affiliateAddress: affiliateAddress as string,\r\n                slippagePercentage,\r\n                feeType,\r\n                feeSellTokenPercentage,\r\n                feeRecipient,\r\n            },\r\n        };\r\n    }\r\n\r\n    private _parseSubmitParams<T extends ExecuteMetaTransactionEip712Context | PermitEip712Context>(\r\n        req: express.Request,\r\n    ): {\r\n        chainId: number;\r\n        integrator: Integrator;\r\n        params: SubmitRfqmSignedQuoteWithApprovalParams<T> | SubmitMetaTransactionSignedQuoteParams<T>;\r\n    } {\r\n        const chainId = extractChainId(req, this._gaslessSwapServices);\r\n        const { integrator } = this._validateApiKey(req.header('0x-api-key'), chainId);\r\n\r\n        const { approval, trade } = req.body;\r\n\r\n        const parsedParams: Partial<\r\n            SubmitRfqmSignedQuoteWithApprovalParams<T> | SubmitMetaTransactionSignedQuoteParams<T>\r\n        > = {};\r\n\r\n        // Parse approval params\r\n        if (approval) {\r\n            if (\r\n                approval.type === GaslessApprovalTypes.ExecuteMetaTransaction ||\r\n                approval.type === GaslessApprovalTypes.Permit\r\n            ) {\r\n                const eip712 = stringsToEIP712Context(approval.eip712) as T;\r\n                const signature = stringsToSignature(approval.signature as StringSignatureFields);\r\n                parsedParams.approval = {\r\n                    type: approval.type,\r\n                    eip712,\r\n                    signature,\r\n                };\r\n            } else {\r\n                throw new ValidationError([\r\n                    {\r\n                        field: 'approval',\r\n                        code: ValidationErrorCodes.FieldInvalid,\r\n                        reason: `${approval.type} is an invalid value for Approval 'type'`,\r\n                    },\r\n                ]);\r\n            }\r\n        }\r\n\r\n        // Parse trade params\r\n        if (trade.type === GaslessTypes.OtcOrder) {\r\n            const order = new OtcOrder(stringsToOtcOrderFields(trade.order as RawOtcOrderFields));\r\n            const signature = stringsToSignature(trade.signature as StringSignatureFields);\r\n            parsedParams.trade = {\r\n                type: trade.type,\r\n                order,\r\n                signature,\r\n            };\r\n        } else if (trade.type === GaslessTypes.MetaTransaction) {\r\n            const metaTransaction = new MetaTransaction(\r\n                stringsToMetaTransactionFields(trade.metaTransaction as RawMetaTransactionFields),\r\n            );\r\n            const signature = stringsToSignature(trade.signature as StringSignatureFields);\r\n            parsedParams.trade = {\r\n                type: trade.type,\r\n                metaTransaction,\r\n                signature,\r\n            };\r\n        } else {\r\n            throw new ValidationError([\r\n                {\r\n                    field: 'type',\r\n                    code: ValidationErrorCodes.FieldInvalid,\r\n                    reason: `${trade.type} is an invalid value for Trade 'type'`,\r\n                },\r\n            ]);\r\n        }\r\n\r\n        parsedParams.kind = trade.type;\r\n\r\n        return {\r\n            chainId,\r\n            integrator,\r\n            params: parsedParams as\r\n                | SubmitRfqmSignedQuoteWithApprovalParams<T>\r\n                | SubmitMetaTransactionSignedQuoteParams<T>,\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Extracts the Chain Id from the request.\r\n *\r\n * Note that legacy RFQm defaulted to a chain ID of \"1\",\r\n * but that default has been removed for Gasless Swap.\r\n */\r\nfunction extractChainId(req: express.Request, services: Map<number, GaslessSwapService>): number {\r\n    const chainIdFromHeader = req.header('0x-chain-id');\r\n    if (chainIdFromHeader === undefined) {\r\n        throw new ValidationError([\r\n            {\r\n                field: '0x-chain-id',\r\n                code: ValidationErrorCodes.FieldInvalid,\r\n                reason: 'Request must include a chain ID header',\r\n            },\r\n        ]);\r\n    }\r\n    const chainId = parseInt(chainIdFromHeader, 10);\r\n    if (Number.isNaN(chainId)) {\r\n        throw new ValidationError([\r\n            {\r\n                field: '0x-chain-id',\r\n                code: ValidationErrorCodes.FieldInvalid,\r\n                reason: 'Invalid chain id',\r\n            },\r\n        ]);\r\n    }\r\n\r\n    if (!services.has(chainId)) {\r\n        throw new ValidationError([\r\n            {\r\n                field: '0x-chain-id',\r\n                code: ValidationErrorCodes.FieldInvalid,\r\n                reason: 'Service unavailable on specified chain',\r\n            },\r\n        ]);\r\n    }\r\n    return chainId;\r\n}\r\n\r\n/**\r\n * Gets the token address for a given symbol.\r\n *\r\n * Throws if the symbol is not present in @0x/token-metadata\r\n */\r\nfunction contractAddressForSymbol(symbol: string, chainId: number): string {\r\n    const address = getTokenMetadataIfExists(symbol, chainId)?.tokenAddress;\r\n    if (!address) {\r\n        throw new Error('Unsupported token');\r\n    }\r\n    return address;\r\n}\r\n\r\nfunction validateNotNativeTokenOrThrow(token: string, chainId: number, field: string): boolean {\r\n    if (isNativeSymbolOrAddress(token, chainId)) {\r\n        const symbol = nativeWrappedTokenSymbol(chainId);\r\n        throw new ValidationError([\r\n            {\r\n                field,\r\n                code: ValidationErrorCodes.TokenNotSupported,\r\n                reason: `Unwrapped Native Asset is not supported. Use ${symbol} instead`,\r\n            },\r\n        ]);\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Get the meta-transaction type to pass to service.\r\n */\r\nfunction getMetaTransactionType(baseURL: string): GaslessTypes {\r\n    if (ZERO_G_PATH.includes(baseURL) || ZERO_G_ALIAS_PATH.includes(baseURL)) {\r\n        return GaslessTypes.MetaTransaction;\r\n    }\r\n    if (GASLESS_V1_PATH.includes(baseURL)) {\r\n        return GaslessTypes.MetaTransactionV2;\r\n    }\r\n\r\n    // This should never happen\r\n    throw new Error('Unknown gasless base URL');\r\n}\r\n"],"version":3}