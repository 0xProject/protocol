{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/quote_comparison_utils.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/quote_comparison_utils.ts"],"sourcesContent":["import { BigNumber, V4RFQIndicativeQuote } from '@0x/asset-swapper';\r\nimport { Counter } from 'prom-client';\r\n\r\nimport { ONE_SECOND_MS } from '../core/constants';\r\nimport { logger } from '../logger';\r\nimport { FirmOtcQuote, IndicativeQuote } from '../core/types';\r\n\r\nimport { toPairString } from '../core/pair_utils';\r\n\r\nconst RFQM_MAKER_BLOCKED_FOR_LOW_MAKER_BALANCE = new Counter({\r\n    name: 'rfqm_maker_blocked_for_low_maker_balance',\r\n    help: 'A maker get blocked because of low maker balance',\r\n    labelNames: ['maker_uri', 'chain_id', 'pair_key'],\r\n});\r\n\r\n/**\r\n * Selects the best quote from an array of quotes.\r\n *\r\n * Ignores quotes that:\r\n *  - are for the wrong pair\r\n *  - cannot fill 100% of the requested amount\r\n *  - expire in less than the validity window\r\n *  - cannot be filled by the maker due to insufficient balances, if quotedMakerBalances is present\r\n *      (only for firm quotes)\r\n *\r\n * And selects the one with the best price.\r\n */\r\nexport function getBestQuote<T extends IndicativeQuote | FirmOtcQuote>(\r\n    quotes: T[],\r\n    isSelling: boolean,\r\n    takerToken: string,\r\n    makerToken: string,\r\n    assetFillAmount: BigNumber,\r\n    validityWindowMs: number,\r\n    quotedMakerBalances?: BigNumber[],\r\n): T | null {\r\n    // If maker balances are provided, quotes in which maker addresses cannot provide sufficient\r\n    // balances to fully fill the order are filtered out\r\n    let isMakerFillablePredicate = (_q: T, _idx: number) => true;\r\n    if (quotedMakerBalances) {\r\n        if (quotes.length !== quotedMakerBalances.length) {\r\n            throw new Error('Quotes do not match with provided maker balances');\r\n        }\r\n        isMakerFillablePredicate = (q: T, idx: number) => {\r\n            if (isFirmQuote(q) && q.order.makerAmount.gt(quotedMakerBalances[idx])) {\r\n                RFQM_MAKER_BLOCKED_FOR_LOW_MAKER_BALANCE.labels(\r\n                    q.makerUri,\r\n                    q.order.chainId.toString(),\r\n                    toPairString(getMakerToken(q), getTakerToken(q)),\r\n                ).inc();\r\n                logger.warn(\r\n                    {\r\n                        maker: q.makerUri,\r\n                        makerBalance: quotedMakerBalances[idx],\r\n                        order: q.order,\r\n                    },\r\n                    'Quote has insufficient maker balance',\r\n                );\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n    }\r\n\r\n    const validityWindowSeconds = validityWindowMs / ONE_SECOND_MS;\r\n    const sortedQuotes = quotes\r\n        .filter(isMakerFillablePredicate)\r\n        .filter((q) => getTakerToken(q) === takerToken && getMakerToken(q) === makerToken)\r\n        .filter((q) => {\r\n            const requestedAmount = isSelling ? getTakerAmount(q) : getMakerAmount(q);\r\n            return requestedAmount.eq(assetFillAmount);\r\n        })\r\n        .filter((q) => !willQuoteExpireIn(q, validityWindowSeconds))\r\n        .sort((a, b) => {\r\n            // Want the most amount of maker tokens for each taker token\r\n            const aPrice = getMakerAmount(a).div(getTakerAmount(a));\r\n            const bPrice = getMakerAmount(b).div(getTakerAmount(b));\r\n            return bPrice.minus(aPrice).toNumber();\r\n        });\r\n\r\n    // No quotes found\r\n    if (sortedQuotes.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    // Get the best quote\r\n    return sortedQuotes[0];\r\n}\r\n\r\n/// Private getter functions\r\n\r\nconst getTakerToken = (quote: V4RFQIndicativeQuote | FirmOtcQuote): string => {\r\n    return isFirmQuote(quote) ? quote.order.takerToken : quote.takerToken;\r\n};\r\n\r\nconst getMakerToken = (quote: V4RFQIndicativeQuote | FirmOtcQuote): string => {\r\n    return isFirmQuote(quote) ? quote.order.makerToken : quote.makerToken;\r\n};\r\n\r\nconst getTakerAmount = (quote: V4RFQIndicativeQuote | FirmOtcQuote): BigNumber => {\r\n    return isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount;\r\n};\r\n\r\nconst getMakerAmount = (quote: V4RFQIndicativeQuote | FirmOtcQuote): BigNumber => {\r\n    return isFirmQuote(quote) ? quote.order.makerAmount : quote.makerAmount;\r\n};\r\n\r\nconst willQuoteExpireIn = (quote: V4RFQIndicativeQuote | FirmOtcQuote, secondsFromNow: number): boolean => {\r\n    if (isFirmQuote(quote)) {\r\n        return quote.order.willExpire(secondsFromNow);\r\n    }\r\n\r\n    // Handle indicative quote\r\n    const nowSeconds = new BigNumber(Date.now()).div(ONE_SECOND_MS);\r\n    const expirationCutoff = nowSeconds.plus(secondsFromNow);\r\n    return quote.expiry.lt(expirationCutoff);\r\n};\r\n\r\nconst isFirmQuote = (quote: V4RFQIndicativeQuote | FirmOtcQuote): quote is FirmOtcQuote => {\r\n    return (quote as FirmOtcQuote).order !== undefined;\r\n};\r\n"],"version":3}