e58bdf7dcdc0ad2ef91e1081ddf11d61
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqmWorkerHeartbeatEntity = void 0;
const utils_1 = require("@0x/utils");
const typeorm_1 = require("typeorm");
const transformers_1 = require("./transformers");
let RfqmWorkerHeartbeatEntity = class RfqmWorkerHeartbeatEntity {
    // TypeORM runs a validation check where it calls this initializer with no argument.
    // With no default `opts`, `opts` will be undefined and the validation will throw,
    // therefore, add this hacky default.
    // tslint:disable-next-line no-object-literal-type-assertion
    constructor(opts = {}) {
        if (opts.timestamp) {
            this.timestamp = opts.timestamp;
        }
        this.address = opts.address;
        this.balance = opts.balance;
        this.chainId = opts.chainId;
        this.index = opts.index;
    }
};
__decorate([
    (0, typeorm_1.PrimaryColumn)({ name: 'address', type: 'varchar' }),
    __metadata("design:type", String)
], RfqmWorkerHeartbeatEntity.prototype, "address", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'timestamp', type: 'timestamptz', default: () => 'now()' }),
    __metadata("design:type", Date)
], RfqmWorkerHeartbeatEntity.prototype, "timestamp", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'balance', type: 'numeric', transformer: transformers_1.BigNumberTransformer }),
    __metadata("design:type", utils_1.BigNumber)
], RfqmWorkerHeartbeatEntity.prototype, "balance", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'index', type: 'int' }),
    __metadata("design:type", Number)
], RfqmWorkerHeartbeatEntity.prototype, "index", void 0);
__decorate([
    (0, typeorm_1.PrimaryColumn)({ name: 'chain_id', type: 'int' }),
    __metadata("design:type", Number)
], RfqmWorkerHeartbeatEntity.prototype, "chainId", void 0);
RfqmWorkerHeartbeatEntity = __decorate([
    (0, typeorm_1.Entity)({ name: 'rfqm_worker_heartbeats' }),
    __metadata("design:paramtypes", [Object])
], RfqmWorkerHeartbeatEntity);
exports.RfqmWorkerHeartbeatEntity = RfqmWorkerHeartbeatEntity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9lbnRpdGllcy9SZnFtV29ya2VySGVhcnRiZWF0RW50aXR5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHFDQUFzQztBQUN0QyxxQ0FBd0Q7QUFFeEQsaURBQXNEO0FBTXRELElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQXlCO0lBcUJsQyxvRkFBb0Y7SUFDcEYsa0ZBQWtGO0lBQ2xGLHFDQUFxQztJQUNyQyw0REFBNEQ7SUFDNUQsWUFBWSxPQUFtQyxFQUFnQztRQUMzRSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1NBQ25DO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQzVCLENBQUM7Q0FDSixDQUFBO0FBL0JHO0lBREMsSUFBQSx1QkFBYSxFQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUM7OzBEQUM3QjtBQUl2QjtJQURDLElBQUEsZ0JBQU0sRUFBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7OEJBQ3hELElBQUk7NERBQUM7QUFJeEI7SUFEQyxJQUFBLGdCQUFNLEVBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLG1DQUFvQixFQUFFLENBQUM7OEJBQ2hFLGlCQUFTOzBEQUFDO0FBSTFCO0lBREMsSUFBQSxnQkFBTSxFQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7O3dEQUNsQjtBQUlyQjtJQURDLElBQUEsdUJBQWEsRUFBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDOzswREFDMUI7QUFuQmQseUJBQXlCO0lBRHJDLElBQUEsZ0JBQU0sRUFBQyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxDQUFDOztHQUM5Qix5QkFBeUIsQ0FrQ3JDO0FBbENZLDhEQUF5QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvc3JjL2VudGl0aWVzL1JmcW1Xb3JrZXJIZWFydGJlYXRFbnRpdHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnQDB4L3V0aWxzJztcbmltcG9ydCB7IENvbHVtbiwgRW50aXR5LCBQcmltYXJ5Q29sdW1uIH0gZnJvbSAndHlwZW9ybSc7XG5cbmltcG9ydCB7IEJpZ051bWJlclRyYW5zZm9ybWVyIH0gZnJvbSAnLi90cmFuc2Zvcm1lcnMnO1xuXG5leHBvcnQgdHlwZSBSZnFtV29ya2VySGVhcnRiZWF0T3B0aW9ucyA9IFBpY2s8UmZxbVdvcmtlckhlYXJ0YmVhdEVudGl0eSwgJ2FkZHJlc3MnIHwgJ2JhbGFuY2UnIHwgJ2luZGV4JyB8ICdjaGFpbklkJz4gJlxuICAgIFBhcnRpYWw8UmZxbVdvcmtlckhlYXJ0YmVhdEVudGl0eT47XG5cbkBFbnRpdHkoeyBuYW1lOiAncmZxbV93b3JrZXJfaGVhcnRiZWF0cycgfSlcbmV4cG9ydCBjbGFzcyBSZnFtV29ya2VySGVhcnRiZWF0RW50aXR5IHtcbiAgICAvLyBUaGUgYmxvY2tjaGFpbiBhZGRyZXNzIG9mIHRoZSB3b3JrZXJcbiAgICBAUHJpbWFyeUNvbHVtbih7IG5hbWU6ICdhZGRyZXNzJywgdHlwZTogJ3ZhcmNoYXInIH0pXG4gICAgcHVibGljIGFkZHJlc3M6IHN0cmluZztcblxuICAgIC8vIFRoZSB0aW1lIHRoZSByZXBvcnQgd2FzIGNyZWF0ZWRcbiAgICBAQ29sdW1uKHsgbmFtZTogJ3RpbWVzdGFtcCcsIHR5cGU6ICd0aW1lc3RhbXB0eicsIGRlZmF1bHQ6ICgpID0+ICdub3coKScgfSlcbiAgICBwdWJsaWMgdGltZXN0YW1wITogRGF0ZTtcblxuICAgIC8vIFRoZSBuYXRpdmUgdG9rZW4gYmFsYW5jZSBvZiB0aGUgd29ya2VyXG4gICAgQENvbHVtbih7IG5hbWU6ICdiYWxhbmNlJywgdHlwZTogJ251bWVyaWMnLCB0cmFuc2Zvcm1lcjogQmlnTnVtYmVyVHJhbnNmb3JtZXIgfSlcbiAgICBwdWJsaWMgYmFsYW5jZTogQmlnTnVtYmVyO1xuXG4gICAgLy8gVGhlIHdvcmtlciBpbmRleCBhc3NpZ25lZCB0byB0aGUgd29ya2VyJ3MgRU5WIGJ5IEt1YmVybmV0ZXNcbiAgICBAQ29sdW1uKHsgbmFtZTogJ2luZGV4JywgdHlwZTogJ2ludCcgfSlcbiAgICBwdWJsaWMgaW5kZXg6IG51bWJlcjtcblxuICAgIC8vIFRoZSBjaGFpbiBJRCBvZiB0aGUgY2hhaW4gdGhlIHdvcmtlciBpcyBhY3RpdmUgb24uXG4gICAgQFByaW1hcnlDb2x1bW4oeyBuYW1lOiAnY2hhaW5faWQnLCB0eXBlOiAnaW50JyB9KVxuICAgIHB1YmxpYyBjaGFpbklkOiBudW1iZXI7XG5cbiAgICAvLyBUeXBlT1JNIHJ1bnMgYSB2YWxpZGF0aW9uIGNoZWNrIHdoZXJlIGl0IGNhbGxzIHRoaXMgaW5pdGlhbGl6ZXIgd2l0aCBubyBhcmd1bWVudC5cbiAgICAvLyBXaXRoIG5vIGRlZmF1bHQgYG9wdHNgLCBgb3B0c2Agd2lsbCBiZSB1bmRlZmluZWQgYW5kIHRoZSB2YWxpZGF0aW9uIHdpbGwgdGhyb3csXG4gICAgLy8gdGhlcmVmb3JlLCBhZGQgdGhpcyBoYWNreSBkZWZhdWx0LlxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSBuby1vYmplY3QtbGl0ZXJhbC10eXBlLWFzc2VydGlvblxuICAgIGNvbnN0cnVjdG9yKG9wdHM6IFJmcW1Xb3JrZXJIZWFydGJlYXRPcHRpb25zID0ge30gYXMgUmZxbVdvcmtlckhlYXJ0YmVhdE9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdHMudGltZXN0YW1wKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVzdGFtcCA9IG9wdHMudGltZXN0YW1wO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IG9wdHMuYWRkcmVzcztcbiAgICAgICAgdGhpcy5iYWxhbmNlID0gb3B0cy5iYWxhbmNlO1xuICAgICAgICB0aGlzLmNoYWluSWQgPSBvcHRzLmNoYWluSWQ7XG4gICAgICAgIHRoaXMuaW5kZXggPSBvcHRzLmluZGV4O1xuICAgIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==