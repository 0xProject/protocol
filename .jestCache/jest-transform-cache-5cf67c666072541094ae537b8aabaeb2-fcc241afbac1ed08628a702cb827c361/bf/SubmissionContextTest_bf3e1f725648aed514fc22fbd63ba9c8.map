{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/SubmissionContextTest.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/SubmissionContextTest.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { expect } from 'chai';\nimport { BigNumber as EthersBigNumber, providers } from 'ethers';\nimport { deepEqual, instance, mock, when } from 'ts-mockito';\n\nimport { ONE_SECOND_MS } from '../../src/core/constants';\nimport { RfqmV2TransactionSubmissionEntity } from '../../src/entities';\nimport {\n    RfqmTransactionSubmissionStatus,\n    RfqmTransactionSubmissionType,\n    SubmissionContextStatus,\n} from '../../src/entities/types';\nimport { RfqBlockchainUtils } from '../../src/utils/rfq_blockchain_utils';\nimport { SubmissionContext } from '../../src/utils/SubmissionContext';\n\ntype TransactionReceipt = providers.TransactionReceipt;\n\nlet mockBlockchainUtils: RfqBlockchainUtils;\n\ndescribe('SubmissionContext', () => {\n    beforeEach(() => {\n        mockBlockchainUtils = mock<RfqBlockchainUtils>();\n    });\n    describe('constructor', () => {\n        it('requires a transaction', () => {\n            expect(() => new SubmissionContext(instance(mockBlockchainUtils), [])).to.throw('nonzero');\n        });\n\n        it('requires all transactions to have unique hashes', () => {\n            const transaction1 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                gasPrice: new BigNumber(1),\n            });\n            const transaction2 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                gasPrice: new BigNumber(1),\n            });\n\n            expect(() => new SubmissionContext(instance(mockBlockchainUtils), [transaction1, transaction2])).to.throw(\n                'unique',\n            );\n        });\n\n        it('requires all transactions to have the same nonce', () => {\n            const transaction1 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                gasPrice: new BigNumber(1),\n            });\n            const transaction2 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x2',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 1,\n                gasPrice: new BigNumber(1),\n            });\n\n            expect(() => new SubmissionContext(instance(mockBlockchainUtils), [transaction1, transaction2])).to.throw(\n                'nonce',\n            );\n        });\n\n        it('requires all transactions to have the same gas format', () => {\n            const transaction1 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                gasPrice: new BigNumber(1),\n            });\n            const transaction2 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x2',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxFeePerGas: new BigNumber(1),\n                maxPriorityFeePerGas: new BigNumber(1),\n            });\n\n            expect(() => new SubmissionContext(instance(mockBlockchainUtils), [transaction1, transaction2])).to.throw(\n                'type',\n            );\n        });\n\n        it('fails for invalid EIP-1559 transactions', () => {\n            const transaction = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxPriorityFeePerGas: new BigNumber(1),\n            });\n\n            expect(() => new SubmissionContext(instance(mockBlockchainUtils), [transaction])).to.throw();\n        });\n    });\n    describe('get transactionType', () => {\n        it('handles type-0 transactions', () => {\n            const transaction = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                gasPrice: new BigNumber(1),\n            });\n\n            const submissionContext = new SubmissionContext(instance(mockBlockchainUtils), [transaction]);\n\n            expect(submissionContext.transactionType).to.equal(0);\n        });\n\n        it('handles type-2 transactions', () => {\n            const transaction = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxFeePerGas: new BigNumber(1),\n                maxPriorityFeePerGas: new BigNumber(1),\n            });\n\n            const submissionContext = new SubmissionContext(instance(mockBlockchainUtils), [transaction]);\n\n            expect(submissionContext.transactionType).to.equal(2);\n        });\n    });\n\n    describe('maxGasPrice', () => {\n        it('throws for EIP-1559 transactions', () => {\n            const transaction = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxFeePerGas: new BigNumber(1),\n                maxPriorityFeePerGas: new BigNumber(1),\n            });\n\n            const submissionContext = new SubmissionContext(instance(mockBlockchainUtils), [transaction]);\n\n            expect(() => submissionContext.maxGasPrice).to.throw('EIP-1559');\n        });\n\n        it('gets the max gas price', () => {\n            const transaction1 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                gasPrice: new BigNumber(1),\n            });\n            const transaction2 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x2',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                gasPrice: new BigNumber(2),\n            });\n\n            const submissionContext = new SubmissionContext(instance(mockBlockchainUtils), [\n                transaction1,\n                transaction2,\n            ]);\n\n            expect(submissionContext.maxGasPrice.toNumber()).to.equal(new BigNumber(2).toNumber());\n        });\n    });\n\n    describe('maxGasFees', () => {\n        it('throws for non-EIP-1559 transactions', () => {\n            const transaction = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                gasPrice: new BigNumber(1),\n            });\n\n            const submissionContext = new SubmissionContext(instance(mockBlockchainUtils), [transaction]);\n\n            expect(() => submissionContext.maxGasFees).to.throw('non-EIP-1559');\n        });\n\n        it('gets the max gas fees', () => {\n            const transaction1 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxFeePerGas: new BigNumber(0),\n                maxPriorityFeePerGas: new BigNumber(1),\n            });\n            const transaction2 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x2',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxFeePerGas: new BigNumber(1),\n                maxPriorityFeePerGas: new BigNumber(0),\n            });\n\n            const submissionContext = new SubmissionContext(instance(mockBlockchainUtils), [\n                transaction1,\n                transaction2,\n            ]);\n\n            expect(submissionContext.maxGasFees.maxFeePerGas.toNumber()).to.equal(new BigNumber(1).toNumber());\n            expect(submissionContext.maxGasFees.maxPriorityFeePerGas.toNumber()).to.equal(new BigNumber(1).toNumber());\n        });\n    });\n\n    describe('get firstSubmissionTimestampS', () => {\n        it('gets the earliest time a transaction in the context was submitted', () => {\n            const fakeEarlierMs = 1640307189361;\n            const fakeLaterMs = 1650307189361;\n            const transaction1 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                createdAt: new Date(fakeLaterMs),\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxFeePerGas: new BigNumber(0),\n                maxPriorityFeePerGas: new BigNumber(1),\n            });\n            const transaction2 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                createdAt: new Date(fakeEarlierMs), // Transaction 2 is older\n                transactionHash: '0x2',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxFeePerGas: new BigNumber(1),\n                maxPriorityFeePerGas: new BigNumber(0),\n            });\n\n            const submissionContext = new SubmissionContext(instance(mockBlockchainUtils), [\n                transaction1,\n                transaction2,\n            ]);\n\n            expect(submissionContext.firstSubmissionTimestampS).to.equal(Math.round(fakeEarlierMs / ONE_SECOND_MS));\n        });\n    });\n\n    describe('getReceiptsAsync', () => {\n        it('returns null if no transactions have been mined', async () => {\n            const transaction = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxFeePerGas: new BigNumber(1),\n                maxPriorityFeePerGas: new BigNumber(1),\n            });\n\n            when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0x1']))).thenResolve([undefined]);\n\n            const submissionContext = new SubmissionContext(instance(mockBlockchainUtils), [transaction]);\n\n            expect(await submissionContext.getReceiptAsync()).to.equal(null);\n        });\n\n        it('returns one transaction receipt have been mined', async () => {\n            const transaction1 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxFeePerGas: new BigNumber(1),\n                maxPriorityFeePerGas: new BigNumber(1),\n            });\n\n            const transaction2 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x2',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxFeePerGas: new BigNumber(1),\n                maxPriorityFeePerGas: new BigNumber(1),\n            });\n\n            const receipt: TransactionReceipt = {\n                to: '0xto',\n                from: '0xfrom',\n                contractAddress: '0xcontract',\n                transactionIndex: 1,\n                gasUsed: EthersBigNumber.from(1),\n                logsBloom: '',\n                blockHash: '0xblockhash',\n                transactionHash: '0x1',\n                logs: [],\n                blockNumber: 123,\n                confirmations: 1,\n                cumulativeGasUsed: EthersBigNumber.from(1),\n                effectiveGasPrice: EthersBigNumber.from(1),\n                byzantium: true,\n                type: 2,\n                status: 1,\n            };\n\n            when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0x1', '0x2']))).thenResolve([receipt, undefined]);\n\n            const submissionContext = new SubmissionContext(instance(mockBlockchainUtils), [\n                transaction1,\n                transaction2,\n            ]);\n\n            expect(await submissionContext.getReceiptAsync()).to.equal(receipt);\n        });\n\n        it('throws if multiple receipts are returned', () => {\n            const transaction1 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxFeePerGas: new BigNumber(1),\n                maxPriorityFeePerGas: new BigNumber(1),\n            });\n\n            const transaction2 = new RfqmV2TransactionSubmissionEntity({\n                type: RfqmTransactionSubmissionType.Trade,\n                transactionHash: '0x2',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxFeePerGas: new BigNumber(1),\n                maxPriorityFeePerGas: new BigNumber(1),\n            });\n\n            const receipt: TransactionReceipt = {\n                to: '0xto',\n                from: '0xfrom',\n                contractAddress: '0xcontract',\n                transactionIndex: 1,\n                gasUsed: EthersBigNumber.from(1),\n                logsBloom: '',\n                blockHash: '0xblockhash',\n                transactionHash: '0x1',\n                logs: [],\n                blockNumber: 123,\n                confirmations: 1,\n                cumulativeGasUsed: EthersBigNumber.from(1),\n                effectiveGasPrice: EthersBigNumber.from(1),\n                byzantium: true,\n                type: 2,\n                status: 1,\n            };\n\n            when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0x1', '0x2']))).thenResolve([receipt, receipt]);\n\n            const submissionContext = new SubmissionContext(instance(mockBlockchainUtils), [\n                transaction1,\n                transaction2,\n            ]);\n\n            expect(submissionContext.getReceiptAsync()).to.eventually.be.rejectedWith(\n                'more than one transaction receipt',\n            );\n        });\n\n        describe('isBlockConfirmed', () => {\n            it('should say no if receipt block is under 3 blocks deep', async () => {\n                const receiptBlock = 100;\n                const currentBlock = 102;\n\n                expect(SubmissionContext.isBlockConfirmed(currentBlock, receiptBlock)).to.equal(false);\n            });\n            it('should say yes if the receipt block is at least 3 blocks deep', async () => {\n                const receiptBlock = 100;\n                const currentBlock = 103;\n\n                expect(SubmissionContext.isBlockConfirmed(currentBlock, receiptBlock)).to.equal(true);\n            });\n        });\n\n        describe('submissionContextStatus', () => {\n            it('should return `PendingSubmitted` if none of the transactions is resolved', async () => {\n                const transaction1 = new RfqmV2TransactionSubmissionEntity({\n                    type: RfqmTransactionSubmissionType.Trade,\n                    transactionHash: '0x1',\n                    from: '0xfrom',\n                    to: '0xto',\n                    orderHash: '0xOrderhash',\n                    nonce: 0,\n                    maxFeePerGas: new BigNumber(1),\n                    maxPriorityFeePerGas: new BigNumber(1),\n                    status: RfqmTransactionSubmissionStatus.Submitted,\n                });\n\n                const transaction2 = new RfqmV2TransactionSubmissionEntity({\n                    type: RfqmTransactionSubmissionType.Trade,\n                    transactionHash: '0x2',\n                    from: '0xfrom',\n                    to: '0xto',\n                    orderHash: '0xOrderhash',\n                    nonce: 0,\n                    maxFeePerGas: new BigNumber(1),\n                    maxPriorityFeePerGas: new BigNumber(1),\n                    status: RfqmTransactionSubmissionStatus.Submitted,\n                });\n\n                const submissionContext = new SubmissionContext(instance(mockBlockchainUtils), [\n                    transaction1,\n                    transaction2,\n                ]);\n\n                expect(submissionContext.submissionContextStatus).to.deep.equal(\n                    SubmissionContextStatus.PendingSubmitted,\n                );\n            });\n\n            it('should return the correct status if one of the transactions is resolved', async () => {\n                const transaction1 = new RfqmV2TransactionSubmissionEntity({\n                    type: RfqmTransactionSubmissionType.Trade,\n                    transactionHash: '0x1',\n                    from: '0xfrom',\n                    to: '0xto',\n                    orderHash: '0xOrderhash',\n                    nonce: 0,\n                    maxFeePerGas: new BigNumber(1),\n                    maxPriorityFeePerGas: new BigNumber(1),\n                    status: RfqmTransactionSubmissionStatus.Submitted,\n                });\n\n                const transaction2 = new RfqmV2TransactionSubmissionEntity({\n                    type: RfqmTransactionSubmissionType.Trade,\n                    transactionHash: '0x2',\n                    from: '0xfrom',\n                    to: '0xto',\n                    orderHash: '0xOrderhash',\n                    nonce: 0,\n                    maxFeePerGas: new BigNumber(1),\n                    maxPriorityFeePerGas: new BigNumber(1),\n                    status: RfqmTransactionSubmissionStatus.SucceededConfirmed,\n                });\n\n                const submissionContext = new SubmissionContext(instance(mockBlockchainUtils), [\n                    transaction1,\n                    transaction2,\n                ]);\n\n                expect(submissionContext.submissionContextStatus).to.deep.equal(\n                    SubmissionContextStatus.SucceededConfirmed,\n                );\n            });\n        });\n    });\n});\n"],"version":3}