965a27a21569ec7feea9d95f38fdab80
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LLR_COOLDOWN_WINDOW_SECONDS = exports.GAS_ESTIMATE_BUFFER = exports.PERMIT_EIP_712_TYPES = exports.EXECUTE_META_TRANSACTION_EIP_712_TYPES = exports.DEFAULT_BACKGROUND_JOB_TYPES = exports.MAKER_TOKEN_BALANCE_EXPIRY_SECONDS = exports.PROMETHEUS_REQUEST_BUCKETS = exports.SINGLE_MESSAGE = exports.LONG_POLLING_WAIT_TIME_SECONDS = exports.ZEROG_METATX_GAS_ESTIMATE = exports.RFQM_TX_OTC_ORDER_GAS_ESTIMATE = exports.RFQM_TX_GAS_ESTIMATE = exports.RFQ_ALLOWANCE_TARGET = exports.DEFAULT_MIN_EXPIRY_DURATION_MS = exports.GWEI_DECIMALS = exports.ETH_DECIMALS = exports.DEFAULT_EXPECTED_MINED_SEC = exports.DEFAULT_ETH_GAS_STATION_API_URL = exports.ADMIN_PATH = exports.HEALTHCHECK_PATH = exports.RFQ_MAKER_API_KEY_HEADER = exports.RFQ_MAKER_PATH = exports.TX_RELAY_V1_PATH = exports.ZERO_G_PATH = exports.ZERO_G_ALIAS_PATH = exports.RFQT_V2_PATH = exports.RFQT_V1_PATH = exports.RFQM_PATH = exports.METRICS_PATH = exports.DEFAULT_WORKER_TRANSACTION_WATCHER_SLEEP_TIME_MS = exports.KEEP_ALIVE_TTL = exports.GASLESS_OTC_ORDER_NUM_BUCKETS = exports.BPS_TO_RATIO = exports.HEX_BASE = exports.TEN_MINUTES_MS = exports.ONE_MINUTE_MS = exports.ONE_HOUR_S = exports.ONE_MINUTE_S = exports.ONE_SECOND_MS = exports.DEFAULT_LOGGER_INCLUDE_TIMESTAMP = exports.DEFAULT_LOCAL_REDIS_URI = exports.DEFAULT_SENTRY_ENVIRONMENT = exports.DEFAULT_LOCAL_POSTGRES_URI = exports.ZERO = exports.NULL_BYTES = exports.NULL_ADDRESS = void 0;
const utils_1 = require("@0x/utils");
const prom_client_1 = require("prom-client");
// tslint:disable:custom-no-magic-numbers
exports.NULL_ADDRESS = '0x0000000000000000000000000000000000000000';
exports.NULL_BYTES = '0x';
exports.ZERO = new utils_1.BigNumber(0);
exports.DEFAULT_LOCAL_POSTGRES_URI = 'postgres://api:api@localhost/api';
exports.DEFAULT_SENTRY_ENVIRONMENT = 'development';
exports.DEFAULT_LOCAL_REDIS_URI = 'redis://localhost';
exports.DEFAULT_LOGGER_INCLUDE_TIMESTAMP = true;
exports.ONE_SECOND_MS = 1000;
exports.ONE_MINUTE_S = 60;
exports.ONE_HOUR_S = exports.ONE_MINUTE_S * 60;
exports.ONE_MINUTE_MS = exports.ONE_SECOND_MS * 60;
exports.TEN_MINUTES_MS = exports.ONE_MINUTE_MS * 10;
exports.HEX_BASE = 16;
// Constant to convert number of bps to ratio. E.g. 5 bps = 5 * 0.0001
exports.BPS_TO_RATIO = 0.0001;
// Gasless OtcOrder constants
exports.GASLESS_OTC_ORDER_NUM_BUCKETS = 1000;
// RFQM Service
exports.KEEP_ALIVE_TTL = exports.ONE_MINUTE_MS * 5;
exports.DEFAULT_WORKER_TRANSACTION_WATCHER_SLEEP_TIME_MS = exports.ONE_SECOND_MS * 15;
// API namespaces
exports.METRICS_PATH = '/metrics';
exports.RFQM_PATH = '/rfqm/v1';
exports.RFQT_V1_PATH = '/rfqt/v1'; // RFQt should be internal in general, but as v1 will be deprecated soon we won't update it.
exports.RFQT_V2_PATH = '/internal/rfqt/v2';
exports.ZERO_G_ALIAS_PATH = '/zero-gas/swap/v1';
exports.ZERO_G_PATH = '/zero-g/swap/v1';
exports.TX_RELAY_V1_PATH = '/tx-relay/v1/swap';
exports.RFQ_MAKER_PATH = '/maker/v1';
exports.RFQ_MAKER_API_KEY_HEADER = '0x-maker-api-key';
exports.HEALTHCHECK_PATH = '/healthz';
exports.ADMIN_PATH = '/admin/v1';
// Meta Transactions
exports.DEFAULT_ETH_GAS_STATION_API_URL = 'https://ethgasstation.api.0x.org/api/ethgasAPI.json';
// TransactionWatcher
// The expected time of a transaction to be mined according to ETHGasStation
// "Fast" gas price estimations multiplied by a safety margin.
exports.DEFAULT_EXPECTED_MINED_SEC = 120 * 1.5;
exports.ETH_DECIMALS = 18;
exports.GWEI_DECIMALS = 9;
// RFQ quote minimum expiry
exports.DEFAULT_MIN_EXPIRY_DURATION_MS = exports.ONE_MINUTE_MS;
exports.RFQ_ALLOWANCE_TARGET = '0xdef1c0ded9bec7f1a1670819833240f027b25eff';
exports.RFQM_TX_GAS_ESTIMATE = 165e3;
exports.RFQM_TX_OTC_ORDER_GAS_ESTIMATE = 100e3;
exports.ZEROG_METATX_GAS_ESTIMATE = 500e3;
// SQS Client
exports.LONG_POLLING_WAIT_TIME_SECONDS = 20;
exports.SINGLE_MESSAGE = 1;
// Prometheus shared metrics
exports.PROMETHEUS_REQUEST_BUCKETS = (0, prom_client_1.linearBuckets)(0, 0.25, 25); // [ 0,  0.25,  0.5,  0.75, ... 5 ]
// Redis Client
exports.MAKER_TOKEN_BALANCE_EXPIRY_SECONDS = 30;
// Default list of background jobs that the processor would execute
exports.DEFAULT_BACKGROUND_JOB_TYPES = 'no_op';
exports.EXECUTE_META_TRANSACTION_EIP_712_TYPES = {
    MetaTransaction: [
        { name: 'nonce', type: 'uint256' },
        { name: 'from', type: 'address' },
        { name: 'functionSignature', type: 'bytes' },
    ],
};
exports.PERMIT_EIP_712_TYPES = {
    Permit: [
        { name: 'owner', type: 'address' },
        { name: 'spender', type: 'address' },
        { name: 'value', type: 'uint256' },
        { name: 'nonce', type: 'uint256' },
        { name: 'deadline', type: 'uint256' },
    ],
};
// Default buffer for gas estimation returned by `eth_estimateGas`. For example, 0.5 means to
// add a 50% buffer.
exports.GAS_ESTIMATE_BUFFER = 0.5;
// Time window to apply last look rejections (LLRs) cooldown, in seconds. Any LLRs for quotes
// submited within the window are considered as `bad` LLRs, and the maker will be cooldown.
exports.LLR_COOLDOWN_WINDOW_SECONDS = 30;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,