f81d8c3102e4dbc24f52f3dbd057dfda
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuoteRequestor = void 0;
// tslint:disable: max-file-line-count
const types_1 = require("@0x/asset-swapper/lib/src/types");
const json_schemas_1 = require("@0x/json-schemas");
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const axios_1 = require("axios");
const config_1 = require("../config");
const constants_1 = require("../core/constants");
const pair_utils_1 = require("../core/pair_utils");
const logger_1 = require("../logger");
const altMmImplementaionUtils_1 = require("./altMmImplementaionUtils");
const rfqMakerBlacklist_1 = require("./rfqMakerBlacklist");
// Matches value at
// https://github.com/0xProject/protocol/blob/d3d4a08f917a084f72b649fc1b0b322c22f98129/packages/asset-swapper/src/constants.ts#L34
const EXPIRY_BUFFER_MS = 120000;
const MAKER_TIMEOUT_STREAK_LENGTH = 10;
const MAKER_TIMEOUT_BLACKLIST_DURATION_MINUTES = 10;
const FILL_RATIO_WARNING_LEVEL = 0.99;
const rfqMakerBlacklist = new rfqMakerBlacklist_1.RfqMakerBlacklist(MAKER_TIMEOUT_STREAK_LENGTH, MAKER_TIMEOUT_BLACKLIST_DURATION_MINUTES);
// Stables
const USDC = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';
const USDT = '0xdac17f958d2ee523a2206206994597c13d831ec7';
const DAI = '0x6b175474e89094c44da98b954eedeac495271d0f';
const BUSD = '0x4fabb145d64652a948d72533023f6e7a623c7c53';
const TUSD = '0x0000000000085d4780b73119b644ae5ecd22b376';
// Other assets
const WETH = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2';
const WBTC = '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599';
const MATIC = '0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0';
const DISABLED_RFQT_V1_TOKENS = [USDC, USDT, DAI, BUSD, TUSD, WETH, WBTC, MATIC];
const DISABLED_RFQT_V1_PAIRS_SET = new Set(DISABLED_RFQT_V1_TOKENS.flatMap((token) => DISABLED_RFQT_V1_TOKENS.filter((t) => t !== token).map((otherToken) => (0, pair_utils_1.toPairString)(token, otherToken))));
/**
 * Request quotes from RFQ-T providers
 */
function hasExpectedAddresses(comparisons) {
    return comparisons.every((c) => c[0].toLowerCase() === c[1].toLowerCase());
}
// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function convertIfAxiosError(error) {
    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
    // eslint-disable-next-line no-prototype-builtins
    if (error.hasOwnProperty('isAxiosError') && error.isAxiosError) {
        const { message, name, config } = error;
        const { headers, timeout, httpsAgent } = config;
        const { keepAlive, keepAliveMsecs, sockets } = httpsAgent;
        const socketCounts = {};
        for (const socket of Object.keys(sockets)) {
            socketCounts[socket] = sockets[socket].length;
        }
        return {
            message,
            name,
            config: {
                headers,
                timeout,
                httpsAgent: {
                    keepAlive,
                    keepAliveMsecs,
                    socketCounts,
                },
            },
        };
    }
    else {
        return error;
    }
}
function nativeDataToId(data) {
    const { v, r, s } = data.signature;
    return `${v}${r}${s}`;
}
class QuoteRequestor {
    constructor(_rfqtAssetOfferings, _quoteRequestorHttpClient, _altRfqCreds, _expiryBufferMs = EXPIRY_BUFFER_MS, _metrics) {
        this._rfqtAssetOfferings = _rfqtAssetOfferings;
        this._quoteRequestorHttpClient = _quoteRequestorHttpClient;
        this._altRfqCreds = _altRfqCreds;
        this._expiryBufferMs = _expiryBufferMs;
        this._metrics = _metrics;
        this._schemaValidator = new json_schemas_1.SchemaValidator();
        this._orderSignatureToMakerUri = {};
    }
    static makeQueryParameters(txOrigin, takerAddress, marketOperation, buyTokenAddress, // maker token
    sellTokenAddress, // taker token
    assetFillAmount, comparisonPrice, isLastLook, fee) {
        const { buyAmountBaseUnits, sellAmountBaseUnits } = marketOperation === types_1.MarketOperation.Buy
            ? {
                buyAmountBaseUnits: assetFillAmount,
                sellAmountBaseUnits: undefined,
            }
            : {
                sellAmountBaseUnits: assetFillAmount,
                buyAmountBaseUnits: undefined,
            };
        const requestParamsWithBigNumbers = {
            txOrigin,
            takerAddress,
            buyTokenAddress,
            sellTokenAddress,
            comparisonPrice: comparisonPrice === undefined ? undefined : comparisonPrice.toString(),
            protocolVersion: '4',
        };
        if (isLastLook) {
            if (fee === undefined) {
                throw new Error(`isLastLook cannot be passed without a fee parameter`);
            }
            requestParamsWithBigNumbers.isLastLook = isLastLook.toString();
            requestParamsWithBigNumbers.feeAmount = fee.amount.toString();
            requestParamsWithBigNumbers.feeToken = fee.token;
            requestParamsWithBigNumbers.feeType = fee.type;
        }
        // convert BigNumbers to strings
        // so they are digestible by axios
        if (sellAmountBaseUnits) {
            return {
                ...requestParamsWithBigNumbers,
                sellAmountBaseUnits: sellAmountBaseUnits.toString(),
            };
        }
        else if (buyAmountBaseUnits) {
            return {
                ...requestParamsWithBigNumbers,
                buyAmountBaseUnits: buyAmountBaseUnits.toString(),
            };
        }
        else {
            throw new Error('Neither "buyAmountBaseUnits" or "sellAmountBaseUnits" were defined');
        }
    }
    /**
     * Gets both standard RFQ makers and "alternative" RFQ makers and combines them together
     * in a single configuration map. If an integration key whitelist is present, it will be used
     * to filter a specific makers.
     *
     * @param options the RfqmRequestOptions passed in
     * @param assetOfferings the RFQM or RFQT maker offerings
     * @returns a list of TypedMakerUrl instances
     */
    static getTypedMakerUrlsAndWhitelist(options, assetOfferings) {
        const standardUrls = Object.keys(assetOfferings).map((mm) => {
            return { pairType: types_1.RfqPairType.Standard, url: mm };
        });
        const altUrls = options.altRfqAssetOfferings
            ? Object.keys(options.altRfqAssetOfferings).map((mm) => {
                return { pairType: types_1.RfqPairType.Alt, url: mm };
            })
            : [];
        let typedMakerUrls = standardUrls.concat(altUrls);
        // If there is a whitelist, only allow approved maker URLs
        if (options.integrator.whitelistIntegratorUrls !== undefined) {
            const whitelist = new Set(options.integrator.whitelistIntegratorUrls.map((key) => key.toLowerCase()));
            typedMakerUrls = typedMakerUrls.filter((makerUrl) => whitelist.has(makerUrl.url.toLowerCase()));
        }
        return typedMakerUrls;
    }
    static getDurationUntilExpirationMs(expirationTimeSeconds) {
        const expirationTimeMs = expirationTimeSeconds.times(constants_1.ONE_SECOND_MS);
        const currentTimeMs = new utils_1.BigNumber(Date.now());
        return utils_1.BigNumber.max(expirationTimeMs.minus(currentTimeMs), 0);
    }
    static _makerSupportsPair(typedMakerUrl, makerToken, takerToken, altMakerAssetOfferings, assetOfferings) {
        // Turn off RFQt v1 for these pairs
        if (DISABLED_RFQT_V1_PAIRS_SET.has((0, pair_utils_1.toPairString)(makerToken, takerToken))) {
            return false;
        }
        if (typedMakerUrl.pairType === types_1.RfqPairType.Standard && assetOfferings) {
            for (const assetPair of assetOfferings[typedMakerUrl.url]) {
                if ((assetPair[0] === makerToken && assetPair[1] === takerToken) ||
                    (assetPair[0] === takerToken && assetPair[1] === makerToken)) {
                    return true;
                }
            }
        }
        else if (typedMakerUrl.pairType === types_1.RfqPairType.Alt && altMakerAssetOfferings) {
            for (const altAssetPair of altMakerAssetOfferings[typedMakerUrl.url]) {
                if ((altAssetPair.baseAsset === makerToken && altAssetPair.quoteAsset === takerToken) ||
                    (altAssetPair.baseAsset === takerToken && altAssetPair.quoteAsset === makerToken)) {
                    return true;
                }
            }
        }
        return false;
    }
    async requestRfqtFirmQuotesAsync(makerToken, // maker token
    takerToken, // taker token
    assetFillAmount, marketOperation, comparisonPrice, options) {
        const _opts = { makerEndpointMaxResponseTimeMs: config_1.RFQ_PRICE_ENDPOINT_TIMEOUT_MS, ...options };
        if (!_opts.txOrigin || [undefined, '', '0x', utils_1.NULL_ADDRESS].includes(_opts.txOrigin)) {
            throw new Error('RFQ-T firm quotes require the presence of a tx origin');
        }
        return this._fetchAndValidateFirmQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, _opts, this._rfqtAssetOfferings);
    }
    async requestRfqtIndicativeQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, options) {
        const _opts = { makerEndpointMaxResponseTimeMs: config_1.RFQ_PRICE_ENDPOINT_TIMEOUT_MS, ...options };
        // Originally a takerAddress was required for indicative quotes, but
        // now we've eliminated that requirement.  @0x/quote-server, however,
        // is still coded to expect a takerAddress.  So if the client didn't
        // send one, just use the null address to satisfy the quote server's
        // expectations.
        if (!_opts.takerAddress) {
            _opts.takerAddress = utils_1.NULL_ADDRESS;
        }
        if (!_opts.txOrigin) {
            _opts.txOrigin = utils_1.NULL_ADDRESS;
        }
        return this._fetchAndValidateIndicativeQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, _opts, this._rfqtAssetOfferings);
    }
    /**
     * Given an order signature, returns the makerUri that the order originated from
     */
    getMakerUriForSignature(signature) {
        return this._orderSignatureToMakerUri[nativeDataToId({ signature })];
    }
    _isValidRfqtIndicativeQuoteResponse(response) {
        const requiredKeys = [
            'makerAmount',
            'takerAmount',
            'makerToken',
            'takerToken',
            'expiry',
        ];
        for (const k of requiredKeys) {
            if (response[k] === undefined) {
                return false;
            }
        }
        // TODO (jacob): I have a feeling checking 5 schemas is slower then checking one
        const hasValidMakerAssetAmount = this._schemaValidator.isValid(response.makerAmount, json_schemas_1.schemas.wholeNumberSchema);
        const hasValidTakerAssetAmount = this._schemaValidator.isValid(response.takerAmount, json_schemas_1.schemas.wholeNumberSchema);
        const hasValidMakerToken = this._schemaValidator.isValid(response.makerToken, json_schemas_1.schemas.hexSchema);
        const hasValidTakerToken = this._schemaValidator.isValid(response.takerToken, json_schemas_1.schemas.hexSchema);
        const hasValidExpirationTimeSeconds = this._schemaValidator.isValid(response.expiry, json_schemas_1.schemas.wholeNumberSchema);
        if (!hasValidMakerAssetAmount ||
            !hasValidTakerAssetAmount ||
            !hasValidMakerToken ||
            !hasValidTakerToken ||
            !hasValidExpirationTimeSeconds) {
            return false;
        }
        return true;
    }
    async _getQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, options, quoteType, assetOfferings) {
        const requestParams = QuoteRequestor.makeQueryParameters(options.txOrigin, options.takerAddress, marketOperation, makerToken, takerToken, assetFillAmount, comparisonPrice, options.isLastLook, options.fee);
        const quotePath = (() => {
            switch (quoteType) {
                case 'firm':
                    return 'quote';
                case 'indicative':
                    return 'price';
                default:
                    throw new Error(`Unexpected quote type ${quoteType}`);
            }
        })();
        const timeoutMs = options.makerEndpointMaxResponseTimeMs || config_1.RFQ_PRICE_ENDPOINT_TIMEOUT_MS;
        const bufferMs = 20;
        // Set Timeout on CancelToken
        const cancelTokenSource = axios_1.default.CancelToken.source();
        setTimeout(() => {
            cancelTokenSource.cancel('timeout via cancel token');
        }, timeoutMs + bufferMs);
        const typedMakerUrls = QuoteRequestor.getTypedMakerUrlsAndWhitelist(options, assetOfferings);
        const quotePromises = typedMakerUrls.map(async (typedMakerUrl) => {
            var _a, _b, _c, _d, _e;
            // filter out requests to skip
            const isBlacklisted = rfqMakerBlacklist.isMakerBlacklisted(typedMakerUrl.url);
            const partialLogEntry = { url: typedMakerUrl.url, quoteType, requestParams, isBlacklisted };
            const { isLastLook, integrator } = options;
            const { sellTokenAddress, buyTokenAddress } = requestParams;
            if (isBlacklisted) {
                (_a = this._metrics) === null || _a === void 0 ? void 0 : _a.logRfqMakerNetworkInteraction({
                    isLastLook: false,
                    url: typedMakerUrl.url,
                    quoteType,
                    statusCode: undefined,
                    sellTokenAddress,
                    buyTokenAddress,
                    latencyMs: 0,
                    included: false,
                    integrator,
                });
                logger_1.logger.info({ rfqtMakerInteraction: { ...partialLogEntry } });
                return;
            }
            else if (!QuoteRequestor._makerSupportsPair(typedMakerUrl, makerToken, takerToken, options.altRfqAssetOfferings, assetOfferings)) {
                return;
            }
            else {
                // make request to MM
                const timeBeforeAwait = Date.now();
                try {
                    if (typedMakerUrl.pairType === types_1.RfqPairType.Standard) {
                        const response = await this._quoteRequestorHttpClient.get(`${typedMakerUrl.url}/${quotePath}`, {
                            headers: {
                                '0x-api-key': options.integrator.integratorId,
                                '0x-integrator-id': options.integrator.integratorId,
                            },
                            params: requestParams,
                            timeout: timeoutMs,
                            cancelToken: cancelTokenSource.token,
                        });
                        const latencyMs = Date.now() - timeBeforeAwait;
                        (_b = this._metrics) === null || _b === void 0 ? void 0 : _b.logRfqMakerNetworkInteraction({
                            isLastLook: isLastLook || false,
                            url: typedMakerUrl.url,
                            quoteType,
                            statusCode: response.status,
                            sellTokenAddress,
                            buyTokenAddress,
                            latencyMs,
                            included: true,
                            integrator,
                        });
                        logger_1.logger.info({
                            rfqtMakerInteraction: {
                                ...partialLogEntry,
                                response: {
                                    included: true,
                                    apiKey: options.integrator.integratorId,
                                    takerAddress: requestParams.takerAddress,
                                    txOrigin: requestParams.txOrigin,
                                    statusCode: response.status,
                                    latencyMs,
                                },
                            },
                        });
                        rfqMakerBlacklist.logTimeoutOrLackThereof(typedMakerUrl.url, latencyMs >= timeoutMs);
                        return {
                            response: { ...response.data, makerUri: typedMakerUrl.url },
                            makerUri: typedMakerUrl.url,
                        };
                    }
                    else {
                        if (this._altRfqCreds === undefined) {
                            throw new Error(`don't have credentials for alt MM`);
                        }
                        const quote = await (0, altMmImplementaionUtils_1.returnQuoteFromAltMMAsync)(typedMakerUrl.url, this._altRfqCreds.altRfqApiKey, this._altRfqCreds.altRfqProfile, options.integrator.integratorId, quoteType === 'firm' ? types_1.AltQuoteModel.Firm : types_1.AltQuoteModel.Indicative, makerToken, takerToken, timeoutMs, options.altRfqAssetOfferings || {}, requestParams, this._quoteRequestorHttpClient, cancelTokenSource.token);
                        const latencyMs = Date.now() - timeBeforeAwait;
                        (_c = this._metrics) === null || _c === void 0 ? void 0 : _c.logRfqMakerNetworkInteraction({
                            isLastLook: isLastLook || false,
                            url: typedMakerUrl.url,
                            quoteType,
                            statusCode: quote.status,
                            sellTokenAddress,
                            buyTokenAddress,
                            latencyMs,
                            included: true,
                            integrator,
                        });
                        logger_1.logger.info({
                            rfqtMakerInteraction: {
                                ...partialLogEntry,
                                response: {
                                    included: true,
                                    apiKey: options.integrator.integratorId,
                                    takerAddress: requestParams.takerAddress,
                                    txOrigin: requestParams.txOrigin,
                                    statusCode: quote.status,
                                    latencyMs,
                                },
                            },
                        });
                        rfqMakerBlacklist.logTimeoutOrLackThereof(typedMakerUrl.url, latencyMs >= timeoutMs);
                        return { response: quote.data, makerUri: typedMakerUrl.url };
                    }
                }
                catch (err) {
                    // log error if any
                    const latencyMs = Date.now() - timeBeforeAwait;
                    (_d = this._metrics) === null || _d === void 0 ? void 0 : _d.logRfqMakerNetworkInteraction({
                        isLastLook: isLastLook || false,
                        url: typedMakerUrl.url,
                        quoteType,
                        statusCode: (_e = err.response) === null || _e === void 0 ? void 0 : _e.status,
                        sellTokenAddress,
                        buyTokenAddress,
                        latencyMs,
                        included: false,
                        integrator,
                    });
                    logger_1.logger.info({
                        rfqtMakerInteraction: {
                            ...partialLogEntry,
                            response: {
                                included: false,
                                apiKey: options.integrator.integratorId,
                                takerAddress: requestParams.takerAddress,
                                txOrigin: requestParams.txOrigin,
                                statusCode: err.response ? err.response.status : undefined,
                                latencyMs,
                            },
                        },
                    });
                    rfqMakerBlacklist.logTimeoutOrLackThereof(typedMakerUrl.url, latencyMs >= timeoutMs);
                    logger_1.logger.warn(convertIfAxiosError(err), `Failed to get RFQ-T ${quoteType} quote from market maker endpoint ${typedMakerUrl.url} for integrator ${options.integrator.integratorId} (${options.integrator.label}) for taker address ${options.takerAddress} and tx origin ${options.txOrigin}`);
                    return;
                }
            }
        });
        const results = (await Promise.all(quotePromises)).filter((x) => x !== undefined);
        return results;
    }
    async _fetchAndValidateFirmQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, options, assetOfferings) {
        const quotesRaw = await this._getQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, options, 'firm', assetOfferings);
        const quotes = quotesRaw.map((result) => ({ ...result, response: result.response.signedOrder }));
        // validate
        const validationFunction = (o) => {
            try {
                // Handle the validate throwing, i.e if it isn't an object or json response
                return this._schemaValidator.isValid(o, json_schemas_1.schemas.v4RfqSignedOrderSchema);
            }
            catch (e) {
                return false;
            }
        };
        const validQuotes = quotes.filter((result) => {
            var _a, _b, _c;
            const order = result.response;
            if (!validationFunction(order)) {
                logger_1.logger.warn(result, 'Invalid RFQ-T firm quote received, filtering out');
                return false;
            }
            if (!hasExpectedAddresses([
                [makerToken, order.makerToken],
                [takerToken, order.takerToken],
                [options.takerAddress, order.taker],
                [options.txOrigin, order.txOrigin],
            ])) {
                logger_1.logger.warn(order, 'Unexpected token, tx origin or taker address in RFQ-T order, filtering out');
                return false;
            }
            const isLastLook = Boolean(options.isLastLook);
            const msRemainingUntilExpiration = QuoteRequestor.getDurationUntilExpirationMs(new utils_1.BigNumber(order.expiry));
            const isExpirationTooSoon = msRemainingUntilExpiration.lt(this._expiryBufferMs);
            if (isExpirationTooSoon) {
                logger_1.logger.warn(order, 'Expiry too soon in RFQ-T firm quote, filtering out');
                (_a = this._metrics) === null || _a === void 0 ? void 0 : _a.incrementExpirationToSoonCounter(isLastLook, order.maker);
                return false;
            }
            else {
                const secondsRemaining = msRemainingUntilExpiration.div(constants_1.ONE_SECOND_MS);
                (_b = this._metrics) === null || _b === void 0 ? void 0 : _b.measureExpirationForValidOrder(isLastLook, order.maker, secondsRemaining);
                const takerAmount = new utils_1.BigNumber(order.takerAmount);
                const fillRatio = takerAmount.div(assetFillAmount);
                if (fillRatio.lt(1) && fillRatio.gte(FILL_RATIO_WARNING_LEVEL)) {
                    logger_1.logger.warn({
                        makerUri: result.makerUri,
                        fillRatio,
                        assetFillAmount,
                        takerToken,
                        makerToken,
                        takerAmount: order.takerAmount,
                        makerAmount: order.makerAmount,
                    }, 'Fill ratio in warning range');
                    (_c = this._metrics) === null || _c === void 0 ? void 0 : _c.incrementFillRatioWarningCounter(isLastLook, order.maker);
                }
                return true;
            }
        });
        // Save the maker URI for later and return just the order
        const rfqQuotes = validQuotes.map((result) => {
            const { signature, ...rest } = result.response;
            const order = {
                order: {
                    ...rest,
                    makerAmount: new utils_1.BigNumber(result.response.makerAmount),
                    takerAmount: new utils_1.BigNumber(result.response.takerAmount),
                    expiry: new utils_1.BigNumber(result.response.expiry),
                    salt: new utils_1.BigNumber(result.response.salt),
                },
                type: protocol_utils_1.FillQuoteTransformerOrderType.Rfq,
                signature,
            };
            this._orderSignatureToMakerUri[nativeDataToId(result.response)] = result.makerUri;
            return order;
        });
        return rfqQuotes;
    }
    async _fetchAndValidateIndicativeQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, options, assetOfferings) {
        // fetch quotes
        const rawQuotes = await this._getQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, options, 'indicative', assetOfferings);
        // validate
        const validationFunction = (o) => this._isValidRfqtIndicativeQuoteResponse(o);
        const validQuotes = rawQuotes.filter((result) => {
            const order = result.response;
            if (!validationFunction(order)) {
                logger_1.logger.warn(result, 'Invalid RFQ indicative quote received, filtering out');
                return false;
            }
            if (!hasExpectedAddresses([
                [makerToken, order.makerToken],
                [takerToken, order.takerToken],
            ])) {
                logger_1.logger.warn(order, 'Unexpected token or taker address in RFQ order, filtering out');
                return false;
            }
            const msRemainingUntilExpiration = QuoteRequestor.getDurationUntilExpirationMs(new utils_1.BigNumber(order.expiry));
            const isExpirationTooSoon = msRemainingUntilExpiration.lt(this._expiryBufferMs);
            if (isExpirationTooSoon) {
                logger_1.logger.warn(order, 'Expiry too soon in RFQ indicative quote, filtering out');
                return false;
            }
            else {
                return true;
            }
        });
        const quotes = validQuotes.map((r) => r.response);
        quotes.forEach((q) => {
            q.makerAmount = new utils_1.BigNumber(q.makerAmount);
            q.takerAmount = new utils_1.BigNumber(q.takerAmount);
            q.expiry = new utils_1.BigNumber(q.expiry);
        });
        return quotes;
    }
}
exports.QuoteRequestor = QuoteRequestor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,