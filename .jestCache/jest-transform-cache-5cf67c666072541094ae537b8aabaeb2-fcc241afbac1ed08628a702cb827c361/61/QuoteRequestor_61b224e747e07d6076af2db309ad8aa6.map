{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/quoteRequestor/QuoteRequestor.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/quoteRequestor/QuoteRequestor.ts"],"sourcesContent":["// tslint:disable: max-file-line-count\r\nimport {\r\n    AltQuoteModel,\r\n    AltRfqMakerAssetOfferings,\r\n    Integrator,\r\n    MarketOperation,\r\n    RfqMakerAssetOfferings,\r\n    RfqmRequestOptions,\r\n    RfqPairType,\r\n    RfqRequestOpts,\r\n    SignedNativeOrder,\r\n    TypedMakerUrl,\r\n} from '@0x/asset-swapper/lib/src/types';\r\nimport { schemas, SchemaValidator } from '@0x/json-schemas';\r\nimport { FillQuoteTransformerOrderType, Signature } from '@0x/protocol-utils';\r\nimport { BigNumber, NULL_ADDRESS } from '@0x/utils';\r\nimport axios, { AxiosInstance } from 'axios';\r\n\r\nimport { RFQ_PRICE_ENDPOINT_TIMEOUT_MS } from '../config';\r\nimport { ONE_SECOND_MS } from '../core/constants';\r\nimport { toPairString } from '../core/pair_utils';\r\nimport { Fee } from '../core/types';\r\nimport { logger } from '../logger';\r\nimport {\r\n    TakerRequestQueryParamsUnnested,\r\n    V4RFQFirmQuote,\r\n    V4SignedRfqOrder,\r\n    V4RFQIndicativeQuote,\r\n} from '../quote-server/types';\r\n\r\nimport { returnQuoteFromAltMMAsync } from './altMmImplementaionUtils';\r\nimport { RfqMakerBlacklist } from './rfqMakerBlacklist';\r\n\r\n// Matches value at\r\n// https://github.com/0xProject/protocol/blob/d3d4a08f917a084f72b649fc1b0b322c22f98129/packages/asset-swapper/src/constants.ts#L34\r\nconst EXPIRY_BUFFER_MS = 120000;\r\nconst MAKER_TIMEOUT_STREAK_LENGTH = 10;\r\nconst MAKER_TIMEOUT_BLACKLIST_DURATION_MINUTES = 10;\r\nconst FILL_RATIO_WARNING_LEVEL = 0.99;\r\nconst rfqMakerBlacklist = new RfqMakerBlacklist(MAKER_TIMEOUT_STREAK_LENGTH, MAKER_TIMEOUT_BLACKLIST_DURATION_MINUTES);\r\n\r\n// Stables\r\nconst USDC = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';\r\nconst USDT = '0xdac17f958d2ee523a2206206994597c13d831ec7';\r\nconst DAI = '0x6b175474e89094c44da98b954eedeac495271d0f';\r\nconst BUSD = '0x4fabb145d64652a948d72533023f6e7a623c7c53';\r\nconst TUSD = '0x0000000000085d4780b73119b644ae5ecd22b376';\r\n\r\n// Other assets\r\nconst WETH = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2';\r\nconst WBTC = '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599';\r\nconst MATIC = '0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0';\r\nconst DISABLED_RFQT_V1_TOKENS = [USDC, USDT, DAI, BUSD, TUSD, WETH, WBTC, MATIC];\r\nconst DISABLED_RFQT_V1_PAIRS_SET = new Set(\r\n    DISABLED_RFQT_V1_TOKENS.flatMap((token) =>\r\n        DISABLED_RFQT_V1_TOKENS.filter((t) => t !== token).map((otherToken) => toPairString(token, otherToken)),\r\n    ),\r\n);\r\n\r\ninterface RfqQuote<T> {\r\n    response: T;\r\n    makerUri: string;\r\n}\r\n\r\nexport interface V4RFQIndicativeQuoteMM extends V4RFQIndicativeQuote {\r\n    makerUri: string;\r\n}\r\n\r\nexport type SignedNativeOrderMM = SignedNativeOrder & { makerUri?: string };\r\n\r\nexport interface MetricsProxy {\r\n    /**\r\n     * Increments a counter that is tracking valid Firm Quotes that are dropped due to low expiration.\r\n     * @param isLastLook mark if call is coming from RFQM\r\n     * @param maker the maker address\r\n     */\r\n    incrementExpirationToSoonCounter(isLastLook: boolean, maker: string): void;\r\n\r\n    /**\r\n     * Keeps track of summary statistics for expiration on Firm Quotes.\r\n     * @param isLastLook mark if call is coming from RFQM\r\n     * @param maker the maker address\r\n     * @param expirationTimeSeconds the expiration time in seconds\r\n     */\r\n    measureExpirationForValidOrder(isLastLook: boolean, maker: string, expirationTimeSeconds: BigNumber): void;\r\n\r\n    /**\r\n     * Increments a counter that tracks when an order is not fully fillable.\r\n     * @param isLastLook mark if call is coming from RFQM\r\n     * @param maker the maker address\r\n     * @param expirationTimeSeconds the expiration time in seconds\r\n     */\r\n    incrementFillRatioWarningCounter(isLastLook: boolean, maker: string): void;\r\n\r\n    /**\r\n     * Logs the outcome of a network (HTTP) interaction with a market maker.\r\n     *\r\n     * @param interaction.isLastLook true if the request is RFQM\r\n     * @param interaction.integrator the integrator that is requesting the RFQ quote\r\n     * @param interaction.url the URL of the market maker\r\n     * @param interaction.quoteType indicative or firm quote\r\n     * @param interaction.statusCode the statusCode returned by a market maker\r\n     * @param interaction.latencyMs the latency of the HTTP request (in ms)\r\n     * @param interaction.included if a firm quote that was returned got included in the next step of processing.\r\n     *                             NOTE: this does not mean that the request returned a valid fillable order. It just\r\n     *                             means that the network response was successful.\r\n     */\r\n    logRfqMakerNetworkInteraction(interaction: {\r\n        isLastLook: boolean;\r\n        integrator: Integrator;\r\n        url: string;\r\n        quoteType: 'firm' | 'indicative';\r\n        statusCode: number | undefined;\r\n        latencyMs: number;\r\n        included: boolean;\r\n        sellTokenAddress: string;\r\n        buyTokenAddress: string;\r\n    }): void;\r\n}\r\n\r\n/**\r\n * Request quotes from RFQ-T providers\r\n */\r\n\r\nfunction hasExpectedAddresses(comparisons: [string, string][]): boolean {\r\n    return comparisons.every((c) => c[0].toLowerCase() === c[1].toLowerCase());\r\n}\r\n\r\n// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction convertIfAxiosError(error: any): Error | object /* axios' .d.ts has AxiosError.toJSON() returning object */ {\r\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n    // eslint-disable-next-line no-prototype-builtins\r\n    if (error.hasOwnProperty('isAxiosError') && error.isAxiosError) {\r\n        const { message, name, config } = error;\r\n        const { headers, timeout, httpsAgent } = config;\r\n        const { keepAlive, keepAliveMsecs, sockets } = httpsAgent;\r\n\r\n        const socketCounts: { [key: string]: number } = {};\r\n        for (const socket of Object.keys(sockets)) {\r\n            socketCounts[socket] = sockets[socket].length;\r\n        }\r\n\r\n        return {\r\n            message,\r\n            name,\r\n            config: {\r\n                headers,\r\n                timeout,\r\n                httpsAgent: {\r\n                    keepAlive,\r\n                    keepAliveMsecs,\r\n                    socketCounts,\r\n                },\r\n            },\r\n        };\r\n    } else {\r\n        return error;\r\n    }\r\n}\r\n\r\nfunction nativeDataToId(data: { signature: Signature }): string {\r\n    const { v, r, s } = data.signature;\r\n    return `${v}${r}${s}`;\r\n}\r\n\r\nexport class QuoteRequestor {\r\n    private readonly _schemaValidator: SchemaValidator = new SchemaValidator();\r\n    private readonly _orderSignatureToMakerUri: { [signature: string]: string } = {};\r\n\r\n    public static makeQueryParameters(\r\n        txOrigin: string,\r\n        takerAddress: string,\r\n        marketOperation: MarketOperation,\r\n        buyTokenAddress: string, // maker token\r\n        sellTokenAddress: string, // taker token\r\n        assetFillAmount: BigNumber,\r\n        comparisonPrice?: BigNumber,\r\n        isLastLook?: boolean | undefined,\r\n        fee?: Fee | undefined,\r\n    ): TakerRequestQueryParamsUnnested {\r\n        const { buyAmountBaseUnits, sellAmountBaseUnits } =\r\n            marketOperation === MarketOperation.Buy\r\n                ? {\r\n                      buyAmountBaseUnits: assetFillAmount,\r\n                      sellAmountBaseUnits: undefined,\r\n                  }\r\n                : {\r\n                      sellAmountBaseUnits: assetFillAmount,\r\n                      buyAmountBaseUnits: undefined,\r\n                  };\r\n\r\n        const requestParamsWithBigNumbers: Pick<\r\n            TakerRequestQueryParamsUnnested,\r\n            | 'txOrigin'\r\n            | 'takerAddress'\r\n            | 'buyTokenAddress'\r\n            | 'sellTokenAddress'\r\n            | 'comparisonPrice'\r\n            | 'isLastLook'\r\n            | 'protocolVersion'\r\n            | 'feeAmount'\r\n            | 'feeToken'\r\n            | 'feeType'\r\n        > = {\r\n            txOrigin,\r\n            takerAddress,\r\n            buyTokenAddress,\r\n            sellTokenAddress,\r\n            comparisonPrice: comparisonPrice === undefined ? undefined : comparisonPrice.toString(),\r\n            protocolVersion: '4',\r\n        };\r\n        if (isLastLook) {\r\n            if (fee === undefined) {\r\n                throw new Error(`isLastLook cannot be passed without a fee parameter`);\r\n            }\r\n            requestParamsWithBigNumbers.isLastLook = isLastLook.toString();\r\n            requestParamsWithBigNumbers.feeAmount = fee.amount.toString();\r\n            requestParamsWithBigNumbers.feeToken = fee.token;\r\n            requestParamsWithBigNumbers.feeType = fee.type;\r\n        }\r\n\r\n        // convert BigNumbers to strings\r\n        // so they are digestible by axios\r\n        if (sellAmountBaseUnits) {\r\n            return {\r\n                ...requestParamsWithBigNumbers,\r\n                sellAmountBaseUnits: sellAmountBaseUnits.toString(),\r\n            };\r\n        } else if (buyAmountBaseUnits) {\r\n            return {\r\n                ...requestParamsWithBigNumbers,\r\n                buyAmountBaseUnits: buyAmountBaseUnits.toString(),\r\n            };\r\n        } else {\r\n            throw new Error('Neither \"buyAmountBaseUnits\" or \"sellAmountBaseUnits\" were defined');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets both standard RFQ makers and \"alternative\" RFQ makers and combines them together\r\n     * in a single configuration map. If an integration key whitelist is present, it will be used\r\n     * to filter a specific makers.\r\n     *\r\n     * @param options the RfqmRequestOptions passed in\r\n     * @param assetOfferings the RFQM or RFQT maker offerings\r\n     * @returns a list of TypedMakerUrl instances\r\n     */\r\n    public static getTypedMakerUrlsAndWhitelist(\r\n        options: Pick<RfqmRequestOptions, 'integrator' | 'altRfqAssetOfferings'>,\r\n        assetOfferings: RfqMakerAssetOfferings,\r\n    ): TypedMakerUrl[] {\r\n        const standardUrls = Object.keys(assetOfferings).map((mm: string): TypedMakerUrl => {\r\n            return { pairType: RfqPairType.Standard, url: mm };\r\n        });\r\n        const altUrls = options.altRfqAssetOfferings\r\n            ? Object.keys(options.altRfqAssetOfferings).map((mm: string): TypedMakerUrl => {\r\n                  return { pairType: RfqPairType.Alt, url: mm };\r\n              })\r\n            : [];\r\n\r\n        let typedMakerUrls = standardUrls.concat(altUrls);\r\n\r\n        // If there is a whitelist, only allow approved maker URLs\r\n        if (options.integrator.whitelistIntegratorUrls !== undefined) {\r\n            const whitelist = new Set(options.integrator.whitelistIntegratorUrls.map((key) => key.toLowerCase()));\r\n            typedMakerUrls = typedMakerUrls.filter((makerUrl) => whitelist.has(makerUrl.url.toLowerCase()));\r\n        }\r\n        return typedMakerUrls;\r\n    }\r\n\r\n    public static getDurationUntilExpirationMs(expirationTimeSeconds: BigNumber): BigNumber {\r\n        const expirationTimeMs = expirationTimeSeconds.times(ONE_SECOND_MS);\r\n        const currentTimeMs = new BigNumber(Date.now());\r\n        return BigNumber.max(expirationTimeMs.minus(currentTimeMs), 0);\r\n    }\r\n\r\n    private static _makerSupportsPair(\r\n        typedMakerUrl: TypedMakerUrl,\r\n        makerToken: string,\r\n        takerToken: string,\r\n        altMakerAssetOfferings: AltRfqMakerAssetOfferings | undefined,\r\n        assetOfferings: RfqMakerAssetOfferings | undefined,\r\n    ): boolean {\r\n        // Turn off RFQt v1 for these pairs\r\n        if (DISABLED_RFQT_V1_PAIRS_SET.has(toPairString(makerToken, takerToken))) {\r\n            return false;\r\n        }\r\n        if (typedMakerUrl.pairType === RfqPairType.Standard && assetOfferings) {\r\n            for (const assetPair of assetOfferings[typedMakerUrl.url]) {\r\n                if (\r\n                    (assetPair[0] === makerToken && assetPair[1] === takerToken) ||\r\n                    (assetPair[0] === takerToken && assetPair[1] === makerToken)\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n        } else if (typedMakerUrl.pairType === RfqPairType.Alt && altMakerAssetOfferings) {\r\n            for (const altAssetPair of altMakerAssetOfferings[typedMakerUrl.url]) {\r\n                if (\r\n                    (altAssetPair.baseAsset === makerToken && altAssetPair.quoteAsset === takerToken) ||\r\n                    (altAssetPair.baseAsset === takerToken && altAssetPair.quoteAsset === makerToken)\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    constructor(\r\n        private readonly _rfqtAssetOfferings: RfqMakerAssetOfferings,\r\n        private readonly _quoteRequestorHttpClient: AxiosInstance,\r\n        private readonly _altRfqCreds?: { altRfqApiKey: string; altRfqProfile: string },\r\n        private readonly _expiryBufferMs: number = EXPIRY_BUFFER_MS,\r\n        private readonly _metrics?: MetricsProxy,\r\n    ) {}\r\n\r\n    public async requestRfqtFirmQuotesAsync(\r\n        makerToken: string, // maker token\r\n        takerToken: string, // taker token\r\n        assetFillAmount: BigNumber,\r\n        marketOperation: MarketOperation,\r\n        comparisonPrice: BigNumber | undefined,\r\n        options: RfqRequestOpts,\r\n    ): Promise<SignedNativeOrder[]> {\r\n        const _opts: RfqRequestOpts = { makerEndpointMaxResponseTimeMs: RFQ_PRICE_ENDPOINT_TIMEOUT_MS, ...options };\r\n        if (!_opts.txOrigin || [undefined, '', '0x', NULL_ADDRESS].includes(_opts.txOrigin)) {\r\n            throw new Error('RFQ-T firm quotes require the presence of a tx origin');\r\n        }\r\n\r\n        return this._fetchAndValidateFirmQuotesAsync(\r\n            makerToken,\r\n            takerToken,\r\n            assetFillAmount,\r\n            marketOperation,\r\n            comparisonPrice,\r\n            _opts,\r\n            this._rfqtAssetOfferings,\r\n        );\r\n    }\r\n\r\n    public async requestRfqtIndicativeQuotesAsync(\r\n        makerToken: string,\r\n        takerToken: string,\r\n        assetFillAmount: BigNumber,\r\n        marketOperation: MarketOperation,\r\n        comparisonPrice: BigNumber | undefined,\r\n        options: RfqRequestOpts,\r\n    ): Promise<V4RFQIndicativeQuoteMM[]> {\r\n        const _opts: RfqRequestOpts = { makerEndpointMaxResponseTimeMs: RFQ_PRICE_ENDPOINT_TIMEOUT_MS, ...options };\r\n        // Originally a takerAddress was required for indicative quotes, but\r\n        // now we've eliminated that requirement.  @0x/quote-server, however,\r\n        // is still coded to expect a takerAddress.  So if the client didn't\r\n        // send one, just use the null address to satisfy the quote server's\r\n        // expectations.\r\n        if (!_opts.takerAddress) {\r\n            _opts.takerAddress = NULL_ADDRESS;\r\n        }\r\n        if (!_opts.txOrigin) {\r\n            _opts.txOrigin = NULL_ADDRESS;\r\n        }\r\n        return this._fetchAndValidateIndicativeQuotesAsync(\r\n            makerToken,\r\n            takerToken,\r\n            assetFillAmount,\r\n            marketOperation,\r\n            comparisonPrice,\r\n            _opts,\r\n            this._rfqtAssetOfferings,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Given an order signature, returns the makerUri that the order originated from\r\n     */\r\n    public getMakerUriForSignature(signature: Signature): string | undefined {\r\n        return this._orderSignatureToMakerUri[nativeDataToId({ signature })];\r\n    }\r\n\r\n    private _isValidRfqtIndicativeQuoteResponse(response: V4RFQIndicativeQuoteMM): boolean {\r\n        const requiredKeys: (keyof V4RFQIndicativeQuoteMM)[] = [\r\n            'makerAmount',\r\n            'takerAmount',\r\n            'makerToken',\r\n            'takerToken',\r\n            'expiry',\r\n        ];\r\n\r\n        for (const k of requiredKeys) {\r\n            if (response[k] === undefined) {\r\n                return false;\r\n            }\r\n        }\r\n        // TODO (jacob): I have a feeling checking 5 schemas is slower then checking one\r\n        const hasValidMakerAssetAmount = this._schemaValidator.isValid(response.makerAmount, schemas.wholeNumberSchema);\r\n        const hasValidTakerAssetAmount = this._schemaValidator.isValid(response.takerAmount, schemas.wholeNumberSchema);\r\n        const hasValidMakerToken = this._schemaValidator.isValid(response.makerToken, schemas.hexSchema);\r\n        const hasValidTakerToken = this._schemaValidator.isValid(response.takerToken, schemas.hexSchema);\r\n        const hasValidExpirationTimeSeconds = this._schemaValidator.isValid(response.expiry, schemas.wholeNumberSchema);\r\n        if (\r\n            !hasValidMakerAssetAmount ||\r\n            !hasValidTakerAssetAmount ||\r\n            !hasValidMakerToken ||\r\n            !hasValidTakerToken ||\r\n            !hasValidExpirationTimeSeconds\r\n        ) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private async _getQuotesAsync<ResponseT>(\r\n        makerToken: string,\r\n        takerToken: string,\r\n        assetFillAmount: BigNumber,\r\n        marketOperation: MarketOperation,\r\n        comparisonPrice: BigNumber | undefined,\r\n        options: RfqRequestOpts,\r\n        quoteType: 'firm' | 'indicative',\r\n        assetOfferings: RfqMakerAssetOfferings,\r\n    ): Promise<RfqQuote<ResponseT>[]> {\r\n        const requestParams = QuoteRequestor.makeQueryParameters(\r\n            options.txOrigin,\r\n            options.takerAddress,\r\n            marketOperation,\r\n            makerToken,\r\n            takerToken,\r\n            assetFillAmount,\r\n            comparisonPrice,\r\n            options.isLastLook,\r\n            options.fee,\r\n        );\r\n\r\n        const quotePath = (() => {\r\n            switch (quoteType) {\r\n                case 'firm':\r\n                    return 'quote';\r\n                case 'indicative':\r\n                    return 'price';\r\n                default:\r\n                    throw new Error(`Unexpected quote type ${quoteType}`);\r\n            }\r\n        })();\r\n\r\n        const timeoutMs = options.makerEndpointMaxResponseTimeMs || RFQ_PRICE_ENDPOINT_TIMEOUT_MS;\r\n        const bufferMs = 20;\r\n\r\n        // Set Timeout on CancelToken\r\n        const cancelTokenSource = axios.CancelToken.source();\r\n        setTimeout(() => {\r\n            cancelTokenSource.cancel('timeout via cancel token');\r\n        }, timeoutMs + bufferMs);\r\n\r\n        const typedMakerUrls = QuoteRequestor.getTypedMakerUrlsAndWhitelist(options, assetOfferings);\r\n        const quotePromises = typedMakerUrls.map(async (typedMakerUrl) => {\r\n            // filter out requests to skip\r\n            const isBlacklisted = rfqMakerBlacklist.isMakerBlacklisted(typedMakerUrl.url);\r\n            const partialLogEntry = { url: typedMakerUrl.url, quoteType, requestParams, isBlacklisted };\r\n            const { isLastLook, integrator } = options;\r\n            const { sellTokenAddress, buyTokenAddress } = requestParams;\r\n            if (isBlacklisted) {\r\n                this._metrics?.logRfqMakerNetworkInteraction({\r\n                    isLastLook: false,\r\n                    url: typedMakerUrl.url,\r\n                    quoteType,\r\n                    statusCode: undefined,\r\n                    sellTokenAddress,\r\n                    buyTokenAddress,\r\n                    latencyMs: 0,\r\n                    included: false,\r\n                    integrator,\r\n                });\r\n                logger.info({ rfqtMakerInteraction: { ...partialLogEntry } });\r\n                return;\r\n            } else if (\r\n                !QuoteRequestor._makerSupportsPair(\r\n                    typedMakerUrl,\r\n                    makerToken,\r\n                    takerToken,\r\n                    options.altRfqAssetOfferings,\r\n                    assetOfferings,\r\n                )\r\n            ) {\r\n                return;\r\n            } else {\r\n                // make request to MM\r\n                const timeBeforeAwait = Date.now();\r\n                try {\r\n                    if (typedMakerUrl.pairType === RfqPairType.Standard) {\r\n                        const response = await this._quoteRequestorHttpClient.get(`${typedMakerUrl.url}/${quotePath}`, {\r\n                            headers: {\r\n                                '0x-api-key': options.integrator.integratorId,\r\n                                '0x-integrator-id': options.integrator.integratorId,\r\n                            },\r\n                            params: requestParams,\r\n                            timeout: timeoutMs,\r\n                            cancelToken: cancelTokenSource.token,\r\n                        });\r\n                        const latencyMs = Date.now() - timeBeforeAwait;\r\n                        this._metrics?.logRfqMakerNetworkInteraction({\r\n                            isLastLook: isLastLook || false,\r\n                            url: typedMakerUrl.url,\r\n                            quoteType,\r\n                            statusCode: response.status,\r\n                            sellTokenAddress,\r\n                            buyTokenAddress,\r\n                            latencyMs,\r\n                            included: true,\r\n                            integrator,\r\n                        });\r\n                        logger.info({\r\n                            rfqtMakerInteraction: {\r\n                                ...partialLogEntry,\r\n                                response: {\r\n                                    included: true,\r\n                                    apiKey: options.integrator.integratorId,\r\n                                    takerAddress: requestParams.takerAddress,\r\n                                    txOrigin: requestParams.txOrigin,\r\n                                    statusCode: response.status,\r\n                                    latencyMs,\r\n                                },\r\n                            },\r\n                        });\r\n                        rfqMakerBlacklist.logTimeoutOrLackThereof(typedMakerUrl.url, latencyMs >= timeoutMs);\r\n                        return {\r\n                            response: { ...response.data, makerUri: typedMakerUrl.url },\r\n                            makerUri: typedMakerUrl.url,\r\n                        };\r\n                    } else {\r\n                        if (this._altRfqCreds === undefined) {\r\n                            throw new Error(`don't have credentials for alt MM`);\r\n                        }\r\n                        const quote = await returnQuoteFromAltMMAsync<ResponseT>(\r\n                            typedMakerUrl.url,\r\n                            this._altRfqCreds.altRfqApiKey,\r\n                            this._altRfqCreds.altRfqProfile,\r\n                            options.integrator.integratorId,\r\n                            quoteType === 'firm' ? AltQuoteModel.Firm : AltQuoteModel.Indicative,\r\n                            makerToken,\r\n                            takerToken,\r\n                            timeoutMs,\r\n                            options.altRfqAssetOfferings || {},\r\n                            requestParams,\r\n                            this._quoteRequestorHttpClient,\r\n                            cancelTokenSource.token,\r\n                        );\r\n\r\n                        const latencyMs = Date.now() - timeBeforeAwait;\r\n                        this._metrics?.logRfqMakerNetworkInteraction({\r\n                            isLastLook: isLastLook || false,\r\n                            url: typedMakerUrl.url,\r\n                            quoteType,\r\n                            statusCode: quote.status,\r\n                            sellTokenAddress,\r\n                            buyTokenAddress,\r\n                            latencyMs,\r\n                            included: true,\r\n                            integrator,\r\n                        });\r\n                        logger.info({\r\n                            rfqtMakerInteraction: {\r\n                                ...partialLogEntry,\r\n                                response: {\r\n                                    included: true,\r\n                                    apiKey: options.integrator.integratorId,\r\n                                    takerAddress: requestParams.takerAddress,\r\n                                    txOrigin: requestParams.txOrigin,\r\n                                    statusCode: quote.status,\r\n                                    latencyMs,\r\n                                },\r\n                            },\r\n                        });\r\n                        rfqMakerBlacklist.logTimeoutOrLackThereof(typedMakerUrl.url, latencyMs >= timeoutMs);\r\n                        return { response: quote.data, makerUri: typedMakerUrl.url };\r\n                    }\r\n                } catch (err) {\r\n                    // log error if any\r\n                    const latencyMs = Date.now() - timeBeforeAwait;\r\n                    this._metrics?.logRfqMakerNetworkInteraction({\r\n                        isLastLook: isLastLook || false,\r\n                        url: typedMakerUrl.url,\r\n                        quoteType,\r\n                        statusCode: err.response?.status,\r\n                        sellTokenAddress,\r\n                        buyTokenAddress,\r\n                        latencyMs,\r\n                        included: false,\r\n                        integrator,\r\n                    });\r\n                    logger.info({\r\n                        rfqtMakerInteraction: {\r\n                            ...partialLogEntry,\r\n                            response: {\r\n                                included: false,\r\n                                apiKey: options.integrator.integratorId,\r\n                                takerAddress: requestParams.takerAddress,\r\n                                txOrigin: requestParams.txOrigin,\r\n                                statusCode: err.response ? err.response.status : undefined,\r\n                                latencyMs,\r\n                            },\r\n                        },\r\n                    });\r\n                    rfqMakerBlacklist.logTimeoutOrLackThereof(typedMakerUrl.url, latencyMs >= timeoutMs);\r\n                    logger.warn(\r\n                        convertIfAxiosError(err),\r\n                        `Failed to get RFQ-T ${quoteType} quote from market maker endpoint ${typedMakerUrl.url} for integrator ${options.integrator.integratorId} (${options.integrator.label}) for taker address ${options.takerAddress} and tx origin ${options.txOrigin}`,\r\n                    );\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n\r\n        const results = (await Promise.all(quotePromises)).filter((x) => x !== undefined);\r\n        return results as RfqQuote<ResponseT>[];\r\n    }\r\n    private async _fetchAndValidateFirmQuotesAsync(\r\n        makerToken: string,\r\n        takerToken: string,\r\n        assetFillAmount: BigNumber,\r\n        marketOperation: MarketOperation,\r\n        comparisonPrice: BigNumber | undefined,\r\n        options: RfqRequestOpts,\r\n        assetOfferings: RfqMakerAssetOfferings,\r\n    ): Promise<SignedNativeOrder[]> {\r\n        const quotesRaw = await this._getQuotesAsync<V4RFQFirmQuote>(\r\n            makerToken,\r\n            takerToken,\r\n            assetFillAmount,\r\n            marketOperation,\r\n            comparisonPrice,\r\n            options,\r\n            'firm',\r\n            assetOfferings,\r\n        );\r\n        const quotes = quotesRaw.map((result) => ({ ...result, response: result.response.signedOrder }));\r\n\r\n        // validate\r\n        const validationFunction = (o: V4SignedRfqOrder) => {\r\n            try {\r\n                // Handle the validate throwing, i.e if it isn't an object or json response\r\n                return this._schemaValidator.isValid(o, schemas.v4RfqSignedOrderSchema);\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        };\r\n        const validQuotes = quotes.filter((result) => {\r\n            const order = result.response;\r\n            if (!validationFunction(order)) {\r\n                logger.warn(result, 'Invalid RFQ-T firm quote received, filtering out');\r\n                return false;\r\n            }\r\n            if (\r\n                !hasExpectedAddresses([\r\n                    [makerToken, order.makerToken],\r\n                    [takerToken, order.takerToken],\r\n                    [options.takerAddress, order.taker],\r\n                    [options.txOrigin, order.txOrigin],\r\n                ])\r\n            ) {\r\n                logger.warn(order, 'Unexpected token, tx origin or taker address in RFQ-T order, filtering out');\r\n                return false;\r\n            }\r\n            const isLastLook = Boolean(options.isLastLook);\r\n            const msRemainingUntilExpiration = QuoteRequestor.getDurationUntilExpirationMs(new BigNumber(order.expiry));\r\n            const isExpirationTooSoon = msRemainingUntilExpiration.lt(this._expiryBufferMs);\r\n            if (isExpirationTooSoon) {\r\n                logger.warn(order, 'Expiry too soon in RFQ-T firm quote, filtering out');\r\n                this._metrics?.incrementExpirationToSoonCounter(isLastLook, order.maker);\r\n                return false;\r\n            } else {\r\n                const secondsRemaining = msRemainingUntilExpiration.div(ONE_SECOND_MS);\r\n                this._metrics?.measureExpirationForValidOrder(isLastLook, order.maker, secondsRemaining);\r\n                const takerAmount = new BigNumber(order.takerAmount);\r\n                const fillRatio = takerAmount.div(assetFillAmount);\r\n                if (fillRatio.lt(1) && fillRatio.gte(FILL_RATIO_WARNING_LEVEL)) {\r\n                    logger.warn(\r\n                        {\r\n                            makerUri: result.makerUri,\r\n                            fillRatio,\r\n                            assetFillAmount,\r\n                            takerToken,\r\n                            makerToken,\r\n                            takerAmount: order.takerAmount,\r\n                            makerAmount: order.makerAmount,\r\n                        },\r\n                        'Fill ratio in warning range',\r\n                    );\r\n                    this._metrics?.incrementFillRatioWarningCounter(isLastLook, order.maker);\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n\r\n        // Save the maker URI for later and return just the order\r\n        const rfqQuotes = validQuotes.map((result) => {\r\n            const { signature, ...rest } = result.response;\r\n            const order: SignedNativeOrder = {\r\n                order: {\r\n                    ...rest,\r\n                    makerAmount: new BigNumber(result.response.makerAmount),\r\n                    takerAmount: new BigNumber(result.response.takerAmount),\r\n                    expiry: new BigNumber(result.response.expiry),\r\n                    salt: new BigNumber(result.response.salt),\r\n                },\r\n                type: FillQuoteTransformerOrderType.Rfq,\r\n                signature,\r\n            };\r\n            this._orderSignatureToMakerUri[nativeDataToId(result.response)] = result.makerUri;\r\n            return order;\r\n        });\r\n        return rfqQuotes;\r\n    }\r\n\r\n    private async _fetchAndValidateIndicativeQuotesAsync(\r\n        makerToken: string,\r\n        takerToken: string,\r\n        assetFillAmount: BigNumber,\r\n        marketOperation: MarketOperation,\r\n        comparisonPrice: BigNumber | undefined,\r\n        options: RfqRequestOpts,\r\n        assetOfferings: RfqMakerAssetOfferings,\r\n    ): Promise<V4RFQIndicativeQuoteMM[]> {\r\n        // fetch quotes\r\n        const rawQuotes = await this._getQuotesAsync<V4RFQIndicativeQuoteMM>(\r\n            makerToken,\r\n            takerToken,\r\n            assetFillAmount,\r\n            marketOperation,\r\n            comparisonPrice,\r\n            options,\r\n            'indicative',\r\n            assetOfferings,\r\n        );\r\n\r\n        // validate\r\n        const validationFunction = (o: V4RFQIndicativeQuoteMM) => this._isValidRfqtIndicativeQuoteResponse(o);\r\n        const validQuotes = rawQuotes.filter((result) => {\r\n            const order = result.response;\r\n            if (!validationFunction(order)) {\r\n                logger.warn(result, 'Invalid RFQ indicative quote received, filtering out');\r\n                return false;\r\n            }\r\n            if (\r\n                !hasExpectedAddresses([\r\n                    [makerToken, order.makerToken],\r\n                    [takerToken, order.takerToken],\r\n                ])\r\n            ) {\r\n                logger.warn(order, 'Unexpected token or taker address in RFQ order, filtering out');\r\n                return false;\r\n            }\r\n            const msRemainingUntilExpiration = QuoteRequestor.getDurationUntilExpirationMs(new BigNumber(order.expiry));\r\n            const isExpirationTooSoon = msRemainingUntilExpiration.lt(this._expiryBufferMs);\r\n            if (isExpirationTooSoon) {\r\n                logger.warn(order, 'Expiry too soon in RFQ indicative quote, filtering out');\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        });\r\n        const quotes = validQuotes.map((r) => r.response);\r\n        quotes.forEach((q) => {\r\n            q.makerAmount = new BigNumber(q.makerAmount);\r\n            q.takerAmount = new BigNumber(q.takerAmount);\r\n            q.expiry = new BigNumber(q.expiry);\r\n        });\r\n        return quotes;\r\n    }\r\n}\r\n"],"version":3}