{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/services/rfq_maker_service_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/services/rfq_maker_service_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\n// tslint:disable:no-empty\n// tslint:disable:max-file-line-count\n\nimport { ChainId } from '@0x/contract-addresses';\nimport { expect } from 'chai';\nimport { anything, instance, mock, when } from 'ts-mockito';\nimport { Connection, Repository } from 'typeorm';\n\nimport { RfqMaker } from '../../src/entities';\nimport { RfqMakerService } from '../../src/services/rfq_maker_service';\nimport { ConfigManager } from '../../src/utils/config_manager';\nimport { RfqMakerDbUtils } from '../../src/utils/rfq_maker_db_utils';\n\ndescribe('RfqMakerService', () => {\n    const makerId = 'fakeMaker1';\n    const makerApiKey = 'fakeMakerApiKey1';\n    const chainId = ChainId.Ganache;\n    const updatedAt = new Date();\n    const pairs: [string, string][] = [\n        ['0x374a16f5e686c09b0cc9e8bc3466b3b645c74aa7', '0xf84830b73b2ed3c7267e7638f500110ea47fdf30'],\n    ];\n\n    describe('getRfqMakerAsync', () => {\n        it('should get RfqMaker entity from db connection', async () => {\n            // Given\n            const rfqMaker: RfqMaker = new RfqMaker({\n                makerId,\n                chainId,\n                updatedAt,\n                pairs,\n                rfqtUri: null,\n                rfqmUri: null,\n            });\n            const repositoryMock = mock(Repository);\n            when(repositoryMock.findOne(anything())).thenResolve(rfqMaker);\n            const connectionMock = mock(Connection);\n            when(connectionMock.getRepository(RfqMaker)).thenReturn(instance(repositoryMock));\n            const rfqDbUtils = new RfqMakerDbUtils(instance(connectionMock));\n\n            const configManagerMock = mock(ConfigManager);\n\n            const rfqMakerService = new RfqMakerService(rfqDbUtils, configManagerMock);\n\n            // When\n            const rfqMakerFromSevice = await rfqMakerService.getRfqMakerAsync(makerId, chainId);\n\n            // Then\n            expect(rfqMakerFromSevice.makerId).to.be.eq(makerId);\n            expect(rfqMakerFromSevice.chainId).to.be.eq(chainId);\n            expect(rfqMakerFromSevice.updatedAt).to.be.eq(updatedAt);\n            expect(rfqMakerFromSevice.pairs).to.be.eq(pairs);\n        });\n\n        it('should get default RfqMaker entity if there is no information in DB', async () => {\n            // Given\n            const repositoryMock = mock(Repository);\n            when(repositoryMock.findOne(anything())).thenResolve(undefined);\n            const connectionMock = mock(Connection);\n            when(connectionMock.getRepository(RfqMaker)).thenReturn(instance(repositoryMock));\n            const rfqDbUtils = new RfqMakerDbUtils(instance(connectionMock));\n\n            const configManagerMock = mock(ConfigManager);\n\n            const rfqMakerService = new RfqMakerService(rfqDbUtils, configManagerMock);\n\n            // When\n            const rfqMakerFromSevice = await rfqMakerService.getRfqMakerAsync(makerId, chainId);\n\n            // Then\n            expect(rfqMakerFromSevice.makerId).to.be.eq(makerId);\n            expect(rfqMakerFromSevice.chainId).to.be.eq(chainId);\n            expect(rfqMakerFromSevice.updatedAt).to.be.eq(null);\n            expect(rfqMakerFromSevice.pairs.length).to.be.eq(0);\n        });\n    });\n\n    describe('createOrUpdateRfqMakerAsync', () => {\n        it('should create or update the RfqMaker entity through db connection', async () => {\n            // Given\n            const repositoryMock = mock(Repository);\n            when(repositoryMock.save(anything())).thenCall((rfqMaker) => {\n                // Then\n                expect(rfqMaker.makerId).to.be.eq(makerId);\n                expect(rfqMaker.chainId).to.be.eq(chainId);\n                expect(rfqMaker.pairs).to.be.eq(pairs);\n            });\n            const connectionMock = mock(Connection);\n            when(connectionMock.getRepository(RfqMaker)).thenReturn(instance(repositoryMock));\n            const rfqDbUtils = new RfqMakerDbUtils(instance(connectionMock));\n            const configManagerMock = mock(ConfigManager);\n\n            const rfqMakerService = new RfqMakerService(rfqDbUtils, configManagerMock);\n\n            // When\n            await rfqMakerService.createOrUpdateRfqMakerAsync(makerId, chainId, pairs, null, null);\n        });\n    });\n\n    describe('patchRfqMakerAsync', () => {\n        it('should update pairs', async () => {\n            // Given\n            const originalRfqMaker: RfqMaker = new RfqMaker({\n                makerId,\n                chainId,\n                updatedAt,\n                pairs,\n                rfqtUri: null,\n                rfqmUri: null,\n            });\n            const newPairs: [string, string][] = [];\n            const rfqMakerServiceMock = mock(RfqMakerService);\n            when(rfqMakerServiceMock.getRfqMakerAsync(anything(), anything())).thenResolve(originalRfqMaker);\n\n            // Expect\n            when(\n                rfqMakerServiceMock.createOrUpdateRfqMakerAsync(\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                ),\n            ).thenCall((makerIdToSave, chainIdToSave, pairsToSave, rfqtUriToSave, rfqmUriToSave) => {\n                expect(makerIdToSave).to.be.eq(originalRfqMaker.makerId);\n                expect(chainIdToSave).to.be.eq(originalRfqMaker.chainId);\n                expect(pairsToSave).to.be.eq(newPairs);\n                expect(rfqtUriToSave).to.be.eq(originalRfqMaker.rfqtUri);\n                expect(rfqmUriToSave).to.be.eq(originalRfqMaker.rfqmUri);\n            });\n            const rfqMakerService = instance(rfqMakerServiceMock);\n\n            // When\n            await rfqMakerService.patchRfqMakerAsync(makerId, chainId, newPairs, undefined, undefined);\n        });\n        it('should update URIs from null to a valid string', async () => {\n            // Given\n            const originalRfqMaker: RfqMaker = new RfqMaker({\n                makerId,\n                chainId,\n                updatedAt,\n                pairs,\n                rfqtUri: null,\n                rfqmUri: null,\n            });\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-inferrable-types\n            const newRfqtUri: string = 'http://localhost:3001';\n            const rfqMakerServiceMock = mock(RfqMakerService);\n            when(rfqMakerServiceMock.getRfqMakerAsync(anything(), anything())).thenResolve(originalRfqMaker);\n\n            // Expect\n            when(\n                rfqMakerServiceMock.createOrUpdateRfqMakerAsync(\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                ),\n            ).thenCall((makerIdToSave, chainIdToSave, pairsToSave, rfqtUriToSave, rfqmUriToSave) => {\n                expect(makerIdToSave).to.be.eq(originalRfqMaker.makerId);\n                expect(chainIdToSave).to.be.eq(originalRfqMaker.chainId);\n                expect(pairsToSave).to.be.eq(originalRfqMaker.pairs);\n                expect(rfqtUriToSave).to.be.eq(newRfqtUri);\n                expect(rfqmUriToSave).to.be.eq(originalRfqMaker.rfqmUri);\n            });\n            const rfqMakerService = instance(rfqMakerServiceMock);\n\n            // When\n            await rfqMakerService.patchRfqMakerAsync(makerId, chainId, undefined, newRfqtUri, undefined);\n        });\n        it('should update URIs from string to null', async () => {\n            // Given\n            const originalRfqMaker: RfqMaker = new RfqMaker({\n                makerId,\n                chainId,\n                updatedAt,\n                pairs,\n                rfqtUri: 'http://localhost:3001',\n                rfqmUri: 'http://localhost:3002',\n            });\n            const rfqMakerServiceMock = mock(RfqMakerService);\n            when(rfqMakerServiceMock.getRfqMakerAsync(anything(), anything())).thenResolve(originalRfqMaker);\n\n            // Expect\n            when(\n                rfqMakerServiceMock.createOrUpdateRfqMakerAsync(\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                ),\n            ).thenCall((makerIdToSave, chainIdToSave, pairsToSave, rfqtUriToSave, rfqmUriToSave) => {\n                expect(makerIdToSave).to.be.eq(originalRfqMaker.makerId);\n                expect(chainIdToSave).to.be.eq(originalRfqMaker.chainId);\n                expect(pairsToSave).to.be.eq(originalRfqMaker.pairs);\n                expect(rfqtUriToSave).to.be.eq(originalRfqMaker.rfqtUri);\n                expect(rfqmUriToSave).to.be.eq(null);\n            });\n            const rfqMakerService = instance(rfqMakerServiceMock);\n\n            // When\n            await rfqMakerService.patchRfqMakerAsync(makerId, chainId, undefined, undefined, null);\n        });\n    });\n\n    describe('mapMakerApiKeyToId', () => {\n        it('should map maker api key to maker id correctly', async () => {\n            // Given\n            const rfqDbUtils = mock(RfqMakerDbUtils);\n            const configManagerMock = mock(ConfigManager);\n            when(configManagerMock.getRfqMakerIdForApiKey(makerApiKey)).thenReturn(makerId);\n\n            const rfqMakerService = new RfqMakerService(rfqDbUtils, instance(configManagerMock));\n\n            // When\n            const makerIdFromService = rfqMakerService.mapMakerApiKeyToId(makerApiKey);\n\n            // Then\n            expect(makerIdFromService).to.be.eq(makerId);\n        });\n\n        it('should return null for undefined api key', async () => {\n            // Given\n            const rfqDbUtilsMock = mock(RfqMakerDbUtils);\n            const configManagerMock = mock(ConfigManager);\n            when(configManagerMock.getRfqMakerIdForApiKey(makerApiKey)).thenReturn(makerId);\n\n            const rfqMakerService = new RfqMakerService(rfqDbUtilsMock, instance(configManagerMock));\n\n            // When\n            const makerIdFromService = rfqMakerService.mapMakerApiKeyToId(undefined);\n\n            // Then\n            expect(makerIdFromService).to.be.eq(null);\n        });\n    });\n\n    describe('isValidChainId', () => {\n        it('should return false for invalid number chainId', async () => {\n            // Given\n            const invalidChainId = '123a';\n\n            // When\n            const isValidChainId = RfqMakerService.isValidChainId(invalidChainId);\n\n            // Then\n            expect(isValidChainId).to.be.eq(false);\n        });\n\n        it('should return false for unknown number chainId', async () => {\n            // Given\n            const invalidChainId = '12345';\n\n            // When\n            const isValidChainId = RfqMakerService.isValidChainId(invalidChainId);\n\n            // Then\n            expect(isValidChainId).to.be.eq(false);\n        });\n\n        it('should return number ChainId for well formated chainId', async () => {\n            // Given\n            const validChainId = '1337';\n\n            // When\n            const isValidChainId = RfqMakerService.isValidChainId(validChainId);\n\n            // Then\n            expect(isValidChainId).to.be.eq(true);\n        });\n    });\n\n    describe('validatePairsPayload', () => {\n        it('should pass with valid input pairs', async () => {\n            expect(() => {\n                RfqMakerService.validatePairsPayloadOrThrow(pairs);\n            }).to.not.throw();\n        });\n\n        it('should throw for non array input', async () => {\n            expect(() => {\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                RfqMakerService.validatePairsPayloadOrThrow('123' as any);\n            }).to.throw();\n        });\n\n        it('should throw for array of non arrays', async () => {\n            expect(() => {\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                RfqMakerService.validatePairsPayloadOrThrow(['123'] as any);\n            }).to.throw();\n        });\n\n        it('should throw for incorrect sub-array length', async () => {\n            expect(() => {\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                RfqMakerService.validatePairsPayloadOrThrow(['123'] as any);\n            }).to.throw();\n        });\n\n        it('should throw for pairs of invalid ethereum addresses', async () => {\n            expect(() => {\n                RfqMakerService.validatePairsPayloadOrThrow([['123', '234']]);\n            }).to.throw();\n        });\n\n        it('should throw for pairs of identical ethereum addresses', async () => {\n            expect(() => {\n                RfqMakerService.validatePairsPayloadOrThrow([\n                    ['0x374a16f5e686c09b0cc9e8bc3466b3b645c74aa7', '0x374a16f5e686c09b0cc9e8bc3466b3b645c74aa7'],\n                ]);\n            }).to.throw();\n        });\n    });\n});\n"],"version":3}