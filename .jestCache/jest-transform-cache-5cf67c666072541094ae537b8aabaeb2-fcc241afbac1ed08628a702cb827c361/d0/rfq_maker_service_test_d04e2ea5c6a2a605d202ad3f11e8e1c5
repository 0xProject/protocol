f81544801156b6d0707510dd1446bd6e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:custom-no-magic-numbers
// tslint:disable:no-empty
// tslint:disable:max-file-line-count
const contract_addresses_1 = require("@0x/contract-addresses");
const chai_1 = require("chai");
const ts_mockito_1 = require("ts-mockito");
const typeorm_1 = require("typeorm");
const entities_1 = require("../../src/entities");
const rfq_maker_service_1 = require("../../src/services/rfq_maker_service");
const config_manager_1 = require("../../src/utils/config_manager");
const rfq_maker_db_utils_1 = require("../../src/utils/rfq_maker_db_utils");
describe('RfqMakerService', () => {
    const makerId = 'fakeMaker1';
    const makerApiKey = 'fakeMakerApiKey1';
    const chainId = contract_addresses_1.ChainId.Ganache;
    const updatedAt = new Date();
    const pairs = [
        ['0x374a16f5e686c09b0cc9e8bc3466b3b645c74aa7', '0xf84830b73b2ed3c7267e7638f500110ea47fdf30'],
    ];
    describe('getRfqMakerAsync', () => {
        it('should get RfqMaker entity from db connection', async () => {
            // Given
            const rfqMaker = new entities_1.RfqMaker({
                makerId,
                chainId,
                updatedAt,
                pairs,
                rfqtUri: null,
                rfqmUri: null,
            });
            const repositoryMock = (0, ts_mockito_1.mock)(typeorm_1.Repository);
            (0, ts_mockito_1.when)(repositoryMock.findOne((0, ts_mockito_1.anything)())).thenResolve(rfqMaker);
            const connectionMock = (0, ts_mockito_1.mock)(typeorm_1.Connection);
            (0, ts_mockito_1.when)(connectionMock.getRepository(entities_1.RfqMaker)).thenReturn((0, ts_mockito_1.instance)(repositoryMock));
            const rfqDbUtils = new rfq_maker_db_utils_1.RfqMakerDbUtils((0, ts_mockito_1.instance)(connectionMock));
            const configManagerMock = (0, ts_mockito_1.mock)(config_manager_1.ConfigManager);
            const rfqMakerService = new rfq_maker_service_1.RfqMakerService(rfqDbUtils, configManagerMock);
            // When
            const rfqMakerFromSevice = await rfqMakerService.getRfqMakerAsync(makerId, chainId);
            // Then
            (0, chai_1.expect)(rfqMakerFromSevice.makerId).to.be.eq(makerId);
            (0, chai_1.expect)(rfqMakerFromSevice.chainId).to.be.eq(chainId);
            (0, chai_1.expect)(rfqMakerFromSevice.updatedAt).to.be.eq(updatedAt);
            (0, chai_1.expect)(rfqMakerFromSevice.pairs).to.be.eq(pairs);
        });
        it('should get default RfqMaker entity if there is no information in DB', async () => {
            // Given
            const repositoryMock = (0, ts_mockito_1.mock)(typeorm_1.Repository);
            (0, ts_mockito_1.when)(repositoryMock.findOne((0, ts_mockito_1.anything)())).thenResolve(undefined);
            const connectionMock = (0, ts_mockito_1.mock)(typeorm_1.Connection);
            (0, ts_mockito_1.when)(connectionMock.getRepository(entities_1.RfqMaker)).thenReturn((0, ts_mockito_1.instance)(repositoryMock));
            const rfqDbUtils = new rfq_maker_db_utils_1.RfqMakerDbUtils((0, ts_mockito_1.instance)(connectionMock));
            const configManagerMock = (0, ts_mockito_1.mock)(config_manager_1.ConfigManager);
            const rfqMakerService = new rfq_maker_service_1.RfqMakerService(rfqDbUtils, configManagerMock);
            // When
            const rfqMakerFromSevice = await rfqMakerService.getRfqMakerAsync(makerId, chainId);
            // Then
            (0, chai_1.expect)(rfqMakerFromSevice.makerId).to.be.eq(makerId);
            (0, chai_1.expect)(rfqMakerFromSevice.chainId).to.be.eq(chainId);
            (0, chai_1.expect)(rfqMakerFromSevice.updatedAt).to.be.eq(null);
            (0, chai_1.expect)(rfqMakerFromSevice.pairs.length).to.be.eq(0);
        });
    });
    describe('createOrUpdateRfqMakerAsync', () => {
        it('should create or update the RfqMaker entity through db connection', async () => {
            // Given
            const repositoryMock = (0, ts_mockito_1.mock)(typeorm_1.Repository);
            (0, ts_mockito_1.when)(repositoryMock.save((0, ts_mockito_1.anything)())).thenCall((rfqMaker) => {
                // Then
                (0, chai_1.expect)(rfqMaker.makerId).to.be.eq(makerId);
                (0, chai_1.expect)(rfqMaker.chainId).to.be.eq(chainId);
                (0, chai_1.expect)(rfqMaker.pairs).to.be.eq(pairs);
            });
            const connectionMock = (0, ts_mockito_1.mock)(typeorm_1.Connection);
            (0, ts_mockito_1.when)(connectionMock.getRepository(entities_1.RfqMaker)).thenReturn((0, ts_mockito_1.instance)(repositoryMock));
            const rfqDbUtils = new rfq_maker_db_utils_1.RfqMakerDbUtils((0, ts_mockito_1.instance)(connectionMock));
            const configManagerMock = (0, ts_mockito_1.mock)(config_manager_1.ConfigManager);
            const rfqMakerService = new rfq_maker_service_1.RfqMakerService(rfqDbUtils, configManagerMock);
            // When
            await rfqMakerService.createOrUpdateRfqMakerAsync(makerId, chainId, pairs, null, null);
        });
    });
    describe('patchRfqMakerAsync', () => {
        it('should update pairs', async () => {
            // Given
            const originalRfqMaker = new entities_1.RfqMaker({
                makerId,
                chainId,
                updatedAt,
                pairs,
                rfqtUri: null,
                rfqmUri: null,
            });
            const newPairs = [];
            const rfqMakerServiceMock = (0, ts_mockito_1.mock)(rfq_maker_service_1.RfqMakerService);
            (0, ts_mockito_1.when)(rfqMakerServiceMock.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(originalRfqMaker);
            // Expect
            (0, ts_mockito_1.when)(rfqMakerServiceMock.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenCall((makerIdToSave, chainIdToSave, pairsToSave, rfqtUriToSave, rfqmUriToSave) => {
                (0, chai_1.expect)(makerIdToSave).to.be.eq(originalRfqMaker.makerId);
                (0, chai_1.expect)(chainIdToSave).to.be.eq(originalRfqMaker.chainId);
                (0, chai_1.expect)(pairsToSave).to.be.eq(newPairs);
                (0, chai_1.expect)(rfqtUriToSave).to.be.eq(originalRfqMaker.rfqtUri);
                (0, chai_1.expect)(rfqmUriToSave).to.be.eq(originalRfqMaker.rfqmUri);
            });
            const rfqMakerService = (0, ts_mockito_1.instance)(rfqMakerServiceMock);
            // When
            await rfqMakerService.patchRfqMakerAsync(makerId, chainId, newPairs, undefined, undefined);
        });
        it('should update URIs from null to a valid string', async () => {
            // Given
            const originalRfqMaker = new entities_1.RfqMaker({
                makerId,
                chainId,
                updatedAt,
                pairs,
                rfqtUri: null,
                rfqmUri: null,
            });
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-inferrable-types
            const newRfqtUri = 'http://localhost:3001';
            const rfqMakerServiceMock = (0, ts_mockito_1.mock)(rfq_maker_service_1.RfqMakerService);
            (0, ts_mockito_1.when)(rfqMakerServiceMock.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(originalRfqMaker);
            // Expect
            (0, ts_mockito_1.when)(rfqMakerServiceMock.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenCall((makerIdToSave, chainIdToSave, pairsToSave, rfqtUriToSave, rfqmUriToSave) => {
                (0, chai_1.expect)(makerIdToSave).to.be.eq(originalRfqMaker.makerId);
                (0, chai_1.expect)(chainIdToSave).to.be.eq(originalRfqMaker.chainId);
                (0, chai_1.expect)(pairsToSave).to.be.eq(originalRfqMaker.pairs);
                (0, chai_1.expect)(rfqtUriToSave).to.be.eq(newRfqtUri);
                (0, chai_1.expect)(rfqmUriToSave).to.be.eq(originalRfqMaker.rfqmUri);
            });
            const rfqMakerService = (0, ts_mockito_1.instance)(rfqMakerServiceMock);
            // When
            await rfqMakerService.patchRfqMakerAsync(makerId, chainId, undefined, newRfqtUri, undefined);
        });
        it('should update URIs from string to null', async () => {
            // Given
            const originalRfqMaker = new entities_1.RfqMaker({
                makerId,
                chainId,
                updatedAt,
                pairs,
                rfqtUri: 'http://localhost:3001',
                rfqmUri: 'http://localhost:3002',
            });
            const rfqMakerServiceMock = (0, ts_mockito_1.mock)(rfq_maker_service_1.RfqMakerService);
            (0, ts_mockito_1.when)(rfqMakerServiceMock.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(originalRfqMaker);
            // Expect
            (0, ts_mockito_1.when)(rfqMakerServiceMock.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenCall((makerIdToSave, chainIdToSave, pairsToSave, rfqtUriToSave, rfqmUriToSave) => {
                (0, chai_1.expect)(makerIdToSave).to.be.eq(originalRfqMaker.makerId);
                (0, chai_1.expect)(chainIdToSave).to.be.eq(originalRfqMaker.chainId);
                (0, chai_1.expect)(pairsToSave).to.be.eq(originalRfqMaker.pairs);
                (0, chai_1.expect)(rfqtUriToSave).to.be.eq(originalRfqMaker.rfqtUri);
                (0, chai_1.expect)(rfqmUriToSave).to.be.eq(null);
            });
            const rfqMakerService = (0, ts_mockito_1.instance)(rfqMakerServiceMock);
            // When
            await rfqMakerService.patchRfqMakerAsync(makerId, chainId, undefined, undefined, null);
        });
    });
    describe('mapMakerApiKeyToId', () => {
        it('should map maker api key to maker id correctly', async () => {
            // Given
            const rfqDbUtils = (0, ts_mockito_1.mock)(rfq_maker_db_utils_1.RfqMakerDbUtils);
            const configManagerMock = (0, ts_mockito_1.mock)(config_manager_1.ConfigManager);
            (0, ts_mockito_1.when)(configManagerMock.getRfqMakerIdForApiKey(makerApiKey)).thenReturn(makerId);
            const rfqMakerService = new rfq_maker_service_1.RfqMakerService(rfqDbUtils, (0, ts_mockito_1.instance)(configManagerMock));
            // When
            const makerIdFromService = rfqMakerService.mapMakerApiKeyToId(makerApiKey);
            // Then
            (0, chai_1.expect)(makerIdFromService).to.be.eq(makerId);
        });
        it('should return null for undefined api key', async () => {
            // Given
            const rfqDbUtilsMock = (0, ts_mockito_1.mock)(rfq_maker_db_utils_1.RfqMakerDbUtils);
            const configManagerMock = (0, ts_mockito_1.mock)(config_manager_1.ConfigManager);
            (0, ts_mockito_1.when)(configManagerMock.getRfqMakerIdForApiKey(makerApiKey)).thenReturn(makerId);
            const rfqMakerService = new rfq_maker_service_1.RfqMakerService(rfqDbUtilsMock, (0, ts_mockito_1.instance)(configManagerMock));
            // When
            const makerIdFromService = rfqMakerService.mapMakerApiKeyToId(undefined);
            // Then
            (0, chai_1.expect)(makerIdFromService).to.be.eq(null);
        });
    });
    describe('isValidChainId', () => {
        it('should return false for invalid number chainId', async () => {
            // Given
            const invalidChainId = '123a';
            // When
            const isValidChainId = rfq_maker_service_1.RfqMakerService.isValidChainId(invalidChainId);
            // Then
            (0, chai_1.expect)(isValidChainId).to.be.eq(false);
        });
        it('should return false for unknown number chainId', async () => {
            // Given
            const invalidChainId = '12345';
            // When
            const isValidChainId = rfq_maker_service_1.RfqMakerService.isValidChainId(invalidChainId);
            // Then
            (0, chai_1.expect)(isValidChainId).to.be.eq(false);
        });
        it('should return number ChainId for well formated chainId', async () => {
            // Given
            const validChainId = '1337';
            // When
            const isValidChainId = rfq_maker_service_1.RfqMakerService.isValidChainId(validChainId);
            // Then
            (0, chai_1.expect)(isValidChainId).to.be.eq(true);
        });
    });
    describe('validatePairsPayload', () => {
        it('should pass with valid input pairs', async () => {
            (0, chai_1.expect)(() => {
                rfq_maker_service_1.RfqMakerService.validatePairsPayloadOrThrow(pairs);
            }).to.not.throw();
        });
        it('should throw for non array input', async () => {
            (0, chai_1.expect)(() => {
                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                rfq_maker_service_1.RfqMakerService.validatePairsPayloadOrThrow('123');
            }).to.throw();
        });
        it('should throw for array of non arrays', async () => {
            (0, chai_1.expect)(() => {
                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                rfq_maker_service_1.RfqMakerService.validatePairsPayloadOrThrow(['123']);
            }).to.throw();
        });
        it('should throw for incorrect sub-array length', async () => {
            (0, chai_1.expect)(() => {
                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                rfq_maker_service_1.RfqMakerService.validatePairsPayloadOrThrow(['123']);
            }).to.throw();
        });
        it('should throw for pairs of invalid ethereum addresses', async () => {
            (0, chai_1.expect)(() => {
                rfq_maker_service_1.RfqMakerService.validatePairsPayloadOrThrow([['123', '234']]);
            }).to.throw();
        });
        it('should throw for pairs of identical ethereum addresses', async () => {
            (0, chai_1.expect)(() => {
                rfq_maker_service_1.RfqMakerService.validatePairsPayloadOrThrow([
                    ['0x374a16f5e686c09b0cc9e8bc3466b3b645c74aa7', '0x374a16f5e686c09b0cc9e8bc3466b3b645c74aa7'],
                ]);
            }).to.throw();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,