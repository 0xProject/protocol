{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/Eip712UtilsTest.ts","mappings":";;AAAA,0CAA0C;AAC1C,6DAA4D;AAC5D,6DAAsE;AAEtE,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACrC,EAAE,CAAC,8EAA8E,EAAE,GAAG,EAAE;QACpF,MAAM,KAAK,GAAG,4CAA4C,CAAC,CAAC,OAAO;QACnE,MAAM,EAAE,MAAM,EAAE,GAAG,iCAAgB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;QAChD,MAAM,MAAM,GAAG,IAAA,qCAAuB,EAAC,MAAM,CAAC,CAAC;QAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACnB,YAAY,EAAE;gBACV,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE;gBAChC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE;gBACnC,EAAE,IAAI,EAAE,mBAAmB,EAAE,IAAI,EAAE,SAAS,EAAE;gBAC9C,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE;aACpC;SACJ,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gFAAgF,EAAE,GAAG,EAAE;QACtF,MAAM,KAAK,GAAG,4CAA4C,CAAC,CAAC,SAAS;QACrE,MAAM,EAAE,MAAM,EAAE,GAAG,iCAAgB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;QAChD,MAAM,MAAM,GAAG,IAAA,qCAAuB,EAAC,MAAM,CAAC,CAAC;QAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACnB,YAAY,EAAE;gBACV,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE;gBAChC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE;gBACnC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE;gBACpC,EAAE,IAAI,EAAE,mBAAmB,EAAE,IAAI,EAAE,SAAS,EAAE;aACjD;SACJ,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/Eip712UtilsTest.ts"],"sourcesContent":["// tslint:disable: custom-no-magic-numbers\nimport { EIP_712_REGISTRY } from '../../src/eip712registry';\nimport { extractEIP712DomainType } from '../../src/utils/Eip712Utils';\n\ndescribe('extractEIP712DomainType', () => {\n    it('extracts the EIP712Domain type from the domain for the USDC token on polygon', () => {\n        const token = '0x2791bca1f2de4661ed88a30c99a7a9449aa84174'; // USDC\n        const { domain } = EIP_712_REGISTRY[137][token];\n        const result = extractEIP712DomainType(domain);\n        expect(result).toEqual({\n            EIP712Domain: [\n                { name: 'name', type: 'string' },\n                { name: 'version', type: 'string' },\n                { name: 'verifyingContract', type: 'address' },\n                { name: 'salt', type: 'bytes32' },\n            ],\n        });\n    });\n\n    it('extracts the EIP712Domain type from the domain for the BANANA token on polygon', () => {\n        const token = '0x5d47baba0d66083c52009271faf3f50dcc01023c'; // BANANA\n        const { domain } = EIP_712_REGISTRY[137][token];\n        const result = extractEIP712DomainType(domain);\n        expect(result).toEqual({\n            EIP712Domain: [\n                { name: 'name', type: 'string' },\n                { name: 'version', type: 'string' },\n                { name: 'chainId', type: 'uint256' },\n                { name: 'verifyingContract', type: 'address' },\n            ],\n        });\n    });\n});\n"],"version":3}