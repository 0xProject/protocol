{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfqm_db_utils.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfqm_db_utils.ts"],"sourcesContent":["// tslint:disable:max-file-line-count\nimport { OtcOrder } from '@0x/protocol-utils';\nimport { BigNumber } from '@0x/utils';\nimport { FindOptionsWhere, In } from 'typeorm';\nimport { Connection } from 'typeorm/connection/Connection';\n\nimport { toPairString } from '../core/pair_utils';\nimport {\n    LastLookRejectionCooldownEntity,\n    MetaTransactionJobEntity,\n    MetaTransactionSubmissionEntity,\n    RfqmV2JobEntity,\n    RfqmV2QuoteEntity,\n    RfqmV2TransactionSubmissionEntity,\n} from '../entities';\nimport { MetaTransactionJobConstructorOpts } from '../entities/MetaTransactionJobEntity';\nimport { MetaTransactionSubmissionEntityConstructorOpts } from '../entities/MetaTransactionSubmissionEntity';\nimport { RfqmV2JobConstructorOpts } from '../entities/RfqmV2JobEntity';\nimport { RfqmV2QuoteConstructorOpts } from '../entities/RfqmV2QuoteEntity';\nimport { RfqmV2TransactionSubmissionEntityConstructorOpts } from '../entities/RfqmV2TransactionSubmissionEntity';\nimport { RfqmWorkerHeartbeatEntity } from '../entities/RfqmWorkerHeartbeatEntity';\nimport {\n    RfqmJobStatus,\n    RfqmOrderTypes,\n    RfqmTransactionSubmissionType,\n    StoredOtcOrder,\n    UnresolvedRfqmJobStatuses,\n} from '../entities/types';\n\n/**\n * Map a StoredOtcOrder to an OtcOrder\n */\nexport function storedOtcOrderToOtcOrder(storedOrder: StoredOtcOrder): OtcOrder {\n    return new OtcOrder({\n        txOrigin: storedOrder.order.txOrigin,\n        maker: storedOrder.order.maker,\n        taker: storedOrder.order.taker,\n        makerToken: storedOrder.order.makerToken,\n        takerToken: storedOrder.order.takerToken,\n        makerAmount: new BigNumber(storedOrder.order.makerAmount),\n        takerAmount: new BigNumber(storedOrder.order.takerAmount),\n        expiryAndNonce: new BigNumber(storedOrder.order.expiryAndNonce),\n        verifyingContract: storedOrder.order.verifyingContract,\n        chainId: Number(storedOrder.order.chainId),\n    });\n}\n\n/**\n * Map an OtcOrder to a StoredOtcOrder\n */\nexport function otcOrderToStoredOtcOrder(order: OtcOrder): StoredOtcOrder {\n    return {\n        type: RfqmOrderTypes.Otc,\n        order: {\n            txOrigin: order.txOrigin,\n            maker: order.maker,\n            taker: order.taker,\n            makerToken: order.makerToken,\n            takerToken: order.takerToken,\n            makerAmount: order.makerAmount.toString(),\n            takerAmount: order.takerAmount.toString(),\n            expiryAndNonce: order.expiryAndNonce.toString(),\n            verifyingContract: order.verifyingContract,\n            chainId: String(order.chainId),\n        },\n    };\n}\n\n/**\n * RfqmDbUtils provides tools for interacting with the database\n */\nexport class RfqmDbUtils {\n    constructor(private readonly _connection: Connection) {}\n\n    /**\n     * Fetches all the worker heartbeats for the provided chain ID.\n     */\n    public async findRfqmWorkerHeartbeatsAsync(chainId: number): Promise<RfqmWorkerHeartbeatEntity[]> {\n        return this._connection.getRepository(RfqmWorkerHeartbeatEntity).find({ where: { chainId } });\n    }\n\n    /**\n     * Updates an existing RFQM job.\n     */\n    public async updateRfqmJobAsync<T extends RfqmV2JobEntity | MetaTransactionJobEntity>(job: T): Promise<void> {\n        const kind = job.kind;\n        switch (kind) {\n            case 'rfqm_v2_job':\n                await this._connection.getRepository(RfqmV2JobEntity).save(job);\n                return;\n            case 'meta_transaction_job':\n                await this._connection.getRepository(MetaTransactionJobEntity).save(job);\n                return;\n            default:\n                ((_x: never) => {\n                    throw new Error('unreachable');\n                })(kind);\n        }\n    }\n\n    public async upsertRfqmWorkerHeartbeatToDbAsync(\n        address: string,\n        index: number,\n        balance: BigNumber,\n        chainId: number,\n    ): Promise<RfqmWorkerHeartbeatEntity> {\n        if (!Number.isInteger(index)) {\n            throw new Error(`Index ${index} is not an integer`);\n        }\n        const repository = this._connection.getRepository(RfqmWorkerHeartbeatEntity);\n\n        // Why I did not use `.save`:\n        // The `rfqm_worker_heartbeat` table has a trigger to automatically update the timestamp on UPDATE\n        // but the `.save` functionality is smart enough to not actually execute the update if none of the\n        // data has changed. Since this only happens when a worker balance changes, the timestamp won't\n        // update unless `.update` is explicitly called.\n        const updatedEntity = await repository.preload({ address, index, balance, chainId });\n        if (updatedEntity !== undefined) {\n            const findConditions: FindOptionsWhere<RfqmWorkerHeartbeatEntity> = {\n                address,\n                chainId,\n            };\n            await this._connection.getRepository(RfqmWorkerHeartbeatEntity).update(findConditions, updatedEntity);\n            return updatedEntity;\n        }\n\n        const newEntity = new RfqmWorkerHeartbeatEntity({ address, index, balance, chainId });\n        await this._connection.getRepository(RfqmWorkerHeartbeatEntity).insert(newEntity);\n        return newEntity;\n    }\n\n    /**\n     * Updates transactions in the `rfqm_v2_transaction_submission` or the `meta_transaction_submission` tables as appropriate.\n     */\n    public async updateRfqmTransactionSubmissionsAsync<\n        T extends RfqmV2TransactionSubmissionEntity[] | MetaTransactionSubmissionEntity[],\n    >(entities: T): Promise<void> {\n        if (entities.length === 0) {\n            return;\n        }\n\n        const kind = entities[0].kind;\n        switch (kind) {\n            case 'rfqm_v2_transaction_submission':\n                await this._connection\n                    .getRepository(RfqmV2TransactionSubmissionEntity)\n                    .save(entities as Partial<RfqmV2TransactionSubmissionEntity>[]);\n                return;\n            case 'meta_transaction_submission':\n                await this._connection\n                    .getRepository(MetaTransactionSubmissionEntity)\n                    .save(entities as Partial<MetaTransactionSubmissionEntity>[]);\n                return;\n            default:\n                ((_x: never) => {\n                    throw new Error('unreachable');\n                })(kind);\n        }\n    }\n\n    /**\n     * [RFQm v2] Queries the rfqm_job table with the given orderHash\n     */\n    public async findV2JobByOrderHashAsync(orderHash: string): Promise<RfqmV2JobEntity | null> {\n        return this._connection.getRepository(RfqmV2JobEntity).findOne({\n            where: { orderHash },\n        });\n    }\n\n    /**\n     * [RFQm v2] Queries the rfqm_quote table with the given orderHash\n     */\n    public async findV2QuoteByOrderHashAsync(orderHash: string): Promise<RfqmV2QuoteEntity | null> {\n        return this._connection.getRepository(RfqmV2QuoteEntity).findOne({\n            where: { orderHash },\n        });\n    }\n\n    /**\n     * [RFQm v2] Queries the `rfqm_v2_jobs` table for all jobs with the specified statuses\n     */\n    public async findV2JobsWithStatusesAsync(statuses: RfqmJobStatus[]): Promise<RfqmV2JobEntity[]> {\n        return this._connection.getRepository(RfqmV2JobEntity).find({\n            where: {\n                status: In(statuses),\n            },\n        });\n    }\n\n    /**\n     * [RFQm v2] Queries the rfqm_v2_transaction_submission table with the given transactionHash\n     */\n    public async findV2TransactionSubmissionByTransactionHashAsync(\n        transactionHash: string,\n    ): Promise<RfqmV2TransactionSubmissionEntity | null> {\n        return this._connection.getRepository(RfqmV2TransactionSubmissionEntity).findOne({\n            where: { transactionHash },\n        });\n    }\n\n    /**\n     * [RFQm v2] Queries the last_look_rejection_cooldowns table with primary key\n     */\n    public async findV2LastLookRejectionCooldownAsync(\n        makerId: string,\n        chainId: number,\n        tokenA: string,\n        tokenB: string,\n        startTime: Date,\n    ): Promise<LastLookRejectionCooldownEntity | null> {\n        return this._connection.getRepository(LastLookRejectionCooldownEntity).findOne({\n            where: {\n                makerId,\n                chainId,\n                pairKey: toPairString(tokenA, tokenB),\n                startTime,\n            },\n        });\n    }\n\n    /**\n     * [RFQm v2] Queries the rfqm_v2_transaction_submission table with the given orderHash\n     */\n    public async findV2TransactionSubmissionsByOrderHashAsync(\n        orderHash: string,\n        type: RfqmTransactionSubmissionType = RfqmTransactionSubmissionType.Trade,\n    ): Promise<RfqmV2TransactionSubmissionEntity[]> {\n        return this._connection.getRepository(RfqmV2TransactionSubmissionEntity).find({\n            where: { orderHash, type },\n        });\n    }\n\n    /**\n     * [RFQm v2] Updates an RfqmV2Job at the given orderHash\n     */\n    public async updateV2JobAsync(\n        orderHash: string,\n        isCompleted: boolean,\n        rfqmJobOpts: Partial<RfqmV2JobEntity>,\n    ): Promise<void> {\n        await this._connection.getRepository(RfqmV2JobEntity).save({ ...rfqmJobOpts, isCompleted, orderHash });\n    }\n\n    /**\n     * [RFQm v2] writes to the rfqm_v2_transaction_submission table\n     */\n    public async writeV2RfqmTransactionSubmissionToDbAsync(\n        partialV2RfqmTransactionSubmissionEntity: RfqmV2TransactionSubmissionEntityConstructorOpts,\n    ): Promise<RfqmV2TransactionSubmissionEntity> {\n        const entity = new RfqmV2TransactionSubmissionEntity(partialV2RfqmTransactionSubmissionEntity);\n        await this._connection.getRepository(RfqmV2TransactionSubmissionEntity).insert(entity);\n\n        return entity;\n    }\n\n    /**\n     * [RFQm v2] bulk update to the rfqm_v2_transaction_submission table\n     */\n    public async updateV2TransactionSubmissionsAsync(\n        entities: Partial<RfqmV2TransactionSubmissionEntity>[],\n    ): Promise<RfqmV2TransactionSubmissionEntity[]> {\n        return this._connection.getRepository(RfqmV2TransactionSubmissionEntity).save(entities);\n    }\n\n    /**\n     * [RFQm v2] writes to the rfqm_v2_quote table\n     */\n    public async writeV2QuoteAsync(rfqmV2QuoteOpts: RfqmV2QuoteConstructorOpts): Promise<void> {\n        await this._connection.getRepository(RfqmV2QuoteEntity).insert(new RfqmV2QuoteEntity(rfqmV2QuoteOpts));\n    }\n\n    /**\n     * [RFQm v2] writes to the rfqm_v2_job table\n     */\n    public async writeV2JobAsync(rfqmV2JobOpts: RfqmV2JobConstructorOpts): Promise<void> {\n        await this._connection.getRepository(RfqmV2JobEntity).insert(new RfqmV2JobEntity(rfqmV2JobOpts));\n    }\n\n    /**\n     * [RFQm v2] writes to the rfqm_v2_transaction_submission table. Should not error on duplicate\n     * primary key (PK), since the PK is essentially a hash of the contents of the table, minus status\n     */\n    public async writeV2TransactionSubmissionAsync(\n        constructorOpts: RfqmV2TransactionSubmissionEntityConstructorOpts,\n    ): Promise<RfqmV2TransactionSubmissionEntity> {\n        const entity = new RfqmV2TransactionSubmissionEntity(constructorOpts);\n        await this._connection.getRepository(RfqmV2TransactionSubmissionEntity).save(entity);\n\n        return entity;\n    }\n\n    /**\n     * [RFQm v2] writes to the last_look_rejection_cooldowns table\n     */\n    public async writeV2LastLookRejectionCooldownAsync(\n        makerId: string,\n        chainId: number,\n        tokenA: string,\n        tokenB: string,\n        startTime: Date,\n        endTime: Date,\n        orderHash: string,\n    ): Promise<void> {\n        await this._connection.getRepository(LastLookRejectionCooldownEntity).insert(\n            new LastLookRejectionCooldownEntity({\n                makerId,\n                chainId,\n                pairKey: toPairString(tokenA, tokenB),\n                startTime,\n                endTime,\n                orderHash,\n            }),\n        );\n    }\n\n    /**\n     * [RFQm v2] find unresolved jobs from the rfqm_v2_jobs table\n     * for a given worker address and chain ID.\n     */\n    public async findV2UnresolvedJobsAsync(workerAddress: string, chainId: number): Promise<RfqmV2JobEntity[]> {\n        return this._connection.getRepository(RfqmV2JobEntity).find({\n            where: {\n                chainId,\n                status: In(UnresolvedRfqmJobStatuses),\n                workerAddress,\n            },\n        });\n    }\n\n    /**\n     * [meta transaction] Queries the `meta_transaction_jobs` table with the given id.\n     */\n    public async findMetaTransactionJobByIdAsync(id: string): Promise<MetaTransactionJobEntity | null> {\n        return this._connection.getRepository(MetaTransactionJobEntity).findOne({\n            where: { id },\n        });\n    }\n\n    /**\n     * [meta transaction] Queries the `meta_transaction_jobs` table with the given meta transaction hash.\n     */\n    public async findMetaTransactionJobByMetaTransactionHashAsync(\n        metaTransactionHash: string,\n    ): Promise<MetaTransactionJobEntity | null> {\n        return this._connection.getRepository(MetaTransactionJobEntity).findOne({\n            where: { metaTransactionHash },\n        });\n    }\n\n    /**\n     * [meta transaction] Queries the `meta_transaction_jobs` table for all jobs with the specified statuss.\n     */\n    public async findMetaTransactionJobsWithStatusesAsync(\n        statuses: RfqmJobStatus[],\n    ): Promise<MetaTransactionJobEntity[]> {\n        return this._connection.getRepository(MetaTransactionJobEntity).find({\n            where: {\n                status: In(statuses),\n            },\n        });\n    }\n\n    /**\n     * [meta transaction] Writes to the `meta_transaction_jobs` tabe.\n     */\n    public async writeMetaTransactionJobAsync(\n        metaTransactionJobOpts: MetaTransactionJobConstructorOpts,\n    ): Promise<MetaTransactionJobEntity> {\n        return this._connection\n            .getRepository(MetaTransactionJobEntity)\n            .save(new MetaTransactionJobEntity(metaTransactionJobOpts));\n    }\n\n    /**\n     * [meta transaction] find unresolved jobs from the `meta_transaction_jobs` table for\n     * a given worker address and chain ID.\n     */\n    public async findUnresolvedMetaTransactionJobsAsync(\n        workerAddress: string,\n        chainId: number,\n    ): Promise<MetaTransactionJobEntity[]> {\n        return this._connection.getRepository(MetaTransactionJobEntity).find({\n            where: {\n                chainId,\n                status: In(UnresolvedRfqmJobStatuses),\n                workerAddress,\n            },\n        });\n    }\n\n    /**\n     * [meta transaction] Queries the `meta_transaction_submissions` table with the given submission id.\n     */\n    public async findMetaTransactionSubmissionByIdAsync(id: string): Promise<MetaTransactionSubmissionEntity | null> {\n        return this._connection.getRepository(MetaTransactionSubmissionEntity).findOne({\n            where: { id },\n        });\n    }\n\n    /**\n     * [meta transaction] Queries the `meta_transaction_submissions` table with the given transaction hash and type.\n     */\n    public async findMetaTransactionSubmissionsByTransactionHashAsync(\n        transactionHash: string,\n        type: RfqmTransactionSubmissionType,\n    ): Promise<MetaTransactionSubmissionEntity[]> {\n        return this._connection.getRepository(MetaTransactionSubmissionEntity).find({\n            where: { transactionHash, type },\n        });\n    }\n\n    /**\n     * [meta transaction] Queries the `meta_transaction_submissions` table with the given meta transaction job id and type.\n     */\n    public async findMetaTransactionSubmissionsByJobIdAsync(\n        metaTransactionJobId: string,\n        type: RfqmTransactionSubmissionType = RfqmTransactionSubmissionType.Trade,\n    ): Promise<MetaTransactionSubmissionEntity[]> {\n        return this._connection.getRepository(MetaTransactionSubmissionEntity).find({\n            where: { metaTransactionJobId, type },\n        });\n    }\n\n    /**\n     * [meta transaction] writes to the `meta_transaction_submissions` table.\n     */\n    public async writeMetaTransactionSubmissionAsync(\n        constructorOpts: MetaTransactionSubmissionEntityConstructorOpts,\n    ): Promise<MetaTransactionSubmissionEntity> {\n        return this._connection\n            .getRepository(MetaTransactionSubmissionEntity)\n            .save(new MetaTransactionSubmissionEntity(constructorOpts));\n    }\n}\n"],"version":3}