{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/core/meta_transaction_fee_utils_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/core/meta_transaction_fee_utils_test.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { feesToTruncatedFees, getFeeConfigsFromParams, rawFeesToFees } from '../../src/core/meta_transaction_fee_utils';\nimport { MAINET_TOKEN_ADDRESSES } from '../constants';\n\nconst FEE_TOKEN = '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174';\nconst FEE_RECIPIENT = '0x4ea754349ace5303c82f0d1d491041e042f2ad22';\nconst INTEGRATOR_ID = '5062340f-87bb-4e1b-8029-eb8c03a9989c';\n\ndescribe('meta_transaction_fee_utils', () => {\n    describe('rawFeesToFees', () => {\n        it('returns undefined if `rawFees` is undefined', () => {\n            expect(rawFeesToFees(undefined)).toBeUndefined();\n        });\n\n        describe('integrator fee', () => {\n            it('returns integrator fee as undefined if integrator fee is not provided', () => {\n                const fees = rawFeesToFees({\n                    zeroExFee: {\n                        type: 'integrator_share',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: '1000',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        integratorSharePercentage: '10',\n                    },\n                });\n                expect(fees).toBeTruthy();\n                expect(fees?.integratorFee).toBeUndefined();\n            });\n\n            it('returns the correct integrator fee if integrator fee is provided', () => {\n                const fees = rawFeesToFees({\n                    integratorFee: {\n                        type: 'volume',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: '1000',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        volumePercentage: '10',\n                    },\n                    zeroExFee: {\n                        type: 'integrator_share',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: '100000',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        integratorSharePercentage: '1',\n                    },\n                });\n                expect(fees).toBeTruthy();\n                expect(fees?.integratorFee).toEqual({\n                    type: 'volume',\n                    feeToken: FEE_TOKEN,\n                    feeAmount: new BigNumber(1000),\n                    feeRecipient: FEE_RECIPIENT,\n                    billingType: 'on-chain',\n                    volumePercentage: new BigNumber(10),\n                });\n            });\n        });\n\n        describe('0x fee', () => {\n            it('returns 0x fee as undefined if 0x fee is not provided', () => {\n                const fees = rawFeesToFees({\n                    integratorFee: {\n                        type: 'volume',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: '1000',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        volumePercentage: '10',\n                    },\n                });\n                expect(fees).toBeTruthy();\n                expect(fees?.zeroExFee).toBeUndefined();\n            });\n\n            it('returns the correct 0x fee volume fee if 0x fee is provided', () => {\n                const fees = rawFeesToFees({\n                    integratorFee: {\n                        type: 'volume',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: '1000',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        volumePercentage: '10',\n                    },\n                    zeroExFee: {\n                        type: 'volume',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: '100000',\n                        feeRecipient: null,\n                        billingType: 'off-chain',\n                        volumePercentage: '1',\n                    },\n                });\n                expect(fees).toBeTruthy();\n                expect(fees?.zeroExFee).toEqual({\n                    type: 'volume',\n                    feeToken: FEE_TOKEN,\n                    feeAmount: new BigNumber(100000),\n                    feeRecipient: null,\n                    billingType: 'off-chain',\n                    volumePercentage: new BigNumber(1),\n                });\n            });\n\n            it('returns the correct 0x fee integrator share fee if 0x fee is provided', () => {\n                const fees = rawFeesToFees({\n                    integratorFee: {\n                        type: 'volume',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: '1000',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        volumePercentage: '10',\n                    },\n                    zeroExFee: {\n                        type: 'integrator_share',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: '100000',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        integratorSharePercentage: '1',\n                    },\n                });\n                expect(fees).toBeTruthy();\n                expect(fees?.zeroExFee).toEqual({\n                    type: 'integrator_share',\n                    feeToken: FEE_TOKEN,\n                    feeAmount: new BigNumber(100000),\n                    feeRecipient: FEE_RECIPIENT,\n                    billingType: 'on-chain',\n                    integratorSharePercentage: new BigNumber(1),\n                });\n            });\n        });\n\n        describe('gas fee', () => {\n            it('returns gas fee as undefined if gas fee is not provided', () => {\n                const fees = rawFeesToFees({\n                    zeroExFee: {\n                        type: 'integrator_share',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: '1000',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        integratorSharePercentage: '10',\n                    },\n                });\n                expect(fees).toBeTruthy();\n                expect(fees?.gasFee).toBeUndefined();\n            });\n\n            it('returns the correct gas fee if gas is provided', () => {\n                const fees = rawFeesToFees({\n                    integratorFee: {\n                        type: 'volume',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: '1000',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        volumePercentage: '10',\n                    },\n                    zeroExFee: {\n                        type: 'integrator_share',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: '100000',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        integratorSharePercentage: '1',\n                    },\n                    gasFee: {\n                        type: 'gas',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: '10',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        gasPrice: '123',\n                        estimatedGas: '200000',\n                        feeTokenAmountPerBaseUnitNativeToken: '0.0001',\n                    },\n                });\n                expect(fees).toBeTruthy();\n                expect(fees?.gasFee).toEqual({\n                    type: 'gas',\n                    feeToken: FEE_TOKEN,\n                    feeAmount: new BigNumber(10),\n                    feeRecipient: FEE_RECIPIENT,\n                    billingType: 'on-chain',\n                    gasPrice: new BigNumber(123),\n                    estimatedGas: new BigNumber(200000),\n                    feeTokenAmountPerBaseUnitNativeToken: new BigNumber(0.0001),\n                });\n            });\n        });\n    });\n\n    describe('getFeeConfigsFromParams', () => {\n        describe('integrator fee', () => {\n            it('returns undefined integrator fee if `integratorFeeConfig` is not provided', () => {\n                const integratorFeeConfig = getFeeConfigsFromParams({\n                    integratorId: INTEGRATOR_ID,\n                    chainId: 1,\n                    sellToken: MAINET_TOKEN_ADDRESSES.WETH,\n                    buyToken: MAINET_TOKEN_ADDRESSES.USDC,\n                }).integratorFee;\n                expect(integratorFeeConfig).toBeUndefined();\n            });\n\n            it('returns the correct integrator fee', () => {\n                const integratorFeeConfig = getFeeConfigsFromParams({\n                    integratorId: INTEGRATOR_ID,\n                    chainId: 1,\n                    sellToken: MAINET_TOKEN_ADDRESSES.WETH,\n                    buyToken: MAINET_TOKEN_ADDRESSES.USDC,\n                    integratorFeeConfig: {\n                        type: 'volume',\n                        recipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        sellTokenPercentage: new BigNumber(0.1),\n                    },\n                }).integratorFee;\n                expect(integratorFeeConfig).toEqual({\n                    type: 'volume',\n                    feeRecipient: FEE_RECIPIENT,\n                    billingType: 'on-chain',\n                    volumePercentage: new BigNumber(0.1),\n                });\n            });\n        });\n\n        describe('0x fee', () => {\n            describe('coinbase mainnet', () => {\n                it('matches a specific pair', () => {\n                    const zeroExFeeConfig = getFeeConfigsFromParams({\n                        integratorId: INTEGRATOR_ID,\n                        chainId: 1,\n                        sellToken: MAINET_TOKEN_ADDRESSES.WETH,\n                        buyToken: MAINET_TOKEN_ADDRESSES.USDC,\n                    }).zeroExFee;\n\n                    expect(zeroExFeeConfig).toBeTruthy();\n                    expect(zeroExFeeConfig).toEqual({\n                        type: 'volume',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        volumePercentage: new BigNumber(0.5),\n                    });\n                });\n\n                it('matches a cartesian product if no matches for specific pair', () => {\n                    const zeroExFeeConfig = getFeeConfigsFromParams({\n                        integratorId: INTEGRATOR_ID,\n                        chainId: 1,\n                        sellToken: MAINET_TOKEN_ADDRESSES.DAI,\n                        buyToken: MAINET_TOKEN_ADDRESSES.WBTC,\n                    }).zeroExFee;\n\n                    expect(zeroExFeeConfig).toBeTruthy();\n                    expect(zeroExFeeConfig).toEqual({\n                        type: 'volume',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        volumePercentage: new BigNumber(0.7),\n                    });\n                });\n\n                it('matches a token if no matches for specific pair and cartesian product', () => {\n                    const zeroExFeeConfig = getFeeConfigsFromParams({\n                        integratorId: INTEGRATOR_ID,\n                        chainId: 1,\n                        sellToken: MAINET_TOKEN_ADDRESSES.SHIB,\n                        buyToken: MAINET_TOKEN_ADDRESSES.WBTC,\n                    }).zeroExFee;\n\n                    expect(zeroExFeeConfig).toBeTruthy();\n                    expect(zeroExFeeConfig).toEqual({\n                        type: 'volume',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        volumePercentage: new BigNumber(1.5),\n                    });\n                });\n\n                it('matches a wildcard token if no matches for specific pair, cartesian product and exact token', () => {\n                    const zeroExFeeConfig = getFeeConfigsFromParams({\n                        integratorId: INTEGRATOR_ID,\n                        chainId: 1,\n                        sellToken: MAINET_TOKEN_ADDRESSES.SHIB,\n                        buyToken: MAINET_TOKEN_ADDRESSES.AAVE,\n                    }).zeroExFee;\n\n                    expect(zeroExFeeConfig).toBeTruthy();\n                    expect(zeroExFeeConfig).toEqual({\n                        type: 'volume',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        volumePercentage: new BigNumber(0.05),\n                    });\n                });\n            });\n\n            describe('default mainnet', () => {\n                it('returns the correct 0x fee config', () => {\n                    const zeroExFeeConfig = getFeeConfigsFromParams({\n                        integratorId: '*',\n                        chainId: 1,\n                        sellToken: MAINET_TOKEN_ADDRESSES.WETH,\n                        buyToken: MAINET_TOKEN_ADDRESSES.USDC,\n                    }).zeroExFee;\n\n                    expect(zeroExFeeConfig).toBeTruthy();\n                    expect(zeroExFeeConfig).toEqual({\n                        type: 'integrator_share',\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        integratorSharePercentage: new BigNumber(0.03),\n                    });\n                });\n            });\n        });\n\n        describe('gas fee', () => {\n            it('returns the correct gas fee config', () => {\n                const gasFeeConfig = getFeeConfigsFromParams({\n                    integratorId: INTEGRATOR_ID,\n                    chainId: 1,\n                    sellToken: MAINET_TOKEN_ADDRESSES.WETH,\n                    buyToken: MAINET_TOKEN_ADDRESSES.USDC,\n                }).gasFee;\n                expect(gasFeeConfig).toEqual({\n                    type: 'gas',\n                    feeRecipient: null,\n                    billingType: 'off-chain',\n                });\n            });\n        });\n    });\n\n    describe('feesToTruncatedFees', () => {\n        it('returns undefined when `fees` is undefined', () => {\n            expect(feesToTruncatedFees(undefined)).toBeUndefined();\n        });\n\n        it('returns correct truncated fee', () => {\n            expect(\n                feesToTruncatedFees({\n                    integratorFee: {\n                        type: 'volume',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: new BigNumber(1000),\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        volumePercentage: new BigNumber(10),\n                    },\n                    zeroExFee: {\n                        type: 'integrator_share',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: new BigNumber(100),\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        integratorSharePercentage: new BigNumber(1),\n                    },\n                    gasFee: {\n                        type: 'gas',\n                        feeToken: FEE_TOKEN,\n                        feeAmount: new BigNumber(1),\n                        feeRecipient: FEE_RECIPIENT,\n                        billingType: 'on-chain',\n                        gasPrice: new BigNumber(123),\n                        estimatedGas: new BigNumber(200000),\n                        feeTokenAmountPerBaseUnitNativeToken: new BigNumber(0.0001),\n                    },\n                }),\n            );\n        });\n    });\n});\n"],"version":3}