{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfqm_health_check.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfqm_health_check.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { Gauge } from 'prom-client';\nimport { Producer } from 'sqs-producer';\n\nimport { ETH_DECIMALS, RFQM_TX_GAS_ESTIMATE } from '../core/constants';\nimport { RfqmWorkerHeartbeatEntity } from '../entities';\nimport { RfqMakerAssetOfferings } from './rfq_maker_manager';\n\nconst SQS_QUEUE_SIZE_DEGRADED_THRESHOLD = 10; // More messages sitting in queue than this will cause a DEGRADED issue\nconst SQS_QUEUE_SIZE_FAILED_THRESHOLD = 20; // More messages sitting in queue than this will cause a FAILED issue\n\nconst RECENT_HEARTBEAT_AGE_THRESHOLD = 5; // (minutes) Heartbeats older than this will produce a DEGRADED issue. A FAILED issue is produced if NO heartbeats are newer than this.\n\nconst BALANCE_FAILED_THRESHOLD = 0.04; // (eth) If NO worker has a balance higher than this, a FAILED issue gets created.\n// tslint:disable-next-line: custom-no-magic-numbers\nconst BALANCE_DEGRADED_THRESHOLD = 0.1; // (eth) If < 2 workers have a balance lower than this, a DEGRADED issue gets created.\n\nconst MS_IN_MINUTE = 60000;\n\nconst BALANCE_DEGRADED_THRESHOLD_WEI = new BigNumber(BALANCE_DEGRADED_THRESHOLD).shiftedBy(ETH_DECIMALS);\nconst BALANCE_FAILED_THRESHOLD_WEI = new BigNumber(BALANCE_FAILED_THRESHOLD).shiftedBy(ETH_DECIMALS);\n\nconst RFQM_HEALTH_CHECK_ISSUE_GAUGE = new Gauge({\n    name: 'rfqm_health_check_issue_gauge',\n    labelNames: ['label' /* :HealthCheckLabel */, 'chain_id'],\n    help: 'Gauge indicating the current status for each label. Value corresponds to the `statusSeverity`',\n});\n\nconst RFQM_TOTAL_SYSTEM_TRADE_CAPACITY_GAUGE = new Gauge({\n    name: 'rfqm_total_system_trade_capacity',\n    labelNames: ['chain_id'],\n    help: 'Total amount of ETH in the worker pool divided by the current expected gas of a trade',\n});\n\nexport enum HealthCheckStatus {\n    Operational = 'operational',\n    Maintenance = 'maintenance',\n    Degraded = 'degraded',\n    Failed = 'failed',\n}\n\ntype HealthCheckLabel = 'RFQM_MAINTENANCE_MODE config `true`' | 'queue size' | 'worker balance' | 'worker heartbeat';\n\ninterface HealthCheckIssue {\n    status: HealthCheckStatus;\n    description: string;\n    label: HealthCheckLabel;\n}\n\n/**\n * The complete result of an RFQm health check routine.\n * For public users, this should be converted to a `RfqmHealthCheckShortResponse` before being\n * sent in the reponse in order to not expose potentially-sensitive system details.\n */\nexport interface HealthCheckResult {\n    status: HealthCheckStatus;\n    pairs: {\n        [pair: string]: HealthCheckStatus; // where the pair has the form `${contractA}-${contractB}`\n    };\n    http: {\n        status: HealthCheckStatus;\n        issues: HealthCheckIssue[];\n    };\n    workers: {\n        status: HealthCheckStatus;\n        issues: HealthCheckIssue[];\n    };\n    // TODO (rhinodavid): Add MarketMakers\n}\n\nexport interface RfqmHealthCheckShortResponse {\n    isOperational: boolean;\n    pairs: [string, string][];\n}\n\n/**\n * Produces a full health check from the given inupts.\n */\nexport async function computeHealthCheckAsync(\n    isMaintainenceMode: boolean,\n    offerings: RfqMakerAssetOfferings,\n    producer: Producer,\n    heartbeats: RfqmWorkerHeartbeatEntity[],\n    chainId: number,\n    gasPrice?: BigNumber,\n): Promise<HealthCheckResult> {\n    const pairs = transformPairs(offerings);\n\n    const httpIssues = getHttpIssues(isMaintainenceMode);\n    const httpStatus = getWorstStatus(httpIssues.map((issue) => issue.status));\n\n    const queueIssues = await checkSqsQueueAsync(producer);\n    const heartbeatIssues = await checkWorkerHeartbeatsAsync(heartbeats);\n    const workersIssues = [...queueIssues, ...heartbeatIssues];\n    const workersStatus = getWorstStatus(workersIssues.map((issue) => issue.status));\n\n    // Prometheus counters\n    const severityByLabel: Record<HealthCheckLabel, number> = {\n        'RFQM_MAINTENANCE_MODE config `true`': statusSeverity(HealthCheckStatus.Operational),\n        'queue size': statusSeverity(HealthCheckStatus.Operational),\n        'worker balance': statusSeverity(HealthCheckStatus.Operational),\n        'worker heartbeat': statusSeverity(HealthCheckStatus.Operational),\n    };\n    [...httpIssues, ...workersIssues].forEach(\n        (issue) =>\n            (severityByLabel[issue.label] = Math.max(severityByLabel[issue.label], statusSeverity(issue.status))),\n    );\n    Object.entries(severityByLabel).forEach(([label, severity]) => {\n        RFQM_HEALTH_CHECK_ISSUE_GAUGE.labels(label, chainId.toString()).set(severity);\n    });\n\n    if (gasPrice) {\n        // Note that this gauge is an estimation of the total number of trades, since two workers could have\n        // 50% of the amount for one trade and the gauge would show 1 but the actual capacity would be 0.\n        const totalWorkerBalance = heartbeats.reduce((total, { balance }) => total.plus(balance), new BigNumber(0));\n        const totalSystemTradeCapacity = totalWorkerBalance.div(gasPrice.times(RFQM_TX_GAS_ESTIMATE));\n        RFQM_TOTAL_SYSTEM_TRADE_CAPACITY_GAUGE.labels(chainId.toString()).set(totalSystemTradeCapacity.toNumber());\n    }\n\n    return {\n        status: getWorstStatus([httpStatus, workersStatus]),\n        pairs,\n        http: { status: httpStatus, issues: httpIssues },\n        workers: { status: workersStatus, issues: workersIssues },\n    };\n}\n\n/**\n * Transform the full health check result into the minimal response the Matcha UI requires.\n */\nexport function transformResultToShortResponse(result: HealthCheckResult): RfqmHealthCheckShortResponse {\n    return {\n        isOperational: result.status === HealthCheckStatus.Operational || result.status === HealthCheckStatus.Degraded,\n        pairs: Object.entries(result.pairs)\n            .filter(\n                ([_pair, status]) => status === HealthCheckStatus.Operational || status === HealthCheckStatus.Degraded,\n            )\n            .map(([pair, _status]) => {\n                const [tokenA, tokenB] = pair.split('-');\n                return [tokenA, tokenB];\n            }),\n    };\n}\n\n/**\n * Changes the set of trading pairs from the format used in config to the format used in the health check response.\n */\nfunction transformPairs(offerings: RfqMakerAssetOfferings): { [pair: string]: HealthCheckStatus } {\n    return Object.values(offerings)\n        .flat()\n        .reduce((result: { [pair: string]: HealthCheckStatus }, pair) => {\n            const [tokenA, tokenB] = pair.sort();\n            // Currently, we assume all pairs are operation. In the future, this may not be the case.\n            result[`${tokenA}-${tokenB}`] = HealthCheckStatus.Operational;\n            return result;\n        }, {});\n}\n\n/**\n * Creates issues related to the server/API not specific to the worker farm.\n */\nexport function getHttpIssues(isMaintainenceMode: boolean): HealthCheckIssue[] {\n    const issues: HealthCheckIssue[] = [];\n    if (isMaintainenceMode) {\n        issues.push({\n            status: HealthCheckStatus.Maintenance,\n            description: 'RFQM is set to maintainence mode via the 0x API configuration',\n            label: 'RFQM_MAINTENANCE_MODE config `true`',\n        });\n    }\n    return issues;\n}\n\n/**\n * Runs checks on the SQS queue to detect if there are messages piling up.\n */\nexport async function checkSqsQueueAsync(producer: Producer): Promise<HealthCheckIssue[]> {\n    const results: HealthCheckIssue[] = [];\n    const messagesInQueue = await producer.queueSize();\n    if (messagesInQueue === 0) {\n        return results;\n    }\n    if (messagesInQueue > SQS_QUEUE_SIZE_FAILED_THRESHOLD) {\n        results.push({\n            status: HealthCheckStatus.Failed,\n            description: `SQS queue contains ${messagesInQueue} messages (threshold is ${SQS_QUEUE_SIZE_FAILED_THRESHOLD})`,\n            label: 'queue size',\n        });\n    } else if (messagesInQueue > SQS_QUEUE_SIZE_DEGRADED_THRESHOLD) {\n        results.push({\n            status: HealthCheckStatus.Degraded,\n            description: `SQS queue contains ${messagesInQueue} messages (threshold is ${SQS_QUEUE_SIZE_DEGRADED_THRESHOLD})`,\n            label: 'queue size',\n        });\n    }\n    return results;\n}\n\n/**\n * Returns a numerical value which corresponds to the \"severity\" of a `HealthCheckStatus` enum member.\n * Higher values are more severe. (Oh to have SwiftLang enums here.)\n */\nfunction statusSeverity(status: HealthCheckStatus): number {\n    // tslint:disable custom-no-magic-numbers\n    switch (status) {\n        case HealthCheckStatus.Failed:\n            return 4;\n        case HealthCheckStatus.Maintenance:\n            return 3;\n        case HealthCheckStatus.Degraded:\n            return 2;\n        case HealthCheckStatus.Operational:\n            return 1;\n        default:\n            throw new Error(`Received unknown status: ${status}`);\n    }\n    // tslint:enable custom-no-magic-numbers\n}\n\n/**\n * Accepts a list of statuses and returns the worst status\n */\nfunction getWorstStatus(statuses: HealthCheckStatus[]): HealthCheckStatus {\n    if (!statuses.length) {\n        return HealthCheckStatus.Operational;\n    }\n    return statuses.reduce(\n        (worstStatus, currentStatus) =>\n            statusSeverity(currentStatus) > statusSeverity(worstStatus) ? currentStatus : worstStatus,\n        HealthCheckStatus.Operational,\n    );\n}\n\n/**\n * Looks at the worker heartbeats and produces appropriate issues based on the age\n * of the heartbeats and the worker balances.\n *\n * Heartbeat Age: Checks the most recent heartbeat and produces a FAILED issue if it is older than the failed\n * threshold. For heartbeats other than the most recent, will only produce a DEGRADED issue. (i.e. the check only\n * fails if ALL workers are stuck)\n *\n * Worker Balance: Like with the age check, this only produces a FAILED issue if all workers are below the failed\n * balance. Individual worker balances produce a DEGRADED issue if they are below BALANCE_DEGRADED_THRESHOLD.\n *\n * Current date is an optional parameter for testing.\n */\nexport async function checkWorkerHeartbeatsAsync(\n    heartbeats: RfqmWorkerHeartbeatEntity[],\n    nowDate: Date = new Date(),\n): Promise<HealthCheckIssue[]> {\n    const results: HealthCheckIssue[] = [];\n    if (!heartbeats.length) {\n        return [\n            {\n                status: HealthCheckStatus.Failed,\n                description: 'No worker heartbeats were found',\n                label: 'worker heartbeat',\n            },\n        ];\n    }\n\n    // Heartbeat Age\n    const sortedHeartbeats = heartbeats.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n    const newestHeartbeat = sortedHeartbeats[0];\n    const newestHeartbeatAgeMinutes = (nowDate.getTime() - newestHeartbeat.timestamp.getTime()) / MS_IN_MINUTE;\n    if (newestHeartbeatAgeMinutes > RECENT_HEARTBEAT_AGE_THRESHOLD) {\n        results.push({\n            status: HealthCheckStatus.Failed,\n            description: `No worker has published a heartbeat in the last ${RECENT_HEARTBEAT_AGE_THRESHOLD} minutes`,\n            label: 'worker heartbeat',\n        });\n    }\n    // TODO (rhinodavid): Think about how this will work when we downscale and a worker isn't producing new\n    // hearbeats because it's been removed.\n    sortedHeartbeats.forEach(({ index, timestamp, address }) => {\n        const heartbeatAgeMinutes = (nowDate.getTime() - timestamp.getTime()) / MS_IN_MINUTE;\n        if (heartbeatAgeMinutes >= RECENT_HEARTBEAT_AGE_THRESHOLD) {\n            results.push({\n                status: HealthCheckStatus.Degraded,\n                description: `Worker ${index} (${address}) last heartbeat was ${heartbeatAgeMinutes} ago`,\n                label: 'worker heartbeat',\n            });\n        }\n    });\n\n    // Balances\n    const heartbeatsAboveCriticalBalanceThreshold = heartbeats.filter(({ balance }) =>\n        balance.isGreaterThanOrEqualTo(BALANCE_FAILED_THRESHOLD_WEI),\n    );\n    if (heartbeatsAboveCriticalBalanceThreshold.length === 0) {\n        results.push({\n            status: HealthCheckStatus.Failed,\n            description: `No worker has a balance greater than the failed threshold (${BALANCE_FAILED_THRESHOLD})`,\n            label: 'worker heartbeat',\n        });\n    }\n\n    const heartbeatsAboveDegradedBalanceThreshold = heartbeats.filter(({ balance }) =>\n        balance.isGreaterThan(BALANCE_DEGRADED_THRESHOLD_WEI),\n    );\n    if (heartbeatsAboveDegradedBalanceThreshold.length < 2) {\n        results.push({\n            status: HealthCheckStatus.Degraded,\n            description: `Less than two workers have a balance above the degraded threshold (${BALANCE_DEGRADED_THRESHOLD})`,\n            label: 'worker heartbeat',\n        });\n    }\n    return results;\n}\n"],"version":3}