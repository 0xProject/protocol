{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/config.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/config.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers max-file-line-count\nimport { HttpServiceConfig } from '@0x/api-utils';\nimport { assert } from '@0x/assert';\nimport { ChainId } from '@0x/contract-addresses';\nimport { BigNumber } from '@0x/utils';\nimport * as fs from 'fs';\nimport * as _ from 'lodash';\nimport * as validateUUID from 'uuid-validate';\n\nimport {\n    DEFAULT_BACKGROUND_JOB_TYPES,\n    DEFAULT_ETH_GAS_STATION_API_URL,\n    DEFAULT_EXPECTED_MINED_SEC,\n    DEFAULT_LOCAL_POSTGRES_URI,\n    DEFAULT_LOCAL_REDIS_URI,\n    DEFAULT_LOGGER_INCLUDE_TIMESTAMP,\n    DEFAULT_SENTRY_ENVIRONMENT,\n    HEALTHCHECK_PATH,\n    METRICS_PATH,\n    NULL_ADDRESS,\n    ONE_MINUTE_MS,\n} from './core/constants';\nimport { schemas } from './core/schemas';\nimport { FeeModelVersion } from './core/types';\nimport { toPairString } from './core/pair_utils';\nimport { schemaUtils } from './core/schema_utils';\n\n// tslint:disable:no-bitwise\n\nenum EnvVarType {\n    AddressList,\n    StringList,\n    Integer,\n    Port,\n    KeepAliveTimeout,\n    ChainId,\n    ETHAddressHex,\n    UnitAmount,\n    Rate,\n    Url,\n    UrlList,\n    WhitelistAllTokens,\n    Boolean,\n    NonEmptyString,\n    APIKeys,\n    PrivateKeys,\n    RfqMakerAssetOfferings,\n    LiquidityProviderRegistry,\n    JsonStringList,\n}\n\n/**\n * Values read from configuration files which enable\n * rfq-api to operate on a chain.\n */\nexport interface ChainConfiguration {\n    chainId: number;\n    gasStationUrl: string;\n    name: string; // human readable, for logging and such\n    registryAddress: string;\n    rpcUrl: string;\n    sqsUrl: string;\n    zeroExClientBaseUrl: string;\n    // Enables caching for maker balances on observed tokens\n    enableMakerBalanceCache?: boolean;\n    // Use this config to override the 0x Exchange Proxy contract address.\n    // There might be a case when we want a different exchange\n    // proxy contract than what is defined from @0x/contract-addresses repo.\n    //\n    // i.e. testing a new feature that hasn't been deployed to the official\n    // contract yet\n    exchangeProxyContractAddressOverride?: string;\n    // Service configuration needs to be present to run the corresponding service.\n    gasless?: {\n        metaTransactionServiceUrl: string;\n    };\n    rfqm?: {\n        minExpiryDurationMs?: number;\n        quoteReportTopic?: string;\n        feeModelVersion?: FeeModelVersion;\n    };\n    rfqt?: {\n        minExpiryDurationMs?: number;\n        feeEventTopic?: string;\n        feeModelVersion?: FeeModelVersion;\n    };\n    worker?: {\n        // The value of the \"tip\" the worker will use when it starts\n        // submitting transactions\n        initialMaxPriorityFeePerGasGwei: number;\n        // The max fee per gas (in gwei) the worker is willing to pay for a transaction\n        maxFeePerGasCapGwei: number;\n        // Use this config to change the sleep time between a transacion's on-chain status check.\n        // You should set the sleep time close to the chain's block time.\n        // The smaller sleep time, the more frequent a transaction is checked to see it has been\n        // settled on-chain but it also consumes more RPC calls.\n        transactionWatcherSleepTimeMs?: number;\n        enableAccessList?: boolean;\n    };\n}\n\nexport type ChainConfigurations = ChainConfiguration[];\n\n/**\n * Configuration which contains information about chains and\n * related resources, like the RPC url.\n */\nexport const CHAIN_CONFIGURATIONS: ChainConfigurations = (() => {\n    let result: ChainConfigurations;\n    try {\n        result = resolveEnvVar<ChainConfigurations>('CHAIN_CONFIGURATIONS', EnvVarType.JsonStringList, []);\n        schemaUtils.validateSchema(result, schemas.chainConfigurationsSchema);\n    } catch (e) {\n        throw new Error(`CHAIN_CONFIGURATIONS was defined but is not valid JSON per the schema: ${e}`);\n    }\n    return result;\n})();\n\nexport interface ZeroExFeeConfigEntryBase {\n    volumePercentage?: number;\n    integratorSharePercentage?: number;\n    // marginRakePercentage?: number; // for RFQ liqiduity\n}\n\n/**\n * 0x fee config entry for pairs.\n *\n * For example, this means the following pair take 10% volume fee.\n *  {\n *      kind: 'pair',\n *      pairs: [\n *          {\n *              tokenA: '0x123456...',\n *              tokenB: '0x654321...',\n *              label: 'token1-token2',\n *          },\n *          {\n *              tokenA: '0x13579...',\n *              tokenB: '0x24681...',\n *              label: 'token3-token4',\n *          }\n *      ],\n *      volumePercentage: 10\n *  }\n */\nexport interface Pairs extends ZeroExFeeConfigEntryBase {\n    kind: 'pairs';\n    pairs: {\n        tokenA: string;\n        tokenB: string;\n        label: string;\n    }[];\n}\n\n/**\n * 0x fee config entry for cartesian_product.\n *\n * For example, this means for any of the 4 combination between `setA` and `setB`, the pair takes 5% volume fee\n * {\n *      kind: 'cartesian_product',\n *      setA: [\n *          {\n *              token: '0x123455...',\n *              label: 'token5',\n *          },\n *          {\n *              token: '0x123457...',\n *              label: 'token6',\n *          }\n *      ],\n *      setB: [\n *          {\n *              token: '0x123458...',\n *              label: 'token7',\n *          },\n *          {\n *              token: '0x123459...',\n *              label: 'token8',\n *          }\n *      ],\n *      volumePercentage: 5\n * }\n */\nexport interface CartesianProduct extends ZeroExFeeConfigEntryBase {\n    kind: 'cartesian_product';\n    setA: {\n        token: string;\n        label: string;\n    }[];\n    setB: {\n        token: string;\n        label: string;\n    }[];\n}\n\n/**\n * 0x fee config entry for tokens.\n *\n * For example, this means if token9 or token10 is either sell / buy token, there is a 2% volume fee\n * {\n *      kind: 'tokens',\n *      tokens: [\n *          {\n *              token: '0x1234510...',\n *              label: 'token9',\n *          },\n *          {\n *              token: '0x12345711...',\n *              label: 'token10',\n *          }\n *      ]\n *      volumePercentage: 2\n * }\n */\nexport interface Tokens extends ZeroExFeeConfigEntryBase {\n    kind: 'tokens';\n    tokens: {\n        token: string;\n        label: string;\n    }[];\n}\n\nexport type ZeroExFeeConigurationEntry = Pairs | CartesianProduct | Tokens;\n\n// Raw 0x fee configuration read directly from config file\ninterface ZeroExFeeRawConfiguration {\n    name: string; // human readable integrator name\n    integratorId: string;\n    chainId: number;\n    feeOn: 'volume' | 'integrator_share' /* | 'price_improvement' */; // 'price_improvement' is for RFQ liquidity\n    zeroEx: {\n        // fee recipient and billing type for 0x fee\n        feeRecipient: string | null;\n        billingType: 'on-chain' | 'off-chain';\n    };\n    gas: {\n        // fee recipient and billing type for gas fee\n        feeRecipient: string | null;\n        billingType: 'on-chain' | 'off-chain';\n    };\n    fees: ZeroExFeeConigurationEntry[];\n}\n\ntype ZeroExFeeRawConfigurations = ZeroExFeeRawConfiguration[];\n\n// Processed raw 0x fee configuration\nexport interface ZeroExFeeConfiguration {\n    name: string;\n    feeOn: 'volume' | 'integrator_share' /* | 'price_improvement' */; // 'price_improvement' is for RFQ liquidity\n    zeroEx: {\n        feeRecipient: string | null;\n        billingType: 'on-chain' | 'off-chain';\n    };\n    gas: {\n        feeRecipient: string | null;\n        billingType: 'on-chain' | 'off-chain';\n    };\n    pairsFeeEntries: Map<string, BigNumber>; // tokenA-tokenB: <fee_parameter>; tokenA <= tokenB\n    cartesianProductFeeEntries: {\n        setA: Set<string>;\n        setB: Set<string>;\n        parameter: BigNumber;\n    }[];\n    tokensEntries: Map<string, BigNumber>; // tokenA-tokenB: <fee_parameter>; tokenA <= tokenB\n}\n\nexport const ZERO_EX_FEE_CONFIGURATION_MAP: Map<string, Map<number, ZeroExFeeConfiguration>> = (() => {\n    try {\n        const zeroExFeeRawConfigurations = resolveEnvVar<ZeroExFeeRawConfigurations>(\n            'ZERO_EX_FEE_CONFIGURATIONS',\n            EnvVarType.JsonStringList,\n            [],\n        );\n        schemaUtils.validateSchema(zeroExFeeRawConfigurations, schemas.zeroExFeeConfigurationsSchema);\n\n        return zeroExFeeRawConfigurations.reduce((acc, curr) => {\n            const { integratorId, chainId } = curr;\n            if (!acc.get(integratorId)) {\n                acc.set(integratorId, new Map<number, ZeroExFeeConfiguration>());\n            }\n\n            const pairsFeeEntries = new Map<string, BigNumber>();\n            const cartesianProductFeeEntries: {\n                setA: Set<string>;\n                setB: Set<string>;\n                parameter: BigNumber;\n            }[] = [];\n            const tokensEntries = new Map<string, BigNumber>();\n\n            curr.fees.forEach((feeConfig) => {\n                let feeParameter: BigNumber;\n                switch (curr.feeOn) {\n                    case 'volume':\n                        if (feeConfig.volumePercentage === undefined) {\n                            throw new Error(`volumePercentage not defined for ${curr.integratorId} for fee on volume`);\n                        }\n                        feeParameter = new BigNumber(feeConfig.volumePercentage);\n                        break;\n                    case 'integrator_share':\n                        if (feeConfig.integratorSharePercentage === undefined) {\n                            throw new Error(\n                                `integratorSharePercentage not defined for ${curr.integratorId} for fee on volume`,\n                            );\n                        }\n                        feeParameter = new BigNumber(feeConfig.integratorSharePercentage);\n                        break;\n                    default:\n                        ((_x: never) => {\n                            throw new Error('unreachable');\n                        })(curr.feeOn);\n                }\n\n                if (feeConfig.kind === 'pairs') {\n                    // parse config entries that are of kind `pairs`\n                    feeConfig.pairs.forEach(({ tokenA, tokenB }) => {\n                        pairsFeeEntries.set(toPairString(tokenA, tokenB), feeParameter);\n                    });\n                } else if (feeConfig.kind === 'cartesian_product') {\n                    // parse config entries that are of kind `cartesian_product`\n                    cartesianProductFeeEntries.push({\n                        setA: new Set(feeConfig.setA.map((tokenAndLabel) => tokenAndLabel.token.toLocaleLowerCase())),\n                        setB: new Set(feeConfig.setB.map((tokenAndLabel) => tokenAndLabel.token.toLocaleLowerCase())),\n                        parameter: feeParameter,\n                    });\n                } else if (feeConfig.kind === 'tokens') {\n                    // parse config entries that are of kind `tokens`\n                    feeConfig.tokens.forEach((tokenAndLabel) => {\n                        tokensEntries.set(tokenAndLabel.token.toLocaleLowerCase(), feeParameter);\n                    });\n                }\n            });\n\n            // Compiler can't track the state of TypeScript map. We need to perform a undefined check even if\n            // the value has been set for the integratorId previously. More discussion: https://stackoverflow.com/a/70726571\n            const feeConfigByChainId = acc.get(integratorId);\n            if (!feeConfigByChainId) {\n                // This should never happen\n                throw new Error(`${integratorId} is not set`);\n            }\n\n            feeConfigByChainId.set(chainId, {\n                name: curr.name,\n                feeOn: curr.feeOn,\n                zeroEx: {\n                    feeRecipient: curr.zeroEx.feeRecipient,\n                    billingType: curr.zeroEx.billingType,\n                },\n                gas: {\n                    feeRecipient: curr.gas.feeRecipient,\n                    billingType: curr.gas.billingType,\n                },\n                pairsFeeEntries,\n                cartesianProductFeeEntries,\n                tokensEntries,\n            });\n            return acc;\n        }, new Map</* integratorId */ string, Map</* chainId */ number, ZeroExFeeConfiguration>>());\n    } catch (e) {\n        throw new Error(`ZERO_EX_FEE_CONFIGURATIONS was defined but is not valid JSON per the schema: ${e}`);\n    }\n})();\n\n/**\n * Values read from configuration files which provide\n * per pair fee model constants.\n */\nexport interface FeeModelConfiguration {\n    marginRakeRatio: number; // Rake based on margin between RFQm and AMM prices. E.g. marginRakeRatio = 0.5 if we want to charge 50% of the margin.\n    tradeSizeBps: number; // Base points of fee based on trade size. 1 bps = 0.01%.\n}\n\n/**\n * This interface is used to represent an individual JSON object for a given chain and pair.\n * It is only used when we read the JSON object from a file, and should not be used elsewhere.\n */\ninterface FeeModelConfigurationWithKey extends FeeModelConfiguration {\n    chainId: number;\n    tokenA: string;\n    tokenB: string;\n}\n\nexport type FeeModelConfigurationMap = Map<number, Map<string, FeeModelConfiguration>>;\n\n/**\n * A nested map providing fee model constants for each token pair.\n * Use chainId as first key and pair key as the second key.\n */\nexport const FEE_MODEL_CONFIGURATION_MAP: FeeModelConfigurationMap = (() => {\n    try {\n        const feeModelConfigurations: FeeModelConfigurationWithKey[] = resolveEnvVar<FeeModelConfigurationWithKey[]>(\n            'FEE_MODEL_CONFIGURATIONS',\n            EnvVarType.JsonStringList,\n            [],\n        );\n        schemaUtils.validateSchema(feeModelConfigurations, schemas.feeModelConfigurationsSchema);\n\n        return feeModelConfigurations.reduce((acc, curr) => {\n            const { chainId, tokenA, tokenB, marginRakeRatio, tradeSizeBps } = curr;\n            if (!acc.has(chainId)) {\n                acc.set(chainId, new Map<string, FeeModelConfiguration>());\n            }\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            acc.get(chainId)!.set(toPairString(tokenA, tokenB), { marginRakeRatio, tradeSizeBps });\n            return acc;\n        }, new Map</* chainId */ number, Map</* pairKey */ string, FeeModelConfiguration>>());\n    } catch (e) {\n        throw new Error(`FEE_MODEL_CONFIGURATIONS was defined but is not valid JSON per the schema: ${e}`);\n    }\n})();\n\nexport const DEFAULT_FEE_MODEL_CONFIGURATION: FeeModelConfiguration = { marginRakeRatio: 0, tradeSizeBps: 0 };\n\n/**\n * A taker-integrator of the 0x API.\n */\nexport interface Integrator {\n    affiliateAddress?: string; // Used if present and no affiliate address is sent in the quote request\n    apiKeys: string[];\n    integratorId: string;\n    /* IDs for chains the integrator is allowed to access RFQ liquidity on */\n    allowedChainIds: number[];\n    whitelistIntegratorUrls?: string[];\n    whitelistMakerIds?: string[];\n    label: string;\n    plp: boolean;\n    rfqm: boolean;\n    rfqt: boolean;\n}\nexport type IntegratorsAcl = Integrator[];\n\n/**\n * Configuration which represents taker-integrators of the 0x API. The configuration contains the label, id,\n * api keys, and allowed liquidity sources for each integrator.\n */\nexport const INTEGRATORS_ACL: IntegratorsAcl = (() => {\n    let integrators: IntegratorsAcl;\n    try {\n        integrators = resolveEnvVar<IntegratorsAcl>('INTEGRATORS_ACL', EnvVarType.JsonStringList, []);\n        schemaUtils.validateSchema(integrators, schemas.integratorsAclSchema);\n    } catch (e) {\n        throw new Error(`INTEGRATORS_ACL was defined but is not valid JSON per the schema: ${e}`);\n    }\n    return integrators;\n})();\n\n/**\n * Extracts the integrator API keys from the `INTEGRATORS_ACL` environment variable for the provided group type.\n */\nexport const getApiKeyWhitelistFromIntegratorsAcl = (groupType: 'rfqt' | 'plp' | 'rfqm'): string[] => {\n    return INTEGRATORS_ACL.filter((i) => i[groupType])\n        .flatMap((i) => i.apiKeys)\n        .sort();\n};\n\n/**\n * Gets the integrator ID for the provided label.\n */\nexport const getIntegratorIdFromLabel = (label: string): string | undefined => {\n    for (const integrator of INTEGRATORS_ACL) {\n        if (integrator.label === label) {\n            return integrator.integratorId;\n        }\n    }\n};\n\nexport type RfqWorkFlowType = 'rfqt' | 'rfqm';\nexport type RfqOrderType = 'rfq' | 'otc';\n\nexport const RFQ_MAKER_REFRESH_INTERVAL_MS: number = ONE_MINUTE_MS * 1;\n\n/**\n * The JSON config for each Market Maker, providing information including URLs, type of order supported and authentication.\n */\nexport interface RfqMakerConfig {\n    makerId: string;\n    label: string;\n    rfqmOrderTypes: RfqOrderType[];\n    rfqtOrderTypes: RfqOrderType[];\n    apiKeyHashes: string[];\n}\n\n/**\n * A Map type which map the makerId to the config object.\n */\nexport type MakerIdSet = Set</* makerId */ string>;\n\n/**\n * Generate a set of MakerIds that support a given order type for a given workflow\n */\nexport const getMakerIdSetForOrderType = (orderType: RfqOrderType | 'any', workflow: RfqWorkFlowType): MakerIdSet => {\n    const typesField = workflow === 'rfqt' ? 'rfqtOrderTypes' : 'rfqmOrderTypes';\n    return RFQ_MAKER_CONFIGS.reduce((acc, curr) => {\n        if (orderType === 'any' || curr[typesField].includes(orderType)) {\n            acc.add(curr.makerId);\n        }\n        return acc;\n    }, new Set</* makerId */ string>());\n};\n\n/**\n * A list of type RfqMakerConfig, read from the RFQ_MAKER_CONFIGS env variable\n */\nexport const RFQ_MAKER_CONFIGS: RfqMakerConfig[] = (() => {\n    try {\n        const makerConfigs = resolveEnvVar<RfqMakerConfig[]>('RFQ_MAKER_CONFIGS', EnvVarType.JsonStringList, []);\n        schemaUtils.validateSchema(makerConfigs, schemas.rfqMakerConfigListSchema);\n        return makerConfigs;\n    } catch (e) {\n        throw new Error(`RFQ_MAKER_CONFIGS was defined but is not valid JSON per the schema: ${e}`);\n    }\n})();\n\n// Log level for pino.js\nexport const LOG_LEVEL: string = _.isEmpty(process.env.LOG_LEVEL)\n    ? 'info'\n    : assertEnvVarType('LOG_LEVEL', process.env.LOG_LEVEL, EnvVarType.NonEmptyString);\n\n// Network port to listen on\nexport const HTTP_PORT = _.isEmpty(process.env.HTTP_PORT)\n    ? 3000\n    : assertEnvVarType('HTTP_PORT', process.env.HTTP_PORT, EnvVarType.Port);\n\n// Network port for the healthcheck service at /healthz, if not provided, it uses the HTTP_PORT value.\nexport const HEALTHCHECK_HTTP_PORT = _.isEmpty(process.env.HEALTHCHECK_HTTP_PORT)\n    ? HTTP_PORT\n    : assertEnvVarType('HEALTHCHECK_HTTP_PORT', process.env.HEALTHCHECK_HTTP_PORT, EnvVarType.Port);\n\n// Number of milliseconds of inactivity the servers waits for additional\n// incoming data aftere it finished writing last response before a socket will\n// be destroyed.\n// Ref: https://nodejs.org/api/http.html#http_server_keepalivetimeout\nexport const HTTP_KEEP_ALIVE_TIMEOUT = _.isEmpty(process.env.HTTP_KEEP_ALIVE_TIMEOUT)\n    ? 76 * 1000\n    : assertEnvVarType('HTTP_KEEP_ALIVE_TIMEOUT', process.env.HTTP_KEEP_ALIVE_TIMEOUT, EnvVarType.KeepAliveTimeout);\n\n// Limit the amount of time the parser will wait to receive the complete HTTP headers.\n// NOTE: This value HAS to be higher than HTTP_KEEP_ALIVE_TIMEOUT.\n// Ref: https://nodejs.org/api/http.html#http_server_headerstimeout\nexport const HTTP_HEADERS_TIMEOUT = _.isEmpty(process.env.HTTP_HEADERS_TIMEOUT)\n    ? 77 * 1000\n    : assertEnvVarType('HTTP_HEADERS_TIMEOUT', process.env.HTTP_HEADERS_TIMEOUT, EnvVarType.KeepAliveTimeout);\n\n// Default chain id to use when not specified\nexport const CHAIN_ID: ChainId = _.isEmpty(process.env.CHAIN_ID)\n    ? ChainId.Kovan\n    : assertEnvVarType('CHAIN_ID', process.env.CHAIN_ID, EnvVarType.ChainId);\n\nexport const KAFKA_BROKERS = _.isEmpty(process.env.KAFKA_BROKERS)\n    ? undefined\n    : assertEnvVarType('KAFKA_BROKERS', process.env.KAFKA_BROKERS, EnvVarType.StringList);\n\n// The fee recipient for orders\nexport const FEE_RECIPIENT_ADDRESS = _.isEmpty(process.env.FEE_RECIPIENT_ADDRESS)\n    ? NULL_ADDRESS\n    : assertEnvVarType('FEE_RECIPIENT_ADDRESS', process.env.FEE_RECIPIENT_ADDRESS, EnvVarType.ETHAddressHex);\n\nexport const POSTGRES_URI = _.isEmpty(process.env.POSTGRES_URI)\n    ? DEFAULT_LOCAL_POSTGRES_URI\n    : assertEnvVarType('POSTGRES_URI', process.env.POSTGRES_URI, EnvVarType.Url);\n\nexport const POSTGRES_READ_REPLICA_URIS: string[] | undefined = _.isEmpty(process.env.POSTGRES_READ_REPLICA_URIS)\n    ? undefined\n    : assertEnvVarType('POSTGRES_READ_REPLICA_URIS', process.env.POSTGRES_READ_REPLICA_URIS, EnvVarType.UrlList);\n\n// Environment name Sentry used to categorize issues and traces.\nexport const SENTRY_ENVIRONMENT = _.isEmpty(process.env.SENTRY_ENVIRONMENT)\n    ? DEFAULT_SENTRY_ENVIRONMENT\n    : assertEnvVarType('SENTRY_ENVIRONMENT', process.env.SENTRY_ENVIRONMENT, EnvVarType.NonEmptyString);\n\n// An Url with client key to access Sentry from client SDK.\nexport const SENTRY_DSN = _.isEmpty(process.env.SENTRY_DSN)\n    ? undefined\n    : assertEnvVarType('SENTRY_DSN', process.env.SENTRY_DSN, EnvVarType.Url);\n\n// API Key for Defined.fi's token price API\nexport const DEFINED_FI_API_KEY: string = _.isEmpty(process.env.DEFINED_FI_API_KEY)\n    ? ''\n    : assertEnvVarType('DEFINED_FI_API_KEY', process.env.DEFINED_FI_API_KEY, EnvVarType.NonEmptyString);\n\n// Endpoint for Defined.fi's token price API, default to https://api.defined.fi\nexport const DEFINED_FI_ENDPOINT: string = _.isEmpty(process.env.DEFINED_FI_ENDPOINT)\n    ? 'https://api.defined.fi'\n    : assertEnvVarType('DEFINED_FI_ENDPOINT', process.env.DEFINED_FI_ENDPOINT, EnvVarType.NonEmptyString);\n\n// API Key for 0x API (for ZeroExApiClient)\nexport const ZERO_EX_API_KEY: string = _.isEmpty(process.env.ZERO_EX_API_KEY)\n    ? ''\n    : assertEnvVarType('ZERO_EX_API_KEY', process.env.ZERO_EX_API_KEY, EnvVarType.NonEmptyString);\n\n// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n// eslint-disable-next-line @typescript-eslint/no-inferrable-types\nexport const TOKEN_PRICE_ORACLE_TIMEOUT: number = 1000;\n\n// Sampling rate of traces reported to Sentry. Should be a number between 0.0 and 1.0 (inclusive).\nexport const SENTRY_TRACES_SAMPLE_RATE = _.isEmpty(process.env.SENTRY_TRACES_SAMPLE_RATE)\n    ? 0\n    : assertEnvVarType('SENTRY_TRACES_SAMPLE_RATE', process.env.SENTRY_TRACES_SAMPLE_RATE, EnvVarType.Rate);\n\nexport const REDIS_URI = _.isEmpty(process.env.REDIS_URI) ? DEFAULT_LOCAL_REDIS_URI : process.env.REDIS_URI;\n\nexport const REDIS_BACKGROUND_JOB_URI = _.isEmpty(process.env.REDIS_BACKGROUND_JOB_URI)\n    ? DEFAULT_LOCAL_REDIS_URI\n    : process.env.REDIS_BACKGROUND_JOB_URI;\n\nexport const BACKGROUND_JOB_TYPES = _.isEmpty(process.env.BACKGROUND_JOB_TYPES)\n    ? DEFAULT_BACKGROUND_JOB_TYPES\n    : process.env.BACKGROUND_JOB_TYPES;\n\n// Should the logger include time field in the output logs, defaults to true.\nexport const LOGGER_INCLUDE_TIMESTAMP = _.isEmpty(process.env.LOGGER_INCLUDE_TIMESTAMP)\n    ? DEFAULT_LOGGER_INCLUDE_TIMESTAMP\n    : assertEnvVarType('LOGGER_INCLUDE_TIMESTAMP', process.env.LOGGER_INCLUDE_TIMESTAMP, EnvVarType.Boolean);\n\nexport const ALT_RFQ_MM_ENDPOINT: string | undefined = _.isEmpty(process.env.ALT_RFQ_MM_ENDPOINT)\n    ? undefined\n    : assertEnvVarType('ALT_RFQ_MM_ENDPOINT', process.env.ALT_RFQ_MM_ENDPOINT, EnvVarType.Url);\nexport const ALT_RFQ_MM_API_KEY: string | undefined = _.isEmpty(process.env.ALT_RFQ_MM_API_KEY)\n    ? undefined\n    : assertEnvVarType('ALT_RFQ_MM_API_KEY', process.env.ALT_RFQ_MM_API_KEY, EnvVarType.NonEmptyString);\nexport const ALT_RFQ_MM_PROFILE: string | undefined = _.isEmpty(process.env.ALT_RFQ_MM_PROFILE)\n    ? undefined\n    : assertEnvVarType('ALT_RFQ_MM_PROFILE', process.env.ALT_RFQ_MM_PROFILE, EnvVarType.NonEmptyString);\n\nexport const RFQM_API_KEY_WHITELIST: Set<string> = new Set(getApiKeyWhitelistFromIntegratorsAcl('rfqm'));\n\nexport const ADMIN_API_KEY: string | undefined = _.isEmpty(process.env.ADMIN_API_KEY)\n    ? undefined\n    : assertEnvVarType('ADMIN_API_KEY', process.env.ADMIN_API_KEY, EnvVarType.NonEmptyString);\n\nexport const REASON_ON_STATUS_ERROR_RESPONSE_ENABLED: boolean = _.isEmpty(\n    process.env.REASON_ON_STATUS_ERROR_RESPONSE_ENABLED,\n)\n    ? false\n    : assertEnvVarType(\n          'REASON_ON_STATUS_ERROR_RESPONSE_ENABLED',\n          process.env.REASON_ON_STATUS_ERROR_RESPONSE_ENABLED,\n          EnvVarType.Boolean,\n      );\n\nexport const TAKER_SPECIFIED_SIDE_ENABLED: boolean = _.isEmpty(process.env.TAKER_SPECIFIED_SIDE_ENABLED)\n    ? false\n    : assertEnvVarType('TAKER_SPECIFIED_SIDE_ENABLED', process.env.TAKER_SPECIFIED_SIDE_ENABLED, EnvVarType.Boolean);\n\nexport const RFQM_MAKER_ID_SET: MakerIdSet = getMakerIdSetForOrderType('any', 'rfqm');\nexport const RFQT_MAKER_ID_SET_FOR_RFQ_ORDER: MakerIdSet = getMakerIdSetForOrderType('rfq', 'rfqt');\nexport const RFQT_MAKER_ID_SET_FOR_OTC_ORDER: MakerIdSet = getMakerIdSetForOrderType('otc', 'rfqt');\nexport const RFQM_MAKER_ID_SET_FOR_OTC_ORDER: MakerIdSet = getMakerIdSetForOrderType('otc', 'rfqm');\n\n/**\n * A map from RFQ maker's api key hashes to maker ids.\n * Invalid hashes, which appear more than once in the config file and might resolve to different makers, are removed from the result.\n */\nexport const RFQ_API_KEY_HASH_TO_MAKER_ID: Map<string, string> = (() => {\n    const hashToIdCount = RFQ_MAKER_CONFIGS.reduce((result, rfqMakerConfig) => {\n        rfqMakerConfig.apiKeyHashes.forEach((hash) => result.set(hash, (result.get(hash) || 0) + 1));\n        return result;\n    }, new Map<string, number>());\n\n    return RFQ_MAKER_CONFIGS.reduce((result, mm) => {\n        mm.apiKeyHashes.forEach((hash) => {\n            // Ignore invalid hashes with more than one appearances\n            if (hashToIdCount.get(hash) === 1) {\n                result.set(hash, mm.makerId);\n            }\n        });\n        return result;\n    }, new Map<string, string>());\n})();\n\nexport const META_TX_WORKER_MNEMONIC: string | undefined = _.isEmpty(process.env.META_TX_WORKER_MNEMONIC)\n    ? undefined\n    : assertEnvVarType('META_TX_WORKER_MNEMONIC', process.env.META_TX_WORKER_MNEMONIC, EnvVarType.NonEmptyString);\n\nexport const RFQM_WORKER_GROUP_INDEX: number | undefined = _.isEmpty(process.env.RFQM_WORKER_GROUP_INDEX)\n    ? undefined\n    : assertEnvVarType('RFQM_WORKER_GROUP_INDEX', process.env.RFQM_WORKER_GROUP_INDEX, EnvVarType.Integer);\n\nexport const RFQM_WORKER_GROUP_SIZE: number | undefined = _.isEmpty(process.env.RFQM_WORKER_GROUP_SIZE)\n    ? undefined\n    : assertEnvVarType('RFQM_WORKER_GROUP_SIZE', process.env.RFQM_WORKER_GROUP_SIZE, EnvVarType.Integer);\n\n// If set to TRUE, system health will change to MAINTENANCE and integrators will be told to not\n// send RFQM orders.\n// tslint:disable-next-line boolean-naming\nexport const RFQM_MAINTENANCE_MODE: boolean = _.isEmpty(process.env.RFQM_MAINTENANCE_MODE)\n    ? false\n    : assertEnvVarType('RFQM_MAINTENANCE_MODE', process.env.RFQM_MAINTENANCE_MODE, EnvVarType.Boolean);\n\nexport const RFQ_PRICE_ENDPOINT_TIMEOUT_MS: number = _.isEmpty(process.env.RFQ_PRICE_ENDPOINT_TIMEOUT_MS)\n    ? 1000\n    : assertEnvVarType('RFQ_PRICE_ENDPOINT_TIMEOUT_MS', process.env.RFQ_PRICE_ENDPOINT_TIMEOUT_MS, EnvVarType.Integer);\n\nexport const RFQ_SIGN_ENDPOINT_TIMEOUT_MS = _.isEmpty(process.env.RFQ_SIGN_ENDPOINT_TIMEOUT_MS)\n    ? 2000\n    : assertEnvVarType('RFQ_SIGN_ENDPOINT_TIMEOUT_MS', process.env.RFQ_SIGN_ENDPOINT_TIMEOUT_MS, EnvVarType.Integer);\n\n// The expected time for a meta-txn to be included in a block.\nexport const META_TXN_RELAY_EXPECTED_MINED_SEC: number = _.isEmpty(process.env.META_TXN_RELAY_EXPECTED_MINED_SEC)\n    ? DEFAULT_EXPECTED_MINED_SEC\n    : assertEnvVarType(\n          'META_TXN_RELAY_EXPECTED_MINED_SEC',\n          process.env.META_TXN_RELAY_EXPECTED_MINED_SEC,\n          EnvVarType.Integer,\n      );\n\n// Whether or not prometheus metrics should be enabled.\n// tslint:disable-next-line:boolean-naming\nexport const ENABLE_PROMETHEUS_METRICS: boolean = _.isEmpty(process.env.ENABLE_PROMETHEUS_METRICS)\n    ? false\n    : assertEnvVarType('ENABLE_PROMETHEUS_METRICS', process.env.ENABLE_PROMETHEUS_METRICS, EnvVarType.Boolean);\n\nexport const PROMETHEUS_PORT: number = _.isEmpty(process.env.PROMETHEUS_PORT)\n    ? 8080\n    : assertEnvVarType('PROMETHEUS_PORT', process.env.PROMETHEUS_PORT, EnvVarType.Port);\n\n// Eth Gas Station URL\nexport const ETH_GAS_STATION_API_URL: string = _.isEmpty(process.env.ETH_GAS_STATION_API_URL)\n    ? DEFAULT_ETH_GAS_STATION_API_URL\n    : assertEnvVarType('ETH_GAS_STATION_API_URL', process.env.ETH_GAS_STATION_API_URL, EnvVarType.Url);\n\nexport const RFQ_PROXY_ADDRESS: string | undefined = _.isEmpty(process.env.RFQ_PROXY_ADDRESS)\n    ? undefined\n    : assertEnvVarType('RFQ_PROXY_ADDRESS', process.env.RFQ_PROXY_ADDRESS, EnvVarType.NonEmptyString);\n\nexport const RFQ_PROXY_PORT: number | undefined = _.isEmpty(process.env.RFQ_PROXY_PORT)\n    ? undefined\n    : assertEnvVarType('RFQ_PROXY_PORT', process.env.RFQ_PROXY_PORT, EnvVarType.Port);\n\n// tslint:disable-next-line boolean-naming\nexport const ENABLE_LLR_COOLDOWN: boolean = _.isEmpty(process.env.ENABLE_LLR_COOLDOWN)\n    ? false\n    : assertEnvVarType('ENABLE_LLR_COOLDOWN', process.env.ENABLE_LLR_COOLDOWN, EnvVarType.Boolean);\n\nexport const LLR_COOLDOWN_DURATION_SECONDS: number = _.isEmpty(process.env.LLR_COOLDOWN_DURATION_SECONDS)\n    ? 60\n    : assertEnvVarType('LLR_COOLDOWN_DURATION_SECONDS', process.env.LLR_COOLDOWN_DURATION_SECONDS, EnvVarType.Integer);\n\nexport const defaultHttpServiceConfig: HttpServiceConfig = {\n    httpPort: HTTP_PORT,\n    healthcheckHttpPort: HEALTHCHECK_HTTP_PORT,\n    healthcheckPath: HEALTHCHECK_PATH,\n    httpKeepAliveTimeout: HTTP_KEEP_ALIVE_TIMEOUT,\n    httpHeadersTimeout: HTTP_HEADERS_TIMEOUT,\n    enablePrometheusMetrics: ENABLE_PROMETHEUS_METRICS,\n    prometheusPort: PROMETHEUS_PORT,\n    prometheusPath: METRICS_PATH,\n};\n\nexport const getIntegratorByIdOrThrow = (\n    (integratorsMap: Map<string, Integrator>) =>\n    (integratorId: string): Integrator => {\n        const integrator = integratorsMap.get(integratorId);\n        if (!integrator) {\n            throw new Error(`Integrator ${integratorId} does not exist.`);\n        }\n        return integrator;\n    }\n)(transformIntegratorsAcl(INTEGRATORS_ACL, 'integratorId'));\n\n/**\n * Gets the integrator ID for a given API key. If the API key is not in the configuration, returns `undefined`.\n */\nexport const getIntegratorIdForApiKey = (\n    (integratorsMap: Map<string, Integrator>) =>\n    (apiKey: string): string | undefined => {\n        const integrator = integratorsMap.get(apiKey);\n        return integrator?.integratorId;\n    }\n)(transformIntegratorsAcl(INTEGRATORS_ACL, 'apiKeys'));\n\n/**\n * Utility function to transform INTEGRATORS_ACL into a map of apiKey => integrator. The result can\n * be used to optimize the lookup of the integrator when a request comes in with an api key. Lookup complexity\n * becomes O(1) with the map instead of O(# integrators * # api keys) with the array.\n *\n * @param integrators the integrators map from the environment variable\n * @param keyBy either apiKeys (creates map keyed by every API key) or 'integratorId' (integratorId => Integrator)\n */\nfunction transformIntegratorsAcl(\n    integrators: IntegratorsAcl,\n    keyBy: 'apiKeys' | 'integratorId',\n): Map<string, Integrator> {\n    const result = new Map<string, Integrator>();\n    integrators.forEach((integrator) => {\n        let mapKeys: string[];\n        switch (keyBy) {\n            case 'apiKeys':\n                mapKeys = integrator.apiKeys;\n                break;\n            case 'integratorId':\n                mapKeys = [integrator.integratorId];\n                break;\n            default:\n                throw new Error(`Parameter \"${keyBy}\" is misconfigured`);\n        }\n        mapKeys.forEach((apiKey) => {\n            result.set(apiKey, integrator);\n        });\n    });\n    return result;\n}\n\n/**\n * RPC\n */\nexport const META_TRANSACTION_SERVICE_RPC_URL: string = _.isEmpty(process.env.META_TRANSACTION_SERVICE_RPC_URL)\n    ? ''\n    : assertEnvVarType(\n          'META_TRANSACTION_SERVICE_RPC_URL',\n          process.env.META_TRANSACTION_SERVICE_RPC_URL,\n          EnvVarType.Url,\n      );\n\n/**\n * Resolves a config of type T for an Enviornment Variable. Checks:\n *  - If the env variable is undefined, use the hardcoded fallback\n *  - If the env variable points to a filepath, resolve it\n *  - Otherwise, just use the env variable\n *\n * @param envVar - the name of the Environment Variable\n * @param envVarType - the type\n * @param fallback  - A hardcoded fallback value\n * @returns The config\n */\nfunction resolveEnvVar<T>(envVar: string, envVarType: EnvVarType, fallback: T): T {\n    const rawEnvVar = process.env[envVar];\n    if (rawEnvVar === undefined || _.isEmpty(rawEnvVar)) {\n        return fallback;\n    }\n\n    // If the enviornment variable points to a file\n    if (fs.existsSync(rawEnvVar)) {\n        return JSON.parse(fs.readFileSync(rawEnvVar, 'utf8'));\n    }\n\n    return assertEnvVarType(envVar, process.env[envVar], envVarType);\n}\n\n// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction assertEnvVarType(name: string, value: any, expectedType: EnvVarType): any {\n    let returnValue;\n    switch (expectedType) {\n        case EnvVarType.Port:\n            returnValue = parseInt(value, 10);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line no-case-declarations\n            const isWithinRange = returnValue >= 0 && returnValue <= 65535;\n            if (isNaN(returnValue) || !isWithinRange) {\n                throw new Error(`${name} must be between 0 to 65535, found ${value}.`);\n            }\n            return returnValue;\n        case EnvVarType.ChainId:\n        case EnvVarType.KeepAliveTimeout:\n        case EnvVarType.Integer:\n            returnValue = parseInt(value, 10);\n            if (isNaN(returnValue)) {\n                throw new Error(`${name} must be a valid integer, found ${value}.`);\n            }\n            return returnValue;\n        case EnvVarType.ETHAddressHex:\n            assert.isETHAddressHex(name, value);\n            return value;\n        case EnvVarType.Url:\n            assert.isUri(name, value);\n            return value;\n        case EnvVarType.UrlList:\n            assert.isString(name, value);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line no-case-declarations\n            const urlList = (value as string).split(',');\n            urlList.forEach((url, i) => assert.isUri(`${name}[${i}]`, url));\n            return urlList;\n        case EnvVarType.Boolean:\n            return value === 'true';\n        case EnvVarType.UnitAmount:\n            returnValue = new BigNumber(parseFloat(value));\n            if (returnValue.isNaN() || returnValue.isNegative()) {\n                throw new Error(`${name} must be valid number greater than 0.`);\n            }\n            return returnValue;\n        case EnvVarType.Rate:\n            returnValue = parseFloat(value);\n            if (returnValue < 0 || returnValue > 1) {\n                throw new Error(`${name} must be valid number between 0.0 and 1.0.`);\n            }\n            return returnValue;\n        case EnvVarType.AddressList:\n            assert.isString(name, value);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line no-case-declarations\n            const addressList = (value as string).split(',').map((a) => a.toLowerCase());\n            addressList.forEach((a, i) => assert.isETHAddressHex(`${name}[${i}]`, a));\n            return addressList;\n        case EnvVarType.StringList:\n            assert.isString(name, value);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line no-case-declarations\n            const stringList = (value as string).split(',');\n            return stringList;\n        case EnvVarType.WhitelistAllTokens:\n            return '*';\n        case EnvVarType.NonEmptyString:\n            assert.isString(name, value);\n            if (value === '') {\n                throw new Error(`${name} must be supplied`);\n            }\n            return value;\n        case EnvVarType.APIKeys:\n            assert.isString(name, value);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line no-case-declarations\n            const apiKeys = (value as string).split(',');\n            apiKeys.forEach((apiKey) => {\n                const isValidUUID = validateUUID(apiKey);\n                if (!isValidUUID) {\n                    throw new Error(`API Key ${apiKey} isn't UUID compliant`);\n                }\n            });\n            return apiKeys;\n        case EnvVarType.JsonStringList:\n            assert.isString(name, value);\n            return JSON.parse(value);\n\n        default:\n            throw new Error(`Unrecognized EnvVarType: ${expectedType} encountered for variable ${name}.`);\n    }\n}\n"],"version":3}