{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/__tests__/GaslessSwapHandlers.test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/__tests__/GaslessSwapHandlers.test.ts"],"sourcesContent":["// tslint:disable: max-file-line-count\r\nimport { ValidationErrorCodes } from '@0x/api-utils';\r\nimport { ethSignHashWithKey, MetaTransaction, OtcOrder } from '@0x/protocol-utils';\r\nimport { BigNumber } from '@0x/utils';\r\nimport { AxiosInstance } from 'axios';\r\nimport * as express from 'express';\r\nimport * as HttpStatus from 'http-status-codes';\r\nimport Redis from 'ioredis';\r\nimport { mapValues } from 'lodash';\r\nimport { Producer } from 'sqs-producer';\r\nimport * as supertest from 'supertest';\r\n\r\nimport { Integrator } from '../../config';\r\nimport { GASLESS_V1_PATH, ZERO_G_ALIAS_PATH, ZERO_G_PATH } from '../../core/constants';\r\nimport { GaslessTypes } from '../../core/types';\r\nimport { errorHandler } from '../../middleware/error_handling';\r\nimport { createGaslessV1Router, createZeroGRouter } from '../../routers/GaslessSwapRouter';\r\nimport { GaslessSwapService } from '../../services/GaslessSwapService';\r\nimport { RfqmService } from '../../services/rfqm_service';\r\nimport {\r\n    FetchIndicativeQuoteResponse,\r\n    MetaTransactionQuoteResponse,\r\n    OtcOrderRfqmQuoteResponse,\r\n    SubmitMetaTransactionSignedQuoteResponse,\r\n} from '../../services/types';\r\nimport { ConfigManager } from '../../utils/config_manager';\r\nimport { RfqmDbUtils } from '../../utils/rfqm_db_utils';\r\nimport { RfqBlockchainUtils } from '../../utils/rfq_blockchain_utils';\r\n\r\njest.mock('../../services/GaslessSwapService', () => {\r\n    return {\r\n        GaslessSwapService: jest.fn().mockImplementation(() => {\r\n            return {\r\n                fetchPriceAsync: jest.fn(),\r\n                fetchQuoteAsync: jest.fn(),\r\n                processSubmitAsync: jest.fn(),\r\n                // tslint:disable-next-line: custom-no-magic-numbers\r\n                getTokenDecimalsAsync: jest.fn().mockResolvedValue(18),\r\n            };\r\n        }),\r\n    };\r\n});\r\n\r\njest.mock('../../utils/config_manager', () => {\r\n    return {\r\n        ConfigManager: jest.fn().mockImplementation(() => {\r\n            return {\r\n                getRfqmApiKeyWhitelist: jest.fn().mockReturnValue(new Set(['integrator-api-key'])),\r\n                getIntegratorIdForApiKey: jest.fn().mockReturnValue('integrator-id'),\r\n                getIntegratorByIdOrThrow: jest.fn().mockImplementation((id) => {\r\n                    if (id !== 'integrator-id') {\r\n                        throw new Error();\r\n                    }\r\n                    const integrator: Integrator = {\r\n                        apiKeys: ['integrator-api-key'],\r\n                        allowedChainIds: [420, 1337], // tslint:disable-line: custom-no-magic-numbers\r\n                        integratorId: 'integrator-id',\r\n                        label: 'test integrator',\r\n                        plp: false,\r\n                        rfqt: false,\r\n                        rfqm: true,\r\n                    };\r\n                    return integrator;\r\n                }),\r\n            };\r\n        }),\r\n    };\r\n});\r\n\r\n// tslint:disable: no-object-literal-type-assertion\r\nconst mockGaslessSwapService = jest.mocked(\r\n    new GaslessSwapService(\r\n        0,\r\n        {} as RfqmService,\r\n        new URL('http://meta.transaction.service'),\r\n        {} as AxiosInstance,\r\n        {} as Redis,\r\n        {} as RfqmDbUtils,\r\n        {} as RfqBlockchainUtils,\r\n        {} as Producer,\r\n    ),\r\n);\r\nconst mockConfigManager = jest.mocked(new ConfigManager());\r\n// tslint:enable: no-object-literal-type-assertion\r\n\r\nconst testChainId = 1337;\r\n\r\n/**\r\n * Verifies the proper response to a request using a mocked `GaslessSwapService`.\r\n *\r\n * Each case sets up its own little Express app to avoid coupiling this\r\n * test to the upstream router.\r\n */\r\ndescribe('GaslessSwapHandlers', () => {\r\n    const takerAddress = '0x4c42a706410f1190f97d26fe3c999c90070aa40f';\r\n    const takerPrivateKey = '0xd2c2349e10170e4219d9febd1c663ea5c7334f79c38d25f4f52c85af796c7c05';\r\n    const feeRecipient = '0x5fb321349ace5303c82f0d1d491041e042f2ad22';\r\n    const app = express()\r\n        .use(express.json())\r\n        .use(ZERO_G_PATH, createZeroGRouter(new Map([[testChainId, mockGaslessSwapService]]), mockConfigManager))\r\n        .use(ZERO_G_ALIAS_PATH, createZeroGRouter(new Map([[testChainId, mockGaslessSwapService]]), mockConfigManager))\r\n        .use(\r\n            GASLESS_V1_PATH,\r\n            createGaslessV1Router(new Map([[testChainId, mockGaslessSwapService]]), mockConfigManager),\r\n        )\r\n        .use(errorHandler);\r\n\r\n    afterEach(() => {\r\n        jest.clearAllMocks();\r\n    });\r\n\r\n    describe('parameter verification', () => {\r\n        it('throws if a required parameter is missing', async () => {\r\n            const response = await supertest(app)\r\n                .get(`${ZERO_G_ALIAS_PATH}/price`)\r\n                .query({ makerToken: '0xmakertoken' })\r\n                .set('Accept', 'application/json');\r\n\r\n            expect(response.body.validationErrors[0].code).toEqual(ValidationErrorCodes.RequiredField);\r\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n        });\r\n\r\n        it('throws if the chain ID is invalid', async () => {\r\n            const response = await supertest(app)\r\n                .get(`${ZERO_G_ALIAS_PATH}/price`)\r\n                .set('Content-type', 'application/json')\r\n                .set('0x-api-key', 'integrator-api-key')\r\n                .set('0x-chain-id', '420') // tslint:disable-line: custom-no-magic-numbers\r\n                .query({\r\n                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                    buyAmount: 1000,\r\n                    takerAddress,\r\n                    intentOnFilling: 'false',\r\n                    skipValidation: 'true',\r\n                });\r\n\r\n            expect(response.body.validationErrors[0].code).toEqual(ValidationErrorCodes.FieldInvalid);\r\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n        });\r\n\r\n        describe('zero-g', () => {\r\n            it('throws if the `slippagePercentage` is out of range for /price', async () => {\r\n                const response = await supertest(app)\r\n                    .get(`${ZERO_G_ALIAS_PATH}/price`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        slippagePercentage: 2.1,\r\n                    });\r\n\r\n                expect(response.body.validationErrors[0].code).toEqual(ValidationErrorCodes.ValueOutOfRange);\r\n                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n            });\r\n\r\n            it('throws if the `slippagePercentage` is out of range for /quote', async () => {\r\n                const response = await supertest(app)\r\n                    .get(`${ZERO_G_ALIAS_PATH}/quote`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        slippagePercentage: 0.00001,\r\n                    });\r\n\r\n                expect(response.body.validationErrors[0].code).toEqual(ValidationErrorCodes.ValueOutOfRange);\r\n                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n            });\r\n\r\n            it('throws if the `slippagePercentage` is invalid for /quote', async () => {\r\n                const response = await supertest(app)\r\n                    .get(`${ZERO_G_ALIAS_PATH}/quote`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        slippagePercentage: 'invalid',\r\n                    });\r\n\r\n                expect(response.body.validationErrors[0].code).toEqual(ValidationErrorCodes.IncorrectFormat);\r\n                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n            });\r\n        });\r\n\r\n        describe('gasless v1', () => {\r\n            it('throws if the `slippagePercentage` is out of range for /price', async () => {\r\n                const response = await supertest(app)\r\n                    .get(`${GASLESS_V1_PATH}/price`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        slippagePercentage: 101,\r\n                    });\r\n\r\n                expect(response.body.validationErrors[0].code).toEqual(ValidationErrorCodes.ValueOutOfRange);\r\n                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n            });\r\n\r\n            it('throws if the `slippagePercentage` is out of range for /quote', async () => {\r\n                const response = await supertest(app)\r\n                    .get(`${GASLESS_V1_PATH}/quote`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        slippagePercentage: 0.001,\r\n                    });\r\n\r\n                expect(response.body.validationErrors[0].code).toEqual(ValidationErrorCodes.ValueOutOfRange);\r\n                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n            });\r\n\r\n            it('throws if the `slippagePercentage` is invalid for /quote', async () => {\r\n                const response = await supertest(app)\r\n                    .get(`${GASLESS_V1_PATH}/quote`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        slippagePercentage: 'invalid',\r\n                    });\r\n\r\n                expect(response.body.validationErrors[0].code).toEqual(ValidationErrorCodes.IncorrectFormat);\r\n                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n            });\r\n\r\n            it('throws if the `feeType` is invalid for /quote', async () => {\r\n                const response = await supertest(app)\r\n                    .get(`${GASLESS_V1_PATH}/quote`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        slippagePercentage: 10,\r\n                        feeType: 'invalid',\r\n                        feeSellTokenPercentage: 10,\r\n                        feeRecipient,\r\n                    });\r\n\r\n                expect(response.body.validationErrors[0].code).toEqual(ValidationErrorCodes.ValueOutOfRange);\r\n                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n            });\r\n\r\n            it('throws if the `feeSellTokenPercentage` is undefined when `feeType` is provided for /quote', async () => {\r\n                const response = await supertest(app)\r\n                    .get(`${GASLESS_V1_PATH}/quote`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        slippagePercentage: 10,\r\n                        feeType: 'volume',\r\n                        feeRecipient,\r\n                    });\r\n\r\n                expect(response.body.validationErrors[0].code).toEqual(ValidationErrorCodes.RequiredField);\r\n                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n            });\r\n\r\n            it('throws if the `feeSellTokenPercentage` is out of range for /quote', async () => {\r\n                const response = await supertest(app)\r\n                    .get(`${GASLESS_V1_PATH}/quote`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        slippagePercentage: 10,\r\n                        feeType: 'volume',\r\n                        feeSellTokenPercentage: 101,\r\n                        feeRecipient,\r\n                    });\r\n\r\n                expect(response.body.validationErrors[0].code).toEqual(ValidationErrorCodes.ValueOutOfRange);\r\n                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n            });\r\n\r\n            it('throws if the `feeSellTokenPercentage` is out of range for /price', async () => {\r\n                const response = await supertest(app)\r\n                    .get(`${GASLESS_V1_PATH}/price`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        slippagePercentage: 10,\r\n                        feeType: 'volume',\r\n                        feeSellTokenPercentage: 101,\r\n                        feeRecipient,\r\n                    });\r\n\r\n                expect(response.body.validationErrors[0].code).toEqual(ValidationErrorCodes.ValueOutOfRange);\r\n                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n            });\r\n\r\n            it('throws if the `feeRecipient` is undefined when `feeType` is provided for /quote', async () => {\r\n                const response = await supertest(app)\r\n                    .get(`${GASLESS_V1_PATH}/quote`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        slippagePercentage: 10,\r\n                        feeType: 'volume',\r\n                        feeSellTokenPercentage: 5,\r\n                    });\r\n\r\n                expect(response.body.validationErrors[0].code).toEqual(ValidationErrorCodes.RequiredField);\r\n                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('getPriceAsync', () => {\r\n        describe('zero-g', () => {\r\n            it('responds with an error if the underlying service call fails', async () => {\r\n                mockGaslessSwapService.fetchPriceAsync.mockRejectedValueOnce(new Error('The service blew up'));\r\n\r\n                const response = await supertest(app)\r\n                    .get(`${ZERO_G_ALIAS_PATH}/price`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337')\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        intentOnFilling: 'false',\r\n                        skipValidation: 'true',\r\n                    });\r\n\r\n                expect(response.statusCode).toEqual(HttpStatus.INTERNAL_SERVER_ERROR);\r\n            });\r\n\r\n            it('passes calls on to Gasless Swap Service', async () => {\r\n                mockGaslessSwapService.fetchPriceAsync.mockResolvedValue(null);\r\n\r\n                await supertest(app)\r\n                    .get(`${ZERO_G_ALIAS_PATH}/price`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337')\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        intentOnFilling: 'false',\r\n                        skipValidation: 'true',\r\n                    });\r\n\r\n                expect(mockGaslessSwapService.fetchPriceAsync.mock.calls[0]).toMatchInlineSnapshot(`\r\n                    Array [\r\n                      Object {\r\n                        \"affiliateAddress\": undefined,\r\n                        \"buyAmount\": \"1000\",\r\n                        \"buyToken\": \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\",\r\n                        \"buyTokenDecimals\": 18,\r\n                        \"feeRecipient\": undefined,\r\n                        \"feeSellTokenPercentage\": undefined,\r\n                        \"feeType\": undefined,\r\n                        \"integrator\": Object {\r\n                          \"allowedChainIds\": Array [\r\n                            420,\r\n                            1337,\r\n                          ],\r\n                          \"apiKeys\": Array [\r\n                            \"integrator-api-key\",\r\n                          ],\r\n                          \"integratorId\": \"integrator-id\",\r\n                          \"label\": \"test integrator\",\r\n                          \"plp\": false,\r\n                          \"rfqm\": true,\r\n                          \"rfqt\": false,\r\n                        },\r\n                        \"sellAmount\": undefined,\r\n                        \"sellToken\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\r\n                        \"sellTokenDecimals\": 18,\r\n                        \"slippagePercentage\": undefined,\r\n                        \"takerAddress\": \"0x4c42a706410f1190f97d26fe3c999c90070aa40f\",\r\n                      },\r\n                    ]\r\n                `);\r\n            });\r\n\r\n            it('returns returns an RFQ Price', async () => {\r\n                const price: FetchIndicativeQuoteResponse & { liquiditySource: 'rfq' } = {\r\n                    allowanceTarget: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n                    buyAmount: new BigNumber(1000),\r\n                    sellAmount: new BigNumber(2000),\r\n                    buyTokenAddress: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                    sellTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                    gas: new BigNumber(1043459),\r\n                    price: new BigNumber(2),\r\n                    liquiditySource: 'rfq',\r\n                };\r\n\r\n                mockGaslessSwapService.fetchPriceAsync.mockResolvedValue(price);\r\n\r\n                const response = await supertest(app)\r\n                    .get(`${ZERO_G_ALIAS_PATH}/price`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337')\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        intentOnFilling: 'false',\r\n                        skipValidation: 'true',\r\n                    });\r\n\r\n                expect(response.body).toStrictEqual({ ...convertBigNumbersToJson(price), liquidityAvailable: true });\r\n                expect(response.statusCode).toEqual(HttpStatus.OK);\r\n            });\r\n\r\n            it('returns returns an AMM Price', async () => {\r\n                const price: FetchIndicativeQuoteResponse & { liquiditySource: 'amm' } = {\r\n                    allowanceTarget: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n                    buyAmount: new BigNumber(1000),\r\n                    sellAmount: new BigNumber(2000),\r\n                    buyTokenAddress: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                    sellTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                    gas: new BigNumber(1043459),\r\n                    price: new BigNumber(2),\r\n                    liquiditySource: 'amm',\r\n                };\r\n\r\n                mockGaslessSwapService.fetchPriceAsync.mockResolvedValue(price);\r\n\r\n                const response = await supertest(app)\r\n                    .get(`${ZERO_G_ALIAS_PATH}/price`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337')\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        intentOnFilling: 'false',\r\n                        skipValidation: 'true',\r\n                    });\r\n\r\n                expect(response.body).toStrictEqual({ ...convertBigNumbersToJson(price), liquidityAvailable: true });\r\n                expect(response.statusCode).toEqual(HttpStatus.OK);\r\n            });\r\n        });\r\n\r\n        describe('gasless v1', () => {\r\n            it('passes calls on to Gasless Swap Service', async () => {\r\n                mockGaslessSwapService.fetchPriceAsync.mockResolvedValue(null);\r\n\r\n                await supertest(app)\r\n                    .get(`${GASLESS_V1_PATH}/price`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337')\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        intentOnFilling: 'false',\r\n                        skipValidation: 'true',\r\n                        feeType: 'volume',\r\n                        feeSellTokenPercentage: 10,\r\n                        feeRecipient,\r\n                    });\r\n\r\n                expect(mockGaslessSwapService.fetchPriceAsync.mock.calls[0]).toMatchInlineSnapshot(`\r\n                    Array [\r\n                      Object {\r\n                        \"affiliateAddress\": undefined,\r\n                        \"buyAmount\": \"1000\",\r\n                        \"buyToken\": \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\",\r\n                        \"buyTokenDecimals\": 18,\r\n                        \"feeRecipient\": \"${feeRecipient}\",\r\n                        \"feeSellTokenPercentage\": \"10\",\r\n                        \"feeType\": \"volume\",\r\n                        \"integrator\": Object {\r\n                          \"allowedChainIds\": Array [\r\n                            420,\r\n                            1337,\r\n                          ],\r\n                          \"apiKeys\": Array [\r\n                            \"integrator-api-key\",\r\n                          ],\r\n                          \"integratorId\": \"integrator-id\",\r\n                          \"label\": \"test integrator\",\r\n                          \"plp\": false,\r\n                          \"rfqm\": true,\r\n                          \"rfqt\": false,\r\n                        },\r\n                        \"sellAmount\": undefined,\r\n                        \"sellToken\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\r\n                        \"sellTokenDecimals\": 18,\r\n                        \"slippagePercentage\": undefined,\r\n                        \"takerAddress\": \"0x4c42a706410f1190f97d26fe3c999c90070aa40f\",\r\n                      },\r\n                    ]\r\n                `);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('getQuoteAsync', () => {\r\n        describe('zero-g', () => {\r\n            it('passes calls on to Gasless Swap Service', async () => {\r\n                mockGaslessSwapService.fetchQuoteAsync.mockResolvedValue(null);\r\n\r\n                await supertest(app)\r\n                    .get(`${ZERO_G_ALIAS_PATH}/quote`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337')\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        intentOnFilling: 'false',\r\n                        skipValidation: 'true',\r\n                    });\r\n\r\n                expect(mockGaslessSwapService.fetchQuoteAsync.mock.calls[0]).toMatchInlineSnapshot(`\r\n                    Array [\r\n                      Object {\r\n                        \"affiliateAddress\": undefined,\r\n                        \"buyAmount\": \"1000\",\r\n                        \"buyToken\": \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\",\r\n                        \"buyTokenDecimals\": 18,\r\n                        \"checkApproval\": false,\r\n                        \"feeRecipient\": undefined,\r\n                        \"feeSellTokenPercentage\": undefined,\r\n                        \"feeType\": undefined,\r\n                        \"integrator\": Object {\r\n                          \"allowedChainIds\": Array [\r\n                            420,\r\n                            1337,\r\n                          ],\r\n                          \"apiKeys\": Array [\r\n                            \"integrator-api-key\",\r\n                          ],\r\n                          \"integratorId\": \"integrator-id\",\r\n                          \"label\": \"test integrator\",\r\n                          \"plp\": false,\r\n                          \"rfqm\": true,\r\n                          \"rfqt\": false,\r\n                        },\r\n                        \"sellAmount\": undefined,\r\n                        \"sellToken\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\r\n                        \"sellTokenDecimals\": 18,\r\n                        \"slippagePercentage\": undefined,\r\n                        \"takerAddress\": \"0x4c42a706410f1190f97d26fe3c999c90070aa40f\",\r\n                      },\r\n                    ]\r\n                `);\r\n            });\r\n\r\n            it('returns an RFQ quote', async () => {\r\n                const quote: OtcOrderRfqmQuoteResponse & { liquiditySource: 'rfq' } = {\r\n                    buyAmount: new BigNumber('1800054805473'),\r\n                    buyTokenAddress: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                    gas: new BigNumber('1043459'),\r\n                    order: new OtcOrder({\r\n                        chainId: 1337,\r\n                        expiryAndNonce: new BigNumber(\r\n                            '62771017353866807638357894232076664161023554444640345128970000000000000000',\r\n                        ),\r\n                        maker: '0x2222222222222222222222222222222222222222',\r\n                        makerAmount: new BigNumber('0'),\r\n                        makerToken: '0x3333333333333333333333333333333333333333',\r\n                        taker: '0x1111111111111111111111111111111111111111',\r\n                        takerAmount: new BigNumber('0'),\r\n                        takerToken: '0x4444444444444444444444444444444444444444',\r\n                        txOrigin: '0x0000000000000000000000000000000000000000',\r\n                        verifyingContract: '0x0000000000000000000000000000000000000000',\r\n                    }),\r\n                    orderHash: '0x69b784087387d37e2361a40146420a5a68b08375238a5ba0329f612d5673b2ea',\r\n                    price: new BigNumber('1800.054805'),\r\n                    sellAmount: new BigNumber('1000000000000000000000'),\r\n                    sellTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                    type: GaslessTypes.OtcOrder,\r\n                    liquiditySource: 'rfq',\r\n                };\r\n                mockGaslessSwapService.fetchQuoteAsync.mockResolvedValue(quote);\r\n\r\n                const response = await supertest(app)\r\n                    .get(`${ZERO_G_ALIAS_PATH}/quote`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337')\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1800054805473,\r\n                        takerAddress,\r\n                        intentOnFilling: 'true',\r\n                        skipValidation: 'true',\r\n                    });\r\n\r\n                expect(response.body).toStrictEqual({ ...convertBigNumbersToJson(quote), liquidityAvailable: true });\r\n                expect(response.statusCode).toEqual(HttpStatus.OK);\r\n            });\r\n\r\n            it('returns an AMM quote', async () => {\r\n                const quote: MetaTransactionQuoteResponse & { liquiditySource: 'amm' } = {\r\n                    buyAmount: new BigNumber('1800054805473'),\r\n                    buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                    gas: new BigNumber('1043459'),\r\n                    metaTransaction: new MetaTransaction({\r\n                        callData:\r\n                            '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',\r\n                        chainId: 137,\r\n                        expirationTimeSeconds: new BigNumber('9990868679'),\r\n                        feeAmount: new BigNumber('0'),\r\n                        feeToken: '0x0000000000000000000000000000000000000000',\r\n                        maxGasPrice: new BigNumber('4294967296'),\r\n                        minGasPrice: new BigNumber('1'),\r\n                        salt: new BigNumber(\r\n                            '32606650794224190000000000000000000000000000000000000000000000000000000000000',\r\n                        ),\r\n                        sender: '0x0000000000000000000000000000000000000000',\r\n                        signer: '0x4c42a706410f1190f97d26fe3c999c90070aa40f',\r\n                        value: new BigNumber('0'),\r\n                        verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n                    }),\r\n                    metaTransactionHash: '0xde5a11983edd012047dd3107532f007a73ae488bfb354f35b8a40580e2a775a1',\r\n                    price: new BigNumber('1800.054805'),\r\n                    sellAmount: new BigNumber('1000000000000000000000'),\r\n                    sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                    type: GaslessTypes.MetaTransaction,\r\n                    liquiditySource: 'amm',\r\n                };\r\n                mockGaslessSwapService.fetchQuoteAsync.mockResolvedValue(quote);\r\n\r\n                const response = await supertest(app)\r\n                    .get(`${ZERO_G_ALIAS_PATH}/quote`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337')\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1800054805473,\r\n                        takerAddress,\r\n                        intentOnFilling: 'true',\r\n                        skipValidation: 'true',\r\n                    });\r\n\r\n                expect(response.body).toStrictEqual({ ...convertBigNumbersToJson(quote), liquidityAvailable: true });\r\n                expect(response.statusCode).toEqual(HttpStatus.OK);\r\n            });\r\n        });\r\n\r\n        describe('gasless v1', () => {\r\n            it('passes calls on to Gasless Swap Service', async () => {\r\n                mockGaslessSwapService.fetchQuoteAsync.mockResolvedValue(null);\r\n\r\n                await supertest(app)\r\n                    .get(`${GASLESS_V1_PATH}/quote`)\r\n                    .set('Content-type', 'application/json')\r\n                    .set('0x-api-key', 'integrator-api-key')\r\n                    .set('0x-chain-id', '1337')\r\n                    .query({\r\n                        buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n                        sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                        buyAmount: 1000,\r\n                        takerAddress,\r\n                        intentOnFilling: 'false',\r\n                        skipValidation: 'true',\r\n                        feeType: 'volume',\r\n                        feeSellTokenPercentage: 10,\r\n                        feeRecipient,\r\n                    });\r\n\r\n                expect(mockGaslessSwapService.fetchQuoteAsync.mock.calls[0]).toMatchInlineSnapshot(`\r\n                    Array [\r\n                      Object {\r\n                        \"affiliateAddress\": undefined,\r\n                        \"buyAmount\": \"1000\",\r\n                        \"buyToken\": \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\",\r\n                        \"buyTokenDecimals\": 18,\r\n                        \"checkApproval\": false,\r\n                        \"feeRecipient\": \"${feeRecipient}\",\r\n                        \"feeSellTokenPercentage\": \"10\",\r\n                        \"feeType\": \"volume\",\r\n                        \"integrator\": Object {\r\n                          \"allowedChainIds\": Array [\r\n                            420,\r\n                            1337,\r\n                          ],\r\n                          \"apiKeys\": Array [\r\n                            \"integrator-api-key\",\r\n                          ],\r\n                          \"integratorId\": \"integrator-id\",\r\n                          \"label\": \"test integrator\",\r\n                          \"plp\": false,\r\n                          \"rfqm\": true,\r\n                          \"rfqt\": false,\r\n                        },\r\n                        \"sellAmount\": undefined,\r\n                        \"sellToken\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\r\n                        \"sellTokenDecimals\": 18,\r\n                        \"slippagePercentage\": undefined,\r\n                        \"takerAddress\": \"0x4c42a706410f1190f97d26fe3c999c90070aa40f\",\r\n                      },\r\n                    ]\r\n                `);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('processSubmitAsync', () => {\r\n        it('returns a metatransaction result', async () => {\r\n            const metaTransaction = new MetaTransaction({\r\n                callData:\r\n                    '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',\r\n                chainId: 137,\r\n                expirationTimeSeconds: new BigNumber('9990868679'),\r\n                feeAmount: new BigNumber('0'),\r\n                feeToken: '0x0000000000000000000000000000000000000000',\r\n                maxGasPrice: new BigNumber('4294967296'),\r\n                minGasPrice: new BigNumber('1'),\r\n                salt: new BigNumber('32606650794224190000000000000000000000000000000000000000000000000000000000000'),\r\n                sender: '0x0000000000000000000000000000000000000000',\r\n                signer: '0x4c42a706410f1190f97d26fe3c999c90070aa40f',\r\n                value: new BigNumber('0'),\r\n                verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n            });\r\n            const submitResult: SubmitMetaTransactionSignedQuoteResponse = {\r\n                metaTransactionHash: '0xde5a11983edd012047dd3107532f007a73ae488bfb354f35b8a40580e2a775a1',\r\n                type: GaslessTypes.MetaTransaction,\r\n            };\r\n\r\n            mockGaslessSwapService.processSubmitAsync.mockResolvedValue(submitResult);\r\n\r\n            const response = await supertest(app)\r\n                .post(`${ZERO_G_ALIAS_PATH}/submit`)\r\n                .set('Content-type', 'application/json')\r\n                .set('0x-api-key', 'integrator-api-key')\r\n                .set('0x-chain-id', '1337')\r\n                .send({\r\n                    kind: GaslessTypes.MetaTransaction,\r\n                    trade: {\r\n                        metaTransaction,\r\n                        type: GaslessTypes.MetaTransaction,\r\n                        signature: ethSignHashWithKey(metaTransaction.getHash(), takerPrivateKey),\r\n                    },\r\n                });\r\n\r\n            expect(mockGaslessSwapService.processSubmitAsync.mock.calls[0]).toMatchInlineSnapshot(`\r\n                Array [\r\n                  Object {\r\n                    \"kind\": \"metatransaction\",\r\n                    \"trade\": Object {\r\n                      \"metaTransaction\": MetaTransaction {\r\n                        \"callData\": \"0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b\",\r\n                        \"chainId\": 137,\r\n                        \"expirationTimeSeconds\": \"9990868679\",\r\n                        \"feeAmount\": \"0\",\r\n                        \"feeToken\": \"0x0000000000000000000000000000000000000000\",\r\n                        \"maxGasPrice\": \"4294967296\",\r\n                        \"minGasPrice\": \"1\",\r\n                        \"salt\": \"32606650794224190000000000000000000000000000000000000000000000000000000000000\",\r\n                        \"sender\": \"0x0000000000000000000000000000000000000000\",\r\n                        \"signer\": \"0x4c42a706410f1190f97d26fe3c999c90070aa40f\",\r\n                        \"value\": \"0\",\r\n                        \"verifyingContract\": \"0xdef1c0ded9bec7f1a1670819833240f027b25eff\",\r\n                      },\r\n                      \"signature\": Object {\r\n                        \"r\": \"0x7247ed156081c767781834b122d4e9317f3cc2d5ed529cb74aaaa11d8b5a93f8\",\r\n                        \"s\": \"0x19a0b795609483b9fcbc42b574e4401401308b4c24347b0bda8a2cf2332efd78\",\r\n                        \"signatureType\": 3,\r\n                        \"v\": 28,\r\n                      },\r\n                      \"type\": \"metatransaction\",\r\n                    },\r\n                  },\r\n                  \"integrator-id\",\r\n                ]\r\n            `);\r\n            expect(response.statusCode).toEqual(HttpStatus.CREATED);\r\n            expect(response.body).toEqual(submitResult);\r\n        });\r\n    });\r\n});\r\n\r\n/**\r\n * Deeply transforms object keys from BigNumber to JSON\r\n */\r\n// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction convertBigNumbersToJson(x: Record<string, any>): Record<string, any> {\r\n    return mapValues(x, (v) => {\r\n        if (v instanceof BigNumber) {\r\n            return v.toJSON();\r\n        }\r\n        if (v instanceof Object) {\r\n            return convertBigNumbersToJson(v);\r\n        }\r\n        return v;\r\n    });\r\n}\r\n"],"version":3}