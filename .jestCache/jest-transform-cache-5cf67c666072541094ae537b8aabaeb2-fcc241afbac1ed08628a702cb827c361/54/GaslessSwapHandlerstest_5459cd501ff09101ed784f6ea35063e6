913eb496ad898ddacd0ed6807d0657c6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../../services/GaslessSwapService', () => {
    return {
        GaslessSwapService: jest.fn().mockImplementation(() => {
            return {
                fetchPriceAsync: jest.fn(),
                fetchQuoteAsync: jest.fn(),
                processSubmitAsync: jest.fn(),
                // tslint:disable-next-line: custom-no-magic-numbers
                getTokenDecimalsAsync: jest.fn().mockResolvedValue(18),
            };
        }),
    };
});
jest.mock('../../utils/config_manager', () => {
    return {
        ConfigManager: jest.fn().mockImplementation(() => {
            return {
                getRfqmApiKeyWhitelist: jest.fn().mockReturnValue(new Set(['integrator-api-key'])),
                getIntegratorIdForApiKey: jest.fn().mockReturnValue('integrator-id'),
                getIntegratorByIdOrThrow: jest.fn().mockImplementation((id) => {
                    if (id !== 'integrator-id') {
                        throw new Error();
                    }
                    const integrator = {
                        apiKeys: ['integrator-api-key'],
                        allowedChainIds: [420, 1337],
                        integratorId: 'integrator-id',
                        label: 'test integrator',
                        plp: false,
                        rfqt: false,
                        rfqm: true,
                    };
                    return integrator;
                }),
            };
        }),
    };
});
// tslint:disable: max-file-line-count
const api_utils_1 = require("@0x/api-utils");
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const express = require("express");
const HttpStatus = require("http-status-codes");
const lodash_1 = require("lodash");
const supertest = require("supertest");
const constants_1 = require("../../core/constants");
const types_1 = require("../../core/types");
const error_handling_1 = require("../../middleware/error_handling");
const GaslessSwapRouter_1 = require("../../routers/GaslessSwapRouter");
const GaslessSwapService_1 = require("../../services/GaslessSwapService");
const config_manager_1 = require("../../utils/config_manager");
// tslint:disable: no-object-literal-type-assertion
const mockGaslessSwapService = jest.mocked(new GaslessSwapService_1.GaslessSwapService(0, {}, new URL('http://meta.transaction.service'), {}, {}, {}, {}, {}));
const mockConfigManager = jest.mocked(new config_manager_1.ConfigManager());
// tslint:enable: no-object-literal-type-assertion
const testChainId = 1337;
/**
 * Verifies the proper response to a request using a mocked `GaslessSwapService`.
 *
 * Each case sets up its own little Express app to avoid coupiling this
 * test to the upstream router.
 */
describe('GaslessSwapHandlers', () => {
    const takerAddress = '0x4c42a706410f1190f97d26fe3c999c90070aa40f';
    const takerPrivateKey = '0xd2c2349e10170e4219d9febd1c663ea5c7334f79c38d25f4f52c85af796c7c05';
    const feeRecipient = '0x5fb321349ace5303c82f0d1d491041e042f2ad22';
    const app = express()
        .use(express.json())
        .use(constants_1.ZERO_G_PATH, (0, GaslessSwapRouter_1.createZeroGRouter)(new Map([[testChainId, mockGaslessSwapService]]), mockConfigManager))
        .use(constants_1.ZERO_G_ALIAS_PATH, (0, GaslessSwapRouter_1.createZeroGRouter)(new Map([[testChainId, mockGaslessSwapService]]), mockConfigManager))
        .use(constants_1.GASLESS_V1_PATH, (0, GaslessSwapRouter_1.createGaslessV1Router)(new Map([[testChainId, mockGaslessSwapService]]), mockConfigManager))
        .use(error_handling_1.errorHandler);
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('parameter verification', () => {
        it('throws if a required parameter is missing', async () => {
            const response = await supertest(app)
                .get(`${constants_1.ZERO_G_ALIAS_PATH}/price`)
                .query({ makerToken: '0xmakertoken' })
                .set('Accept', 'application/json');
            expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.RequiredField);
            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
        });
        it('throws if the chain ID is invalid', async () => {
            const response = await supertest(app)
                .get(`${constants_1.ZERO_G_ALIAS_PATH}/price`)
                .set('Content-type', 'application/json')
                .set('0x-api-key', 'integrator-api-key')
                .set('0x-chain-id', '420') // tslint:disable-line: custom-no-magic-numbers
                .query({
                buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyAmount: 1000,
                takerAddress,
                intentOnFilling: 'false',
                skipValidation: 'true',
            });
            expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.FieldInvalid);
            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
        });
        describe('zero-g', () => {
            it('throws if the `slippagePercentage` is out of range for /price', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 2.1,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.ValueOutOfRange);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `slippagePercentage` is out of range for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 0.00001,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.ValueOutOfRange);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `slippagePercentage` is invalid for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 'invalid',
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.IncorrectFormat);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
        });
        describe('gasless v1', () => {
            it('throws if the `slippagePercentage` is out of range for /price', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.GASLESS_V1_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 101,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.ValueOutOfRange);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `slippagePercentage` is out of range for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.GASLESS_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 0.001,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.ValueOutOfRange);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `slippagePercentage` is invalid for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.GASLESS_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 'invalid',
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.IncorrectFormat);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `feeType` is invalid for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.GASLESS_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 10,
                    feeType: 'invalid',
                    feeSellTokenPercentage: 10,
                    feeRecipient,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.ValueOutOfRange);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `feeSellTokenPercentage` is undefined when `feeType` is provided for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.GASLESS_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 10,
                    feeType: 'volume',
                    feeRecipient,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.RequiredField);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `feeSellTokenPercentage` is out of range for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.GASLESS_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 10,
                    feeType: 'volume',
                    feeSellTokenPercentage: 101,
                    feeRecipient,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.ValueOutOfRange);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `feeSellTokenPercentage` is out of range for /price', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.GASLESS_V1_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 10,
                    feeType: 'volume',
                    feeSellTokenPercentage: 101,
                    feeRecipient,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.ValueOutOfRange);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `feeRecipient` is undefined when `feeType` is provided for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.GASLESS_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 10,
                    feeType: 'volume',
                    feeSellTokenPercentage: 5,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.RequiredField);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
        });
    });
    describe('getPriceAsync', () => {
        describe('zero-g', () => {
            it('responds with an error if the underlying service call fails', async () => {
                mockGaslessSwapService.fetchPriceAsync.mockRejectedValueOnce(new Error('The service blew up'));
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                });
                expect(response.statusCode).toEqual(HttpStatus.INTERNAL_SERVER_ERROR);
            });
            it('passes calls on to Gasless Swap Service', async () => {
                mockGaslessSwapService.fetchPriceAsync.mockResolvedValue(null);
                await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                });
                expect(mockGaslessSwapService.fetchPriceAsync.mock.calls[0]).toMatchInlineSnapshot(`
                    Array [
                      Object {
                        "affiliateAddress": undefined,
                        "buyAmount": "1000",
                        "buyToken": "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
                        "buyTokenDecimals": 18,
                        "feeRecipient": undefined,
                        "feeSellTokenPercentage": undefined,
                        "feeType": undefined,
                        "integrator": Object {
                          "allowedChainIds": Array [
                            420,
                            1337,
                          ],
                          "apiKeys": Array [
                            "integrator-api-key",
                          ],
                          "integratorId": "integrator-id",
                          "label": "test integrator",
                          "plp": false,
                          "rfqm": true,
                          "rfqt": false,
                        },
                        "sellAmount": undefined,
                        "sellToken": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                        "sellTokenDecimals": 18,
                        "slippagePercentage": undefined,
                        "takerAddress": "0x4c42a706410f1190f97d26fe3c999c90070aa40f",
                      },
                    ]
                `);
            });
            it('returns returns an RFQ Price', async () => {
                const price = {
                    allowanceTarget: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
                    buyAmount: new utils_1.BigNumber(1000),
                    sellAmount: new utils_1.BigNumber(2000),
                    buyTokenAddress: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    gas: new utils_1.BigNumber(1043459),
                    price: new utils_1.BigNumber(2),
                    liquiditySource: 'rfq',
                };
                mockGaslessSwapService.fetchPriceAsync.mockResolvedValue(price);
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                });
                expect(response.body).toStrictEqual({ ...convertBigNumbersToJson(price), liquidityAvailable: true });
                expect(response.statusCode).toEqual(HttpStatus.OK);
            });
            it('returns returns an AMM Price', async () => {
                const price = {
                    allowanceTarget: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
                    buyAmount: new utils_1.BigNumber(1000),
                    sellAmount: new utils_1.BigNumber(2000),
                    buyTokenAddress: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    gas: new utils_1.BigNumber(1043459),
                    price: new utils_1.BigNumber(2),
                    liquiditySource: 'amm',
                };
                mockGaslessSwapService.fetchPriceAsync.mockResolvedValue(price);
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                });
                expect(response.body).toStrictEqual({ ...convertBigNumbersToJson(price), liquidityAvailable: true });
                expect(response.statusCode).toEqual(HttpStatus.OK);
            });
        });
        describe('gasless v1', () => {
            it('passes calls on to Gasless Swap Service', async () => {
                mockGaslessSwapService.fetchPriceAsync.mockResolvedValue(null);
                await supertest(app)
                    .get(`${constants_1.GASLESS_V1_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                    feeType: 'volume',
                    feeSellTokenPercentage: 10,
                    feeRecipient,
                });
                expect(mockGaslessSwapService.fetchPriceAsync.mock.calls[0]).toMatchInlineSnapshot(`
                    Array [
                      Object {
                        "affiliateAddress": undefined,
                        "buyAmount": "1000",
                        "buyToken": "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
                        "buyTokenDecimals": 18,
                        "feeRecipient": "${feeRecipient}",
                        "feeSellTokenPercentage": "10",
                        "feeType": "volume",
                        "integrator": Object {
                          "allowedChainIds": Array [
                            420,
                            1337,
                          ],
                          "apiKeys": Array [
                            "integrator-api-key",
                          ],
                          "integratorId": "integrator-id",
                          "label": "test integrator",
                          "plp": false,
                          "rfqm": true,
                          "rfqt": false,
                        },
                        "sellAmount": undefined,
                        "sellToken": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                        "sellTokenDecimals": 18,
                        "slippagePercentage": undefined,
                        "takerAddress": "0x4c42a706410f1190f97d26fe3c999c90070aa40f",
                      },
                    ]
                `);
            });
        });
    });
    describe('getQuoteAsync', () => {
        describe('zero-g', () => {
            it('passes calls on to Gasless Swap Service', async () => {
                mockGaslessSwapService.fetchQuoteAsync.mockResolvedValue(null);
                await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                });
                expect(mockGaslessSwapService.fetchQuoteAsync.mock.calls[0]).toMatchInlineSnapshot(`
                    Array [
                      Object {
                        "affiliateAddress": undefined,
                        "buyAmount": "1000",
                        "buyToken": "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
                        "buyTokenDecimals": 18,
                        "checkApproval": false,
                        "feeRecipient": undefined,
                        "feeSellTokenPercentage": undefined,
                        "feeType": undefined,
                        "integrator": Object {
                          "allowedChainIds": Array [
                            420,
                            1337,
                          ],
                          "apiKeys": Array [
                            "integrator-api-key",
                          ],
                          "integratorId": "integrator-id",
                          "label": "test integrator",
                          "plp": false,
                          "rfqm": true,
                          "rfqt": false,
                        },
                        "sellAmount": undefined,
                        "sellToken": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                        "sellTokenDecimals": 18,
                        "slippagePercentage": undefined,
                        "takerAddress": "0x4c42a706410f1190f97d26fe3c999c90070aa40f",
                      },
                    ]
                `);
            });
            it('returns an RFQ quote', async () => {
                const quote = {
                    buyAmount: new utils_1.BigNumber('1800054805473'),
                    buyTokenAddress: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    gas: new utils_1.BigNumber('1043459'),
                    order: new protocol_utils_1.OtcOrder({
                        chainId: 1337,
                        expiryAndNonce: new utils_1.BigNumber('62771017353866807638357894232076664161023554444640345128970000000000000000'),
                        maker: '0x2222222222222222222222222222222222222222',
                        makerAmount: new utils_1.BigNumber('0'),
                        makerToken: '0x3333333333333333333333333333333333333333',
                        taker: '0x1111111111111111111111111111111111111111',
                        takerAmount: new utils_1.BigNumber('0'),
                        takerToken: '0x4444444444444444444444444444444444444444',
                        txOrigin: '0x0000000000000000000000000000000000000000',
                        verifyingContract: '0x0000000000000000000000000000000000000000',
                    }),
                    orderHash: '0x69b784087387d37e2361a40146420a5a68b08375238a5ba0329f612d5673b2ea',
                    price: new utils_1.BigNumber('1800.054805'),
                    sellAmount: new utils_1.BigNumber('1000000000000000000000'),
                    sellTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    type: types_1.GaslessTypes.OtcOrder,
                    liquiditySource: 'rfq',
                };
                mockGaslessSwapService.fetchQuoteAsync.mockResolvedValue(quote);
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1800054805473,
                    takerAddress,
                    intentOnFilling: 'true',
                    skipValidation: 'true',
                });
                expect(response.body).toStrictEqual({ ...convertBigNumbersToJson(quote), liquidityAvailable: true });
                expect(response.statusCode).toEqual(HttpStatus.OK);
            });
            it('returns an AMM quote', async () => {
                const quote = {
                    buyAmount: new utils_1.BigNumber('1800054805473'),
                    buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    gas: new utils_1.BigNumber('1043459'),
                    metaTransaction: new protocol_utils_1.MetaTransaction({
                        callData: '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',
                        chainId: 137,
                        expirationTimeSeconds: new utils_1.BigNumber('9990868679'),
                        feeAmount: new utils_1.BigNumber('0'),
                        feeToken: '0x0000000000000000000000000000000000000000',
                        maxGasPrice: new utils_1.BigNumber('4294967296'),
                        minGasPrice: new utils_1.BigNumber('1'),
                        salt: new utils_1.BigNumber('32606650794224190000000000000000000000000000000000000000000000000000000000000'),
                        sender: '0x0000000000000000000000000000000000000000',
                        signer: '0x4c42a706410f1190f97d26fe3c999c90070aa40f',
                        value: new utils_1.BigNumber('0'),
                        verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
                    }),
                    metaTransactionHash: '0xde5a11983edd012047dd3107532f007a73ae488bfb354f35b8a40580e2a775a1',
                    price: new utils_1.BigNumber('1800.054805'),
                    sellAmount: new utils_1.BigNumber('1000000000000000000000'),
                    sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    type: types_1.GaslessTypes.MetaTransaction,
                    liquiditySource: 'amm',
                };
                mockGaslessSwapService.fetchQuoteAsync.mockResolvedValue(quote);
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1800054805473,
                    takerAddress,
                    intentOnFilling: 'true',
                    skipValidation: 'true',
                });
                expect(response.body).toStrictEqual({ ...convertBigNumbersToJson(quote), liquidityAvailable: true });
                expect(response.statusCode).toEqual(HttpStatus.OK);
            });
        });
        describe('gasless v1', () => {
            it('passes calls on to Gasless Swap Service', async () => {
                mockGaslessSwapService.fetchQuoteAsync.mockResolvedValue(null);
                await supertest(app)
                    .get(`${constants_1.GASLESS_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                    feeType: 'volume',
                    feeSellTokenPercentage: 10,
                    feeRecipient,
                });
                expect(mockGaslessSwapService.fetchQuoteAsync.mock.calls[0]).toMatchInlineSnapshot(`
                    Array [
                      Object {
                        "affiliateAddress": undefined,
                        "buyAmount": "1000",
                        "buyToken": "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
                        "buyTokenDecimals": 18,
                        "checkApproval": false,
                        "feeRecipient": "${feeRecipient}",
                        "feeSellTokenPercentage": "10",
                        "feeType": "volume",
                        "integrator": Object {
                          "allowedChainIds": Array [
                            420,
                            1337,
                          ],
                          "apiKeys": Array [
                            "integrator-api-key",
                          ],
                          "integratorId": "integrator-id",
                          "label": "test integrator",
                          "plp": false,
                          "rfqm": true,
                          "rfqt": false,
                        },
                        "sellAmount": undefined,
                        "sellToken": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                        "sellTokenDecimals": 18,
                        "slippagePercentage": undefined,
                        "takerAddress": "0x4c42a706410f1190f97d26fe3c999c90070aa40f",
                      },
                    ]
                `);
            });
        });
    });
    describe('processSubmitAsync', () => {
        it('returns a metatransaction result', async () => {
            const metaTransaction = new protocol_utils_1.MetaTransaction({
                callData: '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',
                chainId: 137,
                expirationTimeSeconds: new utils_1.BigNumber('9990868679'),
                feeAmount: new utils_1.BigNumber('0'),
                feeToken: '0x0000000000000000000000000000000000000000',
                maxGasPrice: new utils_1.BigNumber('4294967296'),
                minGasPrice: new utils_1.BigNumber('1'),
                salt: new utils_1.BigNumber('32606650794224190000000000000000000000000000000000000000000000000000000000000'),
                sender: '0x0000000000000000000000000000000000000000',
                signer: '0x4c42a706410f1190f97d26fe3c999c90070aa40f',
                value: new utils_1.BigNumber('0'),
                verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
            });
            const submitResult = {
                metaTransactionHash: '0xde5a11983edd012047dd3107532f007a73ae488bfb354f35b8a40580e2a775a1',
                type: types_1.GaslessTypes.MetaTransaction,
            };
            mockGaslessSwapService.processSubmitAsync.mockResolvedValue(submitResult);
            const response = await supertest(app)
                .post(`${constants_1.ZERO_G_ALIAS_PATH}/submit`)
                .set('Content-type', 'application/json')
                .set('0x-api-key', 'integrator-api-key')
                .set('0x-chain-id', '1337')
                .send({
                kind: types_1.GaslessTypes.MetaTransaction,
                trade: {
                    metaTransaction,
                    type: types_1.GaslessTypes.MetaTransaction,
                    signature: (0, protocol_utils_1.ethSignHashWithKey)(metaTransaction.getHash(), takerPrivateKey),
                },
            });
            expect(mockGaslessSwapService.processSubmitAsync.mock.calls[0]).toMatchInlineSnapshot(`
                Array [
                  Object {
                    "kind": "metatransaction",
                    "trade": Object {
                      "metaTransaction": MetaTransaction {
                        "callData": "0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b",
                        "chainId": 137,
                        "expirationTimeSeconds": "9990868679",
                        "feeAmount": "0",
                        "feeToken": "0x0000000000000000000000000000000000000000",
                        "maxGasPrice": "4294967296",
                        "minGasPrice": "1",
                        "salt": "32606650794224190000000000000000000000000000000000000000000000000000000000000",
                        "sender": "0x0000000000000000000000000000000000000000",
                        "signer": "0x4c42a706410f1190f97d26fe3c999c90070aa40f",
                        "value": "0",
                        "verifyingContract": "0xdef1c0ded9bec7f1a1670819833240f027b25eff",
                      },
                      "signature": Object {
                        "r": "0x7247ed156081c767781834b122d4e9317f3cc2d5ed529cb74aaaa11d8b5a93f8",
                        "s": "0x19a0b795609483b9fcbc42b574e4401401308b4c24347b0bda8a2cf2332efd78",
                        "signatureType": 3,
                        "v": 28,
                      },
                      "type": "metatransaction",
                    },
                  },
                  "integrator-id",
                ]
            `);
            expect(response.statusCode).toEqual(HttpStatus.CREATED);
            expect(response.body).toEqual(submitResult);
        });
    });
});
/**
 * Deeply transforms object keys from BigNumber to JSON
 */
// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function convertBigNumbersToJson(x) {
    return (0, lodash_1.mapValues)(x, (v) => {
        if (v instanceof utils_1.BigNumber) {
            return v.toJSON();
        }
        if (v instanceof Object) {
            return convertBigNumbersToJson(v);
        }
        return v;
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,