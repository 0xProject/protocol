{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/services/rfq_maker_balance_cache_service.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/services/rfq_maker_balance_cache_service.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\r\nimport { Counter, Gauge, Summary } from 'prom-client';\r\n\r\nimport { logger } from '../logger';\r\nimport { ERC20Owner } from '../core/types';\r\nimport { CacheClient } from '../utils/cache_client';\r\nimport { RfqBalanceCheckUtils } from '../utils/rfq_blockchain_utils';\r\n\r\nconst RFQ_BALANCE_CACHE_CHECKED = new Counter({\r\n    name: 'rfq_balance_cache_checked',\r\n    help: 'Number of times we checked balance cache',\r\n});\r\nconst RFQ_BALANCE_CACHE_MISS = new Counter({\r\n    name: 'rfq_balance_cache_missed',\r\n    help: 'cache miss observed in balance cache',\r\n});\r\nconst RFQ_BALANCE_CACHE_READ_LATENCY = new Summary({\r\n    name: 'rfq_balance_cache_read_latency',\r\n    help: 'Read latency for balance cache',\r\n});\r\nconst RFQ_BALANCE_CACHE_WRITE_LATENCY = new Summary({\r\n    name: 'rfq_balance_cache_write_latency',\r\n    help: 'Write latency for balance cache',\r\n});\r\nconst RFQ_BALANCE_CACHE_EVICT_LATENCY = new Summary({\r\n    name: 'rfq_balance_cache_evict_latency',\r\n    help: 'Evict latency for balance cache',\r\n});\r\nconst RFQ_BALANCE_CACHE_NUM_ADDRESSES = new Gauge({\r\n    name: 'rfq_balance_cache_num_addresses',\r\n    help: 'Number of unique addresses in balance cache',\r\n});\r\n\r\n/**\r\n * RfqMakerBalanceCacheService is used by RfqmService to fetch maker token balances.\r\n * It maintains a balance cache that is periodically updated via on-chain balance checks.\r\n */\r\nexport class RfqMakerBalanceCacheService {\r\n    constructor(\r\n        private readonly _cacheClient: CacheClient,\r\n        private readonly _balanceCheckUtils: RfqBalanceCheckUtils,\r\n    ) {}\r\n\r\n    /**\r\n     * Gets token balances for supplied maker and token addresses from the maker balance cache.\r\n     * Performs a balance check if balances are not found in the cache.\r\n     * Returns an array of balances ordered by corresponding erc20Owner objects.\r\n     */\r\n    public async getERC20OwnerBalancesAsync(\r\n        chainId: number,\r\n        erc20Owners: ERC20Owner | ERC20Owner[],\r\n    ): Promise<BigNumber[]> {\r\n        const timerStopFunction = RFQ_BALANCE_CACHE_READ_LATENCY.startTimer();\r\n\r\n        const erc20OwnersArr = Array.isArray(erc20Owners) ? erc20Owners : [erc20Owners];\r\n        let cachedBalances: (BigNumber | null)[];\r\n        try {\r\n            RFQ_BALANCE_CACHE_CHECKED.inc(erc20OwnersArr.length);\r\n            cachedBalances = await this._cacheClient.getERC20OwnerBalancesAsync(chainId, erc20OwnersArr);\r\n        } catch (e) {\r\n            timerStopFunction();\r\n            logger.error({ chainId, erc20Owners }, 'Failed to read entries from maker balance cache');\r\n            throw e;\r\n        }\r\n\r\n        // On cache miss (i.e. if balance is null), add to pending maker token addresses\r\n        const pendingIndices: number[] = [];\r\n        await Promise.all(\r\n            cachedBalances.map(async (balance, i) => {\r\n                if (balance === null) {\r\n                    RFQ_BALANCE_CACHE_MISS.inc();\r\n                    await this._cacheClient.addERC20OwnerAsync(chainId, erc20OwnersArr[i]);\r\n                    pendingIndices.push(i);\r\n                }\r\n            }),\r\n        );\r\n\r\n        // Perform balance check and update balances accordingly\r\n        // At this point, remaining null balances will be represented as zero balances\r\n        // and will be subject to eviction.\r\n        let balances: BigNumber[];\r\n        if (pendingIndices.length !== 0) {\r\n            const fetchedBalances = await this._balanceCheckUtils.getMinOfBalancesAndAllowancesAsync(\r\n                erc20OwnersArr.filter((_, i) => pendingIndices.includes(i)),\r\n            );\r\n            balances = cachedBalances.map((balance) => {\r\n                if (balance === null) {\r\n                    const fetchedBalance = fetchedBalances.shift();\r\n                    return fetchedBalance ? fetchedBalance : new BigNumber(0);\r\n                }\r\n                // balance should be a valid BigNumber at this point\r\n                return balance;\r\n            });\r\n        } else {\r\n            // balances should not be null here\r\n            balances = cachedBalances.filter((balance): balance is BigNumber => balance !== null);\r\n        }\r\n\r\n        timerStopFunction();\r\n        return balances;\r\n    }\r\n\r\n    /**\r\n     * Updates cached token balances by making an on-chain balance check.\r\n     * All newly observed erc20Owners included in the set of maintained maker token addresses are updated.\r\n     */\r\n    public async updateERC20OwnerBalancesAsync(chainId: number): Promise<void> {\r\n        const timerStopFunction = RFQ_BALANCE_CACHE_WRITE_LATENCY.startTimer();\r\n        try {\r\n            const erc20Owners = await this._cacheClient.getERC20OwnersAsync(chainId);\r\n            if (erc20Owners.length > 0) {\r\n                RFQ_BALANCE_CACHE_NUM_ADDRESSES.set(erc20Owners.length);\r\n                const balances = await this._balanceCheckUtils.getMinOfBalancesAndAllowancesAsync(erc20Owners);\r\n\r\n                await this._cacheClient.setERC20OwnerBalancesAsync(chainId, erc20Owners, balances);\r\n            }\r\n        } catch (e) {\r\n            logger.error({ chainId }, 'Failed to update entries for maker balance cache');\r\n            throw e;\r\n        } finally {\r\n            timerStopFunction();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs eviction of stale cache entries with zero balances.\r\n     */\r\n    public async evictZeroBalancesAsync(chainId: number): Promise<number> {\r\n        const timerStopFunction = RFQ_BALANCE_CACHE_EVICT_LATENCY.startTimer();\r\n        try {\r\n            return this._cacheClient.evictZeroBalancesAsync(chainId);\r\n        } catch (e) {\r\n            logger.error({ chainId }, 'Failed to evict entries from maker balance cache');\r\n            throw e;\r\n        } finally {\r\n            timerStopFunction();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Safely close the maker balance cache service to avoid potential memory leak.\r\n     */\r\n    public async closeAsync(): Promise<'OK'> {\r\n        try {\r\n            return this._cacheClient.closeAsync();\r\n        } catch (e) {\r\n            logger.error({ message: e.message, stack: e.stack }, 'Failed to close RFQm maker balance cache service');\r\n            throw e;\r\n        }\r\n    }\r\n}\r\n"],"version":3}