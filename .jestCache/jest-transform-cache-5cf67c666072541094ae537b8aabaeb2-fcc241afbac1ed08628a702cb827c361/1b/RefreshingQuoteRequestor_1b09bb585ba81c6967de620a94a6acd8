48f47539ab888cd41a885cb3ca9b3b41
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefreshingQuoteRequestor = void 0;
const constants_1 = require("../core/constants");
const rfq_maker_manager_1 = require("../utils/rfq_maker_manager");
const MetricsProxyImpl_1 = require("./MetricsProxyImpl");
const QuoteRequestor_1 = require("./QuoteRequestor");
// This number should not be greater than 90s. Otherwise, the RFQt quotes from Jump and WM are likely to be filtered out
// tslint:disable-next-line: custom-no-magic-numbers
const DEFAULT_EXPIRY_BUFFER_MS = constants_1.ONE_SECOND_MS * 80;
/**
 * A wrapper of `QuoteRequestor` constructed with an instance of `RfqMakerManager`
 * instead of `rfqAssetOfferings`. This allows the underlying Quote Requestor
 * to be refreshed with the pairs of RfqMakerManager are refreshed.
 */
class RefreshingQuoteRequestor {
    constructor(_rfqMakerManager, _quoteRequestorHttpClient, _altRfqCreds, _expiryBufferMs = DEFAULT_EXPIRY_BUFFER_MS) {
        this._rfqMakerManager = _rfqMakerManager;
        this._quoteRequestorHttpClient = _quoteRequestorHttpClient;
        this._altRfqCreds = _altRfqCreds;
        this._expiryBufferMs = _expiryBufferMs;
        this._metrics = MetricsProxyImpl_1.METRICS_PROXY;
        this._quoteRequestor = this._createQuoteRequestor();
        this._rfqMakerManager.on(rfq_maker_manager_1.RfqMakerManager.REFRESHED_EVENT, () => (this._quoteRequestor = this._createQuoteRequestor()));
    }
    /**
     * Passthrough to the internal `QuoteRequestor`'s `requestRfqtIndicativeQuotesAsync`
     * method.
     */
    async requestRfqtIndicativeQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, options) {
        return this._quoteRequestor.requestRfqtIndicativeQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, options);
    }
    /**
     * Passthrough to the internal `QuoteRequestor`'s `requestRfqtFirmQuotesAsync`
     * method.
     */
    async requestRfqtFirmQuotesAsync(makerToken, // maker token
    takerToken, // taker token
    assetFillAmount, marketOperation, comparisonPrice, options) {
        return this._quoteRequestor.requestRfqtFirmQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, options);
    }
    /**
     * Passthrough to the internal `QuoteRequestor`'s `getMakerUriForSignature`
     * method.
     */
    getMakerUriForSignature(signature) {
        return this._quoteRequestor.getMakerUriForSignature(signature);
    }
    /**
     * Handler for when the RFQ Maker Manager emits a pairs refreshed event.
     * Creates a new `QuoteRequestor` instance with new pairs.
     */
    _createQuoteRequestor() {
        const rfqAssetOfferings = this._rfqMakerManager.getRfqtV1MakerOfferings();
        return new QuoteRequestor_1.QuoteRequestor(rfqAssetOfferings, this._quoteRequestorHttpClient, this._altRfqCreds, this._expiryBufferMs, this._metrics);
    }
}
exports.RefreshingQuoteRequestor = RefreshingQuoteRequestor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9xdW90ZVJlcXVlc3Rvci9SZWZyZXNoaW5nUXVvdGVSZXF1ZXN0b3IudHMiLCJtYXBwaW5ncyI6Ijs7O0FBS0EsaURBQWtEO0FBQ2xELGtFQUE2RDtBQUU3RCx5REFBbUQ7QUFDbkQscURBQXdGO0FBRXhGLHdIQUF3SDtBQUN4SCxvREFBb0Q7QUFDcEQsTUFBTSx3QkFBd0IsR0FBRyx5QkFBYSxHQUFHLEVBQUUsQ0FBQztBQUVwRDs7OztHQUlHO0FBQ0gsTUFBYSx3QkFBd0I7SUFHakMsWUFDcUIsZ0JBQWlDLEVBQ2pDLHlCQUF3QyxFQUN4QyxZQUE4RCxFQUM5RCxrQkFBMEIsd0JBQXdCO1FBSGxELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBaUI7UUFDakMsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUFlO1FBQ3hDLGlCQUFZLEdBQVosWUFBWSxDQUFrRDtRQUM5RCxvQkFBZSxHQUFmLGVBQWUsQ0FBbUM7UUFFbkUsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQ0FBYSxDQUFDO1FBQzlCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDcEQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FDcEIsbUNBQWUsQ0FBQyxlQUFlLEVBQy9CLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUM5RCxDQUFDO0lBQ04sQ0FBQztJQUVEOzs7T0FHRztJQUNJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FDekMsVUFBa0IsRUFDbEIsVUFBa0IsRUFDbEIsZUFBMEIsRUFDMUIsZUFBZ0MsRUFDaEMsZUFBc0MsRUFDdEMsT0FBdUI7UUFFdkIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLGdDQUFnQyxDQUN4RCxVQUFVLEVBQ1YsVUFBVSxFQUNWLGVBQWUsRUFDZixlQUFlLEVBQ2YsZUFBZSxFQUNmLE9BQU8sQ0FDVixDQUFDO0lBQ04sQ0FBQztJQUVEOzs7T0FHRztJQUNJLEtBQUssQ0FBQywwQkFBMEIsQ0FDbkMsVUFBa0IsRUFBRSxjQUFjO0lBQ2xDLFVBQWtCLEVBQUUsY0FBYztJQUNsQyxlQUEwQixFQUMxQixlQUFnQyxFQUNoQyxlQUFzQyxFQUN0QyxPQUF1QjtRQUV2QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsMEJBQTBCLENBQ2xELFVBQVUsRUFDVixVQUFVLEVBQ1YsZUFBZSxFQUNmLGVBQWUsRUFDZixlQUFlLEVBQ2YsT0FBTyxDQUNWLENBQUM7SUFDTixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksdUJBQXVCLENBQUMsU0FBb0I7UUFDL0MsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7O09BR0c7SUFDSyxxQkFBcUI7UUFDekIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUMxRSxPQUFPLElBQUksK0JBQWMsQ0FDckIsaUJBQWlCLEVBQ2pCLElBQUksQ0FBQyx5QkFBeUIsRUFDOUIsSUFBSSxDQUFDLFlBQVksRUFDakIsSUFBSSxDQUFDLGVBQWUsRUFDcEIsSUFBSSxDQUFDLFFBQVEsQ0FDaEIsQ0FBQztJQUNOLENBQUM7Q0FDSjtBQW5GRCw0REFtRkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9xdW90ZVJlcXVlc3Rvci9SZWZyZXNoaW5nUXVvdGVSZXF1ZXN0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFya2V0T3BlcmF0aW9uLCBSZnFSZXF1ZXN0T3B0cywgU2lnbmVkTmF0aXZlT3JkZXIgfSBmcm9tICdAMHgvYXNzZXQtc3dhcHBlci9saWIvc3JjL3R5cGVzJztcclxuaW1wb3J0IHsgU2lnbmF0dXJlIH0gZnJvbSAnQDB4L3Byb3RvY29sLXV0aWxzJztcclxuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnQDB4L3V0aWxzJztcclxuaW1wb3J0IHsgQXhpb3NJbnN0YW5jZSB9IGZyb20gJ2F4aW9zJztcclxuXHJcbmltcG9ydCB7IE9ORV9TRUNPTkRfTVMgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cyc7XHJcbmltcG9ydCB7IFJmcU1ha2VyTWFuYWdlciB9IGZyb20gJy4uL3V0aWxzL3JmcV9tYWtlcl9tYW5hZ2VyJztcclxuXHJcbmltcG9ydCB7IE1FVFJJQ1NfUFJPWFkgfSBmcm9tICcuL01ldHJpY3NQcm94eUltcGwnO1xyXG5pbXBvcnQgeyBNZXRyaWNzUHJveHksIFF1b3RlUmVxdWVzdG9yLCBWNFJGUUluZGljYXRpdmVRdW90ZU1NIH0gZnJvbSAnLi9RdW90ZVJlcXVlc3Rvcic7XHJcblxyXG4vLyBUaGlzIG51bWJlciBzaG91bGQgbm90IGJlIGdyZWF0ZXIgdGhhbiA5MHMuIE90aGVyd2lzZSwgdGhlIFJGUXQgcXVvdGVzIGZyb20gSnVtcCBhbmQgV00gYXJlIGxpa2VseSB0byBiZSBmaWx0ZXJlZCBvdXRcclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjdXN0b20tbm8tbWFnaWMtbnVtYmVyc1xyXG5jb25zdCBERUZBVUxUX0VYUElSWV9CVUZGRVJfTVMgPSBPTkVfU0VDT05EX01TICogODA7XHJcblxyXG4vKipcclxuICogQSB3cmFwcGVyIG9mIGBRdW90ZVJlcXVlc3RvcmAgY29uc3RydWN0ZWQgd2l0aCBhbiBpbnN0YW5jZSBvZiBgUmZxTWFrZXJNYW5hZ2VyYFxyXG4gKiBpbnN0ZWFkIG9mIGByZnFBc3NldE9mZmVyaW5nc2AuIFRoaXMgYWxsb3dzIHRoZSB1bmRlcmx5aW5nIFF1b3RlIFJlcXVlc3RvclxyXG4gKiB0byBiZSByZWZyZXNoZWQgd2l0aCB0aGUgcGFpcnMgb2YgUmZxTWFrZXJNYW5hZ2VyIGFyZSByZWZyZXNoZWQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUmVmcmVzaGluZ1F1b3RlUmVxdWVzdG9yIHtcclxuICAgIHByaXZhdGUgX3F1b3RlUmVxdWVzdG9yOiBRdW90ZVJlcXVlc3RvcjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX21ldHJpY3M6IE1ldHJpY3NQcm94eTtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX3JmcU1ha2VyTWFuYWdlcjogUmZxTWFrZXJNYW5hZ2VyLFxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX3F1b3RlUmVxdWVzdG9ySHR0cENsaWVudDogQXhpb3NJbnN0YW5jZSxcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9hbHRSZnFDcmVkcz86IHsgYWx0UmZxQXBpS2V5OiBzdHJpbmc7IGFsdFJmcVByb2ZpbGU6IHN0cmluZyB9LFxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2V4cGlyeUJ1ZmZlck1zOiBudW1iZXIgPSBERUZBVUxUX0VYUElSWV9CVUZGRVJfTVMsXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLl9tZXRyaWNzID0gTUVUUklDU19QUk9YWTtcclxuICAgICAgICB0aGlzLl9xdW90ZVJlcXVlc3RvciA9IHRoaXMuX2NyZWF0ZVF1b3RlUmVxdWVzdG9yKCk7XHJcbiAgICAgICAgdGhpcy5fcmZxTWFrZXJNYW5hZ2VyLm9uKFxyXG4gICAgICAgICAgICBSZnFNYWtlck1hbmFnZXIuUkVGUkVTSEVEX0VWRU5ULFxyXG4gICAgICAgICAgICAoKSA9PiAodGhpcy5fcXVvdGVSZXF1ZXN0b3IgPSB0aGlzLl9jcmVhdGVRdW90ZVJlcXVlc3RvcigpKSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFzc3Rocm91Z2ggdG8gdGhlIGludGVybmFsIGBRdW90ZVJlcXVlc3RvcmAncyBgcmVxdWVzdFJmcXRJbmRpY2F0aXZlUXVvdGVzQXN5bmNgXHJcbiAgICAgKiBtZXRob2QuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhc3luYyByZXF1ZXN0UmZxdEluZGljYXRpdmVRdW90ZXNBc3luYyhcclxuICAgICAgICBtYWtlclRva2VuOiBzdHJpbmcsXHJcbiAgICAgICAgdGFrZXJUb2tlbjogc3RyaW5nLFxyXG4gICAgICAgIGFzc2V0RmlsbEFtb3VudDogQmlnTnVtYmVyLFxyXG4gICAgICAgIG1hcmtldE9wZXJhdGlvbjogTWFya2V0T3BlcmF0aW9uLFxyXG4gICAgICAgIGNvbXBhcmlzb25QcmljZTogQmlnTnVtYmVyIHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIG9wdGlvbnM6IFJmcVJlcXVlc3RPcHRzLFxyXG4gICAgKTogUHJvbWlzZTxWNFJGUUluZGljYXRpdmVRdW90ZU1NW10+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcXVvdGVSZXF1ZXN0b3IucmVxdWVzdFJmcXRJbmRpY2F0aXZlUXVvdGVzQXN5bmMoXHJcbiAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgIHRha2VyVG9rZW4sXHJcbiAgICAgICAgICAgIGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgbWFya2V0T3BlcmF0aW9uLFxyXG4gICAgICAgICAgICBjb21wYXJpc29uUHJpY2UsXHJcbiAgICAgICAgICAgIG9wdGlvbnMsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhc3N0aHJvdWdoIHRvIHRoZSBpbnRlcm5hbCBgUXVvdGVSZXF1ZXN0b3JgJ3MgYHJlcXVlc3RSZnF0RmlybVF1b3Rlc0FzeW5jYFxyXG4gICAgICogbWV0aG9kLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXN5bmMgcmVxdWVzdFJmcXRGaXJtUXVvdGVzQXN5bmMoXHJcbiAgICAgICAgbWFrZXJUb2tlbjogc3RyaW5nLCAvLyBtYWtlciB0b2tlblxyXG4gICAgICAgIHRha2VyVG9rZW46IHN0cmluZywgLy8gdGFrZXIgdG9rZW5cclxuICAgICAgICBhc3NldEZpbGxBbW91bnQ6IEJpZ051bWJlcixcclxuICAgICAgICBtYXJrZXRPcGVyYXRpb246IE1hcmtldE9wZXJhdGlvbixcclxuICAgICAgICBjb21wYXJpc29uUHJpY2U6IEJpZ051bWJlciB8IHVuZGVmaW5lZCxcclxuICAgICAgICBvcHRpb25zOiBSZnFSZXF1ZXN0T3B0cyxcclxuICAgICk6IFByb21pc2U8U2lnbmVkTmF0aXZlT3JkZXJbXT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9xdW90ZVJlcXVlc3Rvci5yZXF1ZXN0UmZxdEZpcm1RdW90ZXNBc3luYyhcclxuICAgICAgICAgICAgbWFrZXJUb2tlbixcclxuICAgICAgICAgICAgdGFrZXJUb2tlbixcclxuICAgICAgICAgICAgYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICBtYXJrZXRPcGVyYXRpb24sXHJcbiAgICAgICAgICAgIGNvbXBhcmlzb25QcmljZSxcclxuICAgICAgICAgICAgb3B0aW9ucyxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFzc3Rocm91Z2ggdG8gdGhlIGludGVybmFsIGBRdW90ZVJlcXVlc3RvcmAncyBgZ2V0TWFrZXJVcmlGb3JTaWduYXR1cmVgXHJcbiAgICAgKiBtZXRob2QuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRNYWtlclVyaUZvclNpZ25hdHVyZShzaWduYXR1cmU6IFNpZ25hdHVyZSk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3F1b3RlUmVxdWVzdG9yLmdldE1ha2VyVXJpRm9yU2lnbmF0dXJlKHNpZ25hdHVyZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVyIGZvciB3aGVuIHRoZSBSRlEgTWFrZXIgTWFuYWdlciBlbWl0cyBhIHBhaXJzIHJlZnJlc2hlZCBldmVudC5cclxuICAgICAqIENyZWF0ZXMgYSBuZXcgYFF1b3RlUmVxdWVzdG9yYCBpbnN0YW5jZSB3aXRoIG5ldyBwYWlycy5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfY3JlYXRlUXVvdGVSZXF1ZXN0b3IoKTogUXVvdGVSZXF1ZXN0b3Ige1xyXG4gICAgICAgIGNvbnN0IHJmcUFzc2V0T2ZmZXJpbmdzID0gdGhpcy5fcmZxTWFrZXJNYW5hZ2VyLmdldFJmcXRWMU1ha2VyT2ZmZXJpbmdzKCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBRdW90ZVJlcXVlc3RvcihcclxuICAgICAgICAgICAgcmZxQXNzZXRPZmZlcmluZ3MsXHJcbiAgICAgICAgICAgIHRoaXMuX3F1b3RlUmVxdWVzdG9ySHR0cENsaWVudCxcclxuICAgICAgICAgICAgdGhpcy5fYWx0UmZxQ3JlZHMsXHJcbiAgICAgICAgICAgIHRoaXMuX2V4cGlyeUJ1ZmZlck1zLFxyXG4gICAgICAgICAgICB0aGlzLl9tZXRyaWNzLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIl0sInZlcnNpb24iOjN9