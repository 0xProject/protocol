bcef6bd02bb43ff96c4f97c060ff2a5b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqMakerBalanceCacheService = void 0;
const utils_1 = require("@0x/utils");
const prom_client_1 = require("prom-client");
const logger_1 = require("../logger");
const RFQ_BALANCE_CACHE_CHECKED = new prom_client_1.Counter({
    name: 'rfq_balance_cache_checked',
    help: 'Number of times we checked balance cache',
});
const RFQ_BALANCE_CACHE_MISS = new prom_client_1.Counter({
    name: 'rfq_balance_cache_missed',
    help: 'cache miss observed in balance cache',
});
const RFQ_BALANCE_CACHE_READ_LATENCY = new prom_client_1.Summary({
    name: 'rfq_balance_cache_read_latency',
    help: 'Read latency for balance cache',
});
const RFQ_BALANCE_CACHE_WRITE_LATENCY = new prom_client_1.Summary({
    name: 'rfq_balance_cache_write_latency',
    help: 'Write latency for balance cache',
});
const RFQ_BALANCE_CACHE_EVICT_LATENCY = new prom_client_1.Summary({
    name: 'rfq_balance_cache_evict_latency',
    help: 'Evict latency for balance cache',
});
const RFQ_BALANCE_CACHE_NUM_ADDRESSES = new prom_client_1.Gauge({
    name: 'rfq_balance_cache_num_addresses',
    help: 'Number of unique addresses in balance cache',
});
/**
 * RfqMakerBalanceCacheService is used by RfqmService to fetch maker token balances.
 * It maintains a balance cache that is periodically updated via on-chain balance checks.
 */
class RfqMakerBalanceCacheService {
    constructor(_cacheClient, _balanceCheckUtils) {
        this._cacheClient = _cacheClient;
        this._balanceCheckUtils = _balanceCheckUtils;
    }
    /**
     * Gets token balances for supplied maker and token addresses from the maker balance cache.
     * Performs a balance check if balances are not found in the cache.
     * Returns an array of balances ordered by corresponding erc20Owner objects.
     */
    async getERC20OwnerBalancesAsync(chainId, erc20Owners) {
        const timerStopFunction = RFQ_BALANCE_CACHE_READ_LATENCY.startTimer();
        const erc20OwnersArr = Array.isArray(erc20Owners) ? erc20Owners : [erc20Owners];
        let cachedBalances;
        try {
            RFQ_BALANCE_CACHE_CHECKED.inc(erc20OwnersArr.length);
            cachedBalances = await this._cacheClient.getERC20OwnerBalancesAsync(chainId, erc20OwnersArr);
        }
        catch (e) {
            timerStopFunction();
            logger_1.logger.error({ chainId, erc20Owners }, 'Failed to read entries from maker balance cache');
            throw e;
        }
        // On cache miss (i.e. if balance is null), add to pending maker token addresses
        const pendingIndices = [];
        await Promise.all(cachedBalances.map(async (balance, i) => {
            if (balance === null) {
                RFQ_BALANCE_CACHE_MISS.inc();
                await this._cacheClient.addERC20OwnerAsync(chainId, erc20OwnersArr[i]);
                pendingIndices.push(i);
            }
        }));
        // Perform balance check and update balances accordingly
        // At this point, remaining null balances will be represented as zero balances
        // and will be subject to eviction.
        let balances;
        if (pendingIndices.length !== 0) {
            const fetchedBalances = await this._balanceCheckUtils.getMinOfBalancesAndAllowancesAsync(erc20OwnersArr.filter((_, i) => pendingIndices.includes(i)));
            balances = cachedBalances.map((balance) => {
                if (balance === null) {
                    const fetchedBalance = fetchedBalances.shift();
                    return fetchedBalance ? fetchedBalance : new utils_1.BigNumber(0);
                }
                // balance should be a valid BigNumber at this point
                return balance;
            });
        }
        else {
            // balances should not be null here
            balances = cachedBalances.filter((balance) => balance !== null);
        }
        timerStopFunction();
        return balances;
    }
    /**
     * Updates cached token balances by making an on-chain balance check.
     * All newly observed erc20Owners included in the set of maintained maker token addresses are updated.
     */
    async updateERC20OwnerBalancesAsync(chainId) {
        const timerStopFunction = RFQ_BALANCE_CACHE_WRITE_LATENCY.startTimer();
        try {
            const erc20Owners = await this._cacheClient.getERC20OwnersAsync(chainId);
            if (erc20Owners.length > 0) {
                RFQ_BALANCE_CACHE_NUM_ADDRESSES.set(erc20Owners.length);
                const balances = await this._balanceCheckUtils.getMinOfBalancesAndAllowancesAsync(erc20Owners);
                await this._cacheClient.setERC20OwnerBalancesAsync(chainId, erc20Owners, balances);
            }
        }
        catch (e) {
            logger_1.logger.error({ chainId }, 'Failed to update entries for maker balance cache');
            throw e;
        }
        finally {
            timerStopFunction();
        }
    }
    /**
     * Performs eviction of stale cache entries with zero balances.
     */
    async evictZeroBalancesAsync(chainId) {
        const timerStopFunction = RFQ_BALANCE_CACHE_EVICT_LATENCY.startTimer();
        try {
            return this._cacheClient.evictZeroBalancesAsync(chainId);
        }
        catch (e) {
            logger_1.logger.error({ chainId }, 'Failed to evict entries from maker balance cache');
            throw e;
        }
        finally {
            timerStopFunction();
        }
    }
    /**
     * Safely close the maker balance cache service to avoid potential memory leak.
     */
    async closeAsync() {
        try {
            return this._cacheClient.closeAsync();
        }
        catch (e) {
            logger_1.logger.error({ message: e.message, stack: e.stack }, 'Failed to close RFQm maker balance cache service');
            throw e;
        }
    }
}
exports.RfqMakerBalanceCacheService = RfqMakerBalanceCacheService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,