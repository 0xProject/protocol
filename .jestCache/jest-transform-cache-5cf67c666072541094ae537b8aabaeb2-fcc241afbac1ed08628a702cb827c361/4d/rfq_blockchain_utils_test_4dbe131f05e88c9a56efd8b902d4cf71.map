{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/rfq_blockchain_utils_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/rfq_blockchain_utils_test.ts"],"sourcesContent":["// tslint:disable custom-no-magic-numbers\r\n// tslint:disable await-promise\r\n// tslint:disable max-file-line-count\r\nimport { artifacts as assetSwapperArtifacts, BalanceCheckerContract } from '@0x/asset-swapper';\r\nimport { ChainId } from '@0x/contract-addresses';\r\nimport { artifacts as erc20Artifacts, DummyERC20TokenContract } from '@0x/contracts-erc20';\r\nimport { artifacts as zeroExArtifacts, fullMigrateAsync, IZeroExContract } from '@0x/contracts-zero-ex';\r\nimport { Web3ProviderEngine } from '@0x/dev-utils';\r\nimport { ethSignHashWithProviderAsync, OtcOrder, RfqOrder, Signature } from '@0x/protocol-utils';\r\nimport { BigNumber } from '@0x/utils';\r\nimport { TxData, Web3Wrapper } from '@0x/web3-wrapper';\r\nimport { expect } from 'chai';\r\nimport { Contract, providers, Wallet } from 'ethers';\r\n\r\nimport { ONE_MINUTE_MS, ZERO } from '../src/core/constants';\r\nimport { BalanceChecker } from '../src/utils/balance_checker';\r\nimport { RfqBlockchainUtils } from '../src/utils/rfq_blockchain_utils';\r\n\r\nimport {\r\n    getProvider,\r\n    MATCHA_AFFILIATE_ADDRESS,\r\n    MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\r\n    MOCK_EXECUTE_META_TRANSACTION_CALLDATA,\r\n    MOCK_PERMIT_APPROVAL,\r\n    MOCK_PERMIT_CALLDATA,\r\n    TEST_RFQ_ORDER_FILLED_EVENT_LOG,\r\n    TEST_RFQ_ORDER_FILLED_EVENT_TAKER_AMOUNT,\r\n    WORKER_TEST_PRIVATE_KEY,\r\n} from './constants';\r\nimport { setupDependenciesAsync, TeardownDependenciesFunctionHandle } from './test_utils/deployment';\r\n\r\nconst GAS_PRICE = 1e9;\r\nconst VALID_EXPIRY = new BigNumber(9000000000);\r\nconst CHAIN_ID = ChainId.Ganache;\r\n\r\njest.setTimeout(ONE_MINUTE_MS * 2);\r\nlet teardownDependencies: TeardownDependenciesFunctionHandle;\r\n\r\ndescribe('RFQ Blockchain Utils', () => {\r\n    let provider: Web3ProviderEngine;\r\n    let makerToken: DummyERC20TokenContract;\r\n    let takerToken: DummyERC20TokenContract;\r\n    let makerAmount: BigNumber;\r\n    let takerAmount: BigNumber;\r\n    let invalidTakerAmount: BigNumber;\r\n    let makerBalance: BigNumber;\r\n    let takerBalance: BigNumber;\r\n    let web3Wrapper: Web3Wrapper;\r\n    let owner: string;\r\n    let maker: string;\r\n    let taker: string;\r\n    let signer: string;\r\n    let txOrigin: string;\r\n    let zeroEx: IZeroExContract;\r\n    let rfqOrder: RfqOrder;\r\n    let otcOrder: OtcOrder;\r\n    let unfillableRfqOrder: RfqOrder;\r\n    let rfqBlockchainUtils: RfqBlockchainUtils;\r\n    let orderSig: Signature;\r\n    let sigForUnfillableOrder: Signature;\r\n    let makerOtcOrderSig: Signature;\r\n    let takerOtcOrderSig: Signature;\r\n\r\n    beforeAll(async () => {\r\n        teardownDependencies = await setupDependenciesAsync(['ganache']);\r\n        provider = getProvider();\r\n        web3Wrapper = new Web3Wrapper(provider);\r\n\r\n        [owner, maker, taker, txOrigin, signer] = await web3Wrapper.getAvailableAddressesAsync();\r\n\r\n        // Deploy dummy tokens\r\n        makerToken = await DummyERC20TokenContract.deployFrom0xArtifactAsync(\r\n            erc20Artifacts.DummyERC20Token,\r\n            provider,\r\n            { from: maker, gas: 10000000 },\r\n            {},\r\n            'The token that originally belongs to the maker',\r\n            'makerToken',\r\n            new BigNumber(18),\r\n            new BigNumber(0),\r\n        );\r\n\r\n        takerToken = await DummyERC20TokenContract.deployFrom0xArtifactAsync(\r\n            erc20Artifacts.DummyERC20Token,\r\n            provider,\r\n            { from: taker, gas: 10000000 },\r\n            {},\r\n            'The token that originally belongs to the maker',\r\n            'takerToken',\r\n            new BigNumber(18),\r\n            new BigNumber(0),\r\n        );\r\n\r\n        // Deploy Balance Checker (only necessary for Ganache because ganache doesn't have overrides)\r\n        const balanceCheckerContract = await BalanceCheckerContract.deployFrom0xArtifactAsync(\r\n            assetSwapperArtifacts.BalanceChecker,\r\n            provider,\r\n            { from: owner, gas: 10000000 },\r\n            {},\r\n        );\r\n        const balanceChecker = new BalanceChecker(provider, balanceCheckerContract);\r\n\r\n        makerAmount = new BigNumber(100);\r\n        takerAmount = new BigNumber(50);\r\n        invalidTakerAmount = new BigNumber(10000000);\r\n\r\n        // Deploy ZeroEx to Ganache\r\n        zeroEx = await fullMigrateAsync(\r\n            owner,\r\n            provider,\r\n            { from: owner, gasPrice: GAS_PRICE },\r\n            {},\r\n            { protocolFeeMultiplier: Number(0) },\r\n            {\r\n                nativeOrders: zeroExArtifacts.NativeOrdersFeature,\r\n                metaTransactions: zeroExArtifacts.MetaTransactionsFeature,\r\n            },\r\n        );\r\n\r\n        // Prepare an RfqOrder\r\n        rfqOrder = new RfqOrder({\r\n            makerToken: makerToken.address,\r\n            takerToken: takerToken.address,\r\n            makerAmount,\r\n            takerAmount,\r\n            maker,\r\n            taker,\r\n            txOrigin,\r\n            expiry: VALID_EXPIRY,\r\n            salt: new BigNumber(1),\r\n            verifyingContract: zeroEx.address,\r\n            chainId: CHAIN_ID,\r\n        });\r\n        orderSig = await rfqOrder.getSignatureWithProviderAsync(provider);\r\n\r\n        // Prepare an Unfillable RfqOrder\r\n        unfillableRfqOrder = new RfqOrder({\r\n            makerToken: makerToken.address,\r\n            takerToken: takerToken.address,\r\n            makerAmount,\r\n            takerAmount: invalidTakerAmount,\r\n            maker,\r\n            taker,\r\n            txOrigin,\r\n            expiry: VALID_EXPIRY,\r\n            salt: new BigNumber(1),\r\n            verifyingContract: zeroEx.address,\r\n            chainId: CHAIN_ID,\r\n        });\r\n        sigForUnfillableOrder = await unfillableRfqOrder.getSignatureWithProviderAsync(provider);\r\n\r\n        // Prepare an OtcOrder and valid signatures\r\n        otcOrder = new OtcOrder({\r\n            maker,\r\n            taker,\r\n            makerAmount,\r\n            takerAmount,\r\n            makerToken: makerToken.address,\r\n            takerToken: takerToken.address,\r\n            txOrigin,\r\n            expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                new BigNumber(VALID_EXPIRY),\r\n                ZERO,\r\n                new BigNumber(VALID_EXPIRY),\r\n            ),\r\n            chainId: CHAIN_ID,\r\n            verifyingContract: zeroEx.address,\r\n        });\r\n        const orderHash = otcOrder.getHash();\r\n        makerOtcOrderSig = await ethSignHashWithProviderAsync(orderHash, maker, provider);\r\n        takerOtcOrderSig = await ethSignHashWithProviderAsync(orderHash, taker, provider);\r\n\r\n        // Mint enough tokens for a few trades\r\n        const numTrades = 2;\r\n        makerBalance = makerAmount.times(numTrades);\r\n        takerBalance = takerAmount.times(numTrades);\r\n\r\n        await makerToken.mint(makerBalance).awaitTransactionSuccessAsync({ from: maker });\r\n        await makerToken.approve(zeroEx.address, makerBalance.times(2)).awaitTransactionSuccessAsync({ from: maker });\r\n        await takerToken.mint(takerBalance).awaitTransactionSuccessAsync({ from: taker });\r\n        await takerToken.approve(zeroEx.address, takerBalance.times(2)).awaitTransactionSuccessAsync({ from: taker });\r\n\r\n        const ethersProvider = new providers.JsonRpcProvider();\r\n        const ethersWallet = new Wallet(WORKER_TEST_PRIVATE_KEY, ethersProvider);\r\n\r\n        rfqBlockchainUtils = new RfqBlockchainUtils(\r\n            provider,\r\n            zeroEx.address,\r\n            balanceChecker,\r\n            ethersProvider,\r\n            ethersWallet,\r\n        );\r\n    });\r\n\r\n    afterAll(async () => {\r\n        if (!teardownDependencies()) {\r\n            throw new Error('Failed to tear down dependencies');\r\n        }\r\n    });\r\n\r\n    describe('getMinOfBalancesAndAllowancesAsync', () => {\r\n        it('should fetch min of token balances and allowances', async () => {\r\n            const addresses = [\r\n                { owner: maker, token: makerToken.address },\r\n                { owner: maker, token: takerToken.address },\r\n                { owner: taker, token: makerToken.address },\r\n                { owner: taker, token: takerToken.address },\r\n            ];\r\n            const res = await rfqBlockchainUtils.getMinOfBalancesAndAllowancesAsync(addresses);\r\n            expect(res).to.deep.eq([makerBalance, ZERO, ZERO, takerBalance]);\r\n        });\r\n    });\r\n\r\n    describe('getTokenBalancesAsync', () => {\r\n        it('should fetch token balances', async () => {\r\n            const addresses = [\r\n                { owner: maker, token: makerToken.address },\r\n                { owner: maker, token: takerToken.address },\r\n                { owner: taker, token: makerToken.address },\r\n                { owner: taker, token: takerToken.address },\r\n            ];\r\n            const res = await rfqBlockchainUtils.getTokenBalancesAsync(addresses);\r\n            expect(res).to.deep.eq([makerBalance, ZERO, ZERO, takerBalance]);\r\n        });\r\n    });\r\n\r\n    describe('OtcOrder', () => {\r\n        describe('estimateGasForFillTakerSignedOtcOrderAsync', () => {\r\n            it('does not throw an error on valid order', async () => {\r\n                try {\r\n                    const gasEstimate = await rfqBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync(\r\n                        otcOrder,\r\n                        makerOtcOrderSig,\r\n                        takerOtcOrderSig,\r\n                        txOrigin,\r\n                        false,\r\n                    );\r\n                    expect(gasEstimate).to.be.greaterThan(0);\r\n                } catch (err) {\r\n                    expect.fail('should not throw');\r\n                }\r\n            });\r\n\r\n            it('throws an error if order is invalid', async () => {\r\n                const invalidOtcOrder = new OtcOrder({\r\n                    maker,\r\n                    taker,\r\n                    makerAmount,\r\n                    takerAmount,\r\n                    makerToken: makerToken.address,\r\n                    takerToken: takerToken.address,\r\n                    txOrigin,\r\n                    expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                        ZERO, // expired\r\n                        ZERO,\r\n                        VALID_EXPIRY,\r\n                    ),\r\n                    chainId: CHAIN_ID,\r\n                    verifyingContract: zeroEx.address,\r\n                });\r\n                const orderHash = invalidOtcOrder.getHash();\r\n\r\n                const makerSig = await ethSignHashWithProviderAsync(orderHash, maker, provider);\r\n                const takerSig = await ethSignHashWithProviderAsync(orderHash, taker, provider);\r\n\r\n                expect(\r\n                    rfqBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync(\r\n                        invalidOtcOrder, // invalid order, should be expired\r\n                        makerSig,\r\n                        takerSig,\r\n                        txOrigin,\r\n                        false,\r\n                    ),\r\n                ).to.eventually.be.rejectedWith(/revert/);\r\n            });\r\n\r\n            it('throws an error if signatures invalid', async () => {\r\n                expect(\r\n                    rfqBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync(\r\n                        otcOrder,\r\n                        makerOtcOrderSig,\r\n                        makerOtcOrderSig, // wrong signature\r\n                        txOrigin,\r\n                        false,\r\n                    ),\r\n                ).to.eventually.be.rejectedWith('revert');\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('validateMetaTransaction', () => {\r\n        it('returns successful filled amounts for a valid metatransaction', async () => {\r\n            const metaTx = rfqBlockchainUtils.generateMetaTransaction(rfqOrder, orderSig, taker, takerAmount, CHAIN_ID);\r\n            const metaTxSig = await metaTx.getSignatureWithProviderAsync(provider);\r\n            const res = await rfqBlockchainUtils.validateMetaTransactionOrThrowAsync(metaTx, metaTxSig, txOrigin);\r\n\r\n            expect(res[0]).to.deep.equal(takerAmount);\r\n            expect(res[1]).to.deep.equal(makerAmount);\r\n        });\r\n\r\n        it('throws for a metatransaction with an invalid signature', async () => {\r\n            const metaTx = rfqBlockchainUtils.generateMetaTransaction(rfqOrder, orderSig, taker, takerAmount, CHAIN_ID);\r\n            const invalidMetaTxSig = orderSig;\r\n\r\n            expect(\r\n                rfqBlockchainUtils.validateMetaTransactionOrThrowAsync(metaTx, invalidMetaTxSig, txOrigin),\r\n            ).to.eventually.be.rejectedWith('SignatureValidationError');\r\n        });\r\n\r\n        it('throws for a metatransaction with an unfillable order', async () => {\r\n            const metaTx = rfqBlockchainUtils.generateMetaTransaction(\r\n                unfillableRfqOrder,\r\n                sigForUnfillableOrder,\r\n                taker,\r\n                invalidTakerAmount,\r\n                CHAIN_ID,\r\n            );\r\n            const metaTxSig = await metaTx.getSignatureWithProviderAsync(provider);\r\n\r\n            expect(\r\n                rfqBlockchainUtils.validateMetaTransactionOrThrowAsync(metaTx, metaTxSig, txOrigin),\r\n            ).to.eventually.be.rejectedWith('MetaTransactionCallFailedError');\r\n        });\r\n\r\n        it('returns successful filled amounts for a valid metatransaction when validating calldata', async () => {\r\n            const metaTx = rfqBlockchainUtils.generateMetaTransaction(rfqOrder, orderSig, taker, takerAmount, CHAIN_ID);\r\n            const metaTxSig = await metaTx.getSignatureWithProviderAsync(provider);\r\n\r\n            const callData = rfqBlockchainUtils.generateMetaTransactionCallData(\r\n                metaTx,\r\n                metaTxSig,\r\n                MATCHA_AFFILIATE_ADDRESS,\r\n            );\r\n            const res = await rfqBlockchainUtils.decodeMetaTransactionCallDataAndValidateAsync(callData, txOrigin);\r\n\r\n            expect(res[0]).to.deep.equal(takerAmount);\r\n            expect(res[1]).to.deep.equal(makerAmount);\r\n        });\r\n        it('throws for a metatransaction with an invalid signature when validating calldata', async () => {\r\n            const metaTx = rfqBlockchainUtils.generateMetaTransaction(rfqOrder, orderSig, taker, takerAmount, CHAIN_ID);\r\n            const invalidMetaTxSig = orderSig;\r\n\r\n            const callData = rfqBlockchainUtils.generateMetaTransactionCallData(\r\n                metaTx,\r\n                invalidMetaTxSig,\r\n                MATCHA_AFFILIATE_ADDRESS,\r\n            );\r\n\r\n            expect(\r\n                rfqBlockchainUtils.decodeMetaTransactionCallDataAndValidateAsync(callData, txOrigin),\r\n            ).to.eventually.be.rejectedWith('SignatureValidationError');\r\n        });\r\n\r\n        it('throws for a metatransaction with an unfillable order when validating calldata', async () => {\r\n            const metaTx = rfqBlockchainUtils.generateMetaTransaction(\r\n                unfillableRfqOrder,\r\n                sigForUnfillableOrder,\r\n                taker,\r\n                invalidTakerAmount,\r\n                CHAIN_ID,\r\n            );\r\n            const metaTxSig = await metaTx.getSignatureWithProviderAsync(provider);\r\n\r\n            const callData = rfqBlockchainUtils.generateMetaTransactionCallData(\r\n                metaTx,\r\n                metaTxSig,\r\n                MATCHA_AFFILIATE_ADDRESS,\r\n            );\r\n\r\n            expect(\r\n                rfqBlockchainUtils.decodeMetaTransactionCallDataAndValidateAsync(callData, txOrigin),\r\n            ).to.eventually.be.rejectedWith('MetaTransactionCallFailedError');\r\n        });\r\n\r\n        it('should throw for a partially filled order', async () => {\r\n            const metaTx1 = rfqBlockchainUtils.generateMetaTransaction(\r\n                rfqOrder,\r\n                orderSig,\r\n                taker,\r\n                takerAmount.div(2),\r\n                CHAIN_ID,\r\n            );\r\n            const metaTxSig1 = await metaTx1.getSignatureWithProviderAsync(provider);\r\n\r\n            await zeroEx.executeMetaTransaction(metaTx1, metaTxSig1).awaitTransactionSuccessAsync({ from: txOrigin });\r\n\r\n            const metaTx2 = rfqBlockchainUtils.generateMetaTransaction(\r\n                rfqOrder,\r\n                orderSig,\r\n                taker,\r\n                takerAmount,\r\n                CHAIN_ID,\r\n            );\r\n            const metaTxSig2 = await metaTx2.getSignatureWithProviderAsync(provider);\r\n\r\n            expect(\r\n                rfqBlockchainUtils.validateMetaTransactionOrThrowAsync(metaTx2, metaTxSig2, txOrigin),\r\n            ).to.eventually.be.rejectedWith('filled amount is less than requested fill amount');\r\n        });\r\n    });\r\n\r\n    describe('transformTxDataToTransactionRequest', () => {\r\n        it('creates a TransactionRequest', () => {\r\n            const txOptions: TxData = {\r\n                from: '0xfromaddress',\r\n                gas: new BigNumber(210000000),\r\n                maxFeePerGas: new BigNumber(200000),\r\n                maxPriorityFeePerGas: new BigNumber(100000),\r\n                nonce: 21,\r\n                to: '0xtoaddress',\r\n                value: 0,\r\n            };\r\n\r\n            const result = rfqBlockchainUtils.transformTxDataToTransactionRequest(\r\n                txOptions,\r\n                /* chainId = */ 1337,\r\n                /* callData */ '0x01234',\r\n            );\r\n\r\n            expect(result.from).to.equal('0xfromaddress');\r\n            expect(result.gasLimit).to.equal(BigInt(210000000));\r\n            expect(result.maxFeePerGas).to.equal(BigInt(200000));\r\n            expect(result.maxPriorityFeePerGas).to.equal(BigInt(100000));\r\n            expect(result.nonce).to.equal(21);\r\n            expect(result.to).to.equal('0xtoaddress');\r\n            expect(result.value).to.equal(0);\r\n        });\r\n\r\n        it(\"uses the proxy address if no 'to' address is provided\", () => {\r\n            const txOptions: TxData = { from: '0xfromaddress' };\r\n\r\n            const result = rfqBlockchainUtils.transformTxDataToTransactionRequest(txOptions);\r\n\r\n            expect(result.to).to.equal(zeroEx.address);\r\n        });\r\n    });\r\n\r\n    describe('getDecodedRfqOrderFillEventLogFromLogs', () => {\r\n        it('correctly parses an RfqOrderFillEvent from logs', async () => {\r\n            const rfqOrderFilledEvent = rfqBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs([\r\n                TEST_RFQ_ORDER_FILLED_EVENT_LOG,\r\n            ]);\r\n\r\n            expect(rfqOrderFilledEvent.args.takerTokenFilledAmount).to.deep.eq(\r\n                TEST_RFQ_ORDER_FILLED_EVENT_TAKER_AMOUNT,\r\n            );\r\n            expect(rfqOrderFilledEvent.blockNumber).to.deep.eq(TEST_RFQ_ORDER_FILLED_EVENT_LOG.blockNumber);\r\n        });\r\n    });\r\n\r\n    describe('getTokenDecimalsAsync', () => {\r\n        it('gets the token decimals', async () => {\r\n            const decimals = await rfqBlockchainUtils.getTokenDecimalsAsync(makerToken.address);\r\n\r\n            expect(decimals).to.equal(18);\r\n        });\r\n\r\n        it('throws if the contract does not exist', () => {\r\n            // tslint:disable-next-line: no-unused-expression no-unbound-method\r\n            expect(rfqBlockchainUtils.getTokenDecimalsAsync('0x29D7d1dd5B6f9C864d9db560D72a247c178aE86B')).to.be\r\n                .rejected;\r\n        });\r\n    });\r\n\r\n    describe('isValidOrderSigner', () => {\r\n        it('returns false if signer is not valid', async () => {\r\n            const isValidOrderSigner = await rfqBlockchainUtils.isValidOrderSignerAsync(maker, signer);\r\n            expect(isValidOrderSigner).to.equal(false);\r\n        });\r\n\r\n        it('returns true when valid signer address is passed', async () => {\r\n            await rfqBlockchainUtils.registerAllowedOrderSignerAsync(maker, signer, true);\r\n\r\n            const isValidOrderSigner = await rfqBlockchainUtils.isValidOrderSignerAsync(maker, signer);\r\n            expect(isValidOrderSigner).to.equal(true);\r\n        });\r\n    });\r\n\r\n    describe('generateApprovalCalldataAsync', () => {\r\n        it('generates executeMetaTransaction calldata', async () => {\r\n            const token = makerToken.address;\r\n            const approval = MOCK_EXECUTE_META_TRANSACTION_APPROVAL;\r\n            const signature: Signature = {\r\n                r: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n                s: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n                v: 28,\r\n                signatureType: 2,\r\n            };\r\n            const calldata = await rfqBlockchainUtils.generateApprovalCalldataAsync(token, approval, signature);\r\n            expect(calldata).to.eq(MOCK_EXECUTE_META_TRANSACTION_CALLDATA);\r\n        });\r\n\r\n        it('generates permit calldata', async () => {\r\n            const token = makerToken.address;\r\n            const approval = MOCK_PERMIT_APPROVAL;\r\n            const signature: Signature = {\r\n                r: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n                s: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n                v: 28,\r\n                signatureType: 2,\r\n            };\r\n            const calldata = await rfqBlockchainUtils.generateApprovalCalldataAsync(token, approval, signature);\r\n            expect(calldata).to.eq(MOCK_PERMIT_CALLDATA);\r\n        });\r\n    });\r\n\r\n    describe('estimateGasForAsync', () => {\r\n        it('throws exception on invalid calldata', async () => {\r\n            const erc20AbiDecimals = `[{\r\n                \"constant\": true,\r\n                \"inputs\": [],\r\n                \"name\": \"decimals\",\r\n                \"outputs\": [\r\n                    {\r\n                        \"name\": \"\",\r\n                        \"type\": \"uint8\"\r\n                    }\r\n                ],\r\n                \"payable\": false,\r\n                \"stateMutability\": \"view\",\r\n                \"type\": \"function\"\r\n            }]`;\r\n            const erc20 = new Contract(takerToken.address, erc20AbiDecimals);\r\n            const { data: calldata } = await erc20.populateTransaction.decimals();\r\n            if (!calldata) {\r\n                throw new Error('calldata for decimals should not be undefined or empty');\r\n            }\r\n            const invalidCalldata = `${calldata.substring(0, calldata.length - 1)}0`;\r\n\r\n            try {\r\n                await rfqBlockchainUtils.estimateGasForAsync({ to: takerToken.address, data: invalidCalldata });\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('estimateGasForAsync');\r\n            }\r\n        });\r\n\r\n        it('successfully estimates gas', async () => {\r\n            const erc20AbiDecimals = `[{\r\n                \"constant\": true,\r\n                \"inputs\": [],\r\n                \"name\": \"decimals\",\r\n                \"outputs\": [\r\n                    {\r\n                        \"name\": \"\",\r\n                        \"type\": \"uint8\"\r\n                    }\r\n                ],\r\n                \"payable\": false,\r\n                \"stateMutability\": \"view\",\r\n                \"type\": \"function\"\r\n            }]`;\r\n            const erc20 = new Contract(takerToken.address, erc20AbiDecimals);\r\n            const { data: calldata } = await erc20.populateTransaction.decimals();\r\n            if (!calldata) {\r\n                throw new Error('calldata for decimals should not be undefined or empty');\r\n            }\r\n\r\n            await rfqBlockchainUtils.estimateGasForAsync({ to: takerToken.address, data: calldata });\r\n        });\r\n    });\r\n});\r\n"],"version":3}