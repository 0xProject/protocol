07dfcf54c62414adf1107f51ffd480ca
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqmHandlers = void 0;
// tslint:disable:max-file-line-count
const api_utils_1 = require("@0x/api-utils");
const protocol_utils_1 = require("@0x/protocol-utils");
const token_metadata_1 = require("@0x/token-metadata");
const utils_1 = require("@0x/utils");
const HttpStatus = require("http-status-codes");
const prom_client_1 = require("prom-client");
const schemas_1 = require("../core/schemas");
const types_1 = require("../core/types");
const rfqm_health_check_1 = require("../utils/rfqm_health_check");
const rfqm_request_utils_1 = require("../utils/rfqm_request_utils");
const schema_utils_1 = require("../core/schema_utils");
const RFQM_INDICATIVE_QUOTE_REQUEST = new prom_client_1.Counter({
    name: 'rfqm_handler_indicative_quote_requested',
    help: 'Request made to fetch rfqm indicative quote',
    labelNames: ['integratorLabel', 'chainId'],
});
const RFQM_INDICATIVE_QUOTE_NOT_FOUND = new prom_client_1.Counter({
    name: 'rfqm_handler_indicative_quote_not_found',
    help: 'Request to fetch rfqm indicative quote returned no quote',
    labelNames: ['integratorLabel', 'chainId'],
});
const RFQM_INDICATIVE_QUOTE_ERROR = new prom_client_1.Counter({
    name: 'rfqm_handler_indicative_quote_error',
    help: 'Request to fetch rfqm indicative quote resulted in error',
    labelNames: ['integratorLabel', 'chainId'],
});
const RFQM_FIRM_QUOTE_REQUEST = new prom_client_1.Counter({
    name: 'rfqm_handler_firm_quote_requested',
    help: 'Request made to fetch rfqm firm quote',
    labelNames: ['integratorLabel', 'chainId'],
});
const RFQM_FIRM_QUOTE_NOT_FOUND = new prom_client_1.Counter({
    name: 'rfqm_handler_firm_quote_not_found',
    help: 'Request to fetch rfqm firm quote returned no quote',
    labelNames: ['integratorLabel', 'chainId'],
});
const RFQM_FIRM_QUOTE_ERROR = new prom_client_1.Counter({
    name: 'rfqm_handler_firm_quote_error',
    help: 'Request to fetch rfqm firm quote resulted in error',
    labelNames: ['integratorLabel', 'chainId'],
});
const RFQM_SIGNED_QUOTE_SUBMITTED = new prom_client_1.Counter({
    name: 'rfqm_handler_signed_quote_submitted',
    help: 'Request received to submit a signed rfqm quote',
    labelNames: ['integratorLabel', 'chainId'],
});
// If the cache is more milliseconds old than the value specified here, it will be refreshed.
const HEALTH_CHECK_RESULT_CACHE_DURATION_MS = 30000;
class RfqmHandlers {
    constructor(_rfqmServices, _configManager) {
        this._rfqmServices = _rfqmServices;
        this._configManager = _configManager;
        this._cachedHealthCheckResultByChainId = new Map();
    }
    async getIndicativeQuoteAsync(req, res) {
        // Parse request
        const { chainId, params } = await this._parseFetchIndicativeQuoteParamsAsync(req);
        // NOTE: not all requests are emitted if they fail parsing
        RFQM_INDICATIVE_QUOTE_REQUEST.inc({
            integratorLabel: params.integrator.label,
            chainId,
        });
        // Try to get indicative quote
        let indicativeQuote;
        try {
            indicativeQuote = await this._getServiceForChain(chainId).fetchIndicativeQuoteAsync(params);
        }
        catch (e) {
            req.log.error(e, 'Encountered an error while fetching an rfqm indicative quote');
            RFQM_INDICATIVE_QUOTE_ERROR.inc({
                integratorLabel: params.integrator.label,
                chainId,
            });
            throw e;
        }
        // Log no quote returned
        if (indicativeQuote === null) {
            RFQM_INDICATIVE_QUOTE_NOT_FOUND.inc({
                integratorLabel: params.integrator.label,
                chainId,
            });
        }
        // Result
        res.status(HttpStatus.OK).send({
            liquidityAvailable: indicativeQuote !== null,
            ...indicativeQuote,
        });
    }
    async getFirmQuoteAsync(req, res) {
        // Parse request
        const { chainId, params } = await this._parseFetchFirmQuoteParamsAsync(req);
        // NOTE: not all requests are emitted if they fail parsing
        RFQM_FIRM_QUOTE_REQUEST.inc({
            integratorLabel: params.integrator.label,
            chainId,
        });
        // Try to get firm quote
        let firmQuote;
        try {
            const result = await this._getServiceForChain(chainId).fetchFirmQuoteAsync(params);
            firmQuote = result.quote;
        }
        catch (e) {
            req.log.error(e, 'Encountered an error while fetching an rfqm firm quote');
            RFQM_FIRM_QUOTE_ERROR.inc({
                integratorLabel: params.integrator.label,
                chainId,
            });
            throw e;
        }
        // Log no quote returned
        if (firmQuote === null) {
            RFQM_FIRM_QUOTE_NOT_FOUND.inc({
                integratorLabel: params.integrator.label,
                chainId,
            });
        }
        // Result
        res.status(HttpStatus.OK).send({
            liquidityAvailable: firmQuote !== null,
            ...firmQuote,
        });
    }
    /**
     * Handler for the `/rfqm/v1/healthz` endpoint.
     */
    async getHealthAsync(req, res) {
        const chainId = extractChainId(req);
        const cachedResult = this._cachedHealthCheckResultByChainId.get(chainId);
        let result;
        if (!cachedResult) {
            result = await this._getServiceForChain(chainId).runHealthCheckAsync();
            this._cachedHealthCheckResultByChainId.set(chainId, [result, new Date()]);
        }
        else {
            const cacheAgeMs = Date.now() - cachedResult[1].getTime();
            if (cacheAgeMs >= HEALTH_CHECK_RESULT_CACHE_DURATION_MS) {
                result = await this._getServiceForChain(chainId).runHealthCheckAsync();
                this._cachedHealthCheckResultByChainId.set(chainId, [result, new Date()]);
            }
            else {
                result = cachedResult[0];
            }
        }
        const response = (0, rfqm_health_check_1.transformResultToShortResponse)(result);
        res.status(HttpStatus.OK).send(response);
    }
    async getStatusAsync(req, res) {
        const chainId = extractChainId(req);
        const { orderHash } = req.params;
        const status = await this._getServiceForChain(chainId).getStatusAsync(orderHash);
        status ? res.status(HttpStatus.OK).send(status) : res.status(HttpStatus.NOT_FOUND).send();
    }
    async submitSignedQuoteAsync(req, res) {
        const { chainId, integrator, params } = this._parseSubmitSignedQuoteParams(req);
        RFQM_SIGNED_QUOTE_SUBMITTED.inc({
            integratorLabel: integrator.label,
            chainId,
        });
        try {
            const response = await this._getServiceForChain(chainId).submitTakerSignedOtcOrderAsync(params);
            res.status(HttpStatus.CREATED).send(response);
        }
        catch (e) {
            req.log.error(e, 'Encountered an error while queuing a signed quote');
            throw e;
        }
    }
    async submitSignedQuoteWithApprovalAsync(req, res) {
        const { chainId, integrator, params } = this._parseSubmitSignedQuoteWithApprovalParams(req);
        RFQM_SIGNED_QUOTE_SUBMITTED.inc({
            integratorLabel: integrator.label,
            chainId,
        });
        try {
            const response = await this._getServiceForChain(chainId).submitTakerSignedOtcOrderWithApprovalAsync(params);
            res.status(HttpStatus.CREATED).send(response);
        }
        catch (e) {
            req.log.error(e, 'Encountered an error while queuing a signed quote with approval');
            throw e;
        }
    }
    async _parseFetchFirmQuoteParamsAsync(req) {
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        schema_utils_1.schemaUtils.validateSchema(req.query, schemas_1.schemas.firmQuoteRequestSchema);
        const takerAddress = req.query.takerAddress;
        const shouldCheckApproval = req.query.checkApproval === 'true' ? true : false;
        const { chainId, params } = await this._parseIndicativeAndFirmQuoteSharedParamsAsync(req);
        if (!utils_1.addressUtils.isAddress(takerAddress)) {
            throw new api_utils_1.ValidationError([
                {
                    field: 'takerAddress',
                    code: api_utils_1.ValidationErrorCodes.InvalidAddress,
                    reason: `Must provide a valid takerAddress`,
                },
            ]);
        }
        return {
            chainId,
            params: {
                ...params,
                takerAddress: takerAddress,
                checkApproval: shouldCheckApproval,
            },
        };
    }
    _getServiceForChain(chainId) {
        const service = this._rfqmServices.get(chainId);
        if (!service) {
            throw new Error('No configuration exists for chain');
        }
        return service;
    }
    /**
     * Examines the API key provided in the request, ensures it is valid for RFQM, and fetches the associated
     * integrator ID.
     */
    _validateApiKey(apiKey, chainId) {
        if (apiKey === undefined) {
            throw new api_utils_1.InvalidAPIKeyError('Must access with an API key');
        }
        if (!this._configManager.getRfqmApiKeyWhitelist().has(apiKey)) {
            throw new api_utils_1.InvalidAPIKeyError('API key not authorized for RFQM access');
        }
        const integratorId = this._configManager.getIntegratorIdForApiKey(apiKey);
        if (!integratorId) {
            // With a valid configuration this should never happen
            throw new api_utils_1.InvalidAPIKeyError('API key has no associated Integrator ID');
        }
        const integrator = this._configManager.getIntegratorByIdOrThrow(integratorId);
        if (!integrator.allowedChainIds.includes(chainId)) {
            throw new api_utils_1.InvalidAPIKeyError(`API Key not authorized to access chain ${chainId}`);
        }
        return { apiKey, integrator };
    }
    async _parseFetchIndicativeQuoteParamsAsync(req) {
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        schema_utils_1.schemaUtils.validateSchema(req.query, schemas_1.schemas.indicativeQuoteRequestSchema);
        const { takerAddress } = req.query;
        const { chainId, params } = await this._parseIndicativeAndFirmQuoteSharedParamsAsync(req);
        return {
            chainId,
            params: {
                ...params,
                takerAddress: takerAddress,
            },
        };
    }
    /**
     * Parse shared params of indicative and firm quotes.
     *
     * @param req The request object.
     * @returns Chain ID and parsed shared params of indicative and firm quotes.
     */
    async _parseIndicativeAndFirmQuoteSharedParamsAsync(req) {
        const chainId = extractChainId(req);
        const { integrator } = this._validateApiKey(req.header('0x-api-key'), chainId);
        const { affiliateAddress } = req.query;
        // Parse tokens
        const sellTokenRaw = req.query.sellToken;
        const buyTokenRaw = req.query.buyToken;
        validateNotNativeTokenOrThrow(sellTokenRaw, chainId, 'sellToken');
        let buyTokenDecimals;
        let sellTokenDecimals;
        let buyTokenContractAddress;
        let sellTokenContractAddress;
        try {
            buyTokenContractAddress = buyTokenRaw.toLocaleLowerCase().startsWith('0x')
                ? buyTokenRaw
                : contractAddressForSymbol(buyTokenRaw, chainId);
            buyTokenDecimals = await this._getServiceForChain(chainId).getTokenDecimalsAsync(buyTokenRaw);
        }
        catch {
            throw new api_utils_1.ValidationError([
                {
                    field: 'buyToken',
                    code: api_utils_1.ValidationErrorCodes.AddressNotSupported,
                    reason: `Token ${buyTokenRaw} is currently unsupported`,
                },
            ]);
        }
        try {
            sellTokenContractAddress = sellTokenRaw.toLocaleLowerCase().startsWith('0x')
                ? sellTokenRaw
                : contractAddressForSymbol(sellTokenRaw, chainId);
            sellTokenDecimals = await this._getServiceForChain(chainId).getTokenDecimalsAsync(sellTokenRaw);
        }
        catch {
            throw new api_utils_1.ValidationError([
                {
                    field: 'sellToken',
                    code: api_utils_1.ValidationErrorCodes.AddressNotSupported,
                    reason: `Token ${sellTokenRaw} is currently unsupported`,
                },
            ]);
        }
        // Parse number params
        const sellAmount = req.query.sellAmount === undefined ? undefined : new utils_1.BigNumber(req.query.sellAmount);
        const buyAmount = req.query.buyAmount === undefined ? undefined : new utils_1.BigNumber(req.query.buyAmount);
        return {
            chainId,
            params: {
                buyAmount,
                buyToken: buyTokenContractAddress,
                buyTokenDecimals,
                integrator,
                sellAmount,
                sellToken: sellTokenContractAddress,
                sellTokenDecimals,
                affiliateAddress: affiliateAddress,
            },
        };
    }
    _parseSubmitSignedQuoteParams(req) {
        const type = req.body.type;
        const chainId = extractChainId(req);
        const { integrator } = this._validateApiKey(req.header('0x-api-key'), chainId);
        if (type === types_1.GaslessTypes.OtcOrder) {
            const order = new protocol_utils_1.OtcOrder((0, rfqm_request_utils_1.stringsToOtcOrderFields)(req.body.order));
            const signature = (0, rfqm_request_utils_1.stringsToSignature)(req.body.signature);
            return {
                chainId,
                integrator,
                params: {
                    type,
                    order,
                    signature,
                },
            };
        }
        else {
            throw new api_utils_1.ValidationError([
                {
                    field: 'type',
                    code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                    reason: `${type} is an invalid value for 'type'`,
                },
            ]);
        }
    }
    _parseSubmitSignedQuoteWithApprovalParams(req) {
        const chainId = extractChainId(req);
        const { integrator } = this._validateApiKey(req.header('0x-api-key'), chainId);
        const { approval, trade } = req.body;
        const parsedParams = {};
        // Parse approval params
        if (approval) {
            if (approval.type === types_1.GaslessApprovalTypes.ExecuteMetaTransaction ||
                approval.type === types_1.GaslessApprovalTypes.Permit) {
                const eip712 = (0, rfqm_request_utils_1.stringsToEIP712Context)(approval.eip712);
                const signature = (0, rfqm_request_utils_1.stringsToSignature)(approval.signature);
                parsedParams.approval = {
                    type: approval.type,
                    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    eip712: eip712,
                    signature,
                };
            }
            else {
                throw new api_utils_1.ValidationError([
                    {
                        field: 'approval',
                        code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                        reason: `${approval.type} is an invalid value for Approval 'type'`,
                    },
                ]);
            }
        }
        // Parse trade params
        const tradeType = trade.type;
        let otcOrderSubmitRfqmSignedQuoteParams;
        if (tradeType === types_1.GaslessTypes.OtcOrder) {
            const order = new protocol_utils_1.OtcOrder((0, rfqm_request_utils_1.stringsToOtcOrderFields)(trade.order));
            const signature = (0, rfqm_request_utils_1.stringsToSignature)(trade.signature);
            otcOrderSubmitRfqmSignedQuoteParams = {
                type: trade.type,
                order,
                signature,
            };
        }
        else {
            throw new api_utils_1.ValidationError([
                {
                    field: 'type',
                    code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                    reason: `${trade.type} is an invalid value for Trade 'type'`,
                },
            ]);
        }
        return {
            chainId,
            integrator,
            params: {
                ...parsedParams,
                kind: types_1.GaslessTypes.OtcOrder,
                trade: otcOrderSubmitRfqmSignedQuoteParams,
            },
        };
    }
}
exports.RfqmHandlers = RfqmHandlers;
/**
 * Extracts the Chain Id from the request. If none is provided, assumes a Chain Id of 1 (for backwards compatibility)
 *
 * @param req - the Express Request object
 * @returns the chain Id for this request
 */
const extractChainId = (req) => {
    const chainIdFromHeader = req.header('0x-chain-id');
    if (chainIdFromHeader === undefined) {
        return 1;
    }
    else {
        const parsedInt = parseInt(chainIdFromHeader, 10);
        if (Number.isNaN(parsedInt)) {
            throw new api_utils_1.ValidationError([
                {
                    field: '0x-chain-id',
                    code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                    reason: 'Invalid chain id',
                },
            ]);
        }
        return parsedInt;
    }
};
/**
 * Gets the token address for a given symbol.
 *
 * Throws if the symbol is not present in @0x/token-metadata
 */
const contractAddressForSymbol = (symbol, chainId) => {
    var _a;
    const address = (_a = (0, token_metadata_1.getTokenMetadataIfExists)(symbol, chainId)) === null || _a === void 0 ? void 0 : _a.tokenAddress;
    if (!address) {
        throw new Error('Unsupported token');
    }
    return address;
};
const validateNotNativeTokenOrThrow = (token, chainId, field) => {
    if ((0, token_metadata_1.isNativeSymbolOrAddress)(token, chainId)) {
        const symbol = (0, token_metadata_1.nativeWrappedTokenSymbol)(chainId);
        throw new api_utils_1.ValidationError([
            {
                field,
                code: api_utils_1.ValidationErrorCodes.TokenNotSupported,
                reason: `Unwrapped Native Asset is not supported. Use ${symbol} instead`,
            },
        ]);
    }
    return true;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,