d9d32b6cb9e3b32839853ef1457d82e1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.padSignature = exports.getSignerFromHash = void 0;
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const ethjs = require("ethereumjs-util");
const EIP_191_PREFIX = '\x19Ethereum Signed Message:\n';
/**
 * recovers the signer from a signature for a given order hash
 */
function getSignerFromHash(hash, signature) {
    switch (signature.signatureType) {
        case protocol_utils_1.SignatureType.EIP712:
            return ecrecover(hash, signature);
        case protocol_utils_1.SignatureType.EthSign:
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line no-case-declarations
            const eip191Hash = getEIP191Hash(hash);
            return ecrecover(eip191Hash, signature);
        default:
            throw new Error('unsupported signature type');
    }
}
exports.getSignerFromHash = getSignerFromHash;
function getEIP191Hash(msg) {
    const byteLength = ethjs.toBuffer(msg).length;
    const prefix = `${EIP_191_PREFIX}${byteLength}`;
    return utils_1.hexUtils.toHex(ethjs.keccak256(ethjs.toBuffer(utils_1.hexUtils.concat(Buffer.from(prefix), msg))));
}
function ecrecover(hash, signature) {
    const pubKey = ethjs.ecrecover(ethjs.toBuffer(hash), signature.v, ethjs.toBuffer(signature.r), ethjs.toBuffer(signature.s));
    const recAddressBuffer = ethjs.pubToAddress(pubKey);
    return ethjs.bufferToHex(recAddressBuffer);
}
/**
 * Certain market makers are returning signatures which are missing
 * leading bytes on the `r` and/or `s` fields.
 *
 * Add them if they don't exist.
 */
function padSignature(signature) {
    var _a, _b;
    const hexLength = 64;
    const result = { ...signature };
    const hexExtractor = /^0(x|X)(?<hex>\w+)$/;
    const rMatch = signature.r.match(hexExtractor);
    const rHex = (_a = rMatch === null || rMatch === void 0 ? void 0 : rMatch.groups) === null || _a === void 0 ? void 0 : _a.hex;
    if (rHex) {
        if (rHex.length !== hexLength) {
            result.r = `0x${rHex.padStart(hexLength, '0')}`;
        }
    }
    const sMatch = signature.s.match(hexExtractor);
    const sHex = (_b = sMatch === null || sMatch === void 0 ? void 0 : sMatch.groups) === null || _b === void 0 ? void 0 : _b.hex;
    if (sHex) {
        if (sHex.length !== hexLength) {
            result.s = `0x${sHex.padStart(hexLength, '0')}`;
        }
    }
    return result;
}
exports.padSignature = padSignature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9zaWduYXR1cmVfdXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdURBQThEO0FBQzlELHFDQUFxQztBQUNyQyx5Q0FBeUM7QUFFekMsTUFBTSxjQUFjLEdBQUcsZ0NBQWdDLENBQUM7QUFFeEQ7O0dBRUc7QUFDSCxTQUFnQixpQkFBaUIsQ0FBQyxJQUFZLEVBQUUsU0FBb0I7SUFDaEUsUUFBUSxTQUFTLENBQUMsYUFBYSxFQUFFO1FBQzdCLEtBQUssOEJBQWEsQ0FBQyxNQUFNO1lBQ3JCLE9BQU8sU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN0QyxLQUFLLDhCQUFhLENBQUMsT0FBTztZQUN0Qiw2REFBNkQ7WUFDN0QsZ0RBQWdEO1lBQ2hELE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2QyxPQUFPLFNBQVMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDNUM7WUFDSSxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7S0FDckQ7QUFDTCxDQUFDO0FBWkQsOENBWUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxHQUFXO0lBQzlCLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQzlDLE1BQU0sTUFBTSxHQUFHLEdBQUcsY0FBYyxHQUFHLFVBQVUsRUFBRSxDQUFDO0lBQ2hELE9BQU8sZ0JBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGdCQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEcsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLElBQVksRUFBRSxTQUFvQjtJQUNqRCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsU0FBUyxDQUMxQixLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUNwQixTQUFTLENBQUMsQ0FBQyxFQUNYLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUMzQixLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FDOUIsQ0FBQztJQUNGLE1BQU0sZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwRCxPQUFPLEtBQUssQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixZQUFZLENBQUMsU0FBb0I7O0lBQzdDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUVyQixNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsU0FBUyxFQUFFLENBQUM7SUFFaEMsTUFBTSxZQUFZLEdBQUcscUJBQXFCLENBQUM7SUFDM0MsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDL0MsTUFBTSxJQUFJLEdBQUcsTUFBQSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsTUFBTSwwQ0FBRSxHQUFHLENBQUM7SUFDakMsSUFBSSxJQUFJLEVBQUU7UUFDTixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQzNCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDO1NBQ25EO0tBQ0o7SUFFRCxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMvQyxNQUFNLElBQUksR0FBRyxNQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxNQUFNLDBDQUFFLEdBQUcsQ0FBQztJQUNqQyxJQUFJLElBQUksRUFBRTtRQUNOLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDM0IsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUM7U0FDbkQ7S0FDSjtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUF0QkQsb0NBc0JDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZHdhbHNoL2NvZGUtbG9jYWwvMHgtcmZxLWFwaS9zcmMvdXRpbHMvc2lnbmF0dXJlX3V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpZ25hdHVyZSwgU2lnbmF0dXJlVHlwZSB9IGZyb20gJ0AweC9wcm90b2NvbC11dGlscyc7XG5pbXBvcnQgeyBoZXhVdGlscyB9IGZyb20gJ0AweC91dGlscyc7XG5pbXBvcnQgKiBhcyBldGhqcyBmcm9tICdldGhlcmV1bWpzLXV0aWwnO1xuXG5jb25zdCBFSVBfMTkxX1BSRUZJWCA9ICdcXHgxOUV0aGVyZXVtIFNpZ25lZCBNZXNzYWdlOlxcbic7XG5cbi8qKlxuICogcmVjb3ZlcnMgdGhlIHNpZ25lciBmcm9tIGEgc2lnbmF0dXJlIGZvciBhIGdpdmVuIG9yZGVyIGhhc2hcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNpZ25lckZyb21IYXNoKGhhc2g6IHN0cmluZywgc2lnbmF0dXJlOiBTaWduYXR1cmUpOiBzdHJpbmcge1xuICAgIHN3aXRjaCAoc2lnbmF0dXJlLnNpZ25hdHVyZVR5cGUpIHtcbiAgICAgICAgY2FzZSBTaWduYXR1cmVUeXBlLkVJUDcxMjpcbiAgICAgICAgICAgIHJldHVybiBlY3JlY292ZXIoaGFzaCwgc2lnbmF0dXJlKTtcbiAgICAgICAgY2FzZSBTaWduYXR1cmVUeXBlLkV0aFNpZ246XG4gICAgICAgICAgICAvLyAkZXNsaW50LWZpeC1tZSBodHRwczovL2dpdGh1Yi5jb20vcmhpbm9kYXZpZC9lc2xpbnQtZml4LW1lXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY2FzZS1kZWNsYXJhdGlvbnNcbiAgICAgICAgICAgIGNvbnN0IGVpcDE5MUhhc2ggPSBnZXRFSVAxOTFIYXNoKGhhc2gpO1xuICAgICAgICAgICAgcmV0dXJuIGVjcmVjb3ZlcihlaXAxOTFIYXNoLCBzaWduYXR1cmUpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBzaWduYXR1cmUgdHlwZScpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0RUlQMTkxSGFzaChtc2c6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgYnl0ZUxlbmd0aCA9IGV0aGpzLnRvQnVmZmVyKG1zZykubGVuZ3RoO1xuICAgIGNvbnN0IHByZWZpeCA9IGAke0VJUF8xOTFfUFJFRklYfSR7Ynl0ZUxlbmd0aH1gO1xuICAgIHJldHVybiBoZXhVdGlscy50b0hleChldGhqcy5rZWNjYWsyNTYoZXRoanMudG9CdWZmZXIoaGV4VXRpbHMuY29uY2F0KEJ1ZmZlci5mcm9tKHByZWZpeCksIG1zZykpKSk7XG59XG5cbmZ1bmN0aW9uIGVjcmVjb3ZlcihoYXNoOiBzdHJpbmcsIHNpZ25hdHVyZTogU2lnbmF0dXJlKTogc3RyaW5nIHtcbiAgICBjb25zdCBwdWJLZXkgPSBldGhqcy5lY3JlY292ZXIoXG4gICAgICAgIGV0aGpzLnRvQnVmZmVyKGhhc2gpLFxuICAgICAgICBzaWduYXR1cmUudixcbiAgICAgICAgZXRoanMudG9CdWZmZXIoc2lnbmF0dXJlLnIpLFxuICAgICAgICBldGhqcy50b0J1ZmZlcihzaWduYXR1cmUucyksXG4gICAgKTtcbiAgICBjb25zdCByZWNBZGRyZXNzQnVmZmVyID0gZXRoanMucHViVG9BZGRyZXNzKHB1YktleSk7XG4gICAgcmV0dXJuIGV0aGpzLmJ1ZmZlclRvSGV4KHJlY0FkZHJlc3NCdWZmZXIpO1xufVxuXG4vKipcbiAqIENlcnRhaW4gbWFya2V0IG1ha2VycyBhcmUgcmV0dXJuaW5nIHNpZ25hdHVyZXMgd2hpY2ggYXJlIG1pc3NpbmdcbiAqIGxlYWRpbmcgYnl0ZXMgb24gdGhlIGByYCBhbmQvb3IgYHNgIGZpZWxkcy5cbiAqXG4gKiBBZGQgdGhlbSBpZiB0aGV5IGRvbid0IGV4aXN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFkU2lnbmF0dXJlKHNpZ25hdHVyZTogU2lnbmF0dXJlKTogU2lnbmF0dXJlIHtcbiAgICBjb25zdCBoZXhMZW5ndGggPSA2NDtcblxuICAgIGNvbnN0IHJlc3VsdCA9IHsgLi4uc2lnbmF0dXJlIH07XG5cbiAgICBjb25zdCBoZXhFeHRyYWN0b3IgPSAvXjAoeHxYKSg/PGhleD5cXHcrKSQvO1xuICAgIGNvbnN0IHJNYXRjaCA9IHNpZ25hdHVyZS5yLm1hdGNoKGhleEV4dHJhY3Rvcik7XG4gICAgY29uc3QgckhleCA9IHJNYXRjaD8uZ3JvdXBzPy5oZXg7XG4gICAgaWYgKHJIZXgpIHtcbiAgICAgICAgaWYgKHJIZXgubGVuZ3RoICE9PSBoZXhMZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdC5yID0gYDB4JHtySGV4LnBhZFN0YXJ0KGhleExlbmd0aCwgJzAnKX1gO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc01hdGNoID0gc2lnbmF0dXJlLnMubWF0Y2goaGV4RXh0cmFjdG9yKTtcbiAgICBjb25zdCBzSGV4ID0gc01hdGNoPy5ncm91cHM/LmhleDtcbiAgICBpZiAoc0hleCkge1xuICAgICAgICBpZiAoc0hleC5sZW5ndGggIT09IGhleExlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0LnMgPSBgMHgke3NIZXgucGFkU3RhcnQoaGV4TGVuZ3RoLCAnMCcpfWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==