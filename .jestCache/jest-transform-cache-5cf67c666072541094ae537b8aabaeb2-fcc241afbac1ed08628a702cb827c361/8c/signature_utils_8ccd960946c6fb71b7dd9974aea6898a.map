{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/signature_utils.ts","mappings":";;;AAAA,uDAA8D;AAC9D,qCAAqC;AACrC,yCAAyC;AAEzC,MAAM,cAAc,GAAG,gCAAgC,CAAC;AAExD;;GAEG;AACH,SAAgB,iBAAiB,CAAC,IAAY,EAAE,SAAoB;IAChE,QAAQ,SAAS,CAAC,aAAa,EAAE;QAC7B,KAAK,8BAAa,CAAC,MAAM;YACrB,OAAO,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACtC,KAAK,8BAAa,CAAC,OAAO;YACtB,6DAA6D;YAC7D,gDAAgD;YAChD,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;YACvC,OAAO,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC5C;YACI,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;KACrD;AACL,CAAC;AAZD,8CAYC;AAED,SAAS,aAAa,CAAC,GAAW;IAC9B,MAAM,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;IAC9C,MAAM,MAAM,GAAG,GAAG,cAAc,GAAG,UAAU,EAAE,CAAC;IAChD,OAAO,gBAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,gBAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACtG,CAAC;AAED,SAAS,SAAS,CAAC,IAAY,EAAE,SAAoB;IACjD,MAAM,MAAM,GAAG,KAAK,CAAC,SAAS,CAC1B,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EACpB,SAAS,CAAC,CAAC,EACX,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,EAC3B,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAC9B,CAAC;IACF,MAAM,gBAAgB,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IACpD,OAAO,KAAK,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;AAC/C,CAAC;AAED;;;;;GAKG;AACH,SAAgB,YAAY,CAAC,SAAoB;;IAC7C,MAAM,SAAS,GAAG,EAAE,CAAC;IAErB,MAAM,MAAM,GAAG,EAAE,GAAG,SAAS,EAAE,CAAC;IAEhC,MAAM,YAAY,GAAG,qBAAqB,CAAC;IAC3C,MAAM,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAC/C,MAAM,IAAI,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,0CAAE,GAAG,CAAC;IACjC,IAAI,IAAI,EAAE;QACN,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;YAC3B,MAAM,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,CAAC;SACnD;KACJ;IAED,MAAM,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAC/C,MAAM,IAAI,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,0CAAE,GAAG,CAAC;IACjC,IAAI,IAAI,EAAE;QACN,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;YAC3B,MAAM,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,CAAC;SACnD;KACJ;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AAtBD,oCAsBC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/signature_utils.ts"],"sourcesContent":["import { Signature, SignatureType } from '@0x/protocol-utils';\nimport { hexUtils } from '@0x/utils';\nimport * as ethjs from 'ethereumjs-util';\n\nconst EIP_191_PREFIX = '\\x19Ethereum Signed Message:\\n';\n\n/**\n * recovers the signer from a signature for a given order hash\n */\nexport function getSignerFromHash(hash: string, signature: Signature): string {\n    switch (signature.signatureType) {\n        case SignatureType.EIP712:\n            return ecrecover(hash, signature);\n        case SignatureType.EthSign:\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line no-case-declarations\n            const eip191Hash = getEIP191Hash(hash);\n            return ecrecover(eip191Hash, signature);\n        default:\n            throw new Error('unsupported signature type');\n    }\n}\n\nfunction getEIP191Hash(msg: string): string {\n    const byteLength = ethjs.toBuffer(msg).length;\n    const prefix = `${EIP_191_PREFIX}${byteLength}`;\n    return hexUtils.toHex(ethjs.keccak256(ethjs.toBuffer(hexUtils.concat(Buffer.from(prefix), msg))));\n}\n\nfunction ecrecover(hash: string, signature: Signature): string {\n    const pubKey = ethjs.ecrecover(\n        ethjs.toBuffer(hash),\n        signature.v,\n        ethjs.toBuffer(signature.r),\n        ethjs.toBuffer(signature.s),\n    );\n    const recAddressBuffer = ethjs.pubToAddress(pubKey);\n    return ethjs.bufferToHex(recAddressBuffer);\n}\n\n/**\n * Certain market makers are returning signatures which are missing\n * leading bytes on the `r` and/or `s` fields.\n *\n * Add them if they don't exist.\n */\nexport function padSignature(signature: Signature): Signature {\n    const hexLength = 64;\n\n    const result = { ...signature };\n\n    const hexExtractor = /^0(x|X)(?<hex>\\w+)$/;\n    const rMatch = signature.r.match(hexExtractor);\n    const rHex = rMatch?.groups?.hex;\n    if (rHex) {\n        if (rHex.length !== hexLength) {\n            result.r = `0x${rHex.padStart(hexLength, '0')}`;\n        }\n    }\n\n    const sMatch = signature.s.match(hexExtractor);\n    const sHex = sMatch?.groups?.hex;\n    if (sHex) {\n        if (sHex.length !== hexLength) {\n            result.s = `0x${sHex.padStart(hexLength, '0')}`;\n        }\n    }\n    return result;\n}\n"],"version":3}