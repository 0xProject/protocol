{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/address_utils.ts","mappings":";;;AAAA,6CAAsE;AAEtE,uDAA6D;AAC7D,qCAAyC;AAIzC;;;GAGG;AACI,MAAM,0BAA0B,GAAG,CAAI,GAAM,EAAE,EAAE;IACpD,6DAA6D;IAC7D,8DAA8D;IAC9D,MAAM,UAAU,GAA2B,EAAE,CAAC;IAC9C,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAC5C,IAAI,KAAK,IAAI,oBAAY,CAAC,SAAS,CAAC,KAAe,CAAC,EAAE;YAClD,UAAU,CAAC,GAAG,CAAC,GAAI,KAAgB,CAAC,WAAW,EAAE,CAAC;SACrD;KACJ;IAED,OAAO;QACH,GAAG,GAAG;QACN,GAAG,UAAU;KAChB,CAAC;AACN,CAAC,CAAC;AAdW,QAAA,0BAA0B,8BAcrC;AAEF;;;;;GAKG;AACH,SAAgB,+BAA+B,CAAC,OAAe,EAAE,KAAa,EAAE,OAAgB;IAC5F,IAAI;QACA,OAAO,IAAA,wCAAuB,EAAC,OAAO,EAAE,OAAO,CAAC,CAAC;KACpD;IAAC,OAAO,CAAC,EAAE;QACR,MAAM,IAAI,2BAAe,CAAC;YACtB;gBACI,KAAK;gBACL,IAAI,EAAE,gCAAoB,CAAC,eAAe;gBAC1C,MAAM,EAAE,CAAC,CAAC,OAAO;aACpB;SACJ,CAAC,CAAC;KACN;AACL,CAAC;AAZD,0EAYC;AAED;;;GAGG;AACH,SAAgB,cAAc,CAAC,WAAsC;IACjE,MAAM,UAAU,GAA2C,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;IACtF,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;QAC5B,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE;YACzD,OAAO;gBACH,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;gBACvC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;aAC1C,CAAC;QACN,CAAC,EAAE,UAAU,CAAC,CAAC;KAClB;SAAM;QACH,OAAO;YACH,MAAM,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC;YAC3B,MAAM,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC;SAC9B,CAAC;KACL;AACL,CAAC;AAfD,wCAeC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/address_utils.ts"],"sourcesContent":["import { ValidationError, ValidationErrorCodes } from '@0x/api-utils';\nimport { ChainId } from '@0x/contract-addresses';\nimport { findTokenAddressOrThrow } from '@0x/token-metadata';\nimport { addressUtils } from '@0x/utils';\n\nimport { ERC20Owner } from '../core/types';\n\n/**\n * Checks top level attributes of an object for values matching an ETH address\n * and normalizes the address by turning it to lowercase\n */\nexport const objectETHAddressNormalizer = <T>(obj: T) => {\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const normalized: { [key: string]: any } = {};\n    for (const [key, value] of Object.entries(obj)) {\n        if (value && addressUtils.isAddress(value as string)) {\n            normalized[key] = (value as string).toLowerCase();\n        }\n    }\n\n    return {\n        ...obj,\n        ...normalized,\n    };\n};\n\n/**\n * Attempts to find the address of the token and throws if not found\n *\n * @param address the uppercase symbol of the token (ex. `REP`) or the address of the contract\n * @param chainId the Network where the address should be hosted on.\n */\nexport function findTokenAddressOrThrowApiError(address: string, field: string, chainId: ChainId): string {\n    try {\n        return findTokenAddressOrThrow(address, chainId);\n    } catch (e) {\n        throw new ValidationError([\n            {\n                field,\n                code: ValidationErrorCodes.ValueOutOfRange,\n                reason: e.message,\n            },\n        ]);\n    }\n}\n\n/**\n * Splits an array of ERC20Owner objects into string arrays of owner and token addresses.\n * This serves as an intermediate step before passing the objects to the Balance Checker contract.\n */\nexport function splitAddresses(erc20Owners: ERC20Owner | ERC20Owner[]): { owners: string[]; tokens: string[] } {\n    const splitAddrs: { owners: string[]; tokens: string[] } = { owners: [], tokens: [] };\n    if (Array.isArray(erc20Owners)) {\n        return erc20Owners.reduce(({ owners, tokens }, erc20Owner) => {\n            return {\n                owners: owners.concat(erc20Owner.owner),\n                tokens: tokens.concat(erc20Owner.token),\n            };\n        }, splitAddrs);\n    } else {\n        return {\n            owners: [erc20Owners.owner],\n            tokens: [erc20Owners.token],\n        };\n    }\n}\n"],"version":3}