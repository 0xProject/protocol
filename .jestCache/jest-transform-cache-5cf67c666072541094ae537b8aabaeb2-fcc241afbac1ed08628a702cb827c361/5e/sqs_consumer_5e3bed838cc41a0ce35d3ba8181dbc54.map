{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/sqs_consumer.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/sqs_consumer.ts"],"sourcesContent":["// tslint:disable: max-classes-per-file\nimport * as Sentry from '@sentry/node';\nimport { Transaction as SentryTransaction } from '@sentry/types';\nimport { SQS } from 'aws-sdk';\nimport delay from 'delay';\n\nimport { SENTRY_DSN } from '../config';\nimport { ONE_SECOND_MS } from '../core/constants';\nimport { logger } from '../logger';\n\nimport { SqsClient } from './sqs_client';\n\n// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type MessageHandler = (message: SQS.Types.Message) => Promise<any>;\n\nexport class SqsRetryableError extends Error {}\nexport class SqsConsumer {\n    private readonly _workerIndex: number;\n    private readonly _workerAddress: string;\n    private readonly _sqsClient: SqsClient;\n    private readonly _beforeHandle?: () => Promise<boolean>;\n    private readonly _handleMessage: MessageHandler;\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private readonly _afterHandle?: (message: SQS.Types.Message, error?: Error) => Promise<any>;\n    private _isConsuming: boolean;\n\n    constructor(params: {\n        workerIndex: number;\n        workerAddress: string;\n        sqsClient: SqsClient;\n        beforeHandle?: () => Promise<boolean>;\n        handleMessage: MessageHandler;\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        afterHandle?: (message: SQS.Types.Message, error?: Error) => Promise<any>;\n    }) {\n        this._workerIndex = params.workerIndex;\n        this._workerAddress = params.workerAddress;\n        this._sqsClient = params.sqsClient;\n        this._beforeHandle = params.beforeHandle;\n        this._handleMessage = params.handleMessage;\n        this._afterHandle = params.afterHandle;\n        this._isConsuming = false;\n    }\n\n    public get workerIndex(): number {\n        return this._workerIndex;\n    }\n\n    public get workerAddress(): string {\n        return this._workerAddress;\n    }\n\n    public stop(): void {\n        this._isConsuming = false;\n    }\n\n    public async consumeAsync(): Promise<void> {\n        if (this._isConsuming) {\n            return;\n        }\n\n        this._isConsuming = true;\n        while (this._isConsuming) {\n            await this.consumeOnceAsync();\n        }\n    }\n\n    /**\n     * Decorates _consumeOnceInternalAsync with Sentry observability\n     */\n    public async consumeOnceAsync(): Promise<void> {\n        let transaction: SentryTransaction | undefined;\n        if (SENTRY_DSN) {\n            transaction = Sentry.startTransaction({\n                name: 'Worker Transaction',\n            });\n        }\n\n        try {\n            await this._consumeOnceInternalAsync();\n        } catch (e) {\n            if (SENTRY_DSN) {\n                Sentry.captureException(e);\n            }\n            logger.error(\n                { id: this._workerAddress, workerIndex: this._workerIndex, errorMessage: e.message },\n                `Encountered error when consuming from the queue`,\n            );\n        } finally {\n            if (SENTRY_DSN) {\n                transaction?.finish();\n            }\n        }\n    }\n\n    private async _consumeOnceInternalAsync(): Promise<void> {\n        // Run the before hook\n        if (this._beforeHandle) {\n            let beforeCheck;\n            try {\n                beforeCheck = await this._beforeHandle();\n            } catch (e) {\n                logger.error(\n                    { id: this._workerAddress, workerIndex: this._workerIndex, errorMessage: e.message },\n                    'Error encountered in the preHandle check',\n                );\n                throw e;\n            }\n\n            if (!beforeCheck) {\n                const errorMessage = 'Before validation failed';\n                logger.warn({ id: this._workerAddress, workerIndex: this._workerIndex }, errorMessage);\n                await delay(ONE_SECOND_MS);\n                return;\n            }\n        }\n\n        // Receive message\n        const message = await this._sqsClient.receiveMessageAsync();\n\n        // No message\n        if (message === null) {\n            return;\n        }\n\n        // Handle message\n        let error: Error | undefined;\n        try {\n            await this._handleMessage(message);\n        } catch (err) {\n            error = err;\n            logger.error(\n                { errorMessage: err.message, message, id: this._workerAddress, workerIndex: this._workerIndex },\n                'Encountered error while handling message',\n            );\n\n            if (err instanceof SqsRetryableError) {\n                logger.info({ message, id: this._workerAddress, workerIndex: this._workerIndex }, 'Retrying message');\n                // Retry message\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                await this._sqsClient.changeMessageVisibilityAsync(message.ReceiptHandle!, 0);\n                await delay(ONE_SECOND_MS);\n                throw err;\n            }\n        }\n\n        // Delete message\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        await this._sqsClient.deleteMessageAsync(message.ReceiptHandle!);\n\n        // Run the after hook\n        if (this._afterHandle) {\n            await this._afterHandle(message, error);\n        }\n\n        if (error) {\n            throw error;\n        }\n    }\n}\n"],"version":3}