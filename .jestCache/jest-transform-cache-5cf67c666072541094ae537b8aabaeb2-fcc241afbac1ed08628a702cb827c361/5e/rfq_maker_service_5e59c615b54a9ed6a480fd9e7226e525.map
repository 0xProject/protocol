{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/services/rfq_maker_service.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/services/rfq_maker_service.ts"],"sourcesContent":["import { ChainId } from '@0x/contract-addresses';\nimport { addressUtils } from '@0x/utils';\nimport { isArray } from 'lodash';\n\nimport { RfqMaker } from '../entities';\nimport { ConfigManager } from '../utils/config_manager';\nimport { RfqMakerDbUtils } from '../utils/rfq_maker_db_utils';\n\n/**\n * RfqMakerService is the coordination layer for HTTP maker services.\n */\nexport class RfqMakerService {\n    /**\n     * Validates that the chainId specified by client is a valid (and known) chain ID.\n     */\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public static isValidChainId(chainId: any): chainId is ChainId {\n        return Object.values(ChainId).includes(Number(chainId));\n    }\n\n    /**\n     * Validates that the URIs (either rfqtUri or rfqmUri) specified by client is a valid URI or null.\n     */\n    public static validateUriOrThrow(fieldName: string, uri: string | null | undefined): void {\n        if (uri === null) {\n            return;\n        }\n\n        if (uri === undefined || !uri.startsWith('http')) {\n            throw new Error(`Invalid value of ${fieldName}: ${uri}`);\n        }\n    }\n\n    /**\n     * Validates that a payload of market maker pairs is well-formed\n     * and contains valid contract addresses.\n     *\n     * @throws if the payload is invalid\n     */\n    public static validatePairsPayloadOrThrow(pairs: [string, string][]): void {\n        if (!isArray(pairs)) {\n            throw new Error('pairs is not an array.');\n        }\n\n        pairs.forEach((pair, i) => {\n            if (!isArray(pair)) {\n                throw new Error(`pair ${i} is not an array.`);\n            }\n            if (pair.length !== 2) {\n                throw new Error(`pair ${i} array does not consist of exactly two elements.`);\n            }\n            if (!addressUtils.isAddress(pair[0])) {\n                throw new Error(`address of first token for pair ${i} is invalid.`);\n            }\n            if (!addressUtils.isAddress(pair[1])) {\n                throw new Error(`address of second token for pair ${i} is invalid.`);\n            }\n            if (pair[0] === pair[1]) {\n                throw new Error(`pair array ${i} has identical assets.`);\n            }\n        });\n    }\n\n    constructor(private readonly _dbUtils: RfqMakerDbUtils, private readonly _configManager: ConfigManager) {}\n\n    /**\n     * Get the config of a maker on a given blockchain from DB.\n     * Return a `RfqMaker` which specifies makerId, chainId, update time, the pairs array, rfqtUri and rfqmUir.\n     * If not found in DB, return the default entity for the makerId and chainId with empty pairs array, and `null` URIs.\n     */\n    public async getRfqMakerAsync(makerId: string, chainId: number): Promise<RfqMaker> {\n        const result = await this._dbUtils.getRfqMakerAsync(makerId, chainId);\n        return result ?? new RfqMaker({ makerId, chainId, updatedAt: null, pairs: [], rfqtUri: null, rfqmUri: null });\n    }\n\n    /**\n     * Create or update a record in the `rfq_maker_pairs` DB table for the maker on a given blockchain.\n     * Return the `RfqMaker` entity which represents the new record.\n     */\n    public async createOrUpdateRfqMakerAsync(\n        makerId: string,\n        chainId: number,\n        pairs: [string, string][],\n        rfqtUri: string | null,\n        rfqmUri: string | null,\n    ): Promise<RfqMaker> {\n        return this._dbUtils.createOrUpdateRfqMakerAsync(makerId, chainId, pairs, rfqtUri, rfqmUri);\n    }\n\n    /**\n     * Update one or more fields of a record in the `rfq_maker_pairs` DB table for the maker on a given blockchain.\n     * Return the `RfqMaker` entity which represents the new record.\n     */\n    public async patchRfqMakerAsync(\n        makerId: string,\n        chainId: number,\n        pairs: [string, string][] | undefined,\n        rfqtUri: string | null | undefined,\n        rfqmUri: string | null | undefined,\n    ): Promise<RfqMaker> {\n        const oldRfqMaker = await this.getRfqMakerAsync(makerId, chainId);\n\n        return this.createOrUpdateRfqMakerAsync(\n            makerId,\n            chainId,\n            pairs !== undefined ? pairs : oldRfqMaker.pairs,\n            rfqtUri !== undefined ? rfqtUri : oldRfqMaker.rfqtUri,\n            rfqmUri !== undefined ? rfqmUri : oldRfqMaker.rfqmUri,\n        );\n    }\n\n    /**\n     * Maps the given maker API key to makerId.\n     * Returns null is the input key is `undefined` or unknown.\n     */\n    public mapMakerApiKeyToId(apiKey: string | undefined): string | null {\n        if (apiKey === undefined) {\n            return null;\n        }\n\n        return this._configManager.getRfqMakerIdForApiKey(apiKey) || null;\n    }\n}\n"],"version":3}