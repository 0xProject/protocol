337cd8bdba3befb4d40dd89b693fbe78
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateGasEstimate = void 0;
const constants_1 = require("../core/constants");
// ERC-20 tokens implement their own `transfer` and `transferFrom` functions, resulting in
// different gas amounts used. These premia allow us to better estimate the gas each token uses
// NOTE: Addresses must be in lower case
const TOKEN_GAS_PREMIUM = {
    /* 1INCH  */ '0x111111111117dc0aa78b770fa6a738034120c302': 6e3,
    /* AAVE   */ '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9': 160e3,
    /* BADGER */ '0x3472a5a71965499acd81997a54bba8d852c6e53d': 100e3,
    /* DOUGH  */ '0xad32a8e6220741182940c5abf610bde99e737b2d': 100e3,
    /* DYDX   */ '0x92d6c1e31e14520e676a687f0a93788b716beff5': 140e3,
    /* ENS    */ '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72': 40e3,
    /* HOPR   */ '0xf5581dfefd8fb0e4aec526be659cfab1f8c781da': 70e3,
    /* LDO    */ '0x5a98fcbea516cf06857215779fd812ca3bef1b32': 100e3,
    /* LINK   */ '0x514910771af9ca656af840dff83e8264ecf986ca': 15e3,
    /* OCEAN  */ '0x967da4048cd07ab37855c090aaf366e4ce1b9f48': 15e3,
    /* SHIB   */ '0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce': 15e3,
    /* SNX    */ '0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f': 70e3,
    /* UMA    */ '0x04fa0d235c4abf4bcf4787af4cf447de572ef828': 75e3,
    /* UNI    */ '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984': 10e3,
    /* USDC   */ '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48': 25e3,
    /* USDT   */ '0xdac17f958d2ee523a2206206994597c13d831ec7': 20e3,
    /* YFI    */ '0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e': 10e3,
};
// If the buy token is native, an unwrap operation is needed which cost us additional gas.
// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
const UNWRAP_PREMIUM = 6e3;
/**
 * Prepares the gas estimate for an RFQM trade
 */
function calculateGasEstimate(makerToken, takerToken, orderType, isUnwrap) {
    const makerTokenPremium = TOKEN_GAS_PREMIUM[makerToken.toLowerCase()] || 0;
    const takerTokenPremium = TOKEN_GAS_PREMIUM[takerToken.toLowerCase()] || 0;
    const unwrapPremium = isUnwrap ? UNWRAP_PREMIUM : 0;
    const baseGas = orderType === 'otc' ? constants_1.RFQM_TX_OTC_ORDER_GAS_ESTIMATE : constants_1.RFQM_TX_GAS_ESTIMATE;
    return baseGas + makerTokenPremium + takerTokenPremium + unwrapPremium;
}
exports.calculateGasEstimate = calculateGasEstimate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9yZnFtX2dhc19lc3RpbWF0ZV91dGlscy50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxpREFBeUY7QUFFekYsMEZBQTBGO0FBQzFGLCtGQUErRjtBQUMvRix3Q0FBd0M7QUFDeEMsTUFBTSxpQkFBaUIsR0FBMkI7SUFDOUMsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLEdBQUc7SUFDOUQsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLEtBQUs7SUFDaEUsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLEtBQUs7SUFDaEUsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLEtBQUs7SUFDaEUsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLEtBQUs7SUFDaEUsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLElBQUk7SUFDL0QsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLElBQUk7SUFDL0QsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLEtBQUs7SUFDaEUsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLElBQUk7SUFDL0QsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLElBQUk7SUFDL0QsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLElBQUk7SUFDL0QsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLElBQUk7SUFDL0QsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLElBQUk7SUFDL0QsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLElBQUk7SUFDL0QsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLElBQUk7SUFDL0QsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLElBQUk7SUFDL0QsWUFBWSxDQUFDLDRDQUE0QyxFQUFFLElBQUk7Q0FDbEUsQ0FBQztBQUVGLDBGQUEwRjtBQUMxRiw2REFBNkQ7QUFDN0Qsa0VBQWtFO0FBQ2xFLE1BQU0sY0FBYyxHQUFXLEdBQUcsQ0FBQztBQUVuQzs7R0FFRztBQUNILFNBQWdCLG9CQUFvQixDQUNoQyxVQUFrQixFQUNsQixVQUFrQixFQUNsQixTQUF3QixFQUN4QixRQUFpQjtJQUVqQixNQUFNLGlCQUFpQixHQUFXLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuRixNQUFNLGlCQUFpQixHQUFXLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuRixNQUFNLGFBQWEsR0FBVyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELE1BQU0sT0FBTyxHQUFHLFNBQVMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLDBDQUE4QixDQUFDLENBQUMsQ0FBQyxnQ0FBb0IsQ0FBQztJQUU1RixPQUFPLE9BQU8sR0FBRyxpQkFBaUIsR0FBRyxpQkFBaUIsR0FBRyxhQUFhLENBQUM7QUFDM0UsQ0FBQztBQVpELG9EQVlDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZHdhbHNoL2NvZGUtbG9jYWwvMHgtcmZxLWFwaS9zcmMvdXRpbHMvcmZxbV9nYXNfZXN0aW1hdGVfdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUkZRTV9UWF9HQVNfRVNUSU1BVEUsIFJGUU1fVFhfT1RDX09SREVSX0dBU19FU1RJTUFURSB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzJztcclxuXHJcbi8vIEVSQy0yMCB0b2tlbnMgaW1wbGVtZW50IHRoZWlyIG93biBgdHJhbnNmZXJgIGFuZCBgdHJhbnNmZXJGcm9tYCBmdW5jdGlvbnMsIHJlc3VsdGluZyBpblxyXG4vLyBkaWZmZXJlbnQgZ2FzIGFtb3VudHMgdXNlZC4gVGhlc2UgcHJlbWlhIGFsbG93IHVzIHRvIGJldHRlciBlc3RpbWF0ZSB0aGUgZ2FzIGVhY2ggdG9rZW4gdXNlc1xyXG4vLyBOT1RFOiBBZGRyZXNzZXMgbXVzdCBiZSBpbiBsb3dlciBjYXNlXHJcbmNvbnN0IFRPS0VOX0dBU19QUkVNSVVNOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge1xyXG4gICAgLyogMUlOQ0ggICovICcweDExMTExMTExMTExN2RjMGFhNzhiNzcwZmE2YTczODAzNDEyMGMzMDInOiA2ZTMsXHJcbiAgICAvKiBBQVZFICAgKi8gJzB4N2ZjNjY1MDBjODRhNzZhZDdlOWM5MzQzN2JmYzVhYzMzZTJkZGFlOSc6IDE2MGUzLFxyXG4gICAgLyogQkFER0VSICovICcweDM0NzJhNWE3MTk2NTQ5OWFjZDgxOTk3YTU0YmJhOGQ4NTJjNmU1M2QnOiAxMDBlMyxcclxuICAgIC8qIERPVUdIICAqLyAnMHhhZDMyYThlNjIyMDc0MTE4Mjk0MGM1YWJmNjEwYmRlOTllNzM3YjJkJzogMTAwZTMsXHJcbiAgICAvKiBEWURYICAgKi8gJzB4OTJkNmMxZTMxZTE0NTIwZTY3NmE2ODdmMGE5Mzc4OGI3MTZiZWZmNSc6IDE0MGUzLFxyXG4gICAgLyogRU5TICAgICovICcweGMxODM2MDIxN2Q4ZjdhYjVlN2M1MTY1NjY3NjFlYTEyY2U3ZjlkNzInOiA0MGUzLFxyXG4gICAgLyogSE9QUiAgICovICcweGY1NTgxZGZlZmQ4ZmIwZTRhZWM1MjZiZTY1OWNmYWIxZjhjNzgxZGEnOiA3MGUzLFxyXG4gICAgLyogTERPICAgICovICcweDVhOThmY2JlYTUxNmNmMDY4NTcyMTU3NzlmZDgxMmNhM2JlZjFiMzInOiAxMDBlMyxcclxuICAgIC8qIExJTksgICAqLyAnMHg1MTQ5MTA3NzFhZjljYTY1NmFmODQwZGZmODNlODI2NGVjZjk4NmNhJzogMTVlMyxcclxuICAgIC8qIE9DRUFOICAqLyAnMHg5NjdkYTQwNDhjZDA3YWIzNzg1NWMwOTBhYWYzNjZlNGNlMWI5ZjQ4JzogMTVlMyxcclxuICAgIC8qIFNISUIgICAqLyAnMHg5NWFkNjFiMGExNTBkNzkyMTlkY2Y2NGUxZTZjYzAxZjBiNjRjNGNlJzogMTVlMyxcclxuICAgIC8qIFNOWCAgICAqLyAnMHhjMDExYTczZWU4NTc2ZmI0NmY1ZTFjNTc1MWNhM2I5ZmUwYWYyYTZmJzogNzBlMyxcclxuICAgIC8qIFVNQSAgICAqLyAnMHgwNGZhMGQyMzVjNGFiZjRiY2Y0Nzg3YWY0Y2Y0NDdkZTU3MmVmODI4JzogNzVlMyxcclxuICAgIC8qIFVOSSAgICAqLyAnMHgxZjk4NDBhODVkNWFmNWJmMWQxNzYyZjkyNWJkYWRkYzQyMDFmOTg0JzogMTBlMyxcclxuICAgIC8qIFVTREMgICAqLyAnMHhhMGI4Njk5MWM2MjE4YjM2YzFkMTlkNGEyZTllYjBjZTM2MDZlYjQ4JzogMjVlMyxcclxuICAgIC8qIFVTRFQgICAqLyAnMHhkYWMxN2Y5NThkMmVlNTIzYTIyMDYyMDY5OTQ1OTdjMTNkODMxZWM3JzogMjBlMyxcclxuICAgIC8qIFlGSSAgICAqLyAnMHgwYmM1MjljMDBjNjQwMWFlZjZkMjIwYmU4YzZlYTE2NjdmNmFkOTNlJzogMTBlMyxcclxufTtcclxuXHJcbi8vIElmIHRoZSBidXkgdG9rZW4gaXMgbmF0aXZlLCBhbiB1bndyYXAgb3BlcmF0aW9uIGlzIG5lZWRlZCB3aGljaCBjb3N0IHVzIGFkZGl0aW9uYWwgZ2FzLlxyXG4vLyAkZXNsaW50LWZpeC1tZSBodHRwczovL2dpdGh1Yi5jb20vcmhpbm9kYXZpZC9lc2xpbnQtZml4LW1lXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8taW5mZXJyYWJsZS10eXBlc1xyXG5jb25zdCBVTldSQVBfUFJFTUlVTTogbnVtYmVyID0gNmUzO1xyXG5cclxuLyoqXHJcbiAqIFByZXBhcmVzIHRoZSBnYXMgZXN0aW1hdGUgZm9yIGFuIFJGUU0gdHJhZGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVHYXNFc3RpbWF0ZShcclxuICAgIG1ha2VyVG9rZW46IHN0cmluZyxcclxuICAgIHRha2VyVG9rZW46IHN0cmluZyxcclxuICAgIG9yZGVyVHlwZTogJ3JmcScgfCAnb3RjJyxcclxuICAgIGlzVW53cmFwOiBib29sZWFuLFxyXG4pOiBudW1iZXIge1xyXG4gICAgY29uc3QgbWFrZXJUb2tlblByZW1pdW06IG51bWJlciA9IFRPS0VOX0dBU19QUkVNSVVNW21ha2VyVG9rZW4udG9Mb3dlckNhc2UoKV0gfHwgMDtcclxuICAgIGNvbnN0IHRha2VyVG9rZW5QcmVtaXVtOiBudW1iZXIgPSBUT0tFTl9HQVNfUFJFTUlVTVt0YWtlclRva2VuLnRvTG93ZXJDYXNlKCldIHx8IDA7XHJcbiAgICBjb25zdCB1bndyYXBQcmVtaXVtOiBudW1iZXIgPSBpc1Vud3JhcCA/IFVOV1JBUF9QUkVNSVVNIDogMDtcclxuICAgIGNvbnN0IGJhc2VHYXMgPSBvcmRlclR5cGUgPT09ICdvdGMnID8gUkZRTV9UWF9PVENfT1JERVJfR0FTX0VTVElNQVRFIDogUkZRTV9UWF9HQVNfRVNUSU1BVEU7XHJcblxyXG4gICAgcmV0dXJuIGJhc2VHYXMgKyBtYWtlclRva2VuUHJlbWl1bSArIHRha2VyVG9rZW5QcmVtaXVtICsgdW53cmFwUHJlbWl1bTtcclxufVxyXG4iXSwidmVyc2lvbiI6M30=