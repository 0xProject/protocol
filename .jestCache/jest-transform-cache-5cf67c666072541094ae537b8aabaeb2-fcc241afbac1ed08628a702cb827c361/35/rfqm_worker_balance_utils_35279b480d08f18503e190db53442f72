41ea3f31fc1d1e5e4fcb5c97edaff739
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isWorkerReadyAndAbleAsync = void 0;
const ethereum_types_1 = require("ethereum-types");
const logger_1 = require("../logger");
const MIN_NUM_TRADES_FOR_HEALTHCHECK = 3;
/**
 * Returns true if a metatransaction worker is able to pick up new work, i.e. the
 * worker has enough balance to trade and has no pending transactions.
 *
 * The function will also emit logs if it was to find issues.
 *
 * @param wrapper the Web3Wrapper instance
 * @param accountAddress the EOA address of the worker
 * @param accountBalance the balance of the worker
 * @param gasPriceBaseUnits the current gas price
 * @param gasEstimatePerTx the gas estimate for a transaction. If a chain supports different types of trades (for example, RFQm and metatxn),
 *                        this value should be the max gas estimate among different types.
 * @returns true if the metatransaction worker can pick up work.
 */
async function isWorkerReadyAndAbleAsync(provider, accountAddress, accountBalance, gasPriceBaseUnits, gasEstimatePerTx) {
    // Check worker has enough ETH to support 3 trades
    const minimumCostToTrade = gasPriceBaseUnits.times(gasEstimatePerTx).times(MIN_NUM_TRADES_FOR_HEALTHCHECK);
    const hasEnoughBalance = accountBalance.gte(minimumCostToTrade);
    if (!hasEnoughBalance) {
        logger_1.logger.error({
            accountAddress,
            accountBalance: accountBalance.toString(),
            minimumCostToTrade: minimumCostToTrade.toString(),
            gasPriceBaseUnits: gasPriceBaseUnits.toString(),
        }, 'Worker does not have enough balance to trade.');
    }
    if (!hasEnoughBalance) {
        return false;
    }
    // check worker has no pending transactions
    const lastNonceOnChain = await provider.getTransactionCount(accountAddress);
    const lastNoncePending = await provider.getTransactionCount(accountAddress, ethereum_types_1.BlockParamLiteral.Pending);
    const hasNoPendingTransactions = lastNonceOnChain.toString() === lastNoncePending.toString();
    if (!hasNoPendingTransactions) {
        logger_1.logger.error({
            accountAddress,
            lastNonceOnChain: lastNonceOnChain.toString(),
            lastNoncePending: lastNoncePending.toString(),
        }, 'Worker has pending transactions and cannot trade.');
    }
    return hasNoPendingTransactions;
}
exports.isWorkerReadyAndAbleAsync = isWorkerReadyAndAbleAsync;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9yZnFtX3dvcmtlcl9iYWxhbmNlX3V0aWxzLnRzIiwibWFwcGluZ3MiOiI7OztBQUNBLG1EQUFtRDtBQUduRCxzQ0FBbUM7QUFFbkMsTUFBTSw4QkFBOEIsR0FBRyxDQUFDLENBQUM7QUFFekM7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUNJLEtBQUssVUFBVSx5QkFBeUIsQ0FDM0MsUUFBNEIsRUFDNUIsY0FBc0IsRUFDdEIsY0FBeUIsRUFDekIsaUJBQTRCLEVBQzVCLGdCQUF3QjtJQUV4QixrREFBa0Q7SUFDbEQsTUFBTSxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztJQUMzRyxNQUFNLGdCQUFnQixHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNoRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7UUFDbkIsZUFBTSxDQUFDLEtBQUssQ0FDUjtZQUNJLGNBQWM7WUFDZCxjQUFjLEVBQUUsY0FBYyxDQUFDLFFBQVEsRUFBRTtZQUN6QyxrQkFBa0IsRUFBRSxrQkFBa0IsQ0FBQyxRQUFRLEVBQUU7WUFDakQsaUJBQWlCLEVBQUUsaUJBQWlCLENBQUMsUUFBUSxFQUFFO1NBQ2xELEVBQ0QsK0NBQStDLENBQ2xELENBQUM7S0FDTDtJQUNELElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUNuQixPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUVELDJDQUEyQztJQUMzQyxNQUFNLGdCQUFnQixHQUFHLE1BQU0sUUFBUSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzVFLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxRQUFRLENBQUMsbUJBQW1CLENBQUMsY0FBYyxFQUFFLGtDQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZHLE1BQU0sd0JBQXdCLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLEtBQUssZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0YsSUFBSSxDQUFDLHdCQUF3QixFQUFFO1FBQzNCLGVBQU0sQ0FBQyxLQUFLLENBQ1I7WUFDSSxjQUFjO1lBQ2QsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxFQUFFO1lBQzdDLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLFFBQVEsRUFBRTtTQUNoRCxFQUNELG1EQUFtRCxDQUN0RCxDQUFDO0tBQ0w7SUFFRCxPQUFPLHdCQUF3QixDQUFDO0FBQ3BDLENBQUM7QUF6Q0QsOERBeUNDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZHdhbHNoL2NvZGUtbG9jYWwvMHgtcmZxLWFwaS9zcmMvdXRpbHMvcmZxbV93b3JrZXJfYmFsYW5jZV91dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tICdAMHgvdXRpbHMnO1xuaW1wb3J0IHsgQmxvY2tQYXJhbUxpdGVyYWwgfSBmcm9tICdldGhlcmV1bS10eXBlcyc7XG5pbXBvcnQgeyBwcm92aWRlcnMgfSBmcm9tICdldGhlcnMnO1xuXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi9sb2dnZXInO1xuXG5jb25zdCBNSU5fTlVNX1RSQURFU19GT1JfSEVBTFRIQ0hFQ0sgPSAzO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIG1ldGF0cmFuc2FjdGlvbiB3b3JrZXIgaXMgYWJsZSB0byBwaWNrIHVwIG5ldyB3b3JrLCBpLmUuIHRoZVxuICogd29ya2VyIGhhcyBlbm91Z2ggYmFsYW5jZSB0byB0cmFkZSBhbmQgaGFzIG5vIHBlbmRpbmcgdHJhbnNhY3Rpb25zLlxuICpcbiAqIFRoZSBmdW5jdGlvbiB3aWxsIGFsc28gZW1pdCBsb2dzIGlmIGl0IHdhcyB0byBmaW5kIGlzc3Vlcy5cbiAqXG4gKiBAcGFyYW0gd3JhcHBlciB0aGUgV2ViM1dyYXBwZXIgaW5zdGFuY2VcbiAqIEBwYXJhbSBhY2NvdW50QWRkcmVzcyB0aGUgRU9BIGFkZHJlc3Mgb2YgdGhlIHdvcmtlclxuICogQHBhcmFtIGFjY291bnRCYWxhbmNlIHRoZSBiYWxhbmNlIG9mIHRoZSB3b3JrZXJcbiAqIEBwYXJhbSBnYXNQcmljZUJhc2VVbml0cyB0aGUgY3VycmVudCBnYXMgcHJpY2VcbiAqIEBwYXJhbSBnYXNFc3RpbWF0ZVBlclR4IHRoZSBnYXMgZXN0aW1hdGUgZm9yIGEgdHJhbnNhY3Rpb24uIElmIGEgY2hhaW4gc3VwcG9ydHMgZGlmZmVyZW50IHR5cGVzIG9mIHRyYWRlcyAoZm9yIGV4YW1wbGUsIFJGUW0gYW5kIG1ldGF0eG4pLFxuICogICAgICAgICAgICAgICAgICAgICAgICB0aGlzIHZhbHVlIHNob3VsZCBiZSB0aGUgbWF4IGdhcyBlc3RpbWF0ZSBhbW9uZyBkaWZmZXJlbnQgdHlwZXMuXG4gKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBtZXRhdHJhbnNhY3Rpb24gd29ya2VyIGNhbiBwaWNrIHVwIHdvcmsuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpc1dvcmtlclJlYWR5QW5kQWJsZUFzeW5jKFxuICAgIHByb3ZpZGVyOiBwcm92aWRlcnMuUHJvdmlkZXIsXG4gICAgYWNjb3VudEFkZHJlc3M6IHN0cmluZyxcbiAgICBhY2NvdW50QmFsYW5jZTogQmlnTnVtYmVyLFxuICAgIGdhc1ByaWNlQmFzZVVuaXRzOiBCaWdOdW1iZXIsXG4gICAgZ2FzRXN0aW1hdGVQZXJUeDogbnVtYmVyLFxuKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgLy8gQ2hlY2sgd29ya2VyIGhhcyBlbm91Z2ggRVRIIHRvIHN1cHBvcnQgMyB0cmFkZXNcbiAgICBjb25zdCBtaW5pbXVtQ29zdFRvVHJhZGUgPSBnYXNQcmljZUJhc2VVbml0cy50aW1lcyhnYXNFc3RpbWF0ZVBlclR4KS50aW1lcyhNSU5fTlVNX1RSQURFU19GT1JfSEVBTFRIQ0hFQ0spO1xuICAgIGNvbnN0IGhhc0Vub3VnaEJhbGFuY2UgPSBhY2NvdW50QmFsYW5jZS5ndGUobWluaW11bUNvc3RUb1RyYWRlKTtcbiAgICBpZiAoIWhhc0Vub3VnaEJhbGFuY2UpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGFjY291bnRBZGRyZXNzLFxuICAgICAgICAgICAgICAgIGFjY291bnRCYWxhbmNlOiBhY2NvdW50QmFsYW5jZS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIG1pbmltdW1Db3N0VG9UcmFkZTogbWluaW11bUNvc3RUb1RyYWRlLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgZ2FzUHJpY2VCYXNlVW5pdHM6IGdhc1ByaWNlQmFzZVVuaXRzLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ1dvcmtlciBkb2VzIG5vdCBoYXZlIGVub3VnaCBiYWxhbmNlIHRvIHRyYWRlLicsXG4gICAgICAgICk7XG4gICAgfVxuICAgIGlmICghaGFzRW5vdWdoQmFsYW5jZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgd29ya2VyIGhhcyBubyBwZW5kaW5nIHRyYW5zYWN0aW9uc1xuICAgIGNvbnN0IGxhc3ROb25jZU9uQ2hhaW4gPSBhd2FpdCBwcm92aWRlci5nZXRUcmFuc2FjdGlvbkNvdW50KGFjY291bnRBZGRyZXNzKTtcbiAgICBjb25zdCBsYXN0Tm9uY2VQZW5kaW5nID0gYXdhaXQgcHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb25Db3VudChhY2NvdW50QWRkcmVzcywgQmxvY2tQYXJhbUxpdGVyYWwuUGVuZGluZyk7XG4gICAgY29uc3QgaGFzTm9QZW5kaW5nVHJhbnNhY3Rpb25zID0gbGFzdE5vbmNlT25DaGFpbi50b1N0cmluZygpID09PSBsYXN0Tm9uY2VQZW5kaW5nLnRvU3RyaW5nKCk7XG4gICAgaWYgKCFoYXNOb1BlbmRpbmdUcmFuc2FjdGlvbnMpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGFjY291bnRBZGRyZXNzLFxuICAgICAgICAgICAgICAgIGxhc3ROb25jZU9uQ2hhaW46IGxhc3ROb25jZU9uQ2hhaW4udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBsYXN0Tm9uY2VQZW5kaW5nOiBsYXN0Tm9uY2VQZW5kaW5nLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ1dvcmtlciBoYXMgcGVuZGluZyB0cmFuc2FjdGlvbnMgYW5kIGNhbm5vdCB0cmFkZS4nLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBoYXNOb1BlbmRpbmdUcmFuc2FjdGlvbnM7XG59XG4iXSwidmVyc2lvbiI6M30=