{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfq_blocked_address_utils_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfq_blocked_address_utils_test.ts"],"sourcesContent":["import { expect } from 'chai';\r\nimport { DataSource } from 'typeorm';\r\n\r\nimport { ONE_MINUTE_MS } from '../../src/core/constants';\r\nimport { BlockedAddressEntity } from '../../src/entities/BlockedAddressEntity';\r\nimport { RfqBlockedAddressUtils } from '../../src/utils/rfq_blocked_address_utils';\r\nimport { setupDependenciesAsync, TeardownDependenciesFunctionHandle } from '../test_utils/deployment';\r\nimport { initDbDataSourceAsync } from '../test_utils/initDbDataSourceAsync';\r\n\r\nconst ttlMs = 50;\r\n\r\n// tslint:disable-next-line: custom-no-magic-numbers\r\njest.setTimeout(ONE_MINUTE_MS * 2);\r\nlet teardownDependencies: TeardownDependenciesFunctionHandle;\r\n\r\ndescribe('rfqBlockedAddressUtils', () => {\r\n    let dataSource: DataSource;\r\n    let rfqBlacklistUtils: RfqBlockedAddressUtils;\r\n\r\n    beforeAll(async () => {\r\n        teardownDependencies = await setupDependenciesAsync(['postgres']);\r\n        // tslint:disable-next-line: custom-no-magic-numbers\r\n        dataSource = await initDbDataSourceAsync();\r\n        rfqBlacklistUtils = new RfqBlockedAddressUtils(dataSource, new Set(), ttlMs);\r\n    });\r\n\r\n    afterAll(async () => {\r\n        const wasKilled = teardownDependencies();\r\n        if (!wasKilled) {\r\n            throw new Error('Dependencies failed to shut down');\r\n        }\r\n    });\r\n\r\n    beforeEach(async () => {\r\n        rfqBlacklistUtils = new RfqBlockedAddressUtils(dataSource, new Set(), ttlMs);\r\n    });\r\n\r\n    afterEach(async () => {\r\n        await dataSource.query('TRUNCATE TABLE blocked_addresses CASCADE;');\r\n        await dataSource.query('TRUNCATE TABLE rfqm_jobs CASCADE;');\r\n        await dataSource.query('TRUNCATE TABLE rfqm_quotes CASCADE;');\r\n        await dataSource.query('TRUNCATE TABLE rfqm_transaction_submissions CASCADE;');\r\n        await dataSource.query('TRUNCATE TABLE rfqm_v2_jobs CASCADE;');\r\n        await dataSource.query('TRUNCATE TABLE rfqm_v2_quotes CASCADE;');\r\n        await dataSource.query('TRUNCATE TABLE rfqm_v2_transaction_submissions CASCADE;');\r\n    });\r\n\r\n    describe('blocked_addresses table', () => {\r\n        it('should only allow lower case insertions', async () => {\r\n            const sampleBadAddress = '0xA10612Ee5432B6395d1F0d6fB2601299a1c64274';\r\n\r\n            try {\r\n                await dataSource.getRepository(BlockedAddressEntity).save({\r\n                    address: sampleBadAddress,\r\n                });\r\n                expect.fail('should throw');\r\n            } catch (err) {\r\n                expect(err.message).to.match(/violates check constraint/);\r\n            }\r\n\r\n            try {\r\n                await dataSource.getRepository(BlockedAddressEntity).save({\r\n                    address: sampleBadAddress.toLowerCase(),\r\n                });\r\n            } catch (err) {\r\n                expect.fail('lower case should not throw');\r\n            }\r\n        });\r\n    });\r\n\r\n    it('should use stale values via isBlocked', async () => {\r\n        const sampleBadAddress = '0xA10612Ee5432B6395d1F0d6fB2601299a1c64274';\r\n        expect(rfqBlacklistUtils.isBlocked(sampleBadAddress)).to.equal(false);\r\n\r\n        // Add it to the blocked list\r\n        await dataSource.getRepository(BlockedAddressEntity).save({\r\n            address: sampleBadAddress.toLowerCase(),\r\n        });\r\n\r\n        expect(rfqBlacklistUtils.isBlocked(sampleBadAddress)).to.equal(false);\r\n    });\r\n\r\n    it('should use fresh values after the update is complete', async () => {\r\n        const sampleBadAddress = '0xB10612Ee5432B6395d1F0d6fB2601299a1c64274';\r\n\r\n        // Add it to the blocked list\r\n        await dataSource.getRepository(BlockedAddressEntity).save({\r\n            address: sampleBadAddress.toLowerCase(),\r\n        });\r\n\r\n        // Initally not blocked\r\n        const isBlocked_t0 = rfqBlacklistUtils.isBlocked(sampleBadAddress);\r\n        expect(isBlocked_t0).to.equal(false);\r\n\r\n        // Await for the update to complete\r\n        await rfqBlacklistUtils.completeUpdateAsync();\r\n\r\n        // Now should be blocked\r\n        const isBlocked_t1 = rfqBlacklistUtils.isBlocked(sampleBadAddress);\r\n        expect(isBlocked_t1).to.equal(true);\r\n    });\r\n\r\n    it('should be case insensitive', async () => {\r\n        const sampleBadAddress = '0xC10612Ee5432B6395d1F0d6fB2601299a1c64274';\r\n        await dataSource.getRepository(BlockedAddressEntity).save({\r\n            address: sampleBadAddress.toLowerCase(),\r\n        });\r\n\r\n        // Trigger the update and wait for completion\r\n        rfqBlacklistUtils.isBlocked(sampleBadAddress);\r\n        await rfqBlacklistUtils.completeUpdateAsync();\r\n\r\n        const isChecksumBlocked = rfqBlacklistUtils.isBlocked(sampleBadAddress);\r\n        const isLowerCaseBlocked = rfqBlacklistUtils.isBlocked(sampleBadAddress.toLowerCase());\r\n        const isUpperCaseBlocked = rfqBlacklistUtils.isBlocked(sampleBadAddress.toUpperCase());\r\n\r\n        expect(isChecksumBlocked).to.equal(true);\r\n        expect(isLowerCaseBlocked).to.equal(true);\r\n        expect(isUpperCaseBlocked).to.equal(true);\r\n    });\r\n});\r\n// tslint:disable-line:max-file-line-count\r\n"],"version":3}