c53b2eabaac48421e7f0abf81d1ba4fd
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const constants_1 = require("../../src/core/constants");
const BlockedAddressEntity_1 = require("../../src/entities/BlockedAddressEntity");
const rfq_blocked_address_utils_1 = require("../../src/utils/rfq_blocked_address_utils");
const deployment_1 = require("../test_utils/deployment");
const initDbDataSourceAsync_1 = require("../test_utils/initDbDataSourceAsync");
const ttlMs = 50;
// tslint:disable-next-line: custom-no-magic-numbers
jest.setTimeout(constants_1.ONE_MINUTE_MS * 2);
let teardownDependencies;
describe('rfqBlockedAddressUtils', () => {
    let dataSource;
    let rfqBlacklistUtils;
    beforeAll(async () => {
        teardownDependencies = await (0, deployment_1.setupDependenciesAsync)(['postgres']);
        // tslint:disable-next-line: custom-no-magic-numbers
        dataSource = await (0, initDbDataSourceAsync_1.initDbDataSourceAsync)();
        rfqBlacklistUtils = new rfq_blocked_address_utils_1.RfqBlockedAddressUtils(dataSource, new Set(), ttlMs);
    });
    afterAll(async () => {
        const wasKilled = teardownDependencies();
        if (!wasKilled) {
            throw new Error('Dependencies failed to shut down');
        }
    });
    beforeEach(async () => {
        rfqBlacklistUtils = new rfq_blocked_address_utils_1.RfqBlockedAddressUtils(dataSource, new Set(), ttlMs);
    });
    afterEach(async () => {
        await dataSource.query('TRUNCATE TABLE blocked_addresses CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_jobs CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_quotes CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_transaction_submissions CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_v2_jobs CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_v2_quotes CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_v2_transaction_submissions CASCADE;');
    });
    describe('blocked_addresses table', () => {
        it('should only allow lower case insertions', async () => {
            const sampleBadAddress = '0xA10612Ee5432B6395d1F0d6fB2601299a1c64274';
            try {
                await dataSource.getRepository(BlockedAddressEntity_1.BlockedAddressEntity).save({
                    address: sampleBadAddress,
                });
                chai_1.expect.fail('should throw');
            }
            catch (err) {
                (0, chai_1.expect)(err.message).to.match(/violates check constraint/);
            }
            try {
                await dataSource.getRepository(BlockedAddressEntity_1.BlockedAddressEntity).save({
                    address: sampleBadAddress.toLowerCase(),
                });
            }
            catch (err) {
                chai_1.expect.fail('lower case should not throw');
            }
        });
    });
    it('should use stale values via isBlocked', async () => {
        const sampleBadAddress = '0xA10612Ee5432B6395d1F0d6fB2601299a1c64274';
        (0, chai_1.expect)(rfqBlacklistUtils.isBlocked(sampleBadAddress)).to.equal(false);
        // Add it to the blocked list
        await dataSource.getRepository(BlockedAddressEntity_1.BlockedAddressEntity).save({
            address: sampleBadAddress.toLowerCase(),
        });
        (0, chai_1.expect)(rfqBlacklistUtils.isBlocked(sampleBadAddress)).to.equal(false);
    });
    it('should use fresh values after the update is complete', async () => {
        const sampleBadAddress = '0xB10612Ee5432B6395d1F0d6fB2601299a1c64274';
        // Add it to the blocked list
        await dataSource.getRepository(BlockedAddressEntity_1.BlockedAddressEntity).save({
            address: sampleBadAddress.toLowerCase(),
        });
        // Initally not blocked
        const isBlocked_t0 = rfqBlacklistUtils.isBlocked(sampleBadAddress);
        (0, chai_1.expect)(isBlocked_t0).to.equal(false);
        // Await for the update to complete
        await rfqBlacklistUtils.completeUpdateAsync();
        // Now should be blocked
        const isBlocked_t1 = rfqBlacklistUtils.isBlocked(sampleBadAddress);
        (0, chai_1.expect)(isBlocked_t1).to.equal(true);
    });
    it('should be case insensitive', async () => {
        const sampleBadAddress = '0xC10612Ee5432B6395d1F0d6fB2601299a1c64274';
        await dataSource.getRepository(BlockedAddressEntity_1.BlockedAddressEntity).save({
            address: sampleBadAddress.toLowerCase(),
        });
        // Trigger the update and wait for completion
        rfqBlacklistUtils.isBlocked(sampleBadAddress);
        await rfqBlacklistUtils.completeUpdateAsync();
        const isChecksumBlocked = rfqBlacklistUtils.isBlocked(sampleBadAddress);
        const isLowerCaseBlocked = rfqBlacklistUtils.isBlocked(sampleBadAddress.toLowerCase());
        const isUpperCaseBlocked = rfqBlacklistUtils.isBlocked(sampleBadAddress.toUpperCase());
        (0, chai_1.expect)(isChecksumBlocked).to.equal(true);
        (0, chai_1.expect)(isLowerCaseBlocked).to.equal(true);
        (0, chai_1.expect)(isUpperCaseBlocked).to.equal(true);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,