{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/quoteRequestor/RefreshingQuoteRequestor.ts","mappings":";;;AAKA,iDAAkD;AAElD,kEAA6D;AAE7D,yDAAmD;AAEnD,qDAAwF;AAExF,wHAAwH;AACxH,oDAAoD;AACpD,MAAM,wBAAwB,GAAG,yBAAa,GAAG,EAAE,CAAC;AAEpD;;;;GAIG;AACH,MAAa,wBAAwB;IAGjC,YACqB,gBAAiC,EACjC,yBAAwC,EACxC,YAA8D,EAC9D,kBAA0B,wBAAwB;QAHlD,qBAAgB,GAAhB,gBAAgB,CAAiB;QACjC,8BAAyB,GAAzB,yBAAyB,CAAe;QACxC,iBAAY,GAAZ,YAAY,CAAkD;QAC9D,oBAAe,GAAf,eAAe,CAAmC;QAEnE,IAAI,CAAC,QAAQ,GAAG,gCAAa,CAAC;QAC9B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACpD,IAAI,CAAC,gBAAgB,CAAC,EAAE,CACpB,mCAAe,CAAC,eAAe,EAC/B,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAC9D,CAAC;IACN,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,gCAAgC,CACzC,UAAkB,EAClB,UAAkB,EAClB,eAA0B,EAC1B,eAAgC,EAChC,eAAsC,EACtC,OAAuB;QAEvB,OAAO,IAAI,CAAC,eAAe,CAAC,gCAAgC,CACxD,UAAU,EACV,UAAU,EACV,eAAe,EACf,eAAe,EACf,eAAe,EACf,OAAO,CACV,CAAC;IACN,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,0BAA0B,CACnC,UAAkB,EAAE,cAAc;IAClC,UAAkB,EAAE,cAAc;IAClC,eAA0B,EAC1B,eAAgC,EAChC,eAAsC,EACtC,OAAuB;QAEvB,OAAO,IAAI,CAAC,eAAe,CAAC,0BAA0B,CAClD,UAAU,EACV,UAAU,EACV,eAAe,EACf,eAAe,EACf,eAAe,EACf,OAAO,CACV,CAAC;IACN,CAAC;IAED;;;OAGG;IACI,uBAAuB,CAAC,SAAoB;QAC/C,OAAO,IAAI,CAAC,eAAe,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;IACnE,CAAC;IAED;;;OAGG;IACK,qBAAqB;QACzB,MAAM,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,EAAE,CAAC;QAC1E,OAAO,IAAI,+BAAc,CACrB,iBAAiB,EACjB,IAAI,CAAC,yBAAyB,EAC9B,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,QAAQ,CAChB,CAAC;IACN,CAAC;CACJ;AAnFD,4DAmFC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/quoteRequestor/RefreshingQuoteRequestor.ts"],"sourcesContent":["import { Signature } from '@0x/protocol-utils';\nimport type { MarketOperation } from '@0x/types';\nimport { BigNumber } from '@0x/utils';\nimport { AxiosInstance } from 'axios';\n\nimport { ONE_SECOND_MS } from '../core/constants';\nimport type { SignedNativeOrder } from '../core/types';\nimport { RfqMakerManager } from '../utils/rfq_maker_manager';\n\nimport { METRICS_PROXY } from './MetricsProxyImpl';\nimport type { RfqRequestOpts } from './QuoteRequestor';\nimport { MetricsProxy, QuoteRequestor, V4RFQIndicativeQuoteMM } from './QuoteRequestor';\n\n// This number should not be greater than 90s. Otherwise, the RFQt quotes from Jump and WM are likely to be filtered out\n// tslint:disable-next-line: custom-no-magic-numbers\nconst DEFAULT_EXPIRY_BUFFER_MS = ONE_SECOND_MS * 80;\n\n/**\n * A wrapper of `QuoteRequestor` constructed with an instance of `RfqMakerManager`\n * instead of `rfqAssetOfferings`. This allows the underlying Quote Requestor\n * to be refreshed with the pairs of RfqMakerManager are refreshed.\n */\nexport class RefreshingQuoteRequestor {\n    private _quoteRequestor: QuoteRequestor;\n    private readonly _metrics: MetricsProxy;\n    constructor(\n        private readonly _rfqMakerManager: RfqMakerManager,\n        private readonly _quoteRequestorHttpClient: AxiosInstance,\n        private readonly _altRfqCreds?: { altRfqApiKey: string; altRfqProfile: string },\n        private readonly _expiryBufferMs: number = DEFAULT_EXPIRY_BUFFER_MS,\n    ) {\n        this._metrics = METRICS_PROXY;\n        this._quoteRequestor = this._createQuoteRequestor();\n        this._rfqMakerManager.on(\n            RfqMakerManager.REFRESHED_EVENT,\n            () => (this._quoteRequestor = this._createQuoteRequestor()),\n        );\n    }\n\n    /**\n     * Passthrough to the internal `QuoteRequestor`'s `requestRfqtIndicativeQuotesAsync`\n     * method.\n     */\n    public async requestRfqtIndicativeQuotesAsync(\n        makerToken: string,\n        takerToken: string,\n        assetFillAmount: BigNumber,\n        marketOperation: MarketOperation,\n        comparisonPrice: BigNumber | undefined,\n        options: RfqRequestOpts,\n    ): Promise<V4RFQIndicativeQuoteMM[]> {\n        return this._quoteRequestor.requestRfqtIndicativeQuotesAsync(\n            makerToken,\n            takerToken,\n            assetFillAmount,\n            marketOperation,\n            comparisonPrice,\n            options,\n        );\n    }\n\n    /**\n     * Passthrough to the internal `QuoteRequestor`'s `requestRfqtFirmQuotesAsync`\n     * method.\n     */\n    public async requestRfqtFirmQuotesAsync(\n        makerToken: string, // maker token\n        takerToken: string, // taker token\n        assetFillAmount: BigNumber,\n        marketOperation: MarketOperation,\n        comparisonPrice: BigNumber | undefined,\n        options: RfqRequestOpts,\n    ): Promise<SignedNativeOrder[]> {\n        return this._quoteRequestor.requestRfqtFirmQuotesAsync(\n            makerToken,\n            takerToken,\n            assetFillAmount,\n            marketOperation,\n            comparisonPrice,\n            options,\n        );\n    }\n\n    /**\n     * Passthrough to the internal `QuoteRequestor`'s `getMakerUriForSignature`\n     * method.\n     */\n    public getMakerUriForSignature(signature: Signature): string | undefined {\n        return this._quoteRequestor.getMakerUriForSignature(signature);\n    }\n\n    /**\n     * Handler for when the RFQ Maker Manager emits a pairs refreshed event.\n     * Creates a new `QuoteRequestor` instance with new pairs.\n     */\n    private _createQuoteRequestor(): QuoteRequestor {\n        const rfqAssetOfferings = this._rfqMakerManager.getRfqtV1MakerOfferings();\n        return new QuoteRequestor(\n            rfqAssetOfferings,\n            this._quoteRequestorHttpClient,\n            this._altRfqCreds,\n            this._expiryBufferMs,\n            this._metrics,\n        );\n    }\n}\n"],"version":3}