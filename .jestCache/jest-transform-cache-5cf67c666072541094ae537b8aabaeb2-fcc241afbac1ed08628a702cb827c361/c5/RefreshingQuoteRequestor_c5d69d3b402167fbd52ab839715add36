32061ef8102ac0238e003f601a5731ec
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefreshingQuoteRequestor = void 0;
const constants_1 = require("../core/constants");
const rfq_maker_manager_1 = require("../utils/rfq_maker_manager");
const MetricsProxyImpl_1 = require("./MetricsProxyImpl");
const QuoteRequestor_1 = require("./QuoteRequestor");
// This number should not be greater than 90s. Otherwise, the RFQt quotes from Jump and WM are likely to be filtered out
// tslint:disable-next-line: custom-no-magic-numbers
const DEFAULT_EXPIRY_BUFFER_MS = constants_1.ONE_SECOND_MS * 80;
/**
 * A wrapper of `QuoteRequestor` constructed with an instance of `RfqMakerManager`
 * instead of `rfqAssetOfferings`. This allows the underlying Quote Requestor
 * to be refreshed with the pairs of RfqMakerManager are refreshed.
 */
class RefreshingQuoteRequestor {
    constructor(_rfqMakerManager, _quoteRequestorHttpClient, _altRfqCreds, _expiryBufferMs = DEFAULT_EXPIRY_BUFFER_MS) {
        this._rfqMakerManager = _rfqMakerManager;
        this._quoteRequestorHttpClient = _quoteRequestorHttpClient;
        this._altRfqCreds = _altRfqCreds;
        this._expiryBufferMs = _expiryBufferMs;
        this._metrics = MetricsProxyImpl_1.METRICS_PROXY;
        this._quoteRequestor = this._createQuoteRequestor();
        this._rfqMakerManager.on(rfq_maker_manager_1.RfqMakerManager.REFRESHED_EVENT, () => (this._quoteRequestor = this._createQuoteRequestor()));
    }
    /**
     * Passthrough to the internal `QuoteRequestor`'s `requestRfqtIndicativeQuotesAsync`
     * method.
     */
    async requestRfqtIndicativeQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, options) {
        return this._quoteRequestor.requestRfqtIndicativeQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, options);
    }
    /**
     * Passthrough to the internal `QuoteRequestor`'s `requestRfqtFirmQuotesAsync`
     * method.
     */
    async requestRfqtFirmQuotesAsync(makerToken, // maker token
    takerToken, // taker token
    assetFillAmount, marketOperation, comparisonPrice, options) {
        return this._quoteRequestor.requestRfqtFirmQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, options);
    }
    /**
     * Passthrough to the internal `QuoteRequestor`'s `getMakerUriForSignature`
     * method.
     */
    getMakerUriForSignature(signature) {
        return this._quoteRequestor.getMakerUriForSignature(signature);
    }
    /**
     * Handler for when the RFQ Maker Manager emits a pairs refreshed event.
     * Creates a new `QuoteRequestor` instance with new pairs.
     */
    _createQuoteRequestor() {
        const rfqAssetOfferings = this._rfqMakerManager.getRfqtV1MakerOfferings();
        return new QuoteRequestor_1.QuoteRequestor(rfqAssetOfferings, this._quoteRequestorHttpClient, this._altRfqCreds, this._expiryBufferMs, this._metrics);
    }
}
exports.RefreshingQuoteRequestor = RefreshingQuoteRequestor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9xdW90ZVJlcXVlc3Rvci9SZWZyZXNoaW5nUXVvdGVSZXF1ZXN0b3IudHMiLCJtYXBwaW5ncyI6Ijs7O0FBS0EsaURBQWtEO0FBRWxELGtFQUE2RDtBQUU3RCx5REFBbUQ7QUFFbkQscURBQXdGO0FBRXhGLHdIQUF3SDtBQUN4SCxvREFBb0Q7QUFDcEQsTUFBTSx3QkFBd0IsR0FBRyx5QkFBYSxHQUFHLEVBQUUsQ0FBQztBQUVwRDs7OztHQUlHO0FBQ0gsTUFBYSx3QkFBd0I7SUFHakMsWUFDcUIsZ0JBQWlDLEVBQ2pDLHlCQUF3QyxFQUN4QyxZQUE4RCxFQUM5RCxrQkFBMEIsd0JBQXdCO1FBSGxELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBaUI7UUFDakMsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUFlO1FBQ3hDLGlCQUFZLEdBQVosWUFBWSxDQUFrRDtRQUM5RCxvQkFBZSxHQUFmLGVBQWUsQ0FBbUM7UUFFbkUsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQ0FBYSxDQUFDO1FBQzlCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDcEQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FDcEIsbUNBQWUsQ0FBQyxlQUFlLEVBQy9CLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUM5RCxDQUFDO0lBQ04sQ0FBQztJQUVEOzs7T0FHRztJQUNJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FDekMsVUFBa0IsRUFDbEIsVUFBa0IsRUFDbEIsZUFBMEIsRUFDMUIsZUFBZ0MsRUFDaEMsZUFBc0MsRUFDdEMsT0FBdUI7UUFFdkIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLGdDQUFnQyxDQUN4RCxVQUFVLEVBQ1YsVUFBVSxFQUNWLGVBQWUsRUFDZixlQUFlLEVBQ2YsZUFBZSxFQUNmLE9BQU8sQ0FDVixDQUFDO0lBQ04sQ0FBQztJQUVEOzs7T0FHRztJQUNJLEtBQUssQ0FBQywwQkFBMEIsQ0FDbkMsVUFBa0IsRUFBRSxjQUFjO0lBQ2xDLFVBQWtCLEVBQUUsY0FBYztJQUNsQyxlQUEwQixFQUMxQixlQUFnQyxFQUNoQyxlQUFzQyxFQUN0QyxPQUF1QjtRQUV2QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsMEJBQTBCLENBQ2xELFVBQVUsRUFDVixVQUFVLEVBQ1YsZUFBZSxFQUNmLGVBQWUsRUFDZixlQUFlLEVBQ2YsT0FBTyxDQUNWLENBQUM7SUFDTixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksdUJBQXVCLENBQUMsU0FBb0I7UUFDL0MsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7O09BR0c7SUFDSyxxQkFBcUI7UUFDekIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUMxRSxPQUFPLElBQUksK0JBQWMsQ0FDckIsaUJBQWlCLEVBQ2pCLElBQUksQ0FBQyx5QkFBeUIsRUFDOUIsSUFBSSxDQUFDLFlBQVksRUFDakIsSUFBSSxDQUFDLGVBQWUsRUFDcEIsSUFBSSxDQUFDLFFBQVEsQ0FDaEIsQ0FBQztJQUNOLENBQUM7Q0FDSjtBQW5GRCw0REFtRkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9xdW90ZVJlcXVlc3Rvci9SZWZyZXNoaW5nUXVvdGVSZXF1ZXN0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2lnbmF0dXJlIH0gZnJvbSAnQDB4L3Byb3RvY29sLXV0aWxzJztcbmltcG9ydCB0eXBlIHsgTWFya2V0T3BlcmF0aW9uIH0gZnJvbSAnQDB4L3R5cGVzJztcbmltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gJ0AweC91dGlscyc7XG5pbXBvcnQgeyBBeGlvc0luc3RhbmNlIH0gZnJvbSAnYXhpb3MnO1xuXG5pbXBvcnQgeyBPTkVfU0VDT05EX01TIH0gZnJvbSAnLi4vY29yZS9jb25zdGFudHMnO1xuaW1wb3J0IHR5cGUgeyBTaWduZWROYXRpdmVPcmRlciB9IGZyb20gJy4uL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgUmZxTWFrZXJNYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbHMvcmZxX21ha2VyX21hbmFnZXInO1xuXG5pbXBvcnQgeyBNRVRSSUNTX1BST1hZIH0gZnJvbSAnLi9NZXRyaWNzUHJveHlJbXBsJztcbmltcG9ydCB0eXBlIHsgUmZxUmVxdWVzdE9wdHMgfSBmcm9tICcuL1F1b3RlUmVxdWVzdG9yJztcbmltcG9ydCB7IE1ldHJpY3NQcm94eSwgUXVvdGVSZXF1ZXN0b3IsIFY0UkZRSW5kaWNhdGl2ZVF1b3RlTU0gfSBmcm9tICcuL1F1b3RlUmVxdWVzdG9yJztcblxuLy8gVGhpcyBudW1iZXIgc2hvdWxkIG5vdCBiZSBncmVhdGVyIHRoYW4gOTBzLiBPdGhlcndpc2UsIHRoZSBSRlF0IHF1b3RlcyBmcm9tIEp1bXAgYW5kIFdNIGFyZSBsaWtlbHkgdG8gYmUgZmlsdGVyZWQgb3V0XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGN1c3RvbS1uby1tYWdpYy1udW1iZXJzXG5jb25zdCBERUZBVUxUX0VYUElSWV9CVUZGRVJfTVMgPSBPTkVfU0VDT05EX01TICogODA7XG5cbi8qKlxuICogQSB3cmFwcGVyIG9mIGBRdW90ZVJlcXVlc3RvcmAgY29uc3RydWN0ZWQgd2l0aCBhbiBpbnN0YW5jZSBvZiBgUmZxTWFrZXJNYW5hZ2VyYFxuICogaW5zdGVhZCBvZiBgcmZxQXNzZXRPZmZlcmluZ3NgLiBUaGlzIGFsbG93cyB0aGUgdW5kZXJseWluZyBRdW90ZSBSZXF1ZXN0b3JcbiAqIHRvIGJlIHJlZnJlc2hlZCB3aXRoIHRoZSBwYWlycyBvZiBSZnFNYWtlck1hbmFnZXIgYXJlIHJlZnJlc2hlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlZnJlc2hpbmdRdW90ZVJlcXVlc3RvciB7XG4gICAgcHJpdmF0ZSBfcXVvdGVSZXF1ZXN0b3I6IFF1b3RlUmVxdWVzdG9yO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX21ldHJpY3M6IE1ldHJpY3NQcm94eTtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfcmZxTWFrZXJNYW5hZ2VyOiBSZnFNYWtlck1hbmFnZXIsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX3F1b3RlUmVxdWVzdG9ySHR0cENsaWVudDogQXhpb3NJbnN0YW5jZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfYWx0UmZxQ3JlZHM/OiB7IGFsdFJmcUFwaUtleTogc3RyaW5nOyBhbHRSZnFQcm9maWxlOiBzdHJpbmcgfSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfZXhwaXJ5QnVmZmVyTXM6IG51bWJlciA9IERFRkFVTFRfRVhQSVJZX0JVRkZFUl9NUyxcbiAgICApIHtcbiAgICAgICAgdGhpcy5fbWV0cmljcyA9IE1FVFJJQ1NfUFJPWFk7XG4gICAgICAgIHRoaXMuX3F1b3RlUmVxdWVzdG9yID0gdGhpcy5fY3JlYXRlUXVvdGVSZXF1ZXN0b3IoKTtcbiAgICAgICAgdGhpcy5fcmZxTWFrZXJNYW5hZ2VyLm9uKFxuICAgICAgICAgICAgUmZxTWFrZXJNYW5hZ2VyLlJFRlJFU0hFRF9FVkVOVCxcbiAgICAgICAgICAgICgpID0+ICh0aGlzLl9xdW90ZVJlcXVlc3RvciA9IHRoaXMuX2NyZWF0ZVF1b3RlUmVxdWVzdG9yKCkpLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhc3N0aHJvdWdoIHRvIHRoZSBpbnRlcm5hbCBgUXVvdGVSZXF1ZXN0b3JgJ3MgYHJlcXVlc3RSZnF0SW5kaWNhdGl2ZVF1b3Rlc0FzeW5jYFxuICAgICAqIG1ldGhvZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgcmVxdWVzdFJmcXRJbmRpY2F0aXZlUXVvdGVzQXN5bmMoXG4gICAgICAgIG1ha2VyVG9rZW46IHN0cmluZyxcbiAgICAgICAgdGFrZXJUb2tlbjogc3RyaW5nLFxuICAgICAgICBhc3NldEZpbGxBbW91bnQ6IEJpZ051bWJlcixcbiAgICAgICAgbWFya2V0T3BlcmF0aW9uOiBNYXJrZXRPcGVyYXRpb24sXG4gICAgICAgIGNvbXBhcmlzb25QcmljZTogQmlnTnVtYmVyIHwgdW5kZWZpbmVkLFxuICAgICAgICBvcHRpb25zOiBSZnFSZXF1ZXN0T3B0cyxcbiAgICApOiBQcm9taXNlPFY0UkZRSW5kaWNhdGl2ZVF1b3RlTU1bXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcXVvdGVSZXF1ZXN0b3IucmVxdWVzdFJmcXRJbmRpY2F0aXZlUXVvdGVzQXN5bmMoXG4gICAgICAgICAgICBtYWtlclRva2VuLFxuICAgICAgICAgICAgdGFrZXJUb2tlbixcbiAgICAgICAgICAgIGFzc2V0RmlsbEFtb3VudCxcbiAgICAgICAgICAgIG1hcmtldE9wZXJhdGlvbixcbiAgICAgICAgICAgIGNvbXBhcmlzb25QcmljZSxcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFzc3Rocm91Z2ggdG8gdGhlIGludGVybmFsIGBRdW90ZVJlcXVlc3RvcmAncyBgcmVxdWVzdFJmcXRGaXJtUXVvdGVzQXN5bmNgXG4gICAgICogbWV0aG9kLlxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyByZXF1ZXN0UmZxdEZpcm1RdW90ZXNBc3luYyhcbiAgICAgICAgbWFrZXJUb2tlbjogc3RyaW5nLCAvLyBtYWtlciB0b2tlblxuICAgICAgICB0YWtlclRva2VuOiBzdHJpbmcsIC8vIHRha2VyIHRva2VuXG4gICAgICAgIGFzc2V0RmlsbEFtb3VudDogQmlnTnVtYmVyLFxuICAgICAgICBtYXJrZXRPcGVyYXRpb246IE1hcmtldE9wZXJhdGlvbixcbiAgICAgICAgY29tcGFyaXNvblByaWNlOiBCaWdOdW1iZXIgfCB1bmRlZmluZWQsXG4gICAgICAgIG9wdGlvbnM6IFJmcVJlcXVlc3RPcHRzLFxuICAgICk6IFByb21pc2U8U2lnbmVkTmF0aXZlT3JkZXJbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcXVvdGVSZXF1ZXN0b3IucmVxdWVzdFJmcXRGaXJtUXVvdGVzQXN5bmMoXG4gICAgICAgICAgICBtYWtlclRva2VuLFxuICAgICAgICAgICAgdGFrZXJUb2tlbixcbiAgICAgICAgICAgIGFzc2V0RmlsbEFtb3VudCxcbiAgICAgICAgICAgIG1hcmtldE9wZXJhdGlvbixcbiAgICAgICAgICAgIGNvbXBhcmlzb25QcmljZSxcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFzc3Rocm91Z2ggdG8gdGhlIGludGVybmFsIGBRdW90ZVJlcXVlc3RvcmAncyBgZ2V0TWFrZXJVcmlGb3JTaWduYXR1cmVgXG4gICAgICogbWV0aG9kLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNYWtlclVyaUZvclNpZ25hdHVyZShzaWduYXR1cmU6IFNpZ25hdHVyZSk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9xdW90ZVJlcXVlc3Rvci5nZXRNYWtlclVyaUZvclNpZ25hdHVyZShzaWduYXR1cmUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXIgZm9yIHdoZW4gdGhlIFJGUSBNYWtlciBNYW5hZ2VyIGVtaXRzIGEgcGFpcnMgcmVmcmVzaGVkIGV2ZW50LlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYFF1b3RlUmVxdWVzdG9yYCBpbnN0YW5jZSB3aXRoIG5ldyBwYWlycy5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9jcmVhdGVRdW90ZVJlcXVlc3RvcigpOiBRdW90ZVJlcXVlc3RvciB7XG4gICAgICAgIGNvbnN0IHJmcUFzc2V0T2ZmZXJpbmdzID0gdGhpcy5fcmZxTWFrZXJNYW5hZ2VyLmdldFJmcXRWMU1ha2VyT2ZmZXJpbmdzKCk7XG4gICAgICAgIHJldHVybiBuZXcgUXVvdGVSZXF1ZXN0b3IoXG4gICAgICAgICAgICByZnFBc3NldE9mZmVyaW5ncyxcbiAgICAgICAgICAgIHRoaXMuX3F1b3RlUmVxdWVzdG9ySHR0cENsaWVudCxcbiAgICAgICAgICAgIHRoaXMuX2FsdFJmcUNyZWRzLFxuICAgICAgICAgICAgdGhpcy5fZXhwaXJ5QnVmZmVyTXMsXG4gICAgICAgICAgICB0aGlzLl9tZXRyaWNzLFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==