{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/ZeroExApiClientTest.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/ZeroExApiClientTest.ts"],"sourcesContent":["// tslint:disable: custom-no-magic-numbers\nimport { BigNumber } from '@0x/utils';\nimport Axios, { AxiosInstance } from 'axios';\nimport AxiosMockAdapter from 'axios-mock-adapter';\nimport * as HttpStatus from 'http-status-codes';\n\nimport { ZeroExApiClient } from '../../src/utils/ZeroExApiClient';\n\nlet axiosClient: AxiosInstance;\nlet axiosMock: AxiosMockAdapter;\n\ndescribe('ZeroExApiClient', () => {\n    beforeAll(() => {\n        axiosClient = Axios.create();\n        axiosMock = new AxiosMockAdapter(axiosClient);\n    });\n\n    afterEach(() => {\n        axiosMock.reset();\n    });\n\n    describe('fetchAmmQuoteAsync', () => {\n        it('returns the AMM quote from 0x API', async () => {\n            const zeroExApiClient = new ZeroExApiClient(axiosClient, 'api-key-for-rfq', {\n                chainId: 1,\n                zeroExClientBaseUrl: 'http://0x-chain-id-1',\n            });\n\n            axiosMock.onGet('http://0x-chain-id-1/swap/v1/quote').replyOnce(HttpStatus.OK, {\n                buyAmount: '2040568023',\n                sellAmount: '1000000000000000000',\n                estimatedGas: '126183',\n                gasPrice: '73000000000',\n                expectedSlippage: '-0.0004065694347781162427479482993648',\n                decodedUniqueId: 'a-quoteid-with-timestamp',\n            });\n\n            const ammQuote = await zeroExApiClient.fetchAmmQuoteAsync({\n                makerToken: 'tokenB',\n                takerToken: 'tokenA',\n                takerAmount: new BigNumber('1000000000000000000'),\n                affiliateAddress: 'rfq-affiliate-address',\n            });\n\n            expect(axiosMock.history.get[0].headers['0x-api-key']).toBe('api-key-for-rfq');\n            expect(axiosMock.history.get[0].params).toEqual({\n                buyToken: 'tokenB',\n                sellToken: 'tokenA',\n                sellAmount: '1000000000000000000',\n                affiliateAddress: 'rfq-affiliate-address',\n                excludedSources: '0x',\n            });\n            expect(ammQuote?.makerAmount.toString()).toEqual('2040568023');\n            expect(ammQuote?.takerAmount.toString()).toEqual('1000000000000000000');\n            expect(ammQuote?.estimatedGasFeeWei.toString()).toEqual('9211359000000000');\n            expect(ammQuote?.expectedSlippage.toString()).toEqual('-0.0004065694347781162427479482993648');\n            expect(ammQuote?.decodedUniqueId).toEqual('a-quoteid-with-timestamp');\n        });\n\n        it('returns null when 0x API returns an error', async () => {\n            const zeroExApiClient = new ZeroExApiClient(axiosClient, 'api-key-for-rfq', {\n                chainId: 1,\n                zeroExClientBaseUrl: 'http://0x-chain-id-1',\n            });\n\n            axiosMock.onGet('http://0x-chain-id-1/swap/v1/quote').replyOnce(HttpStatus.INTERNAL_SERVER_ERROR);\n\n            const ammQuote = await zeroExApiClient.fetchAmmQuoteAsync({\n                makerToken: 'tokenB',\n                takerToken: 'tokenA',\n                takerAmount: new BigNumber('1000000000000000000'),\n            });\n            expect(ammQuote).toEqual(null);\n        });\n\n        it('returns null when 0x API returns unexpected response body', async () => {\n            const zeroExApiClient = new ZeroExApiClient(axiosClient, 'api-key-for-rfq', {\n                chainId: 1,\n                zeroExClientBaseUrl: 'http://0x-chain-id-1',\n            });\n\n            axiosMock.onGet('http://0x-chain-id-1/swap/v1/quote').replyOnce(HttpStatus.OK, {\n                // Missing buyAmount\n                sellAmount: '1000000000000000000',\n                estimatedGas: '126183',\n                gasPrice: '73000000000',\n                expectedSlippage: '-0.0004065694347781162427479482993648',\n                decodedUniqueId: 'a-quoteid-with-timestamp',\n            });\n\n            const ammQuote = await zeroExApiClient.fetchAmmQuoteAsync({\n                makerToken: 'tokenB',\n                takerToken: 'tokenA',\n                takerAmount: new BigNumber('1000000000000000000'),\n            });\n            expect(ammQuote).toEqual(null);\n        });\n    });\n});\n"],"version":3}