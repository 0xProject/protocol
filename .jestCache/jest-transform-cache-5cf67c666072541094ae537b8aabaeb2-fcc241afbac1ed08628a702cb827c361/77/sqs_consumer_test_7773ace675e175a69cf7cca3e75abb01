8dff87bf4a2be2fcec87aa34ea6fa231
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:custom-no-magic-numbers
// tslint:disable:no-empty
// tslint:disable:max-file-line-count
const chai_1 = require("chai");
const ts_mockito_1 = require("ts-mockito");
const sqs_client_1 = require("../../src/utils/sqs_client");
const sqs_consumer_1 = require("../../src/utils/sqs_consumer");
describe('SqsConsumer', () => {
    describe('consumeOnceAsync', () => {
        describe('beforeHandle', () => {
            it('should not call handleMessage if beforeHandle returns false', async () => {
                // Given
                const sqsClientMock = (0, ts_mockito_1.mock)(sqs_client_1.SqsClient);
                let isHandleCalled = false;
                const beforeHandle = async () => false;
                const handleMessage = async () => {
                    isHandleCalled = true;
                };
                const consumer = new sqs_consumer_1.SqsConsumer({
                    workerIndex: 0,
                    workerAddress: 'id',
                    sqsClient: sqsClientMock,
                    handleMessage,
                    beforeHandle,
                });
                // When
                await consumer.consumeOnceAsync();
                // Then
                (0, chai_1.expect)(isHandleCalled).to.equal(false);
            });
            it('should not call handleMessage if beforeHandle throws an error', async () => {
                // Given
                const sqsClientMock = (0, ts_mockito_1.mock)(sqs_client_1.SqsClient);
                let isHandleCalled = false;
                const beforeHandle = async () => Promise.reject('error!');
                const handleMessage = async () => {
                    isHandleCalled = true;
                };
                const consumer = new sqs_consumer_1.SqsConsumer({
                    workerIndex: 0,
                    workerAddress: 'id',
                    sqsClient: sqsClientMock,
                    handleMessage,
                    beforeHandle,
                });
                // When
                await consumer.consumeOnceAsync();
                // Then
                (0, chai_1.expect)(isHandleCalled).to.equal(false);
            });
            it('should call handleMessage if no beforeHandle', async () => {
                // Given
                const sqsClientMock = (0, ts_mockito_1.mock)(sqs_client_1.SqsClient);
                (0, ts_mockito_1.when)(sqsClientMock.receiveMessageAsync()).thenResolve({
                    Body: '0xdeadbeef',
                });
                const sqsClientInstance = (0, ts_mockito_1.instance)(sqsClientMock);
                let isHandleCalled = false;
                const handleMessage = async () => {
                    isHandleCalled = true;
                };
                const consumer = new sqs_consumer_1.SqsConsumer({
                    workerIndex: 0,
                    workerAddress: 'id',
                    sqsClient: sqsClientInstance,
                    handleMessage,
                });
                // When
                await consumer.consumeOnceAsync();
                // Then
                (0, chai_1.expect)(isHandleCalled).to.equal(true);
            });
            it('should call handleMessage if beforeHandle returns true', async () => {
                // Given
                const sqsClientMock = (0, ts_mockito_1.mock)(sqs_client_1.SqsClient);
                (0, ts_mockito_1.when)(sqsClientMock.receiveMessageAsync()).thenResolve({
                    Body: '0xdeadbeef',
                });
                const sqsClientInstance = (0, ts_mockito_1.instance)(sqsClientMock);
                const beforeHandle = async () => true;
                let isHandleCalled = false;
                const handleMessage = async () => {
                    isHandleCalled = true;
                };
                const consumer = new sqs_consumer_1.SqsConsumer({
                    workerIndex: 0,
                    workerAddress: 'id',
                    sqsClient: sqsClientInstance,
                    beforeHandle,
                    handleMessage,
                });
                // When
                await consumer.consumeOnceAsync();
                // Then
                (0, chai_1.expect)(isHandleCalled).to.equal(true);
            });
        });
        describe('handleMessage', () => {
            it('should not be called if no message is recieved', async () => {
                // Given
                const sqsClientMock = (0, ts_mockito_1.mock)(sqs_client_1.SqsClient);
                (0, ts_mockito_1.when)(sqsClientMock.receiveMessageAsync()).thenResolve(null);
                const sqsClientInstance = (0, ts_mockito_1.instance)(sqsClientMock);
                let isHandleCalled = false;
                const handleMessage = async () => {
                    isHandleCalled = true;
                };
                const consumer = new sqs_consumer_1.SqsConsumer({
                    workerIndex: 0,
                    workerAddress: 'id',
                    sqsClient: sqsClientInstance,
                    handleMessage,
                });
                // When
                await consumer.consumeOnceAsync();
                // Then
                (0, chai_1.expect)(isHandleCalled).to.equal(false);
            });
            it('should call changeMessageVisibility if a SqsRetryableError is encountered (triggers a retry)', async () => {
                // Given
                const sqsClientMock = (0, ts_mockito_1.mock)(sqs_client_1.SqsClient);
                (0, ts_mockito_1.when)(sqsClientMock.receiveMessageAsync()).thenResolve({
                    Body: '0xdeadbeef',
                    ReceiptHandle: '1',
                });
                const sqsClientInstance = (0, ts_mockito_1.instance)(sqsClientMock);
                const handleMessage = async () => {
                    throw new sqs_consumer_1.SqsRetryableError('error');
                };
                const consumer = new sqs_consumer_1.SqsConsumer({
                    workerIndex: 0,
                    workerAddress: 'id',
                    sqsClient: sqsClientInstance,
                    handleMessage,
                });
                // When
                await consumer.consumeOnceAsync();
                // Then
                (0, ts_mockito_1.verify)(sqsClientMock.changeMessageVisibilityAsync((0, ts_mockito_1.anyString)(), 0)).once();
            });
            it('should not call changeMessageVisibility if a non SqsRetryableError is encountered', async () => {
                // Given
                const sqsClientMock = (0, ts_mockito_1.mock)(sqs_client_1.SqsClient);
                (0, ts_mockito_1.when)(sqsClientMock.receiveMessageAsync()).thenResolve({
                    Body: '0xdeadbeef',
                    ReceiptHandle: '1',
                });
                const sqsClientInstance = (0, ts_mockito_1.instance)(sqsClientMock);
                const handleMessage = async () => {
                    throw new Error('error');
                };
                const consumer = new sqs_consumer_1.SqsConsumer({
                    workerIndex: 0,
                    workerAddress: 'id',
                    sqsClient: sqsClientInstance,
                    handleMessage,
                });
                // When
                await consumer.consumeOnceAsync();
                // Then
                (0, ts_mockito_1.verify)(sqsClientMock.changeMessageVisibilityAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            });
            it('should call deleteMessageAsync if message is successfully handled', async () => {
                // Given
                const sqsClientMock = (0, ts_mockito_1.mock)(sqs_client_1.SqsClient);
                (0, ts_mockito_1.when)(sqsClientMock.receiveMessageAsync()).thenResolve({
                    Body: '0xdeadbeef',
                    ReceiptHandle: '1',
                });
                const sqsClientInstance = (0, ts_mockito_1.instance)(sqsClientMock);
                let isHandleCalled = false;
                const handleMessage = async () => {
                    isHandleCalled = true;
                };
                const consumer = new sqs_consumer_1.SqsConsumer({
                    workerIndex: 0,
                    workerAddress: 'id',
                    sqsClient: sqsClientInstance,
                    handleMessage,
                });
                // When
                await consumer.consumeOnceAsync();
                // Then
                (0, chai_1.expect)(isHandleCalled).to.equal(true);
                (0, ts_mockito_1.verify)(sqsClientMock.deleteMessageAsync((0, ts_mockito_1.anyString)())).once();
            });
        });
        describe('afterHandle', () => {
            it('should be called once everything is successful', async () => {
                // Given
                const sqsClientMock = (0, ts_mockito_1.mock)(sqs_client_1.SqsClient);
                (0, ts_mockito_1.when)(sqsClientMock.receiveMessageAsync()).thenResolve({
                    Body: '0xdeadbeef',
                    ReceiptHandle: '1',
                });
                const sqsClientInstance = (0, ts_mockito_1.instance)(sqsClientMock);
                let isAfterCalled = false;
                const afterHandle = async () => {
                    isAfterCalled = true;
                };
                const consumer = new sqs_consumer_1.SqsConsumer({
                    workerIndex: 0,
                    workerAddress: 'id',
                    sqsClient: sqsClientInstance,
                    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                    // eslint-disable-next-line @typescript-eslint/no-empty-function
                    handleMessage: async () => { },
                    afterHandle,
                });
                // When
                await consumer.consumeOnceAsync();
                // Then
                (0, chai_1.expect)(isAfterCalled).to.equal(true);
            });
            it('should be passed an error if a non-retryable error was encountered', async () => {
                // Given
                const sqsClientMock = (0, ts_mockito_1.mock)(sqs_client_1.SqsClient);
                (0, ts_mockito_1.when)(sqsClientMock.receiveMessageAsync()).thenResolve({
                    Body: '0xdeadbeef',
                    ReceiptHandle: '1',
                });
                const sqsClientInstance = (0, ts_mockito_1.instance)(sqsClientMock);
                let isAfterCalledWithError = false;
                const consumer = new sqs_consumer_1.SqsConsumer({
                    workerIndex: 0,
                    workerAddress: 'id',
                    sqsClient: sqsClientInstance,
                    handleMessage: async () => {
                        throw new Error();
                    },
                    afterHandle: async (_, error) => {
                        if (error) {
                            isAfterCalledWithError = true;
                        }
                    },
                });
                // When
                await consumer.consumeOnceAsync();
                // Then
                (0, chai_1.expect)(isAfterCalledWithError).to.equal(true);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,