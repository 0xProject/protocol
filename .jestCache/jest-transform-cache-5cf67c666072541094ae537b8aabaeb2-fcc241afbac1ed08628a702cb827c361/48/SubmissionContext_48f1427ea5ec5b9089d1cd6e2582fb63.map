{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/SubmissionContext.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/SubmissionContext.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { providers } from 'ethers';\n\nimport { ONE_SECOND_MS } from '../core/constants';\nimport { MetaTransactionSubmissionEntity, RfqmV2TransactionSubmissionEntity } from '../entities';\nimport { RfqmJobStatus, RfqmTransactionSubmissionStatus, SubmissionContextStatus } from '../entities/types';\n\nimport { RfqBlockchainUtils } from './rfq_blockchain_utils';\n\nexport const BLOCK_FINALITY_THRESHOLD = 3;\n\ntype TransactionReceipt = providers.TransactionReceipt;\n\n// https://stackoverflow.com/questions/47632622/typescript-and-filter-boolean\nfunction isDefined<T>(value: T): value is NonNullable<T> {\n    return value !== null && value !== undefined;\n}\n\n/**\n * Encapsulates the transaction submissions for an RFQM job.\n *\n * Since one job can have multiple transactions, this class is used to treat them\n * all as one unit. It ensures consistency across transactions and makes retrieval\n * of the mined transaction receipt, if one exists, easy.\n */\nexport class SubmissionContext<T extends RfqmV2TransactionSubmissionEntity[] | MetaTransactionSubmissionEntity[]> {\n    private _transactions: T;\n    private readonly _blockchainUtils: RfqBlockchainUtils;\n    private readonly _transactionType: 0 | 2;\n\n    public static isBlockConfirmed(currentBlock: number, receiptBlockNumber: number): boolean {\n        // We specify a finality threshold of n blocks deep to have greater confidence\n        // in the transaction receipt\n        return currentBlock - receiptBlockNumber >= BLOCK_FINALITY_THRESHOLD;\n    }\n\n    /**\n     * Get corresponding job status given status of submission context for `RfqmTransactionSubmissionType.Approval`.\n     * Different submission context status would trigger different job status transition.\n     *\n     * @returns Corresponding job status.\n     */\n    public static approvalSubmissionContextStatusToJobStatus(\n        submissionContextStatus: SubmissionContextStatus,\n    ): RfqmJobStatus {\n        switch (submissionContextStatus) {\n            case SubmissionContextStatus.FailedExpired:\n                return RfqmJobStatus.FailedExpired;\n            case SubmissionContextStatus.FailedRevertedConfirmed:\n                return RfqmJobStatus.FailedRevertedConfirmed;\n            case SubmissionContextStatus.FailedRevertedUnconfirmed:\n                return RfqmJobStatus.FailedRevertedUnconfirmed;\n            case SubmissionContextStatus.PendingSubmitted:\n            case SubmissionContextStatus.SucceededConfirmed:\n            case SubmissionContextStatus.SucceededUnconfirmed:\n                // For the first version of gasless approval, a successful approval submission\n                // would still keep the job in pending submitted status\n                return RfqmJobStatus.PendingSubmitted;\n            default:\n                ((_x: never) => {\n                    throw new Error('unreachable');\n                })(submissionContextStatus);\n        }\n    }\n\n    /**\n     * Get corresponding job status given status of submission context for `RfqmTransactionSubmissionType.Trade`.\n     * Different submission context status would trigger different job status transition.\n     *\n     * @param submissionContextStatus Status of submission context.\n     */\n    public static tradeSubmissionContextStatusToJobStatus(\n        submissionContextStatus: SubmissionContextStatus,\n    ): RfqmJobStatus {\n        switch (submissionContextStatus) {\n            case SubmissionContextStatus.FailedExpired:\n                return RfqmJobStatus.FailedExpired;\n            case SubmissionContextStatus.FailedRevertedConfirmed:\n                return RfqmJobStatus.FailedRevertedConfirmed;\n            case SubmissionContextStatus.FailedRevertedUnconfirmed:\n                return RfqmJobStatus.FailedRevertedUnconfirmed;\n            case SubmissionContextStatus.PendingSubmitted:\n                return RfqmJobStatus.PendingSubmitted;\n            case SubmissionContextStatus.SucceededConfirmed:\n                return RfqmJobStatus.SucceededConfirmed;\n            case SubmissionContextStatus.SucceededUnconfirmed:\n                return RfqmJobStatus.SucceededUnconfirmed;\n            default:\n                ((_x: never) => {\n                    throw new Error('unreachable');\n                })(submissionContextStatus);\n        }\n    }\n\n    constructor(blockchainUtils: RfqBlockchainUtils, transactions: T) {\n        this._ensureTransactionsAreConsistent(transactions);\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line no-extra-boolean-cast\n        this._transactionType = !!transactions[0].gasPrice ? 0 : 2;\n        this._transactions = transactions;\n        this._blockchainUtils = blockchainUtils;\n    }\n\n    public get transactions(): T {\n        return this._transactions;\n    }\n\n    // Gets the transaction hashes for the transactions in the SubmissionContext\n    public get transactionHashes(): string[] {\n        return this._transactions.map((t) => t.transactionHash).filter(isDefined);\n    }\n\n    /**\n     * Gets the type of the transactions in the `SubmissionContext`:\n     * 0 for non-EIP1559 transactions and 2 for EIP-1559 transactions.\n     */\n    public get transactionType(): 0 | 2 {\n        return this._transactionType;\n    }\n\n    /**\n     * Adds a transaction to the SubmissionContext. Throws if the transaction has a nonce or type\n     * different than the existing transactions.\n     */\n    public addTransaction(transaction: T[number]): void {\n        // TODO (Vic): Remove any[] once https://github.com/microsoft/TypeScript/issues/44373 is fixed\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (this._transactions as any[]).push(transaction);\n        this._ensureTransactionsAreConsistent(this._transactions);\n    }\n\n    /**\n     * Gets the nonce of the transactions of the `SubmissionContext`\n     */\n    public get nonce(): number {\n        const nonce = this._transactions[0].nonce;\n        if (nonce === undefined || nonce === null) {\n            throw new Error('Transaction does not have a nonce');\n        }\n        return nonce;\n    }\n\n    /**\n     * Gets the max gas price set for any transaction in the `SubmissionContext`\n     */\n    public get maxGasPrice(): BigNumber {\n        if (this._transactionType !== 0) {\n            throw new Error('Attempted to access the max gas price of a EIP-1559 transaction set');\n        }\n        return (\n            this._transactions\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                .map((t) => t.gasPrice!)\n                .filter(Boolean)\n                .reduce((result, gasPrice) => BigNumber.maximum(result, gasPrice))\n        );\n    }\n\n    /**\n     * Gets the maximum values for the `maxFeePerGas` and the `maxPriorityFeePerGas` for a\n     * set of EIP-1559 transactions.\n     */\n    public get maxGasFees(): { maxFeePerGas: BigNumber; maxPriorityFeePerGas: BigNumber } {\n        if (this._transactionType !== 2) {\n            throw new Error('Attempted to access the max gas fees for a non-EIP-1559 transaction set');\n        }\n        return {\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            maxFeePerGas: BigNumber.maximum(...this._transactions.map((t) => t.maxFeePerGas!)),\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            maxPriorityFeePerGas: BigNumber.maximum(...this._transactions.map((t) => t.maxPriorityFeePerGas!)),\n        };\n    }\n\n    /**\n     * Gets the epoch time, in seconds, of the earliest transaction submission.\n     * Note: This uses the database time the transaction submission was created,\n     * not the blockchain timestamp.\n     */\n    public get firstSubmissionTimestampS(): number {\n        const submissionCreationTimesS = this._transactions\n            .map((t) => t.createdAt.getTime() / ONE_SECOND_MS)\n            .map((t) => Math.round(t));\n        return submissionCreationTimesS.reduce((result, time) => Math.min(result, time), Infinity);\n    }\n\n    /**\n     * Returns the transaction receipt if one of the transactions in the SubmissionContext\n     * has been mined; otherwise returns `null`.\n     */\n    public async getReceiptAsync(): Promise<TransactionReceipt | null> {\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        /* eslint-disable @typescript-eslint/no-non-null-assertion */\n        const receipts = (\n            await this._blockchainUtils.getReceiptsAsync(this._transactions.map((t) => t.transactionHash!))\n        ).filter(isDefined);\n        /* eslint-enable @typescript-eslint/no-non-null-assertion */\n        if (receipts.length > 1) {\n            throw new Error('Found more than one transaction receipt');\n        }\n        return receipts.length ? receipts[0] : null;\n    }\n\n    /**\n     * 1. Updates the in-memory transactions in response to a mined transaction receipt.\n     * 2. Updates the statuses of all transaction submission.\n     */\n    public async updateForReceiptAsync(receipt: TransactionReceipt, now: Date = new Date()): Promise<void> {\n        const isTransactionSuccessful = receipt.status === 1;\n        const currentBlock = await this._blockchainUtils.getCurrentBlockAsync();\n        const isTransactionConfirmed = SubmissionContext.isBlockConfirmed(currentBlock, receipt.blockNumber);\n\n        this._transactions = this._transactions.map((transaction) => {\n            transaction.updatedAt = now;\n            if (transaction.transactionHash === receipt.transactionHash) {\n                const submissionStatus = isTransactionSuccessful\n                    ? isTransactionConfirmed\n                        ? RfqmTransactionSubmissionStatus.SucceededConfirmed\n                        : RfqmTransactionSubmissionStatus.SucceededUnconfirmed\n                    : isTransactionConfirmed\n                    ? RfqmTransactionSubmissionStatus.RevertedConfirmed\n                    : RfqmTransactionSubmissionStatus.RevertedUnconfirmed;\n\n                transaction.status = submissionStatus;\n                transaction.blockMined = new BigNumber(receipt.blockNumber);\n                transaction.gasUsed = new BigNumber(receipt.gasUsed.toString());\n                if (transaction.gasPrice === null) {\n                    transaction.gasPrice = new BigNumber(receipt.effectiveGasPrice.toString());\n                }\n            } else {\n                transaction.status = RfqmTransactionSubmissionStatus.DroppedAndReplaced;\n            }\n\n            return transaction;\n        }) as T;\n    }\n\n    /**\n     * Returns the appropriate job status given the statuses of the transactions\n     */\n    public get jobStatus():\n        | RfqmJobStatus.PendingSubmitted\n        | RfqmJobStatus.FailedRevertedConfirmed\n        | RfqmJobStatus.FailedRevertedUnconfirmed\n        | RfqmJobStatus.SucceededConfirmed\n        | RfqmJobStatus.SucceededUnconfirmed {\n        for (const transaction of this._transactions) {\n            switch (transaction.status) {\n                case RfqmTransactionSubmissionStatus.DroppedAndReplaced:\n                    continue;\n                case RfqmTransactionSubmissionStatus.Presubmit:\n                    continue;\n                case RfqmTransactionSubmissionStatus.RevertedConfirmed:\n                    return RfqmJobStatus.FailedRevertedConfirmed;\n                case RfqmTransactionSubmissionStatus.RevertedUnconfirmed:\n                    return RfqmJobStatus.FailedRevertedUnconfirmed;\n                case RfqmTransactionSubmissionStatus.Submitted:\n                    continue;\n                case RfqmTransactionSubmissionStatus.SucceededConfirmed:\n                    return RfqmJobStatus.SucceededConfirmed;\n                case RfqmTransactionSubmissionStatus.SucceededUnconfirmed:\n                    return RfqmJobStatus.SucceededUnconfirmed;\n                default:\n                    ((_x: never) => {\n                        throw new Error('unreachable');\n                    })(transaction.status);\n            }\n        }\n        return RfqmJobStatus.PendingSubmitted;\n    }\n\n    /**\n     * Returns the submission context status given the statuses of the transactions. A submission context contains\n     * multiple transactions and the submission context status is the collective status for all transactions.\n     */\n    public get submissionContextStatus():\n        | SubmissionContextStatus.PendingSubmitted\n        | SubmissionContextStatus.FailedRevertedConfirmed\n        | SubmissionContextStatus.FailedRevertedUnconfirmed\n        | SubmissionContextStatus.SucceededConfirmed\n        | SubmissionContextStatus.SucceededUnconfirmed {\n        for (const transaction of this._transactions) {\n            switch (transaction.status) {\n                case RfqmTransactionSubmissionStatus.DroppedAndReplaced:\n                    continue;\n                case RfqmTransactionSubmissionStatus.Presubmit:\n                    continue;\n                case RfqmTransactionSubmissionStatus.RevertedConfirmed:\n                    return SubmissionContextStatus.FailedRevertedConfirmed;\n                case RfqmTransactionSubmissionStatus.RevertedUnconfirmed:\n                    return SubmissionContextStatus.FailedRevertedUnconfirmed;\n                case RfqmTransactionSubmissionStatus.Submitted:\n                    continue;\n                case RfqmTransactionSubmissionStatus.SucceededConfirmed:\n                    return SubmissionContextStatus.SucceededConfirmed;\n                case RfqmTransactionSubmissionStatus.SucceededUnconfirmed:\n                    return SubmissionContextStatus.SucceededUnconfirmed;\n                default:\n                    throw new Error(`Transaction status ${transaction.status} should not be reached`);\n            }\n        }\n        return SubmissionContextStatus.PendingSubmitted;\n    }\n\n    /**\n     * Assesses whether the given transactions have the same nonce, type (EIP-1559 or not),\n     * and unique transaction hashes; throws if they do not.\n     *\n     * Throws if `transactions` has a zero length.\n     *\n     * `perfer-function-over-method` rule is disabled to since a function would not be able to use the\n     * `T` generic type.\n     */\n    // tslint:disable-next-line: prefer-function-over-method\n    private _ensureTransactionsAreConsistent(transactions: T): void {\n        if (!transactions.length) {\n            throw new Error('`transactions` must have a nonzero length');\n        }\n        if (!transactions.map((t) => t.nonce).every((n, _, nonces) => n === nonces[0])) {\n            throw new Error('Transactions do not have the same nonce');\n        }\n        if (new Set(transactions.map((t) => t.transactionHash)).size !== transactions.length) {\n            throw new Error('Transactions are not unique');\n        }\n        // TODO (Vic): Remove any[] once https://github.com/microsoft/TypeScript/issues/44373 is fixed\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const areAllGasPricesNonNull = (transactions as any[]).every((t) => t.gasPrice !== null);\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const areAllMaxFeesPerGasNonNull = (transactions as any[]).every((t) => t.maxFeePerGas !== null);\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const areAllMaxPriorityFeesPerGasNonNull = (transactions as any[]).every(\n            (t) => t.maxPriorityFeePerGas !== null,\n        );\n        if (!(areAllGasPricesNonNull || (areAllMaxFeesPerGasNonNull && areAllMaxPriorityFeesPerGasNonNull))) {\n            throw new Error('Transactions do not have the same gas type');\n        }\n    }\n}\n"],"version":3}