{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/GasOracleType0Test.ts","mappings":";;AAAA,iCAA6C;AAC7C,2DAAkD;AAClD,gDAAgD;AAEhD,mEAAgE;AAEhE,MAAM,YAAY,GAAG;IACjB,MAAM,EAAE;QACJ,MAAM,EAAE,QAAQ;QAChB,SAAS,EAAE,UAAU;QACrB,OAAO,EAAE,YAAY;QACrB,IAAI,EAAE,YAAY;QAClB,QAAQ,EAAE,YAAY;QACtB,GAAG,EAAE,YAAY;KACpB;CACJ,CAAC;AAEF,IAAI,WAA0B,CAAC;AAC/B,IAAI,SAA2B,CAAC;AAEhC,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC5B,SAAS,CAAC,GAAG,EAAE;QACX,WAAW,GAAG,eAAK,CAAC,MAAM,EAAE,CAAC;QAC7B,SAAS,GAAG,IAAI,4BAAgB,CAAC,WAAW,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,CAAC,GAAG,EAAE,CACR,+BAAc,CAAC,MAAM,CACjB,mFAAmF,EACnF,WAAW,CACd,CACJ,CAAC,OAAO,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,oBAAoB,EAAE,KAAK,IAAI,EAAE;YAChC,MAAM,CAAC,GAAG,EAAE,CACR,+BAAc,CAAC,MAAM,CAAC,+DAA+D,EAAE,WAAW,CAAC,CACtG,CAAC,OAAO,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YACrC,SAAS;iBACJ,KAAK,CAAC,4DAA4D,CAAC;iBACnE,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;YAE5C,MAAM,SAAS,GAAG,+BAAc,CAAC,MAAM,CACnC,4DAA4D,EAC5D,WAAW,CACd,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YACtD,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YACzC,SAAS;iBACJ,KAAK,CAAC,4DAA4D,CAAC;iBACnE,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;YAE5C,MAAM,SAAS,GAAG,+BAAc,CAAC,MAAM,CACnC,4DAA4D,EAC5D,WAAW,CACd,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAC1D,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/GasOracleType0Test.ts"],"sourcesContent":["import Axios, { AxiosInstance } from 'axios';\nimport AxiosMockAdapter from 'axios-mock-adapter';\nimport * as HttpStatus from 'http-status-codes';\n\nimport { GasOracleType0 } from '../../src/utils/GasOracleType0';\n\nconst fakeResponse = {\n    result: {\n        source: 'MEDIAN',\n        timestamp: 1676403824,\n        instant: 353363290000,\n        fast: 353363290000,\n        standard: 353113290000,\n        low: 266513290000,\n    },\n};\n\nlet axiosClient: AxiosInstance;\nlet axiosMock: AxiosMockAdapter;\n\ndescribe('GasOracleType0', () => {\n    beforeAll(() => {\n        axiosClient = Axios.create();\n        axiosMock = new AxiosMockAdapter(axiosClient);\n    });\n\n    describe('create', () => {\n        it('fails for non-default output formats', async () => {\n            expect(() =>\n                GasOracleType0.create(\n                    'http://gas-price-oracle-svc.gas-price-oracle/source/median?output=eth_gas_station',\n                    axiosClient,\n                ),\n            ).toThrow();\n        });\n        it('fails for a v2 URL', async () => {\n            expect(() =>\n                GasOracleType0.create('http://gas-price-oracle-svc.gas-price-oracle/v2/source/median', axiosClient),\n            ).toThrow();\n        });\n    });\n\n    describe('getGasWeiAsync', () => {\n        it('gets the fast gas price', async () => {\n            axiosMock\n                .onGet(`http://gas-price-oracle-svc.gas-price-oracle/source/median`)\n                .replyOnce(HttpStatus.OK, fakeResponse);\n\n            const gasOracle = GasOracleType0.create(\n                'http://gas-price-oracle-svc.gas-price-oracle/source/median',\n                axiosClient,\n            );\n\n            const result = await gasOracle.getGasWeiAsync('fast');\n            expect(result.toString()).toEqual('353363290000');\n        });\n        it('gets the standard gas price', async () => {\n            axiosMock\n                .onGet(`http://gas-price-oracle-svc.gas-price-oracle/source/median`)\n                .replyOnce(HttpStatus.OK, fakeResponse);\n\n            const gasOracle = GasOracleType0.create(\n                'http://gas-price-oracle-svc.gas-price-oracle/source/median',\n                axiosClient,\n            );\n\n            const result = await gasOracle.getGasWeiAsync('standard');\n            expect(result.toString()).toEqual('353113290000');\n        });\n    });\n});\n"],"version":3}