c9e4ba7930bc53943a1f41f9a10edfda
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.schemaUtils = void 0;
const json_schemas_1 = require("@0x/json-schemas");
const errors_1 = require("./errors");
const schemas_1 = require("./schemas");
const schemaValidator = new json_schemas_1.SchemaValidator();
for (const schema of Object.values(schemas_1.schemas)) {
    if (schema !== undefined) {
        schemaValidator.addSchema(schema);
    }
}
exports.schemaUtils = {
    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    validateSchema(instance, schema) {
        const validationResult = schemaValidator.validate(instance, schema);
        if (!validationResult.errors || validationResult.errors.length === 0) {
            return;
        }
        else {
            const validationErrorItems = validationResult.errors.map((schemaValidationError) => schemaValidationErrorToValidationErrorItem(schemaValidationError));
            throw new errors_1.ValidationError(validationErrorItems);
        }
    },
    addSchema(schema) {
        schemaValidator.addSchema(schema);
    },
};
function schemaValidationErrorToValidationErrorItem(schemaValidationErrorObject) {
    if ([
        'type',
        'anyOf',
        'allOf',
        'oneOf',
        'additionalProperties',
        'minProperties',
        'maxProperties',
        'pattern',
        'format',
        'uniqueItems',
        'items',
        'dependencies',
    ].includes(schemaValidationErrorObject.keyword)) {
        return {
            field: schemaValidationErrorObject.dataPath.replace('.', ''),
            code: errors_1.ValidationErrorCodes.IncorrectFormat,
            reason: schemaValidationErrorObject.message || '',
        };
    }
    else if (['minimum', 'maximum', 'minLength', 'maxLength', 'minItems', 'maxItems', 'enum', 'const'].includes(schemaValidationErrorObject.keyword)) {
        return {
            field: schemaValidationErrorObject.dataPath.replace('.', ''),
            code: errors_1.ValidationErrorCodes.ValueOutOfRange,
            reason: schemaValidationErrorObject.message || '',
        };
    }
    else if (schemaValidationErrorObject.keyword === 'required') {
        return {
            field: schemaValidationErrorObject.params.missingProperty,
            code: errors_1.ValidationErrorCodes.RequiredField,
            reason: schemaValidationErrorObject.message || '',
        };
    }
    else if (schemaValidationErrorObject.keyword === 'not') {
        return {
            field: schemaValidationErrorObject.dataPath.replace('.', ''),
            code: errors_1.ValidationErrorCodes.UnsupportedOption,
            reason: schemaValidationErrorObject.message || '',
        };
    }
    else {
        throw new Error(`Unknown schema validation error name: ${schemaValidationErrorObject.keyword}`);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9jb3JlL3NjaGVtYV91dGlscy50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxtREFBd0Q7QUFFeEQscUNBQXNGO0FBQ3RGLHVDQUFvQztBQUVwQyxNQUFNLGVBQWUsR0FBRyxJQUFJLDhCQUFlLEVBQUUsQ0FBQztBQUM5QyxLQUFLLE1BQU0sTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQU8sQ0FBQyxFQUFFO0lBQ3pDLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUN0QixlQUFlLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3JDO0NBQ0o7QUFFWSxRQUFBLFdBQVcsR0FBRztJQUN2Qiw2REFBNkQ7SUFDN0QsOERBQThEO0lBQzlELGNBQWMsQ0FBQyxRQUFhLEVBQUUsTUFBYztRQUN4QyxNQUFNLGdCQUFnQixHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbEUsT0FBTztTQUNWO2FBQU07WUFDSCxNQUFNLG9CQUFvQixHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLENBQy9FLDBDQUEwQyxDQUFDLHFCQUFxQixDQUFDLENBQ3BFLENBQUM7WUFDRixNQUFNLElBQUksd0JBQWUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1NBQ25EO0lBQ0wsQ0FBQztJQUNELFNBQVMsQ0FBQyxNQUFjO1FBQ3BCLGVBQWUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUNKLENBQUM7QUFFRixTQUFTLDBDQUEwQyxDQUFDLDJCQUE0QztJQUM1RixJQUNJO1FBQ0ksTUFBTTtRQUNOLE9BQU87UUFDUCxPQUFPO1FBQ1AsT0FBTztRQUNQLHNCQUFzQjtRQUN0QixlQUFlO1FBQ2YsZUFBZTtRQUNmLFNBQVM7UUFDVCxRQUFRO1FBQ1IsYUFBYTtRQUNiLE9BQU87UUFDUCxjQUFjO0tBQ2pCLENBQUMsUUFBUSxDQUFDLDJCQUEyQixDQUFDLE9BQU8sQ0FBQyxFQUNqRDtRQUNFLE9BQU87WUFDSCxLQUFLLEVBQUUsMkJBQTJCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDO1lBQzVELElBQUksRUFBRSw2QkFBb0IsQ0FBQyxlQUFlO1lBQzFDLE1BQU0sRUFBRSwyQkFBMkIsQ0FBQyxPQUFPLElBQUksRUFBRTtTQUNwRCxDQUFDO0tBQ0w7U0FBTSxJQUNILENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FDOUYsMkJBQTJCLENBQUMsT0FBTyxDQUN0QyxFQUNIO1FBQ0UsT0FBTztZQUNILEtBQUssRUFBRSwyQkFBMkIsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7WUFDNUQsSUFBSSxFQUFFLDZCQUFvQixDQUFDLGVBQWU7WUFDMUMsTUFBTSxFQUFFLDJCQUEyQixDQUFDLE9BQU8sSUFBSSxFQUFFO1NBQ3BELENBQUM7S0FDTDtTQUFNLElBQUksMkJBQTJCLENBQUMsT0FBTyxLQUFLLFVBQVUsRUFBRTtRQUMzRCxPQUFPO1lBQ0gsS0FBSyxFQUFHLDJCQUEyQixDQUFDLE1BQTZCLENBQUMsZUFBZTtZQUNqRixJQUFJLEVBQUUsNkJBQW9CLENBQUMsYUFBYTtZQUN4QyxNQUFNLEVBQUUsMkJBQTJCLENBQUMsT0FBTyxJQUFJLEVBQUU7U0FDcEQsQ0FBQztLQUNMO1NBQU0sSUFBSSwyQkFBMkIsQ0FBQyxPQUFPLEtBQUssS0FBSyxFQUFFO1FBQ3RELE9BQU87WUFDSCxLQUFLLEVBQUUsMkJBQTJCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDO1lBQzVELElBQUksRUFBRSw2QkFBb0IsQ0FBQyxpQkFBaUI7WUFDNUMsTUFBTSxFQUFFLDJCQUEyQixDQUFDLE9BQU8sSUFBSSxFQUFFO1NBQ3BELENBQUM7S0FDTDtTQUFNO1FBQ0gsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsMkJBQTJCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztLQUNuRztBQUNMLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9jb3JlL3NjaGVtYV91dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBSlYsIFNjaGVtYVZhbGlkYXRvciB9IGZyb20gJ0AweC9qc29uLXNjaGVtYXMnO1xyXG5cclxuaW1wb3J0IHsgVmFsaWRhdGlvbkVycm9yLCBWYWxpZGF0aW9uRXJyb3JDb2RlcywgVmFsaWRhdGlvbkVycm9ySXRlbSB9IGZyb20gJy4vZXJyb3JzJztcclxuaW1wb3J0IHsgc2NoZW1hcyB9IGZyb20gJy4vc2NoZW1hcyc7XHJcblxyXG5jb25zdCBzY2hlbWFWYWxpZGF0b3IgPSBuZXcgU2NoZW1hVmFsaWRhdG9yKCk7XHJcbmZvciAoY29uc3Qgc2NoZW1hIG9mIE9iamVjdC52YWx1ZXMoc2NoZW1hcykpIHtcclxuICAgIGlmIChzY2hlbWEgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHNjaGVtYVZhbGlkYXRvci5hZGRTY2hlbWEoc2NoZW1hKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHNjaGVtYVV0aWxzID0ge1xyXG4gICAgLy8gJGVzbGludC1maXgtbWUgaHR0cHM6Ly9naXRodWIuY29tL3JoaW5vZGF2aWQvZXNsaW50LWZpeC1tZVxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgIHZhbGlkYXRlU2NoZW1hKGluc3RhbmNlOiBhbnksIHNjaGVtYTogb2JqZWN0KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgdmFsaWRhdGlvblJlc3VsdCA9IHNjaGVtYVZhbGlkYXRvci52YWxpZGF0ZShpbnN0YW5jZSwgc2NoZW1hKTtcclxuICAgICAgICBpZiAoIXZhbGlkYXRpb25SZXN1bHQuZXJyb3JzIHx8IHZhbGlkYXRpb25SZXN1bHQuZXJyb3JzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgdmFsaWRhdGlvbkVycm9ySXRlbXMgPSB2YWxpZGF0aW9uUmVzdWx0LmVycm9ycy5tYXAoKHNjaGVtYVZhbGlkYXRpb25FcnJvcikgPT5cclxuICAgICAgICAgICAgICAgIHNjaGVtYVZhbGlkYXRpb25FcnJvclRvVmFsaWRhdGlvbkVycm9ySXRlbShzY2hlbWFWYWxpZGF0aW9uRXJyb3IpLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKHZhbGlkYXRpb25FcnJvckl0ZW1zKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgYWRkU2NoZW1hKHNjaGVtYTogb2JqZWN0KTogdm9pZCB7XHJcbiAgICAgICAgc2NoZW1hVmFsaWRhdG9yLmFkZFNjaGVtYShzY2hlbWEpO1xyXG4gICAgfSxcclxufTtcclxuXHJcbmZ1bmN0aW9uIHNjaGVtYVZhbGlkYXRpb25FcnJvclRvVmFsaWRhdGlvbkVycm9ySXRlbShzY2hlbWFWYWxpZGF0aW9uRXJyb3JPYmplY3Q6IEFKVi5FcnJvck9iamVjdCk6IFZhbGlkYXRpb25FcnJvckl0ZW0ge1xyXG4gICAgaWYgKFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgJ3R5cGUnLFxyXG4gICAgICAgICAgICAnYW55T2YnLFxyXG4gICAgICAgICAgICAnYWxsT2YnLFxyXG4gICAgICAgICAgICAnb25lT2YnLFxyXG4gICAgICAgICAgICAnYWRkaXRpb25hbFByb3BlcnRpZXMnLFxyXG4gICAgICAgICAgICAnbWluUHJvcGVydGllcycsXHJcbiAgICAgICAgICAgICdtYXhQcm9wZXJ0aWVzJyxcclxuICAgICAgICAgICAgJ3BhdHRlcm4nLFxyXG4gICAgICAgICAgICAnZm9ybWF0JyxcclxuICAgICAgICAgICAgJ3VuaXF1ZUl0ZW1zJyxcclxuICAgICAgICAgICAgJ2l0ZW1zJyxcclxuICAgICAgICAgICAgJ2RlcGVuZGVuY2llcycsXHJcbiAgICAgICAgXS5pbmNsdWRlcyhzY2hlbWFWYWxpZGF0aW9uRXJyb3JPYmplY3Qua2V5d29yZClcclxuICAgICkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGZpZWxkOiBzY2hlbWFWYWxpZGF0aW9uRXJyb3JPYmplY3QuZGF0YVBhdGgucmVwbGFjZSgnLicsICcnKSxcclxuICAgICAgICAgICAgY29kZTogVmFsaWRhdGlvbkVycm9yQ29kZXMuSW5jb3JyZWN0Rm9ybWF0LFxyXG4gICAgICAgICAgICByZWFzb246IHNjaGVtYVZhbGlkYXRpb25FcnJvck9iamVjdC5tZXNzYWdlIHx8ICcnLFxyXG4gICAgICAgIH07XHJcbiAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIFsnbWluaW11bScsICdtYXhpbXVtJywgJ21pbkxlbmd0aCcsICdtYXhMZW5ndGgnLCAnbWluSXRlbXMnLCAnbWF4SXRlbXMnLCAnZW51bScsICdjb25zdCddLmluY2x1ZGVzKFxyXG4gICAgICAgICAgICBzY2hlbWFWYWxpZGF0aW9uRXJyb3JPYmplY3Qua2V5d29yZCxcclxuICAgICAgICApXHJcbiAgICApIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBmaWVsZDogc2NoZW1hVmFsaWRhdGlvbkVycm9yT2JqZWN0LmRhdGFQYXRoLnJlcGxhY2UoJy4nLCAnJyksXHJcbiAgICAgICAgICAgIGNvZGU6IFZhbGlkYXRpb25FcnJvckNvZGVzLlZhbHVlT3V0T2ZSYW5nZSxcclxuICAgICAgICAgICAgcmVhc29uOiBzY2hlbWFWYWxpZGF0aW9uRXJyb3JPYmplY3QubWVzc2FnZSB8fCAnJyxcclxuICAgICAgICB9O1xyXG4gICAgfSBlbHNlIGlmIChzY2hlbWFWYWxpZGF0aW9uRXJyb3JPYmplY3Qua2V5d29yZCA9PT0gJ3JlcXVpcmVkJykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGZpZWxkOiAoc2NoZW1hVmFsaWRhdGlvbkVycm9yT2JqZWN0LnBhcmFtcyBhcyBBSlYuUmVxdWlyZWRQYXJhbXMpLm1pc3NpbmdQcm9wZXJ0eSxcclxuICAgICAgICAgICAgY29kZTogVmFsaWRhdGlvbkVycm9yQ29kZXMuUmVxdWlyZWRGaWVsZCxcclxuICAgICAgICAgICAgcmVhc29uOiBzY2hlbWFWYWxpZGF0aW9uRXJyb3JPYmplY3QubWVzc2FnZSB8fCAnJyxcclxuICAgICAgICB9O1xyXG4gICAgfSBlbHNlIGlmIChzY2hlbWFWYWxpZGF0aW9uRXJyb3JPYmplY3Qua2V5d29yZCA9PT0gJ25vdCcpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBmaWVsZDogc2NoZW1hVmFsaWRhdGlvbkVycm9yT2JqZWN0LmRhdGFQYXRoLnJlcGxhY2UoJy4nLCAnJyksXHJcbiAgICAgICAgICAgIGNvZGU6IFZhbGlkYXRpb25FcnJvckNvZGVzLlVuc3VwcG9ydGVkT3B0aW9uLFxyXG4gICAgICAgICAgICByZWFzb246IHNjaGVtYVZhbGlkYXRpb25FcnJvck9iamVjdC5tZXNzYWdlIHx8ICcnLFxyXG4gICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBzY2hlbWEgdmFsaWRhdGlvbiBlcnJvciBuYW1lOiAke3NjaGVtYVZhbGlkYXRpb25FcnJvck9iamVjdC5rZXl3b3JkfWApO1xyXG4gICAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==