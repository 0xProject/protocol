{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/core/schema_utils.ts","mappings":";;;AAAA,mDAAwD;AAExD,qCAAsF;AACtF,uCAAoC;AAEpC,MAAM,eAAe,GAAG,IAAI,8BAAe,EAAE,CAAC;AAC9C,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,iBAAO,CAAC,EAAE;IACzC,IAAI,MAAM,KAAK,SAAS,EAAE;QACtB,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;KACrC;CACJ;AAEY,QAAA,WAAW,GAAG;IACvB,6DAA6D;IAC7D,8DAA8D;IAC9D,cAAc,CAAC,QAAa,EAAE,MAAc;QACxC,MAAM,gBAAgB,GAAG,eAAe,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACpE,IAAI,CAAC,gBAAgB,CAAC,MAAM,IAAI,gBAAgB,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YAClE,OAAO;SACV;aAAM;YACH,MAAM,oBAAoB,GAAG,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,qBAAqB,EAAE,EAAE,CAC/E,0CAA0C,CAAC,qBAAqB,CAAC,CACpE,CAAC;YACF,MAAM,IAAI,wBAAe,CAAC,oBAAoB,CAAC,CAAC;SACnD;IACL,CAAC;IACD,SAAS,CAAC,MAAc;QACpB,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;CACJ,CAAC;AAEF,SAAS,0CAA0C,CAAC,2BAA4C;IAC5F,IACI;QACI,MAAM;QACN,OAAO;QACP,OAAO;QACP,OAAO;QACP,sBAAsB;QACtB,eAAe;QACf,eAAe;QACf,SAAS;QACT,QAAQ;QACR,aAAa;QACb,OAAO;QACP,cAAc;KACjB,CAAC,QAAQ,CAAC,2BAA2B,CAAC,OAAO,CAAC,EACjD;QACE,OAAO;YACH,KAAK,EAAE,2BAA2B,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;YAC5D,IAAI,EAAE,6BAAoB,CAAC,eAAe;YAC1C,MAAM,EAAE,2BAA2B,CAAC,OAAO,IAAI,EAAE;SACpD,CAAC;KACL;SAAM,IACH,CAAC,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,QAAQ,CAC9F,2BAA2B,CAAC,OAAO,CACtC,EACH;QACE,OAAO;YACH,KAAK,EAAE,2BAA2B,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;YAC5D,IAAI,EAAE,6BAAoB,CAAC,eAAe;YAC1C,MAAM,EAAE,2BAA2B,CAAC,OAAO,IAAI,EAAE;SACpD,CAAC;KACL;SAAM,IAAI,2BAA2B,CAAC,OAAO,KAAK,UAAU,EAAE;QAC3D,OAAO;YACH,KAAK,EAAG,2BAA2B,CAAC,MAA6B,CAAC,eAAe;YACjF,IAAI,EAAE,6BAAoB,CAAC,aAAa;YACxC,MAAM,EAAE,2BAA2B,CAAC,OAAO,IAAI,EAAE;SACpD,CAAC;KACL;SAAM,IAAI,2BAA2B,CAAC,OAAO,KAAK,KAAK,EAAE;QACtD,OAAO;YACH,KAAK,EAAE,2BAA2B,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;YAC5D,IAAI,EAAE,6BAAoB,CAAC,iBAAiB;YAC5C,MAAM,EAAE,2BAA2B,CAAC,OAAO,IAAI,EAAE;SACpD,CAAC;KACL;SAAM;QACH,MAAM,IAAI,KAAK,CAAC,yCAAyC,2BAA2B,CAAC,OAAO,EAAE,CAAC,CAAC;KACnG;AACL,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/core/schema_utils.ts"],"sourcesContent":["import { AJV, SchemaValidator } from '@0x/json-schemas';\r\n\r\nimport { ValidationError, ValidationErrorCodes, ValidationErrorItem } from './errors';\r\nimport { schemas } from './schemas';\r\n\r\nconst schemaValidator = new SchemaValidator();\r\nfor (const schema of Object.values(schemas)) {\r\n    if (schema !== undefined) {\r\n        schemaValidator.addSchema(schema);\r\n    }\r\n}\r\n\r\nexport const schemaUtils = {\r\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    validateSchema(instance: any, schema: object): void {\r\n        const validationResult = schemaValidator.validate(instance, schema);\r\n        if (!validationResult.errors || validationResult.errors.length === 0) {\r\n            return;\r\n        } else {\r\n            const validationErrorItems = validationResult.errors.map((schemaValidationError) =>\r\n                schemaValidationErrorToValidationErrorItem(schemaValidationError),\r\n            );\r\n            throw new ValidationError(validationErrorItems);\r\n        }\r\n    },\r\n    addSchema(schema: object): void {\r\n        schemaValidator.addSchema(schema);\r\n    },\r\n};\r\n\r\nfunction schemaValidationErrorToValidationErrorItem(schemaValidationErrorObject: AJV.ErrorObject): ValidationErrorItem {\r\n    if (\r\n        [\r\n            'type',\r\n            'anyOf',\r\n            'allOf',\r\n            'oneOf',\r\n            'additionalProperties',\r\n            'minProperties',\r\n            'maxProperties',\r\n            'pattern',\r\n            'format',\r\n            'uniqueItems',\r\n            'items',\r\n            'dependencies',\r\n        ].includes(schemaValidationErrorObject.keyword)\r\n    ) {\r\n        return {\r\n            field: schemaValidationErrorObject.dataPath.replace('.', ''),\r\n            code: ValidationErrorCodes.IncorrectFormat,\r\n            reason: schemaValidationErrorObject.message || '',\r\n        };\r\n    } else if (\r\n        ['minimum', 'maximum', 'minLength', 'maxLength', 'minItems', 'maxItems', 'enum', 'const'].includes(\r\n            schemaValidationErrorObject.keyword,\r\n        )\r\n    ) {\r\n        return {\r\n            field: schemaValidationErrorObject.dataPath.replace('.', ''),\r\n            code: ValidationErrorCodes.ValueOutOfRange,\r\n            reason: schemaValidationErrorObject.message || '',\r\n        };\r\n    } else if (schemaValidationErrorObject.keyword === 'required') {\r\n        return {\r\n            field: (schemaValidationErrorObject.params as AJV.RequiredParams).missingProperty,\r\n            code: ValidationErrorCodes.RequiredField,\r\n            reason: schemaValidationErrorObject.message || '',\r\n        };\r\n    } else if (schemaValidationErrorObject.keyword === 'not') {\r\n        return {\r\n            field: schemaValidationErrorObject.dataPath.replace('.', ''),\r\n            code: ValidationErrorCodes.UnsupportedOption,\r\n            reason: schemaValidationErrorObject.message || '',\r\n        };\r\n    } else {\r\n        throw new Error(`Unknown schema validation error name: ${schemaValidationErrorObject.keyword}`);\r\n    }\r\n}\r\n"],"version":3}