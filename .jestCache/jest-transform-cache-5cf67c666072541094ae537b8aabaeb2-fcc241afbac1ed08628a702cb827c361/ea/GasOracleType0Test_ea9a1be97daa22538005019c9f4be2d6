2313e0b4b6e6105326a56d547298272f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const axios_mock_adapter_1 = require("axios-mock-adapter");
const HttpStatus = require("http-status-codes");
const GasOracleType0_1 = require("../../src/utils/GasOracleType0");
const fakeResponse = {
    result: {
        source: 'MEDIAN',
        timestamp: 1676403824,
        instant: 353363290000,
        fast: 353363290000,
        standard: 353113290000,
        low: 266513290000,
    },
};
let axiosClient;
let axiosMock;
describe('GasOracleType0', () => {
    beforeAll(() => {
        axiosClient = axios_1.default.create();
        axiosMock = new axios_mock_adapter_1.default(axiosClient);
    });
    describe('create', () => {
        it('fails for non-default output formats', async () => {
            expect(() => GasOracleType0_1.GasOracleType0.create('http://gas-price-oracle-svc.gas-price-oracle/source/median?output=eth_gas_station', axiosClient)).toThrow();
        });
        it('fails for a v2 URL', async () => {
            expect(() => GasOracleType0_1.GasOracleType0.create('http://gas-price-oracle-svc.gas-price-oracle/v2/source/median', axiosClient)).toThrow();
        });
    });
    describe('getGasWeiAsync', () => {
        it('gets the fast gas price', async () => {
            axiosMock
                .onGet(`http://gas-price-oracle-svc.gas-price-oracle/source/median`)
                .replyOnce(HttpStatus.OK, fakeResponse);
            const gasOracle = GasOracleType0_1.GasOracleType0.create('http://gas-price-oracle-svc.gas-price-oracle/source/median', axiosClient);
            const result = await gasOracle.getGasWeiAsync('fast');
            expect(result.toString()).toEqual('353363290000');
        });
        it('gets the standard gas price', async () => {
            axiosMock
                .onGet(`http://gas-price-oracle-svc.gas-price-oracle/source/median`)
                .replyOnce(HttpStatus.OK, fakeResponse);
            const gasOracle = GasOracleType0_1.GasOracleType0.create('http://gas-price-oracle-svc.gas-price-oracle/source/median', axiosClient);
            const result = await gasOracle.getGasWeiAsync('standard');
            expect(result.toString()).toEqual('353113290000');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvR2FzT3JhY2xlVHlwZTBUZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQTZDO0FBQzdDLDJEQUFrRDtBQUNsRCxnREFBZ0Q7QUFFaEQsbUVBQWdFO0FBRWhFLE1BQU0sWUFBWSxHQUFHO0lBQ2pCLE1BQU0sRUFBRTtRQUNKLE1BQU0sRUFBRSxRQUFRO1FBQ2hCLFNBQVMsRUFBRSxVQUFVO1FBQ3JCLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLFFBQVEsRUFBRSxZQUFZO1FBQ3RCLEdBQUcsRUFBRSxZQUFZO0tBQ3BCO0NBQ0osQ0FBQztBQUVGLElBQUksV0FBMEIsQ0FBQztBQUMvQixJQUFJLFNBQTJCLENBQUM7QUFFaEMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM1QixTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ1gsV0FBVyxHQUFHLGVBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM3QixTQUFTLEdBQUcsSUFBSSw0QkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO1FBQ3BCLEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNsRCxNQUFNLENBQUMsR0FBRyxFQUFFLENBQ1IsK0JBQWMsQ0FBQyxNQUFNLENBQ2pCLG1GQUFtRixFQUNuRixXQUFXLENBQ2QsQ0FDSixDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLG9CQUFvQixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2hDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FDUiwrQkFBYyxDQUFDLE1BQU0sQ0FBQywrREFBK0QsRUFBRSxXQUFXLENBQUMsQ0FDdEcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtRQUM1QixFQUFFLENBQUMseUJBQXlCLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDckMsU0FBUztpQkFDSixLQUFLLENBQUMsNERBQTRELENBQUM7aUJBQ25FLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBRTVDLE1BQU0sU0FBUyxHQUFHLCtCQUFjLENBQUMsTUFBTSxDQUNuQyw0REFBNEQsRUFDNUQsV0FBVyxDQUNkLENBQUM7WUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLFNBQVMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN6QyxTQUFTO2lCQUNKLEtBQUssQ0FBQyw0REFBNEQsQ0FBQztpQkFDbkUsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFFNUMsTUFBTSxTQUFTLEdBQUcsK0JBQWMsQ0FBQyxNQUFNLENBQ25DLDREQUE0RCxFQUM1RCxXQUFXLENBQ2QsQ0FBQztZQUVGLE1BQU0sTUFBTSxHQUFHLE1BQU0sU0FBUyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMxRCxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvdGVzdC91dGlscy9HYXNPcmFjbGVUeXBlMFRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEF4aW9zLCB7IEF4aW9zSW5zdGFuY2UgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgQXhpb3NNb2NrQWRhcHRlciBmcm9tICdheGlvcy1tb2NrLWFkYXB0ZXInO1xuaW1wb3J0ICogYXMgSHR0cFN0YXR1cyBmcm9tICdodHRwLXN0YXR1cy1jb2Rlcyc7XG5cbmltcG9ydCB7IEdhc09yYWNsZVR5cGUwIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL0dhc09yYWNsZVR5cGUwJztcblxuY29uc3QgZmFrZVJlc3BvbnNlID0ge1xuICAgIHJlc3VsdDoge1xuICAgICAgICBzb3VyY2U6ICdNRURJQU4nLFxuICAgICAgICB0aW1lc3RhbXA6IDE2NzY0MDM4MjQsXG4gICAgICAgIGluc3RhbnQ6IDM1MzM2MzI5MDAwMCxcbiAgICAgICAgZmFzdDogMzUzMzYzMjkwMDAwLFxuICAgICAgICBzdGFuZGFyZDogMzUzMTEzMjkwMDAwLFxuICAgICAgICBsb3c6IDI2NjUxMzI5MDAwMCxcbiAgICB9LFxufTtcblxubGV0IGF4aW9zQ2xpZW50OiBBeGlvc0luc3RhbmNlO1xubGV0IGF4aW9zTW9jazogQXhpb3NNb2NrQWRhcHRlcjtcblxuZGVzY3JpYmUoJ0dhc09yYWNsZVR5cGUwJywgKCkgPT4ge1xuICAgIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgICAgIGF4aW9zQ2xpZW50ID0gQXhpb3MuY3JlYXRlKCk7XG4gICAgICAgIGF4aW9zTW9jayA9IG5ldyBBeGlvc01vY2tBZGFwdGVyKGF4aW9zQ2xpZW50KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdjcmVhdGUnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdmYWlscyBmb3Igbm9uLWRlZmF1bHQgb3V0cHV0IGZvcm1hdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBleHBlY3QoKCkgPT5cbiAgICAgICAgICAgICAgICBHYXNPcmFjbGVUeXBlMC5jcmVhdGUoXG4gICAgICAgICAgICAgICAgICAgICdodHRwOi8vZ2FzLXByaWNlLW9yYWNsZS1zdmMuZ2FzLXByaWNlLW9yYWNsZS9zb3VyY2UvbWVkaWFuP291dHB1dD1ldGhfZ2FzX3N0YXRpb24nLFxuICAgICAgICAgICAgICAgICAgICBheGlvc0NsaWVudCxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKS50b1Rocm93KCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnZmFpbHMgZm9yIGEgdjIgVVJMJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KCgpID0+XG4gICAgICAgICAgICAgICAgR2FzT3JhY2xlVHlwZTAuY3JlYXRlKCdodHRwOi8vZ2FzLXByaWNlLW9yYWNsZS1zdmMuZ2FzLXByaWNlLW9yYWNsZS92Mi9zb3VyY2UvbWVkaWFuJywgYXhpb3NDbGllbnQpLFxuICAgICAgICAgICAgKS50b1Rocm93KCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2dldEdhc1dlaUFzeW5jJywgKCkgPT4ge1xuICAgICAgICBpdCgnZ2V0cyB0aGUgZmFzdCBnYXMgcHJpY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBheGlvc01vY2tcbiAgICAgICAgICAgICAgICAub25HZXQoYGh0dHA6Ly9nYXMtcHJpY2Utb3JhY2xlLXN2Yy5nYXMtcHJpY2Utb3JhY2xlL3NvdXJjZS9tZWRpYW5gKVxuICAgICAgICAgICAgICAgIC5yZXBseU9uY2UoSHR0cFN0YXR1cy5PSywgZmFrZVJlc3BvbnNlKTtcblxuICAgICAgICAgICAgY29uc3QgZ2FzT3JhY2xlID0gR2FzT3JhY2xlVHlwZTAuY3JlYXRlKFxuICAgICAgICAgICAgICAgICdodHRwOi8vZ2FzLXByaWNlLW9yYWNsZS1zdmMuZ2FzLXByaWNlLW9yYWNsZS9zb3VyY2UvbWVkaWFuJyxcbiAgICAgICAgICAgICAgICBheGlvc0NsaWVudCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdhc09yYWNsZS5nZXRHYXNXZWlBc3luYygnZmFzdCcpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC50b1N0cmluZygpKS50b0VxdWFsKCczNTMzNjMyOTAwMDAnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdnZXRzIHRoZSBzdGFuZGFyZCBnYXMgcHJpY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBheGlvc01vY2tcbiAgICAgICAgICAgICAgICAub25HZXQoYGh0dHA6Ly9nYXMtcHJpY2Utb3JhY2xlLXN2Yy5nYXMtcHJpY2Utb3JhY2xlL3NvdXJjZS9tZWRpYW5gKVxuICAgICAgICAgICAgICAgIC5yZXBseU9uY2UoSHR0cFN0YXR1cy5PSywgZmFrZVJlc3BvbnNlKTtcblxuICAgICAgICAgICAgY29uc3QgZ2FzT3JhY2xlID0gR2FzT3JhY2xlVHlwZTAuY3JlYXRlKFxuICAgICAgICAgICAgICAgICdodHRwOi8vZ2FzLXByaWNlLW9yYWNsZS1zdmMuZ2FzLXByaWNlLW9yYWNsZS9zb3VyY2UvbWVkaWFuJyxcbiAgICAgICAgICAgICAgICBheGlvc0NsaWVudCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdhc09yYWNsZS5nZXRHYXNXZWlBc3luYygnc3RhbmRhcmQnKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQudG9TdHJpbmcoKSkudG9FcXVhbCgnMzUzMTEzMjkwMDAwJyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=