2a875f4fdbeb8e049bb4ebea5cb03fd5
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqmV2QuoteEntity = void 0;
const typeorm_1 = require("typeorm");
let RfqmV2QuoteEntity = class RfqmV2QuoteEntity {
    // tslint:disable-next-line no-object-literal-type-assertion
    constructor(opts = {}) {
        var _a, _b, _c, _d;
        // allow createdAt overrides for testing
        if (opts.createdAt) {
            this.createdAt = opts.createdAt;
        }
        this.affiliateAddress = (_a = opts.affiliateAddress) !== null && _a !== void 0 ? _a : null;
        this.chainId = opts.chainId;
        this.fee = opts.fee;
        this.integratorId = (_b = opts.integratorId) !== null && _b !== void 0 ? _b : null;
        this.isUnwrap = (_c = opts.isUnwrap) !== null && _c !== void 0 ? _c : false;
        this.makerUri = opts.makerUri;
        this.order = opts.order;
        this.orderHash = opts.orderHash;
        this.takerSpecifiedSide = (_d = opts.takerSpecifiedSide) !== null && _d !== void 0 ? _d : null;
    }
};
__decorate([
    (0, typeorm_1.PrimaryColumn)({ name: 'order_hash', type: 'varchar' }),
    __metadata("design:type", String)
], RfqmV2QuoteEntity.prototype, "orderHash", void 0);
__decorate([
    (0, typeorm_1.Index)(),
    (0, typeorm_1.Column)({ name: 'created_at', type: 'timestamptz', default: () => 'now()' }),
    __metadata("design:type", Date)
], RfqmV2QuoteEntity.prototype, "createdAt", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'chain_id', type: 'integer' }),
    __metadata("design:type", Number)
], RfqmV2QuoteEntity.prototype, "chainId", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'integrator_id', type: 'varchar', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2QuoteEntity.prototype, "integratorId", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'maker_uri', type: 'varchar' }),
    __metadata("design:type", String)
], RfqmV2QuoteEntity.prototype, "makerUri", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'fee', type: 'jsonb' }),
    __metadata("design:type", Object)
], RfqmV2QuoteEntity.prototype, "fee", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'order', type: 'jsonb' }),
    __metadata("design:type", Object)
], RfqmV2QuoteEntity.prototype, "order", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'is_unwrap', type: 'boolean' }),
    __metadata("design:type", Boolean)
], RfqmV2QuoteEntity.prototype, "isUnwrap", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'affiliate_address', type: 'varchar', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2QuoteEntity.prototype, "affiliateAddress", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'taker_specified_side', type: 'varchar', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2QuoteEntity.prototype, "takerSpecifiedSide", void 0);
RfqmV2QuoteEntity = __decorate([
    (0, typeorm_1.Entity)({ name: 'rfqm_v2_quotes' }),
    __metadata("design:paramtypes", [Object])
], RfqmV2QuoteEntity);
exports.RfqmV2QuoteEntity = RfqmV2QuoteEntity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9lbnRpdGllcy9SZnFtVjJRdW90ZUVudGl0eS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxxQ0FBK0Q7QUFhL0QsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7SUF1QzFCLDREQUE0RDtJQUM1RCxZQUFZLE9BQW1DLEVBQWdDOztRQUMzRSx3Q0FBd0M7UUFDeEMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUNuQztRQUVELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFBLElBQUksQ0FBQyxnQkFBZ0IsbUNBQUksSUFBSSxDQUFDO1FBQ3RELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM1QixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFBLElBQUksQ0FBQyxZQUFZLG1DQUFJLElBQUksQ0FBQztRQUM5QyxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQUEsSUFBSSxDQUFDLFFBQVEsbUNBQUksS0FBSyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM5QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxNQUFBLElBQUksQ0FBQyxrQkFBa0IsbUNBQUksSUFBSSxDQUFDO0lBQzlELENBQUM7Q0FDSixDQUFBO0FBdERHO0lBREMsSUFBQSx1QkFBYSxFQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUM7O29EQUM5QjtBQUl6QjtJQUZDLElBQUEsZUFBSyxHQUFFO0lBQ1AsSUFBQSxnQkFBTSxFQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQzs4QkFDekQsSUFBSTtvREFBQztBQUd4QjtJQURDLElBQUEsZ0JBQU0sRUFBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDOztrREFDdkI7QUFHdkI7SUFEQyxJQUFBLGdCQUFNLEVBQUMsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDOzt1REFDaEM7QUFHbkM7SUFEQyxJQUFBLGdCQUFNLEVBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQzs7bURBQ3ZCO0FBR3hCO0lBREMsSUFBQSxnQkFBTSxFQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7OzhDQUNqQjtBQUd0QjtJQURDLElBQUEsZ0JBQU0sRUFBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDOztnREFDWjtBQUs3QjtJQURDLElBQUEsZ0JBQU0sRUFBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDOzttREFDdEI7QUFHekI7SUFEQyxJQUFBLGdCQUFNLEVBQUMsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7OzJEQUNoQztBQVF2QztJQURDLElBQUEsZ0JBQU0sRUFBQyxFQUFFLElBQUksRUFBRSxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQzs7NkRBQ1o7QUFyQ3JELGlCQUFpQjtJQUQ3QixJQUFBLGdCQUFNLEVBQUMsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQzs7R0FDdEIsaUJBQWlCLENBd0Q3QjtBQXhEWSw4Q0FBaUIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9lbnRpdGllcy9SZnFtVjJRdW90ZUVudGl0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2x1bW4sIEVudGl0eSwgSW5kZXgsIFByaW1hcnlDb2x1bW4gfSBmcm9tICd0eXBlb3JtJztcblxuaW1wb3J0IHsgU3RvcmVkRmVlIH0gZnJvbSAnLi4vY29yZS90eXBlcyc7XG5cbmltcG9ydCB7IFN0b3JlZE90Y09yZGVyIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFJmcW1WMlF1b3RlQ29uc3RydWN0b3JPcHRzID0gUGljazxcbiAgICBSZnFtVjJRdW90ZUVudGl0eSxcbiAgICAnY2hhaW5JZCcgfCAnZmVlJyB8ICdtYWtlclVyaScgfCAnb3JkZXJIYXNoJyB8ICdvcmRlcidcbj4gJlxuICAgIFBhcnRpYWw8UmZxbVYyUXVvdGVFbnRpdHk+O1xuXG5ARW50aXR5KHsgbmFtZTogJ3JmcW1fdjJfcXVvdGVzJyB9KVxuZXhwb3J0IGNsYXNzIFJmcW1WMlF1b3RlRW50aXR5IHtcbiAgICBAUHJpbWFyeUNvbHVtbih7IG5hbWU6ICdvcmRlcl9oYXNoJywgdHlwZTogJ3ZhcmNoYXInIH0pXG4gICAgcHVibGljIG9yZGVySGFzaDogc3RyaW5nO1xuXG4gICAgQEluZGV4KClcbiAgICBAQ29sdW1uKHsgbmFtZTogJ2NyZWF0ZWRfYXQnLCB0eXBlOiAndGltZXN0YW1wdHonLCBkZWZhdWx0OiAoKSA9PiAnbm93KCknIH0pXG4gICAgcHVibGljIGNyZWF0ZWRBdCE6IERhdGU7XG5cbiAgICBAQ29sdW1uKHsgbmFtZTogJ2NoYWluX2lkJywgdHlwZTogJ2ludGVnZXInIH0pXG4gICAgcHVibGljIGNoYWluSWQ6IG51bWJlcjtcblxuICAgIEBDb2x1bW4oeyBuYW1lOiAnaW50ZWdyYXRvcl9pZCcsIHR5cGU6ICd2YXJjaGFyJywgbnVsbGFibGU6IHRydWUgfSlcbiAgICBwdWJsaWMgaW50ZWdyYXRvcklkOiBzdHJpbmcgfCBudWxsO1xuXG4gICAgQENvbHVtbih7IG5hbWU6ICdtYWtlcl91cmknLCB0eXBlOiAndmFyY2hhcicgfSlcbiAgICBwdWJsaWMgbWFrZXJVcmk6IHN0cmluZztcblxuICAgIEBDb2x1bW4oeyBuYW1lOiAnZmVlJywgdHlwZTogJ2pzb25iJyB9KVxuICAgIHB1YmxpYyBmZWU6IFN0b3JlZEZlZTtcblxuICAgIEBDb2x1bW4oeyBuYW1lOiAnb3JkZXInLCB0eXBlOiAnanNvbmInIH0pXG4gICAgcHVibGljIG9yZGVyOiBTdG9yZWRPdGNPcmRlcjtcblxuICAgIC8vIFdoZXRoZXIgdGhlIG1ha2VyIHdyYXBwZWQgbmF0aXZlIHRva2VuIHdpbGwgYmUgdW53cmFwcGVkIHRvIHRoZSBuYXRpdmUgdG9rZW5cbiAgICAvLyB3aGVuIHBhc3NlZCB0byB0aGUgdGFrZXJcbiAgICBAQ29sdW1uKHsgbmFtZTogJ2lzX3Vud3JhcCcsIHR5cGU6ICdib29sZWFuJyB9KVxuICAgIHB1YmxpYyBpc1Vud3JhcDogYm9vbGVhbjtcblxuICAgIEBDb2x1bW4oeyBuYW1lOiAnYWZmaWxpYXRlX2FkZHJlc3MnLCB0eXBlOiAndmFyY2hhcicsIG51bGxhYmxlOiB0cnVlIH0pXG4gICAgcHVibGljIGFmZmlsaWF0ZUFkZHJlc3M6IHN0cmluZyB8IG51bGw7XG5cbiAgICAvLyBXaGVuIHJlcXVlc3RpbmcgYSBxdW90ZSwgdGFrZXIgc3BlY2lmaWVzIG9uZSBhbW91bnQgKG1ha2VyIG9yIHRha2VyIGFtb3VudClcbiAgICAvLyBhbmQgdGhlIE1NIHBvcHVsYXRlcyB0aGUgb3RoZXIgZmllbGQuXG4gICAgLy8gVGhpcyBmaWVsZCBwcmVzZXJ2ZXMgdGhhdCBpbmZvcm1hdGlvbi5cbiAgICAvLyBUaGlzIGZpZWxkIGlzIGFjY2VwdGVkIHRvIGJlIG51bGwsIG9ubHkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksXG4gICAgLy8gaW4gbm9ybWFsIG9wZXJhdGlvbiBcInRha2VyX3NwZWNpZmllZF9zaWRlXCIgaXMgYWx3YXlzIGtub3duLlxuICAgIEBDb2x1bW4oeyBuYW1lOiAndGFrZXJfc3BlY2lmaWVkX3NpZGUnLCB0eXBlOiAndmFyY2hhcicsIG51bGxhYmxlOiB0cnVlIH0pXG4gICAgcHVibGljIHRha2VyU3BlY2lmaWVkU2lkZTogJ21ha2VyVG9rZW4nIHwgJ3Rha2VyVG9rZW4nIHwgbnVsbDtcblxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSBuby1vYmplY3QtbGl0ZXJhbC10eXBlLWFzc2VydGlvblxuICAgIGNvbnN0cnVjdG9yKG9wdHM6IFJmcW1WMlF1b3RlQ29uc3RydWN0b3JPcHRzID0ge30gYXMgUmZxbVYyUXVvdGVDb25zdHJ1Y3Rvck9wdHMpIHtcbiAgICAgICAgLy8gYWxsb3cgY3JlYXRlZEF0IG92ZXJyaWRlcyBmb3IgdGVzdGluZ1xuICAgICAgICBpZiAob3B0cy5jcmVhdGVkQXQpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlZEF0ID0gb3B0cy5jcmVhdGVkQXQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFmZmlsaWF0ZUFkZHJlc3MgPSBvcHRzLmFmZmlsaWF0ZUFkZHJlc3MgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5jaGFpbklkID0gb3B0cy5jaGFpbklkO1xuICAgICAgICB0aGlzLmZlZSA9IG9wdHMuZmVlO1xuICAgICAgICB0aGlzLmludGVncmF0b3JJZCA9IG9wdHMuaW50ZWdyYXRvcklkID8/IG51bGw7XG4gICAgICAgIHRoaXMuaXNVbndyYXAgPSBvcHRzLmlzVW53cmFwID8/IGZhbHNlO1xuICAgICAgICB0aGlzLm1ha2VyVXJpID0gb3B0cy5tYWtlclVyaTtcbiAgICAgICAgdGhpcy5vcmRlciA9IG9wdHMub3JkZXI7XG4gICAgICAgIHRoaXMub3JkZXJIYXNoID0gb3B0cy5vcmRlckhhc2g7XG4gICAgICAgIHRoaXMudGFrZXJTcGVjaWZpZWRTaWRlID0gb3B0cy50YWtlclNwZWNpZmllZFNpZGUgPz8gbnVsbDtcbiAgICB9XG59XG4iXSwidmVyc2lvbiI6M30=