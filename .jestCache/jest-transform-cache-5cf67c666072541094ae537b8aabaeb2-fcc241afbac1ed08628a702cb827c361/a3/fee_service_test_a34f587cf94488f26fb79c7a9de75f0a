aee216ea28d9b9926a2b0702713be5ef
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:max-file-line-count
// tslint:disable:custom-no-magic-numbers
const utils_1 = require("@0x/utils");
const ts_mockito_1 = require("ts-mockito");
const config_1 = require("../../src/config");
const constants_1 = require("../../src/core/constants");
const fee_service_1 = require("../../src/services/fee_service");
const config_manager_1 = require("../../src/utils/config_manager");
const GasStationAttendantEthereum_1 = require("../../src/utils/GasStationAttendantEthereum");
const TokenPriceOracle_1 = require("../../src/utils/TokenPriceOracle");
const ZeroExApiClient_1 = require("../../src/utils/ZeroExApiClient");
const feeTokenSymbol = 'fee';
const feeTokenAddress = 'feeTokenAddress';
const feeTokenDecimals = 18;
const buildFeeService = (overrides) => {
    const chainId = (overrides === null || overrides === void 0 ? void 0 : overrides.chainId) || 1337;
    const feeTokenMetadata = (overrides === null || overrides === void 0 ? void 0 : overrides.feeTokenMetadata) || {
        symbol: feeTokenSymbol,
        decimals: feeTokenDecimals,
        tokenAddress: feeTokenAddress,
    };
    const feeModelConfiguration = (overrides === null || overrides === void 0 ? void 0 : overrides.feeModelConfiguration) || config_1.DEFAULT_FEE_MODEL_CONFIGURATION;
    const gasPrice = (overrides === null || overrides === void 0 ? void 0 : overrides.gasPrice) || new utils_1.BigNumber(1e9);
    const tradeTokenPrice = (overrides === null || overrides === void 0 ? void 0 : overrides.tradeTokenPrice) || null;
    const feeTokenPrice = (overrides === null || overrides === void 0 ? void 0 : overrides.feeTokenPrice) || null;
    const ammQuote = (overrides === null || overrides === void 0 ? void 0 : overrides.ammQuote) || null;
    const configManagerMock = (0, ts_mockito_1.mock)(config_manager_1.ConfigManager);
    (0, ts_mockito_1.when)(configManagerMock.getFeeModelConfiguration(chainId, (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn(feeModelConfiguration);
    const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
    (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(gasPrice);
    const tokenPriceOracleMock = (0, ts_mockito_1.mock)(TokenPriceOracle_1.TokenPriceOracle);
    (0, ts_mockito_1.when)(tokenPriceOracleMock.batchFetchTokenPriceAsync((0, ts_mockito_1.anything)())).thenResolve([tradeTokenPrice, feeTokenPrice]);
    const zeroExApiClientMock = (0, ts_mockito_1.mock)(ZeroExApiClient_1.ZeroExApiClient);
    (0, ts_mockito_1.when)(zeroExApiClientMock.fetchAmmQuoteAsync((0, ts_mockito_1.anything)())).thenResolve(ammQuote);
    return new fee_service_1.FeeService(chainId, feeTokenMetadata, (0, ts_mockito_1.instance)((overrides === null || overrides === void 0 ? void 0 : overrides.configManagerMock) || configManagerMock), (0, ts_mockito_1.instance)((overrides === null || overrides === void 0 ? void 0 : overrides.gasStationAttendantMock) || gasStationAttendantMock), (0, ts_mockito_1.instance)((overrides === null || overrides === void 0 ? void 0 : overrides.tokenPriceOracleMock) || tokenPriceOracleMock), (0, ts_mockito_1.instance)((overrides === null || overrides === void 0 ? void 0 : overrides.zeroExApiClientMock) || zeroExApiClientMock), constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS);
};
describe('FeeService', () => {
    const workflow = 'rfqm';
    const txOrigin = 'registryAddress';
    const makerToken = 'UsdcAddress';
    const makerTokenDecimals = 6;
    const makerTokenPrice = new utils_1.BigNumber(1e-6);
    const takerToken = 'WbtcAddress';
    const takerTokenDecimals = 18;
    const takerTokenPrice = new utils_1.BigNumber(6e-14);
    const gasPrice = new utils_1.BigNumber(1e9);
    const gasEstimate = constants_1.RFQM_TX_OTC_ORDER_GAS_ESTIMATE;
    const feeTokenPrice = new utils_1.BigNumber(3e-15);
    const integrator = {
        apiKeys: [],
        integratorId: 'integratorId',
        allowedChainIds: [1, 3, 137, 1337],
        label: 'dummy integrator',
        plp: true,
        rfqm: true,
        rfqt: true,
    };
    const takerAddress = 'takerAddress';
    afterAll(() => {
        jest.useRealTimers();
    });
    describe('calculateFeeAsync v0', () => {
        const feeModelVersion = 0;
        it('should calculate v0 fee for RFQm correctly', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(0.345e18);
            const tradeSizeBps = 5;
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio: 0,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: takerTokenPrice,
                feeTokenPrice,
            });
            // When
            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({
                workflow,
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedGasFeeAmount,
                details: {
                    kind: 'gasOnly',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: null,
                    feeTokenBaseUnitPriceUsd: null,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(fee).toMatchObject(expectedFee);
        });
        it('should calculate v0 fee for RFQt correctly', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(0.345e18);
            const tradeSizeBps = 5;
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio: 0,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: takerTokenPrice,
                feeTokenPrice,
            });
            // When
            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({
                workflow: 'rfqt',
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            });
            // Then
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: new utils_1.BigNumber(0),
                details: {
                    kind: 'gasOnly',
                    feeModelVersion,
                    gasFeeAmount: new utils_1.BigNumber(0),
                    gasPrice: new utils_1.BigNumber(0),
                },
                breakdown: {},
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: null,
                    feeTokenBaseUnitPriceUsd: null,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(fee).toMatchObject(expectedFee);
        });
    });
    describe('calculateFeeAsync v1', () => {
        const feeModelVersion = 1;
        it('should calculate v1 fee for RFQm selling correctly', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(0.345e18);
            const tradeSizeBps = 5;
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio: 0,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: takerTokenPrice,
                feeTokenPrice,
            });
            // When
            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({
                workflow,
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedZeroExFeeAmount = assetFillAmount
                .times(tradeSizeBps * constants_1.BPS_TO_RATIO)
                .times(takerTokenPrice)
                .div(feeTokenPrice)
                .integerValue();
            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedTotalFeeAmount,
                details: {
                    kind: 'default',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                    zeroExFeeAmount: expectedZeroExFeeAmount,
                    tradeSizeBps,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: takerTokenPrice,
                    makerTokenBaseUnitPriceUsd: null,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                    zeroEx: {
                        amount: expectedZeroExFeeAmount,
                        details: {
                            kind: 'volume',
                            tradeSizeBps,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: takerTokenPrice,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(fee).toMatchObject(expectedFee);
        });
        it('should calculate v1 fee for RFQm buying correctly', async () => {
            // Given
            const isSelling = false;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(5000e6);
            const tradeSizeBps = 4;
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio: 0,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: makerTokenPrice,
                feeTokenPrice,
            });
            // When
            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({
                workflow,
                chainId: 1337,
                feeModelVersion,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                makerAmount: assetFillAmount,
                isFirm: false,
                takerAddress,
                integrator,
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedZeroExFeeAmount = assetFillAmount
                .times(tradeSizeBps * constants_1.BPS_TO_RATIO)
                .times(makerTokenPrice)
                .div(feeTokenPrice)
                .integerValue();
            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedTotalFeeAmount,
                details: {
                    kind: 'default',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                    zeroExFeeAmount: expectedZeroExFeeAmount,
                    tradeSizeBps,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                    zeroEx: {
                        amount: expectedZeroExFeeAmount,
                        details: {
                            kind: 'volume',
                            tradeSizeBps,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
            };
            expect(fee).toMatchObject(expectedFee);
        });
        it('should calculate v1 fee for RFQt selling correctly', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(0.345e18);
            const tradeSizeBps = 5;
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio: 0,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: takerTokenPrice,
                feeTokenPrice,
            });
            // When
            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({
                workflow: 'rfqt',
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            });
            // Then
            const expectedZeroExFeeAmount = assetFillAmount
                .times(tradeSizeBps * constants_1.BPS_TO_RATIO)
                .times(takerTokenPrice)
                .div(feeTokenPrice)
                .integerValue();
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedZeroExFeeAmount,
                details: {
                    kind: 'default',
                    feeModelVersion,
                    gasFeeAmount: new utils_1.BigNumber(0),
                    gasPrice: new utils_1.BigNumber(0),
                    zeroExFeeAmount: expectedZeroExFeeAmount,
                    tradeSizeBps,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: takerTokenPrice,
                    makerTokenBaseUnitPriceUsd: null,
                },
                breakdown: {
                    zeroEx: {
                        amount: expectedZeroExFeeAmount,
                        details: {
                            kind: 'volume',
                            tradeSizeBps,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: takerTokenPrice,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(fee).toMatchObject(expectedFee);
        });
        it('should not include zeroEx fee for non-configured pairs', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(0.345e18);
            const feeService = buildFeeService({
                gasPrice,
                tradeTokenPrice: takerTokenPrice,
                feeTokenPrice,
            });
            // When
            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({
                workflow,
                chainId: 1337,
                feeModelVersion,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: false,
                takerAddress,
                integrator,
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedGasFeeAmount,
                details: {
                    kind: 'default',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                    zeroExFeeAmount: new utils_1.BigNumber(0),
                    tradeSizeBps: 0,
                    feeTokenBaseUnitPriceUsd: null,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: null,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                    zeroEx: {
                        amount: new utils_1.BigNumber(0),
                        details: {
                            kind: 'volume',
                            tradeSizeBps: 0,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: null,
                    feeTokenBaseUnitPriceUsd: null,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(fee).toMatchObject(expectedFee);
        });
        it('should not include zeroEx fee if price oracle is down', async () => {
            // Given
            const isSelling = false;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(5000e6);
            const tradeSizeBps = 4;
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio: 0,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: makerTokenPrice,
                feeTokenPrice: null,
            });
            // When
            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({
                workflow,
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                makerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedGasFeeAmount,
                details: {
                    kind: 'gasOnly',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: null,
                    feeTokenBaseUnitPriceUsd: null,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(fee).toMatchObject(expectedFee);
        });
    });
    describe('calculateFeeAsync v2', () => {
        const feeModelVersion = 2;
        it('should calculate v2 `price improvement` based fee for sell correctly if price improvement detection succeeded', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(1e18);
            const marginRakeRatio = 0.5;
            const ammMakerAmount = new utils_1.BigNumber(3450e6);
            const expectedSlippage = new utils_1.BigNumber(-0.01);
            const estimatedAmmGasFeeWei = new utils_1.BigNumber(100e9);
            const decodedUniqueId = '1234-5678';
            const ammQuote = {
                makerAmount: ammMakerAmount,
                takerAmount: assetFillAmount,
                expectedSlippage,
                estimatedGasFeeWei: estimatedAmmGasFeeWei,
                decodedUniqueId,
            };
            const mm1MakerAmount = new utils_1.BigNumber(3550e6);
            const mm2MakerAmount = new utils_1.BigNumber(3600e6);
            const mmQuotes = [
                {
                    maker: 'maker1Address',
                    makerUri: 'http://maker1.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm1MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
                {
                    maker: 'maker2Address',
                    makerUri: 'http://maker2.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm2MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
            ];
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio,
                    tradeSizeBps: 0,
                },
                gasPrice,
                tradeTokenPrice: makerTokenPrice,
                feeTokenPrice,
                ammQuote,
            });
            const quoteContext = {
                workflow,
                chainId: 1337,
                isFirm: true,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                takerAddress,
                trader: takerAddress,
                integrator,
            };
            // When
            jest.useFakeTimers().setSystemTime(1650000000000);
            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync(quoteContext, async () => {
                return Promise.resolve(mmQuotes);
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedMargin = mm2MakerAmount
                .minus(ammMakerAmount.times(new utils_1.BigNumber(1).plus(expectedSlippage)))
                .times(makerTokenPrice)
                .div(feeTokenPrice)
                .plus(estimatedAmmGasFeeWei)
                .integerValue();
            const expectedZeroExFeeAmount = expectedMargin.times(marginRakeRatio).integerValue();
            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedTotalFeeAmount,
                details: {
                    kind: 'margin',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                    zeroExFeeAmount: expectedZeroExFeeAmount,
                    margin: expectedMargin,
                    marginRakeRatio,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                    zeroEx: {
                        amount: expectedZeroExFeeAmount,
                        details: {
                            kind: 'price_improvement',
                            priceImprovement: expectedMargin,
                            rakeRatio: marginRakeRatio,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
            };
            expect(feeWithDetails).toMatchObject(expectedFee);
            expect(quotesWithGasFee).toMatchObject(mmQuotes);
            expect(ammQuoteUniqueId).toBe(decodedUniqueId);
            // When
            const revisedQuotes = await feeService.reviseQuotesAsync(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            quotesWithGasFee, expectedZeroExFeeAmount, quoteContext);
            // Then
            const expectedRevisedQuotes = mmQuotes.map((quote) => (0, fee_service_1.reviseQuoteWithFees)(quote, expectedZeroExFeeAmount, isSelling, makerTokenPrice, feeTokenPrice));
            expect(revisedQuotes).toMatchObject(expectedRevisedQuotes);
        });
        it('should calculate v2 `price improvement` based fee for buy correctly if price improvement detection succeeded', async () => {
            // Given
            const isSelling = false;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(1e18);
            const marginRakeRatio = 0.4;
            const ammTakerAmount = new utils_1.BigNumber(3450e6);
            const expectedSlippage = new utils_1.BigNumber(-0.1);
            const estimatedAmmGasFeeWei = new utils_1.BigNumber(100e9);
            const decodedUniqueId = '1234-5678';
            const ammQuote = {
                makerAmount: assetFillAmount,
                takerAmount: ammTakerAmount,
                expectedSlippage,
                estimatedGasFeeWei: estimatedAmmGasFeeWei,
                decodedUniqueId,
            };
            const mm1TakerAmount = new utils_1.BigNumber(3400e6);
            const mm2TakerAmount = new utils_1.BigNumber(3350e6);
            const mmQuotes = [
                {
                    maker: 'maker1Address',
                    makerUri: 'http://maker1.com',
                    makerToken,
                    takerToken,
                    makerAmount: assetFillAmount,
                    takerAmount: mm1TakerAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
                {
                    maker: 'maker2Address',
                    makerUri: 'http://maker2.com',
                    makerToken,
                    takerToken,
                    makerAmount: assetFillAmount,
                    takerAmount: mm2TakerAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
            ];
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio,
                    tradeSizeBps: 0,
                },
                gasPrice,
                tradeTokenPrice: takerTokenPrice,
                feeTokenPrice,
                ammQuote,
            });
            const quoteContext = {
                workflow,
                chainId: 1337,
                feeModelVersion,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                makerAmount: assetFillAmount,
                isFirm: false,
                takerAddress,
                integrator,
            };
            // When
            jest.useFakeTimers().setSystemTime(1650000000000);
            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync(quoteContext, async () => {
                return Promise.resolve(mmQuotes);
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedMargin = ammTakerAmount
                .times(new utils_1.BigNumber(1).minus(expectedSlippage))
                .minus(mm2TakerAmount)
                .times(takerTokenPrice)
                .div(feeTokenPrice)
                .plus(estimatedAmmGasFeeWei)
                .integerValue();
            const expectedZeroExFeeAmount = expectedMargin.times(marginRakeRatio).integerValue();
            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedTotalFeeAmount,
                details: {
                    kind: 'margin',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                    zeroExFeeAmount: expectedZeroExFeeAmount,
                    margin: expectedMargin,
                    marginRakeRatio,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: takerTokenPrice,
                    makerTokenBaseUnitPriceUsd: null,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                    zeroEx: {
                        amount: expectedZeroExFeeAmount,
                        details: {
                            kind: 'price_improvement',
                            priceImprovement: expectedMargin,
                            rakeRatio: marginRakeRatio,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: takerTokenPrice,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(feeWithDetails).toMatchObject(expectedFee);
            expect(quotesWithGasFee).toMatchObject(mmQuotes);
            expect(ammQuoteUniqueId).toBe(decodedUniqueId);
            // When
            const revisedQuotes = await feeService.reviseQuotesAsync(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            quotesWithGasFee, expectedZeroExFeeAmount, quoteContext);
            // Then
            const expectedRevisedQuotes = mmQuotes.map((quote) => (0, fee_service_1.reviseQuoteWithFees)(quote, expectedZeroExFeeAmount, isSelling, takerTokenPrice, feeTokenPrice));
            expect(revisedQuotes).toMatchObject(expectedRevisedQuotes);
        });
        it('should calculate v2 `default` fee correctly if token price query succeeded but 0x-api query failed', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(1e18);
            const marginRakeRatio = 0.5;
            const tradeSizeBps = 5;
            const ammQuote = null;
            const mm1MakerAmount = new utils_1.BigNumber(3550e6);
            const mm2MakerAmount = new utils_1.BigNumber(3600e6);
            const mmQuotes = [
                {
                    maker: 'maker1Address',
                    makerUri: 'http://maker1.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm1MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
                {
                    maker: 'maker2Address',
                    makerUri: 'http://maker2.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm2MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
            ];
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: makerTokenPrice,
                feeTokenPrice,
                ammQuote,
            });
            const quoteContext = {
                workflow,
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            };
            // When
            jest.useFakeTimers().setSystemTime(1650000000000);
            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync(quoteContext, async () => {
                return Promise.resolve(mmQuotes);
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedZeroExFeeAmount = (0, fee_service_1.calculateDefaultFeeAmount)(mm2MakerAmount, tradeSizeBps, makerTokenPrice, feeTokenPrice);
            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedTotalFeeAmount,
                details: {
                    kind: 'default',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                    zeroExFeeAmount: expectedZeroExFeeAmount,
                    tradeSizeBps,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                    zeroEx: {
                        amount: expectedZeroExFeeAmount,
                        details: {
                            kind: 'volume',
                            tradeSizeBps,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
            };
            expect(feeWithDetails).toMatchObject(expectedFee);
            expect(quotesWithGasFee).toMatchObject(mmQuotes);
            expect(ammQuoteUniqueId).toBe(undefined);
            // When
            const revisedQuotes = await feeService.reviseQuotesAsync(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            quotesWithGasFee, expectedZeroExFeeAmount, quoteContext);
            // Then
            const expectedRevisedQuotes = mmQuotes.map((quote) => (0, fee_service_1.reviseQuoteWithFees)(quote, expectedZeroExFeeAmount, isSelling, makerTokenPrice, feeTokenPrice));
            expect(revisedQuotes).toMatchObject(expectedRevisedQuotes);
        });
        it('should calculate v2 `gasOnly` fee correctly if token price query failed', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(1e18);
            const marginRakeRatio = 0.5;
            const tradeSizeBps = 5;
            const ammMakerAmount = new utils_1.BigNumber(3450e6);
            const expectedSlippage = new utils_1.BigNumber(-0.01);
            const estimatedAmmGasFeeWei = new utils_1.BigNumber(100e9);
            const decodedUniqueId = '1234-5678';
            const ammQuote = {
                makerAmount: ammMakerAmount,
                takerAmount: assetFillAmount,
                expectedSlippage,
                estimatedGasFeeWei: estimatedAmmGasFeeWei,
                decodedUniqueId,
            };
            const mm1MakerAmount = new utils_1.BigNumber(3550e6);
            const mm2MakerAmount = new utils_1.BigNumber(3600e6);
            const mmQuotes = [
                {
                    maker: 'maker1Address',
                    makerUri: 'http://maker1.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm1MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
                {
                    maker: 'maker2Address',
                    makerUri: 'http://maker2.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm2MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
            ];
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: makerTokenPrice,
                feeTokenPrice: null,
                ammQuote,
            });
            // When
            jest.useFakeTimers().setSystemTime(1650000000000);
            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync({
                workflow,
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            }, async () => {
                return Promise.resolve(mmQuotes);
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedGasFeeAmount,
                details: {
                    kind: 'gasOnly',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: null,
                    feeTokenBaseUnitPriceUsd: null,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(feeWithDetails).toMatchObject(expectedFee);
            expect(quotesWithGasFee).toMatchObject(mmQuotes);
            expect(ammQuoteUniqueId).toBe(decodedUniqueId);
        });
        it('should calculate v2 `price improvement` based fee with zero zeroExFee if price improvement is zero', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(1e18);
            const marginRakeRatio = 0.5;
            const ammMakerAmount = new utils_1.BigNumber(4000e6);
            const expectedSlippage = new utils_1.BigNumber(-0.01);
            const estimatedAmmGasFeeWei = new utils_1.BigNumber(100e9);
            const decodedUniqueId = '1234-5678';
            const ammQuote = {
                makerAmount: ammMakerAmount,
                takerAmount: assetFillAmount,
                expectedSlippage,
                estimatedGasFeeWei: estimatedAmmGasFeeWei,
                decodedUniqueId,
            };
            const mm1MakerAmount = new utils_1.BigNumber(3550e6);
            const mm2MakerAmount = new utils_1.BigNumber(3600e6);
            const mmQuotes = [
                {
                    maker: 'maker1Address',
                    makerUri: 'http://maker1.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm1MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
                {
                    maker: 'maker2Address',
                    makerUri: 'http://maker2.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm2MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
            ];
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio,
                    tradeSizeBps: 0,
                },
                gasPrice,
                tradeTokenPrice: makerTokenPrice,
                feeTokenPrice,
                ammQuote,
            });
            // When
            jest.useFakeTimers().setSystemTime(1650000000000);
            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync({
                workflow,
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            }, async () => {
                return Promise.resolve(mmQuotes);
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedGasFeeAmount,
                details: {
                    kind: 'margin',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                    zeroExFeeAmount: constants_1.ZERO,
                    margin: constants_1.ZERO,
                    marginRakeRatio,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                    zeroEx: {
                        amount: constants_1.ZERO,
                        details: {
                            kind: 'price_improvement',
                            priceImprovement: constants_1.ZERO,
                            rakeRatio: marginRakeRatio,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
            };
            expect(feeWithDetails).toMatchObject(expectedFee);
            expect(quotesWithGasFee).toMatchObject(mmQuotes);
            expect(ammQuoteUniqueId).toBe(decodedUniqueId);
        });
        it('should throw if called from RFQt workflow', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(1e18);
            const marginRakeRatio = 0.5;
            const ammMakerAmount = new utils_1.BigNumber(3450e6);
            const expectedSlippage = new utils_1.BigNumber(-0.01);
            const estimatedAmmGasFeeWei = new utils_1.BigNumber(100e9);
            const decodedUniqueId = '1234-5678';
            const ammQuote = {
                makerAmount: ammMakerAmount,
                takerAmount: assetFillAmount,
                expectedSlippage,
                estimatedGasFeeWei: estimatedAmmGasFeeWei,
                decodedUniqueId,
            };
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio,
                    tradeSizeBps: 0,
                },
                gasPrice,
                tradeTokenPrice: makerTokenPrice,
                feeTokenPrice,
                ammQuote,
            });
            const quoteContext = {
                workflow: 'rfqt',
                chainId: 1337,
                isFirm: true,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                takerAddress,
                trader: takerAddress,
                integrator,
            };
            // When
            await expect(() => feeService.calculateFeeAsync(quoteContext)).rejects.toThrow('Not implemented');
        });
    });
    describe('pure function calculateDefaultFeeAmount()', () => {
        it('should calculate default fee amount correctly', async () => {
            // Given
            const tradeTokenAmount = new utils_1.BigNumber(1e18);
            const feeRateBps = 5;
            const tradeTokenBaseUnitPriceUsd = new utils_1.BigNumber(6e-14);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const defaultFeeAmount = (0, fee_service_1.calculateDefaultFeeAmount)(tradeTokenAmount, feeRateBps, tradeTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            const expectedDefaultFeeAmount = new utils_1.BigNumber(1e16);
            expect(defaultFeeAmount).toMatchObject(expectedDefaultFeeAmount);
        });
        it('should return zero if bps is zero', async () => {
            // Given
            const tradeTokenAmount = new utils_1.BigNumber(1e18);
            const feeRateBps = 0;
            const tradeTokenBaseUnitPriceUsd = new utils_1.BigNumber(6e-14);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const defaultFeeAmount = (0, fee_service_1.calculateDefaultFeeAmount)(tradeTokenAmount, feeRateBps, tradeTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            expect(defaultFeeAmount).toMatchObject(constants_1.ZERO);
        });
        it('should return zero if either trade token price or fee token price is null', async () => {
            // Given
            const tradeTokenAmount = new utils_1.BigNumber(1e18);
            const feeRateBps = 5;
            const tradeTokenBaseUnitPriceUsd = new utils_1.BigNumber(6e-14);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const defaultFeeAmount1 = (0, fee_service_1.calculateDefaultFeeAmount)(tradeTokenAmount, feeRateBps, null, feeTokenBaseUnitPriceUsd);
            const defaultFeeAmount2 = (0, fee_service_1.calculateDefaultFeeAmount)(tradeTokenAmount, feeRateBps, tradeTokenBaseUnitPriceUsd, null);
            // Then
            expect(defaultFeeAmount1).toMatchObject(constants_1.ZERO);
            expect(defaultFeeAmount2).toMatchObject(constants_1.ZERO);
        });
    });
    describe('pure function calculatePriceImprovementAmount()', () => {
        it('should calculate price improvement amount for selling correctly', async () => {
            // Given
            const isSelling = true;
            const assetFillAmount = new utils_1.BigNumber(3e17);
            const makerQuoteWithGasFee = {
                maker: 'maker1Address',
                makerUri: 'http://maker1.com',
                makerToken,
                takerToken,
                makerAmount: new utils_1.BigNumber(1100e6),
                takerAmount: assetFillAmount,
                expiry: new utils_1.BigNumber(1652722767),
            };
            const ammQuote = {
                makerAmount: new utils_1.BigNumber(1000e6),
                takerAmount: assetFillAmount,
                expectedSlippage: new utils_1.BigNumber(-0.02),
                estimatedGasFeeWei: new utils_1.BigNumber(10e15),
            };
            const quoteTokenBaseUnitPriceUsd = new utils_1.BigNumber(1e-6);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const priceImprovementAmount = (0, fee_service_1.calculatePriceImprovementAmount)(makerQuoteWithGasFee, ammQuote, isSelling, quoteTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            const expectedPriceImprovementAmount = new utils_1.BigNumber(50e15);
            expect(priceImprovementAmount).toMatchObject(expectedPriceImprovementAmount);
        });
        it('should calculate price improvement amount for buying correctly', async () => {
            // Given
            const isSelling = false;
            const assetFillAmount = new utils_1.BigNumber(3e17);
            const makerQuoteWithGasFee = {
                maker: 'maker1Address',
                makerUri: 'http://maker1.com',
                makerToken,
                takerToken,
                makerAmount: assetFillAmount,
                takerAmount: new utils_1.BigNumber(900e6),
                expiry: new utils_1.BigNumber(1652722767),
            };
            const ammQuote = {
                makerAmount: assetFillAmount,
                takerAmount: new utils_1.BigNumber(1000e6),
                expectedSlippage: new utils_1.BigNumber(-0.02),
                estimatedGasFeeWei: new utils_1.BigNumber(10e15),
            };
            const quoteTokenBaseUnitPriceUsd = new utils_1.BigNumber(1e-6);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const priceImprovementAmount = (0, fee_service_1.calculatePriceImprovementAmount)(makerQuoteWithGasFee, ammQuote, isSelling, quoteTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            const expectedPriceImprovementAmount = new utils_1.BigNumber(50e15);
            expect(priceImprovementAmount).toMatchObject(expectedPriceImprovementAmount);
        });
        it('should return zero if there is no price improvement', async () => {
            // Given
            const isSelling = false;
            const assetFillAmount = new utils_1.BigNumber(3e17);
            const makerQuoteWithGasFee = {
                maker: 'maker1Address',
                makerUri: 'http://maker1.com',
                makerToken,
                takerToken,
                makerAmount: assetFillAmount,
                takerAmount: new utils_1.BigNumber(1051e6),
                expiry: new utils_1.BigNumber(1652722767),
            };
            const ammQuote = {
                makerAmount: assetFillAmount,
                takerAmount: new utils_1.BigNumber(1000e6),
                expectedSlippage: new utils_1.BigNumber(-0.02),
                estimatedGasFeeWei: new utils_1.BigNumber(10e15),
            };
            const quoteTokenBaseUnitPriceUsd = new utils_1.BigNumber(1e-6);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const priceImprovementAmount = (0, fee_service_1.calculatePriceImprovementAmount)(makerQuoteWithGasFee, ammQuote, isSelling, quoteTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            expect(priceImprovementAmount).toMatchObject(constants_1.ZERO);
        });
    });
    describe('pure function reviseQuoteWithZeroExFee()', () => {
        it('should revise quote correctly for selling', async () => {
            // Given
            const isSelling = true;
            const assetFillAmount = new utils_1.BigNumber(3e17);
            const makerQuoteWithGasFee = {
                maker: 'maker1Address',
                makerUri: 'http://maker1.com',
                makerToken,
                takerToken,
                makerAmount: new utils_1.BigNumber(1000e6),
                takerAmount: assetFillAmount,
                expiry: new utils_1.BigNumber(1652722767),
            };
            const zeroExFeeAmount = new utils_1.BigNumber(10e15);
            const quoteTokenBaseUnitPriceUsd = new utils_1.BigNumber(1e-6);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const revisedQuote = (0, fee_service_1.reviseQuoteWithFees)(makerQuoteWithGasFee, zeroExFeeAmount, isSelling, quoteTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            const expectedRevisedMakerAmount = new utils_1.BigNumber(970e6);
            expect(revisedQuote.makerAmount).toMatchObject(expectedRevisedMakerAmount);
        });
        it('should revise quote correctly for buying', async () => {
            // Given
            const isSelling = false;
            const assetFillAmount = new utils_1.BigNumber(3e17);
            const makerQuoteWithGasFee = {
                maker: 'maker1Address',
                makerUri: 'http://maker1.com',
                makerToken,
                takerToken,
                makerAmount: assetFillAmount,
                takerAmount: new utils_1.BigNumber(1000e6),
                expiry: new utils_1.BigNumber(1652722767),
            };
            const zeroExFeeAmount = new utils_1.BigNumber(10e15);
            const quoteTokenBaseUnitPriceUsd = new utils_1.BigNumber(1e-6);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const revisedQuote = (0, fee_service_1.reviseQuoteWithFees)(makerQuoteWithGasFee, zeroExFeeAmount, isSelling, quoteTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            const expectedRevisedTakerAmount = new utils_1.BigNumber(1030e6);
            expect(revisedQuote.takerAmount).toMatchObject(expectedRevisedTakerAmount);
        });
        it('should not revise quote correctly for zero zeroExFee', async () => {
            // Given
            const isSelling = true;
            const assetFillAmount = new utils_1.BigNumber(3e17);
            const makerQuoteWithGasFee = {
                maker: 'maker1Address',
                makerUri: 'http://maker1.com',
                makerToken,
                takerToken,
                makerAmount: new utils_1.BigNumber(1000e6),
                takerAmount: assetFillAmount,
                expiry: new utils_1.BigNumber(1652722767),
            };
            const zeroExFeeAmount = constants_1.ZERO;
            const quoteTokenBaseUnitPriceUsd = new utils_1.BigNumber(1e-6);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const revisedQuote = (0, fee_service_1.reviseQuoteWithFees)(makerQuoteWithGasFee, zeroExFeeAmount, isSelling, quoteTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            const expectedRevisedMakerAmount = new utils_1.BigNumber(1000e6);
            expect(revisedQuote.makerAmount).toMatchObject(expectedRevisedMakerAmount);
            expect(revisedQuote.takerAmount).toMatchObject(assetFillAmount);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,