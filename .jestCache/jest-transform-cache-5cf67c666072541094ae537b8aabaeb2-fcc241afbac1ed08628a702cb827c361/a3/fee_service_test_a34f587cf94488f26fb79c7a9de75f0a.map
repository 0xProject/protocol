{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/services/fee_service_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/services/fee_service_test.ts"],"sourcesContent":["// tslint:disable:max-file-line-count\n// tslint:disable:custom-no-magic-numbers\n\nimport { BigNumber } from '@0x/utils';\nimport { anything, instance, mock, when } from 'ts-mockito';\n\nimport { DEFAULT_FEE_MODEL_CONFIGURATION, FeeModelConfiguration } from '../../src/config';\nimport {\n    BPS_TO_RATIO,\n    DEFAULT_MIN_EXPIRY_DURATION_MS,\n    RFQM_TX_OTC_ORDER_GAS_ESTIMATE,\n    ZERO,\n} from '../../src/core/constants';\nimport {\n    calculateDefaultFeeAmount,\n    calculatePriceImprovementAmount,\n    reviseQuoteWithFees,\n    FeeService,\n} from '../../src/services/fee_service';\nimport { QuoteContext } from '../../src/services/types';\nimport { FeeWithDetails, IndicativeQuote, TokenMetadata } from '../../src/core/types';\nimport { ConfigManager } from '../../src/utils/config_manager';\nimport { GasStationAttendantEthereum } from '../../src/utils/GasStationAttendantEthereum';\nimport { TokenPriceOracle } from '../../src/utils/TokenPriceOracle';\nimport { AmmQuote, ZeroExApiClient } from '../../src/utils/ZeroExApiClient';\n\nconst feeTokenSymbol = 'fee';\nconst feeTokenAddress = 'feeTokenAddress';\nconst feeTokenDecimals = 18;\n\nconst buildFeeService = (overrides: {\n    feeModelConfiguration?: FeeModelConfiguration;\n    gasPrice?: BigNumber;\n    tradeTokenPrice?: BigNumber | null;\n    feeTokenPrice?: BigNumber | null;\n    ammQuote?: AmmQuote | null;\n    chainId?: number;\n    feeTokenMetadata?: TokenMetadata;\n    configManagerMock?: ConfigManager;\n    gasStationAttendantMock?: GasStationAttendantEthereum;\n    tokenPriceOracleMock?: TokenPriceOracle;\n    zeroExApiClientMock?: ZeroExApiClient;\n}): FeeService => {\n    const chainId = overrides?.chainId || 1337;\n    const feeTokenMetadata = overrides?.feeTokenMetadata || {\n        symbol: feeTokenSymbol,\n        decimals: feeTokenDecimals,\n        tokenAddress: feeTokenAddress,\n    };\n    const feeModelConfiguration = overrides?.feeModelConfiguration || DEFAULT_FEE_MODEL_CONFIGURATION;\n    const gasPrice = overrides?.gasPrice || new BigNumber(1e9);\n    const tradeTokenPrice = overrides?.tradeTokenPrice || null;\n    const feeTokenPrice = overrides?.feeTokenPrice || null;\n    const ammQuote = overrides?.ammQuote || null;\n\n    const configManagerMock = mock(ConfigManager);\n    when(configManagerMock.getFeeModelConfiguration(chainId, anything(), anything())).thenReturn(feeModelConfiguration);\n\n    const gasStationAttendantMock = mock(GasStationAttendantEthereum);\n    when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(gasPrice);\n\n    const tokenPriceOracleMock = mock(TokenPriceOracle);\n    when(tokenPriceOracleMock.batchFetchTokenPriceAsync(anything())).thenResolve([tradeTokenPrice, feeTokenPrice]);\n\n    const zeroExApiClientMock = mock(ZeroExApiClient);\n    when(zeroExApiClientMock.fetchAmmQuoteAsync(anything())).thenResolve(ammQuote);\n\n    return new FeeService(\n        chainId,\n        feeTokenMetadata,\n        instance(overrides?.configManagerMock || configManagerMock),\n        instance(overrides?.gasStationAttendantMock || gasStationAttendantMock),\n        instance(overrides?.tokenPriceOracleMock || tokenPriceOracleMock),\n        instance(overrides?.zeroExApiClientMock || zeroExApiClientMock),\n        DEFAULT_MIN_EXPIRY_DURATION_MS,\n    );\n};\n\ndescribe('FeeService', () => {\n    const workflow = 'rfqm';\n    const txOrigin = 'registryAddress';\n    const makerToken = 'UsdcAddress';\n    const makerTokenDecimals = 6;\n    const makerTokenPrice = new BigNumber(1e-6);\n\n    const takerToken = 'WbtcAddress';\n    const takerTokenDecimals = 18;\n    const takerTokenPrice = new BigNumber(6e-14);\n\n    const gasPrice = new BigNumber(1e9);\n    const gasEstimate = RFQM_TX_OTC_ORDER_GAS_ESTIMATE;\n\n    const feeTokenPrice = new BigNumber(3e-15);\n\n    const integrator = {\n        apiKeys: [],\n        integratorId: 'integratorId',\n        allowedChainIds: [1, 3, 137, 1337],\n        label: 'dummy integrator',\n        plp: true,\n        rfqm: true,\n        rfqt: true,\n    };\n\n    const takerAddress = 'takerAddress';\n\n    afterAll(() => {\n        jest.useRealTimers();\n    });\n\n    describe('calculateFeeAsync v0', () => {\n        const feeModelVersion = 0;\n        it('should calculate v0 fee for RFQm correctly', async () => {\n            // Given\n            const isSelling = true;\n            const isUnwrap = false;\n            const assetFillAmount = new BigNumber(0.345e18);\n            const tradeSizeBps = 5;\n\n            const feeService: FeeService = buildFeeService({\n                feeModelConfiguration: {\n                    marginRakeRatio: 0,\n                    tradeSizeBps,\n                },\n                gasPrice,\n                tradeTokenPrice: takerTokenPrice,\n                feeTokenPrice,\n            });\n\n            // When\n            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({\n                workflow,\n                chainId: 1337,\n                feeModelVersion,\n                txOrigin,\n                makerToken,\n                takerToken,\n                originalMakerToken: makerToken,\n                makerTokenDecimals,\n                takerTokenDecimals,\n                isUnwrap,\n                isSelling,\n                assetFillAmount,\n                takerAmount: assetFillAmount,\n                isFirm: true,\n                takerAddress,\n                trader: takerAddress,\n                integrator,\n            });\n\n            // Then\n            const expectedGasFeeAmount = gasPrice.times(gasEstimate);\n\n            const expectedFee: FeeWithDetails = {\n                type: 'fixed',\n                token: feeTokenAddress,\n                amount: expectedGasFeeAmount,\n                details: {\n                    kind: 'gasOnly',\n                    feeModelVersion,\n                    gasFeeAmount: expectedGasFeeAmount,\n                    gasPrice,\n                },\n                breakdown: {\n                    gas: {\n                        amount: expectedGasFeeAmount,\n                        details: {\n                            gasPrice,\n                            estimatedGas: new BigNumber(gasEstimate),\n                        },\n                    },\n                },\n                conversionRates: {\n                    nativeTokenBaseUnitPriceUsd: null,\n                    feeTokenBaseUnitPriceUsd: null,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: null,\n                },\n            };\n            expect(fee).toMatchObject(expectedFee);\n        });\n        it('should calculate v0 fee for RFQt correctly', async () => {\n            // Given\n            const isSelling = true;\n            const isUnwrap = false;\n            const assetFillAmount = new BigNumber(0.345e18);\n            const tradeSizeBps = 5;\n\n            const feeService: FeeService = buildFeeService({\n                feeModelConfiguration: {\n                    marginRakeRatio: 0,\n                    tradeSizeBps,\n                },\n                gasPrice,\n                tradeTokenPrice: takerTokenPrice,\n                feeTokenPrice,\n            });\n\n            // When\n            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({\n                workflow: 'rfqt',\n                chainId: 1337,\n                feeModelVersion,\n                txOrigin,\n                makerToken,\n                takerToken,\n                originalMakerToken: makerToken,\n                makerTokenDecimals,\n                takerTokenDecimals,\n                isUnwrap,\n                isSelling,\n                assetFillAmount,\n                takerAmount: assetFillAmount,\n                isFirm: true,\n                takerAddress,\n                trader: takerAddress,\n                integrator,\n            });\n\n            // Then\n            const expectedFee: FeeWithDetails = {\n                type: 'fixed',\n                token: feeTokenAddress,\n                amount: new BigNumber(0),\n                details: {\n                    kind: 'gasOnly',\n                    feeModelVersion,\n                    gasFeeAmount: new BigNumber(0),\n                    gasPrice: new BigNumber(0),\n                },\n                breakdown: {},\n                conversionRates: {\n                    nativeTokenBaseUnitPriceUsd: null,\n                    feeTokenBaseUnitPriceUsd: null,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: null,\n                },\n            };\n            expect(fee).toMatchObject(expectedFee);\n        });\n    });\n\n    describe('calculateFeeAsync v1', () => {\n        const feeModelVersion = 1;\n        it('should calculate v1 fee for RFQm selling correctly', async () => {\n            // Given\n            const isSelling = true;\n            const isUnwrap = false;\n            const assetFillAmount = new BigNumber(0.345e18);\n            const tradeSizeBps = 5;\n\n            const feeService: FeeService = buildFeeService({\n                feeModelConfiguration: {\n                    marginRakeRatio: 0,\n                    tradeSizeBps,\n                },\n                gasPrice,\n                tradeTokenPrice: takerTokenPrice,\n                feeTokenPrice,\n            });\n\n            // When\n            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({\n                workflow,\n                chainId: 1337,\n                feeModelVersion,\n                txOrigin,\n                makerToken,\n                takerToken,\n                originalMakerToken: makerToken,\n                makerTokenDecimals,\n                takerTokenDecimals,\n                isUnwrap,\n                isSelling,\n                assetFillAmount,\n                takerAmount: assetFillAmount,\n                isFirm: true,\n                takerAddress,\n                trader: takerAddress,\n                integrator,\n            });\n\n            // Then\n            const expectedGasFeeAmount = gasPrice.times(gasEstimate);\n            const expectedZeroExFeeAmount = assetFillAmount\n                .times(tradeSizeBps * BPS_TO_RATIO)\n                .times(takerTokenPrice)\n                .div(feeTokenPrice)\n                .integerValue();\n            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);\n\n            const expectedFee: FeeWithDetails = {\n                type: 'fixed',\n                token: feeTokenAddress,\n                amount: expectedTotalFeeAmount,\n                details: {\n                    kind: 'default',\n                    feeModelVersion,\n                    gasFeeAmount: expectedGasFeeAmount,\n                    gasPrice,\n                    zeroExFeeAmount: expectedZeroExFeeAmount,\n                    tradeSizeBps,\n                    feeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    takerTokenBaseUnitPriceUsd: takerTokenPrice,\n                    makerTokenBaseUnitPriceUsd: null,\n                },\n                breakdown: {\n                    gas: {\n                        amount: expectedGasFeeAmount,\n                        details: {\n                            gasPrice,\n                            estimatedGas: new BigNumber(gasEstimate),\n                        },\n                    },\n                    zeroEx: {\n                        amount: expectedZeroExFeeAmount,\n                        details: {\n                            kind: 'volume',\n                            tradeSizeBps,\n                        },\n                    },\n                },\n                conversionRates: {\n                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    feeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    takerTokenBaseUnitPriceUsd: takerTokenPrice,\n                    makerTokenBaseUnitPriceUsd: null,\n                },\n            };\n            expect(fee).toMatchObject(expectedFee);\n        });\n        it('should calculate v1 fee for RFQm buying correctly', async () => {\n            // Given\n            const isSelling = false;\n            const isUnwrap = false;\n            const assetFillAmount = new BigNumber(5000e6);\n            const tradeSizeBps = 4;\n\n            const feeService: FeeService = buildFeeService({\n                feeModelConfiguration: {\n                    marginRakeRatio: 0,\n                    tradeSizeBps,\n                },\n                gasPrice,\n                tradeTokenPrice: makerTokenPrice,\n                feeTokenPrice,\n            });\n\n            // When\n            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({\n                workflow,\n                chainId: 1337,\n                feeModelVersion,\n                makerToken,\n                takerToken,\n                originalMakerToken: makerToken,\n                makerTokenDecimals,\n                takerTokenDecimals,\n                isUnwrap,\n                isSelling,\n                assetFillAmount,\n                makerAmount: assetFillAmount,\n                isFirm: false,\n                takerAddress,\n                integrator,\n            });\n\n            // Then\n            const expectedGasFeeAmount = gasPrice.times(gasEstimate);\n            const expectedZeroExFeeAmount = assetFillAmount\n                .times(tradeSizeBps * BPS_TO_RATIO)\n                .times(makerTokenPrice)\n                .div(feeTokenPrice)\n                .integerValue();\n            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);\n\n            const expectedFee: FeeWithDetails = {\n                type: 'fixed',\n                token: feeTokenAddress,\n                amount: expectedTotalFeeAmount,\n                details: {\n                    kind: 'default',\n                    feeModelVersion,\n                    gasFeeAmount: expectedGasFeeAmount,\n                    gasPrice,\n                    zeroExFeeAmount: expectedZeroExFeeAmount,\n                    tradeSizeBps,\n                    feeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: makerTokenPrice,\n                },\n                breakdown: {\n                    gas: {\n                        amount: expectedGasFeeAmount,\n                        details: {\n                            gasPrice,\n                            estimatedGas: new BigNumber(gasEstimate),\n                        },\n                    },\n                    zeroEx: {\n                        amount: expectedZeroExFeeAmount,\n                        details: {\n                            kind: 'volume',\n                            tradeSizeBps,\n                        },\n                    },\n                },\n                conversionRates: {\n                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    feeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: makerTokenPrice,\n                },\n            };\n            expect(fee).toMatchObject(expectedFee);\n        });\n        it('should calculate v1 fee for RFQt selling correctly', async () => {\n            // Given\n            const isSelling = true;\n            const isUnwrap = false;\n            const assetFillAmount = new BigNumber(0.345e18);\n            const tradeSizeBps = 5;\n\n            const feeService: FeeService = buildFeeService({\n                feeModelConfiguration: {\n                    marginRakeRatio: 0,\n                    tradeSizeBps,\n                },\n                gasPrice,\n                tradeTokenPrice: takerTokenPrice,\n                feeTokenPrice,\n            });\n\n            // When\n            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({\n                workflow: 'rfqt',\n                chainId: 1337,\n                feeModelVersion,\n                txOrigin,\n                makerToken,\n                takerToken,\n                originalMakerToken: makerToken,\n                makerTokenDecimals,\n                takerTokenDecimals,\n                isUnwrap,\n                isSelling,\n                assetFillAmount,\n                takerAmount: assetFillAmount,\n                isFirm: true,\n                takerAddress,\n                trader: takerAddress,\n                integrator,\n            });\n\n            // Then\n            const expectedZeroExFeeAmount = assetFillAmount\n                .times(tradeSizeBps * BPS_TO_RATIO)\n                .times(takerTokenPrice)\n                .div(feeTokenPrice)\n                .integerValue();\n\n            const expectedFee: FeeWithDetails = {\n                type: 'fixed',\n                token: feeTokenAddress,\n                amount: expectedZeroExFeeAmount,\n                details: {\n                    kind: 'default',\n                    feeModelVersion,\n                    gasFeeAmount: new BigNumber(0),\n                    gasPrice: new BigNumber(0),\n                    zeroExFeeAmount: expectedZeroExFeeAmount,\n                    tradeSizeBps,\n                    feeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    takerTokenBaseUnitPriceUsd: takerTokenPrice,\n                    makerTokenBaseUnitPriceUsd: null,\n                },\n                breakdown: {\n                    zeroEx: {\n                        amount: expectedZeroExFeeAmount,\n                        details: {\n                            kind: 'volume',\n                            tradeSizeBps,\n                        },\n                    },\n                },\n                conversionRates: {\n                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    feeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    takerTokenBaseUnitPriceUsd: takerTokenPrice,\n                    makerTokenBaseUnitPriceUsd: null,\n                },\n            };\n            expect(fee).toMatchObject(expectedFee);\n        });\n        it('should not include zeroEx fee for non-configured pairs', async () => {\n            // Given\n            const isSelling = true;\n            const isUnwrap = false;\n            const assetFillAmount = new BigNumber(0.345e18);\n\n            const feeService: FeeService = buildFeeService({\n                gasPrice,\n                tradeTokenPrice: takerTokenPrice,\n                feeTokenPrice,\n            });\n\n            // When\n            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({\n                workflow,\n                chainId: 1337,\n                feeModelVersion,\n                makerToken,\n                takerToken,\n                originalMakerToken: makerToken,\n                makerTokenDecimals,\n                takerTokenDecimals,\n                isUnwrap,\n                isSelling,\n                assetFillAmount,\n                takerAmount: assetFillAmount,\n                isFirm: false,\n                takerAddress,\n                integrator,\n            });\n\n            // Then\n            const expectedGasFeeAmount = gasPrice.times(gasEstimate);\n\n            const expectedFee: FeeWithDetails = {\n                type: 'fixed',\n                token: feeTokenAddress,\n                amount: expectedGasFeeAmount,\n                details: {\n                    kind: 'default',\n                    feeModelVersion,\n                    gasFeeAmount: expectedGasFeeAmount,\n                    gasPrice,\n                    zeroExFeeAmount: new BigNumber(0),\n                    tradeSizeBps: 0,\n                    feeTokenBaseUnitPriceUsd: null,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: null,\n                },\n                breakdown: {\n                    gas: {\n                        amount: expectedGasFeeAmount,\n                        details: {\n                            gasPrice,\n                            estimatedGas: new BigNumber(gasEstimate),\n                        },\n                    },\n                    zeroEx: {\n                        amount: new BigNumber(0),\n                        details: {\n                            kind: 'volume',\n                            tradeSizeBps: 0,\n                        },\n                    },\n                },\n                conversionRates: {\n                    nativeTokenBaseUnitPriceUsd: null,\n                    feeTokenBaseUnitPriceUsd: null,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: null,\n                },\n            };\n            expect(fee).toMatchObject(expectedFee);\n        });\n        it('should not include zeroEx fee if price oracle is down', async () => {\n            // Given\n            const isSelling = false;\n            const isUnwrap = false;\n            const assetFillAmount = new BigNumber(5000e6);\n            const tradeSizeBps = 4;\n\n            const feeService: FeeService = buildFeeService({\n                feeModelConfiguration: {\n                    marginRakeRatio: 0,\n                    tradeSizeBps,\n                },\n                gasPrice,\n                tradeTokenPrice: makerTokenPrice,\n                feeTokenPrice: null,\n            });\n\n            // When\n            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({\n                workflow,\n                chainId: 1337,\n                feeModelVersion,\n                txOrigin,\n                makerToken,\n                takerToken,\n                originalMakerToken: makerToken,\n                makerTokenDecimals,\n                takerTokenDecimals,\n                isUnwrap,\n                isSelling,\n                assetFillAmount,\n                makerAmount: assetFillAmount,\n                isFirm: true,\n                takerAddress,\n                trader: takerAddress,\n                integrator,\n            });\n\n            // Then\n            const expectedGasFeeAmount = gasPrice.times(gasEstimate);\n\n            const expectedFee: FeeWithDetails = {\n                type: 'fixed',\n                token: feeTokenAddress,\n                amount: expectedGasFeeAmount,\n                details: {\n                    kind: 'gasOnly',\n                    feeModelVersion,\n                    gasFeeAmount: expectedGasFeeAmount,\n                    gasPrice,\n                },\n                breakdown: {\n                    gas: {\n                        amount: expectedGasFeeAmount,\n                        details: {\n                            gasPrice,\n                            estimatedGas: new BigNumber(gasEstimate),\n                        },\n                    },\n                },\n                conversionRates: {\n                    nativeTokenBaseUnitPriceUsd: null,\n                    feeTokenBaseUnitPriceUsd: null,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: null,\n                },\n            };\n            expect(fee).toMatchObject(expectedFee);\n        });\n    });\n\n    describe('calculateFeeAsync v2', () => {\n        const feeModelVersion = 2;\n        it('should calculate v2 `price improvement` based fee for sell correctly if price improvement detection succeeded', async () => {\n            // Given\n            const isSelling = true;\n            const isUnwrap = false;\n            const assetFillAmount = new BigNumber(1e18);\n            const marginRakeRatio = 0.5;\n\n            const ammMakerAmount = new BigNumber(3450e6);\n            const expectedSlippage = new BigNumber(-0.01);\n            const estimatedAmmGasFeeWei = new BigNumber(100e9);\n            const decodedUniqueId = '1234-5678';\n            const ammQuote: AmmQuote = {\n                makerAmount: ammMakerAmount,\n                takerAmount: assetFillAmount,\n                expectedSlippage,\n                estimatedGasFeeWei: estimatedAmmGasFeeWei,\n                decodedUniqueId,\n            };\n\n            const mm1MakerAmount = new BigNumber(3550e6);\n            const mm2MakerAmount = new BigNumber(3600e6);\n            const mmQuotes: IndicativeQuote[] = [\n                {\n                    maker: 'maker1Address',\n                    makerUri: 'http://maker1.com',\n                    makerToken,\n                    takerToken,\n                    makerAmount: mm1MakerAmount,\n                    takerAmount: assetFillAmount,\n                    expiry: new BigNumber(1652722767),\n                },\n                {\n                    maker: 'maker2Address',\n                    makerUri: 'http://maker2.com',\n                    makerToken,\n                    takerToken,\n                    makerAmount: mm2MakerAmount,\n                    takerAmount: assetFillAmount,\n                    expiry: new BigNumber(1652722767),\n                },\n            ];\n\n            const feeService: FeeService = buildFeeService({\n                feeModelConfiguration: {\n                    marginRakeRatio,\n                    tradeSizeBps: 0,\n                },\n                gasPrice,\n                tradeTokenPrice: makerTokenPrice,\n                feeTokenPrice,\n                ammQuote,\n            });\n\n            const quoteContext: QuoteContext = {\n                workflow,\n                chainId: 1337,\n                isFirm: true,\n                feeModelVersion,\n                txOrigin,\n                makerToken,\n                takerToken,\n                originalMakerToken: makerToken,\n                makerTokenDecimals,\n                takerTokenDecimals,\n                isUnwrap,\n                isSelling,\n                assetFillAmount,\n                takerAmount: assetFillAmount,\n                takerAddress,\n                trader: takerAddress,\n                integrator,\n            };\n\n            // When\n            jest.useFakeTimers().setSystemTime(1650000000000);\n            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync(\n                quoteContext,\n                async () => {\n                    return Promise.resolve(mmQuotes);\n                },\n            );\n\n            // Then\n            const expectedGasFeeAmount = gasPrice.times(gasEstimate);\n            const expectedMargin = mm2MakerAmount\n                .minus(ammMakerAmount.times(new BigNumber(1).plus(expectedSlippage)))\n                .times(makerTokenPrice)\n                .div(feeTokenPrice)\n                .plus(estimatedAmmGasFeeWei)\n                .integerValue();\n            const expectedZeroExFeeAmount = expectedMargin.times(marginRakeRatio).integerValue();\n            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);\n\n            const expectedFee: FeeWithDetails = {\n                type: 'fixed',\n                token: feeTokenAddress,\n                amount: expectedTotalFeeAmount,\n                details: {\n                    kind: 'margin',\n                    feeModelVersion,\n                    gasFeeAmount: expectedGasFeeAmount,\n                    gasPrice,\n                    zeroExFeeAmount: expectedZeroExFeeAmount,\n                    margin: expectedMargin,\n                    marginRakeRatio,\n                    feeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: makerTokenPrice,\n                },\n                breakdown: {\n                    gas: {\n                        amount: expectedGasFeeAmount,\n                        details: {\n                            gasPrice,\n                            estimatedGas: new BigNumber(gasEstimate),\n                        },\n                    },\n                    zeroEx: {\n                        amount: expectedZeroExFeeAmount,\n                        details: {\n                            kind: 'price_improvement',\n                            priceImprovement: expectedMargin,\n                            rakeRatio: marginRakeRatio,\n                        },\n                    },\n                },\n                conversionRates: {\n                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    feeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: makerTokenPrice,\n                },\n            };\n            expect(feeWithDetails).toMatchObject(expectedFee);\n            expect(quotesWithGasFee).toMatchObject(mmQuotes);\n            expect(ammQuoteUniqueId).toBe(decodedUniqueId);\n\n            // When\n            const revisedQuotes = await feeService.reviseQuotesAsync(\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                quotesWithGasFee!,\n                expectedZeroExFeeAmount,\n                quoteContext,\n            );\n\n            // Then\n            const expectedRevisedQuotes = mmQuotes.map((quote) =>\n                reviseQuoteWithFees(quote, expectedZeroExFeeAmount, isSelling, makerTokenPrice, feeTokenPrice),\n            );\n\n            expect(revisedQuotes).toMatchObject(expectedRevisedQuotes);\n        });\n        it('should calculate v2 `price improvement` based fee for buy correctly if price improvement detection succeeded', async () => {\n            // Given\n            const isSelling = false;\n            const isUnwrap = false;\n            const assetFillAmount = new BigNumber(1e18);\n            const marginRakeRatio = 0.4;\n\n            const ammTakerAmount = new BigNumber(3450e6);\n            const expectedSlippage = new BigNumber(-0.1);\n            const estimatedAmmGasFeeWei = new BigNumber(100e9);\n            const decodedUniqueId = '1234-5678';\n            const ammQuote: AmmQuote = {\n                makerAmount: assetFillAmount,\n                takerAmount: ammTakerAmount,\n                expectedSlippage,\n                estimatedGasFeeWei: estimatedAmmGasFeeWei,\n                decodedUniqueId,\n            };\n\n            const mm1TakerAmount = new BigNumber(3400e6);\n            const mm2TakerAmount = new BigNumber(3350e6);\n            const mmQuotes: IndicativeQuote[] = [\n                {\n                    maker: 'maker1Address',\n                    makerUri: 'http://maker1.com',\n                    makerToken,\n                    takerToken,\n                    makerAmount: assetFillAmount,\n                    takerAmount: mm1TakerAmount,\n                    expiry: new BigNumber(1652722767),\n                },\n                {\n                    maker: 'maker2Address',\n                    makerUri: 'http://maker2.com',\n                    makerToken,\n                    takerToken,\n                    makerAmount: assetFillAmount,\n                    takerAmount: mm2TakerAmount,\n                    expiry: new BigNumber(1652722767),\n                },\n            ];\n\n            const feeService: FeeService = buildFeeService({\n                feeModelConfiguration: {\n                    marginRakeRatio,\n                    tradeSizeBps: 0,\n                },\n                gasPrice,\n                tradeTokenPrice: takerTokenPrice,\n                feeTokenPrice,\n                ammQuote,\n            });\n\n            const quoteContext: QuoteContext = {\n                workflow,\n                chainId: 1337,\n                feeModelVersion,\n                makerToken,\n                takerToken,\n                originalMakerToken: makerToken,\n                makerTokenDecimals,\n                takerTokenDecimals,\n                isUnwrap,\n                isSelling,\n                assetFillAmount,\n                makerAmount: assetFillAmount,\n                isFirm: false,\n                takerAddress,\n                integrator,\n            };\n\n            // When\n            jest.useFakeTimers().setSystemTime(1650000000000);\n            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync(\n                quoteContext,\n                async () => {\n                    return Promise.resolve(mmQuotes);\n                },\n            );\n\n            // Then\n            const expectedGasFeeAmount = gasPrice.times(gasEstimate);\n            const expectedMargin = ammTakerAmount\n                .times(new BigNumber(1).minus(expectedSlippage))\n                .minus(mm2TakerAmount)\n                .times(takerTokenPrice)\n                .div(feeTokenPrice)\n                .plus(estimatedAmmGasFeeWei)\n                .integerValue();\n            const expectedZeroExFeeAmount = expectedMargin.times(marginRakeRatio).integerValue();\n            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);\n\n            const expectedFee: FeeWithDetails = {\n                type: 'fixed',\n                token: feeTokenAddress,\n                amount: expectedTotalFeeAmount,\n                details: {\n                    kind: 'margin',\n                    feeModelVersion,\n                    gasFeeAmount: expectedGasFeeAmount,\n                    gasPrice,\n                    zeroExFeeAmount: expectedZeroExFeeAmount,\n                    margin: expectedMargin,\n                    marginRakeRatio,\n                    feeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    takerTokenBaseUnitPriceUsd: takerTokenPrice,\n                    makerTokenBaseUnitPriceUsd: null,\n                },\n                breakdown: {\n                    gas: {\n                        amount: expectedGasFeeAmount,\n                        details: {\n                            gasPrice,\n                            estimatedGas: new BigNumber(gasEstimate),\n                        },\n                    },\n                    zeroEx: {\n                        amount: expectedZeroExFeeAmount,\n                        details: {\n                            kind: 'price_improvement',\n                            priceImprovement: expectedMargin,\n                            rakeRatio: marginRakeRatio,\n                        },\n                    },\n                },\n                conversionRates: {\n                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    feeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    takerTokenBaseUnitPriceUsd: takerTokenPrice,\n                    makerTokenBaseUnitPriceUsd: null,\n                },\n            };\n            expect(feeWithDetails).toMatchObject(expectedFee);\n            expect(quotesWithGasFee).toMatchObject(mmQuotes);\n            expect(ammQuoteUniqueId).toBe(decodedUniqueId);\n\n            // When\n            const revisedQuotes = await feeService.reviseQuotesAsync(\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                quotesWithGasFee!,\n                expectedZeroExFeeAmount,\n                quoteContext,\n            );\n\n            // Then\n            const expectedRevisedQuotes = mmQuotes.map((quote) =>\n                reviseQuoteWithFees(quote, expectedZeroExFeeAmount, isSelling, takerTokenPrice, feeTokenPrice),\n            );\n\n            expect(revisedQuotes).toMatchObject(expectedRevisedQuotes);\n        });\n        it('should calculate v2 `default` fee correctly if token price query succeeded but 0x-api query failed', async () => {\n            // Given\n            const isSelling = true;\n            const isUnwrap = false;\n            const assetFillAmount = new BigNumber(1e18);\n            const marginRakeRatio = 0.5;\n            const tradeSizeBps = 5;\n\n            const ammQuote = null;\n\n            const mm1MakerAmount = new BigNumber(3550e6);\n            const mm2MakerAmount = new BigNumber(3600e6);\n            const mmQuotes: IndicativeQuote[] = [\n                {\n                    maker: 'maker1Address',\n                    makerUri: 'http://maker1.com',\n                    makerToken,\n                    takerToken,\n                    makerAmount: mm1MakerAmount,\n                    takerAmount: assetFillAmount,\n                    expiry: new BigNumber(1652722767),\n                },\n                {\n                    maker: 'maker2Address',\n                    makerUri: 'http://maker2.com',\n                    makerToken,\n                    takerToken,\n                    makerAmount: mm2MakerAmount,\n                    takerAmount: assetFillAmount,\n                    expiry: new BigNumber(1652722767),\n                },\n            ];\n\n            const feeService: FeeService = buildFeeService({\n                feeModelConfiguration: {\n                    marginRakeRatio,\n                    tradeSizeBps,\n                },\n                gasPrice,\n                tradeTokenPrice: makerTokenPrice,\n                feeTokenPrice,\n                ammQuote,\n            });\n\n            const quoteContext: QuoteContext = {\n                workflow,\n                chainId: 1337,\n                feeModelVersion,\n                txOrigin,\n                makerToken,\n                takerToken,\n                originalMakerToken: makerToken,\n                makerTokenDecimals,\n                takerTokenDecimals,\n                isUnwrap,\n                isSelling,\n                assetFillAmount,\n                takerAmount: assetFillAmount,\n                isFirm: true,\n                takerAddress,\n                trader: takerAddress,\n                integrator,\n            };\n\n            // When\n            jest.useFakeTimers().setSystemTime(1650000000000);\n            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync(\n                quoteContext,\n                async () => {\n                    return Promise.resolve(mmQuotes);\n                },\n            );\n\n            // Then\n            const expectedGasFeeAmount = gasPrice.times(gasEstimate);\n            const expectedZeroExFeeAmount = calculateDefaultFeeAmount(\n                mm2MakerAmount,\n                tradeSizeBps,\n                makerTokenPrice,\n                feeTokenPrice,\n            );\n            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);\n\n            const expectedFee: FeeWithDetails = {\n                type: 'fixed',\n                token: feeTokenAddress,\n                amount: expectedTotalFeeAmount,\n                details: {\n                    kind: 'default',\n                    feeModelVersion,\n                    gasFeeAmount: expectedGasFeeAmount,\n                    gasPrice,\n                    zeroExFeeAmount: expectedZeroExFeeAmount,\n                    tradeSizeBps,\n                    feeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: makerTokenPrice,\n                },\n                breakdown: {\n                    gas: {\n                        amount: expectedGasFeeAmount,\n                        details: {\n                            gasPrice,\n                            estimatedGas: new BigNumber(gasEstimate),\n                        },\n                    },\n                    zeroEx: {\n                        amount: expectedZeroExFeeAmount,\n                        details: {\n                            kind: 'volume',\n                            tradeSizeBps,\n                        },\n                    },\n                },\n                conversionRates: {\n                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    feeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: makerTokenPrice,\n                },\n            };\n            expect(feeWithDetails).toMatchObject(expectedFee);\n            expect(quotesWithGasFee).toMatchObject(mmQuotes);\n            expect(ammQuoteUniqueId).toBe(undefined);\n\n            // When\n            const revisedQuotes = await feeService.reviseQuotesAsync(\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                quotesWithGasFee!,\n                expectedZeroExFeeAmount,\n                quoteContext,\n            );\n\n            // Then\n            const expectedRevisedQuotes = mmQuotes.map((quote) =>\n                reviseQuoteWithFees(quote, expectedZeroExFeeAmount, isSelling, makerTokenPrice, feeTokenPrice),\n            );\n\n            expect(revisedQuotes).toMatchObject(expectedRevisedQuotes);\n        });\n        it('should calculate v2 `gasOnly` fee correctly if token price query failed', async () => {\n            // Given\n            const isSelling = true;\n            const isUnwrap = false;\n            const assetFillAmount = new BigNumber(1e18);\n            const marginRakeRatio = 0.5;\n            const tradeSizeBps = 5;\n\n            const ammMakerAmount = new BigNumber(3450e6);\n            const expectedSlippage = new BigNumber(-0.01);\n            const estimatedAmmGasFeeWei = new BigNumber(100e9);\n            const decodedUniqueId = '1234-5678';\n            const ammQuote: AmmQuote = {\n                makerAmount: ammMakerAmount,\n                takerAmount: assetFillAmount,\n                expectedSlippage,\n                estimatedGasFeeWei: estimatedAmmGasFeeWei,\n                decodedUniqueId,\n            };\n\n            const mm1MakerAmount = new BigNumber(3550e6);\n            const mm2MakerAmount = new BigNumber(3600e6);\n            const mmQuotes: IndicativeQuote[] = [\n                {\n                    maker: 'maker1Address',\n                    makerUri: 'http://maker1.com',\n                    makerToken,\n                    takerToken,\n                    makerAmount: mm1MakerAmount,\n                    takerAmount: assetFillAmount,\n                    expiry: new BigNumber(1652722767),\n                },\n                {\n                    maker: 'maker2Address',\n                    makerUri: 'http://maker2.com',\n                    makerToken,\n                    takerToken,\n                    makerAmount: mm2MakerAmount,\n                    takerAmount: assetFillAmount,\n                    expiry: new BigNumber(1652722767),\n                },\n            ];\n\n            const feeService: FeeService = buildFeeService({\n                feeModelConfiguration: {\n                    marginRakeRatio,\n                    tradeSizeBps,\n                },\n                gasPrice,\n                tradeTokenPrice: makerTokenPrice,\n                feeTokenPrice: null,\n                ammQuote,\n            });\n\n            // When\n            jest.useFakeTimers().setSystemTime(1650000000000);\n            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync(\n                {\n                    workflow,\n                    chainId: 1337,\n                    feeModelVersion,\n                    txOrigin,\n                    makerToken,\n                    takerToken,\n                    originalMakerToken: makerToken,\n                    makerTokenDecimals,\n                    takerTokenDecimals,\n                    isUnwrap,\n                    isSelling,\n                    assetFillAmount,\n                    takerAmount: assetFillAmount,\n                    isFirm: true,\n                    takerAddress,\n                    trader: takerAddress,\n                    integrator,\n                },\n                async () => {\n                    return Promise.resolve(mmQuotes);\n                },\n            );\n\n            // Then\n            const expectedGasFeeAmount = gasPrice.times(gasEstimate);\n\n            const expectedFee: FeeWithDetails = {\n                type: 'fixed',\n                token: feeTokenAddress,\n                amount: expectedGasFeeAmount,\n                details: {\n                    kind: 'gasOnly',\n                    feeModelVersion,\n                    gasFeeAmount: expectedGasFeeAmount,\n                    gasPrice,\n                },\n                breakdown: {\n                    gas: {\n                        amount: expectedGasFeeAmount,\n                        details: {\n                            gasPrice,\n                            estimatedGas: new BigNumber(gasEstimate),\n                        },\n                    },\n                },\n                conversionRates: {\n                    nativeTokenBaseUnitPriceUsd: null,\n                    feeTokenBaseUnitPriceUsd: null,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: null,\n                },\n            };\n            expect(feeWithDetails).toMatchObject(expectedFee);\n            expect(quotesWithGasFee).toMatchObject(mmQuotes);\n            expect(ammQuoteUniqueId).toBe(decodedUniqueId);\n        });\n        it('should calculate v2 `price improvement` based fee with zero zeroExFee if price improvement is zero', async () => {\n            // Given\n            const isSelling = true;\n            const isUnwrap = false;\n            const assetFillAmount = new BigNumber(1e18);\n            const marginRakeRatio = 0.5;\n\n            const ammMakerAmount = new BigNumber(4000e6);\n            const expectedSlippage = new BigNumber(-0.01);\n            const estimatedAmmGasFeeWei = new BigNumber(100e9);\n            const decodedUniqueId = '1234-5678';\n            const ammQuote: AmmQuote = {\n                makerAmount: ammMakerAmount,\n                takerAmount: assetFillAmount,\n                expectedSlippage,\n                estimatedGasFeeWei: estimatedAmmGasFeeWei,\n                decodedUniqueId,\n            };\n\n            const mm1MakerAmount = new BigNumber(3550e6);\n            const mm2MakerAmount = new BigNumber(3600e6);\n            const mmQuotes: IndicativeQuote[] = [\n                {\n                    maker: 'maker1Address',\n                    makerUri: 'http://maker1.com',\n                    makerToken,\n                    takerToken,\n                    makerAmount: mm1MakerAmount,\n                    takerAmount: assetFillAmount,\n                    expiry: new BigNumber(1652722767),\n                },\n                {\n                    maker: 'maker2Address',\n                    makerUri: 'http://maker2.com',\n                    makerToken,\n                    takerToken,\n                    makerAmount: mm2MakerAmount,\n                    takerAmount: assetFillAmount,\n                    expiry: new BigNumber(1652722767),\n                },\n            ];\n\n            const feeService: FeeService = buildFeeService({\n                feeModelConfiguration: {\n                    marginRakeRatio,\n                    tradeSizeBps: 0,\n                },\n                gasPrice,\n                tradeTokenPrice: makerTokenPrice,\n                feeTokenPrice,\n                ammQuote,\n            });\n\n            // When\n            jest.useFakeTimers().setSystemTime(1650000000000);\n            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync(\n                {\n                    workflow,\n                    chainId: 1337,\n                    feeModelVersion,\n                    txOrigin,\n                    makerToken,\n                    takerToken,\n                    originalMakerToken: makerToken,\n                    makerTokenDecimals,\n                    takerTokenDecimals,\n                    isUnwrap,\n                    isSelling,\n                    assetFillAmount,\n                    takerAmount: assetFillAmount,\n                    isFirm: true,\n                    takerAddress,\n                    trader: takerAddress,\n                    integrator,\n                },\n                async () => {\n                    return Promise.resolve(mmQuotes);\n                },\n            );\n\n            // Then\n            const expectedGasFeeAmount = gasPrice.times(gasEstimate);\n\n            const expectedFee: FeeWithDetails = {\n                type: 'fixed',\n                token: feeTokenAddress,\n                amount: expectedGasFeeAmount,\n                details: {\n                    kind: 'margin',\n                    feeModelVersion,\n                    gasFeeAmount: expectedGasFeeAmount,\n                    gasPrice,\n                    zeroExFeeAmount: ZERO,\n                    margin: ZERO,\n                    marginRakeRatio,\n                    feeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: makerTokenPrice,\n                },\n                breakdown: {\n                    gas: {\n                        amount: expectedGasFeeAmount,\n                        details: {\n                            gasPrice,\n                            estimatedGas: new BigNumber(gasEstimate),\n                        },\n                    },\n                    zeroEx: {\n                        amount: ZERO,\n                        details: {\n                            kind: 'price_improvement',\n                            priceImprovement: ZERO,\n                            rakeRatio: marginRakeRatio,\n                        },\n                    },\n                },\n                conversionRates: {\n                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    feeTokenBaseUnitPriceUsd: feeTokenPrice,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: makerTokenPrice,\n                },\n            };\n            expect(feeWithDetails).toMatchObject(expectedFee);\n            expect(quotesWithGasFee).toMatchObject(mmQuotes);\n            expect(ammQuoteUniqueId).toBe(decodedUniqueId);\n        });\n        it('should throw if called from RFQt workflow', async () => {\n            // Given\n            const isSelling = true;\n            const isUnwrap = false;\n            const assetFillAmount = new BigNumber(1e18);\n            const marginRakeRatio = 0.5;\n\n            const ammMakerAmount = new BigNumber(3450e6);\n            const expectedSlippage = new BigNumber(-0.01);\n            const estimatedAmmGasFeeWei = new BigNumber(100e9);\n            const decodedUniqueId = '1234-5678';\n            const ammQuote: AmmQuote = {\n                makerAmount: ammMakerAmount,\n                takerAmount: assetFillAmount,\n                expectedSlippage,\n                estimatedGasFeeWei: estimatedAmmGasFeeWei,\n                decodedUniqueId,\n            };\n\n            const feeService: FeeService = buildFeeService({\n                feeModelConfiguration: {\n                    marginRakeRatio,\n                    tradeSizeBps: 0,\n                },\n                gasPrice,\n                tradeTokenPrice: makerTokenPrice,\n                feeTokenPrice,\n                ammQuote,\n            });\n\n            const quoteContext: QuoteContext = {\n                workflow: 'rfqt',\n                chainId: 1337,\n                isFirm: true,\n                feeModelVersion,\n                txOrigin,\n                makerToken,\n                takerToken,\n                originalMakerToken: makerToken,\n                makerTokenDecimals,\n                takerTokenDecimals,\n                isUnwrap,\n                isSelling,\n                assetFillAmount,\n                takerAmount: assetFillAmount,\n                takerAddress,\n                trader: takerAddress,\n                integrator,\n            };\n\n            // When\n            await expect(() => feeService.calculateFeeAsync(quoteContext)).rejects.toThrow('Not implemented');\n        });\n    });\n\n    describe('pure function calculateDefaultFeeAmount()', () => {\n        it('should calculate default fee amount correctly', async () => {\n            // Given\n            const tradeTokenAmount = new BigNumber(1e18);\n            const feeRateBps = 5;\n            const tradeTokenBaseUnitPriceUsd = new BigNumber(6e-14);\n            const feeTokenBaseUnitPriceUsd = new BigNumber(3e-15);\n\n            // When\n            const defaultFeeAmount = calculateDefaultFeeAmount(\n                tradeTokenAmount,\n                feeRateBps,\n                tradeTokenBaseUnitPriceUsd,\n                feeTokenBaseUnitPriceUsd,\n            );\n\n            // Then\n            const expectedDefaultFeeAmount = new BigNumber(1e16);\n            expect(defaultFeeAmount).toMatchObject(expectedDefaultFeeAmount);\n        });\n        it('should return zero if bps is zero', async () => {\n            // Given\n            const tradeTokenAmount = new BigNumber(1e18);\n            const feeRateBps = 0;\n            const tradeTokenBaseUnitPriceUsd = new BigNumber(6e-14);\n            const feeTokenBaseUnitPriceUsd = new BigNumber(3e-15);\n\n            // When\n            const defaultFeeAmount = calculateDefaultFeeAmount(\n                tradeTokenAmount,\n                feeRateBps,\n                tradeTokenBaseUnitPriceUsd,\n                feeTokenBaseUnitPriceUsd,\n            );\n\n            // Then\n            expect(defaultFeeAmount).toMatchObject(ZERO);\n        });\n        it('should return zero if either trade token price or fee token price is null', async () => {\n            // Given\n            const tradeTokenAmount = new BigNumber(1e18);\n            const feeRateBps = 5;\n            const tradeTokenBaseUnitPriceUsd = new BigNumber(6e-14);\n            const feeTokenBaseUnitPriceUsd = new BigNumber(3e-15);\n\n            // When\n            const defaultFeeAmount1 = calculateDefaultFeeAmount(\n                tradeTokenAmount,\n                feeRateBps,\n                null,\n                feeTokenBaseUnitPriceUsd,\n            );\n            const defaultFeeAmount2 = calculateDefaultFeeAmount(\n                tradeTokenAmount,\n                feeRateBps,\n                tradeTokenBaseUnitPriceUsd,\n                null,\n            );\n\n            // Then\n            expect(defaultFeeAmount1).toMatchObject(ZERO);\n            expect(defaultFeeAmount2).toMatchObject(ZERO);\n        });\n    });\n    describe('pure function calculatePriceImprovementAmount()', () => {\n        it('should calculate price improvement amount for selling correctly', async () => {\n            // Given\n            const isSelling = true;\n            const assetFillAmount = new BigNumber(3e17);\n            const makerQuoteWithGasFee: IndicativeQuote = {\n                maker: 'maker1Address',\n                makerUri: 'http://maker1.com',\n                makerToken,\n                takerToken,\n                makerAmount: new BigNumber(1100e6),\n                takerAmount: assetFillAmount,\n                expiry: new BigNumber(1652722767),\n            };\n\n            const ammQuote: AmmQuote = {\n                makerAmount: new BigNumber(1000e6),\n                takerAmount: assetFillAmount,\n                expectedSlippage: new BigNumber(-0.02),\n                estimatedGasFeeWei: new BigNumber(10e15),\n            };\n\n            const quoteTokenBaseUnitPriceUsd = new BigNumber(1e-6);\n            const feeTokenBaseUnitPriceUsd = new BigNumber(3e-15);\n\n            // When\n            const priceImprovementAmount = calculatePriceImprovementAmount(\n                makerQuoteWithGasFee,\n                ammQuote,\n                isSelling,\n                quoteTokenBaseUnitPriceUsd,\n                feeTokenBaseUnitPriceUsd,\n            );\n\n            // Then\n            const expectedPriceImprovementAmount = new BigNumber(50e15);\n            expect(priceImprovementAmount).toMatchObject(expectedPriceImprovementAmount);\n        });\n        it('should calculate price improvement amount for buying correctly', async () => {\n            // Given\n            const isSelling = false;\n            const assetFillAmount = new BigNumber(3e17);\n            const makerQuoteWithGasFee: IndicativeQuote = {\n                maker: 'maker1Address',\n                makerUri: 'http://maker1.com',\n                makerToken,\n                takerToken,\n                makerAmount: assetFillAmount,\n                takerAmount: new BigNumber(900e6),\n                expiry: new BigNumber(1652722767),\n            };\n\n            const ammQuote: AmmQuote = {\n                makerAmount: assetFillAmount,\n                takerAmount: new BigNumber(1000e6),\n                expectedSlippage: new BigNumber(-0.02),\n                estimatedGasFeeWei: new BigNumber(10e15),\n            };\n\n            const quoteTokenBaseUnitPriceUsd = new BigNumber(1e-6);\n            const feeTokenBaseUnitPriceUsd = new BigNumber(3e-15);\n\n            // When\n            const priceImprovementAmount = calculatePriceImprovementAmount(\n                makerQuoteWithGasFee,\n                ammQuote,\n                isSelling,\n                quoteTokenBaseUnitPriceUsd,\n                feeTokenBaseUnitPriceUsd,\n            );\n\n            // Then\n            const expectedPriceImprovementAmount = new BigNumber(50e15);\n            expect(priceImprovementAmount).toMatchObject(expectedPriceImprovementAmount);\n        });\n        it('should return zero if there is no price improvement', async () => {\n            // Given\n            const isSelling = false;\n            const assetFillAmount = new BigNumber(3e17);\n            const makerQuoteWithGasFee: IndicativeQuote = {\n                maker: 'maker1Address',\n                makerUri: 'http://maker1.com',\n                makerToken,\n                takerToken,\n                makerAmount: assetFillAmount,\n                takerAmount: new BigNumber(1051e6),\n                expiry: new BigNumber(1652722767),\n            };\n\n            const ammQuote: AmmQuote = {\n                makerAmount: assetFillAmount,\n                takerAmount: new BigNumber(1000e6),\n                expectedSlippage: new BigNumber(-0.02),\n                estimatedGasFeeWei: new BigNumber(10e15),\n            };\n\n            const quoteTokenBaseUnitPriceUsd = new BigNumber(1e-6);\n            const feeTokenBaseUnitPriceUsd = new BigNumber(3e-15);\n\n            // When\n            const priceImprovementAmount = calculatePriceImprovementAmount(\n                makerQuoteWithGasFee,\n                ammQuote,\n                isSelling,\n                quoteTokenBaseUnitPriceUsd,\n                feeTokenBaseUnitPriceUsd,\n            );\n\n            // Then\n            expect(priceImprovementAmount).toMatchObject(ZERO);\n        });\n    });\n    describe('pure function reviseQuoteWithZeroExFee()', () => {\n        it('should revise quote correctly for selling', async () => {\n            // Given\n            const isSelling = true;\n            const assetFillAmount = new BigNumber(3e17);\n            const makerQuoteWithGasFee: IndicativeQuote = {\n                maker: 'maker1Address',\n                makerUri: 'http://maker1.com',\n                makerToken,\n                takerToken,\n                makerAmount: new BigNumber(1000e6),\n                takerAmount: assetFillAmount,\n                expiry: new BigNumber(1652722767),\n            };\n\n            const zeroExFeeAmount = new BigNumber(10e15);\n\n            const quoteTokenBaseUnitPriceUsd = new BigNumber(1e-6);\n            const feeTokenBaseUnitPriceUsd = new BigNumber(3e-15);\n\n            // When\n            const revisedQuote = reviseQuoteWithFees(\n                makerQuoteWithGasFee,\n                zeroExFeeAmount,\n                isSelling,\n                quoteTokenBaseUnitPriceUsd,\n                feeTokenBaseUnitPriceUsd,\n            );\n\n            // Then\n            const expectedRevisedMakerAmount = new BigNumber(970e6);\n            expect(revisedQuote.makerAmount).toMatchObject(expectedRevisedMakerAmount);\n        });\n        it('should revise quote correctly for buying', async () => {\n            // Given\n            const isSelling = false;\n            const assetFillAmount = new BigNumber(3e17);\n            const makerQuoteWithGasFee: IndicativeQuote = {\n                maker: 'maker1Address',\n                makerUri: 'http://maker1.com',\n                makerToken,\n                takerToken,\n                makerAmount: assetFillAmount,\n                takerAmount: new BigNumber(1000e6),\n                expiry: new BigNumber(1652722767),\n            };\n\n            const zeroExFeeAmount = new BigNumber(10e15);\n\n            const quoteTokenBaseUnitPriceUsd = new BigNumber(1e-6);\n            const feeTokenBaseUnitPriceUsd = new BigNumber(3e-15);\n\n            // When\n            const revisedQuote = reviseQuoteWithFees(\n                makerQuoteWithGasFee,\n                zeroExFeeAmount,\n                isSelling,\n                quoteTokenBaseUnitPriceUsd,\n                feeTokenBaseUnitPriceUsd,\n            );\n\n            // Then\n            const expectedRevisedTakerAmount = new BigNumber(1030e6);\n            expect(revisedQuote.takerAmount).toMatchObject(expectedRevisedTakerAmount);\n        });\n        it('should not revise quote correctly for zero zeroExFee', async () => {\n            // Given\n            const isSelling = true;\n            const assetFillAmount = new BigNumber(3e17);\n            const makerQuoteWithGasFee: IndicativeQuote = {\n                maker: 'maker1Address',\n                makerUri: 'http://maker1.com',\n                makerToken,\n                takerToken,\n                makerAmount: new BigNumber(1000e6),\n                takerAmount: assetFillAmount,\n                expiry: new BigNumber(1652722767),\n            };\n\n            const zeroExFeeAmount = ZERO;\n\n            const quoteTokenBaseUnitPriceUsd = new BigNumber(1e-6);\n            const feeTokenBaseUnitPriceUsd = new BigNumber(3e-15);\n\n            // When\n            const revisedQuote = reviseQuoteWithFees(\n                makerQuoteWithGasFee,\n                zeroExFeeAmount,\n                isSelling,\n                quoteTokenBaseUnitPriceUsd,\n                feeTokenBaseUnitPriceUsd,\n            );\n\n            // Then\n            const expectedRevisedMakerAmount = new BigNumber(1000e6);\n            expect(revisedQuote.makerAmount).toMatchObject(expectedRevisedMakerAmount);\n            expect(revisedQuote.takerAmount).toMatchObject(assetFillAmount);\n        });\n    });\n});\n"],"version":3}