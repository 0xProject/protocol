71a63a4528eaf708ae64531d076ae44b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GasOracle = void 0;
const utils_1 = require("@0x/utils");
const http_status_codes_1 = require("http-status-codes");
const TIMEOUT_MS = 250;
/**
 * A client to wrap the functionality of the 0x Gas Price Oracle
 * (https://github.com/0xProject/gas-price-oracle) "v2" endpoints
 * which provide support for EIP1559
 */
class GasOracle {
    /**
     * Constructor is marked `private` to force users to use the static
     * creator functions, which validate the URL.
     */
    constructor(url, axiosInsatnce) {
        this._axiosInstance = axiosInsatnce;
        this._url = url;
    }
    /**
     * Creates an instance of `GasOracle`.
     *
     * The URL is parsed so that we can use the "eth gas station" URL format
     * present in the config, eg:
     * "http://gas-price-oracle-svc.gas-price-oracle/source/median?output=eth_gas_station".
     *
     * The function transforms this URL into a v2 URL which will report EIP1559-data.
     */
    static create(url, axiosInstance) {
        var _a;
        const domainRegex = /https?:\/\/(?<domain>(\w|\d|-|\.)*)/;
        const result = domainRegex.exec(url);
        const domain = (_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.domain;
        if (!domain) {
            throw new Error(`Unable to extract domain for url ${url}`);
        }
        return new GasOracle(`http://${domain}/v2/source/median`, axiosInstance);
    }
    /**
     * Fetch the current baseFeePerGas being reported by the oracle
     */
    async getBaseFeePerGasWeiAsync() {
        const response = await this._axiosInstance.get(this._url, {
            timeout: TIMEOUT_MS,
        });
        if (response.status !== http_status_codes_1.OK) {
            throw new Error('Failed to request base fee from gas price oracle');
        }
        try {
            // All the speed levels have the same base fee, so just use 'instant'
            const baseFee = response.data.result.instant.baseFeePerGas;
            return new utils_1.BigNumber(baseFee);
        }
        catch (e) {
            throw new Error(`Response from gas price oracle did not include the base fee: ${e.message}`);
        }
    }
    /**
     * Fetch the current maxPriorityFeePerGas, aka "tip", being reported by the oracle
     */
    async getMaxPriorityFeePerGasWeiAsync(speed) {
        const response = await this._axiosInstance.get(this._url, {
            timeout: TIMEOUT_MS,
        });
        if (response.status !== http_status_codes_1.OK) {
            throw new Error('Failed to request base fee from gas price oracle');
        }
        try {
            const maxPriorityFee = response.data.result[speed].maxPriorityFeePerGas;
            return new utils_1.BigNumber(maxPriorityFee);
        }
        catch (e) {
            throw new Error(`Response from gas price oracle did not include the expected maxPriorityFeePerGas: ${e.message}`);
        }
    }
}
exports.GasOracle = GasOracle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9HYXNPcmFjbGUudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQXNDO0FBRXRDLHlEQUF1QztBQTBCdkMsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDO0FBRXZCOzs7O0dBSUc7QUFDSCxNQUFhLFNBQVM7SUE4RGxCOzs7T0FHRztJQUNILFlBQW9CLEdBQVcsRUFBRSxhQUE0QjtRQUN6RCxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztRQUNwQyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUNwQixDQUFDO0lBakVEOzs7Ozs7OztPQVFHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFXLEVBQUUsYUFBNEI7O1FBQzFELE1BQU0sV0FBVyxHQUFHLHFDQUFxQyxDQUFDO1FBQzFELE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsTUFBTSxNQUFNLEdBQUcsTUFBQSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsTUFBTSwwQ0FBRSxNQUFNLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDOUQ7UUFDRCxPQUFPLElBQUksU0FBUyxDQUFDLFVBQVUsTUFBTSxtQkFBbUIsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxLQUFLLENBQUMsd0JBQXdCO1FBQ2pDLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQTRCLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDakYsT0FBTyxFQUFFLFVBQVU7U0FDdEIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLHNCQUFFLEVBQUU7WUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO1NBQ3ZFO1FBQ0QsSUFBSTtZQUNBLHFFQUFxRTtZQUNyRSxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzNELE9BQU8sSUFBSSxpQkFBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2pDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixNQUFNLElBQUksS0FBSyxDQUFDLGdFQUFnRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUNoRztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxLQUE4QztRQUN2RixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUE0QixJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2pGLE9BQU8sRUFBRSxVQUFVO1NBQ3RCLENBQUMsQ0FBQztRQUNILElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxzQkFBRSxFQUFFO1lBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztTQUN2RTtRQUNELElBQUk7WUFDQSxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQztZQUN4RSxPQUFPLElBQUksaUJBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUN4QztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1IsTUFBTSxJQUFJLEtBQUssQ0FDWCxxRkFBcUYsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUNuRyxDQUFDO1NBQ0w7SUFDTCxDQUFDO0NBVUo7QUF0RUQsOEJBc0VDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZHdhbHNoL2NvZGUtbG9jYWwvMHgtcmZxLWFwaS9zcmMvdXRpbHMvR2FzT3JhY2xlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gJ0AweC91dGlscyc7XG5pbXBvcnQgeyBBeGlvc0luc3RhbmNlIH0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgT0sgfSBmcm9tICdodHRwLXN0YXR1cy1jb2Rlcyc7XG5cbi8qKlxuICogUmVzcG9uc2UgZm9ybWF0IGZyb20gaHR0cHM6Ly9naXRodWIuY29tLzB4UHJvamVjdC9nYXMtcHJpY2Utb3JhY2xlXG4gKiBmb3IgXCJ2MlwiIGVuZHBvaW50c1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFQweEdhc1ByaWNlT3JhY2xlUmVzcG9uc2Uge1xuICAgIHJlc3VsdDogVFJlc3VsdDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUUmVzdWx0IHtcbiAgICBzb3VyY2U6IHN0cmluZztcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgICBpbnN0YW50OiBUUmF0ZXM7XG4gICAgZmFzdDogVFJhdGVzO1xuICAgIHN0YW5kYXJkOiBUUmF0ZXM7XG4gICAgbG93OiBUUmF0ZXM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVFJhdGVzIHtcbiAgICBwcmljZTogbnVtYmVyO1xuICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiBudW1iZXI7XG4gICAgbWF4RmVlUGVyR2FzOiBudW1iZXI7XG4gICAgYmFzZUZlZVBlckdhczogbnVtYmVyO1xufVxuXG5jb25zdCBUSU1FT1VUX01TID0gMjUwO1xuXG4vKipcbiAqIEEgY2xpZW50IHRvIHdyYXAgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIDB4IEdhcyBQcmljZSBPcmFjbGVcbiAqIChodHRwczovL2dpdGh1Yi5jb20vMHhQcm9qZWN0L2dhcy1wcmljZS1vcmFjbGUpIFwidjJcIiBlbmRwb2ludHNcbiAqIHdoaWNoIHByb3ZpZGUgc3VwcG9ydCBmb3IgRUlQMTU1OVxuICovXG5leHBvcnQgY2xhc3MgR2FzT3JhY2xlIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF91cmw6IHN0cmluZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9heGlvc0luc3RhbmNlOiBBeGlvc0luc3RhbmNlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBgR2FzT3JhY2xlYC5cbiAgICAgKlxuICAgICAqIFRoZSBVUkwgaXMgcGFyc2VkIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGUgXCJldGggZ2FzIHN0YXRpb25cIiBVUkwgZm9ybWF0XG4gICAgICogcHJlc2VudCBpbiB0aGUgY29uZmlnLCBlZzpcbiAgICAgKiBcImh0dHA6Ly9nYXMtcHJpY2Utb3JhY2xlLXN2Yy5nYXMtcHJpY2Utb3JhY2xlL3NvdXJjZS9tZWRpYW4/b3V0cHV0PWV0aF9nYXNfc3RhdGlvblwiLlxuICAgICAqXG4gICAgICogVGhlIGZ1bmN0aW9uIHRyYW5zZm9ybXMgdGhpcyBVUkwgaW50byBhIHYyIFVSTCB3aGljaCB3aWxsIHJlcG9ydCBFSVAxNTU5LWRhdGEuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUodXJsOiBzdHJpbmcsIGF4aW9zSW5zdGFuY2U6IEF4aW9zSW5zdGFuY2UpOiBHYXNPcmFjbGUge1xuICAgICAgICBjb25zdCBkb21haW5SZWdleCA9IC9odHRwcz86XFwvXFwvKD88ZG9tYWluPihcXHd8XFxkfC18XFwuKSopLztcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZG9tYWluUmVnZXguZXhlYyh1cmwpO1xuICAgICAgICBjb25zdCBkb21haW4gPSByZXN1bHQ/Lmdyb3Vwcz8uZG9tYWluO1xuICAgICAgICBpZiAoIWRvbWFpbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZXh0cmFjdCBkb21haW4gZm9yIHVybCAke3VybH1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEdhc09yYWNsZShgaHR0cDovLyR7ZG9tYWlufS92Mi9zb3VyY2UvbWVkaWFuYCwgYXhpb3NJbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmV0Y2ggdGhlIGN1cnJlbnQgYmFzZUZlZVBlckdhcyBiZWluZyByZXBvcnRlZCBieSB0aGUgb3JhY2xlXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGdldEJhc2VGZWVQZXJHYXNXZWlBc3luYygpOiBQcm9taXNlPEJpZ051bWJlcj4ge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuX2F4aW9zSW5zdGFuY2UuZ2V0PFQweEdhc1ByaWNlT3JhY2xlUmVzcG9uc2U+KHRoaXMuX3VybCwge1xuICAgICAgICAgICAgdGltZW91dDogVElNRU9VVF9NUyxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IE9LKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byByZXF1ZXN0IGJhc2UgZmVlIGZyb20gZ2FzIHByaWNlIG9yYWNsZScpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBBbGwgdGhlIHNwZWVkIGxldmVscyBoYXZlIHRoZSBzYW1lIGJhc2UgZmVlLCBzbyBqdXN0IHVzZSAnaW5zdGFudCdcbiAgICAgICAgICAgIGNvbnN0IGJhc2VGZWUgPSByZXNwb25zZS5kYXRhLnJlc3VsdC5pbnN0YW50LmJhc2VGZWVQZXJHYXM7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihiYXNlRmVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZXNwb25zZSBmcm9tIGdhcyBwcmljZSBvcmFjbGUgZGlkIG5vdCBpbmNsdWRlIHRoZSBiYXNlIGZlZTogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGZXRjaCB0aGUgY3VycmVudCBtYXhQcmlvcml0eUZlZVBlckdhcywgYWthIFwidGlwXCIsIGJlaW5nIHJlcG9ydGVkIGJ5IHRoZSBvcmFjbGVcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0TWF4UHJpb3JpdHlGZWVQZXJHYXNXZWlBc3luYyhzcGVlZDogJ2luc3RhbnQnIHwgJ2Zhc3QnIHwgJ3N0YW5kYXJkJyB8ICdsb3cnKTogUHJvbWlzZTxCaWdOdW1iZXI+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldDxUMHhHYXNQcmljZU9yYWNsZVJlc3BvbnNlPih0aGlzLl91cmwsIHtcbiAgICAgICAgICAgIHRpbWVvdXQ6IFRJTUVPVVRfTVMsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSBPSykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcmVxdWVzdCBiYXNlIGZlZSBmcm9tIGdhcyBwcmljZSBvcmFjbGUnKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbWF4UHJpb3JpdHlGZWUgPSByZXNwb25zZS5kYXRhLnJlc3VsdFtzcGVlZF0ubWF4UHJpb3JpdHlGZWVQZXJHYXM7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihtYXhQcmlvcml0eUZlZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBgUmVzcG9uc2UgZnJvbSBnYXMgcHJpY2Ugb3JhY2xlIGRpZCBub3QgaW5jbHVkZSB0aGUgZXhwZWN0ZWQgbWF4UHJpb3JpdHlGZWVQZXJHYXM6ICR7ZS5tZXNzYWdlfWAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3IgaXMgbWFya2VkIGBwcml2YXRlYCB0byBmb3JjZSB1c2VycyB0byB1c2UgdGhlIHN0YXRpY1xuICAgICAqIGNyZWF0b3IgZnVuY3Rpb25zLCB3aGljaCB2YWxpZGF0ZSB0aGUgVVJMLlxuICAgICAqL1xuICAgIHByaXZhdGUgY29uc3RydWN0b3IodXJsOiBzdHJpbmcsIGF4aW9zSW5zYXRuY2U6IEF4aW9zSW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5fYXhpb3NJbnN0YW5jZSA9IGF4aW9zSW5zYXRuY2U7XG4gICAgICAgIHRoaXMuX3VybCA9IHVybDtcbiAgICB9XG59XG4iXSwidmVyc2lvbiI6M30=