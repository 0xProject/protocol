{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasOracle.ts","mappings":";;;AAAA,qCAAsC;AAEtC,yDAAuC;AA0BvC,MAAM,UAAU,GAAG,GAAG,CAAC;AAEvB;;;;GAIG;AACH,MAAa,SAAS;IA8DlB;;;OAGG;IACH,YAAoB,GAAW,EAAE,aAA4B;QACzD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;IACpB,CAAC;IAjED;;;;;;;;OAQG;IACI,MAAM,CAAC,MAAM,CAAC,GAAW,EAAE,aAA4B;;QAC1D,MAAM,WAAW,GAAG,qCAAqC,CAAC;QAC1D,MAAM,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrC,MAAM,MAAM,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,0CAAE,MAAM,CAAC;QACtC,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,IAAI,KAAK,CAAC,oCAAoC,GAAG,EAAE,CAAC,CAAC;SAC9D;QACD,OAAO,IAAI,SAAS,CAAC,UAAU,MAAM,mBAAmB,EAAE,aAAa,CAAC,CAAC;IAC7E,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,wBAAwB;QACjC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAA4B,IAAI,CAAC,IAAI,EAAE;YACjF,OAAO,EAAE,UAAU;SACtB,CAAC,CAAC;QACH,IAAI,QAAQ,CAAC,MAAM,KAAK,sBAAE,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACvE;QACD,IAAI;YACA,qEAAqE;YACrE,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC;YAC3D,OAAO,IAAI,iBAAS,CAAC,OAAO,CAAC,CAAC;SACjC;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;SAChG;IACL,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,+BAA+B,CAAC,KAA8C;QACvF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAA4B,IAAI,CAAC,IAAI,EAAE;YACjF,OAAO,EAAE,UAAU;SACtB,CAAC,CAAC;QACH,IAAI,QAAQ,CAAC,MAAM,KAAK,sBAAE,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACvE;QACD,IAAI;YACA,MAAM,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,oBAAoB,CAAC;YACxE,OAAO,IAAI,iBAAS,CAAC,cAAc,CAAC,CAAC;SACxC;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,KAAK,CACX,qFAAqF,CAAC,CAAC,OAAO,EAAE,CACnG,CAAC;SACL;IACL,CAAC;CAUJ;AAtED,8BAsEC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasOracle.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { AxiosInstance } from 'axios';\nimport { OK } from 'http-status-codes';\n\n/**\n * Response format from https://github.com/0xProject/gas-price-oracle\n * for \"v2\" endpoints\n */\nexport interface T0xGasPriceOracleResponse {\n    result: TResult;\n}\n\nexport interface TResult {\n    source: string;\n    timestamp: number;\n    instant: TRates;\n    fast: TRates;\n    standard: TRates;\n    low: TRates;\n}\n\nexport interface TRates {\n    price: number;\n    maxPriorityFeePerGas: number;\n    maxFeePerGas: number;\n    baseFeePerGas: number;\n}\n\nconst TIMEOUT_MS = 250;\n\n/**\n * A client to wrap the functionality of the 0x Gas Price Oracle\n * (https://github.com/0xProject/gas-price-oracle) \"v2\" endpoints\n * which provide support for EIP1559\n */\nexport class GasOracle {\n    private readonly _url: string;\n    private readonly _axiosInstance: AxiosInstance;\n\n    /**\n     * Creates an instance of `GasOracle`.\n     *\n     * The URL is parsed so that we can use the \"eth gas station\" URL format\n     * present in the config, eg:\n     * \"http://gas-price-oracle-svc.gas-price-oracle/source/median?output=eth_gas_station\".\n     *\n     * The function transforms this URL into a v2 URL which will report EIP1559-data.\n     */\n    public static create(url: string, axiosInstance: AxiosInstance): GasOracle {\n        const domainRegex = /https?:\\/\\/(?<domain>(\\w|\\d|-|\\.)*)/;\n        const result = domainRegex.exec(url);\n        const domain = result?.groups?.domain;\n        if (!domain) {\n            throw new Error(`Unable to extract domain for url ${url}`);\n        }\n        return new GasOracle(`http://${domain}/v2/source/median`, axiosInstance);\n    }\n\n    /**\n     * Fetch the current baseFeePerGas being reported by the oracle\n     */\n    public async getBaseFeePerGasWeiAsync(): Promise<BigNumber> {\n        const response = await this._axiosInstance.get<T0xGasPriceOracleResponse>(this._url, {\n            timeout: TIMEOUT_MS,\n        });\n        if (response.status !== OK) {\n            throw new Error('Failed to request base fee from gas price oracle');\n        }\n        try {\n            // All the speed levels have the same base fee, so just use 'instant'\n            const baseFee = response.data.result.instant.baseFeePerGas;\n            return new BigNumber(baseFee);\n        } catch (e) {\n            throw new Error(`Response from gas price oracle did not include the base fee: ${e.message}`);\n        }\n    }\n\n    /**\n     * Fetch the current maxPriorityFeePerGas, aka \"tip\", being reported by the oracle\n     */\n    public async getMaxPriorityFeePerGasWeiAsync(speed: 'instant' | 'fast' | 'standard' | 'low'): Promise<BigNumber> {\n        const response = await this._axiosInstance.get<T0xGasPriceOracleResponse>(this._url, {\n            timeout: TIMEOUT_MS,\n        });\n        if (response.status !== OK) {\n            throw new Error('Failed to request base fee from gas price oracle');\n        }\n        try {\n            const maxPriorityFee = response.data.result[speed].maxPriorityFeePerGas;\n            return new BigNumber(maxPriorityFee);\n        } catch (e) {\n            throw new Error(\n                `Response from gas price oracle did not include the expected maxPriorityFeePerGas: ${e.message}`,\n            );\n        }\n    }\n\n    /**\n     * Constructor is marked `private` to force users to use the static\n     * creator functions, which validate the URL.\n     */\n    private constructor(url: string, axiosInsatnce: AxiosInstance) {\n        this._axiosInstance = axiosInsatnce;\n        this._url = url;\n    }\n}\n"],"version":3}