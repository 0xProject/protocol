9918f574cd6cc8a1f584ae06bc7a0231
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigManager = void 0;
// tslint:disable: prefer-function-over-method
const crypto_1 = require("crypto");
const config_1 = require("../config");
const pair_utils_1 = require("../core/pair_utils");
const getApiKeyHash = (apiKey) => (0, crypto_1.createHash)('sha256').update(apiKey).digest('base64');
/**
 * ConfigManager is a simple wrapper around configs.
 *
 * It exists to provide a layer around our configs which can then be mocked while writing tests
 */
class ConfigManager {
    getAdminApiKey() {
        return config_1.ADMIN_API_KEY;
    }
    getRfqmApiKeyWhitelist() {
        return config_1.RFQM_API_KEY_WHITELIST;
    }
    getRfqMakerIdForApiKey(apiKey) {
        return config_1.RFQ_API_KEY_HASH_TO_MAKER_ID.get(getApiKeyHash(apiKey));
    }
    getIntegratorByIdOrThrow(integratorId) {
        return (0, config_1.getIntegratorByIdOrThrow)(integratorId);
    }
    getIntegratorIdForApiKey(apiKey) {
        return (0, config_1.getIntegratorIdForApiKey)(apiKey);
    }
    /**
     * Get a set of makers that support RFQt workflow with rfq order type
     */
    getRfqtMakerIdSetForRfqOrder() {
        return config_1.RFQT_MAKER_ID_SET_FOR_RFQ_ORDER;
    }
    /**
     * Get a set of makers that support RFQm workflow
     */
    getRfqmMakerIdSet() {
        return config_1.RFQM_MAKER_ID_SET;
    }
    /**
     * Get a set of makers that support RFQt workflow with otc order type
     */
    getRfqtMakerIdSetForOtcOrder() {
        return config_1.RFQT_MAKER_ID_SET_FOR_OTC_ORDER;
    }
    /**
     * Get a set of makers that support RFQm workflow with otc order type
     */
    getRfqmMakerIdSetForOtcOrder() {
        return config_1.RFQM_MAKER_ID_SET_FOR_OTC_ORDER;
    }
    /**
     * Get fee model constant for given pair on a given chain.
     */
    getFeeModelConfiguration(chainId, tokenA, tokenB) {
        if (config_1.FEE_MODEL_CONFIGURATION_MAP.has(chainId)) {
            const pairKey = (0, pair_utils_1.toPairString)(tokenA, tokenB);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const innerMap = config_1.FEE_MODEL_CONFIGURATION_MAP.get(chainId);
            if (innerMap.has(pairKey)) {
                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                return innerMap.get(pairKey);
            }
        }
        return config_1.DEFAULT_FEE_MODEL_CONFIGURATION;
    }
}
exports.ConfigManager = ConfigManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9jb25maWdfbWFuYWdlci50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbUNBQW9DO0FBRXBDLHNDQWVtQjtBQUVuQixtREFBa0Q7QUFFbEQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxNQUFjLEVBQVUsRUFBRSxDQUFDLElBQUEsbUJBQVUsRUFBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRXZHOzs7O0dBSUc7QUFDSCxNQUFhLGFBQWE7SUFDZixjQUFjO1FBQ2pCLE9BQU8sc0JBQWEsQ0FBQztJQUN6QixDQUFDO0lBRU0sc0JBQXNCO1FBQ3pCLE9BQU8sK0JBQXNCLENBQUM7SUFDbEMsQ0FBQztJQUVNLHNCQUFzQixDQUFDLE1BQWM7UUFDeEMsT0FBTyxxQ0FBNEIsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVNLHdCQUF3QixDQUFDLFlBQW9CO1FBQ2hELE9BQU8sSUFBQSxpQ0FBd0IsRUFBQyxZQUFZLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU0sd0JBQXdCLENBQUMsTUFBYztRQUMxQyxPQUFPLElBQUEsaUNBQXdCLEVBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksNEJBQTRCO1FBQy9CLE9BQU8sd0NBQStCLENBQUM7SUFDM0MsQ0FBQztJQUVEOztPQUVHO0lBQ0ksaUJBQWlCO1FBQ3BCLE9BQU8sMEJBQWlCLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ0ksNEJBQTRCO1FBQy9CLE9BQU8sd0NBQStCLENBQUM7SUFDM0MsQ0FBQztJQUVEOztPQUVHO0lBQ0ksNEJBQTRCO1FBQy9CLE9BQU8sd0NBQStCLENBQUM7SUFDM0MsQ0FBQztJQUVEOztPQUVHO0lBQ0ksd0JBQXdCLENBQUMsT0FBZSxFQUFFLE1BQWMsRUFBRSxNQUFjO1FBQzNFLElBQUksb0NBQTJCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzFDLE1BQU0sT0FBTyxHQUFHLElBQUEseUJBQVksRUFBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDN0MsNkRBQTZEO1lBQzdELG9FQUFvRTtZQUNwRSxNQUFNLFFBQVEsR0FBRyxvQ0FBMkIsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFFLENBQUM7WUFDM0QsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUN2Qiw2REFBNkQ7Z0JBQzdELG9FQUFvRTtnQkFDcEUsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBRSxDQUFDO2FBQ2pDO1NBQ0o7UUFFRCxPQUFPLHdDQUErQixDQUFDO0lBQzNDLENBQUM7Q0FDSjtBQW5FRCxzQ0FtRUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9jb25maWdfbWFuYWdlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTogcHJlZmVyLWZ1bmN0aW9uLW92ZXItbWV0aG9kXG5pbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSAnY3J5cHRvJztcblxuaW1wb3J0IHtcbiAgICBBRE1JTl9BUElfS0VZLFxuICAgIERFRkFVTFRfRkVFX01PREVMX0NPTkZJR1VSQVRJT04sXG4gICAgRmVlTW9kZWxDb25maWd1cmF0aW9uLFxuICAgIEZFRV9NT0RFTF9DT05GSUdVUkFUSU9OX01BUCxcbiAgICBnZXRJbnRlZ3JhdG9yQnlJZE9yVGhyb3csXG4gICAgZ2V0SW50ZWdyYXRvcklkRm9yQXBpS2V5LFxuICAgIEludGVncmF0b3IsXG4gICAgTWFrZXJJZFNldCxcbiAgICBSRlFNX0FQSV9LRVlfV0hJVEVMSVNULFxuICAgIFJGUU1fTUFLRVJfSURfU0VULFxuICAgIFJGUU1fTUFLRVJfSURfU0VUX0ZPUl9PVENfT1JERVIsXG4gICAgUkZRVF9NQUtFUl9JRF9TRVRfRk9SX09UQ19PUkRFUixcbiAgICBSRlFUX01BS0VSX0lEX1NFVF9GT1JfUkZRX09SREVSLFxuICAgIFJGUV9BUElfS0VZX0hBU0hfVE9fTUFLRVJfSUQsXG59IGZyb20gJy4uL2NvbmZpZyc7XG5cbmltcG9ydCB7IHRvUGFpclN0cmluZyB9IGZyb20gJy4uL2NvcmUvcGFpcl91dGlscyc7XG5cbmNvbnN0IGdldEFwaUtleUhhc2ggPSAoYXBpS2V5OiBzdHJpbmcpOiBzdHJpbmcgPT4gY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGFwaUtleSkuZGlnZXN0KCdiYXNlNjQnKTtcblxuLyoqXG4gKiBDb25maWdNYW5hZ2VyIGlzIGEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIGNvbmZpZ3MuXG4gKlxuICogSXQgZXhpc3RzIHRvIHByb3ZpZGUgYSBsYXllciBhcm91bmQgb3VyIGNvbmZpZ3Mgd2hpY2ggY2FuIHRoZW4gYmUgbW9ja2VkIHdoaWxlIHdyaXRpbmcgdGVzdHNcbiAqL1xuZXhwb3J0IGNsYXNzIENvbmZpZ01hbmFnZXIge1xuICAgIHB1YmxpYyBnZXRBZG1pbkFwaUtleSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gQURNSU5fQVBJX0tFWTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UmZxbUFwaUtleVdoaXRlbGlzdCgpOiBTZXQ8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBSRlFNX0FQSV9LRVlfV0hJVEVMSVNUO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSZnFNYWtlcklkRm9yQXBpS2V5KGFwaUtleTogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIFJGUV9BUElfS0VZX0hBU0hfVE9fTUFLRVJfSUQuZ2V0KGdldEFwaUtleUhhc2goYXBpS2V5KSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEludGVncmF0b3JCeUlkT3JUaHJvdyhpbnRlZ3JhdG9ySWQ6IHN0cmluZyk6IEludGVncmF0b3Ige1xuICAgICAgICByZXR1cm4gZ2V0SW50ZWdyYXRvckJ5SWRPclRocm93KGludGVncmF0b3JJZCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEludGVncmF0b3JJZEZvckFwaUtleShhcGlLZXk6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlZ3JhdG9ySWRGb3JBcGlLZXkoYXBpS2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBzZXQgb2YgbWFrZXJzIHRoYXQgc3VwcG9ydCBSRlF0IHdvcmtmbG93IHdpdGggcmZxIG9yZGVyIHR5cGVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UmZxdE1ha2VySWRTZXRGb3JSZnFPcmRlcigpOiBNYWtlcklkU2V0IHtcbiAgICAgICAgcmV0dXJuIFJGUVRfTUFLRVJfSURfU0VUX0ZPUl9SRlFfT1JERVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgc2V0IG9mIG1ha2VycyB0aGF0IHN1cHBvcnQgUkZRbSB3b3JrZmxvd1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRSZnFtTWFrZXJJZFNldCgpOiBNYWtlcklkU2V0IHtcbiAgICAgICAgcmV0dXJuIFJGUU1fTUFLRVJfSURfU0VUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIHNldCBvZiBtYWtlcnMgdGhhdCBzdXBwb3J0IFJGUXQgd29ya2Zsb3cgd2l0aCBvdGMgb3JkZXIgdHlwZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRSZnF0TWFrZXJJZFNldEZvck90Y09yZGVyKCk6IE1ha2VySWRTZXQge1xuICAgICAgICByZXR1cm4gUkZRVF9NQUtFUl9JRF9TRVRfRk9SX09UQ19PUkRFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBzZXQgb2YgbWFrZXJzIHRoYXQgc3VwcG9ydCBSRlFtIHdvcmtmbG93IHdpdGggb3RjIG9yZGVyIHR5cGVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UmZxbU1ha2VySWRTZXRGb3JPdGNPcmRlcigpOiBNYWtlcklkU2V0IHtcbiAgICAgICAgcmV0dXJuIFJGUU1fTUFLRVJfSURfU0VUX0ZPUl9PVENfT1JERVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGZlZSBtb2RlbCBjb25zdGFudCBmb3IgZ2l2ZW4gcGFpciBvbiBhIGdpdmVuIGNoYWluLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRGZWVNb2RlbENvbmZpZ3VyYXRpb24oY2hhaW5JZDogbnVtYmVyLCB0b2tlbkE6IHN0cmluZywgdG9rZW5COiBzdHJpbmcpOiBGZWVNb2RlbENvbmZpZ3VyYXRpb24ge1xuICAgICAgICBpZiAoRkVFX01PREVMX0NPTkZJR1VSQVRJT05fTUFQLmhhcyhjaGFpbklkKSkge1xuICAgICAgICAgICAgY29uc3QgcGFpcktleSA9IHRvUGFpclN0cmluZyh0b2tlbkEsIHRva2VuQik7XG4gICAgICAgICAgICAvLyAkZXNsaW50LWZpeC1tZSBodHRwczovL2dpdGh1Yi5jb20vcmhpbm9kYXZpZC9lc2xpbnQtZml4LW1lXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgY29uc3QgaW5uZXJNYXAgPSBGRUVfTU9ERUxfQ09ORklHVVJBVElPTl9NQVAuZ2V0KGNoYWluSWQpITtcbiAgICAgICAgICAgIGlmIChpbm5lck1hcC5oYXMocGFpcktleSkpIHtcbiAgICAgICAgICAgICAgICAvLyAkZXNsaW50LWZpeC1tZSBodHRwczovL2dpdGh1Yi5jb20vcmhpbm9kYXZpZC9lc2xpbnQtZml4LW1lXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgICAgICByZXR1cm4gaW5uZXJNYXAuZ2V0KHBhaXJLZXkpITtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBERUZBVUxUX0ZFRV9NT0RFTF9DT05GSUdVUkFUSU9OO1xuICAgIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==