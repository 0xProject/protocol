{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/config_manager.ts","mappings":";;;AAAA,8CAA8C;AAC9C,mCAAoC;AAEpC,sCAemB;AAEnB,mDAAkD;AAElD,MAAM,aAAa,GAAG,CAAC,MAAc,EAAU,EAAE,CAAC,IAAA,mBAAU,EAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAEvG;;;;GAIG;AACH,MAAa,aAAa;IACf,cAAc;QACjB,OAAO,sBAAa,CAAC;IACzB,CAAC;IAEM,sBAAsB;QACzB,OAAO,+BAAsB,CAAC;IAClC,CAAC;IAEM,sBAAsB,CAAC,MAAc;QACxC,OAAO,qCAA4B,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;IACnE,CAAC;IAEM,wBAAwB,CAAC,YAAoB;QAChD,OAAO,IAAA,iCAAwB,EAAC,YAAY,CAAC,CAAC;IAClD,CAAC;IAEM,wBAAwB,CAAC,MAAc;QAC1C,OAAO,IAAA,iCAAwB,EAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACI,4BAA4B;QAC/B,OAAO,wCAA+B,CAAC;IAC3C,CAAC;IAED;;OAEG;IACI,iBAAiB;QACpB,OAAO,0BAAiB,CAAC;IAC7B,CAAC;IAED;;OAEG;IACI,4BAA4B;QAC/B,OAAO,wCAA+B,CAAC;IAC3C,CAAC;IAED;;OAEG;IACI,4BAA4B;QAC/B,OAAO,wCAA+B,CAAC;IAC3C,CAAC;IAED;;OAEG;IACI,wBAAwB,CAAC,OAAe,EAAE,MAAc,EAAE,MAAc;QAC3E,IAAI,oCAA2B,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YAC1C,MAAM,OAAO,GAAG,IAAA,yBAAY,EAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAC7C,6DAA6D;YAC7D,oEAAoE;YACpE,MAAM,QAAQ,GAAG,oCAA2B,CAAC,GAAG,CAAC,OAAO,CAAE,CAAC;YAC3D,IAAI,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;gBACvB,6DAA6D;gBAC7D,oEAAoE;gBACpE,OAAO,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAE,CAAC;aACjC;SACJ;QAED,OAAO,wCAA+B,CAAC;IAC3C,CAAC;CACJ;AAnED,sCAmEC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/config_manager.ts"],"sourcesContent":["// tslint:disable: prefer-function-over-method\nimport { createHash } from 'crypto';\n\nimport {\n    ADMIN_API_KEY,\n    DEFAULT_FEE_MODEL_CONFIGURATION,\n    FeeModelConfiguration,\n    FEE_MODEL_CONFIGURATION_MAP,\n    getIntegratorByIdOrThrow,\n    getIntegratorIdForApiKey,\n    Integrator,\n    MakerIdSet,\n    RFQM_API_KEY_WHITELIST,\n    RFQM_MAKER_ID_SET,\n    RFQM_MAKER_ID_SET_FOR_OTC_ORDER,\n    RFQT_MAKER_ID_SET_FOR_OTC_ORDER,\n    RFQT_MAKER_ID_SET_FOR_RFQ_ORDER,\n    RFQ_API_KEY_HASH_TO_MAKER_ID,\n} from '../config';\n\nimport { toPairString } from '../core/pair_utils';\n\nconst getApiKeyHash = (apiKey: string): string => createHash('sha256').update(apiKey).digest('base64');\n\n/**\n * ConfigManager is a simple wrapper around configs.\n *\n * It exists to provide a layer around our configs which can then be mocked while writing tests\n */\nexport class ConfigManager {\n    public getAdminApiKey(): string | undefined {\n        return ADMIN_API_KEY;\n    }\n\n    public getRfqmApiKeyWhitelist(): Set<string> {\n        return RFQM_API_KEY_WHITELIST;\n    }\n\n    public getRfqMakerIdForApiKey(apiKey: string): string | undefined {\n        return RFQ_API_KEY_HASH_TO_MAKER_ID.get(getApiKeyHash(apiKey));\n    }\n\n    public getIntegratorByIdOrThrow(integratorId: string): Integrator {\n        return getIntegratorByIdOrThrow(integratorId);\n    }\n\n    public getIntegratorIdForApiKey(apiKey: string): string | undefined {\n        return getIntegratorIdForApiKey(apiKey);\n    }\n\n    /**\n     * Get a set of makers that support RFQt workflow with rfq order type\n     */\n    public getRfqtMakerIdSetForRfqOrder(): MakerIdSet {\n        return RFQT_MAKER_ID_SET_FOR_RFQ_ORDER;\n    }\n\n    /**\n     * Get a set of makers that support RFQm workflow\n     */\n    public getRfqmMakerIdSet(): MakerIdSet {\n        return RFQM_MAKER_ID_SET;\n    }\n\n    /**\n     * Get a set of makers that support RFQt workflow with otc order type\n     */\n    public getRfqtMakerIdSetForOtcOrder(): MakerIdSet {\n        return RFQT_MAKER_ID_SET_FOR_OTC_ORDER;\n    }\n\n    /**\n     * Get a set of makers that support RFQm workflow with otc order type\n     */\n    public getRfqmMakerIdSetForOtcOrder(): MakerIdSet {\n        return RFQM_MAKER_ID_SET_FOR_OTC_ORDER;\n    }\n\n    /**\n     * Get fee model constant for given pair on a given chain.\n     */\n    public getFeeModelConfiguration(chainId: number, tokenA: string, tokenB: string): FeeModelConfiguration {\n        if (FEE_MODEL_CONFIGURATION_MAP.has(chainId)) {\n            const pairKey = toPairString(tokenA, tokenB);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const innerMap = FEE_MODEL_CONFIGURATION_MAP.get(chainId)!;\n            if (innerMap.has(pairKey)) {\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                return innerMap.get(pairKey)!;\n            }\n        }\n\n        return DEFAULT_FEE_MODEL_CONFIGURATION;\n    }\n}\n"],"version":3}