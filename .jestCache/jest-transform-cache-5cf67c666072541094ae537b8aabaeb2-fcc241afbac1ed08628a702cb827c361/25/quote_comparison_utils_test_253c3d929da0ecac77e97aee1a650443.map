{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/quote_comparison_utils_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/quote_comparison_utils_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\n// tslint:disable:no-empty\n// tslint:disable:max-file-line-count\nimport { OtcOrder, SignatureType } from '@0x/protocol-utils';\nimport { BigNumber } from '@0x/utils';\nimport { expect } from 'chai';\n\nimport { DEFAULT_MIN_EXPIRY_DURATION_MS, ONE_SECOND_MS, ZERO } from '../../src/core/constants';\nimport { FirmOtcQuote, IndicativeQuote } from '../../src/core/types';\nimport { getBestQuote } from '../../src/utils/quote_comparison_utils';\n\n// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n// eslint-disable-next-line @typescript-eslint/no-loss-of-precision\nconst NEVER_EXPIRES = new BigNumber(9999999999999999);\n\nfunction createBaseQuote(): FirmOtcQuote {\n    return {\n        order: new OtcOrder({\n            makerAmount: ZERO,\n            takerAmount: ZERO,\n        }),\n        kind: 'otc',\n        makerSignature: {\n            signatureType: SignatureType.Invalid,\n            v: 0,\n            r: '0x1',\n            s: '0x2',\n        },\n        makerUri: 'someuri.xyz',\n    };\n}\ndescribe('Quote Comparison Utils', () => {\n    describe('getBestQuote', () => {\n        const makerToken = 'DAI';\n        const takerToken = 'SUSD';\n        const assetFillAmount = new BigNumber(100);\n        const validityWindowMs = DEFAULT_MIN_EXPIRY_DURATION_MS;\n        const inThirtySeconds = new BigNumber(Math.round((Date.now() + ONE_SECOND_MS * 30) / ONE_SECOND_MS));\n\n        describe('IndicativeQuotes when selling', () => {\n            // Given\n            const BASE_INDICATIVE_QUOTE = {\n                makerUri: 'http://makeruri',\n                maker: '0xmaker',\n                makerToken,\n                takerToken,\n                expiry: NEVER_EXPIRES,\n            };\n\n            describe('sells', () => {\n                const isSelling = true;\n                const partialFillQuote: IndicativeQuote = {\n                    ...BASE_INDICATIVE_QUOTE,\n                    makerAmount: new BigNumber(55),\n                    takerAmount: new BigNumber(50),\n                };\n\n                const fullQuoteBadPricing: IndicativeQuote = {\n                    ...BASE_INDICATIVE_QUOTE,\n                    makerAmount: new BigNumber(99),\n                    takerAmount: new BigNumber(100),\n                };\n\n                const fullQuoteOkPricing: IndicativeQuote = {\n                    ...BASE_INDICATIVE_QUOTE,\n                    makerAmount: new BigNumber(105),\n                    takerAmount: new BigNumber(100),\n                };\n\n                const fullQuoteGreatPricing: IndicativeQuote = {\n                    ...BASE_INDICATIVE_QUOTE,\n                    makerAmount: new BigNumber(125),\n                    takerAmount: new BigNumber(100),\n                };\n\n                const wrongPair: IndicativeQuote = {\n                    ...BASE_INDICATIVE_QUOTE,\n                    expiry: NEVER_EXPIRES,\n                    makerAmount: new BigNumber(125),\n                    makerToken: takerToken,\n                    makerUri: 'http://makeruri',\n                    takerAmount: new BigNumber(100),\n                    takerToken: makerToken,\n                };\n\n                const expiresInOneMinute: IndicativeQuote = {\n                    ...BASE_INDICATIVE_QUOTE,\n                    makerAmount: new BigNumber(125),\n                    takerAmount: new BigNumber(100),\n                    expiry: inThirtySeconds,\n                };\n\n                const tests = [\n                    {\n                        name: 'should return null when no quotes valid',\n                        quotes: [partialFillQuote],\n                        expectations: {\n                            isNull: true,\n                            makerAmount: undefined,\n                            takerAmount: undefined,\n                        },\n                    },\n                    {\n                        name: 'should only select quotes that are 100% filled',\n                        quotes: [partialFillQuote, fullQuoteBadPricing],\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 99,\n                            takerAmount: 100,\n                        },\n                    },\n                    {\n                        name: 'should select quote with best pricing',\n                        quotes: [fullQuoteBadPricing, fullQuoteGreatPricing, fullQuoteOkPricing],\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 125,\n                            takerAmount: 100,\n                        },\n                    },\n                    {\n                        name: 'should ignore quotes with the wrong pair',\n                        quotes: [fullQuoteBadPricing, wrongPair],\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 99,\n                            takerAmount: 100,\n                        },\n                    },\n                    {\n                        name: 'should ignore quotes that expire too soon',\n                        quotes: [fullQuoteBadPricing, expiresInOneMinute],\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 99,\n                            takerAmount: 100,\n                        },\n                    },\n                ];\n\n                tests.forEach(({ name, quotes, expectations }) => {\n                    it(name, () => {\n                        const bestQuote = getBestQuote<IndicativeQuote>(\n                            quotes,\n                            isSelling,\n                            takerToken,\n                            makerToken,\n                            assetFillAmount,\n                            validityWindowMs,\n                        );\n\n                        if (bestQuote === null) {\n                            expect(expectations?.isNull).to.equal(true);\n                            return;\n                        }\n\n                        expect(expectations?.isNull).to.equal(false);\n                        expect(bestQuote.makerAmount.toNumber()).to.be.eq(expectations?.makerAmount);\n                        expect(bestQuote.takerAmount.toNumber()).to.be.eq(expectations?.takerAmount);\n                    });\n                });\n            });\n\n            describe('buys', () => {\n                const isSelling = false;\n                const partialFillQuote: IndicativeQuote = {\n                    ...BASE_INDICATIVE_QUOTE,\n                    makerAmount: new BigNumber(55),\n                    takerAmount: new BigNumber(50),\n                };\n\n                const fullQuoteBadPricing: IndicativeQuote = {\n                    ...BASE_INDICATIVE_QUOTE,\n                    makerAmount: new BigNumber(100),\n                    takerAmount: new BigNumber(125),\n                };\n\n                const fullQuoteOkPricing: IndicativeQuote = {\n                    ...BASE_INDICATIVE_QUOTE,\n                    makerAmount: new BigNumber(100),\n                    takerAmount: new BigNumber(120),\n                };\n\n                const fullQuoteGreatPricing: IndicativeQuote = {\n                    ...BASE_INDICATIVE_QUOTE,\n                    makerAmount: new BigNumber(100),\n                    takerAmount: new BigNumber(80),\n                };\n\n                const wrongPair: IndicativeQuote = {\n                    ...BASE_INDICATIVE_QUOTE,\n                    makerToken: takerToken,\n                    takerToken: makerToken,\n                    expiry: NEVER_EXPIRES,\n                    makerAmount: new BigNumber(100),\n                    takerAmount: new BigNumber(80),\n                };\n\n                const expiresInOneMinute = {\n                    ...BASE_INDICATIVE_QUOTE,\n                    makerAmount: new BigNumber(100),\n                    takerAmount: new BigNumber(80),\n                    expiry: inThirtySeconds,\n                };\n\n                const tests = [\n                    {\n                        name: 'should return null when no quotes valid',\n                        quotes: [partialFillQuote],\n                        expectations: {\n                            isNull: true,\n                            makerAmount: undefined,\n                            takerAmount: undefined,\n                        },\n                    },\n                    {\n                        name: 'should only select quotes that are 100% filled',\n                        quotes: [partialFillQuote, fullQuoteBadPricing],\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 100,\n                            takerAmount: 125,\n                        },\n                    },\n                    {\n                        name: 'should select quote with best pricing',\n                        quotes: [fullQuoteBadPricing, fullQuoteGreatPricing, fullQuoteOkPricing],\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 100,\n                            takerAmount: 80,\n                        },\n                    },\n                    {\n                        name: 'should ignore quotes with the wrong pair',\n                        quotes: [fullQuoteBadPricing, wrongPair],\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 100,\n                            takerAmount: 125,\n                        },\n                    },\n                    {\n                        name: 'should ignore quotes that expire too soon',\n                        quotes: [fullQuoteBadPricing, expiresInOneMinute],\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 100,\n                            takerAmount: 125,\n                        },\n                    },\n                ];\n\n                tests.forEach(({ name, quotes, expectations }) => {\n                    it(name, () => {\n                        const bestQuote = getBestQuote<IndicativeQuote>(\n                            quotes,\n                            isSelling,\n                            takerToken,\n                            makerToken,\n                            assetFillAmount,\n                            validityWindowMs,\n                        );\n\n                        if (bestQuote === null) {\n                            expect(expectations?.isNull).to.equal(true);\n                            return;\n                        }\n\n                        expect(expectations?.isNull).to.equal(false);\n                        expect(bestQuote.makerAmount.toNumber()).to.be.eq(expectations?.makerAmount);\n                        expect(bestQuote.takerAmount.toNumber()).to.be.eq(expectations?.takerAmount);\n                    });\n                });\n            });\n        });\n\n        describe('FirmQuotes', () => {\n            // Given\n            const BASE_QUOTE = createBaseQuote();\n\n            const BASE_ORDER = new OtcOrder({\n                makerToken,\n                takerToken,\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(NEVER_EXPIRES, ZERO, ZERO),\n            });\n\n            describe('sells', () => {\n                const isSelling = true;\n                const partialFillQuote: FirmOtcQuote = {\n                    ...BASE_QUOTE,\n                    order: new OtcOrder({\n                        ...BASE_ORDER,\n                        makerAmount: new BigNumber(55),\n                        takerAmount: new BigNumber(50),\n                    }),\n                };\n\n                const fullQuoteBadPricing: FirmOtcQuote = {\n                    ...BASE_QUOTE,\n                    order: new OtcOrder({\n                        ...BASE_ORDER,\n                        makerAmount: new BigNumber(99),\n                        takerAmount: new BigNumber(100),\n                    }),\n                };\n\n                const fullQuoteOkPricing: FirmOtcQuote = {\n                    ...BASE_QUOTE,\n                    order: new OtcOrder({\n                        ...BASE_ORDER,\n                        makerAmount: new BigNumber(105),\n                        takerAmount: new BigNumber(100),\n                    }),\n                };\n\n                const fullQuoteGreatPricing: FirmOtcQuote = {\n                    ...BASE_QUOTE,\n                    order: new OtcOrder({\n                        ...BASE_ORDER,\n                        makerAmount: new BigNumber(125),\n                        takerAmount: new BigNumber(100),\n                    }),\n                };\n\n                const wrongPair: FirmOtcQuote = {\n                    ...BASE_QUOTE,\n                    order: new OtcOrder({\n                        ...BASE_ORDER,\n                        makerToken: takerToken,\n                        takerToken: makerToken,\n                        makerAmount: new BigNumber(125),\n                        takerAmount: new BigNumber(100),\n                    }),\n                };\n\n                const expiresInOneMinute: FirmOtcQuote = {\n                    ...BASE_QUOTE,\n                    order: new OtcOrder({\n                        ...BASE_ORDER,\n                        makerAmount: new BigNumber(125),\n                        takerAmount: new BigNumber(100),\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(inThirtySeconds, ZERO, ZERO),\n                    }),\n                };\n\n                // TODO (MKR-671): uncomment once filter is enabled\n                const validMakerBalances: BigNumber[] = [new BigNumber(150), new BigNumber(150)];\n                const invalidMakerBalances: BigNumber[] = [new BigNumber(150), new BigNumber(50)];\n\n                const tests = [\n                    {\n                        name: 'should return null when no quotes valid',\n                        args: {\n                            quotes: [partialFillQuote],\n                        },\n                        expectations: {\n                            isNull: true,\n                            makerAmount: undefined,\n                            takerAmount: undefined,\n                        },\n                    },\n                    {\n                        name: 'should only select quotes that are 100% filled',\n                        args: {\n                            quotes: [partialFillQuote, fullQuoteBadPricing],\n                        },\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 99,\n                            takerAmount: 100,\n                        },\n                    },\n                    {\n                        name: 'should select quote with best pricing',\n                        args: {\n                            quotes: [fullQuoteBadPricing, fullQuoteGreatPricing, fullQuoteOkPricing],\n                        },\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 125,\n                            takerAmount: 100,\n                        },\n                    },\n                    {\n                        name: 'should ignore quotes with the wrong pair',\n                        args: {\n                            quotes: [fullQuoteBadPricing, wrongPair],\n                        },\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 99,\n                            takerAmount: 100,\n                        },\n                    },\n                    {\n                        name: 'should ignore quotes that expire too soon',\n                        args: {\n                            quotes: [fullQuoteBadPricing, expiresInOneMinute],\n                        },\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 99,\n                            takerAmount: 100,\n                        },\n                    },\n                    // TODO (MKR-671): uncomment once filter is enabled\n                    {\n                        name: 'should not ignore quotes if makers have enough balances',\n                        args: {\n                            quotes: [fullQuoteBadPricing, fullQuoteOkPricing],\n                            quotedMakerBalances: validMakerBalances,\n                        },\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 105,\n                            takerAmount: 100,\n                        },\n                    },\n                    {\n                        name: 'should ignore quotes if makers do not have enough balances',\n                        args: {\n                            quotes: [fullQuoteBadPricing, fullQuoteOkPricing],\n                            quotedMakerBalances: invalidMakerBalances,\n                        },\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 99,\n                            takerAmount: 100,\n                        },\n                    },\n                ];\n\n                tests.forEach(({ name, args, expectations }) => {\n                    it(name, () => {\n                        const bestQuote = getBestQuote(\n                            args?.quotes,\n                            isSelling,\n                            takerToken,\n                            makerToken,\n                            assetFillAmount,\n                            validityWindowMs,\n                            args?.quotedMakerBalances,\n                        );\n\n                        if (bestQuote === null) {\n                            expect(expectations?.isNull).to.equal(true);\n                            return;\n                        }\n\n                        expect(expectations?.isNull).to.equal(false);\n                        expect(bestQuote.order.makerAmount.toNumber()).to.be.eq(expectations?.makerAmount);\n                        expect(bestQuote.order.takerAmount.toNumber()).to.be.eq(expectations?.takerAmount);\n                    });\n                });\n            });\n\n            describe('buys', () => {\n                const isSelling = false;\n                const partialFillQuote: FirmOtcQuote = {\n                    ...BASE_QUOTE,\n                    order: new OtcOrder({\n                        ...BASE_ORDER,\n                        makerAmount: new BigNumber(55),\n                        takerAmount: new BigNumber(50),\n                    }),\n                };\n                const fullQuoteBadPricing: FirmOtcQuote = {\n                    ...BASE_QUOTE,\n                    order: new OtcOrder({\n                        ...BASE_ORDER,\n                        makerAmount: new BigNumber(100),\n                        takerAmount: new BigNumber(125),\n                    }),\n                };\n\n                const fullQuoteOkPricing: FirmOtcQuote = {\n                    ...BASE_QUOTE,\n                    order: new OtcOrder({\n                        ...BASE_ORDER,\n                        makerAmount: new BigNumber(100),\n                        takerAmount: new BigNumber(120),\n                    }),\n                };\n\n                const fullQuoteGreatPricing: FirmOtcQuote = {\n                    ...BASE_QUOTE,\n                    order: new OtcOrder({\n                        ...BASE_ORDER,\n                        makerAmount: new BigNumber(100),\n                        takerAmount: new BigNumber(80),\n                    }),\n                };\n\n                const wrongPair: FirmOtcQuote = {\n                    ...BASE_QUOTE,\n                    order: new OtcOrder({\n                        ...BASE_ORDER,\n                        makerToken: takerToken,\n                        takerToken: makerToken,\n                        makerAmount: new BigNumber(100),\n                        takerAmount: new BigNumber(80),\n                    }),\n                };\n\n                const expiresInOneMinute: FirmOtcQuote = {\n                    ...BASE_QUOTE,\n                    order: new OtcOrder({\n                        ...BASE_ORDER,\n                        makerAmount: new BigNumber(100),\n                        takerAmount: new BigNumber(80),\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(inThirtySeconds, ZERO, ZERO),\n                    }),\n                };\n\n                // TODO (MKR-671): uncomment once filter is enabled\n                const validMakerBalances: BigNumber[] = [new BigNumber(150), new BigNumber(150)];\n                const invalidMakerBalances: BigNumber[] = [new BigNumber(150), new BigNumber(50)];\n\n                const tests = [\n                    {\n                        name: 'should return null when no quotes valid',\n                        args: {\n                            quotes: [partialFillQuote],\n                        },\n                        expectations: {\n                            isNull: true,\n                            makerAmount: undefined,\n                            takerAmount: undefined,\n                        },\n                    },\n                    {\n                        name: 'should only select quotes that are 100% filled',\n                        args: {\n                            quotes: [partialFillQuote, fullQuoteBadPricing],\n                        },\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 100,\n                            takerAmount: 125,\n                        },\n                    },\n                    {\n                        name: 'should select quote with best pricing',\n                        args: {\n                            quotes: [fullQuoteBadPricing, fullQuoteGreatPricing, fullQuoteOkPricing],\n                        },\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 100,\n                            takerAmount: 80,\n                        },\n                    },\n                    {\n                        name: 'should ignore quotes with the wrong pair',\n                        args: {\n                            quotes: [fullQuoteBadPricing, wrongPair],\n                        },\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 100,\n                            takerAmount: 125,\n                        },\n                    },\n                    {\n                        name: 'should ignore quotes that expire too soon',\n                        args: {\n                            quotes: [fullQuoteBadPricing, expiresInOneMinute],\n                        },\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 100,\n                            takerAmount: 125,\n                        },\n                    },\n                    // TODO (MKR-671): uncomment once filter is enabled\n                    {\n                        name: 'should not ignore quotes if makers have enough balances',\n                        args: {\n                            quotes: [fullQuoteBadPricing, fullQuoteOkPricing],\n                            quotedMakerBalances: validMakerBalances,\n                        },\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 100,\n                            takerAmount: 120,\n                        },\n                    },\n                    {\n                        name: 'should ignore quotes if makers do not have enough balances',\n                        args: {\n                            quotes: [fullQuoteBadPricing, fullQuoteOkPricing],\n                            quotedMakerBalances: invalidMakerBalances,\n                        },\n                        expectations: {\n                            isNull: false,\n                            makerAmount: 100,\n                            takerAmount: 125,\n                        },\n                    },\n                ];\n\n                tests.forEach(({ name, args, expectations }) => {\n                    it(name, () => {\n                        const bestQuote = getBestQuote(\n                            args?.quotes,\n                            isSelling,\n                            takerToken,\n                            makerToken,\n                            assetFillAmount,\n                            validityWindowMs,\n                            args?.quotedMakerBalances,\n                        );\n\n                        if (bestQuote === null) {\n                            expect(expectations?.isNull).to.equal(true);\n                            return;\n                        }\n\n                        expect(expectations?.isNull).to.equal(false);\n                        expect(bestQuote.order.makerAmount.toNumber()).to.be.eq(expectations?.makerAmount);\n                        expect(bestQuote.order.takerAmount.toNumber()).to.be.eq(expectations?.takerAmount);\n                    });\n                });\n            });\n        });\n    });\n});\n"],"version":3}