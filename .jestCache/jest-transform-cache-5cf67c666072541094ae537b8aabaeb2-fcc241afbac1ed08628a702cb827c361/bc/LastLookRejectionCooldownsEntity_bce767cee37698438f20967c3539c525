328e1d52c8d624d4344ae99f39572946
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LastLookRejectionCooldownEntity = void 0;
const typeorm_1 = require("typeorm");
// A table of issued cooldowns due to bad last look rejection
let LastLookRejectionCooldownEntity = class LastLookRejectionCooldownEntity {
    // tslint:disable-next-line: no-object-literal-type-assertion
    constructor(opts = {}) {
        this.makerId = opts.makerId;
        this.chainId = opts.chainId;
        this.pairKey = opts.pairKey;
        this.startTime = opts.startTime;
        this.endTime = opts.endTime;
        this.orderHash = opts.orderHash;
    }
};
__decorate([
    (0, typeorm_1.PrimaryColumn)({ name: 'maker_id', type: 'varchar' }),
    __metadata("design:type", String)
], LastLookRejectionCooldownEntity.prototype, "makerId", void 0);
__decorate([
    (0, typeorm_1.PrimaryColumn)({ name: 'chain_id', type: 'integer' }),
    __metadata("design:type", Number)
], LastLookRejectionCooldownEntity.prototype, "chainId", void 0);
__decorate([
    (0, typeorm_1.PrimaryColumn)({ name: 'pair_key', type: 'varchar' }),
    __metadata("design:type", String)
], LastLookRejectionCooldownEntity.prototype, "pairKey", void 0);
__decorate([
    (0, typeorm_1.PrimaryColumn)({ name: 'start_time', type: 'timestamptz' }),
    __metadata("design:type", Date)
], LastLookRejectionCooldownEntity.prototype, "startTime", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'end_time', type: 'timestamptz' }),
    __metadata("design:type", Date)
], LastLookRejectionCooldownEntity.prototype, "endTime", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'order_hash', type: 'varchar' }),
    __metadata("design:type", String)
], LastLookRejectionCooldownEntity.prototype, "orderHash", void 0);
LastLookRejectionCooldownEntity = __decorate([
    (0, typeorm_1.Entity)({ name: 'last_look_rejection_cooldowns' }),
    __metadata("design:paramtypes", [Object])
], LastLookRejectionCooldownEntity);
exports.LastLookRejectionCooldownEntity = LastLookRejectionCooldownEntity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9lbnRpdGllcy9MYXN0TG9va1JlamVjdGlvbkNvb2xkb3duc0VudGl0eS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxxQ0FBd0Q7QUFJeEQsNkRBQTZEO0FBRTdELElBQWEsK0JBQStCLEdBQTVDLE1BQWEsK0JBQStCO0lBeUJ4Qyw2REFBNkQ7SUFDN0QsWUFBWSxPQUFzQyxFQUFtQztRQUNqRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUNwQyxDQUFDO0NBQ0osQ0FBQTtBQS9CRztJQURDLElBQUEsdUJBQWEsRUFBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDOztnRUFDOUI7QUFJdkI7SUFEQyxJQUFBLHVCQUFhLEVBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQzs7Z0VBQzlCO0FBSXZCO0lBREMsSUFBQSx1QkFBYSxFQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUM7O2dFQUM5QjtBQUl2QjtJQURDLElBQUEsdUJBQWEsRUFBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxDQUFDOzhCQUN6QyxJQUFJO2tFQUFDO0FBSXZCO0lBREMsSUFBQSxnQkFBTSxFQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLENBQUM7OEJBQ2xDLElBQUk7Z0VBQUM7QUFJckI7SUFEQyxJQUFBLGdCQUFNLEVBQUMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQzs7a0VBQ3ZCO0FBdkJoQiwrQkFBK0I7SUFEM0MsSUFBQSxnQkFBTSxFQUFDLEVBQUUsSUFBSSxFQUFFLCtCQUErQixFQUFFLENBQUM7O0dBQ3JDLCtCQUErQixDQWtDM0M7QUFsQ1ksMEVBQStCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZHdhbHNoL2NvZGUtbG9jYWwvMHgtcmZxLWFwaS9zcmMvZW50aXRpZXMvTGFzdExvb2tSZWplY3Rpb25Db29sZG93bnNFbnRpdHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sdW1uLCBFbnRpdHksIFByaW1hcnlDb2x1bW4gfSBmcm9tICd0eXBlb3JtJztcblxuZXhwb3J0IHR5cGUgTGFzdExvb2tSZWplY3Rpb25Db29sZG93bk9wdHMgPSBMYXN0TG9va1JlamVjdGlvbkNvb2xkb3duRW50aXR5O1xuXG4vLyBBIHRhYmxlIG9mIGlzc3VlZCBjb29sZG93bnMgZHVlIHRvIGJhZCBsYXN0IGxvb2sgcmVqZWN0aW9uXG5ARW50aXR5KHsgbmFtZTogJ2xhc3RfbG9va19yZWplY3Rpb25fY29vbGRvd25zJyB9KVxuZXhwb3J0IGNsYXNzIExhc3RMb29rUmVqZWN0aW9uQ29vbGRvd25FbnRpdHkge1xuICAgIC8vIFRoZSBJRCBvZiBibG9ja2VkIG1hcmtldCBtYWtlclxuICAgIEBQcmltYXJ5Q29sdW1uKHsgbmFtZTogJ21ha2VyX2lkJywgdHlwZTogJ3ZhcmNoYXInIH0pXG4gICAgcHVibGljIG1ha2VySWQ6IHN0cmluZztcblxuICAgIC8vIFRoZSBjaGFpbiBJRCBvZiB0aGUgY2hhaW4gbWFya2V0IG1ha2VyIGlzIGJsb2NrZWQgb25cbiAgICBAUHJpbWFyeUNvbHVtbih7IG5hbWU6ICdjaGFpbl9pZCcsIHR5cGU6ICdpbnRlZ2VyJyB9KVxuICAgIHB1YmxpYyBjaGFpbklkOiBudW1iZXI7XG5cbiAgICAvLyBUb2tlbiBwYWlyIHN0cmluZyBvZiBibG9ja2VkIHBhaXIgKGluIGZvcm1hdCBvZiBcIjB4MS0weDJcIilcbiAgICBAUHJpbWFyeUNvbHVtbih7IG5hbWU6ICdwYWlyX2tleScsIHR5cGU6ICd2YXJjaGFyJyB9KVxuICAgIHB1YmxpYyBwYWlyS2V5OiBzdHJpbmc7XG5cbiAgICAvLyBUaGUgdGltZSB0aGUgbWFya2V0IG1ha2VyIGlzIGJsb2NrZWQgZnJvbSBpc3N1aW5nIHF1b3Rlc1xuICAgIEBQcmltYXJ5Q29sdW1uKHsgbmFtZTogJ3N0YXJ0X3RpbWUnLCB0eXBlOiAndGltZXN0YW1wdHonIH0pXG4gICAgcHVibGljIHN0YXJ0VGltZTogRGF0ZTtcblxuICAgIC8vIFRoZSB0aW1lIHRoZSBtYXJrZXQgbWFrZXIgaXMgdW5ibG9ja2VkXG4gICAgQENvbHVtbih7IG5hbWU6ICdlbmRfdGltZScsIHR5cGU6ICd0aW1lc3RhbXB0eicgfSlcbiAgICBwdWJsaWMgZW5kVGltZTogRGF0ZTtcblxuICAgIC8vIFRoZSBvcmRlciBoYXNoIG9mIHRoZSBvcmRlciB3aXRoIGJhZCBsYXN0IGxvb2sgcmVqZWN0aW9uXG4gICAgQENvbHVtbih7IG5hbWU6ICdvcmRlcl9oYXNoJywgdHlwZTogJ3ZhcmNoYXInIH0pXG4gICAgcHVibGljIG9yZGVySGFzaDogc3RyaW5nO1xuXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1vYmplY3QtbGl0ZXJhbC10eXBlLWFzc2VydGlvblxuICAgIGNvbnN0cnVjdG9yKG9wdHM6IExhc3RMb29rUmVqZWN0aW9uQ29vbGRvd25PcHRzID0ge30gYXMgTGFzdExvb2tSZWplY3Rpb25Db29sZG93bk9wdHMpIHtcbiAgICAgICAgdGhpcy5tYWtlcklkID0gb3B0cy5tYWtlcklkO1xuICAgICAgICB0aGlzLmNoYWluSWQgPSBvcHRzLmNoYWluSWQ7XG4gICAgICAgIHRoaXMucGFpcktleSA9IG9wdHMucGFpcktleTtcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBvcHRzLnN0YXJ0VGltZTtcbiAgICAgICAgdGhpcy5lbmRUaW1lID0gb3B0cy5lbmRUaW1lO1xuICAgICAgICB0aGlzLm9yZGVySGFzaCA9IG9wdHMub3JkZXJIYXNoO1xuICAgIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==