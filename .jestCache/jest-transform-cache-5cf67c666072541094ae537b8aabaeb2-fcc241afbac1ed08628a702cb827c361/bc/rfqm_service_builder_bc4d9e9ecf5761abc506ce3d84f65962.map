{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfqm_service_builder.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfqm_service_builder.ts"],"sourcesContent":["import {\n    artifacts,\n    AssetSwapperContractAddresses,\n    ERC20BridgeSamplerContract,\n    SupportedProvider,\n} from '@0x/asset-swapper';\nimport { ChainId, getContractAddressesForChainOrThrow } from '@0x/contract-addresses';\nimport { PrivateKeyWalletSubprovider } from '@0x/subproviders';\nimport { getTokenMetadataIfExists } from '@0x/token-metadata';\nimport { Web3Wrapper } from '@0x/web3-wrapper';\nimport Axios, { AxiosRequestConfig } from 'axios';\nimport { providers, Wallet } from 'ethers';\nimport { Agent as HttpAgent } from 'http';\nimport { Agent as HttpsAgent } from 'https';\nimport Redis from 'ioredis';\nimport { Kafka, Producer as KafkaProducer } from 'kafkajs';\nimport { Producer } from 'sqs-producer';\n\nimport {\n    ChainConfiguration,\n    ChainConfigurations,\n    KAFKA_BROKERS,\n    META_TX_WORKER_MNEMONIC,\n    REDIS_URI,\n    RFQ_PROXY_ADDRESS,\n    RFQ_PROXY_PORT,\n    ZERO_EX_API_KEY,\n} from '../config';\nimport {\n    DEFAULT_MIN_EXPIRY_DURATION_MS,\n    DEFAULT_WORKER_TRANSACTION_WATCHER_SLEEP_TIME_MS,\n    KEEP_ALIVE_TTL,\n} from '../core/constants';\nimport { logger } from '../logger';\nimport { FeeService } from '../services/fee_service';\nimport { RfqmService } from '../services/rfqm_service';\nimport { RfqMakerBalanceCacheService } from '../services/rfq_maker_balance_cache_service';\nimport { WorkerService } from '../services/WorkerService';\n\nimport { BalanceChecker } from './balance_checker';\nimport { CacheClient } from './cache_client';\nimport { ConfigManager } from './config_manager';\nimport { getGasStationAttendant } from './GasStationAttendantUtils';\nimport { providerUtils } from './provider_utils';\nimport { QuoteServerClient } from './quote_server_client';\nimport { RfqmDbUtils } from './rfqm_db_utils';\nimport { RfqBalanceCheckUtils, RfqBlockchainUtils } from './rfq_blockchain_utils';\nimport { RfqMakerDbUtils } from './rfq_maker_db_utils';\nimport { RfqMakerManager } from './rfq_maker_manager';\nimport { TokenMetadataManager } from './TokenMetadataManager';\nimport { TokenPriceOracle } from './TokenPriceOracle';\nimport { ZeroExApiClient } from './ZeroExApiClient';\n\nexport type RfqmServices = Map<number, RfqmService>;\n\nconst DEFAULT_AXIOS_TIMEOUT = 600; // ms\n\n/**\n * Initialize a kafka producer if KAFKA_BROKERS is set\n */\nfunction getKafkaProducer(): KafkaProducer | undefined {\n    let kafkaProducer: KafkaProducer | undefined;\n    if (KAFKA_BROKERS !== undefined) {\n        const kafka = new Kafka({\n            clientId: '0x-api',\n            brokers: KAFKA_BROKERS,\n        });\n\n        kafkaProducer = kafka.producer();\n        // tslint:disable-next-line: no-floating-promises\n        kafkaProducer.connect();\n    }\n    return kafkaProducer;\n}\n\n/**\n * Creates the default Axios Request Config\n */\nexport function getAxiosRequestConfig(timeout: number = DEFAULT_AXIOS_TIMEOUT): AxiosRequestConfig {\n    return {\n        httpAgent: new HttpAgent({ keepAlive: true, timeout: KEEP_ALIVE_TTL }),\n        httpsAgent: new HttpsAgent({ keepAlive: true, timeout: KEEP_ALIVE_TTL }),\n        timeout,\n    };\n}\n\n/**\n * Creates the Axios Request Config with egress proxy\n */\nexport function getAxiosRequestConfigWithProxy(): AxiosRequestConfig {\n    const axiosRequestConfig: AxiosRequestConfig = getAxiosRequestConfig();\n    if (RFQ_PROXY_ADDRESS !== undefined && RFQ_PROXY_PORT !== undefined) {\n        axiosRequestConfig.proxy = {\n            host: RFQ_PROXY_ADDRESS,\n            port: RFQ_PROXY_PORT,\n        };\n    }\n\n    return axiosRequestConfig;\n}\n\nasync function deploySamplerContractAsync(\n    provider: SupportedProvider,\n    chainId: ChainId,\n): Promise<ERC20BridgeSamplerContract> {\n    const web3Wrapper = new Web3Wrapper(provider);\n    const _chainId = await web3Wrapper.getChainIdAsync();\n    if (_chainId !== chainId) {\n        throw new Error(`Incorrect Chain Id: ${_chainId}`);\n    }\n    const [account] = await web3Wrapper.getAvailableAddressesAsync();\n    try {\n        const sampler = await ERC20BridgeSamplerContract.deployFrom0xArtifactAsync(\n            artifacts.ERC20BridgeSampler,\n            provider,\n            { from: account },\n            {},\n        );\n        logger.info(`Deployed ERC20BridgeSamplerContract on network ${chainId}: ${sampler.address}`);\n        return sampler;\n    } catch (err) {\n        logger.error(`Failed to deploy ERC20BridgeSamplerContract on network ${chainId}: ${err}`);\n        throw err;\n    }\n}\n\n/**\n * Determines the contract addresses needed for the network. For testing (ganache)\n * required contracts are deployed\n * @param provider provider to the network, used for ganache deployment\n * @param chainConfiguration used for getting chainId and exchangeProxyContractAddressOverride\n */\nexport async function getContractAddressesForNetworkOrThrowAsync(\n    provider: SupportedProvider,\n    chainConfiguration: Pick<ChainConfiguration, 'chainId' | 'exchangeProxyContractAddressOverride'>,\n): Promise<AssetSwapperContractAddresses> {\n    const { chainId, exchangeProxyContractAddressOverride } = chainConfiguration;\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let contractAddresses = getContractAddressesForChainOrThrow(chainId.toString() as any);\n    // In a testnet where the environment does not support overrides\n    // so we deploy the latest sampler\n    if (chainId === ChainId.Ganache) {\n        const sampler = await deploySamplerContractAsync(provider, chainId);\n        contractAddresses = { ...contractAddresses, erc20BridgeSampler: sampler.address };\n    }\n    // If 0x Exchange Proxy contract address override is defined in the chain config\n    // we use address instead of the one provided from `@0x/contract-addresses`\n    if (exchangeProxyContractAddressOverride) {\n        contractAddresses = { ...contractAddresses, exchangeProxy: exchangeProxyContractAddressOverride };\n    }\n    return contractAddresses;\n}\n\n/**\n * Builds a single instance of RfqmService\n */\nexport async function buildRfqmServiceAsync(\n    rfqmDbUtils: RfqmDbUtils,\n    rfqMakerManager: RfqMakerManager,\n    tokenPriceOracle: TokenPriceOracle,\n    configManager: ConfigManager,\n    chain: ChainConfiguration,\n    redis: Redis,\n): Promise<RfqmService> {\n    const { rfqm: rfqmConfiguration, chainId } = chain;\n    if (!rfqmConfiguration) {\n        throw new Error(`RFQm Service for chain ${chainId} does not exist`);\n    }\n\n    // ether.js Provider coexists with web3 provider during migration away from 0x/web3-wrapper.\n    const ethersProvider = new providers.JsonRpcProvider(chain.rpcUrl, chainId);\n\n    const rpcProvider = providerUtils.createWeb3Provider(chain.rpcUrl);\n    const provider: SupportedProvider = rpcProvider;\n\n    const contractAddresses = await getContractAddressesForNetworkOrThrowAsync(provider, chain);\n    const axiosInstance = Axios.create(getAxiosRequestConfig());\n    const proxiedAxiosInstance = Axios.create(getAxiosRequestConfigWithProxy());\n\n    const balanceChecker = new BalanceChecker(provider);\n    const rfqBlockchainUtils = new RfqBlockchainUtils(\n        provider,\n        contractAddresses.exchangeProxy,\n        balanceChecker,\n        ethersProvider,\n    );\n\n    const tokenMetadataManager = new TokenMetadataManager(chainId, rfqBlockchainUtils);\n\n    const sqsProducer = Producer.create({\n        queueUrl: chain.sqsUrl,\n    });\n\n    const quoteServerClient = new QuoteServerClient(proxiedAxiosInstance);\n\n    const cacheClient = new CacheClient(redis);\n\n    const kafkaProducer = getKafkaProducer();\n\n    const gasStationAttendant = getGasStationAttendant(chain, axiosInstance);\n\n    const feeTokenMetadata = getTokenMetadataIfExists(contractAddresses.etherToken, chainId);\n    if (feeTokenMetadata === undefined) {\n        throw new Error(`Fee token ${contractAddresses.etherToken} on chain ${chainId} could not be found!`);\n    }\n\n    const zeroExApiClient = new ZeroExApiClient(Axios.create(), ZERO_EX_API_KEY, chain);\n\n    const feeService = new FeeService(\n        chainId,\n        feeTokenMetadata,\n        configManager,\n        gasStationAttendant,\n        tokenPriceOracle,\n        zeroExApiClient,\n        rfqmConfiguration.minExpiryDurationMs || DEFAULT_MIN_EXPIRY_DURATION_MS,\n    );\n\n    const rfqMakerBalanceCacheService = new RfqMakerBalanceCacheService(\n        cacheClient,\n        rfqBlockchainUtils.balanceCheckUtils,\n    );\n\n    return new RfqmService(\n        chainId,\n        feeService,\n        rfqmConfiguration.feeModelVersion || 0,\n        contractAddresses,\n        chain.registryAddress,\n        rfqBlockchainUtils,\n        rfqmDbUtils,\n        sqsProducer,\n        quoteServerClient,\n        rfqmConfiguration.minExpiryDurationMs || DEFAULT_MIN_EXPIRY_DURATION_MS,\n        cacheClient,\n        rfqMakerBalanceCacheService,\n        rfqMakerManager,\n        tokenMetadataManager,\n        kafkaProducer,\n        rfqmConfiguration.quoteReportTopic,\n    );\n}\n\n/**\n * Builds a single instance of the WorkerService\n */\nexport async function buildWorkerServiceAsync(\n    rfqmDbUtils: RfqmDbUtils,\n    rfqMakerManager: RfqMakerManager,\n    chain: ChainConfiguration,\n    redis: Redis,\n    workerIndex: number,\n): Promise<WorkerService> {\n    const { worker: workerConfiguration, chainId } = chain;\n    if (!workerConfiguration) {\n        throw new Error(`Worker Service for chain ${chainId} does not exist`);\n    }\n\n    let provider: SupportedProvider;\n\n    // ether.js Provider coexists with web3 provider during migration away from 0x/web3-wrapper.\n    const ethersProvider = new providers.JsonRpcProvider(chain.rpcUrl, chainId);\n    let ethersWallet: Wallet | undefined;\n\n    const rpcProvider = providerUtils.createWeb3Provider(chain.rpcUrl);\n    if (META_TX_WORKER_MNEMONIC === undefined) {\n        throw new Error(`META_TX_WORKER_MNEMONIC must be defined to run RFQM service as a worker`);\n    }\n    const workerPrivateKey = RfqBlockchainUtils.getPrivateKeyFromIndexAndPhrase(META_TX_WORKER_MNEMONIC, workerIndex);\n\n    // TODO (rhinodavid): Remove once migration to ethers.js is complete\n    const privateWalletSubprovider = new PrivateKeyWalletSubprovider(workerPrivateKey);\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n    // eslint-disable-next-line prefer-const\n    provider = RfqBlockchainUtils.createPrivateKeyProvider(rpcProvider, privateWalletSubprovider);\n\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    ethersWallet = Wallet.fromMnemonic(META_TX_WORKER_MNEMONIC, `m/44'/60'/0'/0/${workerIndex!}`);\n    ethersWallet = ethersWallet.connect(ethersProvider);\n\n    const contractAddresses = await getContractAddressesForNetworkOrThrowAsync(provider, chain);\n    const axiosInstance = Axios.create(getAxiosRequestConfigWithProxy());\n\n    const balanceChecker = new BalanceChecker(provider);\n    const rfqBlockchainUtils = new RfqBlockchainUtils(\n        provider,\n        contractAddresses.exchangeProxy,\n        balanceChecker,\n        ethersProvider,\n        ethersWallet,\n    );\n\n    const quoteServerClient = new QuoteServerClient(axiosInstance);\n\n    const cacheClient = new CacheClient(redis);\n\n    const gasStationAttendant = getGasStationAttendant(chain, axiosInstance);\n\n    const feeTokenMetadata = getTokenMetadataIfExists(contractAddresses.etherToken, chainId);\n    if (feeTokenMetadata === undefined) {\n        throw new Error(`Fee token ${contractAddresses.etherToken} on chain ${chainId} could not be found!`);\n    }\n\n    const rfqMakerBalanceCacheService = new RfqMakerBalanceCacheService(\n        cacheClient,\n        rfqBlockchainUtils.balanceCheckUtils,\n    );\n\n    return new WorkerService(\n        chainId,\n        gasStationAttendant,\n        chain.registryAddress,\n        rfqBlockchainUtils,\n        rfqmDbUtils,\n        quoteServerClient,\n        workerConfiguration.transactionWatcherSleepTimeMs || DEFAULT_WORKER_TRANSACTION_WATCHER_SLEEP_TIME_MS,\n        cacheClient,\n        rfqMakerBalanceCacheService,\n        rfqMakerManager,\n        workerConfiguration.initialMaxPriorityFeePerGasGwei,\n        workerConfiguration.maxFeePerGasCapGwei,\n        workerConfiguration.enableAccessList,\n    );\n}\n\n/**\n * Builds an instance of maker balance cache service.\n * Intended to be used by maker balance cache background jobs.\n */\nexport async function buildRfqMakerBalanceCacheServiceAsync(\n    chain: ChainConfiguration,\n): Promise<RfqMakerBalanceCacheService> {\n    const provider = providerUtils.createWeb3Provider(chain.rpcUrl);\n    const contractAddresses = await getContractAddressesForNetworkOrThrowAsync(provider, chain);\n    const balanceChecker = new BalanceChecker(provider);\n    const balanceCheckUtils = new RfqBalanceCheckUtils(balanceChecker, contractAddresses.exchangeProxy);\n\n    if (!REDIS_URI) {\n        throw new Error('No redis URI provided to maker balance cache service');\n    }\n    const redis = new Redis(REDIS_URI);\n    const cacheClient = new CacheClient(redis);\n\n    return new RfqMakerBalanceCacheService(cacheClient, balanceCheckUtils);\n}\n\n/**\n * Creates an RFQM Service for each chain present in `ChainConfigurations`.\n *\n * Intended for use by the top-level runners.\n */\nexport async function buildRfqmServicesAsync(\n    asWorker: boolean,\n    rfqmDbUtils: RfqmDbUtils,\n    rfqMakerDbUtils: RfqMakerDbUtils,\n    chainConfigurations: ChainConfigurations,\n    tokenPriceOracle: TokenPriceOracle,\n    configManager: ConfigManager = new ConfigManager(),\n    redis: Redis,\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n    // eslint-disable-next-line @typescript-eslint/no-inferrable-types\n    _workerIndex: number = 0,\n): Promise<RfqmServices> {\n    const services = await Promise.all(\n        chainConfigurations.map(async (chain) => {\n            const rfqMakerManager = new RfqMakerManager(configManager, rfqMakerDbUtils, chain.chainId);\n            await rfqMakerManager.initializeAsync();\n            return buildRfqmServiceAsync(rfqmDbUtils, rfqMakerManager, tokenPriceOracle, configManager, chain, redis);\n        }),\n    );\n    return new Map(services.map((s, i) => [chainConfigurations[i].chainId, s]));\n}\n"],"version":3}