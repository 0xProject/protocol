{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfq_blockchain_utils.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfq_blockchain_utils.ts"],"sourcesContent":["// tslint:disable:max-file-line-count\r\n\r\nimport { ChainId } from '@0x/contract-addresses';\r\nimport { IZeroExOtcOrderFilledEventArgs, IZeroExRfqOrderFilledEventArgs } from '@0x/contract-wrappers';\r\nimport { IZeroExContract } from '@0x/contracts-zero-ex';\r\nimport { MetaTransaction, OtcOrder, RfqOrder, Signature } from '@0x/protocol-utils';\r\nimport { PrivateKeyWalletSubprovider, SupportedProvider, Web3ProviderEngine } from '@0x/subproviders';\r\nimport { AbiDecoder, BigNumber, providerUtils } from '@0x/utils';\r\nimport { HDNode } from '@ethersproject/hdnode';\r\nimport { AccessList } from '@ethersproject/transactions';\r\nimport { CallData, LogEntry, LogWithDecodedArgs, TxAccessList, TxData } from 'ethereum-types';\r\nimport { BigNumber as EthersBigNumber, constants, Contract, providers, utils, Wallet } from 'ethers';\r\nimport { resolveProperties } from 'ethers/lib/utils';\r\n\r\nimport { abis } from '../abis';\r\nimport {\r\n    EXECUTE_META_TRANSACTION_EIP_712_TYPES,\r\n    NULL_ADDRESS,\r\n    ONE_MINUTE_MS,\r\n    ONE_SECOND_MS,\r\n    PERMIT_EIP_712_TYPES,\r\n    RFQM_TX_GAS_ESTIMATE,\r\n    ZERO,\r\n    ZEROG_METATX_GAS_ESTIMATE,\r\n} from '../core/constants';\r\nimport { EIP_712_REGISTRY } from '../eip712registry';\r\nimport { logger } from '../logger';\r\nimport {\r\n    Approval,\r\n    ERC20Owner,\r\n    ExecuteMetaTransactionApproval,\r\n    GaslessApprovalTypes,\r\n    PermitApproval,\r\n} from '../core/types';\r\n\r\nimport { splitAddresses } from './address_utils';\r\nimport { BalanceChecker } from './balance_checker';\r\nimport { extractEIP712DomainType } from './Eip712Utils';\r\nimport { isWorkerReadyAndAbleAsync } from './rfqm_worker_balance_utils';\r\nimport { serviceUtils } from './service_utils';\r\nimport { SubproviderAdapter } from './subprovider_adapter';\r\n\r\n// allow a wide range for gas price for flexibility\r\nconst MIN_GAS_PRICE = new BigNumber(0);\r\n// 10K Gwei\r\nconst MAX_GAS_PRICE = new BigNumber(1e13);\r\nconst RFQ_ORDER_FILLED_EVENT_TOPIC0 = '0x829fa99d94dc4636925b38632e625736a614c154d55006b7ab6bea979c210c32';\r\nconst OTC_ORDER_FILLED_EVENT_TOPIC0 = '0xac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f';\r\nconst ZERO_EX_FILL_EVENT_ABI = [\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            { indexed: false, internalType: 'bytes32', name: 'orderHash', type: 'bytes32' },\r\n            { indexed: false, internalType: 'address', name: 'maker', type: 'address' },\r\n            { indexed: false, internalType: 'address', name: 'taker', type: 'address' },\r\n            { indexed: false, internalType: 'address', name: 'makerToken', type: 'address' },\r\n            { indexed: false, internalType: 'address', name: 'takerToken', type: 'address' },\r\n            { indexed: false, internalType: 'uint128', name: 'takerTokenFilledAmount', type: 'uint128' },\r\n            { indexed: false, internalType: 'uint128', name: 'makerTokenFilledAmount', type: 'uint128' },\r\n            { indexed: false, internalType: 'bytes32', name: 'pool', type: 'bytes32' },\r\n        ],\r\n        name: 'RfqOrderFilled',\r\n        type: 'event',\r\n    },\r\n    {\r\n        anonymous: false,\r\n        inputs: [\r\n            { indexed: false, internalType: 'bytes32', name: 'orderHash', type: 'bytes32' },\r\n            { indexed: false, internalType: 'address', name: 'maker', type: 'address' },\r\n            { indexed: false, internalType: 'address', name: 'taker', type: 'address' },\r\n            { indexed: false, internalType: 'address', name: 'makerToken', type: 'address' },\r\n            { indexed: false, internalType: 'address', name: 'takerToken', type: 'address' },\r\n            { indexed: false, internalType: 'uint128', name: 'makerTokenFilledAmount', type: 'uint128' },\r\n            { indexed: false, internalType: 'uint128', name: 'takerTokenFilledAmount', type: 'uint128' },\r\n        ],\r\n        name: 'OtcOrderFilled',\r\n        type: 'event',\r\n    },\r\n];\r\n\r\nfunction toBigNumber(ethersBigNumber: EthersBigNumber): BigNumber {\r\n    return new BigNumber(ethersBigNumber.toString());\r\n}\r\n\r\nexport class RfqBlockchainUtils {\r\n    public readonly balanceCheckUtils: RfqBalanceCheckUtils;\r\n\r\n    private readonly _exchangeProxy: IZeroExContract;\r\n    private readonly _abiDecoder: AbiDecoder;\r\n    // An ethers.js provider.\r\n    private readonly _ethersProvider: providers.JsonRpcProvider;\r\n    // An ethers.js Wallet. Must be populated for RfqBlockchainUtils instances used by RFQM Workers.\r\n    private readonly _ethersWallet: Wallet | undefined;\r\n\r\n    public static getPrivateKeyFromIndexAndPhrase(mnemonic: string, index: number): string {\r\n        const hdNode = HDNode.fromMnemonic(mnemonic).derivePath(this._getPathByIndex(index));\r\n\r\n        // take '0x' off\r\n        return hdNode.privateKey.substring(2);\r\n    }\r\n\r\n    public static getAddressFromIndexAndPhrase(mnemonic: string, index: number): string {\r\n        const hdNode = HDNode.fromMnemonic(mnemonic).derivePath(this._getPathByIndex(index));\r\n\r\n        return hdNode.address;\r\n    }\r\n\r\n    public static createPrivateKeyProvider(\r\n        rpcProvider: SupportedProvider,\r\n        privateWalletSubprovider: PrivateKeyWalletSubprovider,\r\n    ): SupportedProvider {\r\n        const providerEngine = new Web3ProviderEngine();\r\n        providerEngine.addProvider(privateWalletSubprovider);\r\n        providerEngine.addProvider(new SubproviderAdapter(rpcProvider));\r\n        providerUtils.startProviderEngine(providerEngine);\r\n        return providerEngine;\r\n    }\r\n\r\n    // tslint:disable-next-line:prefer-function-over-method\r\n    private static _getPathByIndex(index: number): string {\r\n        // ensure index is a 0+ integer\r\n        if (index < 0 || index !== Math.floor(index)) {\r\n            throw new Error(`invalid index`);\r\n        }\r\n        return `m/44'/60'/0'/0/`.concat(String(index));\r\n    }\r\n\r\n    constructor(\r\n        provider: SupportedProvider,\r\n        private readonly _exchangeProxyAddress: string,\r\n        balanceChecker: BalanceChecker,\r\n        ethersProvider: providers.JsonRpcProvider,\r\n        ethersWallet?: Wallet,\r\n    ) {\r\n        this._abiDecoder = new AbiDecoder([ZERO_EX_FILL_EVENT_ABI]);\r\n        this.balanceCheckUtils = new RfqBalanceCheckUtils(balanceChecker, _exchangeProxyAddress);\r\n        this._ethersProvider = ethersProvider;\r\n        this._ethersWallet = ethersWallet;\r\n        this._exchangeProxy = new IZeroExContract(this._exchangeProxyAddress, provider);\r\n    }\r\n\r\n    /**\r\n     * Fetches min value between balance for a list of addresses against the specified tokens. The index of\r\n     * an address in `addresses` must correspond with the index of a token in `tokens`.\r\n     */\r\n    public async getMinOfBalancesAndAllowancesAsync(erc20Owners: ERC20Owner | ERC20Owner[]): Promise<BigNumber[]> {\r\n        return this.balanceCheckUtils.getMinOfBalancesAndAllowancesAsync(erc20Owners);\r\n    }\r\n\r\n    /**\r\n     * Fetches the balances for a list of addresses against the specified tokens. The index of\r\n     * an address in `addresses` must correspond with the index of a token in `tokens`.\r\n     */\r\n    public async getTokenBalancesAsync(erc20Owners: ERC20Owner | ERC20Owner[]): Promise<BigNumber[]> {\r\n        return this.balanceCheckUtils.getTokenBalancesAsync(erc20Owners);\r\n    }\r\n\r\n    // for use when 0x API operator submits an order on-chain on behalf of taker\r\n    public generateMetaTransaction(\r\n        rfqOrder: RfqOrder,\r\n        signature: Signature,\r\n        taker: string,\r\n        takerAmount: BigNumber,\r\n        chainId: ChainId,\r\n    ): MetaTransaction {\r\n        // generate call data for fillRfqOrder\r\n        const callData = this._exchangeProxy\r\n            .fillRfqOrder(rfqOrder, signature, takerAmount)\r\n            .getABIEncodedTransactionData();\r\n\r\n        return new MetaTransaction({\r\n            signer: taker,\r\n            sender: NULL_ADDRESS,\r\n            minGasPrice: MIN_GAS_PRICE,\r\n            maxGasPrice: MAX_GAS_PRICE,\r\n            expirationTimeSeconds: rfqOrder.expiry,\r\n            salt: new BigNumber(Date.now()),\r\n            callData,\r\n            value: ZERO,\r\n            feeToken: NULL_ADDRESS,\r\n            feeAmount: ZERO,\r\n            chainId,\r\n            verifyingContract: this._exchangeProxy.address,\r\n        });\r\n    }\r\n\r\n    public async decodeMetaTransactionCallDataAndValidateAsync(\r\n        calldata: string,\r\n        sender: string,\r\n        txOptions?: Partial<CallData>,\r\n    ): Promise<[BigNumber, BigNumber]> {\r\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        const metaTxInput: any = this._exchangeProxy.getABIDecodedTransactionData('executeMetaTransaction', calldata);\r\n        return this.validateMetaTransactionOrThrowAsync(metaTxInput[0], metaTxInput[1], sender, txOptions);\r\n    }\r\n\r\n    /**\r\n     * Validates a metatransaction and its signature for a given sender\r\n     *\r\n     * @returns a Promise of [takerTokenFilledAmount, makerTokenFilledAmount]\r\n     * @throws an error if the metatransaction is not valid\r\n     */\r\n    public async validateMetaTransactionOrThrowAsync(\r\n        metaTx: MetaTransaction,\r\n        metaTxSig: Signature,\r\n        sender: string,\r\n        txOptions?: Partial<CallData>,\r\n    ): Promise<[BigNumber, BigNumber]> {\r\n        try {\r\n            const results = await this._exchangeProxy\r\n                .executeMetaTransaction(metaTx, metaTxSig)\r\n                .callAsync({ from: sender, ...txOptions });\r\n            const takerTokenFillAmount = // $eslint-fix-me github.com/rhinodavid/eslint-fix-me\r\n                /* eslint-disable @typescript-eslint/no-explicit-any */\r\n                (\r\n                    this._exchangeProxy.getABIDecodedTransactionData('fillRfqOrder', metaTx.callData) as any\r\n                ) /* eslint-enable @typescript-eslint/no-explicit-any */[2];\r\n            const decodedResults: [BigNumber, BigNumber] = this._exchangeProxy.getABIDecodedReturnData(\r\n                'fillRfqOrder',\r\n                results,\r\n            );\r\n            if (decodedResults[0].isLessThan(takerTokenFillAmount)) {\r\n                logger.error('validation failed because filled amount is less than requested fill amount');\r\n                throw new Error(`filled amount is less than requested fill amount`);\r\n            }\r\n            return decodedResults;\r\n        } catch (err) {\r\n            logger.error({ errorMessage: err?.message }, 'eth_call validation failed for executeMetaTransaction');\r\n            throw new Error(err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Simulate the transaction with calldata.\r\n     *\r\n     * NOTE: In ethers.js, provider.call and provider.send('eth_call', ...) might not throw exception.\r\n     *       The behavior might be dependent on providers. Revisit this later.\r\n     */\r\n    public async simulateTransactionAsync(to: string, calldata: string): Promise<void> {\r\n        try {\r\n            await this._ethersProvider.call({\r\n                to,\r\n                data: calldata,\r\n            });\r\n        } catch (e) {\r\n            if (e instanceof Error) {\r\n                e.message = `simulateTransactionAsync: ${e.message}`;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Estimate the gas for fillTakerSignedOtcOrder and fillTakerSignedOtcOrderForEth\r\n     * NOTE: can also be used for validation\r\n     *\r\n     * @returns a Promise of the gas estimate\r\n     * @throws an error if transaction will revert\r\n     */\r\n    public async estimateGasForFillTakerSignedOtcOrderAsync(\r\n        order: OtcOrder,\r\n        makerSignature: Signature,\r\n        takerSignature: Signature,\r\n        sender: string,\r\n        isUnwrap: boolean,\r\n    ): Promise<number> {\r\n        try {\r\n            if (isUnwrap) {\r\n                return await this._exchangeProxy\r\n                    .fillTakerSignedOtcOrderForEth(order, makerSignature, takerSignature)\r\n                    .estimateGasAsync({ from: sender });\r\n            } else {\r\n                return await this._exchangeProxy\r\n                    .fillTakerSignedOtcOrder(order, makerSignature, takerSignature)\r\n                    .estimateGasAsync({ from: sender });\r\n            }\r\n        } catch (err) {\r\n            logger.error(\r\n                {\r\n                    orderHash: order.getHash(),\r\n                    maker: order.maker,\r\n                    taker: order.taker,\r\n                    isUnwrap,\r\n                    errorMessage: err?.message,\r\n                },\r\n                'validation failed for taker signed OtcOrder',\r\n            );\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates calldata for Taker Signed OtcOrder settlement\r\n     */\r\n    public generateTakerSignedOtcOrderCallData(\r\n        order: OtcOrder,\r\n        makerSignature: Signature,\r\n        takerSignature: Signature,\r\n        isUnwrap: boolean,\r\n        affiliateAddress: string | null,\r\n    ): string {\r\n        const callData = isUnwrap\r\n            ? this._exchangeProxy\r\n                  .fillTakerSignedOtcOrderForEth(order, makerSignature, takerSignature)\r\n                  .getABIEncodedTransactionData()\r\n            : this._exchangeProxy\r\n                  .fillTakerSignedOtcOrder(order, makerSignature, takerSignature)\r\n                  .getABIEncodedTransactionData();\r\n        return serviceUtils.attributeCallData(callData, affiliateAddress).affiliatedData;\r\n    }\r\n\r\n    public generateMetaTransactionCallData(\r\n        metaTx: MetaTransaction,\r\n        metaTxSig: Signature,\r\n        affiliateAddress: string | null,\r\n    ): string {\r\n        const callData = this._exchangeProxy.executeMetaTransaction(metaTx, metaTxSig).getABIEncodedTransactionData();\r\n        return serviceUtils.attributeCallData(callData, affiliateAddress).affiliatedData;\r\n    }\r\n\r\n    public async getNonceAsync(workerAddress: string): Promise<number> {\r\n        return this._ethersProvider.getTransactionCount(workerAddress);\r\n    }\r\n\r\n    public getExchangeProxyAddress(): string {\r\n        return this._exchangeProxyAddress;\r\n    }\r\n\r\n    /**\r\n     * Returns the transaction receipts for the given transaction hashes.\r\n     * If a receipt does not exist, returns `undefined`.\r\n     */\r\n    public async getReceiptsAsync(transactionHashes: string[]): Promise<(providers.TransactionReceipt | undefined)[]> {\r\n        return Promise.all(\r\n            transactionHashes.map(async (transactionHash) =>\r\n                this._ethersProvider.getTransactionReceipt(transactionHash),\r\n            ),\r\n        );\r\n    }\r\n\r\n    public async getCurrentBlockAsync(): Promise<number> {\r\n        return this._ethersProvider.getBlockNumber();\r\n    }\r\n\r\n    // Fetches a block from the block number or block hash\r\n    public async getBlockAsync(blockHash: providers.BlockTag): Promise<providers.Block> {\r\n        return this._ethersProvider.getBlock(blockHash);\r\n    }\r\n\r\n    /**\r\n     * Passthrough to the ethers `getTransaction` function\r\n     * https://docs.ethers.io/v5/api/providers/provider/#Provider-getTransaction:\r\n     *\r\n     * Returns the transaction with hash or null if the transaction is unknown.\r\n     * If a transaction has not been mined, this method will search the transaction pool.\r\n     * Various backends may have more restrictive transaction pool access\r\n     * (e.g. if the gas price is too low or the transaction was only recently sent and not yet indexed)\r\n     * in which case this method may also return null.\r\n     */\r\n    public async getTransactionAsync(transactionHash: string): Promise<providers.TransactionResponse | null> {\r\n        return this._ethersProvider.getTransaction(transactionHash);\r\n    }\r\n\r\n    /**\r\n     * Estimate gas (in wei) given a transaction request using `eth_estimateGas` JSON RPC method.\r\n     * The transaction request contains information related to the transaction (from, to, data, etc.).\r\n     *\r\n     * @param transactionRequest Transaction request object which contains information about the transaction.\r\n     * @returns The gas estimate for the transaction in wei.\r\n     */\r\n    public async estimateGasForAsync(transactionRequest: providers.TransactionRequest): Promise<number> {\r\n        try {\r\n            const gasEstimate = await this._ethersProvider.estimateGas(transactionRequest);\r\n            return gasEstimate.toNumber();\r\n        } catch (e) {\r\n            if (e instanceof Error) {\r\n                e.message = `estimateGasForAsync: ${e.message}`;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the access list and the gas estimation given a transaction request. Uses the provider\r\n     * to call the `eth_createAccessList` JSON RPC method.\r\n     *\r\n     * The transaction request contains information related to the transaction (from, to, data, etc.).\r\n     * Note that the implementation is similar to the one in @0x/web3-wrapper. This repo is\r\n     * migrating away from web3-wrapper in favor of ethers. The original implementation in\r\n     * web3-wrapper:\r\n     * https://github.com/0xProject/tools/blob/development/web3-wrapper/src/web3_wrapper.ts#L591\r\n     *\r\n     * @param transactionRequest Transaction request object which contains information about the transaction.\r\n     * @returns A TxAccessListWithGas object which contains access list and gas estimation for the transaction.\r\n     */\r\n    public async createAccessListForAsync(\r\n        transactionRequest: providers.TransactionRequest,\r\n    ): Promise<{ accessList: TxAccessList; gasEstimate: number }> {\r\n        try {\r\n            const rawResult = await this._ethersProvider.send('eth_createAccessList', [transactionRequest]);\r\n            const accessList: AccessList = rawResult.accessList;\r\n            const gasUsed: string = rawResult.gasUsed;\r\n\r\n            return {\r\n                // The type for `accessList` is `AccessList` (Array<{ address: string, storageKeys: Array<string> }>).\r\n                // The reduce operation is used to transform the array into type `TxAccessList` ([address: string]: string[]) whose keys\r\n                // are addresses and values are corresponding storage keys. This is useful if we need to remove an address from the object.\r\n                accessList: accessList.reduce((o: TxAccessList, v: { address: string; storageKeys: string[] }) => {\r\n                    o[v.address] = o[v.address] || [];\r\n                    o[v.address].push(...(v.storageKeys || []));\r\n                    return o;\r\n                }, {}),\r\n                gasEstimate: new BigNumber(gasUsed).toNumber(),\r\n            };\r\n        } catch (e) {\r\n            if (e instanceof Error) {\r\n                e.message = `createAccessListForAsync: ${e.message}`;\r\n            }\r\n\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public getDecodedRfqOrderFillEventLogFromLogs(\r\n        logs: LogEntry[],\r\n    ): LogWithDecodedArgs<IZeroExRfqOrderFilledEventArgs> {\r\n        for (const log of logs) {\r\n            if (log.topics[0] === RFQ_ORDER_FILLED_EVENT_TOPIC0) {\r\n                return this._abiDecoder.tryToDecodeLogOrNoop(log) as LogWithDecodedArgs<IZeroExRfqOrderFilledEventArgs>;\r\n            }\r\n        }\r\n        throw new Error(\r\n            `no RfqOrderFilledEvent logs among the logs passed into getDecodedRfqOrderFillEventLogFromLogs`,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Decode the OtcOrder Filled Event\r\n     */\r\n    public getDecodedOtcOrderFillEventLogFromLogs(\r\n        logs: LogEntry[],\r\n    ): LogWithDecodedArgs<IZeroExOtcOrderFilledEventArgs> {\r\n        for (const log of logs) {\r\n            if (log.topics[0] === OTC_ORDER_FILLED_EVENT_TOPIC0) {\r\n                return this._abiDecoder.tryToDecodeLogOrNoop(log) as LogWithDecodedArgs<IZeroExRfqOrderFilledEventArgs>;\r\n            }\r\n        }\r\n        throw new Error(\r\n            `no OtcOrderFilledEvent logs among the logs passed into getDecodedOtcOrderFillEventLogFromLogs`,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Broadcasts a raw transaction via the `eth_sendRawTransaction` JSON RPC method.\r\n     * The transaction must be signed by this point, otherwise submission will fail.\r\n     *\r\n     * @returns The transaction hash returned by the RPC provider.\r\n     */\r\n    public async submitSignedTransactionAsync(signedTransaction: string): Promise<string> {\r\n        const response = await this._ethersProvider.sendTransaction(signedTransaction);\r\n        return response.hash;\r\n    }\r\n\r\n    public async getAccountBalanceAsync(accountAddress: string): Promise<BigNumber> {\r\n        return this._ethersProvider.getBalance(accountAddress).then((r) => toBigNumber(r));\r\n    }\r\n\r\n    /**\r\n     * Check if a worker is ready to pick up a new job:\r\n     * - the worker has enough balance\r\n     * - the worker has no pending transactions\r\n     *\r\n     * @param chainId Id of the chain.\r\n     * @param workerAddress Address of the worker to check.\r\n     * @param balance Balance of the worker to check.\r\n     * @param gasPrice Current gas price.\r\n     * @returns True if a worker is ready to pick up a new job and false otherwise.\r\n     */\r\n    public async isWorkerReadyAsync(\r\n        chainId: ChainId,\r\n        workerAddress: string,\r\n        balance: BigNumber,\r\n        gasPrice: BigNumber,\r\n    ): Promise<boolean> {\r\n        let gasEstimate;\r\n        switch (chainId) {\r\n            case ChainId.Polygon:\r\n                gasEstimate = ZEROG_METATX_GAS_ESTIMATE;\r\n                break;\r\n            default:\r\n                gasEstimate = RFQM_TX_GAS_ESTIMATE;\r\n                break;\r\n        }\r\n\r\n        return isWorkerReadyAndAbleAsync(this._ethersProvider, workerAddress, balance, gasPrice, gasEstimate);\r\n    }\r\n\r\n    /**\r\n     * Converts a @0x/web3-wrapper `TxData` object into an Ethers `TransactionRequest`.\r\n     *\r\n     * If the `from` address is not present in the `TxData`, the function uses the address\r\n     * of the Ethers Wallet passed to `rfqBlockchainUtils`\r\n     *\r\n     * If the `to` address is not present, the function uses the exchange proxy address.\r\n     */\r\n    public transformTxDataToTransactionRequest(\r\n        txOptions: Partial<TxData>,\r\n        chainId?: ChainId,\r\n        callData?: utils.BytesLike,\r\n    ): providers.TransactionRequest {\r\n        const baseRequest = {\r\n            chainId,\r\n            data: callData,\r\n            from: txOptions.from,\r\n            // web3wrappers \"gas\" field -> ethers \"gasLimit\" field\r\n            gasLimit: txOptions.gas instanceof BigNumber ? BigInt(txOptions.gas.toString()) : txOptions.gas,\r\n            nonce: txOptions.nonce,\r\n            to: txOptions.to || this._exchangeProxy.address,\r\n            value: txOptions.value instanceof BigNumber ? txOptions.value.toString() : txOptions.value,\r\n        };\r\n\r\n        // Handle Type 0 (Legacy) Tx\r\n        if (txOptions.gasPrice) {\r\n            return {\r\n                ...baseRequest,\r\n                type: 0,\r\n                gasPrice: txOptions.gasPrice instanceof BigNumber ? txOptions.gasPrice.toString() : txOptions.gasPrice,\r\n            };\r\n        }\r\n\r\n        // Handle Type 2 (EIP-1559) Tx\r\n        return {\r\n            ...baseRequest,\r\n            type: 2,\r\n            maxFeePerGas:\r\n                txOptions.maxFeePerGas instanceof BigNumber\r\n                    ? BigInt(txOptions.maxFeePerGas.toString())\r\n                    : txOptions.maxFeePerGas,\r\n            maxPriorityFeePerGas:\r\n                txOptions.maxPriorityFeePerGas instanceof BigNumber\r\n                    ? BigInt(txOptions.maxPriorityFeePerGas.toString())\r\n                    : txOptions.maxPriorityFeePerGas,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Uses the Ethers Wallet to sign a transaction. Returns both the signed transaction and its hash.\r\n     *\r\n     * If the containing class has been initialized without a wallet, the function throws.\r\n     */\r\n    public async signTransactionAsync(\r\n        transaction: providers.TransactionRequest,\r\n    ): Promise<{ signedTransaction: string; transactionHash: string }> {\r\n        if (!this._ethersWallet) {\r\n            throw new Error(\r\n                'RFQ Blockchain Utils must be initialized with an Ethers Wallet in order to get transaction hashes before submitting',\r\n            );\r\n        }\r\n\r\n        const checkedRequest = await resolveProperties(this._ethersWallet.checkTransaction(transaction));\r\n        const signedTransaction = await this._ethersWallet.signTransaction(checkedRequest);\r\n        const hash = utils.keccak256(signedTransaction);\r\n        return { signedTransaction, transactionHash: hash };\r\n    }\r\n\r\n    public async getTokenDecimalsAsync(tokenAddress: string): Promise<number> {\r\n        const erc20AbiDecimals = `[{\r\n            \"constant\": true,\r\n            \"inputs\": [],\r\n            \"name\": \"decimals\",\r\n            \"outputs\": [\r\n                {\r\n                    \"name\": \"\",\r\n                    \"type\": \"uint8\"\r\n                }\r\n            ],\r\n            \"payable\": false,\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        }]`;\r\n        const tokenContract = new Contract(tokenAddress, erc20AbiDecimals, this._ethersProvider);\r\n        const decimals = await tokenContract.decimals();\r\n        if (typeof decimals !== 'number') {\r\n            throw new Error('Decimals was not a number');\r\n        }\r\n        return decimals;\r\n    }\r\n\r\n    /**\r\n     * Calls the 0x Exchange Proxy to add an address to the list of allowed order signers for the msg's sender.\r\n     */\r\n    public async registerAllowedOrderSignerAsync(\r\n        from: string,\r\n        signerAddress: string,\r\n        isAllowed: boolean,\r\n    ): Promise<void> {\r\n        // tslint:disable-next-line: await-promise\r\n        await this._exchangeProxy\r\n            .registerAllowedOrderSigner(signerAddress, isAllowed)\r\n            .awaitTransactionSuccessAsync({ from });\r\n    }\r\n\r\n    /**\r\n     * Returns whether the signer address is an allowed order signer of the maker.\r\n     */\r\n    public async isValidOrderSignerAsync(makerAddress: string, signerAddress: string): Promise<boolean> {\r\n        return this._exchangeProxy.isValidOrderSigner(makerAddress, signerAddress).callAsync();\r\n    }\r\n\r\n    /**\r\n     * Get the gasless approval object which encapsulates the EIP-712 context that would be signed by the `takerAddress`\r\n     * for gasless approval. The two main schemes for gasless approvals are `executeMetaTransaction` and `permit`.\r\n     *\r\n     * @param chainId Id of the chain.\r\n     * @param token The address of the token.\r\n     * @param takerAddress The address of the taker.\r\n     * @param nowMs optional - the current timestamp in milliseconds\r\n     * @returns The corresponding gasless approval oject or null if the token does not support gasless approval (does not exist in our EIP-712 token registry).\r\n     */\r\n    public async getGaslessApprovalAsync(\r\n        chainId: number,\r\n        token: string,\r\n        takerAddress: string,\r\n        nowMs: number = Date.now(),\r\n    ): Promise<Approval | null> {\r\n        // If the token does not exist in the token registry, return null\r\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n        // eslint-disable-next-line no-prototype-builtins\r\n        if (!EIP_712_REGISTRY.hasOwnProperty(chainId) || !EIP_712_REGISTRY[chainId].hasOwnProperty(token)) {\r\n            return null;\r\n        }\r\n\r\n        const tokenEIP712 = EIP_712_REGISTRY[chainId][token];\r\n        const eip712DomainType = extractEIP712DomainType(tokenEIP712.domain);\r\n        switch (tokenEIP712.kind) {\r\n            case GaslessApprovalTypes.ExecuteMetaTransaction: {\r\n                const nonce = await this.getMetaTransactionNonceAsync(token, takerAddress);\r\n                // generate calldata for approve with max number of uint256 as amount\r\n                const erc20 = new Contract(token, abis.polygonBridgedERC20, this._ethersProvider);\r\n                const { data: approveCalldata } = await erc20.populateTransaction.approve(\r\n                    this._exchangeProxyAddress,\r\n                    constants.MaxUint256,\r\n                );\r\n\r\n                const executeMetaTransactionApproval: ExecuteMetaTransactionApproval = {\r\n                    kind: GaslessApprovalTypes.ExecuteMetaTransaction,\r\n                    eip712: {\r\n                        types: {\r\n                            ...eip712DomainType,\r\n                            ...EXECUTE_META_TRANSACTION_EIP_712_TYPES,\r\n                        },\r\n                        primaryType: 'MetaTransaction',\r\n                        domain: tokenEIP712.domain,\r\n                        message: {\r\n                            nonce: nonce.toNumber(),\r\n                            from: takerAddress,\r\n                            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                            functionSignature: approveCalldata!,\r\n                        },\r\n                    },\r\n                };\r\n\r\n                return executeMetaTransactionApproval;\r\n            }\r\n            case GaslessApprovalTypes.Permit: {\r\n                const nonce = await this.getPermitNonceAsync(token, takerAddress);\r\n                const tenMinutesAfterNowS = new BigNumber(nowMs + ONE_MINUTE_MS * 10).div(ONE_SECOND_MS).integerValue();\r\n                const permitApproval: PermitApproval = {\r\n                    kind: GaslessApprovalTypes.Permit,\r\n                    eip712: {\r\n                        types: {\r\n                            ...eip712DomainType,\r\n                            ...PERMIT_EIP_712_TYPES,\r\n                        },\r\n                        primaryType: 'Permit',\r\n                        domain: tokenEIP712.domain,\r\n                        message: {\r\n                            owner: takerAddress,\r\n                            spender: this._exchangeProxyAddress,\r\n                            value: constants.MaxUint256.toString(),\r\n                            nonce: nonce.toNumber(),\r\n                            deadline: tenMinutesAfterNowS.toString(),\r\n                        },\r\n                    },\r\n                };\r\n\r\n                return permitApproval;\r\n            }\r\n            default:\r\n                throw new Error(`Gasless approval kind ${tokenEIP712.kind} is not implemented yet`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the amount (in base unit) of `token` `spender` will be allowed to spend on behalf on `owner` (the allowance). Note that\r\n     * base unit means 10 ** decimals (decimals of the token).\r\n     *\r\n     * @param token The address of the token.\r\n     * @param owner The address that owns certain amount of `token`.\r\n     * @param spender The address that would like to spend token on behalf of `owner`.\r\n     * @returns The amount (in base unit) of tokens spender is allowed to spend.\r\n     */\r\n    public async getAllowanceAsync(token: string, owner: string, spender: string): Promise<BigNumber> {\r\n        const erc20 = new Contract(token, abis.polygonBridgedERC20, this._ethersProvider);\r\n        const allowance = await erc20.allowance(owner, spender);\r\n        return new BigNumber(allowance.toString());\r\n    }\r\n\r\n    /**\r\n     * Get nonce for meta transaction. This is used by contracts that support Biconomy's `executeMetaTransaction` which includes bridged tokens on Polygon.\r\n     *\r\n     * @param token The address of the token.\r\n     * @param takerAddress The address of the taker.\r\n     * @returns Nonce.\r\n     */\r\n    public async getMetaTransactionNonceAsync(token: string, takerAddress: string): Promise<BigNumber> {\r\n        const erc20 = new Contract(token, abis.polygonBridgedERC20, this._ethersProvider);\r\n        const nonce = await erc20.getNonce(takerAddress);\r\n        return new BigNumber(nonce.toString());\r\n    }\r\n\r\n    /**\r\n     * Get permit nonce, which is used by contracts that support EIP-2612 standards.\r\n     *\r\n     * @param token The address of the token.\r\n     * @param takerAddress The address of the taker.\r\n     * @returns Nonce.\r\n     */\r\n    public async getPermitNonceAsync(token: string, takerAddress: string): Promise<BigNumber> {\r\n        const erc20 = new Contract(token, abis.permitERC20, this._ethersProvider);\r\n        const nonce = await erc20.nonces(takerAddress);\r\n        return new BigNumber(nonce.toString());\r\n    }\r\n\r\n    /**\r\n     * Generates calldata for gasless approval submission.\r\n     *\r\n     * @param token The address of the token.\r\n     * @param approval The Approval object, which consists of 'kind' and eip712 object.\r\n     * @param signature The gasless approval transaction signed by taker.\r\n     * @returns Generated calldata.\r\n     */\r\n    public async generateApprovalCalldataAsync(\r\n        token: string,\r\n        approval: Approval,\r\n        signature: Signature,\r\n    ): Promise<string> {\r\n        const { kind, eip712 } = approval;\r\n        switch (kind) {\r\n            case GaslessApprovalTypes.ExecuteMetaTransaction: {\r\n                const erc20 = new Contract(token, abis.polygonBridgedERC20, this._ethersProvider);\r\n                const { data } = await erc20.populateTransaction.executeMetaTransaction(\r\n                    eip712.message.from,\r\n                    eip712.message.functionSignature,\r\n                    signature.r,\r\n                    signature.s,\r\n                    signature.v,\r\n                );\r\n                if (!data) {\r\n                    throw new Error(`Cannot generate approval submission calldata for ${kind}`);\r\n                }\r\n                return data;\r\n            }\r\n            case GaslessApprovalTypes.Permit: {\r\n                const erc20 = new Contract(token, abis.permitERC20, this._ethersProvider);\r\n                const { data } = await erc20.populateTransaction.permit(\r\n                    eip712.message.owner,\r\n                    eip712.message.spender,\r\n                    eip712.message.value,\r\n                    eip712.message.deadline,\r\n                    signature.v,\r\n                    signature.r,\r\n                    signature.s,\r\n                );\r\n                if (!data) {\r\n                    throw new Error(`Cannot generate approval submission calldata for ${kind}`);\r\n                }\r\n                return data;\r\n            }\r\n            default:\r\n                throw new Error(`Gasless approval kind ${kind} is not implemented yet`);\r\n        }\r\n    }\r\n}\r\n\r\nexport class RfqBalanceCheckUtils {\r\n    constructor(private readonly _balanceChecker: BalanceChecker, private readonly _exchangeProxyAddress: string) {}\r\n\r\n    /**\r\n     * Fetches min value between balance for a list of addresses against the specified tokens. The index of\r\n     * an address in `addresses` must correspond with the index of a token in `tokens`.\r\n     */\r\n    public async getMinOfBalancesAndAllowancesAsync(erc20Owners: ERC20Owner | ERC20Owner[]): Promise<BigNumber[]> {\r\n        const { owners, tokens } = splitAddresses(erc20Owners);\r\n        return this._balanceChecker.getMinOfBalancesAndAllowancesAsync(owners, tokens, this._exchangeProxyAddress);\r\n    }\r\n\r\n    /**\r\n     * Fetches the balances for a list of addresses against the specified tokens. The index of\r\n     * an address in `addresses` must correspond with the index of a token in `tokens`.\r\n     */\r\n    public async getTokenBalancesAsync(erc20Owners: ERC20Owner | ERC20Owner[]): Promise<BigNumber[]> {\r\n        const { owners, tokens } = splitAddresses(erc20Owners);\r\n        return this._balanceChecker.getTokenBalancesAsync(owners, tokens);\r\n    }\r\n}\r\n"],"version":3}