ce0a3d8a4326fa84696704b092e5d281
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqAdminService = void 0;
const utils_1 = require("@0x/utils");
const constants_1 = require("../core/constants");
const types_1 = require("../entities/types");
const logger_1 = require("../logger");
/**
 * RfqAdminService is the coordination layer for admin HTTP services.
 * It currently uses the admin API key for authentication, but
 * this can be replaced with a more sophisticated means of authentication.
 */
class RfqAdminService {
    constructor(_dbUtils) {
        this._dbUtils = _dbUtils;
    }
    /**
     * Cleans up pending jobs by manually setting the status to `FailedExpired`.
     * Ignores jobs not in a pending status.
     */
    async cleanupJobsAsync(orderHashes, now = new Date()) {
        const modifiedJobs = [];
        const unmodifiedJobs = [];
        const handleJob = async (orderHash) => {
            const job = await this._dbUtils.findV2JobByOrderHashAsync(orderHash);
            if (!job) {
                logger_1.logger.error({ orderHash }, `No job found for order hash`);
                unmodifiedJobs.push(orderHash);
                return;
            }
            if (!types_1.UnresolvedRfqmJobStatuses.includes(job.status)) {
                logger_1.logger.error({ orderHash, status: job.status }, 'Tried to clean up a resolved job');
                unmodifiedJobs.push(orderHash);
                return;
            }
            try {
                const { expiry } = job;
                const thirtySecondsPastExpiry = expiry.plus(new utils_1.BigNumber(30));
                const nowSeconds = new utils_1.BigNumber(now.getTime() / constants_1.ONE_SECOND_MS);
                if (nowSeconds.isGreaterThan(thirtySecondsPastExpiry)) {
                    job.status = types_1.RfqmJobStatus.FailedExpired;
                    await this._dbUtils.updateRfqmJobAsync(job);
                    logger_1.logger.info({ orderHash }, 'Job status manually updated to failure');
                    modifiedJobs.push(orderHash);
                }
                else {
                    logger_1.logger.error({ orderHash }, 'Tried to clean up an unexpired job');
                    unmodifiedJobs.push(orderHash);
                }
            }
            catch (error) {
                logger_1.logger.error({ orderHash }, 'Failed to clean up the job');
                unmodifiedJobs.push(orderHash);
            }
        };
        await Promise.all(orderHashes.map((h) => handleJob(h)));
        return {
            modifiedJobs,
            unmodifiedJobs,
        };
    }
}
exports.RfqAdminService = RfqAdminService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9zZXJ2aWNlcy9yZnFfYWRtaW5fc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBc0M7QUFFdEMsaURBQWtEO0FBQ2xELDZDQUE2RTtBQUM3RSxzQ0FBbUM7QUFLbkM7Ozs7R0FJRztBQUNILE1BQWEsZUFBZTtJQUN4QixZQUE2QixRQUFxQjtRQUFyQixhQUFRLEdBQVIsUUFBUSxDQUFhO0lBQUcsQ0FBQztJQUV0RDs7O09BR0c7SUFDSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsV0FBcUIsRUFBRSxNQUFZLElBQUksSUFBSSxFQUFFO1FBQ3ZFLE1BQU0sWUFBWSxHQUFhLEVBQUUsQ0FBQztRQUNsQyxNQUFNLGNBQWMsR0FBYSxFQUFFLENBQUM7UUFFcEMsTUFBTSxTQUFTLEdBQUcsS0FBSyxFQUFFLFNBQWlCLEVBQWlCLEVBQUU7WUFDekQsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRXJFLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ04sZUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLDZCQUE2QixDQUFDLENBQUM7Z0JBQzNELGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQy9CLE9BQU87YUFDVjtZQUVELElBQUksQ0FBQyxpQ0FBeUIsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUNqRCxlQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztnQkFDcEYsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDL0IsT0FBTzthQUNWO1lBRUQsSUFBSTtnQkFDQSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDO2dCQUN2QixNQUFNLHVCQUF1QixHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxpQkFBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQy9ELE1BQU0sVUFBVSxHQUFHLElBQUksaUJBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcseUJBQWEsQ0FBQyxDQUFDO2dCQUVoRSxJQUFJLFVBQVUsQ0FBQyxhQUFhLENBQUMsdUJBQXVCLENBQUMsRUFBRTtvQkFDbkQsR0FBRyxDQUFDLE1BQU0sR0FBRyxxQkFBYSxDQUFDLGFBQWEsQ0FBQztvQkFDekMsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUM1QyxlQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsd0NBQXdDLENBQUMsQ0FBQztvQkFDckUsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztpQkFDaEM7cUJBQU07b0JBQ0gsZUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLG9DQUFvQyxDQUFDLENBQUM7b0JBQ2xFLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7aUJBQ2xDO2FBQ0o7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDWixlQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztnQkFDMUQsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUNsQztRQUNMLENBQUMsQ0FBQztRQUVGLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXhELE9BQU87WUFDSCxZQUFZO1lBQ1osY0FBYztTQUNqQixDQUFDO0lBQ04sQ0FBQztDQUNKO0FBckRELDBDQXFEQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvc3JjL3NlcnZpY2VzL3JmcV9hZG1pbl9zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gJ0AweC91dGlscyc7XHJcblxyXG5pbXBvcnQgeyBPTkVfU0VDT05EX01TIH0gZnJvbSAnLi4vY29yZS9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBSZnFtSm9iU3RhdHVzLCBVbnJlc29sdmVkUmZxbUpvYlN0YXR1c2VzIH0gZnJvbSAnLi4vZW50aXRpZXMvdHlwZXMnO1xyXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi9sb2dnZXInO1xyXG5pbXBvcnQgeyBSZnFtRGJVdGlscyB9IGZyb20gJy4uL3V0aWxzL3JmcW1fZGJfdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgQ2xlYW51cEpvYnNSZXNwb25zZSB9IGZyb20gJy4vdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIFJmcUFkbWluU2VydmljZSBpcyB0aGUgY29vcmRpbmF0aW9uIGxheWVyIGZvciBhZG1pbiBIVFRQIHNlcnZpY2VzLlxyXG4gKiBJdCBjdXJyZW50bHkgdXNlcyB0aGUgYWRtaW4gQVBJIGtleSBmb3IgYXV0aGVudGljYXRpb24sIGJ1dFxyXG4gKiB0aGlzIGNhbiBiZSByZXBsYWNlZCB3aXRoIGEgbW9yZSBzb3BoaXN0aWNhdGVkIG1lYW5zIG9mIGF1dGhlbnRpY2F0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJmcUFkbWluU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9kYlV0aWxzOiBSZnFtRGJVdGlscykge31cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsZWFucyB1cCBwZW5kaW5nIGpvYnMgYnkgbWFudWFsbHkgc2V0dGluZyB0aGUgc3RhdHVzIHRvIGBGYWlsZWRFeHBpcmVkYC5cclxuICAgICAqIElnbm9yZXMgam9icyBub3QgaW4gYSBwZW5kaW5nIHN0YXR1cy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFzeW5jIGNsZWFudXBKb2JzQXN5bmMob3JkZXJIYXNoZXM6IHN0cmluZ1tdLCBub3c6IERhdGUgPSBuZXcgRGF0ZSgpKTogUHJvbWlzZTxDbGVhbnVwSm9ic1Jlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgbW9kaWZpZWRKb2JzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHVubW9kaWZpZWRKb2JzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICBjb25zdCBoYW5kbGVKb2IgPSBhc3luYyAob3JkZXJIYXNoOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+ID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgam9iID0gYXdhaXQgdGhpcy5fZGJVdGlscy5maW5kVjJKb2JCeU9yZGVySGFzaEFzeW5jKG9yZGVySGFzaCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWpvYikge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKHsgb3JkZXJIYXNoIH0sIGBObyBqb2IgZm91bmQgZm9yIG9yZGVyIGhhc2hgKTtcclxuICAgICAgICAgICAgICAgIHVubW9kaWZpZWRKb2JzLnB1c2gob3JkZXJIYXNoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFVbnJlc29sdmVkUmZxbUpvYlN0YXR1c2VzLmluY2x1ZGVzKGpvYi5zdGF0dXMpKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoeyBvcmRlckhhc2gsIHN0YXR1czogam9iLnN0YXR1cyB9LCAnVHJpZWQgdG8gY2xlYW4gdXAgYSByZXNvbHZlZCBqb2InKTtcclxuICAgICAgICAgICAgICAgIHVubW9kaWZpZWRKb2JzLnB1c2gob3JkZXJIYXNoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgZXhwaXJ5IH0gPSBqb2I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aGlydHlTZWNvbmRzUGFzdEV4cGlyeSA9IGV4cGlyeS5wbHVzKG5ldyBCaWdOdW1iZXIoMzApKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5vd1NlY29uZHMgPSBuZXcgQmlnTnVtYmVyKG5vdy5nZXRUaW1lKCkgLyBPTkVfU0VDT05EX01TKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobm93U2Vjb25kcy5pc0dyZWF0ZXJUaGFuKHRoaXJ0eVNlY29uZHNQYXN0RXhwaXJ5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGpvYi5zdGF0dXMgPSBSZnFtSm9iU3RhdHVzLkZhaWxlZEV4cGlyZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fZGJVdGlscy51cGRhdGVSZnFtSm9iQXN5bmMoam9iKTtcclxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyh7IG9yZGVySGFzaCB9LCAnSm9iIHN0YXR1cyBtYW51YWxseSB1cGRhdGVkIHRvIGZhaWx1cmUnKTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEpvYnMucHVzaChvcmRlckhhc2gpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoeyBvcmRlckhhc2ggfSwgJ1RyaWVkIHRvIGNsZWFuIHVwIGFuIHVuZXhwaXJlZCBqb2InKTtcclxuICAgICAgICAgICAgICAgICAgICB1bm1vZGlmaWVkSm9icy5wdXNoKG9yZGVySGFzaCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoeyBvcmRlckhhc2ggfSwgJ0ZhaWxlZCB0byBjbGVhbiB1cCB0aGUgam9iJyk7XHJcbiAgICAgICAgICAgICAgICB1bm1vZGlmaWVkSm9icy5wdXNoKG9yZGVySGFzaCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChvcmRlckhhc2hlcy5tYXAoKGgpID0+IGhhbmRsZUpvYihoKSkpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtb2RpZmllZEpvYnMsXHJcbiAgICAgICAgICAgIHVubW9kaWZpZWRKb2JzLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuIl0sInZlcnNpb24iOjN9