59a27e5f2748530493d6efa849d463fe
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuoteServerClient = void 0;
const types_1 = require("@0x/asset-swapper/lib/src/types");
const json_schemas_1 = require("@0x/json-schemas");
const schemas_1 = require("../quote-server/schemas");
const utils_1 = require("@0x/utils");
const http_status_codes_1 = require("http-status-codes");
// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
const prom_client_1 = require("prom-client");
const uuid = require("uuid");
const config_1 = require("../config");
const constants_1 = require("../core/constants");
const logger_1 = require("../logger");
const schemas_2 = require("../core/schemas");
const MARKET_MAKER_SIGN_LATENCY = new prom_client_1.Summary({
    name: 'market_maker_sign_latency',
    help: 'Latency for sign request to Market Makers',
    labelNames: ['makerUri', 'statusCode'],
});
const RFQ_MARKET_MAKER_PRICE_REQUEST_DURATION_SECONDS = new prom_client_1.Summary({
    name: 'rfq_market_maker_price_request_duration_seconds',
    help: 'Provides stats around market maker network interactions',
    percentiles: [0.5, 0.9, 0.95, 0.99, 0.999],
    labelNames: ['type', 'integratorLabel', 'makerUri', 'chainId', 'statusCode', 'market'],
    maxAgeSeconds: 60,
    ageBuckets: 5,
});
const KNOWN_TOKENS = {
    // Mainnet
    '0x6b175474e89094c44da98b954eedeac495271d0f': 'DAI',
    '0xdac17f958d2ee523a2206206994597c13d831ec7': 'USDT',
    '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48': 'USDC',
    '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2': 'WETH',
    // Polygon
    '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063': 'DAI',
    '0xc2132d05d31c914a87c6611c10748aeb04b58e8f': 'USDT',
    '0x2791bca1f2de4661ed88a30c99a7a9449aa84174': 'USDC',
    '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619': 'WETH',
    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270': 'WMATIC',
};
/**
 * [Read this in Daniel's voice] Returns a human-readable label for Prometheus counters.
 * Only popular most relevant pairs should be displayed in Prometheus (since it overload the service)
 * and any other market that does not contain popular pairs will simply return "Other".
 *
 * @param tokenSold the token being sold
 * @param tokenPurchased the token being purchased
 * @returns a market like "WETH-DAI", or "Other" is a pair is unknown
 */
function getMarketLabel(tokenSold, tokenPurchased) {
    const items = [tokenSold.toLowerCase(), tokenPurchased.toLowerCase()];
    items.sort();
    const tokenA = KNOWN_TOKENS[items[0]];
    const tokenB = KNOWN_TOKENS[items[1]];
    if (!tokenA || !tokenB) {
        return 'Other';
    }
    return `${tokenA}-${tokenB}`;
}
const schemaValidator = new json_schemas_1.SchemaValidator();
schemaValidator.addSchema(schemas_1.schemas.feeSchema);
schemaValidator.addSchema(schemas_1.schemas.submitRequestSchema);
schemaValidator.addSchema(schemas_1.schemas.submitReceiptSchema);
schemaValidator.addSchema(schemas_1.schemas.otcQuoteResponseSchema);
class QuoteServerClient {
    constructor(_axiosInstance) {
        this._axiosInstance = _axiosInstance;
    }
    /**
     * Prepares the query parameters (copied from QuoteRequestor)
     */
    static makeQueryParameters(input) {
        const { chainId, txOrigin, takerAddress, marketOperation, buyTokenAddress, sellTokenAddress, assetFillAmount, comparisonPrice, isLastLook, fee, } = input;
        const { buyAmountBaseUnits, sellAmountBaseUnits } = marketOperation === types_1.MarketOperation.Buy
            ? {
                buyAmountBaseUnits: assetFillAmount,
                sellAmountBaseUnits: undefined,
            }
            : {
                sellAmountBaseUnits: assetFillAmount,
                buyAmountBaseUnits: undefined,
            };
        const requestParamsWithBigNumbers = {
            txOrigin,
            takerAddress,
            buyTokenAddress,
            sellTokenAddress,
            protocolVersion: '4',
        };
        if (comparisonPrice) {
            requestParamsWithBigNumbers.comparisonPrice = comparisonPrice.toString();
        }
        if (isLastLook) {
            if (fee === undefined) {
                throw new Error(`isLastLook cannot be passed without a fee parameter`);
            }
            requestParamsWithBigNumbers.isLastLook = isLastLook.toString();
        }
        if (fee) {
            requestParamsWithBigNumbers.feeAmount = fee.amount.toString();
            requestParamsWithBigNumbers.feeToken = fee.token;
            requestParamsWithBigNumbers.feeType = fee.type;
        }
        if (chainId) {
            requestParamsWithBigNumbers.chainId = String(chainId);
        }
        // convert BigNumbers to strings so they are digestible by axios
        if (sellAmountBaseUnits) {
            return {
                ...requestParamsWithBigNumbers,
                sellAmountBaseUnits: sellAmountBaseUnits.toString(),
            };
        }
        else if (buyAmountBaseUnits) {
            return {
                ...requestParamsWithBigNumbers,
                buyAmountBaseUnits: buyAmountBaseUnits.toString(),
            };
        }
        else {
            throw new Error('Neither "buyAmountBaseUnits" or "sellAmountBaseUnits" were defined');
        }
    }
    /**
     * Fetch a price (indicative quote)
     *
     * @param makerUri - the maker URI
     * @param integrator - the integrator
     * @param parameters - the query parameters (created via {@link QuoteServerClient.makeQueryParameters} )
     * @param makerUriToUrl - function to transform the maker URI into its `price` endpoint
     * @returns - a Promise containing the indicative quote if available, else undefined
     * @throws - Will throw an error if a 4xx or 5xx is returned
     */
    async getPriceV2Async(makerUri, integrator, parameters, makerUriToUrl) {
        const timerStopFn = RFQ_MARKET_MAKER_PRICE_REQUEST_DURATION_SECONDS.startTimer();
        const headers = {
            '0x-request-uuid': uuid.v4(),
            '0x-integrator-id': integrator.integratorId,
            '0x-api-key': integrator.integratorId,
        };
        logger_1.logger.info({ headers, parameters, integratorId: integrator.integratorId, makerUri }, 'v2/price request to MM');
        const response = await this._axiosInstance.get(makerUriToUrl(makerUri), {
            timeout: config_1.RFQ_PRICE_ENDPOINT_TIMEOUT_MS,
            validateStatus: (status) => {
                // tslint:disable-next-line: custom-no-magic-numbers
                if (status >= 300) {
                    logger_1.logger.warn({ status, makerUri }, 'Received non-OK status requesting price from market maker');
                }
                // Don't throw errors on 4xx or 5xx
                return true;
            },
            headers,
            params: parameters,
        });
        logger_1.logger.info({ makerUri, body: response.data, status: response.status }, 'v2/price response from MM');
        timerStopFn({
            type: makerUriToUrl(''),
            integratorLabel: integrator.label,
            makerUri,
            chainId: parameters.chainId,
            statusCode: response.status,
            market: getMarketLabel(parameters.sellTokenAddress, parameters.buyTokenAddress),
        });
        // Empty response from MM (not 200, no data, or empty object)
        if (response.status !== http_status_codes_1.OK || !response.data || Object.keys(response.data).length === 0) {
            return;
        }
        const validationResult = schemaValidator.validate(response.data, schemas_2.schemas.indicativeOtcQuoteResponseSchema);
        if (validationResult.errors && validationResult.errors.length > 0) {
            const errorsMsg = validationResult.errors.map((err) => err.message).join(',');
            logger_1.logger.error({ response: response.data, makerUri, status: response.status }, 'Malformed price response');
            throw new Error(`Error from validator: ${errorsMsg}`);
        }
        return {
            expiry: new utils_1.BigNumber(response.data.expiry),
            maker: response.data.maker,
            makerAmount: new utils_1.BigNumber(response.data.makerAmount),
            makerToken: response.data.makerToken,
            makerUri,
            takerAmount: new utils_1.BigNumber(response.data.takerAmount),
            takerToken: response.data.takerToken,
        };
    }
    /**
     * Fetch a batch of prices. Ignores all quotes that return errors
     *
     * @param makerUris - a list of maker URIs
     * @param integrator - the integrator
     * @param parameters - the query parameters (created via {@link QuoteServerClient.makeQueryParameters} )
     * @param makerUriToUrl - function to transform the maker URI into its `price` endpoint
     * @returns - a Promise containing a list of indicative quotes
     */
    async batchGetPriceV2Async(makerUris, integrator, parameters, makerUriToUrl = (u) => `${u}/rfqm/v2/price`) {
        return Promise.all(makerUris.map(async (makerUri) => {
            return this.getPriceV2Async(makerUri, integrator, parameters, makerUriToUrl).catch((err) => {
                var _a, _b;
                logger_1.logger.error({
                    errorMessage: err === null || err === void 0 ? void 0 : err.message,
                    makerUri,
                    status: (_b = (_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : 'unknown',
                }, 'Encountered an error requesting an indicative quote');
                return undefined;
            });
        })).then((arr) => arr.filter((result) => result !== undefined));
    }
    /**
     * Request a signature from a MM for a given OtcOrder
     *
     * @param makerUri - the MM's uri
     * @param integratorId - the integrator id
     * @param payload - the payload of the request. RFQm transactions require
     *   `takerSignature` to be present, while `takerSignature` will not be
     *   present for RFQt transactions.
     * @param requireProceedWithFill - whether or not to require the response
     *  to include a `proceedWithFill` field. This field is specific to RFQm
     *  and isn't required for an RFQt sign request.
     * @param makerUriToUrl - function to transform the maker URI into its `sign` endpoint
     * @returns - The signature if successful, undefined otherwise
     * @throws - Will throw an error if a 4xx or 5xx is returned
     */
    async signV2Async(makerUri, integratorId, payload, makerUriToUrl = (u) => `${u}/rfqm/v2/sign`, 
    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
    // eslint-disable-next-line @typescript-eslint/no-inferrable-types
    requireProceedWithFill = true) {
        var _a, _b, _c;
        const timerStopFn = MARKET_MAKER_SIGN_LATENCY.startTimer();
        const requestUuid = uuid.v4();
        const headers = {
            '0x-api-key': integratorId,
            '0x-integrator-id': integratorId,
            '0x-request-uuid': requestUuid,
            'Content-Type': 'application/json',
        };
        logger_1.logger.info({ headers, payload, integratorId, makerUri }, 'v2/sign request to MM');
        const rawResponse = await this._axiosInstance.post(makerUriToUrl(makerUri), {
            order: payload.order,
            orderHash: payload.orderHash,
            expiry: payload.expiry,
            takerSignature: payload.takerSignature,
            feeToken: payload.fee.token,
            feeAmount: payload.fee.amount,
            ...(config_1.TAKER_SPECIFIED_SIDE_ENABLED &&
                payload.takerSpecifiedSide && { takerSpecifiedSide: payload.takerSpecifiedSide }),
        }, {
            timeout: config_1.RFQ_SIGN_ENDPOINT_TIMEOUT_MS,
            headers: {
                '0x-api-key': integratorId,
                '0x-integrator-id': integratorId,
                '0x-request-uuid': requestUuid,
                'Content-Type': 'application/json',
            },
            validateStatus: () => true, // Don't throw errors on 4xx or 5xx
        });
        logger_1.logger.info({
            makerUri,
            requestUuid,
            status: rawResponse.status,
            body: rawResponse.data,
        }, 'v2/sign response from MM');
        timerStopFn({
            makerUri,
            statusCode: rawResponse.status,
        });
        // TODO (rhinodavid): Filter out non-successful statuses from validation step
        const validationResult = schemaValidator.validate(rawResponse.data, schemas_2.schemas.signResponseSchema);
        if (validationResult.errors && validationResult.errors.length > 0) {
            const errorsMsg = validationResult.errors.map((err) => err.message).join(',');
            logger_1.logger.error({ response: rawResponse.data, makerUri, status: rawResponse.status }, 'Malformed sign response');
            throw new Error(`Error from validator: ${errorsMsg}`);
        }
        const proceedWithFill = (_a = rawResponse.data) === null || _a === void 0 ? void 0 : _a.proceedWithFill;
        const makerSignature = (_b = rawResponse.data) === null || _b === void 0 ? void 0 : _b.makerSignature;
        const feeAmount = new utils_1.BigNumber((_c = rawResponse.data) === null || _c === void 0 ? void 0 : _c.feeAmount);
        if (!proceedWithFill && requireProceedWithFill) {
            logger_1.logger.info({ makerUri }, 'Sign request rejected');
            return undefined;
        }
        if (!payload.fee.amount.eq(constants_1.ZERO) && !feeAmount.gte(payload.fee.amount)) {
            logger_1.logger.warn({ requestFeeAmount: payload.fee.amount, responseFeeAmount: feeAmount, makerUri }, 'Invalid fee acknowledgement');
            return undefined;
        }
        if (makerSignature === undefined) {
            logger_1.logger.warn({ makerUri }, 'Signature is missing');
            return undefined;
        }
        return makerSignature;
    }
}
exports.QuoteServerClient = QuoteServerClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,