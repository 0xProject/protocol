f7f68749f4d489d634d04482f2012730
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../../src/utils/rfq_maker_manager', () => ({
    RfqMakerManager: jest.fn().mockImplementation(() => {
        return {
            getRfqtV2MakersForPair: jest.fn(),
        };
    }),
}));
jest.mock('../../src/quoteRequestor/QuoteRequestor', () => ({
    QuoteRequestor: jest.fn().mockImplementation(() => {
        return {
            requestRfqtIndicativeQuotesAsync: jest.fn().mockResolvedValue([]),
            requestRfqtFirmQuotesAsync: jest.fn().mockResolvedValue([]),
        };
    }),
}));
jest.mock('../../src/utils/quote_server_client', () => ({
    QuoteServerClient: jest.fn().mockImplementation(() => {
        return {
            batchGetPriceV2Async: jest.fn().mockResolvedValue([]),
        };
    }),
}));
jest.mock('../../src/services/rfq_maker_balance_cache_service', () => ({
    RfqMakerBalanceCacheService: jest.fn().mockImplementation(() => {
        return {
            getERC20OwnerBalancesAsync: jest.fn().mockResolvedValue([]),
        };
    }),
}));
// tslint:disable custom-no-magic-numbers max-file-line-count
const contract_addresses_1 = require("@0x/contract-addresses");
const protocol_utils_1 = require("@0x/protocol-utils");
const signature_utils_1 = require("@0x/protocol-utils/lib/src/signature_utils");
const types_1 = require("@0x/types");
const utils_1 = require("@0x/utils");
const constants_1 = require("../../src/core/constants");
const entities_1 = require("../../src/entities");
const QuoteRequestor_1 = require("../../src/quoteRequestor/QuoteRequestor");
const fee_service_1 = require("../../src/services/fee_service");
const RfqtService_1 = require("../../src/services/RfqtService");
const rfq_maker_balance_cache_service_1 = require("../../src/services/rfq_maker_balance_cache_service");
const quote_server_client_1 = require("../../src/utils/quote_server_client");
const rfq_maker_manager_1 = require("../../src/utils/rfq_maker_manager");
const TokenMetadataManager_1 = require("../../src/utils/TokenMetadataManager");
// TODO (rhinodavid): Find a better way to initialize mocked classes
const mockQuoteRequestor = jest.mocked(new QuoteRequestor_1.QuoteRequestor({}, {}));
const mockRfqMakerManager = jest.mocked(new rfq_maker_manager_1.RfqMakerManager({}, {}, 0));
const mockQuoteServerClient = jest.mocked(new quote_server_client_1.QuoteServerClient({}));
const mockFeeService = jest.mocked(new fee_service_1.FeeService(1337, {}, {}, {}, {}, {}, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS));
const mockRfqBlockchainUtils = jest.mocked({});
const mockTokenMetadataManager = jest.mocked(new TokenMetadataManager_1.TokenMetadataManager(1337, {}));
// tslint:enable: no-object-literal-type-assertion
const mockContractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1337);
const mockRfqMakerBalanceCacheService = jest.mocked(new rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService({}, {}));
const mockCacheClient = jest.mocked({});
describe('Rfqt Service', () => {
    beforeEach(() => {
        mockQuoteRequestor.requestRfqtFirmQuotesAsync.mockClear();
        mockQuoteRequestor.requestRfqtIndicativeQuotesAsync.mockClear();
        mockQuoteServerClient.batchGetPriceV2Async.mockClear();
        mockRfqMakerManager.getRfqtV2MakersForPair.mockClear();
        mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync.mockClear();
    });
    describe('v1', () => {
        describe('getV1PricesAsync', () => {
            it('passes through calls to QuoteRequestor::requestRfqtIndicativeQuotesAsync', async () => {
                const rfqtService = new RfqtService_1.RfqtService(0, mockRfqMakerManager, mockQuoteRequestor, mockQuoteServerClient, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, mockRfqBlockchainUtils, mockTokenMetadataManager, mockContractAddresses, mockFeeService, 1, mockRfqMakerBalanceCacheService, mockCacheClient);
                await rfqtService.getV1PricesAsync({
                    altRfqAssetOfferings: {
                        'alt-mm': [
                            {
                                id: 'id',
                                baseAsset: '0xbaseasset',
                                quoteAsset: '0xquoteasset',
                                baseAssetDecimals: 420,
                                quoteAssetDecimals: 69,
                            },
                        ],
                    },
                    assetFillAmount: new utils_1.BigNumber(111),
                    comparisonPrice: new utils_1.BigNumber(666),
                    makerToken: '0xmakertoken',
                    marketOperation: types_1.MarketOperation.Buy,
                    takerAddress: '0xtakeraddress',
                    takerToken: '0xtakertoken',
                    intentOnFilling: false,
                    integrator: {
                        apiKeys: [],
                        allowedChainIds: [],
                        integratorId: 'uuid-integrator',
                        plp: false,
                        rfqm: false,
                        rfqt: true,
                        label: 'Scam Integrator 1',
                    },
                    txOrigin: '0xtxorigin',
                });
                const args = mockQuoteRequestor.requestRfqtIndicativeQuotesAsync.mock.calls[0];
                expect(args).toMatchInlineSnapshot(`
                    Array [
                      "0xmakertoken",
                      "0xtakertoken",
                      "111",
                      "Buy",
                      "666",
                      Object {
                        "altRfqAssetOfferings": Object {
                          "alt-mm": Array [
                            Object {
                              "baseAsset": "0xbaseasset",
                              "baseAssetDecimals": 420,
                              "id": "id",
                              "quoteAsset": "0xquoteasset",
                              "quoteAssetDecimals": 69,
                            },
                          ],
                        },
                        "integrator": Object {
                          "allowedChainIds": Array [],
                          "apiKeys": Array [],
                          "integratorId": "uuid-integrator",
                          "label": "Scam Integrator 1",
                          "plp": false,
                          "rfqm": false,
                          "rfqt": true,
                        },
                        "intentOnFilling": false,
                        "isIndicative": true,
                        "isLastLook": false,
                        "makerEndpointMaxResponseTimeMs": 600,
                        "takerAddress": "0xtakeraddress",
                        "txOrigin": "0xtxorigin",
                      },
                    ]
                `);
            });
        });
        describe('getV1QuotesAsync', () => {
            it('passes through calls to QuoteRequestor::requestRfqtFirmQuotesAsync', async () => {
                mockQuoteRequestor.requestRfqtFirmQuotesAsync.mockResolvedValue([]);
                const rfqtService = new RfqtService_1.RfqtService(0, mockRfqMakerManager, mockQuoteRequestor, mockQuoteServerClient, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, mockRfqBlockchainUtils, mockTokenMetadataManager, mockContractAddresses, mockFeeService, 1, mockRfqMakerBalanceCacheService, mockCacheClient);
                await rfqtService.getV1QuotesAsync({
                    altRfqAssetOfferings: {
                        'alt-mm': [
                            {
                                id: 'id',
                                baseAsset: '0xbaseasset',
                                quoteAsset: '0xquoteasset',
                                baseAssetDecimals: 420,
                                quoteAssetDecimals: 69,
                            },
                        ],
                    },
                    assetFillAmount: new utils_1.BigNumber(111),
                    comparisonPrice: new utils_1.BigNumber(666),
                    makerToken: '0xmakertoken',
                    marketOperation: types_1.MarketOperation.Buy,
                    takerAddress: '0xtakeraddress',
                    takerToken: '0xtakertoken',
                    intentOnFilling: false,
                    integrator: {
                        allowedChainIds: [],
                        apiKeys: [],
                        integratorId: 'uuid-integrator',
                        plp: false,
                        rfqm: false,
                        rfqt: true,
                        label: 'Scam Integrator 1',
                    },
                    txOrigin: '0xtxorigin',
                });
                const args = mockQuoteRequestor.requestRfqtFirmQuotesAsync.mock.calls[0];
                expect(args).toMatchInlineSnapshot(`
                    Array [
                      "0xmakertoken",
                      "0xtakertoken",
                      "111",
                      "Buy",
                      "666",
                      Object {
                        "altRfqAssetOfferings": Object {
                          "alt-mm": Array [
                            Object {
                              "baseAsset": "0xbaseasset",
                              "baseAssetDecimals": 420,
                              "id": "id",
                              "quoteAsset": "0xquoteasset",
                              "quoteAssetDecimals": 69,
                            },
                          ],
                        },
                        "integrator": Object {
                          "allowedChainIds": Array [],
                          "apiKeys": Array [],
                          "integratorId": "uuid-integrator",
                          "label": "Scam Integrator 1",
                          "plp": false,
                          "rfqm": false,
                          "rfqt": true,
                        },
                        "intentOnFilling": false,
                        "isIndicative": false,
                        "isLastLook": false,
                        "makerEndpointMaxResponseTimeMs": 600,
                        "takerAddress": "0xtakeraddress",
                        "txOrigin": "0xtxorigin",
                      },
                    ]
                `);
            });
        });
    });
    describe('v2', () => {
        const maker = new entities_1.RfqMaker({
            makerId: 'maker-id',
            chainId: 1337,
            updatedAt: new Date(),
            pairs: [['0x1', '0x2']],
            rfqmUri: null,
            rfqtUri: 'maker.uri',
        });
        const integrator = {
            allowedChainIds: [1337],
            apiKeys: [],
            integratorId: 'integrator-id',
            label: 'test integrator',
            plp: false,
            rfqm: false,
            rfqt: true,
        };
        describe('getV2PricesAsync', () => {
            it('transforms the API request into a quote server client request for buys', async () => {
                const quoteContext = {
                    isFirm: false,
                    workflow: 'rfqt',
                    isUnwrap: false,
                    originalMakerToken: '0x1',
                    takerTokenDecimals: 18,
                    makerTokenDecimals: 18,
                    feeModelVersion: 1,
                    assetFillAmount: new utils_1.BigNumber(1000),
                    chainId: 1337,
                    integrator,
                    makerToken: '0x1',
                    isSelling: false,
                    takerAddress: '0x0',
                    takerToken: '0x2',
                    txOrigin: '0xtakeraddress',
                };
                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);
                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({
                    feeWithDetails: {
                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',
                        amount: new utils_1.BigNumber(100),
                        type: 'fixed',
                    },
                });
                const rfqtService = new RfqtService_1.RfqtService(1337, // tslint:disable-line: custom-no-magic-numbers
                mockRfqMakerManager, mockQuoteRequestor, mockQuoteServerClient, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, mockRfqBlockchainUtils, mockTokenMetadataManager, mockContractAddresses, mockFeeService, 1, mockRfqMakerBalanceCacheService, mockCacheClient);
                await rfqtService.getV2PricesAsync(quoteContext);
                expect(mockQuoteServerClient.batchGetPriceV2Async.mock.calls[0]).toMatchInlineSnapshot(`
                  Array [
                    Array [
                      "maker.uri",
                    ],
                    Object {
                      "allowedChainIds": Array [
                        1337,
                      ],
                      "apiKeys": Array [],
                      "integratorId": "integrator-id",
                      "label": "test integrator",
                      "plp": false,
                      "rfqm": false,
                      "rfqt": true,
                    },
                    Object {
                      "buyAmountBaseUnits": "1000",
                      "buyTokenAddress": "0x1",
                      "chainId": "1337",
                      "feeAmount": "100",
                      "feeToken": "0x0b1ba0af832d7c05fd64161e0db78e85978e8082",
                      "integratorId": "integrator-id",
                      "protocolVersion": "4",
                      "sellTokenAddress": "0x2",
                      "takerAddress": "0x0",
                      "txOrigin": "0xtakeraddress",
                    },
                    [Function],
                  ]
                `);
            });
            it('[workflow: gasless-rfqt] transforms the API request into a quote server client request for buys', async () => {
                const quoteContext = {
                    isFirm: false,
                    workflow: 'gasless-rfqt',
                    isUnwrap: false,
                    originalMakerToken: '0x1',
                    takerTokenDecimals: 18,
                    makerTokenDecimals: 18,
                    feeModelVersion: 1,
                    assetFillAmount: new utils_1.BigNumber(1000),
                    chainId: 1337,
                    integrator,
                    makerToken: '0x1',
                    isSelling: false,
                    takerAddress: '0x0',
                    takerToken: '0x2',
                    txOrigin: '0xtakeraddress',
                };
                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);
                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({
                    feeWithDetails: {
                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',
                        amount: new utils_1.BigNumber(100),
                        type: 'fixed',
                    },
                });
                const rfqtService = new RfqtService_1.RfqtService(1337, // tslint:disable-line: custom-no-magic-numbers
                mockRfqMakerManager, mockQuoteRequestor, mockQuoteServerClient, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, mockRfqBlockchainUtils, mockTokenMetadataManager, mockContractAddresses, mockFeeService, 1, mockRfqMakerBalanceCacheService, mockCacheClient);
                await rfqtService.getV2PricesAsync(quoteContext);
                expect(mockQuoteServerClient.batchGetPriceV2Async.mock.calls[0]).toMatchInlineSnapshot(`
                  Array [
                    Array [
                      "maker.uri",
                    ],
                    Object {
                      "allowedChainIds": Array [
                        1337,
                      ],
                      "apiKeys": Array [],
                      "integratorId": "integrator-id",
                      "label": "test integrator",
                      "plp": false,
                      "rfqm": false,
                      "rfqt": true,
                    },
                    Object {
                      "buyAmountBaseUnits": "1000",
                      "buyTokenAddress": "0x1",
                      "chainId": "1337",
                      "feeAmount": "100",
                      "feeToken": "0x0b1ba0af832d7c05fd64161e0db78e85978e8082",
                      "integratorId": "integrator-id",
                      "protocolVersion": "4",
                      "sellTokenAddress": "0x2",
                      "takerAddress": "0x0",
                      "txOrigin": "0xtakeraddress",
                    },
                    [Function],
                  ]
                `);
            });
            it('transforms the API request into a quote server client request for sells', async () => {
                const quoteContext = {
                    isFirm: false,
                    workflow: 'rfqt',
                    isUnwrap: false,
                    originalMakerToken: '0x1',
                    takerTokenDecimals: 18,
                    makerTokenDecimals: 18,
                    feeModelVersion: 1,
                    assetFillAmount: new utils_1.BigNumber(1000),
                    chainId: 1337,
                    integrator,
                    makerToken: '0x1',
                    isSelling: true,
                    takerAddress: '0x0',
                    takerToken: '0x2',
                    txOrigin: '0xtakeraddress',
                };
                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);
                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({
                    feeWithDetails: {
                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',
                        amount: new utils_1.BigNumber(100),
                        type: 'fixed',
                    },
                });
                const rfqtService = new RfqtService_1.RfqtService(1337, // tslint:disable-line: custom-no-magic-numbers
                mockRfqMakerManager, mockQuoteRequestor, mockQuoteServerClient, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, mockRfqBlockchainUtils, mockTokenMetadataManager, mockContractAddresses, mockFeeService, 1, mockRfqMakerBalanceCacheService, mockCacheClient);
                await rfqtService.getV2PricesAsync(quoteContext);
                expect(mockQuoteServerClient.batchGetPriceV2Async.mock.calls[0]).toMatchInlineSnapshot(`
                  Array [
                    Array [
                      "maker.uri",
                    ],
                    Object {
                      "allowedChainIds": Array [
                        1337,
                      ],
                      "apiKeys": Array [],
                      "integratorId": "integrator-id",
                      "label": "test integrator",
                      "plp": false,
                      "rfqm": false,
                      "rfqt": true,
                    },
                    Object {
                      "buyTokenAddress": "0x1",
                      "chainId": "1337",
                      "feeAmount": "100",
                      "feeToken": "0x0b1ba0af832d7c05fd64161e0db78e85978e8082",
                      "integratorId": "integrator-id",
                      "protocolVersion": "4",
                      "sellAmountBaseUnits": "1000",
                      "sellTokenAddress": "0x2",
                      "takerAddress": "0x0",
                      "txOrigin": "0xtakeraddress",
                    },
                    [Function],
                  ]
              `);
            });
            it('gets prices', async () => {
                const quoteContext = {
                    isFirm: false,
                    workflow: 'rfqt',
                    isUnwrap: false,
                    originalMakerToken: '0x1',
                    takerTokenDecimals: 18,
                    makerTokenDecimals: 18,
                    feeModelVersion: 1,
                    assetFillAmount: new utils_1.BigNumber(1000),
                    chainId: 1337,
                    integrator,
                    makerToken: '0x1',
                    isSelling: true,
                    takerAddress: '0x0',
                    takerToken: '0x2',
                    txOrigin: '0xtakeraddress',
                };
                const price = {
                    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                    // eslint-disable-next-line @typescript-eslint/no-loss-of-precision
                    expiry: new utils_1.BigNumber(9999999999999999),
                    maker: '0xmakeraddress',
                    makerAmount: new utils_1.BigNumber(1000),
                    makerToken: '0x1',
                    makerUri: 'maker.uri',
                    takerAmount: new utils_1.BigNumber(1001),
                    takerToken: '0x2',
                };
                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);
                mockQuoteServerClient.batchGetPriceV2Async = jest.fn().mockResolvedValue([price]);
                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({
                    feeWithDetails: {
                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',
                        amount: new utils_1.BigNumber(100),
                        type: 'fixed',
                    },
                });
                const rfqtService = new RfqtService_1.RfqtService(1337, // tslint:disable-line: custom-no-magic-numbers
                mockRfqMakerManager, mockQuoteRequestor, mockQuoteServerClient, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, mockRfqBlockchainUtils, mockTokenMetadataManager, mockContractAddresses, mockFeeService, 1, mockRfqMakerBalanceCacheService, mockCacheClient);
                const result = await rfqtService.getV2PricesAsync(quoteContext);
                expect(result.length).toEqual(1);
                expect(result[0].makerId).toEqual('maker-id');
                expect(result[0]).toMatchInlineSnapshot(`
                  Object {
                    "expiry": "10000000000000000",
                    "makerAddress": "0xmakeraddress",
                    "makerAmount": "1000",
                    "makerId": "maker-id",
                    "makerToken": "0x1",
                    "makerUri": "maker.uri",
                    "takerAmount": "1001",
                    "takerToken": "0x2",
                  }
                `);
            });
            it('gets prices from whitelisted makers only', async () => {
                const quoteContext = {
                    isFirm: false,
                    workflow: 'rfqt',
                    isUnwrap: false,
                    originalMakerToken: '0x1',
                    takerTokenDecimals: 18,
                    makerTokenDecimals: 18,
                    feeModelVersion: 1,
                    assetFillAmount: new utils_1.BigNumber(1000),
                    chainId: 1337,
                    integrator: {
                        ...integrator,
                        whitelistMakerIds: ['maker1'],
                    },
                    makerToken: '0x1',
                    isSelling: true,
                    takerAddress: '0x0',
                    takerToken: '0x2',
                    txOrigin: '0xtakeraddress',
                };
                const price = {
                    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                    // eslint-disable-next-line @typescript-eslint/no-loss-of-precision
                    expiry: new utils_1.BigNumber(9999999999999999),
                    maker: '0xmakeraddress',
                    makerAmount: new utils_1.BigNumber(1000),
                    makerToken: '0x1',
                    makerUri: 'maker.uri',
                    takerAmount: new utils_1.BigNumber(1001),
                    takerToken: '0x2',
                };
                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([
                    {
                        ...maker,
                        makerId: 'maker1',
                    },
                    {
                        ...maker,
                        makerId: 'maker2',
                    },
                ]);
                mockQuoteServerClient.batchGetPriceV2Async = jest.fn().mockResolvedValue([price]);
                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({
                    feeWithDetails: {
                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',
                        amount: new utils_1.BigNumber(100),
                        type: 'fixed',
                    },
                });
                const rfqtService = new RfqtService_1.RfqtService(1337, // tslint:disable-line: custom-no-magic-numbers
                mockRfqMakerManager, mockQuoteRequestor, mockQuoteServerClient, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, mockRfqBlockchainUtils, mockTokenMetadataManager, mockContractAddresses, mockFeeService, 1, mockRfqMakerBalanceCacheService, mockCacheClient);
                const result = await rfqtService.getV2PricesAsync(quoteContext);
                expect(result.length).toEqual(1);
                expect(result[0].makerId).toEqual('maker1');
                expect(result[0]).toMatchInlineSnapshot(`
                  Object {
                    "expiry": "10000000000000000",
                    "makerAddress": "0xmakeraddress",
                    "makerAmount": "1000",
                    "makerId": "maker1",
                    "makerToken": "0x1",
                    "makerUri": "maker.uri",
                    "takerAmount": "1001",
                    "takerToken": "0x2",
                  }
                `);
            });
        });
        describe('getV2QuotesAsync', () => {
            const makerToken = '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE';
            const makerAddress = '0x79b7a69d90c82E014Bf0315e164208119B510FA0';
            const takerToken = '0x42d6622deCe394b54999Fbd73D108123806f6a18';
            const takerAddress = '0xE06fFA8146bBdECcBaaF72B6043b29091071AEB8';
            const fakeNow = new Date(1657069278103);
            const expiry = new utils_1.BigNumber(fakeNow.getTime() + 1000000).dividedBy(constants_1.ONE_SECOND_MS).decimalPlaces(0);
            mockRfqBlockchainUtils.isValidOrderSignerAsync = jest.fn().mockResolvedValue(true);
            it('filters out quotes with no signatures', async () => {
                const quoteContext = {
                    isFirm: true,
                    workflow: 'rfqt',
                    isUnwrap: false,
                    originalMakerToken: '0x1',
                    takerTokenDecimals: 18,
                    makerTokenDecimals: 18,
                    feeModelVersion: 1,
                    assetFillAmount: new utils_1.BigNumber(1000),
                    chainId: 1337,
                    integrator,
                    makerToken,
                    isSelling: false,
                    takerAddress,
                    trader: takerAddress,
                    takerToken,
                    txOrigin: takerAddress,
                };
                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);
                mockQuoteServerClient.batchGetPriceV2Async = jest.fn().mockResolvedValue([
                    {
                        maker: makerAddress,
                        makerUri: maker.rfqtUri,
                        makerToken,
                        takerToken,
                        makerAmount: new utils_1.BigNumber(999),
                        takerAmount: new utils_1.BigNumber(1000),
                        expiry,
                    },
                ]);
                mockQuoteServerClient.signV2Async = jest.fn().mockResolvedValue(undefined);
                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({
                    feeWithDetails: {
                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',
                        amount: new utils_1.BigNumber(100),
                        type: 'fixed',
                    },
                });
                const rfqtService = new RfqtService_1.RfqtService(1337, // tslint:disable-line: custom-no-magic-numbers
                mockRfqMakerManager, mockQuoteRequestor, mockQuoteServerClient, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, mockRfqBlockchainUtils, mockTokenMetadataManager, mockContractAddresses, mockFeeService, 1, mockRfqMakerBalanceCacheService, mockCacheClient);
                const result = await rfqtService.getV2QuotesAsync(quoteContext);
                expect(result.length).toEqual(0);
            });
            it("doesn't blow up if a sign request fails", async () => {
                const quoteContext = {
                    isFirm: true,
                    workflow: 'rfqt',
                    isUnwrap: false,
                    originalMakerToken: '0x1',
                    takerTokenDecimals: 18,
                    makerTokenDecimals: 18,
                    feeModelVersion: 1,
                    assetFillAmount: new utils_1.BigNumber(1000),
                    chainId: 1337,
                    integrator,
                    makerToken,
                    isSelling: false,
                    takerAddress,
                    trader: takerAddress,
                    takerToken,
                    txOrigin: takerAddress,
                };
                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);
                mockQuoteServerClient.batchGetPriceV2Async = jest.fn().mockResolvedValue([
                    {
                        maker: makerAddress,
                        makerUri: maker.rfqtUri,
                        makerToken,
                        takerToken,
                        makerAmount: new utils_1.BigNumber(999),
                        takerAmount: new utils_1.BigNumber(1000),
                        expiry,
                    },
                ]);
                mockQuoteServerClient.signV2Async = jest.fn().mockRejectedValue(new Error('EXPLODE'));
                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({
                    feeWithDetails: {
                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',
                        amount: new utils_1.BigNumber(100),
                        type: 'fixed',
                    },
                });
                const rfqtService = new RfqtService_1.RfqtService(1337, // tslint:disable-line: custom-no-magic-numbers
                mockRfqMakerManager, mockQuoteRequestor, mockQuoteServerClient, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, mockRfqBlockchainUtils, mockTokenMetadataManager, mockContractAddresses, mockFeeService, 1, mockRfqMakerBalanceCacheService, mockCacheClient);
                const result = await rfqtService.getV2QuotesAsync(quoteContext);
                expect(result.length).toEqual(0);
            });
            it('[workflow: rfqt] creates orders with unique nonces', async () => {
                const quoteContext = {
                    isFirm: true,
                    workflow: 'rfqt',
                    isUnwrap: false,
                    originalMakerToken: '0x1',
                    takerTokenDecimals: 18,
                    makerTokenDecimals: 18,
                    feeModelVersion: 1,
                    assetFillAmount: new utils_1.BigNumber(1000),
                    chainId: 1337,
                    integrator,
                    makerToken,
                    isSelling: false,
                    takerAddress,
                    trader: takerAddress,
                    takerToken,
                    txOrigin: takerAddress,
                };
                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);
                mockQuoteServerClient.batchGetPriceV2Async = jest.fn().mockResolvedValue([
                    {
                        maker: makerAddress,
                        makerUri: maker.rfqtUri,
                        makerToken,
                        takerToken,
                        makerAmount: new utils_1.BigNumber(999),
                        takerAmount: new utils_1.BigNumber(1000),
                        expiry,
                    },
                    {
                        maker: makerAddress,
                        makerUri: maker.rfqtUri,
                        makerToken,
                        takerToken,
                        makerAmount: new utils_1.BigNumber(900),
                        takerAmount: new utils_1.BigNumber(1000),
                        expiry,
                    },
                ]);
                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({
                    feeWithDetails: {
                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',
                        amount: new utils_1.BigNumber(100),
                        type: 'fixed',
                    },
                });
                mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync = jest
                    .fn()
                    .mockResolvedValue([new utils_1.BigNumber(10000), new utils_1.BigNumber(10000)]);
                const signature = { r: 'r', v: 21, s: 's', signatureType: signature_utils_1.SignatureType.EIP712 };
                mockQuoteServerClient.signV2Async = jest.fn().mockResolvedValue(signature);
                const rfqtService = new RfqtService_1.RfqtService(1337, // tslint:disable-line: custom-no-magic-numbers
                mockRfqMakerManager, mockQuoteRequestor, mockQuoteServerClient, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, mockRfqBlockchainUtils, mockTokenMetadataManager, mockContractAddresses, mockFeeService, 1, mockRfqMakerBalanceCacheService, mockCacheClient);
                const result = await rfqtService.getV2QuotesAsync(quoteContext, fakeNow);
                const [{ nonce: nonce1 }, { nonce: nonce2 }] = [
                    protocol_utils_1.OtcOrder.parseExpiryAndNonce(result[0].order.expiryAndNonce),
                    protocol_utils_1.OtcOrder.parseExpiryAndNonce(result[1].order.expiryAndNonce),
                ];
                expect(nonce1.toString()).not.toEqual(nonce2.toString());
            });
            it('[workflow: gasless-rfqt] creates orders with unique buckets', async () => {
                const quoteContext = {
                    isFirm: true,
                    workflow: 'gasless-rfqt',
                    isUnwrap: false,
                    originalMakerToken: '0x1',
                    takerTokenDecimals: 18,
                    makerTokenDecimals: 18,
                    feeModelVersion: 1,
                    assetFillAmount: new utils_1.BigNumber(1000),
                    chainId: 1337,
                    integrator,
                    makerToken,
                    isSelling: false,
                    takerAddress,
                    trader: takerAddress,
                    takerToken,
                    txOrigin: takerAddress,
                };
                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);
                mockQuoteServerClient.batchGetPriceV2Async = jest.fn().mockResolvedValue([
                    {
                        maker: makerAddress,
                        makerUri: maker.rfqtUri,
                        makerToken,
                        takerToken,
                        makerAmount: new utils_1.BigNumber(999),
                        takerAmount: new utils_1.BigNumber(1000),
                        expiry,
                    },
                    {
                        maker: makerAddress,
                        makerUri: maker.rfqtUri,
                        makerToken,
                        takerToken,
                        makerAmount: new utils_1.BigNumber(900),
                        takerAmount: new utils_1.BigNumber(1000),
                        expiry,
                    },
                ]);
                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({
                    feeWithDetails: {
                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',
                        amount: new utils_1.BigNumber(100),
                        type: 'fixed',
                    },
                });
                mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync = jest
                    .fn()
                    .mockResolvedValue([new utils_1.BigNumber(10000), new utils_1.BigNumber(10000)]);
                const signature = { r: 'r', v: 21, s: 's', signatureType: signature_utils_1.SignatureType.EIP712 };
                mockQuoteServerClient.signV2Async = jest.fn().mockResolvedValue(signature);
                // 0 is a special return value since this will trigger a wrap around
                mockCacheClient.getNextNOtcOrderBucketsAsync = jest.fn().mockResolvedValue(0);
                const rfqtService = new RfqtService_1.RfqtService(1337, // tslint:disable-line: custom-no-magic-numbers
                mockRfqMakerManager, mockQuoteRequestor, mockQuoteServerClient, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, mockRfqBlockchainUtils, mockTokenMetadataManager, mockContractAddresses, mockFeeService, 1, mockRfqMakerBalanceCacheService, mockCacheClient);
                const result = await rfqtService.getV2QuotesAsync(quoteContext, fakeNow);
                console.log('result', result);
                const [{ nonceBucket: bucket1 }, { nonceBucket: bucket2 }] = [
                    protocol_utils_1.OtcOrder.parseExpiryAndNonce(result[0].order.expiryAndNonce),
                    protocol_utils_1.OtcOrder.parseExpiryAndNonce(result[1].order.expiryAndNonce),
                ];
                expect(bucket1.toString()).not.toEqual(bucket2.toString());
                // check that buckets are greater than zero (successfully wrapped around for negative numbers)
                expect(bucket1.toNumber()).toBeGreaterThanOrEqual(0);
                expect(bucket2.toNumber()).toBeGreaterThanOrEqual(0);
            });
            it('gets a signed quote', async () => {
                const quoteContext = {
                    isFirm: true,
                    workflow: 'rfqt',
                    isUnwrap: false,
                    originalMakerToken: '0x1',
                    takerTokenDecimals: 18,
                    makerTokenDecimals: 18,
                    feeModelVersion: 1,
                    assetFillAmount: new utils_1.BigNumber(1000),
                    chainId: 1337,
                    integrator,
                    makerToken,
                    isSelling: false,
                    takerAddress: constants_1.NULL_ADDRESS,
                    trader: takerAddress,
                    takerToken,
                    txOrigin: takerAddress,
                };
                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);
                mockQuoteServerClient.batchGetPriceV2Async = jest.fn().mockResolvedValue([
                    {
                        maker: makerAddress,
                        makerUri: maker.rfqtUri,
                        makerToken,
                        takerToken,
                        makerAmount: new utils_1.BigNumber(999),
                        takerAmount: new utils_1.BigNumber(1000),
                        expiry,
                    },
                ]);
                const signature = { r: 'r', v: 21, s: 's', signatureType: signature_utils_1.SignatureType.EIP712 };
                mockQuoteServerClient.signV2Async = jest.fn().mockResolvedValue(signature);
                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({
                    feeWithDetails: {
                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',
                        amount: new utils_1.BigNumber(100),
                        type: 'fixed',
                    },
                });
                mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync = jest
                    .fn()
                    .mockResolvedValue([new utils_1.BigNumber(10000)]);
                const rfqtService = new RfqtService_1.RfqtService(1337, // tslint:disable-line: custom-no-magic-numbers
                mockRfqMakerManager, mockQuoteRequestor, mockQuoteServerClient, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, mockRfqBlockchainUtils, mockTokenMetadataManager, mockContractAddresses, mockFeeService, 1, mockRfqMakerBalanceCacheService, mockCacheClient);
                const result = await rfqtService.getV2QuotesAsync(quoteContext, fakeNow);
                expect(result.length).toEqual(1);
                expect(result[0]).toMatchObject({
                    fillableMakerAmount: new utils_1.BigNumber(999),
                    fillableTakerAmount: new utils_1.BigNumber(1000),
                    fillableTakerFeeAmount: new utils_1.BigNumber(0),
                    makerId: maker.makerId,
                    makerUri: maker.rfqtUri,
                    signature,
                });
                expect(result[0].order).toMatchInlineSnapshot(`
                OtcOrder {
                  "chainId": 1337,
                  "expiry": "1657070278",
                  "expiryAndNonce": "10401598717691489530826623925864187439861993812812831231287826374366",
                  "maker": "0x79b7a69d90c82E014Bf0315e164208119B510FA0",
                  "makerAmount": "999",
                  "makerToken": "0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE",
                  "nonce": "1657069278",
                  "nonceBucket": "0",
                  "taker": "0x0000000000000000000000000000000000000000",
                  "takerAmount": "1000",
                  "takerToken": "0x42d6622deCe394b54999Fbd73D108123806f6a18",
                  "txOrigin": "0xE06fFA8146bBdECcBaaF72B6043b29091071AEB8",
                  "verifyingContract": "0x5315e44798395d4a952530d131249fe00f554565",
                }
              `);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,