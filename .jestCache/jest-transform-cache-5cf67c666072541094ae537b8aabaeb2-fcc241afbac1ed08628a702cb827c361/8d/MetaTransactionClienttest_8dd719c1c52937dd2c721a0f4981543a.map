{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/MetaTransactionClient.test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/MetaTransactionClient.test.ts"],"sourcesContent":["import { ValidationError, ValidationErrorCodes } from '@0x/api-utils';\nimport { MetaTransaction } from '@0x/protocol-utils';\nimport { BigNumber } from '@0x/utils';\nimport Axios, { AxiosInstance } from 'axios';\nimport AxiosMockAdapter from 'axios-mock-adapter';\nimport { BAD_REQUEST, NOT_ACCEPTABLE, OK } from 'http-status-codes';\nimport { TwirpError } from 'twirpscript';\nimport { APIErrorCodes, apiErrorCodesToReasons } from '../../src/core/errors';\nimport { GetQuote, GetQuoteResponse } from '../../src/proto-ts/meta_transaction.pb';\nimport { getV1QuoteAsync, getQuoteRpc, getV2QuoteAsync } from '../../src/utils/MetaTransactionClient';\nimport { bigNumberToProto, protoToBigNumber } from '../../src/utils/ProtoUtils';\nimport { GaslessTypes } from '../../src/core/types';\n\njest.mock('../../src/proto-ts/meta_transaction.pb');\nconst mockGetQuote = jest.mocked(GetQuote);\n\nlet axiosClient: AxiosInstance;\nlet axiosMock: AxiosMockAdapter;\n\ndescribe('MetaTransactionClient', () => {\n    const integratorAddress = '0x4ea754349ace5303c82f0d1d491041e042f2ad22';\n    const zeroExAddress = '0x4ea754349ace5303c82f0d1d491041e042f2ad22';\n\n    beforeAll(() => {\n        axiosClient = Axios.create();\n        axiosMock = new AxiosMockAdapter(axiosClient);\n    });\n    describe('getV1QuoteAsync', () => {\n        it('should get a metatransaction quote', async () => {\n            const exampleSuccessfulResponse = {\n                allowanceTarget: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\n                buyAmount: '1800054805473',\n                buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                buyTokenToEthRate: '0.851202',\n                chainId: 137,\n                estimatedGas: '1043459',\n                estimatedPriceImpact: '1.6301',\n                gas: '1043459',\n                gasPrice: '115200000000',\n                minimumProtocolFee: '0',\n                metaTransaction: {\n                    callData:\n                        '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000019eeab6030b00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac1897880000000000000000000000000000000000000000000000000000003f47a215c5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c4bc40000000000000000000000000000000000000000000000000000001f2c6f738e000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c4bc40000000000000000000000000000000000000000000000000000001f811895a7000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000001d30a7ac56da56396a000000000000000000000000000000000000000000000000000000e10b7768e500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e6973776170563300000000000000000000000000000000000000000000000000000000000008570b55cfac1897880000000000000000000000000000000000000000000000000000003fea147b29000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c630000000000000000000000000000000000000000000000f789bac21b62fed5ef',\n                    domain: {\n                        chainId: 137,\n                        verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\n                    },\n                    expirationTimeSeconds: '1660868679',\n                    feeAmount: '0',\n                    feeToken: '0x0000000000000000000000000000000000000000',\n                    maxGasPrice: '4294967296',\n                    minGasPrice: '1',\n                    salt: '32606650794224189614795510724011106220035660490560169776986607186708081701146',\n                    sender: '0x0000000000000000000000000000000000000000',\n                    signer: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                    value: '0',\n                },\n                metaTransactionHash: '0x16688406783c0e721a69e5c9f2727e2d30f24a0669522c1fb6937460348b4095',\n                price: '1800.054805',\n                protocolFee: '0',\n                sellAmount: '1000000000000000000000',\n                sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                sellTokenToEthRate: '0.000465167371348443',\n                sources: [\n                    {\n                        name: 'SushiSwap',\n                        proportion: '0',\n                    },\n                    {\n                        name: 'QuickSwap',\n                        proportion: '0.2308',\n                    },\n                    {\n                        name: 'DODO_V2',\n                        proportion: '0.07692',\n                    },\n                    {\n                        name: 'Uniswap_V3',\n                        proportion: '0.6923',\n                    },\n                ],\n                value: '0',\n            };\n\n            const url = new URL('https://quoteserver.pizza/quote');\n\n            axiosMock.onGet(url.toString()).replyOnce(OK, exampleSuccessfulResponse);\n\n            const response = await getV1QuoteAsync(axiosClient, url, {\n                buyToken: 'USDC',\n                chainId: 137,\n                integratorId: 'integrator-id',\n                sellToken: 'WETH',\n                sellAmount: new BigNumber(1000000000000000000000),\n                takerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n            });\n\n            expect(response?.trade.kind).toEqual(GaslessTypes.MetaTransaction);\n            expect(response?.trade.metaTransaction.getHash()).toEqual(exampleSuccessfulResponse.metaTransactionHash);\n            expect(response?.price).toEqual({\n                buyAmount: new BigNumber(exampleSuccessfulResponse.buyAmount),\n                buyTokenAddress: exampleSuccessfulResponse.buyTokenAddress,\n                gas: new BigNumber(exampleSuccessfulResponse.gas),\n                price: new BigNumber(exampleSuccessfulResponse.price),\n                sellAmount: new BigNumber(exampleSuccessfulResponse.sellAmount),\n                sellTokenAddress: exampleSuccessfulResponse.sellTokenAddress,\n            });\n        });\n\n        it('should return `null` when no liquidity is available', async () => {\n            const exampleNoLiquidityResponse = {\n                code: 100,\n                reason: 'Validation Failed',\n                validationErrors: [\n                    {\n                        field: 'sellAmount',\n                        code: 1004,\n                        reason: 'INSUFFICIENT_ASSET_LIQUIDITY',\n                    },\n                ],\n            };\n\n            const url = new URL('https://quoteserver.pizza/quote');\n\n            axiosMock.onGet(url.toString()).replyOnce(BAD_REQUEST, exampleNoLiquidityResponse);\n\n            const response = await getV1QuoteAsync(axiosClient, url, {\n                buyToken: 'USDC',\n                chainId: 137,\n                integratorId: 'integrator-id',\n                sellToken: '0x0000000000000000000000000000000000000000',\n                sellAmount: new BigNumber(1000000000000000000000),\n                takerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                slippagePercentage: new BigNumber(0.2),\n            });\n\n            expect(response).toBeNull();\n        });\n\n        it('should throw validation error when meta-transaction server returns the insufficient fund error', async () => {\n            const exampleInsufficientFundErrorResponse = {\n                code: APIErrorCodes.InsufficientFundsError,\n                reason: apiErrorCodesToReasons[APIErrorCodes.InsufficientFundsError],\n            };\n\n            const url = new URL('https://quoteserver.pizza/quote');\n\n            axiosMock.onGet(url.toString()).reply(BAD_REQUEST, exampleInsufficientFundErrorResponse);\n\n            await expect(() =>\n                getV1QuoteAsync(axiosClient, url, {\n                    buyToken: 'USDC',\n                    chainId: 137,\n                    integratorId: 'integrator-id',\n                    sellToken: '0x0000000000000000000000000000000000000000',\n                    sellAmount: new BigNumber(1000000000000000000000),\n                    takerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                    slippagePercentage: new BigNumber(0.2),\n                }),\n            ).rejects.toThrow(ValidationError);\n        });\n\n        it(\"should throw an error if the response doesn't match the no liquidity response + the insufficient fund error\", async () => {\n            const url = new URL('https://quoteserver.pizza/quote');\n\n            axiosMock.onGet(url.toString()).replyOnce(NOT_ACCEPTABLE);\n\n            await expect(() =>\n                getV1QuoteAsync(axiosClient, url, {\n                    buyToken: 'USDC',\n                    chainId: 137,\n                    integratorId: 'integrator-id',\n                    sellToken: '0x0000000000000000000000000000000000000000',\n                    sellAmount: new BigNumber(1000000000000000000000),\n                    takerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                }),\n            ).rejects.toThrow();\n        });\n\n        it('should throw if computed meta-transaction hash is different from the hash in response', async () => {\n            const exampleSuccessfulResponse = {\n                allowanceTarget: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\n                buyAmount: '1800054805473',\n                buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                buyTokenToEthRate: '0.851202',\n                chainId: 137,\n                estimatedGas: '1043459',\n                estimatedPriceImpact: '1.6301',\n                gas: '1043459',\n                gasPrice: '115200000000',\n                minimumProtocolFee: '0',\n                metaTransaction: {\n                    callData:\n                        '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000019eeab6030b00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac1897880000000000000000000000000000000000000000000000000000003f47a215c5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c4bc40000000000000000000000000000000000000000000000000000001f2c6f738e000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c4bc40000000000000000000000000000000000000000000000000000001f811895a7000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000001d30a7ac56da56396a000000000000000000000000000000000000000000000000000000e10b7768e500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e6973776170563300000000000000000000000000000000000000000000000000000000000008570b55cfac1897880000000000000000000000000000000000000000000000000000003fea147b29000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c630000000000000000000000000000000000000000000000f789bac21b62fed5ef',\n                    domain: {\n                        chainId: 137,\n                        verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\n                    },\n                    expirationTimeSeconds: '1660868679',\n                    feeAmount: '0',\n                    feeToken: '0x0000000000000000000000000000000000000000',\n                    maxGasPrice: '4294967296',\n                    minGasPrice: '1',\n                    salt: '32606650794224189614795510724011106220035660490560169776986607186708081701146',\n                    sender: '0x0000000000000000000000000000000000000000',\n                    signer: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                    value: '0',\n                },\n                metaTransactionHash: '0x16688406783c0e721a69e5c9f2727e2d30f24a0669522c1fb6937460348b4094',\n                price: '1800.054805',\n                protocolFee: '0',\n                sellAmount: '1000000000000000000000',\n                sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                sellTokenToEthRate: '0.000465167371348443',\n                sources: [\n                    {\n                        name: 'SushiSwap',\n                        proportion: '0',\n                    },\n                    {\n                        name: 'QuickSwap',\n                        proportion: '0.2308',\n                    },\n                    {\n                        name: 'DODO_V2',\n                        proportion: '0.07692',\n                    },\n                    {\n                        name: 'Uniswap_V3',\n                        proportion: '0.6923',\n                    },\n                ],\n                value: '0',\n            };\n\n            const url = new URL('https://quoteserver.pizza/quote');\n\n            axiosMock.onGet(url.toString()).replyOnce(OK, exampleSuccessfulResponse);\n\n            await expect(() =>\n                getV1QuoteAsync(axiosClient, url, {\n                    buyToken: 'USDC',\n                    chainId: 137,\n                    integratorId: 'integrator-id',\n                    sellToken: 'WETH',\n                    sellAmount: new BigNumber(1000000000000000000000),\n                    takerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                }),\n            ).rejects.toThrow();\n        });\n    });\n\n    describe('getV2QuoteAsync', () => {\n        it('should get a metatransaction quote', async () => {\n            const exampleSuccessfulResponse = {\n                allowanceTarget: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\n                buyAmount: '1800054805473',\n                buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                buyTokenToEthRate: '0.851202',\n                chainId: 137,\n                estimatedGas: '1043459',\n                estimatedPriceImpact: '1.6301',\n                gas: '1043459',\n                gasPrice: '115200000000',\n                minimumProtocolFee: '0',\n                trade: {\n                    kind: 'metatransaction',\n                    hash: '0x16688406783c0e721a69e5c9f2727e2d30f24a0669522c1fb6937460348b4095',\n                    metaTransaction: {\n                        callData:\n                            '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000019eeab6030b00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac1897880000000000000000000000000000000000000000000000000000003f47a215c5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c4bc40000000000000000000000000000000000000000000000000000001f2c6f738e000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c4bc40000000000000000000000000000000000000000000000000000001f811895a7000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000001d30a7ac56da56396a000000000000000000000000000000000000000000000000000000e10b7768e500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e6973776170563300000000000000000000000000000000000000000000000000000000000008570b55cfac1897880000000000000000000000000000000000000000000000000000003fea147b29000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c630000000000000000000000000000000000000000000000f789bac21b62fed5ef',\n                        chainId: 137,\n                        verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\n                        expirationTimeSeconds: '1660868679',\n                        feeAmount: '0',\n                        feeToken: '0x0000000000000000000000000000000000000000',\n                        maxGasPrice: '4294967296',\n                        minGasPrice: '1',\n                        salt: '32606650794224189614795510724011106220035660490560169776986607186708081701146',\n                        sender: '0x0000000000000000000000000000000000000000',\n                        signer: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                        value: '0',\n                    },\n                },\n                price: '1800.054805',\n                protocolFee: '0',\n                sellAmount: '1000000000000000000000',\n                sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                sellTokenToEthRate: '0.000465167371348443',\n                sources: [\n                    {\n                        name: 'SushiSwap',\n                        proportion: '0',\n                    },\n                    {\n                        name: 'QuickSwap',\n                        proportion: '0.2308',\n                    },\n                    {\n                        name: '\"Aave_V2',\n                        proportion: '0',\n                    },\n                    {\n                        name: 'DODO_V2',\n                        proportion: '0.07692',\n                    },\n                    {\n                        name: 'Uniswap_V3',\n                        proportion: '0.6923',\n                    },\n                ],\n                value: '0',\n                fees: {\n                    integratorFee: {\n                        type: 'volume',\n                        feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        feeAmount: '1000000000000000000',\n                        feeRecipient: integratorAddress,\n                        volumePercentage: '0.1',\n                    },\n                    zeroExFee: {\n                        type: 'integrator_share',\n                        feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        feeAmount: '1000000000000000',\n                        feeRecipient: zeroExAddress,\n                        integratorSharePercentage: '0.1',\n                    },\n                    gasFee: {\n                        type: 'gas',\n                        gasPrice: '115200000000',\n                        feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        feeAmount: '10000000',\n                        feeRecipient: null,\n                        estimatedGas: '1043459',\n                        feeTokenAmountPerBaseUnitNativeToken: '0.001',\n                    },\n                },\n            };\n\n            const url = new URL('https://quoteserver.pizza/quote');\n\n            axiosMock.onPost(url.toString()).replyOnce(OK, exampleSuccessfulResponse);\n\n            const response = await getV2QuoteAsync(axiosClient, url, {\n                buyToken: 'USDC',\n                chainId: 137,\n                integratorId: 'integrator-id',\n                sellToken: 'WETH',\n                sellAmount: new BigNumber(1000000000000000000000),\n                takerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n            });\n\n            expect(response?.trade.kind).toEqual(GaslessTypes.MetaTransaction);\n            expect(response?.trade.metaTransaction.getHash()).toEqual(exampleSuccessfulResponse.trade.hash);\n            expect(response?.price).toEqual({\n                buyAmount: new BigNumber(exampleSuccessfulResponse.buyAmount),\n                buyTokenAddress: exampleSuccessfulResponse.buyTokenAddress,\n                gas: new BigNumber(exampleSuccessfulResponse.gas),\n                price: new BigNumber(exampleSuccessfulResponse.price),\n                sellAmount: new BigNumber(exampleSuccessfulResponse.sellAmount),\n                sellTokenAddress: exampleSuccessfulResponse.sellTokenAddress,\n            });\n            expect(response?.sources).toEqual([\n                {\n                    name: 'QuickSwap',\n                    proportion: new BigNumber('0.2308'),\n                },\n                {\n                    name: 'DODO_V2',\n                    proportion: new BigNumber('0.07692'),\n                },\n                {\n                    name: 'Uniswap_V3',\n                    proportion: new BigNumber('0.6923'),\n                },\n            ]);\n            expect(response?.fees).toEqual({\n                integratorFee: {\n                    type: 'volume',\n                    feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                    feeAmount: new BigNumber(1000000000000000000),\n                    feeRecipient: integratorAddress,\n                    volumePercentage: new BigNumber(0.1),\n                },\n                zeroExFee: {\n                    type: 'integrator_share',\n                    feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                    feeAmount: new BigNumber(1000000000000000),\n                    feeRecipient: zeroExAddress,\n                    integratorSharePercentage: new BigNumber(0.1),\n                },\n                gasFee: {\n                    type: 'gas',\n                    gasPrice: new BigNumber(115200000000),\n                    feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                    feeAmount: new BigNumber(10000000),\n                    feeRecipient: null,\n                    estimatedGas: new BigNumber(1043459),\n                    feeTokenAmountPerBaseUnitNativeToken: new BigNumber(0.001),\n                },\n            });\n        });\n\n        it('should return `null` when no liquidity is available', async () => {\n            const exampleNoLiquidityResponse = {\n                code: 100,\n                reason: 'Validation Failed',\n                validationErrors: [\n                    {\n                        field: 'sellAmount',\n                        code: 1004,\n                        reason: 'INSUFFICIENT_ASSET_LIQUIDITY',\n                    },\n                ],\n            };\n\n            const url = new URL('https://quoteserver.pizza/quote');\n\n            axiosMock.onPost(url.toString()).replyOnce(BAD_REQUEST, exampleNoLiquidityResponse);\n\n            const response = await getV2QuoteAsync(axiosClient, url, {\n                buyToken: 'USDC',\n                chainId: 137,\n                integratorId: 'integrator-id',\n                sellToken: '0x0000000000000000000000000000000000000000',\n                sellAmount: new BigNumber(1000000000000000000000),\n                takerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                slippagePercentage: new BigNumber(0.2),\n            });\n\n            expect(response).toBeNull();\n        });\n\n        it('should throw validation error when meta-transaction server returns the insufficient fund error', async () => {\n            const exampleInsufficientFundErrorResponse = {\n                code: APIErrorCodes.InsufficientFundsError,\n                reason: apiErrorCodesToReasons[APIErrorCodes.InsufficientFundsError],\n            };\n\n            const url = new URL('https://quoteserver.pizza/quote');\n\n            axiosMock.onPost(url.toString()).reply(BAD_REQUEST, exampleInsufficientFundErrorResponse);\n\n            await expect(() =>\n                getV2QuoteAsync(axiosClient, url, {\n                    buyToken: 'USDC',\n                    chainId: 137,\n                    integratorId: 'integrator-id',\n                    sellToken: '0x0000000000000000000000000000000000000000',\n                    sellAmount: new BigNumber(1000000000000000000000),\n                    takerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                    slippagePercentage: new BigNumber(0.2),\n                }),\n            ).rejects.toThrow(ValidationError);\n        });\n\n        it(\"should throw an error if the response doesn't match the no liquidity response + the insufficient fund error\", async () => {\n            const url = new URL('https://quoteserver.pizza/quote');\n\n            axiosMock.onPost(url.toString()).replyOnce(NOT_ACCEPTABLE);\n\n            await expect(() =>\n                getV2QuoteAsync(axiosClient, url, {\n                    buyToken: 'USDC',\n                    chainId: 137,\n                    integratorId: 'integrator-id',\n                    sellToken: '0x0000000000000000000000000000000000000000',\n                    sellAmount: new BigNumber(1000000000000000000000),\n                    takerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                }),\n            ).rejects.toThrow();\n        });\n\n        it('should throw if computed meta-transaction hash is different from the hash in response', async () => {\n            const exampleSuccessfulResponse = {\n                allowanceTarget: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\n                buyAmount: '1800054805473',\n                buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                buyTokenToEthRate: '0.851202',\n                chainId: 137,\n                estimatedGas: '1043459',\n                estimatedPriceImpact: '1.6301',\n                gas: '1043459',\n                gasPrice: '115200000000',\n                minimumProtocolFee: '0',\n                trade: {\n                    kind: 'metatransaction',\n                    hash: '0x16688406783c0e721a69e5c9f2727e2d30f24a0669522c1fb6937460348b4094',\n                    metaTransaction: {\n                        callData:\n                            '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000019eeab6030b00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac1897880000000000000000000000000000000000000000000000000000003f47a215c5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c4bc40000000000000000000000000000000000000000000000000000001f2c6f738e000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c4bc40000000000000000000000000000000000000000000000000000001f811895a7000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000001d30a7ac56da56396a000000000000000000000000000000000000000000000000000000e10b7768e500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e6973776170563300000000000000000000000000000000000000000000000000000000000008570b55cfac1897880000000000000000000000000000000000000000000000000000003fea147b29000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c630000000000000000000000000000000000000000000000f789bac21b62fed5ef',\n                        chainId: 137,\n                        verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\n                        expirationTimeSeconds: '1660868679',\n                        feeAmount: '0',\n                        feeToken: '0x0000000000000000000000000000000000000000',\n                        maxGasPrice: '4294967296',\n                        minGasPrice: '1',\n                        salt: '32606650794224189614795510724011106220035660490560169776986607186708081701146',\n                        sender: '0x0000000000000000000000000000000000000000',\n                        signer: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                        value: '0',\n                    },\n                },\n                price: '1800.054805',\n                protocolFee: '0',\n                sellAmount: '1000000000000000000000',\n                sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                sellTokenToEthRate: '0.000465167371348443',\n                sources: [\n                    {\n                        name: 'SushiSwap',\n                        proportion: '0',\n                    },\n                    {\n                        name: 'QuickSwap',\n                        proportion: '0.2308',\n                    },\n                    {\n                        name: '\"Aave_V2',\n                        proportion: '0',\n                    },\n                    {\n                        name: 'DODO_V2',\n                        proportion: '0.07692',\n                    },\n                    {\n                        name: 'Uniswap_V3',\n                        proportion: '0.6923',\n                    },\n                ],\n                value: '0',\n                fees: {\n                    integratorFee: {\n                        type: 'volume',\n                        feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        feeAmount: '1000000000000000000',\n                        feeRecipient: integratorAddress,\n                        volumePercentage: '0.1',\n                    },\n                    zeroExFee: {\n                        type: 'integrator_share',\n                        feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        feeAmount: '1000000000000000',\n                        feeRecipient: zeroExAddress,\n                        integratorSharePercentage: '0.1',\n                    },\n                    gasFee: {\n                        type: 'gas',\n                        gasPrice: '115200000000',\n                        feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        feeAmount: '10000000',\n                        feeRecipient: null,\n                        estimatedGas: '1043459',\n                        feeTokenAmountPerBaseUnitNativeToken: '0.001',\n                    },\n                },\n            };\n\n            const url = new URL('https://quoteserver.pizza/quote');\n\n            axiosMock.onPost(url.toString()).replyOnce(OK, exampleSuccessfulResponse);\n\n            await expect(() =>\n                getV2QuoteAsync(axiosClient, url, {\n                    buyToken: 'USDC',\n                    chainId: 137,\n                    integratorId: 'integrator-id',\n                    sellToken: '0x0000000000000000000000000000000000000000',\n                    sellAmount: new BigNumber(1000000000000000000000),\n                    takerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                }),\n            ).rejects.toThrow();\n        });\n    });\n\n    describe('getQuoteRpc', () => {\n        it('gets a quote', async () => {\n            const mockResponse: GetQuoteResponse = {\n                metaTransaction: {\n                    callData:\n                        '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000019eeab6030b00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac1897880000000000000000000000000000000000000000000000000000003f47a215c5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c4bc40000000000000000000000000000000000000000000000000000001f2c6f738e000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c4bc40000000000000000000000000000000000000000000000000000001f811895a7000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000001d30a7ac56da56396a000000000000000000000000000000000000000000000000000000e10b7768e500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e6973776170563300000000000000000000000000000000000000000000000000000000000008570b55cfac1897880000000000000000000000000000000000000000000000000000003fea147b29000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c630000000000000000000000000000000000000000000000f789bac21b62fed5ef',\n                    chainId: 137,\n                    expirationTimeSeconds: bigNumberToProto(new BigNumber('1660868679')),\n                    feeAmount: bigNumberToProto(new BigNumber('0')),\n                    feeTokenAddress: '0x0000000000000000000000000000000000000000',\n                    maxGasPrice: bigNumberToProto(new BigNumber('4294967296')),\n                    minGasPrice: bigNumberToProto(new BigNumber('1')),\n                    salt: bigNumberToProto(\n                        new BigNumber('32606650794224189614795510724011106220035660490560169776986607186708081701146'),\n                    ),\n                    senderAddress: '0x0000000000000000000000000000000000000000',\n                    signerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                    value: bigNumberToProto(new BigNumber('0')),\n                    verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\n                },\n                quote: {\n                    allowanceTarget: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\n                    buyAmount: bigNumberToProto(new BigNumber('1800054805473')),\n                    buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                    buyTokenToNativeTokenRate: bigNumberToProto(new BigNumber('0.851202')),\n                    chainId: 137,\n                    estimatedGas: bigNumberToProto(new BigNumber('1043459')),\n                    estimatedPriceImpact: bigNumberToProto(new BigNumber('1.6301')),\n                    gas: bigNumberToProto(new BigNumber('1043459')),\n                    gasPrice: bigNumberToProto(new BigNumber('115200000000')),\n                    liquiditySources: [\n                        {\n                            hops: [],\n                            name: 'SushiSwap',\n                            proportion: bigNumberToProto(new BigNumber('0')),\n                        },\n                        {\n                            hops: [],\n                            name: 'QuickSwap',\n                            proportion: bigNumberToProto(new BigNumber('0.2308')),\n                        },\n                        {\n                            hops: [],\n                            name: 'DODO_V2',\n                            proportion: bigNumberToProto(new BigNumber('0.07692')),\n                        },\n                        {\n                            hops: [],\n                            name: 'Uniswap_V3',\n                            proportion: bigNumberToProto(new BigNumber('0.6923')),\n                        },\n                    ],\n                    minimumProtocolFee: bigNumberToProto(new BigNumber('0')),\n                    price: bigNumberToProto(new BigNumber('1800.054805')),\n                    protocolFee: bigNumberToProto(new BigNumber('0')),\n                    sellAmount: bigNumberToProto(new BigNumber('1000000000000000000000')),\n                    sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                    sellTokenToNativeTokenRate: bigNumberToProto(new BigNumber('0.000465167371348443')),\n                    value: bigNumberToProto(new BigNumber('0')),\n                },\n            };\n            mockGetQuote.mockResolvedValue(mockResponse);\n\n            const response = await getQuoteRpc({\n                buyToken: 'USDC',\n                chainId: 137,\n                integratorId: 'integrator-id',\n                sellToken: 'WETH',\n                sellAmount: new BigNumber(1000000000000000000000),\n                takerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n            });\n\n            expect(response?.metaTransaction).toBeInstanceOf(MetaTransaction);\n            expect(response?.metaTransaction.callData).toEqual(mockResponse.metaTransaction.callData);\n            expect(response?.metaTransaction.expirationTimeSeconds.toNumber()).toEqual(1660868679);\n            expect(response?.metaTransaction.maxGasPrice.toNumber()).toEqual(4294967296);\n\n            expect(response?.price.buyAmount.toNumber()).toEqual(\n                protoToBigNumber(mockResponse.quote.buyAmount).toNumber(),\n            );\n            expect(response?.price.sellAmount.toNumber()).toEqual(\n                protoToBigNumber(mockResponse.quote.sellAmount).toNumber(),\n            );\n            expect(response?.price.buyTokenAddress).toEqual(mockResponse.quote.buyTokenAddress);\n            expect(response?.price.sellTokenAddress).toEqual(mockResponse.quote.sellTokenAddress);\n        });\n\n        it('returns `null` when no liquidity is available', async () => {\n            const noLiquidityError: TwirpError = {\n                code: 'not_found',\n                msg: 'No liquidity exists',\n                meta: {\n                    validationErrors: JSON.stringify([\n                        {\n                            field: 'sellAmount',\n                            code: ValidationErrorCodes.ValueOutOfRange,\n                            reason: 'INSUFFICIENT_ASSET_LIQUIDITY',\n                        },\n                    ]),\n                },\n            };\n            mockGetQuote.mockRejectedValue(noLiquidityError);\n\n            const response = await getQuoteRpc({\n                buyToken: 'USDC',\n                chainId: 137,\n                integratorId: 'integrator-id',\n                sellToken: '0x0000000000000000000000000000000000000000',\n                sellAmount: new BigNumber(1000000000000000000000),\n                takerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                slippagePercentage: new BigNumber(0.2),\n            });\n\n            expect(response).toBeNull();\n        });\n\n        it('should throw validation error when meta-transaction server returns the insufficient fund error', async () => {\n            const exampleInsufficientFundError: TwirpError = {\n                code: 'failed_precondition',\n                msg: apiErrorCodesToReasons[APIErrorCodes.InsufficientFundsError],\n                meta: { zeroexErrorCode: APIErrorCodes.InsufficientFundsError.toString() },\n            };\n            mockGetQuote.mockRejectedValue(exampleInsufficientFundError);\n\n            await expect(() =>\n                getQuoteRpc({\n                    buyToken: 'USDC',\n                    chainId: 137,\n                    integratorId: 'integrator-id',\n                    sellToken: '0x0000000000000000000000000000000000000000',\n                    sellAmount: new BigNumber(1000000000000000000000),\n                    takerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                    slippagePercentage: new BigNumber(0.2),\n                }),\n            ).rejects.toThrow(ValidationError);\n\n            await expect(() =>\n                getQuoteRpc({\n                    buyToken: 'USDC',\n                    chainId: 137,\n                    integratorId: 'integrator-id',\n                    sellToken: '0x0000000000000000000000000000000000000000',\n                    buyAmount: new BigNumber(1000000000000000000000),\n                    takerAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n                    slippagePercentage: new BigNumber(0.2),\n                }),\n            ).rejects.toThrow(ValidationError);\n        });\n    });\n});\n"],"version":3}