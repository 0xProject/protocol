40390218a135fa7c343b228c2b3cf90d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable: custom-no-magic-numbers
const utils_1 = require("@0x/utils");
const axios_1 = require("axios");
const axios_mock_adapter_1 = require("axios-mock-adapter");
const HttpStatus = require("http-status-codes");
const ZeroExApiClient_1 = require("../../src/utils/ZeroExApiClient");
let axiosClient;
let axiosMock;
describe('ZeroExApiClient', () => {
    beforeAll(() => {
        axiosClient = axios_1.default.create();
        axiosMock = new axios_mock_adapter_1.default(axiosClient);
    });
    afterEach(() => {
        axiosMock.reset();
    });
    describe('fetchAmmQuoteAsync', () => {
        it('returns the AMM quote from 0x API', async () => {
            const zeroExApiClient = new ZeroExApiClient_1.ZeroExApiClient(axiosClient, 'api-key-for-rfq', {
                chainId: 1,
                zeroExClientBaseUrl: 'http://0x-chain-id-1',
            });
            axiosMock.onGet('http://0x-chain-id-1/swap/v1/quote').replyOnce(HttpStatus.OK, {
                buyAmount: '2040568023',
                sellAmount: '1000000000000000000',
                estimatedGas: '126183',
                gasPrice: '73000000000',
                expectedSlippage: '-0.0004065694347781162427479482993648',
                decodedUniqueId: 'a-quoteid-with-timestamp',
            });
            const ammQuote = await zeroExApiClient.fetchAmmQuoteAsync({
                makerToken: 'tokenB',
                takerToken: 'tokenA',
                takerAmount: new utils_1.BigNumber('1000000000000000000'),
                affiliateAddress: 'rfq-affiliate-address',
            });
            expect(axiosMock.history.get[0].headers['0x-api-key']).toBe('api-key-for-rfq');
            expect(axiosMock.history.get[0].params).toEqual({
                buyToken: 'tokenB',
                sellToken: 'tokenA',
                sellAmount: '1000000000000000000',
                affiliateAddress: 'rfq-affiliate-address',
                excludedSources: '0x',
            });
            expect(ammQuote === null || ammQuote === void 0 ? void 0 : ammQuote.makerAmount.toString()).toEqual('2040568023');
            expect(ammQuote === null || ammQuote === void 0 ? void 0 : ammQuote.takerAmount.toString()).toEqual('1000000000000000000');
            expect(ammQuote === null || ammQuote === void 0 ? void 0 : ammQuote.estimatedGasFeeWei.toString()).toEqual('9211359000000000');
            expect(ammQuote === null || ammQuote === void 0 ? void 0 : ammQuote.expectedSlippage.toString()).toEqual('-0.0004065694347781162427479482993648');
            expect(ammQuote === null || ammQuote === void 0 ? void 0 : ammQuote.decodedUniqueId).toEqual('a-quoteid-with-timestamp');
        });
        it('returns null when 0x API returns an error', async () => {
            const zeroExApiClient = new ZeroExApiClient_1.ZeroExApiClient(axiosClient, 'api-key-for-rfq', {
                chainId: 1,
                zeroExClientBaseUrl: 'http://0x-chain-id-1',
            });
            axiosMock.onGet('http://0x-chain-id-1/swap/v1/quote').replyOnce(HttpStatus.INTERNAL_SERVER_ERROR);
            const ammQuote = await zeroExApiClient.fetchAmmQuoteAsync({
                makerToken: 'tokenB',
                takerToken: 'tokenA',
                takerAmount: new utils_1.BigNumber('1000000000000000000'),
            });
            expect(ammQuote).toEqual(null);
        });
        it('returns null when 0x API returns unexpected response body', async () => {
            const zeroExApiClient = new ZeroExApiClient_1.ZeroExApiClient(axiosClient, 'api-key-for-rfq', {
                chainId: 1,
                zeroExClientBaseUrl: 'http://0x-chain-id-1',
            });
            axiosMock.onGet('http://0x-chain-id-1/swap/v1/quote').replyOnce(HttpStatus.OK, {
                // Missing buyAmount
                sellAmount: '1000000000000000000',
                estimatedGas: '126183',
                gasPrice: '73000000000',
                expectedSlippage: '-0.0004065694347781162427479482993648',
                decodedUniqueId: 'a-quoteid-with-timestamp',
            });
            const ammQuote = await zeroExApiClient.fetchAmmQuoteAsync({
                makerToken: 'tokenB',
                takerToken: 'tokenA',
                takerAmount: new utils_1.BigNumber('1000000000000000000'),
            });
            expect(ammQuote).toEqual(null);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,