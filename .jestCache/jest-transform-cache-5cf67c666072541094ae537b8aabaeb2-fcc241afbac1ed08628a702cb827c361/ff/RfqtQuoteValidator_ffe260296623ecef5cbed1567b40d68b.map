{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/RfqtQuoteValidator.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/RfqtQuoteValidator.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\r\nimport { Counter } from 'prom-client';\r\n\r\nimport { ONE_SECOND_MS } from '../core/constants';\r\nimport { logger } from '../logger';\r\nimport { QuoteContext } from '../services/types';\r\nimport { RfqtV2Price } from '../core/types';\r\n\r\nconst ORDER_FULLY_FILLABLE = new Counter({\r\n    name: 'rfqt_order_fully_fillable',\r\n    help: 'Number of fully fillable rfqt orders',\r\n    labelNames: ['chainId', 'makerUri'],\r\n});\r\nconst ORDER_PARTIALLY_FILLABLE = new Counter({\r\n    name: 'rfqt_order_partially_fillable',\r\n    help: 'Number of partially fillable rfqt orders',\r\n    labelNames: ['chainId', 'makerUri'],\r\n});\r\nconst ORDER_NOT_FILLABLE = new Counter({\r\n    name: 'rfqt_order_not_fillable',\r\n    help: 'Number of rfqt orders that are not fillable',\r\n    labelNames: ['chainId', 'makerUri'],\r\n});\r\n\r\n/**\r\n * Performs basic validation on fetched prices from Market Makers.\r\n *\r\n * Filters prices that:\r\n * - are for the wrong pair\r\n * - expire in less than the validity window\r\n *\r\n * @param prices Prices fetched from Market Makers\r\n * @returns Array of valid prices\r\n */\r\nexport function validateV2Prices(\r\n    prices: RfqtV2Price[],\r\n    quoteContext: QuoteContext,\r\n    validityWindowMs: number,\r\n    now: Date = new Date(),\r\n): RfqtV2Price[] {\r\n    // calculate minimum expiry threshold\r\n    const nowSeconds = new BigNumber(now.getTime()).div(ONE_SECOND_MS);\r\n    const validityWindowS = new BigNumber(validityWindowMs).div(ONE_SECOND_MS);\r\n    const expiryThreshold = nowSeconds.plus(validityWindowS);\r\n\r\n    return prices\r\n        .filter((price) => price.makerToken === quoteContext.makerToken && price.takerToken === quoteContext.takerToken)\r\n        .filter((price) => price.expiry.gte(expiryThreshold));\r\n}\r\n\r\n/**\r\n * Calculates fillable amounts based on the amount of assets Market Makers can provide for the trading pair.\r\n * If the maker has enough balance, return full amounts originally requested from the order.\r\n * If not, scale down fillable taker amount based on maker balance.\r\n *\r\n * @param prices Prices fetched from Market Makers\r\n * @param chainId Chain ID of fetched prices\r\n * @param quotedMakerBalances Array of cached market maker balances\r\n * @returns Array of maker and taker fillable amounts\r\n */\r\nexport function getRfqtV2FillableAmounts(\r\n    prices: RfqtV2Price[],\r\n    chainId: number,\r\n    quotedMakerBalances?: BigNumber[],\r\n): { fillableMakerAmount: BigNumber; fillableTakerAmount: BigNumber }[] {\r\n    // if no maker balances are present, assume all orders are fully fillable\r\n    if (!quotedMakerBalances) {\r\n        return prices.map((price) => ({\r\n            fillableMakerAmount: price.makerAmount,\r\n            fillableTakerAmount: price.takerAmount,\r\n        }));\r\n    }\r\n\r\n    return prices.map((price, i) => {\r\n        // if requested maker amount is zero, order is not fillable\r\n        if (price.makerAmount.lte(0)) {\r\n            ORDER_NOT_FILLABLE.inc({\r\n                chainId,\r\n                makerUri: price.makerUri,\r\n            });\r\n            logger.warn({ price }, 'Market maker provided an empty order');\r\n            return {\r\n                fillableMakerAmount: new BigNumber(0),\r\n                fillableTakerAmount: new BigNumber(0),\r\n            };\r\n        }\r\n\r\n        const makerBalance: BigNumber = quotedMakerBalances[i];\r\n\r\n        // quote is fully fillable\r\n        if (makerBalance.gte(price.makerAmount)) {\r\n            ORDER_FULLY_FILLABLE.inc({\r\n                chainId,\r\n                makerUri: price.makerUri,\r\n            });\r\n            return {\r\n                fillableMakerAmount: price.makerAmount,\r\n                fillableTakerAmount: price.takerAmount,\r\n            };\r\n        }\r\n\r\n        // order may be partially fillable\r\n        // scale down fillable taker amount according to available maker balance\r\n        const partialFillableTakerAmount = price.takerAmount.times(makerBalance).idiv(price.makerAmount);\r\n        ORDER_PARTIALLY_FILLABLE.inc({\r\n            chainId,\r\n            makerUri: price.makerUri,\r\n        });\r\n        logger.warn(\r\n            {\r\n                price,\r\n                makerAmount: price.makerAmount,\r\n                makerBalance,\r\n                takerAmount: price.takerAmount,\r\n                partialFillableTakerAmount,\r\n            },\r\n            'Market maker can only partially cover an order',\r\n        );\r\n        return {\r\n            fillableMakerAmount: makerBalance,\r\n            fillableTakerAmount: partialFillableTakerAmount,\r\n        };\r\n    });\r\n}\r\n"],"version":3}