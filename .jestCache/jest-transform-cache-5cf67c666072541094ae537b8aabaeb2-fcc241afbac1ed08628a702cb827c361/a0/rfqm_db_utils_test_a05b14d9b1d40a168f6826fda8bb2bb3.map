{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfqm_db_utils_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfqm_db_utils_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\r\n\r\nimport { OtcOrder } from '@0x/protocol-utils';\r\nimport { BigNumber } from '@0x/utils';\r\n\r\nimport { ZERO } from '../../src/core/constants';\r\nimport { feeToStoredFee } from '../../src/core/fee_utils';\r\nimport {\r\n    DefaultFeeDetailsDeprecated,\r\n    Fee,\r\n    FeeWithDetails,\r\n    GasOnlyFeeDetailsDeprecated,\r\n    MarginBasedFeeDetailsDeprecated,\r\n} from '../../src/core/types';\r\nimport { otcOrderToStoredOtcOrder, storedOtcOrderToOtcOrder } from '../../src/utils/rfqm_db_utils';\r\n\r\ndescribe('RFQM DB utils', () => {\r\n    describe('storedOtcOrderToOtcOrder and otcOrderToStoredOtcOrder', () => {\r\n        it('should map there and back without data corruption', () => {\r\n            // it's expired if it's over 9000\r\n            const expiry = new BigNumber(9000);\r\n            const nonce = new BigNumber(1637085289);\r\n            const chainId = 1;\r\n            const order = new OtcOrder({\r\n                txOrigin: '0x0000000000000000000000000000000000000000',\r\n                taker: '0x1111111111111111111111111111111111111111',\r\n                maker: '0x2222222222222222222222222222222222222222',\r\n                makerToken: '0x3333333333333333333333333333333333333333',\r\n                takerToken: '0x4444444444444444444444444444444444444444',\r\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(expiry, ZERO, nonce),\r\n                chainId,\r\n                verifyingContract: '0x0000000000000000000000000000000000000000',\r\n            });\r\n            const processedOrder = storedOtcOrderToOtcOrder(otcOrderToStoredOtcOrder(order));\r\n            expect(processedOrder).toEqual(order);\r\n        });\r\n    });\r\n    describe('feeToStoredFee', () => {\r\n        it('should convert Fee without details correctly', () => {\r\n            // Given\r\n            const fee: Fee = {\r\n                token: '0xatoken',\r\n                amount: new BigNumber(5),\r\n                type: 'fixed',\r\n            };\r\n\r\n            // When\r\n            const storedFee = feeToStoredFee(fee);\r\n\r\n            // Expect\r\n            expect(storedFee.type).toEqual(fee.type);\r\n            expect(storedFee.token).toEqual(fee.token);\r\n            expect(storedFee.amount).toEqual(fee.amount.toString());\r\n            expect(storedFee.details).toEqual(undefined);\r\n            expect(storedFee.breakdown).toEqual(undefined);\r\n            expect(storedFee.conversionRates).toEqual(undefined);\r\n        });\r\n\r\n        it('should convert Fee with gasOnly details correctly', () => {\r\n            // Given\r\n            const fee: FeeWithDetails & { details: GasOnlyFeeDetailsDeprecated } = {\r\n                token: '0xatoken',\r\n                amount: new BigNumber(5),\r\n                type: 'fixed',\r\n                details: {\r\n                    kind: 'gasOnly',\r\n                    feeModelVersion: 0,\r\n                    gasFeeAmount: new BigNumber(5),\r\n                    gasPrice: new BigNumber(50),\r\n                },\r\n                breakdown: {\r\n                    gas: {\r\n                        amount: new BigNumber(100),\r\n                        details: {\r\n                            gasPrice: new BigNumber(50),\r\n                            estimatedGas: new BigNumber(1),\r\n                        },\r\n                    },\r\n                },\r\n                conversionRates: {\r\n                    nativeTokenBaseUnitPriceUsd: null,\r\n                    feeTokenBaseUnitPriceUsd: null,\r\n                    takerTokenBaseUnitPriceUsd: null,\r\n                    makerTokenBaseUnitPriceUsd: null,\r\n                },\r\n            };\r\n\r\n            // When\r\n            const storedFee = feeToStoredFee(fee);\r\n\r\n            // Expect\r\n            expect(storedFee.type).toEqual(fee.type);\r\n            expect(storedFee.token).toEqual(fee.token);\r\n            expect(storedFee.amount).toEqual(fee.amount.toString());\r\n            expect(storedFee.details.kind).toEqual(fee.details.kind);\r\n            expect(storedFee.details.feeModelVersion).toEqual(fee.details.feeModelVersion);\r\n            expect(storedFee.details.gasFeeAmount).toEqual(fee.details.gasFeeAmount.toString());\r\n            expect(storedFee.details.gasPrice).toEqual(fee.details.gasPrice.toString());\r\n\r\n            expect(storedFee.breakdown.gas.amount).toEqual(fee.breakdown.gas?.amount.toString());\r\n            expect(storedFee.breakdown.gas.details.gasPrice).toEqual(fee.breakdown.gas?.details.gasPrice.toString());\r\n            expect(storedFee.breakdown.gas.details.estimatedGas).toEqual(\r\n                fee.breakdown.gas?.details.estimatedGas.toString(),\r\n            );\r\n            expect(storedFee.breakdown.zeroEx).toEqual(undefined);\r\n\r\n            expect(storedFee.conversionRates.nativeTokenBaseUnitPriceUsd).toEqual(undefined);\r\n            expect(storedFee.conversionRates.feeTokenBaseUnitPriceUsd).toEqual(undefined);\r\n            expect(storedFee.conversionRates.takerTokenBaseUnitPriceUsd).toEqual(undefined);\r\n            expect(storedFee.conversionRates.makerTokenBaseUnitPriceUsd).toEqual(undefined);\r\n        });\r\n\r\n        it('should convert Fee with default details correctly', () => {\r\n            // Given\r\n            const fee: FeeWithDetails & { details: DefaultFeeDetailsDeprecated } = {\r\n                token: '0xatoken',\r\n                amount: new BigNumber(5),\r\n                type: 'fixed',\r\n                details: {\r\n                    kind: 'default',\r\n                    feeModelVersion: 1,\r\n                    gasFeeAmount: new BigNumber(5),\r\n                    gasPrice: new BigNumber(50),\r\n                    tradeSizeBps: 4,\r\n                    zeroExFeeAmount: new BigNumber(10),\r\n                    feeTokenBaseUnitPriceUsd: new BigNumber(3e-15),\r\n                    takerTokenBaseUnitPriceUsd: null,\r\n                    makerTokenBaseUnitPriceUsd: new BigNumber(1e-18),\r\n                },\r\n                breakdown: {\r\n                    gas: {\r\n                        amount: new BigNumber(5),\r\n                        details: {\r\n                            gasPrice: new BigNumber(50),\r\n                            estimatedGas: new BigNumber(1),\r\n                        },\r\n                    },\r\n                    zeroEx: {\r\n                        amount: new BigNumber(10),\r\n                        details: {\r\n                            kind: 'volume',\r\n                            tradeSizeBps: 4,\r\n                        },\r\n                    },\r\n                },\r\n                conversionRates: {\r\n                    nativeTokenBaseUnitPriceUsd: new BigNumber(3e-15),\r\n                    feeTokenBaseUnitPriceUsd: new BigNumber(3e-15),\r\n                    takerTokenBaseUnitPriceUsd: null,\r\n                    makerTokenBaseUnitPriceUsd: new BigNumber(1e-18),\r\n                },\r\n            };\r\n\r\n            // When\r\n            const storedFee = feeToStoredFee(fee);\r\n\r\n            // Expect\r\n            expect(storedFee.type).toEqual(fee.type);\r\n            expect(storedFee.token).toEqual(fee.token);\r\n            expect(storedFee.amount).toEqual(fee.amount.toString());\r\n            expect(storedFee.details.kind).toEqual(fee.details.kind);\r\n            expect(storedFee.details.feeModelVersion).toEqual(fee.details.feeModelVersion);\r\n            expect(storedFee.details.gasFeeAmount).toEqual(fee.details.gasFeeAmount.toString());\r\n            expect(storedFee.details.gasPrice).toEqual(fee.details.gasPrice.toString());\r\n            expect(storedFee.details.tradeSizeBps).toEqual(fee.details.tradeSizeBps);\r\n            expect(storedFee.details.zeroExFeeAmount).toEqual(fee.details.zeroExFeeAmount.toString());\r\n            expect(storedFee.details.feeTokenBaseUnitPriceUsd).toEqual(\r\n                fee.details.feeTokenBaseUnitPriceUsd?.toString(),\r\n            );\r\n            expect(storedFee.details.takerTokenBaseUnitPriceUsd).toEqual(undefined);\r\n            expect(storedFee.details.makerTokenBaseUnitPriceUsd).toEqual(\r\n                fee.details.makerTokenBaseUnitPriceUsd?.toString(),\r\n            );\r\n\r\n            expect(storedFee.breakdown.gas.amount).toEqual(fee.breakdown.gas?.amount.toString());\r\n            expect(storedFee.breakdown.gas.details.gasPrice).toEqual(fee.breakdown.gas?.details.gasPrice.toString());\r\n            expect(storedFee.breakdown.gas.details.estimatedGas).toEqual(\r\n                fee.breakdown.gas?.details.estimatedGas.toString(),\r\n            );\r\n            expect(storedFee.breakdown.zeroEx.amount).toEqual(fee.breakdown.zeroEx?.amount.toString());\r\n            expect(storedFee.breakdown.zeroEx.details.kind).toEqual(fee.breakdown.zeroEx?.details.kind);\r\n            expect(storedFee.breakdown.zeroEx.details.tradeSizeBps).toEqual(4);\r\n\r\n            expect(storedFee.conversionRates.nativeTokenBaseUnitPriceUsd).toEqual(\r\n                fee.conversionRates.nativeTokenBaseUnitPriceUsd?.toString(),\r\n            );\r\n            expect(storedFee.conversionRates.feeTokenBaseUnitPriceUsd).toEqual(\r\n                fee.conversionRates.feeTokenBaseUnitPriceUsd?.toString(),\r\n            );\r\n            expect(storedFee.conversionRates.takerTokenBaseUnitPriceUsd).toEqual(undefined);\r\n            expect(storedFee.conversionRates.makerTokenBaseUnitPriceUsd).toEqual(\r\n                fee.conversionRates.makerTokenBaseUnitPriceUsd?.toString(),\r\n            );\r\n        });\r\n\r\n        it('should convert Fee with margin based details correctly', () => {\r\n            // Given\r\n            const fee: FeeWithDetails & { details: MarginBasedFeeDetailsDeprecated } = {\r\n                token: '0xatoken',\r\n                amount: new BigNumber(5),\r\n                type: 'fixed',\r\n                details: {\r\n                    kind: 'margin',\r\n                    feeModelVersion: 1,\r\n                    gasFeeAmount: new BigNumber(5),\r\n                    gasPrice: new BigNumber(50),\r\n                    margin: new BigNumber(4570),\r\n                    marginRakeRatio: 0.35,\r\n                    zeroExFeeAmount: new BigNumber(10),\r\n                    feeTokenBaseUnitPriceUsd: new BigNumber(3e-15),\r\n                    takerTokenBaseUnitPriceUsd: new BigNumber(1e-18),\r\n                    makerTokenBaseUnitPriceUsd: null,\r\n                },\r\n                breakdown: {\r\n                    gas: {\r\n                        amount: new BigNumber(5),\r\n                        details: {\r\n                            gasPrice: new BigNumber(50),\r\n                            estimatedGas: new BigNumber(1),\r\n                        },\r\n                    },\r\n                    zeroEx: {\r\n                        amount: new BigNumber(10),\r\n                        details: {\r\n                            kind: 'price_improvement',\r\n                            priceImprovement: new BigNumber(4570),\r\n                            rakeRatio: 0.35,\r\n                        },\r\n                    },\r\n                },\r\n                conversionRates: {\r\n                    nativeTokenBaseUnitPriceUsd: new BigNumber(3e-15),\r\n                    feeTokenBaseUnitPriceUsd: new BigNumber(3e-15),\r\n                    takerTokenBaseUnitPriceUsd: new BigNumber(1e-18),\r\n                    makerTokenBaseUnitPriceUsd: null,\r\n                },\r\n            };\r\n\r\n            // When\r\n            const storedFee = feeToStoredFee(fee);\r\n\r\n            // Expect\r\n            expect(storedFee.type).toEqual(fee.type);\r\n            expect(storedFee.token).toEqual(fee.token);\r\n            expect(storedFee.amount).toEqual(fee.amount.toString());\r\n            expect(storedFee.details.kind).toEqual(fee.details.kind);\r\n            expect(storedFee.details.feeModelVersion).toEqual(fee.details.feeModelVersion);\r\n            expect(storedFee.details.gasFeeAmount).toEqual(fee.details.gasFeeAmount.toString());\r\n            expect(storedFee.details.gasPrice).toEqual(fee.details.gasPrice.toString());\r\n            expect(storedFee.details.margin).toEqual(fee.details.margin.toString());\r\n            expect(storedFee.details.marginRakeRatio).toEqual(fee.details.marginRakeRatio);\r\n            expect(storedFee.details.zeroExFeeAmount).toEqual(fee.details.zeroExFeeAmount.toString());\r\n            expect(storedFee.details.feeTokenBaseUnitPriceUsd).toEqual(\r\n                fee.details.feeTokenBaseUnitPriceUsd?.toString(),\r\n            );\r\n            expect(storedFee.details.takerTokenBaseUnitPriceUsd).toEqual(\r\n                fee.details.takerTokenBaseUnitPriceUsd?.toString(),\r\n            );\r\n            expect(storedFee.details.makerTokenBaseUnitPriceUsd).toEqual(undefined);\r\n\r\n            expect(storedFee.breakdown.gas.amount).toEqual(fee.breakdown.gas?.amount.toString());\r\n            expect(storedFee.breakdown.gas.details.gasPrice).toEqual(fee.breakdown.gas?.details.gasPrice.toString());\r\n            expect(storedFee.breakdown.gas.details.estimatedGas).toEqual(\r\n                fee.breakdown.gas?.details.estimatedGas.toString(),\r\n            );\r\n            expect(storedFee.breakdown.zeroEx.amount).toEqual(fee.breakdown.zeroEx?.amount.toString());\r\n            expect(storedFee.breakdown.zeroEx.details.kind).toEqual(fee.breakdown.zeroEx?.details.kind);\r\n            expect(storedFee.breakdown.zeroEx.details.priceImprovement).toEqual('4570');\r\n            expect(storedFee.breakdown.zeroEx.details.rakeRatio).toEqual(0.35);\r\n\r\n            expect(storedFee.conversionRates.nativeTokenBaseUnitPriceUsd).toEqual(\r\n                fee.conversionRates.nativeTokenBaseUnitPriceUsd?.toString(),\r\n            );\r\n            expect(storedFee.conversionRates.feeTokenBaseUnitPriceUsd).toEqual(\r\n                fee.conversionRates.feeTokenBaseUnitPriceUsd?.toString(),\r\n            );\r\n            expect(storedFee.conversionRates.takerTokenBaseUnitPriceUsd).toEqual(\r\n                fee.conversionRates.takerTokenBaseUnitPriceUsd?.toString(),\r\n            );\r\n            expect(storedFee.conversionRates.makerTokenBaseUnitPriceUsd).toEqual(undefined);\r\n        });\r\n    });\r\n});\r\n"],"version":3}