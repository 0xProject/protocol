c0544c3e4f1b2bf527d7e4840005c70f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable: custom-no-magic-numbers
const axios_1 = require("axios");
const axios_mock_adapter_1 = require("axios-mock-adapter");
const HttpStatus = require("http-status-codes");
const TokenPriceOracle_1 = require("../../src/utils/TokenPriceOracle");
let axiosClient;
let axiosMock;
describe('TokenPriceOracle', () => {
    beforeAll(() => {
        axiosClient = axios_1.default.create();
        axiosMock = new axios_mock_adapter_1.default(axiosClient);
    });
    afterEach(() => {
        axiosMock.reset();
        jest.useRealTimers();
    });
    describe('batchFetchTokenPriceAsync', () => {
        it('returns the price in USD for all requested tokens', async () => {
            var _a, _b;
            const fakeDefinedFiResponseForUSDC = {
                data: {
                    getPrice: {
                        priceUsd: 1.1,
                    },
                },
            };
            const fakeDefinedUSDCResponseForETH = {
                data: {
                    getPrice: {
                        priceUsd: 3000.01,
                    },
                },
            };
            axiosMock
                .onPost('https://api.defined.fi')
                .replyOnce(HttpStatus.OK, fakeDefinedFiResponseForUSDC)
                .onPost('https://api.defined.fi')
                .replyOnce(HttpStatus.OK, fakeDefinedUSDCResponseForETH);
            const tokenPriceOracle = new TokenPriceOracle_1.TokenPriceOracle(axiosClient, 'fakeApiKey', 'https://api.defined.fi');
            const result = await tokenPriceOracle.batchFetchTokenPriceAsync([
                { chainId: 1, tokenAddress: '0xUSDCContractAddress', tokenDecimals: 18 },
                { chainId: 3, tokenAddress: '0xWETHContractAddress', tokenDecimals: 18 },
            ]);
            expect(axiosMock.history.post[0].headers['x-api-key']).toBe('fakeApiKey');
            const expectedGraphqlQuery = `
                query getPrice {
                    getPrice(address: "0xUSDCContractAddress", networkId: 1) {
                        priceUsd
                    }
                }
            `;
            const actualGraphQlQuery = JSON.parse(axiosMock.history.post[0].data).query;
            // Strip out all indentations before comparing the body
            expect(actualGraphQlQuery.replace(/^\s+/gm, '')).toBe(expectedGraphqlQuery.replace(/^\s+/gm, ''));
            expect((_a = result[0]) === null || _a === void 0 ? void 0 : _a.toNumber()).toBe(1.1e-18);
            expect((_b = result[1]) === null || _b === void 0 ? void 0 : _b.toNumber()).toBe(3000.01e-18);
        });
        it("returns null priceInUsd when it couldn't fetch the price", async () => {
            const tokenPriceOracle = new TokenPriceOracle_1.TokenPriceOracle(axiosClient, 'fakeApiKey', 'https://api.defined.fi');
            // Test the case when server returns non-200 response
            axiosMock.onPost('https://api.defined.fi').replyOnce(HttpStatus.INTERNAL_SERVER_ERROR);
            let result = await tokenPriceOracle.batchFetchTokenPriceAsync([
                { chainId: 1, tokenAddress: '0xUSDCContractAddress', tokenDecimals: 18 },
            ]);
            expect(result[0]).toBe(null);
            // Test the case when server returns 200 but with unexpected response's body
            //
            // This is an actual response captured from defined.fi when we provide an invalid
            // token address to their getPrice endpoint
            const fakeDefinedResponseForInvalidToken = {
                data: {
                    getPrice: null,
                },
                errors: [
                    {
                        path: ['getPrice'],
                        data: null,
                        errorType: 'TypeError',
                        errorInfo: null,
                        locations: [
                            {
                                line: 2,
                                column: 1,
                                sourceName: null,
                            },
                        ],
                        message: "Cannot read property 'price' of undefined",
                    },
                ],
            };
            axiosMock.onPost('https://api.defined.fi').replyOnce(HttpStatus.OK, fakeDefinedResponseForInvalidToken);
            result = await tokenPriceOracle.batchFetchTokenPriceAsync([
                { chainId: 1, tokenAddress: '0xInvalidContractAddress', tokenDecimals: 18 },
            ]);
            expect(result[0]).toBe(null);
        });
        it('caches the result', async () => {
            var _a, _b;
            const tokenPriceOracle = new TokenPriceOracle_1.TokenPriceOracle(axiosClient, 'fakeApiKey', 'https://api.defined.fi');
            const fakeDefinedFiResponseForUSDC = {
                data: {
                    getPrice: {
                        priceUsd: 1.1,
                    },
                },
            };
            const fakeDefinedFiResponseForUSDCChanged = {
                data: {
                    getPrice: {
                        priceUsd: 2.1,
                    },
                },
            };
            axiosMock
                .onPost('https://api.defined.fi')
                .replyOnce(HttpStatus.OK, fakeDefinedFiResponseForUSDC)
                .onPost('https://api.defined.fi')
                .replyOnce(HttpStatus.OK, fakeDefinedFiResponseForUSDCChanged);
            let result = await tokenPriceOracle.batchFetchTokenPriceAsync([
                { chainId: 1, tokenAddress: '0xUSDCContractAddress', tokenDecimals: 18 },
            ]);
            expect((_a = result[0]) === null || _a === void 0 ? void 0 : _a.toNumber()).toBe(1.1e-18);
            // Make another token price fetch request, the price should still be 1.1 because it didn't make another request to
            // defined.fi API
            result = await tokenPriceOracle.batchFetchTokenPriceAsync([
                { chainId: 1, tokenAddress: '0xUSDCContractAddress', tokenDecimals: 18 },
            ]);
            // TokenPriceOracle shouldn't make another request to api.defined.fi
            expect(axiosMock.history.post).toHaveLength(1);
            expect((_b = result[0]) === null || _b === void 0 ? void 0 : _b.toNumber()).toBe(1.1e-18);
        });
        it('invalidates cache after configured TTL', async () => {
            var _a, _b;
            // Set Cache TTL to 5 seconds
            const tokenPriceOracle = new TokenPriceOracle_1.TokenPriceOracle(axiosClient, 'fakeApiKey', 'https://api.defined.fi', 5000);
            const fakeDefinedFiResponseForUSDC = {
                data: {
                    getPrice: {
                        priceUsd: 1.1,
                    },
                },
            };
            const fakeDefinedFiResponseForUSDCChanged = {
                data: {
                    getPrice: {
                        priceUsd: 2.1,
                    },
                },
            };
            axiosMock
                .onPost('https://api.defined.fi')
                .replyOnce(HttpStatus.OK, fakeDefinedFiResponseForUSDC)
                .onPost('https://api.defined.fi')
                .replyOnce(HttpStatus.OK, fakeDefinedFiResponseForUSDCChanged);
            let result = await tokenPriceOracle.batchFetchTokenPriceAsync([
                { chainId: 1, tokenAddress: '0xUSDCContractAddress', tokenDecimals: 18 },
            ]);
            expect((_a = result[0]) === null || _a === void 0 ? void 0 : _a.toNumber()).toBe(1.1e-18);
            // Fast forward the system time 5.1 seconds
            jest.useFakeTimers().setSystemTime(Date.now() + 5100);
            // Make another token price fetch request, the price should be 2.1 now since the cache is invalidated
            // so the TokenPriceOracle fetched the price from upstream again.
            result = await tokenPriceOracle.batchFetchTokenPriceAsync([
                { chainId: 1, tokenAddress: '0xUSDCContractAddress', tokenDecimals: 18 },
            ]);
            expect(axiosMock.history.post).toHaveLength(2);
            expect((_b = result[0]) === null || _b === void 0 ? void 0 : _b.toNumber()).toBe(2.1e-18);
        });
        it('uses custom endpoint if provided', async () => {
            axiosMock.onPost('https://custom-endpoint.local').replyOnce(HttpStatus.OK, {
                data: {
                    getPrice: {
                        priceUsd: 1.1,
                    },
                },
            });
            const tokenPriceOracle = new TokenPriceOracle_1.TokenPriceOracle(axiosClient, 'fakeApiKey', 'https://custom-endpoint.local', 5000);
            await tokenPriceOracle.batchFetchTokenPriceAsync([
                { chainId: 1, tokenAddress: '0xUSDCContractAddress', tokenDecimals: 18 },
            ]);
            expect(axiosMock.history.post[0].url).toBe('https://custom-endpoint.local');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,