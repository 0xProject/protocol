a007add66234ee9339d359c893d54c61
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqMaker = void 0;
const typeorm_1 = require("typeorm");
/**
 * A representation of the pairs a market maker is active on for a given chain ID
 */
let RfqMaker = class RfqMaker {
    // TypeORM runs a validation check where it calls this initializer with no argument.
    // With no default `opts`, `opts` will be undefined and the validation will throw,
    // therefore, add this hacky default.
    // tslint:disable-next-line no-object-literal-type-assertion
    constructor(opts = {}) {
        var _a;
        this.makerId = opts.makerId;
        this.chainId = opts.chainId;
        this.pairs = opts.pairs;
        this.rfqtUri = opts.rfqtUri;
        this.rfqmUri = opts.rfqmUri;
        this.updatedAt = (_a = opts.updatedAt) !== null && _a !== void 0 ? _a : null;
    }
};
__decorate([
    (0, typeorm_1.PrimaryColumn)({ name: 'maker_id', type: 'varchar' }),
    __metadata("design:type", String)
], RfqMaker.prototype, "makerId", void 0);
__decorate([
    (0, typeorm_1.PrimaryColumn)({ name: 'chain_id', type: 'integer' }),
    __metadata("design:type", Number)
], RfqMaker.prototype, "chainId", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at', type: 'timestamptz', nullable: true }),
    __metadata("design:type", Object)
], RfqMaker.prototype, "updatedAt", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'pairs', type: 'jsonb' }),
    __metadata("design:type", Array)
], RfqMaker.prototype, "pairs", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'rfqt_uri', type: 'varchar' }),
    __metadata("design:type", Object)
], RfqMaker.prototype, "rfqtUri", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'rfqm_uri', type: 'varchar' }),
    __metadata("design:type", Object)
], RfqMaker.prototype, "rfqmUri", void 0);
RfqMaker = __decorate([
    (0, typeorm_1.Entity)({ name: 'rfq_maker_pairs' }),
    __metadata("design:paramtypes", [Object])
], RfqMaker);
exports.RfqMaker = RfqMaker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9lbnRpdGllcy9SZnFNYWtlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxxQ0FBMEU7QUFJMUU7O0dBRUc7QUFFSCxJQUFhLFFBQVEsR0FBckIsTUFBYSxRQUFRO0lBbUJqQixvRkFBb0Y7SUFDcEYsa0ZBQWtGO0lBQ2xGLHFDQUFxQztJQUNyQyw0REFBNEQ7SUFDNUQsWUFBWSxPQUFxQixFQUFrQjs7UUFDL0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQUEsSUFBSSxDQUFDLFNBQVMsbUNBQUksSUFBSSxDQUFDO0lBQzVDLENBQUM7Q0FDSixDQUFBO0FBN0JHO0lBREMsSUFBQSx1QkFBYSxFQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUM7O3lDQUM5QjtBQUd2QjtJQURDLElBQUEsdUJBQWEsRUFBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDOzt5Q0FDOUI7QUFHdkI7SUFEQyxJQUFBLDBCQUFnQixFQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQzs7MkNBQ2hEO0FBRzlCO0lBREMsSUFBQSxnQkFBTSxFQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7O3VDQUNSO0FBR2pDO0lBREMsSUFBQSxnQkFBTSxFQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUM7O3lDQUNoQjtBQUc5QjtJQURDLElBQUEsZ0JBQU0sRUFBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDOzt5Q0FDaEI7QUFqQnJCLFFBQVE7SUFEcEIsSUFBQSxnQkFBTSxFQUFDLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLENBQUM7O0dBQ3ZCLFFBQVEsQ0ErQnBCO0FBL0JZLDRCQUFRIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZHdhbHNoL2NvZGUtbG9jYWwvMHgtcmZxLWFwaS9zcmMvZW50aXRpZXMvUmZxTWFrZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sdW1uLCBFbnRpdHksIFByaW1hcnlDb2x1bW4sIFVwZGF0ZURhdGVDb2x1bW4gfSBmcm9tICd0eXBlb3JtJztcblxuZXhwb3J0IHR5cGUgUmZxTWFrZXJPcHRzID0gUGljazxSZnFNYWtlciwgJ21ha2VySWQnIHwgJ2NoYWluSWQnIHwgJ3BhaXJzJyB8ICdyZnF0VXJpJyB8ICdyZnFtVXJpJz4gJiBQYXJ0aWFsPFJmcU1ha2VyPjtcblxuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwYWlycyBhIG1hcmtldCBtYWtlciBpcyBhY3RpdmUgb24gZm9yIGEgZ2l2ZW4gY2hhaW4gSURcbiAqL1xuQEVudGl0eSh7IG5hbWU6ICdyZnFfbWFrZXJfcGFpcnMnIH0pXG5leHBvcnQgY2xhc3MgUmZxTWFrZXIge1xuICAgIEBQcmltYXJ5Q29sdW1uKHsgbmFtZTogJ21ha2VyX2lkJywgdHlwZTogJ3ZhcmNoYXInIH0pXG4gICAgcHVibGljIG1ha2VySWQ6IHN0cmluZztcblxuICAgIEBQcmltYXJ5Q29sdW1uKHsgbmFtZTogJ2NoYWluX2lkJywgdHlwZTogJ2ludGVnZXInIH0pXG4gICAgcHVibGljIGNoYWluSWQ6IG51bWJlcjtcblxuICAgIEBVcGRhdGVEYXRlQ29sdW1uKHsgbmFtZTogJ3VwZGF0ZWRfYXQnLCB0eXBlOiAndGltZXN0YW1wdHonLCBudWxsYWJsZTogdHJ1ZSB9KVxuICAgIHB1YmxpYyB1cGRhdGVkQXQ6IERhdGUgfCBudWxsO1xuXG4gICAgQENvbHVtbih7IG5hbWU6ICdwYWlycycsIHR5cGU6ICdqc29uYicgfSlcbiAgICBwdWJsaWMgcGFpcnM6IFtzdHJpbmcsIHN0cmluZ11bXTtcblxuICAgIEBDb2x1bW4oeyBuYW1lOiAncmZxdF91cmknLCB0eXBlOiAndmFyY2hhcicgfSlcbiAgICBwdWJsaWMgcmZxdFVyaTogc3RyaW5nIHwgbnVsbDtcblxuICAgIEBDb2x1bW4oeyBuYW1lOiAncmZxbV91cmknLCB0eXBlOiAndmFyY2hhcicgfSlcbiAgICBwdWJsaWMgcmZxbVVyaTogc3RyaW5nIHwgbnVsbDtcblxuICAgIC8vIFR5cGVPUk0gcnVucyBhIHZhbGlkYXRpb24gY2hlY2sgd2hlcmUgaXQgY2FsbHMgdGhpcyBpbml0aWFsaXplciB3aXRoIG5vIGFyZ3VtZW50LlxuICAgIC8vIFdpdGggbm8gZGVmYXVsdCBgb3B0c2AsIGBvcHRzYCB3aWxsIGJlIHVuZGVmaW5lZCBhbmQgdGhlIHZhbGlkYXRpb24gd2lsbCB0aHJvdyxcbiAgICAvLyB0aGVyZWZvcmUsIGFkZCB0aGlzIGhhY2t5IGRlZmF1bHQuXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lIG5vLW9iamVjdC1saXRlcmFsLXR5cGUtYXNzZXJ0aW9uXG4gICAgY29uc3RydWN0b3Iob3B0czogUmZxTWFrZXJPcHRzID0ge30gYXMgUmZxTWFrZXJPcHRzKSB7XG4gICAgICAgIHRoaXMubWFrZXJJZCA9IG9wdHMubWFrZXJJZDtcbiAgICAgICAgdGhpcy5jaGFpbklkID0gb3B0cy5jaGFpbklkO1xuICAgICAgICB0aGlzLnBhaXJzID0gb3B0cy5wYWlycztcbiAgICAgICAgdGhpcy5yZnF0VXJpID0gb3B0cy5yZnF0VXJpO1xuICAgICAgICB0aGlzLnJmcW1VcmkgPSBvcHRzLnJmcW1Vcmk7XG4gICAgICAgIHRoaXMudXBkYXRlZEF0ID0gb3B0cy51cGRhdGVkQXQgPz8gbnVsbDtcbiAgICB9XG59XG4iXSwidmVyc2lvbiI6M30=