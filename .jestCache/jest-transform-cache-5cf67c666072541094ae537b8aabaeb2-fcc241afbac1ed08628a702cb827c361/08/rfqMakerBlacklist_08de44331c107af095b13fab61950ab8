e06777d8dec34e67b1e4f962a5657994
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqMakerBlacklist = void 0;
/**
 * Tracks a maker's history of timely responses, and manages whether a given
 * maker should be avoided for being too latent.
 */
const constants_1 = require("../core/constants");
const logger_1 = require("../logger");
class RfqMakerBlacklist {
    constructor(_blacklistDurationMinutes, _timeoutStreakThreshold) {
        this._blacklistDurationMinutes = _blacklistDurationMinutes;
        this._timeoutStreakThreshold = _timeoutStreakThreshold;
        this._makerTimeoutStreakLength = {};
        this._makerBlacklistedUntilDate = {};
    }
    logTimeoutOrLackThereof(makerUrl, didTimeout) {
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line no-prototype-builtins
        if (!this._makerTimeoutStreakLength.hasOwnProperty(makerUrl)) {
            this._makerTimeoutStreakLength[makerUrl] = 0;
        }
        if (didTimeout) {
            this._makerTimeoutStreakLength[makerUrl] += 1;
            if (this._makerTimeoutStreakLength[makerUrl] === this._timeoutStreakThreshold) {
                const blacklistEnd = Date.now() + this._blacklistDurationMinutes * constants_1.ONE_MINUTE_MS;
                this._makerBlacklistedUntilDate[makerUrl] = blacklistEnd;
                logger_1.logger.info({ makerUrl, blacklistedUntil: new Date(blacklistEnd).toISOString() }, 'maker blacklisted');
            }
        }
        else {
            this._makerTimeoutStreakLength[makerUrl] = 0;
        }
    }
    isMakerBlacklisted(makerUrl) {
        const now = Date.now();
        if (now > this._makerBlacklistedUntilDate[makerUrl]) {
            delete this._makerBlacklistedUntilDate[makerUrl];
            logger_1.logger.info({ makerUrl }, 'maker unblacklisted');
        }
        return this._makerBlacklistedUntilDate[makerUrl] > now;
    }
}
exports.RfqMakerBlacklist = RfqMakerBlacklist;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9xdW90ZVJlcXVlc3Rvci9yZnFNYWtlckJsYWNrbGlzdC50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQTs7O0dBR0c7QUFFSCxpREFBa0Q7QUFDbEQsc0NBQW1DO0FBRW5DLE1BQWEsaUJBQWlCO0lBRzFCLFlBQ3FCLHlCQUFpQyxFQUNqQyx1QkFBK0I7UUFEL0IsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUFRO1FBQ2pDLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBUTtRQUpuQyw4QkFBeUIsR0FBbUMsRUFBRSxDQUFDO1FBQy9ELCtCQUEwQixHQUFtQyxFQUFFLENBQUM7SUFJOUUsQ0FBQztJQUNHLHVCQUF1QixDQUFDLFFBQWdCLEVBQUUsVUFBbUI7UUFDaEUsNkRBQTZEO1FBQzdELGlEQUFpRDtRQUNqRCxJQUFJLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUMxRCxJQUFJLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsSUFBSSxVQUFVLEVBQUU7WUFDWixJQUFJLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlDLElBQUksSUFBSSxDQUFDLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtnQkFDM0UsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyx5QkFBeUIsR0FBRyx5QkFBYSxDQUFDO2dCQUNqRixJQUFJLENBQUMsMEJBQTBCLENBQUMsUUFBUSxDQUFDLEdBQUcsWUFBWSxDQUFDO2dCQUN6RCxlQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLEVBQUUsbUJBQW1CLENBQUMsQ0FBQzthQUMxRztTQUNKO2FBQU07WUFDSCxJQUFJLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQztJQUNNLGtCQUFrQixDQUFDLFFBQWdCO1FBQ3RDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDakQsT0FBTyxJQUFJLENBQUMsMEJBQTBCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDakQsZUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLHFCQUFxQixDQUFDLENBQUM7U0FDcEQ7UUFDRCxPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDM0QsQ0FBQztDQUNKO0FBaENELDhDQWdDQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvc3JjL3F1b3RlUmVxdWVzdG9yL3JmcU1ha2VyQmxhY2tsaXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBUcmFja3MgYSBtYWtlcidzIGhpc3Rvcnkgb2YgdGltZWx5IHJlc3BvbnNlcywgYW5kIG1hbmFnZXMgd2hldGhlciBhIGdpdmVuXHJcbiAqIG1ha2VyIHNob3VsZCBiZSBhdm9pZGVkIGZvciBiZWluZyB0b28gbGF0ZW50LlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE9ORV9NSU5VVEVfTVMgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cyc7XHJcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4uL2xvZ2dlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgUmZxTWFrZXJCbGFja2xpc3Qge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbWFrZXJUaW1lb3V0U3RyZWFrTGVuZ3RoOiB7IFttYWtlclVybDogc3RyaW5nXTogbnVtYmVyIH0gPSB7fTtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX21ha2VyQmxhY2tsaXN0ZWRVbnRpbERhdGU6IHsgW21ha2VyVXJsOiBzdHJpbmddOiBudW1iZXIgfSA9IHt9O1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfYmxhY2tsaXN0RHVyYXRpb25NaW51dGVzOiBudW1iZXIsXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfdGltZW91dFN0cmVha1RocmVzaG9sZDogbnVtYmVyLCAvLyAgcHVibGljIGluZm9Mb2dnZXI6IExvZ0Z1bmN0aW9uID0gY29uc3RhbnRzLkRFRkFVTFRfSU5GT19MT0dHRVIsXHJcbiAgICApIHt9XHJcbiAgICBwdWJsaWMgbG9nVGltZW91dE9yTGFja1RoZXJlb2YobWFrZXJVcmw6IHN0cmluZywgZGlkVGltZW91dDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIC8vICRlc2xpbnQtZml4LW1lIGh0dHBzOi8vZ2l0aHViLmNvbS9yaGlub2RhdmlkL2VzbGludC1maXgtbWVcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXHJcbiAgICAgICAgaWYgKCF0aGlzLl9tYWtlclRpbWVvdXRTdHJlYWtMZW5ndGguaGFzT3duUHJvcGVydHkobWFrZXJVcmwpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21ha2VyVGltZW91dFN0cmVha0xlbmd0aFttYWtlclVybF0gPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlkVGltZW91dCkge1xyXG4gICAgICAgICAgICB0aGlzLl9tYWtlclRpbWVvdXRTdHJlYWtMZW5ndGhbbWFrZXJVcmxdICs9IDE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9tYWtlclRpbWVvdXRTdHJlYWtMZW5ndGhbbWFrZXJVcmxdID09PSB0aGlzLl90aW1lb3V0U3RyZWFrVGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBibGFja2xpc3RFbmQgPSBEYXRlLm5vdygpICsgdGhpcy5fYmxhY2tsaXN0RHVyYXRpb25NaW51dGVzICogT05FX01JTlVURV9NUztcclxuICAgICAgICAgICAgICAgIHRoaXMuX21ha2VyQmxhY2tsaXN0ZWRVbnRpbERhdGVbbWFrZXJVcmxdID0gYmxhY2tsaXN0RW5kO1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oeyBtYWtlclVybCwgYmxhY2tsaXN0ZWRVbnRpbDogbmV3IERhdGUoYmxhY2tsaXN0RW5kKS50b0lTT1N0cmluZygpIH0sICdtYWtlciBibGFja2xpc3RlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fbWFrZXJUaW1lb3V0U3RyZWFrTGVuZ3RoW21ha2VyVXJsXSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGlzTWFrZXJCbGFja2xpc3RlZChtYWtlclVybDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBpZiAobm93ID4gdGhpcy5fbWFrZXJCbGFja2xpc3RlZFVudGlsRGF0ZVttYWtlclVybF0pIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX21ha2VyQmxhY2tsaXN0ZWRVbnRpbERhdGVbbWFrZXJVcmxdO1xyXG4gICAgICAgICAgICBsb2dnZXIuaW5mbyh7IG1ha2VyVXJsIH0sICdtYWtlciB1bmJsYWNrbGlzdGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYWtlckJsYWNrbGlzdGVkVW50aWxEYXRlW21ha2VyVXJsXSA+IG5vdztcclxuICAgIH1cclxufVxyXG4iXSwidmVyc2lvbiI6M30=