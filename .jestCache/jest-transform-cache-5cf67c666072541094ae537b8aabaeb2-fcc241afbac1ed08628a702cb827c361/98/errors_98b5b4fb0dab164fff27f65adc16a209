5f01de1121c78ca1ecb7cbee6147cd13
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationErrorReasons = exports.apiErrorCodesToReasons = exports.APIErrorCodes = exports.ValidationErrorCodes = exports.ValidationError = exports.RevertAPIError = exports.NotImplementedError = exports.NotFoundError = exports.MalformedJSONError = exports.InvalidAPIKeyError = exports.InternalServerError = exports.GeneralErrorCodes = exports.BadRequestError = void 0;
const api_utils_1 = require("@0x/api-utils");
var api_utils_2 = require("@0x/api-utils");
Object.defineProperty(exports, "BadRequestError", { enumerable: true, get: function () { return api_utils_2.BadRequestError; } });
Object.defineProperty(exports, "GeneralErrorCodes", { enumerable: true, get: function () { return api_utils_2.GeneralErrorCodes; } });
Object.defineProperty(exports, "InternalServerError", { enumerable: true, get: function () { return api_utils_2.InternalServerError; } });
Object.defineProperty(exports, "InvalidAPIKeyError", { enumerable: true, get: function () { return api_utils_2.InvalidAPIKeyError; } });
Object.defineProperty(exports, "MalformedJSONError", { enumerable: true, get: function () { return api_utils_2.MalformedJSONError; } });
Object.defineProperty(exports, "NotFoundError", { enumerable: true, get: function () { return api_utils_2.NotFoundError; } });
Object.defineProperty(exports, "NotImplementedError", { enumerable: true, get: function () { return api_utils_2.NotImplementedError; } });
Object.defineProperty(exports, "RevertAPIError", { enumerable: true, get: function () { return api_utils_2.RevertAPIError; } });
Object.defineProperty(exports, "ValidationError", { enumerable: true, get: function () { return api_utils_2.ValidationError; } });
Object.defineProperty(exports, "ValidationErrorCodes", { enumerable: true, get: function () { return api_utils_2.ValidationErrorCodes; } });
var APIErrorCodes;
(function (APIErrorCodes) {
    APIErrorCodes[APIErrorCodes["OrderSubmissionDisabled"] = 102] = "OrderSubmissionDisabled";
    APIErrorCodes[APIErrorCodes["UnableToSubmitOnBehalfOfTaker"] = 106] = "UnableToSubmitOnBehalfOfTaker";
    APIErrorCodes[APIErrorCodes["ServiceDisabled"] = 108] = "ServiceDisabled";
    APIErrorCodes[APIErrorCodes["InsufficientFundsError"] = 109] = "InsufficientFundsError";
    APIErrorCodes[APIErrorCodes["EthSellNotSupported"] = 110] = "EthSellNotSupported";
    APIErrorCodes[APIErrorCodes["GasEstimationFailed"] = 111] = "GasEstimationFailed";
})(APIErrorCodes = exports.APIErrorCodes || (exports.APIErrorCodes = {}));
exports.apiErrorCodesToReasons = {
    ...api_utils_1.generalErrorCodeToReason,
    [APIErrorCodes.OrderSubmissionDisabled]: 'Order submission disabled',
    [APIErrorCodes.UnableToSubmitOnBehalfOfTaker]: 'Unable to submit transaction on behalf of taker',
    [APIErrorCodes.ServiceDisabled]: 'Service disabled',
    [APIErrorCodes.InsufficientFundsError]: 'Insufficient funds for transaction',
    [APIErrorCodes.EthSellNotSupported]: 'ETH selling is not supported',
    [APIErrorCodes.GasEstimationFailed]: 'Gas estimation failed',
};
var ValidationErrorReasons;
(function (ValidationErrorReasons) {
    ValidationErrorReasons["ArgumentNotYetSupported"] = "ARGUMENT_NOT_YET_SUPPORTED";
    ValidationErrorReasons["FeeRecipientMissing"] = "FEE_RECIPIENT_MISSING";
    ValidationErrorReasons["MultipleFeeTypesUsed"] = "MULTIPLE_FEE_TYPES_USED";
    ValidationErrorReasons["PercentageOutOfRange"] = "MUST_BE_LESS_THAN_OR_EQUAL_TO_ONE";
})(ValidationErrorReasons = exports.ValidationErrorReasons || (exports.ValidationErrorReasons = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9jb3JlL2Vycm9ycy50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBd0U7QUFFeEUsMkNBYXVCO0FBWm5CLDRHQUFBLGVBQWUsT0FBQTtBQUVmLDhHQUFBLGlCQUFpQixPQUFBO0FBQ2pCLGdIQUFBLG1CQUFtQixPQUFBO0FBQ25CLCtHQUFBLGtCQUFrQixPQUFBO0FBQ2xCLCtHQUFBLGtCQUFrQixPQUFBO0FBQ2xCLDBHQUFBLGFBQWEsT0FBQTtBQUNiLGdIQUFBLG1CQUFtQixPQUFBO0FBQ25CLDJHQUFBLGNBQWMsT0FBQTtBQUNkLDRHQUFBLGVBQWUsT0FBQTtBQUNmLGlIQUFBLG9CQUFvQixPQUFBO0FBSXhCLElBQVksYUFPWDtBQVBELFdBQVksYUFBYTtJQUNyQix5RkFBNkIsQ0FBQTtJQUM3QixxR0FBbUMsQ0FBQTtJQUNuQyx5RUFBcUIsQ0FBQTtJQUNyQix1RkFBNEIsQ0FBQTtJQUM1QixpRkFBeUIsQ0FBQTtJQUN6QixpRkFBeUIsQ0FBQTtBQUM3QixDQUFDLEVBUFcsYUFBYSxHQUFiLHFCQUFhLEtBQWIscUJBQWEsUUFPeEI7QUFFWSxRQUFBLHNCQUFzQixHQUF1QztJQUN0RSxHQUFHLG9DQUFXO0lBQ2QsQ0FBQyxhQUFhLENBQUMsdUJBQXVCLENBQUMsRUFBRSwyQkFBMkI7SUFDcEUsQ0FBQyxhQUFhLENBQUMsNkJBQTZCLENBQUMsRUFBRSxpREFBaUQ7SUFDaEcsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLEVBQUUsa0JBQWtCO0lBQ25ELENBQUMsYUFBYSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsb0NBQW9DO0lBQzVFLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsOEJBQThCO0lBQ25FLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsdUJBQXVCO0NBQy9ELENBQUM7QUFFRixJQUFZLHNCQUtYO0FBTEQsV0FBWSxzQkFBc0I7SUFDOUIsZ0ZBQXNELENBQUE7SUFDdEQsdUVBQTZDLENBQUE7SUFDN0MsMEVBQWdELENBQUE7SUFDaEQsb0ZBQTBELENBQUE7QUFDOUQsQ0FBQyxFQUxXLHNCQUFzQixHQUF0Qiw4QkFBc0IsS0FBdEIsOEJBQXNCLFFBS2pDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZHdhbHNoL2NvZGUtbG9jYWwvMHgtcmZxLWFwaS9zcmMvY29yZS9lcnJvcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2VuZXJhbEVycm9yQ29kZVRvUmVhc29uIGFzIGJhc2VSZWFzb25zIH0gZnJvbSAnQDB4L2FwaS11dGlscyc7XG5cbmV4cG9ydCB7XG4gICAgQmFkUmVxdWVzdEVycm9yLFxuICAgIEVycm9yQm9keSxcbiAgICBHZW5lcmFsRXJyb3JDb2RlcyxcbiAgICBJbnRlcm5hbFNlcnZlckVycm9yLFxuICAgIEludmFsaWRBUElLZXlFcnJvcixcbiAgICBNYWxmb3JtZWRKU09ORXJyb3IsXG4gICAgTm90Rm91bmRFcnJvcixcbiAgICBOb3RJbXBsZW1lbnRlZEVycm9yLFxuICAgIFJldmVydEFQSUVycm9yLFxuICAgIFZhbGlkYXRpb25FcnJvcixcbiAgICBWYWxpZGF0aW9uRXJyb3JDb2RlcyxcbiAgICBWYWxpZGF0aW9uRXJyb3JJdGVtLFxufSBmcm9tICdAMHgvYXBpLXV0aWxzJztcblxuZXhwb3J0IGVudW0gQVBJRXJyb3JDb2RlcyB7XG4gICAgT3JkZXJTdWJtaXNzaW9uRGlzYWJsZWQgPSAxMDIsXG4gICAgVW5hYmxlVG9TdWJtaXRPbkJlaGFsZk9mVGFrZXIgPSAxMDYsXG4gICAgU2VydmljZURpc2FibGVkID0gMTA4LFxuICAgIEluc3VmZmljaWVudEZ1bmRzRXJyb3IgPSAxMDksXG4gICAgRXRoU2VsbE5vdFN1cHBvcnRlZCA9IDExMCxcbiAgICBHYXNFc3RpbWF0aW9uRmFpbGVkID0gMTExLFxufVxuXG5leHBvcnQgY29uc3QgYXBpRXJyb3JDb2Rlc1RvUmVhc29uczogeyBba2V5IGluIEFQSUVycm9yQ29kZXNdOiBzdHJpbmcgfSA9IHtcbiAgICAuLi5iYXNlUmVhc29ucyxcbiAgICBbQVBJRXJyb3JDb2Rlcy5PcmRlclN1Ym1pc3Npb25EaXNhYmxlZF06ICdPcmRlciBzdWJtaXNzaW9uIGRpc2FibGVkJyxcbiAgICBbQVBJRXJyb3JDb2Rlcy5VbmFibGVUb1N1Ym1pdE9uQmVoYWxmT2ZUYWtlcl06ICdVbmFibGUgdG8gc3VibWl0IHRyYW5zYWN0aW9uIG9uIGJlaGFsZiBvZiB0YWtlcicsXG4gICAgW0FQSUVycm9yQ29kZXMuU2VydmljZURpc2FibGVkXTogJ1NlcnZpY2UgZGlzYWJsZWQnLFxuICAgIFtBUElFcnJvckNvZGVzLkluc3VmZmljaWVudEZ1bmRzRXJyb3JdOiAnSW5zdWZmaWNpZW50IGZ1bmRzIGZvciB0cmFuc2FjdGlvbicsXG4gICAgW0FQSUVycm9yQ29kZXMuRXRoU2VsbE5vdFN1cHBvcnRlZF06ICdFVEggc2VsbGluZyBpcyBub3Qgc3VwcG9ydGVkJyxcbiAgICBbQVBJRXJyb3JDb2Rlcy5HYXNFc3RpbWF0aW9uRmFpbGVkXTogJ0dhcyBlc3RpbWF0aW9uIGZhaWxlZCcsXG59O1xuXG5leHBvcnQgZW51bSBWYWxpZGF0aW9uRXJyb3JSZWFzb25zIHtcbiAgICBBcmd1bWVudE5vdFlldFN1cHBvcnRlZCA9ICdBUkdVTUVOVF9OT1RfWUVUX1NVUFBPUlRFRCcsXG4gICAgRmVlUmVjaXBpZW50TWlzc2luZyA9ICdGRUVfUkVDSVBJRU5UX01JU1NJTkcnLFxuICAgIE11bHRpcGxlRmVlVHlwZXNVc2VkID0gJ01VTFRJUExFX0ZFRV9UWVBFU19VU0VEJyxcbiAgICBQZXJjZW50YWdlT3V0T2ZSYW5nZSA9ICdNVVNUX0JFX0xFU1NfVEhBTl9PUl9FUVVBTF9UT19PTkUnLFxufVxuIl0sInZlcnNpb24iOjN9