{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/services/types.ts","mappings":";;;AAAA,uDAA0E;AAgF1E,6JAA6J;AAC7J,MAAa,iBAAkB,SAAQ,gCAAe;CAAG;AAAzD,8CAAyD","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/services/types.ts"],"sourcesContent":["import { MetaTransaction, OtcOrder, Signature } from '@0x/protocol-utils';\nimport { BigNumber } from '@0x/utils';\n\nimport { Integrator } from '../config';\nimport { JobFailureReason } from '../entities/types';\nimport {\n    ExecuteMetaTransactionEip712Context,\n    FeeModelVersion,\n    GaslessApprovalTypes,\n    GaslessTypes,\n    PermitEip712Context,\n} from '../core/types';\nimport { TruncatedFees } from '../core/types/meta_transaction_fees';\n\nexport interface FetchIndicativeQuoteParams extends FetchQuoteParamsBase {\n    takerAddress?: string;\n}\n\nexport interface FetchIndicativeQuoteResponse {\n    allowanceTarget?: string;\n    buyAmount: BigNumber;\n    buyTokenAddress: string;\n    gas: BigNumber;\n    price: BigNumber;\n    sellAmount: BigNumber;\n    sellTokenAddress: string;\n}\n\nexport interface FetchFirmQuoteParams extends FetchQuoteParamsBase {\n    takerAddress: string;\n    checkApproval: boolean;\n}\n\nexport interface FetchQuoteParamsBase {\n    affiliateAddress?: string;\n    buyAmount?: BigNumber;\n    buyToken: string;\n    buyTokenDecimals: number;\n    integrator: Integrator;\n    sellAmount?: BigNumber;\n    sellToken: string;\n    sellTokenDecimals: number;\n    // fields specific to gasless endpoints\n    slippagePercentage?: BigNumber;\n    feeType?: 'volume';\n    feeSellTokenPercentage?: BigNumber;\n    feeRecipient?: string;\n}\n\nexport interface BaseRfqmQuoteResponse {\n    allowanceTarget?: string;\n    buyAmount: BigNumber;\n    buyTokenAddress: string;\n    gas: BigNumber;\n    price: BigNumber;\n    sellAmount: BigNumber;\n    sellTokenAddress: string;\n}\n\nexport interface OtcOrderRfqmQuoteResponse extends BaseRfqmQuoteResponse {\n    type: GaslessTypes.OtcOrder;\n    order: OtcOrder;\n    orderHash: string;\n    approval?: ApprovalResponse;\n}\n\n/**\n * Response from the Gasless Swap Service `/quote` endpoint.\n *\n * `approval` will be populated if `checkApproval` is `true`\n * in the parameters, the token supports gasless approval,\n * and no allowance already exists.\n */\nexport interface MetaTransactionV1QuoteResponse extends BaseRfqmQuoteResponse {\n    type: GaslessTypes.MetaTransaction;\n    metaTransaction: MetaTransaction;\n    metaTransactionHash: string;\n    approval?: ApprovalResponse;\n}\n\n// TODO: This needs to be updated to the new meta-transaction type when smart contract changes are finished and corresponding types are published in packages\nexport class MetaTransactionV2 extends MetaTransaction {}\n\nexport interface LiquiditySource {\n    name: string;\n    proportion: BigNumber;\n    intermediateToken?: string;\n    hops?: string[];\n}\n\n// TODO: The type is only a placeholder and should be replaced by eip-712 context soon. Please move `MetaTransactionTradeResponse` and\n//       `MetaTransactionV1TradeResponse` to `MetaTransactionClient` file\nexport type MetaTransactionTradeResponse =\n    MetaTransactionV1TradeResponse /* add MetaTransactionV2TradeResponse when it's ready */;\n\ninterface MetaTransactionV1TradeResponse {\n    kind: GaslessTypes.MetaTransaction;\n    hash: string;\n    metaTransaction: MetaTransaction; // TODO: This field is a placeholder and should be updated to `eip712`\n}\n\nexport interface MetaTransactionV2QuoteResponse extends BaseRfqmQuoteResponse {\n    trade: MetaTransactionTradeResponse;\n    approval?: ApprovalResponse;\n    sources: LiquiditySource[];\n    fees?: TruncatedFees;\n}\n\nexport interface ApprovalResponse {\n    isRequired: boolean;\n    isGaslessAvailable?: boolean;\n    type?: GaslessApprovalTypes;\n    eip712?: ExecuteMetaTransactionEip712Context | PermitEip712Context;\n}\n\nexport interface OtcOrderSubmitRfqmSignedQuoteParams {\n    type: GaslessTypes.OtcOrder;\n    order: OtcOrder;\n    signature: Signature;\n}\n\n/**\n * Payload for the Gasless Swap `/submit` endpoint in the\n * metatransaction flow\n */\nexport interface SubmitMetaTransactionSignedQuoteParams<\n    T extends ExecuteMetaTransactionEip712Context | PermitEip712Context,\n> {\n    approval?: SubmitApprovalParams<T>;\n    // Used to distinguish between `SubmitRfqmSignedQuoteWithApprovalParams` during type check.\n    // Note that this information is in `trade`, but TypeScript does not narrow types based\n    // on nested values.\n    kind: GaslessTypes.MetaTransaction;\n    trade: { metaTransaction: MetaTransaction; signature: Signature; type: GaslessTypes.MetaTransaction };\n}\n\nexport interface SubmitMetaTransactionV2SignedQuoteParams<\n    T extends ExecuteMetaTransactionEip712Context | PermitEip712Context,\n> {\n    approval?: SubmitApprovalParams<T>;\n    // Used to distinguish between `SubmitRfqmSignedQuoteWithApprovalParams` and `SubmitMetaTransactionSignedQuoteParams` during type check.\n    // Note that this information is in `trade`, but TypeScript does not narrow types based\n    // on nested values.\n    kind: GaslessTypes.MetaTransactionV2;\n    // TODO: This needs to be updated to the new meta-transaction type when smart contract changes are finished and corresponding types are published in packages\n    trade: { metaTransaction: MetaTransactionV2; signature: Signature; type: GaslessTypes.MetaTransactionV2 };\n}\n\nexport interface OtcOrderSubmitRfqmSignedQuoteResponse {\n    type: GaslessTypes.OtcOrder;\n    orderHash: string;\n}\n\nexport interface SubmitApprovalParams<T extends ExecuteMetaTransactionEip712Context | PermitEip712Context> {\n    type: T extends ExecuteMetaTransactionEip712Context\n        ? GaslessApprovalTypes.ExecuteMetaTransaction\n        : GaslessApprovalTypes.Permit;\n    eip712: T;\n    signature: Signature;\n}\n\nexport interface SubmitRfqmSignedQuoteWithApprovalParams<\n    T extends ExecuteMetaTransactionEip712Context | PermitEip712Context,\n> {\n    approval?: SubmitApprovalParams<T>;\n    // Used to distinguish between `SubmitMetaTransactionSignedQuoteParams` during type check.\n    // Note that this information is in `trade`, but TypeScript does not narrow types based\n    // on nested values.\n    kind: GaslessTypes.OtcOrder;\n    trade: OtcOrderSubmitRfqmSignedQuoteParams;\n}\n\nexport interface SubmitRfqmSignedQuoteWithApprovalResponse {\n    type: GaslessTypes.OtcOrder;\n    orderHash: string;\n}\n\nexport interface SubmitMetaTransactionSignedQuoteResponse {\n    type: GaslessTypes.MetaTransaction;\n    metaTransactionHash: string;\n}\n\nexport interface SubmitMetaTransactionV2SignedQuoteResponse {\n    type: GaslessTypes.MetaTransactionV2;\n    metaTransactionHash: string;\n}\n\nexport interface TransactionDetails {\n    hash: string;\n    timestamp: number /* unix ms */;\n}\n\nexport type StatusResponse = {\n    transactions: TransactionDetails[];\n    approvalTransactions?: TransactionDetails[];\n} & ({ status: 'pending' | 'submitted' | 'succeeded' | 'confirmed' } | { status: 'failed'; reason?: JobFailureReason });\n\n/**\n * Result type used by the cleanup jobs functionality of the\n * rfq admin service\n */\nexport interface CleanupJobsResponse {\n    // Jobs successfuly cleaned up by `cleanupJobsAsync`\n    modifiedJobs: string[];\n    // Jobs that could not be cleaned up by `cleanupJobsAsync`. This includes\n    // jobs that could not be found, jobs too close to expiration, or jobs\n    // with non-pending statuses.\n    unmodifiedJobs: string[];\n}\n\n/**\n * Base interface for quote context, which includes input query parameters, derived\n * variables, and configuration information.\n */\ninterface QuoteContextBase {\n    workflow: 'rfqm' | 'rfqt' | 'gasless-rfqt';\n    chainId: number;\n    isFirm: boolean;\n    takerAmount?: BigNumber;\n    makerAmount?: BigNumber;\n    takerToken: string;\n    makerToken: string;\n    originalMakerToken: string;\n    takerTokenDecimals: number;\n    makerTokenDecimals: number;\n    integrator: Integrator;\n    affiliateAddress?: string;\n    isUnwrap: boolean;\n    isSelling: boolean;\n    assetFillAmount: BigNumber;\n    feeModelVersion: FeeModelVersion;\n}\n\n/**\n * Context for indicative quote\n */\ninterface IndicativeQuoteContext extends QuoteContextBase {\n    isFirm: false;\n    trader?: string;\n    takerAddress?: string;\n    txOrigin?: string;\n}\n\n/**\n * Context for firm quote\n */\nexport interface FirmQuoteContext extends QuoteContextBase {\n    isFirm: true;\n    trader: string;\n    takerAddress: string;\n    txOrigin: string;\n    bucket?: number;\n}\n\nexport type QuoteContext = IndicativeQuoteContext | FirmQuoteContext;\n"],"version":3}