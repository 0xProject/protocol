{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/services/fee_service.ts","mappings":";;;AAEA,qCAAsC;AAEtC,iDAAuD;AAWvD,sCAAmC;AAGnC,4EAA+D;AAC/D,8EAAwE;AAiBxE;;;;;;;;GAQG;AACI,MAAM,yBAAyB,GAAG,CACrC,gBAA2B,EAC3B,UAAkB,EAClB,0BAA4C,EAC5C,wBAA0C,EACjC,EAAE;IACX,IAAI,UAAU,GAAG,CAAC,IAAI,0BAA0B,KAAK,IAAI,IAAI,wBAAwB,KAAK,IAAI,EAAE;QAC5F,OAAO,gBAAgB;aAClB,KAAK,CAAC,UAAU,GAAG,wBAAY,CAAC;aAChC,KAAK,CAAC,0BAA0B,CAAC;aACjC,GAAG,CAAC,wBAAwB,CAAC;aAC7B,YAAY,EAAE,CAAC;KACvB;IAED,OAAO,gBAAI,CAAC;AAChB,CAAC,CAAC;AAfW,QAAA,yBAAyB,6BAepC;AAEF;;;;;;;;;;GAUG;AACI,MAAM,+BAA+B,GAAG,CAC3C,oBAAqC,EACrC,QAAkB,EAClB,SAAkB,EAClB,0BAAqC,EACrC,wBAAmC,EAC1B,EAAE;IACX,IAAI,SAAS,EAAE;QACX,MAAM,0BAA0B,GAAG,0BAA0B,CAAC;QAC9D,MAAM,QAAQ,GAAG,oBAAoB,CAAC,WAAW;aAC5C,KAAK,CAAC,0BAA0B,CAAC;aACjC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACnC,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW;aAChC,KAAK,CAAC,IAAI,iBAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;aACvD,KAAK,CAAC,0BAA0B,CAAC;aACjC,GAAG,CAAC,wBAAwB,CAAC;aAC7B,KAAK,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE;YACvB,OAAO,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,YAAY,EAAE,CAAC;SAClD;KACJ;SAAM;QACH,MAAM,0BAA0B,GAAG,0BAA0B,CAAC;QAC9D,MAAM,QAAQ,GAAG,oBAAoB,CAAC,WAAW;aAC5C,KAAK,CAAC,0BAA0B,CAAC;aACjC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACnC,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW;aAChC,KAAK,CAAC,IAAI,iBAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;aACxD,KAAK,CAAC,0BAA0B,CAAC;aACjC,GAAG,CAAC,wBAAwB,CAAC;aAC7B,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;QACvC,IAAI,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE;YACvB,OAAO,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,YAAY,EAAE,CAAC;SAClD;KACJ;IACD,OAAO,gBAAI,CAAC;AAChB,CAAC,CAAC;AAnCW,QAAA,+BAA+B,mCAmC1C;AAEF;;;;;;;;;;;GAWG;AACI,MAAM,mBAAmB,GAAG,CAC/B,KAAsB,EACtB,IAAe,EACf,SAAkB,EAClB,0BAAqC,EACrC,wBAAmC,EACpB,EAAE;IACjB,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,KAAK,CAAC;IACzC,IAAI,SAAS,EAAE;QACX,MAAM,0BAA0B,GAAG,0BAA0B,CAAC;QAC9D,WAAW,GAAG,WAAW;aACpB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;aAC3E,YAAY,EAAE,CAAC;KACvB;SAAM;QACH,MAAM,0BAA0B,GAAG,0BAA0B,CAAC;QAC9D,WAAW,GAAG,WAAW;aACpB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;aAC1E,YAAY,EAAE,CAAC;KACvB;IAED,OAAO,EAAE,GAAG,KAAK,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC;AAClD,CAAC,CAAC;AArBW,QAAA,mBAAmB,uBAqB9B;AAEF;;GAEG;AACH,MAAa,UAAU;IACnB,YACqB,QAAgB,EAChB,iBAAgC,EAChC,cAA6B,EAC7B,oBAAyC,EACzC,iBAAmC,EACnC,gBAAiC,EACjC,oBAA4B;QAN5B,aAAQ,GAAR,QAAQ,CAAQ;QAChB,sBAAiB,GAAjB,iBAAiB,CAAe;QAChC,mBAAc,GAAd,cAAc,CAAe;QAC7B,yBAAoB,GAApB,oBAAoB,CAAqB;QACzC,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,qBAAgB,GAAhB,gBAAgB,CAAiB;QACjC,yBAAoB,GAApB,oBAAoB,CAAQ;IAC9C,CAAC;IAEJ;;;;OAIG;IACI,KAAK,CAAC,0BAA0B;QACnC,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,kCAAkC,EAAE,CAAC;QAC9F,OAAO,gBAAgB,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,iBAAiB,CAC1B,YAA0B,EAC1B,kBAAyF;QAEzF,MAAM,EAAE,eAAe,EAAE,GAAG,YAAY,CAAC;QAEzC,QAAQ,eAAe,EAAE;YACrB,KAAK,CAAC;gBACF,OAAO,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE,kBAAkB,CAAC,CAAC;YACvE,KAAK,CAAC;gBACF,OAAO;oBACH,cAAc,EAAE,MAAM,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC;iBAChE,CAAC;YACN,KAAK,CAAC,CAAC;YACP;gBACI,OAAO;oBACH,cAAc,EAAE,MAAM,IAAI,CAAC,qBAAqB,CAAC,EAAE,GAAG,YAAY,EAAE,eAAe,EAAE,CAAC,EAAE,CAAC;iBAC5F,CAAC;SACT;IACL,CAAC;IACD;;;;;;;;OAQG;IACI,KAAK,CAAC,iBAAiB,CAC1B,MAAyB,EACzB,IAAe,EACf,YAA0B;QAE1B,IAAI,IAAI,CAAC,EAAE,CAAC,gBAAI,CAAC,EAAE;YACf,OAAO,MAAM,CAAC;SACjB;QAED,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,YAAY,CAAC;QAEnG,0GAA0G;QAC1G,MAAM,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC;QACvD,MAAM,iBAAiB,GAAG,SAAS,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC;QAE9E,MAAM,EAAE,wBAAwB,EAAE,0BAA0B,EAAE,0BAA0B,EAAE,GACtF,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;QAErE,IAAI,wBAAwB,KAAK,IAAI,IAAI,0BAA0B,KAAK,IAAI,EAAE;YAC1E,OAAO,MAAM,CAAC;SACjB;QAED,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;QACxB,6DAA6D;QAC7D,oEAAoE;QACpE,IAAA,2BAAmB,EAAC,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,0BAA2B,EAAE,wBAAyB,CAAC,CACtG,CAAC;IACN,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,qBAAqB,CAC/B,YAA0B;QAE1B,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,YAAY,CAAC;QAErF,IAAI,QAAQ,KAAK,MAAM,EAAE;YACrB,MAAM,QAAQ,GAAG,IAAI,iBAAS,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,YAAY,GAAG,IAAI,iBAAS,CAAC,CAAC,CAAC,CAAC;YACtC,OAAO;gBACH,MAAM,EAAE,YAAY;gBACpB,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,YAAY;gBAC1C,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE;oBACL,IAAI,EAAE,SAAS;oBACf,eAAe;oBACf,YAAY;oBACZ,QAAQ;iBACX;gBACD,SAAS,EAAE,EAAE;gBACb,eAAe,EAAE;oBACb,2BAA2B,EAAE,IAAI;oBACjC,wBAAwB,EAAE,IAAI;oBAC9B,0BAA0B,EAAE,IAAI;oBAChC,0BAA0B,EAAE,IAAI;iBACnC;aACJ,CAAC;SACL;QAED,MAAM,QAAQ,GAAc,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;QACpE,MAAM,WAAW,GAAG,IAAA,8CAAoB,EAAC,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAClF,MAAM,YAAY,GAAG,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAEjD,OAAO;YACH,MAAM,EAAE,YAAY;YACpB,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,YAAY;YAC1C,IAAI,EAAE,OAAO;YACb,OAAO,EAAE;gBACL,IAAI,EAAE,SAAS;gBACf,eAAe;gBACf,YAAY;gBACZ,QAAQ;aACX;YACD,SAAS,EAAE;gBACP,GAAG,EAAE;oBACD,MAAM,EAAE,YAAY;oBACpB,OAAO,EAAE;wBACL,QAAQ;wBACR,YAAY,EAAE,IAAI,iBAAS,CAAC,WAAW,CAAC;qBAC3C;iBACJ;aACJ;YACD,eAAe,EAAE;gBACb,2BAA2B,EAAE,IAAI;gBACjC,wBAAwB,EAAE,IAAI;gBAC9B,0BAA0B,EAAE,IAAI;gBAChC,0BAA0B,EAAE,IAAI;aACnC;SACJ,CAAC;IACN,CAAC;IAED;;;;;;OAMG;IACK,KAAK,CAAC,oBAAoB,CAC9B,YAA0B;QAE1B,MAAM,EACF,QAAQ,EACR,UAAU,EACV,UAAU,EACV,WAAW,EACX,WAAW,EACX,kBAAkB,EAClB,kBAAkB,EAClB,SAAS,EACT,eAAe,GAClB,GAAG,YAAY,CAAC;QAEjB,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;QAE7G,4EAA4E;QAC5E,MAAM,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC;QACvD,MAAM,kBAAkB,GAAG,SAAS,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC;QAC/E,MAAM,gBAAgB,GAAG,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC;QAE/D,MAAM,CAAC,MAAM,EAAE,EAAE,wBAAwB,EAAE,0BAA0B,EAAE,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACzF,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC;YACxC,YAAY,GAAG,CAAC;gBACZ,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,kBAAkB,CAAC;gBAC7D,CAAC,CAAC,EAAE,0BAA0B,EAAE,IAAI,EAAE,wBAAwB,EAAE,IAAI,EAAE;SAC7E,CAAC,CAAC;QAEH,MAAM,2BAA2B,GAC7B,YAAY,GAAG,CAAC,IAAI,CAAC,wBAAwB,KAAK,IAAI,IAAI,0BAA0B,KAAK,IAAI,CAAC,CAAC;QAEnG,IAAI,2BAA2B,EAAE;YAC7B,OAAO,MAAM,CAAC;SACjB;QAED,MAAM,eAAe,GACjB,YAAY,GAAG,CAAC;YACZ,CAAC,CAAC,IAAA,iCAAyB;YACrB,6DAA6D;YAC7D,oEAAoE;YACpE,gBAAiB,EACjB,YAAY,EACZ,0BAA0B,EAC1B,wBAAwB,CAC3B;YACH,CAAC,CAAC,gBAAI,CAAC;QAEf,eAAM,CAAC,IAAI,CACP;YACI,MAAM;YACN,wBAAwB;YACxB,0BAA0B;YAC1B,eAAe;SAClB,EACD,mEAAmE,CACtE,CAAC;QAEF,OAAO;YACH,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,YAAY;YAC1C,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;YAC3C,OAAO,EAAE;gBACL,IAAI,EAAE,SAAS;gBACf,eAAe;gBACf,YAAY,EAAE,MAAM,CAAC,MAAM;gBAC3B,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,QAAQ;gBACjC,eAAe;gBACf,YAAY;gBACZ,wBAAwB;gBACxB,0BAA0B,EAAE,SAAS,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,IAAI;gBACzE,0BAA0B,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,0BAA0B;aAC5E;YACD,SAAS,EAAE;gBACP,4DAA4D;gBAC5D,GAAG,EAAE,QAAQ,KAAK,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG;gBAC3D,MAAM,EAAE;oBACJ,MAAM,EAAE,eAAe;oBACvB,OAAO,EAAE;wBACL,IAAI,EAAE,QAAQ;wBACd,YAAY;qBACf;iBACJ;aACJ;YACD,eAAe,EAAE;gBACb,2BAA2B,EAAE,wBAAwB;gBACrD,wBAAwB;gBACxB,0BAA0B,EAAE,SAAS,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,IAAI;gBACzE,0BAA0B,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,0BAA0B;aAC5E;SACJ,CAAC;IACN,CAAC;IAED;;;;;;;;OAQG;IACK,KAAK,CAAC,oBAAoB,CAC9B,YAA0B,EAC1B,kBAAyF;QAEzF,MAAM,EACF,QAAQ,EACR,UAAU,EACV,UAAU,EACV,kBAAkB,EAClB,kBAAkB,EAClB,SAAS,EACT,eAAe,EACf,eAAe,GAClB,GAAG,YAAY,CAAC;QAEjB,IAAI,QAAQ,KAAK,MAAM,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;SAC5G;QAED,MAAM,EAAE,eAAe,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAC7F,IAAI,CAAC,QAAQ,EACb,UAAU,EACV,UAAU,CACb,CAAC;QAEF,0GAA0G;QAC1G,MAAM,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC;QACvD,MAAM,iBAAiB,GAAG,SAAS,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC;QAE9E;;WAEG;QACH,MAAM,CACF,EAAE,MAAM,EAAE,MAAM,EAAE,gBAAgB,EAAE,EACpC,QAAQ,EACR,EAAE,wBAAwB,EAAE,0BAA0B,EAAE,0BAA0B,EAAE,EACvF,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAClB,IAAI,CAAC,oCAAoC,CAAC,YAAY,EAAE,kBAAkB,CAAC;YAC3E,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI;YAC7E,SAAS,GAAG,CAAC;gBACT,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,iBAAiB,CAAC;gBAC5D,CAAC,CAAC,EAAE,wBAAwB,EAAE,IAAI,EAAE,0BAA0B,EAAE,IAAI,EAAE;SAC7E,CAAC,CAAC;QAEH,MAAM,gBAAgB,GAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,eAAe,CAAC;QAEnD,qBAAqB;QACrB,MAAM,wBAAwB,GAAG,IAAA,qCAAY,EACzC,gBAAgB,EAChB,SAAS,EACT,UAAU,EACV,UAAU,EACV,eAAe,EACf,IAAI,CAAC,oBAAoB,CAC5B,CAAC;QAEF,MAAM,0BAA0B,GAAY,wBAAwB,KAAK,IAAI,CAAC;QAC9E,MAAM,2BAA2B,GAC7B,SAAS,GAAG,CAAC,IAAI,CAAC,wBAAwB,KAAK,IAAI,IAAI,0BAA0B,KAAK,IAAI,CAAC,CAAC;QAChG,MAAM,wBAAwB,GAAY,SAAS,GAAG,CAAC,IAAI,QAAQ,KAAK,IAAI,CAAC;QAE7E,IAAI,eAA0B,CAAC;QAC/B,IAAI,cAA8B,CAAC;QAEnC,IAAI,0BAA0B,IAAI,2BAA2B,EAAE;YAC3D;;eAEG;YACH,eAAe,GAAG,gBAAI,CAAC;YACvB,cAAc,GAAG,MAAM,CAAC;SAC3B;aAAM,IAAI,wBAAwB,EAAE;YACjC;;;eAGG;YACH,MAAM,gBAAgB,GAAG,SAAS;gBAC9B,CAAC,CAAC,6DAA6D;oBAC7D,oEAAoE;oBACpE,wBAAyB,CAAC,WAAW;gBACvC,CAAC,CAAC,6DAA6D;oBAC7D,oEAAoE;oBACpE,wBAAyB,CAAC,WAAW,CAAC;YAC5C,eAAe,GAAG,IAAA,iCAAyB,EACvC,gBAAgB,EAChB,YAAY,EACZ,0BAA0B,EAC1B,wBAAwB,CAC3B,CAAC;YAEF,MAAM,OAAO,GAAgC;gBACzC,IAAI,EAAE,SAAS;gBACf,eAAe;gBACf,YAAY,EAAE,MAAM,CAAC,MAAM;gBAC3B,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,QAAQ;gBACjC,eAAe;gBACf,YAAY;gBACZ,wBAAwB;gBACxB,0BAA0B,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,0BAA0B;gBACzE,0BAA0B,EAAE,SAAS,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,IAAI;aAC5E,CAAC;YAEF,MAAM,SAAS,GAAiB;gBAC5B,GAAG,EAAE,MAAM,CAAC,SAAS,CAAC,GAAG;gBACzB,MAAM,EAAE;oBACJ,MAAM,EAAE,eAAe;oBACvB,OAAO,EAAE;wBACL,IAAI,EAAE,QAAQ;wBACd,YAAY;qBACf;iBACJ;aACJ,CAAC;YAEF,MAAM,eAAe,GAAoB;gBACrC,2BAA2B,EAAE,wBAAwB;gBACrD,wBAAwB;gBACxB,0BAA0B,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,0BAA0B;gBACzE,0BAA0B,EAAE,SAAS,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,IAAI;aAC5E,CAAC;YAEF,cAAc,GAAG;gBACb,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,YAAY;gBAC1C,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;gBAC3C,OAAO;gBACP,SAAS;gBACT,eAAe;aAClB,CAAC;SACL;aAAM;YACH;;eAEG;YACH,MAAM,gBAAgB,GAClB,SAAS,GAAG,CAAC;gBACT,CAAC,CAAC,IAAA,uCAA+B;gBAC3B,6DAA6D;gBAC7D,oEAAoE;gBACpE,wBAAyB;gBACzB,6DAA6D;gBAC7D,oEAAoE;gBACpE,QAAS,EACT,SAAS;gBACT,6DAA6D;gBAC7D,oEAAoE;gBACpE,0BAA2B;gBAC3B,6DAA6D;gBAC7D,oEAAoE;gBACpE,wBAAyB,CAC5B;gBACH,CAAC,CAAC,gBAAI,CAAC;YACf,eAAe,GAAG,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,YAAY,EAAE,CAAC;YAEnE,MAAM,OAAO,GAAoC;gBAC7C,IAAI,EAAE,QAAQ;gBACd,eAAe;gBACf,YAAY,EAAE,MAAM,CAAC,MAAM;gBAC3B,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,QAAQ;gBACjC,eAAe;gBACf,MAAM,EAAE,gBAAgB;gBACxB,eAAe,EAAE,SAAS;gBAC1B,wBAAwB;gBACxB,0BAA0B,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,0BAA0B;gBACzE,0BAA0B,EAAE,SAAS,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,IAAI;aAC5E,CAAC;YAEF,MAAM,SAAS,GAAiB;gBAC5B,GAAG,EAAE,MAAM,CAAC,SAAS,CAAC,GAAG;gBACzB,MAAM,EAAE;oBACJ,MAAM,EAAE,eAAe;oBACvB,OAAO,EAAE;wBACL,IAAI,EAAE,mBAAmB;wBACzB,gBAAgB;wBAChB,SAAS;qBACZ;iBACJ;aACJ,CAAC;YAEF,MAAM,eAAe,GAAoB;gBACrC,2BAA2B,EAAE,wBAAwB;gBACrD,wBAAwB;gBACxB,0BAA0B,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,0BAA0B;gBACzE,0BAA0B,EAAE,SAAS,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,IAAI;aAC5E,CAAC;YAEF,cAAc,GAAG;gBACb,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,YAAY;gBAC1C,MAAM,EAAE,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;gBAC3C,OAAO;gBACP,SAAS;gBACT,eAAe;aAClB,CAAC;SACL;QAED,OAAO;YACH,cAAc;YACd,gBAAgB;YAChB,gBAAgB;SACnB,CAAC;IACN,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,sBAAsB,CAChC,UAAkB,EAClB,kBAA0B;QAK1B,MAAM,CAAC,0BAA0B,EAAE,wBAAwB,CAAC,GACxD,MAAM,IAAI,CAAC,iBAAiB,CAAC,yBAAyB,CAAC;YACnD;gBACI,OAAO,EAAE,IAAI,CAAC,QAAQ;gBACtB,YAAY,EAAE,UAAU;gBACxB,aAAa,EAAE,kBAAkB;aACpC;YACD;gBACI,OAAO,EAAE,IAAI,CAAC,QAAQ;gBACtB,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,YAAY;gBACjD,aAAa,EAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ;aACjD;SACJ,CAAC,CAAC;QAEP,OAAO;YACH,0BAA0B;YAC1B,wBAAwB;SAC3B,CAAC;IACN,CAAC;IAEO,KAAK,CAAC,oCAAoC,CAC9C,YAA0B,EAC1B,kBAAyF;QAKzF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;QAC9D,MAAM,MAAM,GAAG,kBAAkB,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,kBAAkB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAEtG,OAAO;YACH,MAAM;YACN,MAAM;SACT,CAAC;IACN,CAAC;CACJ;AAvfD,gCAufC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/services/fee_service.ts"],"sourcesContent":["// tslint:disable:max-file-line-count\nimport { TokenMetadata } from '@0x/token-metadata';\nimport { BigNumber } from '@0x/utils';\n\nimport { BPS_TO_RATIO, ZERO } from '../core/constants';\nimport {\n    ConversionRates,\n    DefaultFeeDetailsDeprecated,\n    Fee,\n    FeeBreakdown,\n    FeeWithDetails,\n    GasOnlyFeeDetailsDeprecated,\n    IndicativeQuote,\n    MarginBasedFeeDetailsDeprecated,\n} from '../core/types';\nimport { logger } from '../logger';\nimport { ConfigManager } from '../utils/config_manager';\nimport { GasStationAttendant } from '../utils/GasStationAttendant';\nimport { getBestQuote } from '../utils/quote_comparison_utils';\nimport { calculateGasEstimate } from '../utils/rfqm_gas_estimate_utils';\nimport { TokenPriceOracle } from '../utils/TokenPriceOracle';\nimport { AmmQuote, ZeroExApiClient } from '../utils/ZeroExApiClient';\n\nimport { QuoteContext } from './types';\n\n/**\n * Interface for the response of CalculateFeeAsync() method. Including `feeWithDetails` object, and two optional fields for fee model v2:\n * `quotesWithGasFee` are the original quotes returned by MM when queried with gas fee, and `ammQuoteUniqueId` is the unique\n * id (`decodedUniqueId`) of quote report generated by /swap API as it get called by RFQm fee servie.\n */\ninterface CalculateFeeResponse {\n    feeWithDetails: FeeWithDetails;\n    quotesWithGasFee?: IndicativeQuote[];\n    ammQuoteUniqueId?: string;\n}\n\n/**\n * Pure function to calculate the amount of `default` fee, based on trade size and flat rate in `tradeSizeBps`. Trade size is denominated\n * in `tradeToken` (either `makerToken` or `takerToken`), which is selected by the caller.\n *\n * @param tradeTokenAmount amount of trade token (in base unit) in the trade.\n * @param feeRateBps flat fee rate represented by number of base points.\n * @param tradeTokenBaseUnitPriceUsd USD price of 1 base unit of trade token.\n * @returns `default` fee amount in fee token base unit.\n */\nexport const calculateDefaultFeeAmount = (\n    tradeTokenAmount: BigNumber,\n    feeRateBps: number,\n    tradeTokenBaseUnitPriceUsd: BigNumber | null,\n    feeTokenBaseUnitPriceUsd: BigNumber | null,\n): BigNumber => {\n    if (feeRateBps > 0 && tradeTokenBaseUnitPriceUsd !== null && feeTokenBaseUnitPriceUsd !== null) {\n        return tradeTokenAmount\n            .times(feeRateBps * BPS_TO_RATIO)\n            .times(tradeTokenBaseUnitPriceUsd)\n            .div(feeTokenBaseUnitPriceUsd)\n            .integerValue();\n    }\n\n    return ZERO;\n};\n\n/**\n * Pure function to calculate the price improvement based on given MM quote and AMM quote.\n *\n * @param makerQuoteWithGasFee maker quote with gas fee taken into account.\n * @param ammQuote Amm quote from 0x-api, with only AMM liquidity sources considered.\n * @param isSelling whether taker is selling. If true taker specifies `takerAmount` which should be fixed across quotes,\n * and `quoteToken` is `makerToken`. Otherwise taker specifies `makerAmount` and `quoteToken` is `takerToken`.\n * @param quoteTokenBaseUnitPriceUsd USD price of 1 base unit of quote token.\n * @param feeTokenBaseUnitPriceUsd USD price of 1 base unit of fee token.\n * @returns price improvement of MM quote comparing with AMM quote, in base unit of fee token.\n */\nexport const calculatePriceImprovementAmount = (\n    makerQuoteWithGasFee: IndicativeQuote,\n    ammQuote: AmmQuote,\n    isSelling: boolean,\n    quoteTokenBaseUnitPriceUsd: BigNumber,\n    feeTokenBaseUnitPriceUsd: BigNumber,\n): BigNumber => {\n    if (isSelling) {\n        const makerTokenBaseUnitPriceUsd = quoteTokenBaseUnitPriceUsd;\n        const rfqPrice = makerQuoteWithGasFee.makerAmount\n            .times(makerTokenBaseUnitPriceUsd)\n            .div(feeTokenBaseUnitPriceUsd);\n        const ammPrice = ammQuote.makerAmount\n            .times(new BigNumber(1).plus(ammQuote.expectedSlippage))\n            .times(makerTokenBaseUnitPriceUsd)\n            .div(feeTokenBaseUnitPriceUsd)\n            .minus(ammQuote.estimatedGasFeeWei);\n        if (rfqPrice.gt(ammPrice)) {\n            return rfqPrice.minus(ammPrice).integerValue();\n        }\n    } else {\n        const takerTokenBaseUnitPriceUsd = quoteTokenBaseUnitPriceUsd;\n        const rfqPrice = makerQuoteWithGasFee.takerAmount\n            .times(takerTokenBaseUnitPriceUsd)\n            .div(feeTokenBaseUnitPriceUsd);\n        const ammPrice = ammQuote.takerAmount\n            .times(new BigNumber(1).minus(ammQuote.expectedSlippage))\n            .times(takerTokenBaseUnitPriceUsd)\n            .div(feeTokenBaseUnitPriceUsd)\n            .plus(ammQuote.estimatedGasFeeWei);\n        if (ammPrice.gt(rfqPrice)) {\n            return ammPrice.minus(rfqPrice).integerValue();\n        }\n    }\n    return ZERO;\n};\n\n/**\n * Pure function to revise a maker's quote with fees. This allows us to approximate what the maker's actual quote will be when we\n * ask them to include fees. Useful for reducing load to MM servers.\n *\n * @param quote the raw quote from a maker. For RFQm the raw quote already include gas fee.\n * @param fees fees to incorporate into the quote. For RFQm this will be the amount other than gas fee.\n * @param isSelling whether taker is selling. If true taker specifies `takerAmount` which should be fixed across quotes,\n * and `quoteToken` is `makerToken`. Otherwise taker specifies `makerAmount` and `quoteToken` is `takerToken`.\n * @param quoteTokenBaseUnitPriceUsd USD price of 1 base unit of quote token.\n * @param feeTokenBaseUnitPriceUsd USD price of 1 base unit of fee token.\n * @returns revised quote with fees taken into account.\n */\nexport const reviseQuoteWithFees = (\n    quote: IndicativeQuote,\n    fees: BigNumber,\n    isSelling: boolean,\n    quoteTokenBaseUnitPriceUsd: BigNumber,\n    feeTokenBaseUnitPriceUsd: BigNumber,\n): IndicativeQuote => {\n    let { makerAmount, takerAmount } = quote;\n    if (isSelling) {\n        const makerTokenBaseUnitPriceUsd = quoteTokenBaseUnitPriceUsd;\n        makerAmount = makerAmount\n            .minus(fees.times(feeTokenBaseUnitPriceUsd).div(makerTokenBaseUnitPriceUsd))\n            .integerValue();\n    } else {\n        const takerTokenBaseUnitPriceUsd = quoteTokenBaseUnitPriceUsd;\n        takerAmount = takerAmount\n            .plus(fees.times(feeTokenBaseUnitPriceUsd).div(takerTokenBaseUnitPriceUsd))\n            .integerValue();\n    }\n\n    return { ...quote, makerAmount, takerAmount };\n};\n\n/**\n * FeeService is used by RfqmService to calculate RFQm Fees of all versions (0, 1 and 2).\n */\nexport class FeeService {\n    constructor(\n        private readonly _chainId: number,\n        private readonly _feeTokenMetadata: TokenMetadata,\n        private readonly _configManager: ConfigManager,\n        private readonly _gasStationAttendant: GasStationAttendant,\n        private readonly _tokenPriceOracle: TokenPriceOracle,\n        private readonly _zeroExApiClient: ZeroExApiClient,\n        private readonly _minExpiryDurationMs: number,\n    ) {}\n\n    /**\n     * Retrieve estimated gas price from the gas station.\n     *\n     * @returns estimated gas price\n     */\n    public async getGasPriceEstimationAsync(): Promise<BigNumber> {\n        const gasPriceEstimate = await this._gasStationAttendant.getExpectedTransactionGasRateAsync();\n        return gasPriceEstimate;\n    }\n\n    /**\n     * Calculate Fee for given quote context.\n     *\n     * @returns estimated fee with details\n     */\n    public async calculateFeeAsync(\n        quoteContext: QuoteContext,\n        fetchMmQuotesAsync?: (quoteContext: QuoteContext, fee: Fee) => Promise<IndicativeQuote[]>,\n    ): Promise<CalculateFeeResponse> {\n        const { feeModelVersion } = quoteContext;\n\n        switch (feeModelVersion) {\n            case 2:\n                return this._calculateFeeV2Async(quoteContext, fetchMmQuotesAsync);\n            case 1:\n                return {\n                    feeWithDetails: await this._calculateFeeV1Async(quoteContext),\n                };\n            case 0:\n            default:\n                return {\n                    feeWithDetails: await this._calculateGasFeeAsync({ ...quoteContext, feeModelVersion: 0 }),\n                };\n        }\n    }\n    /**\n     * Revise original maker quotes with fees. This allows us to approximate what the maker's actual quote will be when we ask them\n     * to include fees. Useful for reducing load to MM servers.\n     * @param quotes the raw quotes from the makers. For RFQm the raw quote already include gas fee.\n     * @param fees fees to incorporate into the quote - amount in base unit of fee token. For RFQm this will be the amount other than\n     * gas fee.\n     * @param quoteContext context of quote request.\n     * @returns revised quotes.\n     */\n    public async reviseQuotesAsync(\n        quotes: IndicativeQuote[],\n        fees: BigNumber,\n        quoteContext: QuoteContext,\n    ): Promise<IndicativeQuote[]> {\n        if (fees.eq(ZERO)) {\n            return quotes;\n        }\n\n        const { isSelling, makerToken, takerToken, makerTokenDecimals, takerTokenDecimals } = quoteContext;\n\n        // `quoteToken` is one of `makerToken` and `takerToken` whose amount is specified by makers in the quotes.\n        const quoteToken = isSelling ? makerToken : takerToken;\n        const quoteTokenDecimal = isSelling ? makerTokenDecimals : takerTokenDecimals;\n\n        const { feeTokenBaseUnitPriceUsd, tradeTokenBaseUnitPriceUsd: quoteTokenBaseUnitPriceUsd } =\n            await this._fetchTokenPricesAsync(quoteToken, quoteTokenDecimal);\n\n        if (feeTokenBaseUnitPriceUsd === null || quoteTokenBaseUnitPriceUsd === null) {\n            return quotes;\n        }\n\n        return quotes.map((quote) =>\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            reviseQuoteWithFees(quote, fees, isSelling, quoteTokenBaseUnitPriceUsd!, feeTokenBaseUnitPriceUsd!),\n        );\n    }\n\n    /**\n     * Calculate gas fee for all fee model versions, based on gas price query and gas estimation.\n     *\n     * @returns estimated gas fee with `gasOnly` details\n     */\n    private async _calculateGasFeeAsync(\n        quoteContext: QuoteContext,\n    ): Promise<FeeWithDetails & { details: GasOnlyFeeDetailsDeprecated }> {\n        const { workflow, takerToken, makerToken, isUnwrap, feeModelVersion } = quoteContext;\n\n        if (workflow === 'rfqt') {\n            const gasPrice = new BigNumber(0);\n            const gasFeeAmount = new BigNumber(0);\n            return {\n                amount: gasFeeAmount,\n                token: this._feeTokenMetadata.tokenAddress,\n                type: 'fixed',\n                details: {\n                    kind: 'gasOnly',\n                    feeModelVersion,\n                    gasFeeAmount,\n                    gasPrice,\n                },\n                breakdown: {},\n                conversionRates: {\n                    nativeTokenBaseUnitPriceUsd: null,\n                    feeTokenBaseUnitPriceUsd: null,\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: null,\n                },\n            };\n        }\n\n        const gasPrice: BigNumber = await this.getGasPriceEstimationAsync();\n        const gasEstimate = calculateGasEstimate(makerToken, takerToken, 'otc', isUnwrap);\n        const gasFeeAmount = gasPrice.times(gasEstimate);\n\n        return {\n            amount: gasFeeAmount,\n            token: this._feeTokenMetadata.tokenAddress,\n            type: 'fixed',\n            details: {\n                kind: 'gasOnly',\n                feeModelVersion,\n                gasFeeAmount,\n                gasPrice,\n            },\n            breakdown: {\n                gas: {\n                    amount: gasFeeAmount,\n                    details: {\n                        gasPrice,\n                        estimatedGas: new BigNumber(gasEstimate),\n                    },\n                },\n            },\n            conversionRates: {\n                nativeTokenBaseUnitPriceUsd: null,\n                feeTokenBaseUnitPriceUsd: null,\n                takerTokenBaseUnitPriceUsd: null,\n                makerTokenBaseUnitPriceUsd: null,\n            },\n        };\n    }\n\n    /**\n     * Calculate fee with fee model v1, including gas fee and and zeroExFee. If token prices query\n     * is successful, zeroExFee will be based on trade size and `tradeSizeBps`. If not, `gasOnly` fee\n     * will be returned.\n     *\n     * @returns fee with `default` | `gasOnly` details\n     */\n    private async _calculateFeeV1Async(\n        quoteContext: QuoteContext,\n    ): Promise<FeeWithDetails & { details: DefaultFeeDetailsDeprecated | GasOnlyFeeDetailsDeprecated }> {\n        const {\n            workflow,\n            takerToken,\n            makerToken,\n            takerAmount,\n            makerAmount,\n            takerTokenDecimals,\n            makerTokenDecimals,\n            isSelling,\n            feeModelVersion,\n        } = quoteContext;\n\n        const { tradeSizeBps } = this._configManager.getFeeModelConfiguration(this._chainId, makerToken, takerToken);\n\n        // Select trade token so that `tradeTokenAmount` is known from quote request\n        const tradeToken = isSelling ? takerToken : makerToken;\n        const tradeTokenDecimals = isSelling ? takerTokenDecimals : makerTokenDecimals;\n        const tradeTokenAmount = isSelling ? takerAmount : makerAmount;\n\n        const [gasFee, { feeTokenBaseUnitPriceUsd, tradeTokenBaseUnitPriceUsd }] = await Promise.all([\n            this._calculateGasFeeAsync(quoteContext),\n            tradeSizeBps > 0\n                ? this._fetchTokenPricesAsync(tradeToken, tradeTokenDecimals)\n                : { tradeTokenBaseUnitPriceUsd: null, feeTokenBaseUnitPriceUsd: null },\n        ]);\n\n        const wasUnableToFetchTokenPrices: boolean =\n            tradeSizeBps > 0 && (feeTokenBaseUnitPriceUsd === null || tradeTokenBaseUnitPriceUsd === null);\n\n        if (wasUnableToFetchTokenPrices) {\n            return gasFee;\n        }\n\n        const zeroExFeeAmount =\n            tradeSizeBps > 0\n                ? calculateDefaultFeeAmount(\n                      // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                      tradeTokenAmount!,\n                      tradeSizeBps,\n                      tradeTokenBaseUnitPriceUsd,\n                      feeTokenBaseUnitPriceUsd,\n                  )\n                : ZERO;\n\n        logger.info(\n            {\n                gasFee,\n                feeTokenBaseUnitPriceUsd,\n                tradeTokenBaseUnitPriceUsd,\n                zeroExFeeAmount,\n            },\n            'Gas fee, token prices and 0x fee amount in `_calculateFeeV1Async`',\n        );\n\n        return {\n            type: 'fixed',\n            token: this._feeTokenMetadata.tokenAddress,\n            amount: gasFee.amount.plus(zeroExFeeAmount),\n            details: {\n                kind: 'default',\n                feeModelVersion,\n                gasFeeAmount: gasFee.amount,\n                gasPrice: gasFee.details.gasPrice,\n                zeroExFeeAmount,\n                tradeSizeBps,\n                feeTokenBaseUnitPriceUsd,\n                takerTokenBaseUnitPriceUsd: isSelling ? tradeTokenBaseUnitPriceUsd : null,\n                makerTokenBaseUnitPriceUsd: isSelling ? null : tradeTokenBaseUnitPriceUsd,\n            },\n            breakdown: {\n                // RFQ will not charge gas fee for RFQt as taker will pay it\n                gas: workflow === 'rfqt' ? undefined : gasFee.breakdown.gas,\n                zeroEx: {\n                    amount: zeroExFeeAmount,\n                    details: {\n                        kind: 'volume',\n                        tradeSizeBps,\n                    },\n                },\n            },\n            conversionRates: {\n                nativeTokenBaseUnitPriceUsd: feeTokenBaseUnitPriceUsd,\n                feeTokenBaseUnitPriceUsd,\n                takerTokenBaseUnitPriceUsd: isSelling ? tradeTokenBaseUnitPriceUsd : null,\n                makerTokenBaseUnitPriceUsd: isSelling ? null : tradeTokenBaseUnitPriceUsd,\n            },\n        };\n    }\n\n    /**\n     * Calculate fee with fee model v2, including gas fee and zeroExFee. If price improvement detection\n     * is successful, zeroExFee will be based on price improvement. If not:\n     *     * Fall back to `default` fee if maker query and token prices query are both successful.\n     *     * Fall back to `gasOnly` fee if either maker query and token prices query failed.\n     *\n     * @returns fee with `margin` (price improvement) | `default` | `gasOnly` details (legacy fee breakdown)\n     * and a breakdown including gas fee and zeroEx fee details.\n     */\n    private async _calculateFeeV2Async(\n        quoteContext: QuoteContext,\n        fetchMmQuotesAsync?: (quoteContext: QuoteContext, fee: Fee) => Promise<IndicativeQuote[]>,\n    ): Promise<CalculateFeeResponse> {\n        const {\n            workflow,\n            takerToken,\n            makerToken,\n            takerTokenDecimals,\n            makerTokenDecimals,\n            isSelling,\n            assetFillAmount,\n            feeModelVersion,\n        } = quoteContext;\n\n        if (workflow === 'rfqt') {\n            throw new Error(`Not implemented: price improvement based fee model for RFQt has not been implemented!`);\n        }\n\n        const { marginRakeRatio: rakeRatio, tradeSizeBps } = this._configManager.getFeeModelConfiguration(\n            this._chainId,\n            makerToken,\n            takerToken,\n        );\n\n        // `quoteToken` is one of `makerToken` and `takerToken` whose amount is specified by makers in the quotes.\n        const quoteToken = isSelling ? makerToken : takerToken;\n        const quoteTokenDecimal = isSelling ? makerTokenDecimals : takerTokenDecimals;\n\n        /**\n         * Send all queries in parallel. Bypass AMM query and token price query if rakeRatio > 0.\n         */\n        const [\n            { gasFee, quotes: quotesWithGasFee },\n            ammQuote,\n            { feeTokenBaseUnitPriceUsd, tradeTokenBaseUnitPriceUsd: quoteTokenBaseUnitPriceUsd },\n        ] = await Promise.all([\n            this._fetchGasFeeAndIndicativeQuotesAsync(quoteContext, fetchMmQuotesAsync),\n            rakeRatio > 0 ? this._zeroExApiClient.fetchAmmQuoteAsync(quoteContext) : null,\n            rakeRatio > 0\n                ? this._fetchTokenPricesAsync(quoteToken, quoteTokenDecimal)\n                : { feeTokenBaseUnitPriceUsd: null, tradeTokenBaseUnitPriceUsd: null },\n        ]);\n\n        const ammQuoteUniqueId = ammQuote?.decodedUniqueId;\n\n        // Get the best quote\n        const bestMakerQuoteWithGasFee = getBestQuote(\n            quotesWithGasFee,\n            isSelling,\n            takerToken,\n            makerToken,\n            assetFillAmount,\n            this._minExpiryDurationMs,\n        );\n\n        const wasUnableToFetchMakerQuote: boolean = bestMakerQuoteWithGasFee === null;\n        const wasUnableToFetchTokenPrices: boolean =\n            rakeRatio > 0 && (feeTokenBaseUnitPriceUsd === null || quoteTokenBaseUnitPriceUsd === null);\n        const wasUnableToFetchAmmQuote: boolean = rakeRatio > 0 && ammQuote === null;\n\n        let zeroExFeeAmount: BigNumber;\n        let feeWithDetails: FeeWithDetails;\n\n        if (wasUnableToFetchMakerQuote || wasUnableToFetchTokenPrices) {\n            /**\n             * If maker query or token prices query failed: fallback to `gasOnly` fee.\n             */\n            zeroExFeeAmount = ZERO;\n            feeWithDetails = gasFee;\n        } else if (wasUnableToFetchAmmQuote) {\n            /**\n             * If maker query and token price query are successful, but AMM query failed,\n             * fall back to `default` fee calculated with `tradeSizeBps`.\n             */\n            const quoteTokenAmount = isSelling\n                ? // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                  bestMakerQuoteWithGasFee!.makerAmount\n                : // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                  bestMakerQuoteWithGasFee!.takerAmount;\n            zeroExFeeAmount = calculateDefaultFeeAmount(\n                quoteTokenAmount,\n                tradeSizeBps,\n                quoteTokenBaseUnitPriceUsd,\n                feeTokenBaseUnitPriceUsd,\n            );\n\n            const details: DefaultFeeDetailsDeprecated = {\n                kind: 'default',\n                feeModelVersion,\n                gasFeeAmount: gasFee.amount,\n                gasPrice: gasFee.details.gasPrice,\n                zeroExFeeAmount,\n                tradeSizeBps,\n                feeTokenBaseUnitPriceUsd,\n                takerTokenBaseUnitPriceUsd: isSelling ? null : quoteTokenBaseUnitPriceUsd,\n                makerTokenBaseUnitPriceUsd: isSelling ? quoteTokenBaseUnitPriceUsd : null,\n            };\n\n            const breakdown: FeeBreakdown = {\n                gas: gasFee.breakdown.gas,\n                zeroEx: {\n                    amount: zeroExFeeAmount,\n                    details: {\n                        kind: 'volume',\n                        tradeSizeBps,\n                    },\n                },\n            };\n\n            const conversionRates: ConversionRates = {\n                nativeTokenBaseUnitPriceUsd: feeTokenBaseUnitPriceUsd,\n                feeTokenBaseUnitPriceUsd,\n                takerTokenBaseUnitPriceUsd: isSelling ? null : quoteTokenBaseUnitPriceUsd,\n                makerTokenBaseUnitPriceUsd: isSelling ? quoteTokenBaseUnitPriceUsd : null,\n            };\n\n            feeWithDetails = {\n                type: 'fixed',\n                token: this._feeTokenMetadata.tokenAddress,\n                amount: gasFee.amount.plus(zeroExFeeAmount),\n                details,\n                breakdown,\n                conversionRates,\n            };\n        } else {\n            /**\n             * If all queries are successful: return `priceImprovement` based fee, calculated from `priceImprovement` and `rakeRatio`.\n             */\n            const priceImprovement =\n                rakeRatio > 0\n                    ? calculatePriceImprovementAmount(\n                          // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                          bestMakerQuoteWithGasFee!,\n                          // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                          ammQuote!,\n                          isSelling,\n                          // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                          quoteTokenBaseUnitPriceUsd!,\n                          // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                          feeTokenBaseUnitPriceUsd!,\n                      )\n                    : ZERO;\n            zeroExFeeAmount = priceImprovement.times(rakeRatio).integerValue();\n\n            const details: MarginBasedFeeDetailsDeprecated = {\n                kind: 'margin',\n                feeModelVersion,\n                gasFeeAmount: gasFee.amount,\n                gasPrice: gasFee.details.gasPrice,\n                zeroExFeeAmount,\n                margin: priceImprovement, // legacy field name `margin`\n                marginRakeRatio: rakeRatio, // legacy field name `marginRakeRatio`\n                feeTokenBaseUnitPriceUsd,\n                takerTokenBaseUnitPriceUsd: isSelling ? null : quoteTokenBaseUnitPriceUsd,\n                makerTokenBaseUnitPriceUsd: isSelling ? quoteTokenBaseUnitPriceUsd : null,\n            };\n\n            const breakdown: FeeBreakdown = {\n                gas: gasFee.breakdown.gas,\n                zeroEx: {\n                    amount: zeroExFeeAmount,\n                    details: {\n                        kind: 'price_improvement',\n                        priceImprovement,\n                        rakeRatio,\n                    },\n                },\n            };\n\n            const conversionRates: ConversionRates = {\n                nativeTokenBaseUnitPriceUsd: feeTokenBaseUnitPriceUsd,\n                feeTokenBaseUnitPriceUsd,\n                takerTokenBaseUnitPriceUsd: isSelling ? null : quoteTokenBaseUnitPriceUsd,\n                makerTokenBaseUnitPriceUsd: isSelling ? quoteTokenBaseUnitPriceUsd : null,\n            };\n\n            feeWithDetails = {\n                type: 'fixed',\n                token: this._feeTokenMetadata.tokenAddress,\n                amount: zeroExFeeAmount.plus(gasFee.amount),\n                details,\n                breakdown,\n                conversionRates,\n            };\n        }\n\n        return {\n            feeWithDetails,\n            quotesWithGasFee,\n            ammQuoteUniqueId,\n        };\n    }\n\n    /**\n     * Internal method to fetch prices of tradingToken (either makerToken or takerToken) and feeToken.\n     */\n    private async _fetchTokenPricesAsync(\n        tradeToken: string,\n        tradeTokenDecimals: number,\n    ): Promise<{\n        tradeTokenBaseUnitPriceUsd: BigNumber | null;\n        feeTokenBaseUnitPriceUsd: BigNumber | null;\n    }> {\n        const [tradeTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd] =\n            await this._tokenPriceOracle.batchFetchTokenPriceAsync([\n                {\n                    chainId: this._chainId,\n                    tokenAddress: tradeToken,\n                    tokenDecimals: tradeTokenDecimals,\n                },\n                {\n                    chainId: this._chainId,\n                    tokenAddress: this._feeTokenMetadata.tokenAddress,\n                    tokenDecimals: this._feeTokenMetadata.decimals,\n                },\n            ]);\n\n        return {\n            tradeTokenBaseUnitPriceUsd,\n            feeTokenBaseUnitPriceUsd,\n        };\n    }\n\n    private async _fetchGasFeeAndIndicativeQuotesAsync(\n        quoteContext: QuoteContext,\n        fetchMmQuotesAsync?: (quoteContext: QuoteContext, fee: Fee) => Promise<IndicativeQuote[]>,\n    ): Promise<{\n        gasFee: FeeWithDetails;\n        quotes: IndicativeQuote[];\n    }> {\n        const gasFee = await this._calculateGasFeeAsync(quoteContext);\n        const quotes = fetchMmQuotesAsync === undefined ? [] : await fetchMmQuotesAsync(quoteContext, gasFee);\n\n        return {\n            gasFee,\n            quotes,\n        };\n    }\n}\n"],"version":3}