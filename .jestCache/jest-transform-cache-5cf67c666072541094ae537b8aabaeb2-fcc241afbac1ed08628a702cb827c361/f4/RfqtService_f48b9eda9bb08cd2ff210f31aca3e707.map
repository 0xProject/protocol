{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/services/RfqtService.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/services/RfqtService.ts"],"sourcesContent":["import { AssetSwapperContractAddresses } from '@0x/asset-swapper/lib/src/types';\nimport { OtcOrder } from '@0x/protocol-utils/lib/src/orders';\nimport { Signature } from '@0x/protocol-utils/lib/src/signature_utils';\nimport {\n    getTokenMetadataIfExists,\n    nativeTokenSymbol,\n    nativeWrappedTokenSymbol,\n    TokenMetadata,\n} from '@0x/token-metadata';\nimport { MarketOperation } from '@0x/types';\nimport { BigNumber } from '@0x/utils';\nimport { Producer as KafkaProducer } from 'kafkajs';\n\nimport { Integrator } from '../config';\nimport { GASLESS_OTC_ORDER_NUM_BUCKETS, NULL_ADDRESS, ONE_SECOND_MS } from '../core/constants';\nimport { feeToStoredFee } from '../core/fee_utils';\nimport {\n    Fee,\n    FeeModelVersion,\n    QuoteServerPriceParams,\n    RequireOnlyOne,\n    RfqtV2Price,\n    RfqtV2Quote,\n    StoredFee,\n} from '../core/types';\nimport { logger } from '../logger';\nimport { AltRfqMakerAssetOfferings } from '../quoteRequestor/altMmTypes';\nimport { QuoteRequestor, SignedNativeOrderMM, V4RFQIndicativeQuoteMM } from '../quoteRequestor/QuoteRequestor';\nimport { CacheClient } from '../utils/cache_client';\nimport { modulo } from '../utils/number_utils';\nimport { quoteReportUtils } from '../utils/quote_report_utils';\nimport { QuoteServerClient } from '../utils/quote_server_client';\nimport { getRfqtV2FillableAmounts, validateV2Prices } from '../utils/RfqtQuoteValidator';\nimport { RfqBlockchainUtils } from '../utils/rfq_blockchain_utils';\nimport { RfqMakerManager } from '../utils/rfq_maker_manager';\nimport { getSignerFromHash, padSignature } from '../utils/signature_utils';\nimport { TokenMetadataManager } from '../utils/TokenMetadataManager';\n\nimport { FeeService } from './fee_service';\nimport { RfqMakerBalanceCacheService } from './rfq_maker_balance_cache_service';\nimport { FirmQuoteContext, QuoteContext } from './types';\n\nconst getTokenAddressFromSymbol = (symbol: string, chainId: number): string => {\n    return (getTokenMetadataIfExists(symbol, chainId) as TokenMetadata).tokenAddress;\n};\n\n/**\n * Converts the parameters of an RFQt v2 prices request from 0x API\n * into the format needed for `QuoteServerClient` to call the market makers\n */\nfunction transformRfqtV2PricesParameters(p: QuoteContext, fee: Fee, chainId: number): QuoteServerPriceParams {\n    const buyTokenAddress = p.makerToken;\n    const sellTokenAddress = p.takerToken;\n    // Typescript gymnastics with `baseUnits` to caputure the \"oneof\" nature--\n    // By packaging them in their own little object, the type becomes:\n    //\n    // { buyAmountBaseUnits: BigNumber, sellAmountBaseUnits: undefined } |\n    // { buyAmountBaseUnits: undefined, sellAmountBaseUnits: BigNumber }\n    //\n    // This is different from not packaging them together, where the types would be:\n    //\n    // buyAmountBaseUnits: BigNumber | undefined\n    // sellAmountBaseUnits: BigNumber | undefined\n    const baseUnits =\n        p.isSelling === false\n            ? {\n                  buyAmountBaseUnits: p.assetFillAmount,\n                  sellAmountBaseUnits: undefined,\n              }\n            : {\n                  // This is a SELL\n                  buyAmountBaseUnits: undefined,\n                  sellAmountBaseUnits: p.assetFillAmount,\n              };\n\n    const mmRequestParameters = {\n        ...baseUnits,\n        buyTokenAddress,\n        sellTokenAddress,\n        chainId,\n        feeAmount: fee.amount,\n        feeToken: fee.token,\n        integratorId: p.integrator.integratorId,\n        takerAddress: p.takerAddress,\n        txOrigin: p.txOrigin,\n        // trader: p.trader,\n        // workflow: p.workflow,\n        protocolVersion: '4', //hardcode - will break some MMs if missing!\n    };\n\n    // Convert mmRequestParameters values to strings\n    const stringParameters = ((\n        o: typeof mmRequestParameters,\n    ): RequireOnlyOne<\n        Record<keyof typeof mmRequestParameters, string>,\n        'buyAmountBaseUnits' | 'sellAmountBaseUnits'\n    > => {\n        return Object.keys(o).reduce((result, key) => {\n            const value: { toString: () => string } | undefined = o[key as keyof typeof mmRequestParameters];\n            if (value !== undefined && value.toString) {\n                const stringValue = value.toString();\n                result[key] = stringValue;\n            }\n            return result;\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, {} as any);\n    })(mmRequestParameters);\n\n    return stringParameters;\n}\n\n/**\n * Contains the logic to handle RFQT Trades.\n *\n * `\"v1\"` functions support `MetaTransaction` trades while\n * `\"v2\"` functions (will) support `OtcOrder` trades.\n *\n * `v1` relies heavily on `QuoteRequestor` which has been copied over\n * from `0x/asset-swapper`.\n */\nexport class RfqtService {\n    private readonly _nativeTokenSymbol: string;\n    private readonly _nativeTokenAddress: string;\n    private readonly _nativeWrappedTokenSymbol: string;\n    private readonly _nativeWrappedTokenAddress: string;\n    constructor(\n        private readonly _chainId: number,\n        private readonly _rfqMakerManager: RfqMakerManager,\n        // Used for RFQt v1 requests\n        private readonly _quoteRequestor: Pick<\n            QuoteRequestor,\n            'requestRfqtIndicativeQuotesAsync' | 'requestRfqtFirmQuotesAsync' | 'getMakerUriForSignature'\n        >,\n        // Used for RFQt v2 requests\n        private readonly _quoteServerClient: QuoteServerClient,\n        private readonly _minExpiryDurationMs: number,\n        private readonly _blockchainUtils: RfqBlockchainUtils,\n        private readonly _tokenMetadataManager: TokenMetadataManager,\n        private readonly _contractAddresses: AssetSwapperContractAddresses,\n        private readonly _feeService: FeeService,\n        private readonly _feeModelVersion: FeeModelVersion,\n        private readonly _rfqMakerBalanceCacheService: RfqMakerBalanceCacheService,\n        private readonly _cacheClient: CacheClient,\n        private readonly _kafkaProducer?: KafkaProducer,\n        private readonly _feeEventTopic?: string,\n    ) {\n        this._nativeTokenSymbol = nativeTokenSymbol(this._chainId);\n        this._nativeTokenAddress = getTokenAddressFromSymbol(this._nativeTokenSymbol, this._chainId);\n        this._nativeWrappedTokenSymbol = nativeWrappedTokenSymbol(this._chainId);\n        this._nativeWrappedTokenAddress = getTokenAddressFromSymbol(this._nativeWrappedTokenSymbol, this._chainId);\n    }\n\n    /**\n     * Pass through to `QuoteRequestor::requestRfqtIndicativeQuotesAsync` to fetch\n     * indicative quotes from market makers.\n     *\n     * Note that by this point, 0x API should be sending the null address\n     * as the `takerAddress` and the taker's address as the `txOrigin`.\n     */\n    public async getV1PricesAsync(parameters: {\n        altRfqAssetOfferings: AltRfqMakerAssetOfferings;\n        assetFillAmount: BigNumber;\n        comparisonPrice: BigNumber | undefined;\n        makerToken: string;\n        marketOperation: MarketOperation;\n        takerToken: string; // expect this to be NULL_ADDRESS\n        takerAddress: string;\n        txOrigin?: string; // expect this to be the taker address\n        intentOnFilling: boolean;\n        integrator: Integrator;\n    }): Promise<V4RFQIndicativeQuoteMM[]> {\n        const {\n            altRfqAssetOfferings,\n            assetFillAmount,\n            comparisonPrice,\n            integrator,\n            intentOnFilling, // tslint:disable-line boolean-naming\n            makerToken,\n            marketOperation,\n            takerAddress,\n            takerToken,\n            txOrigin,\n        } = parameters;\n\n        return this._quoteRequestor.requestRfqtIndicativeQuotesAsync(\n            makerToken,\n            takerToken,\n            assetFillAmount,\n            marketOperation,\n            comparisonPrice,\n            {\n                altRfqAssetOfferings,\n                integrator,\n                intentOnFilling,\n                isIndicative: true,\n                isLastLook: false,\n                makerEndpointMaxResponseTimeMs: 600,\n                takerAddress,\n                txOrigin: txOrigin || NULL_ADDRESS,\n            },\n        );\n    }\n\n    /**\n     * Pass through to `QuoteRequestor::requestRfqtFirmQuotesAsync` to fetch\n     * firm quotes from market makers.\n     *\n     * Note that by this point, 0x API should be sending the null address\n     * as the `takerAddress` and the taker's address as the `txOrigin`.\n     */\n    public async getV1QuotesAsync(parameters: {\n        altRfqAssetOfferings: AltRfqMakerAssetOfferings;\n        assetFillAmount: BigNumber;\n        comparisonPrice: BigNumber | undefined;\n        integrator: Integrator;\n        intentOnFilling: boolean;\n        makerToken: string;\n        marketOperation: MarketOperation;\n        takerAddress: string; // expect this to be the taker address\n        takerToken: string;\n        txOrigin: string;\n    }): Promise<SignedNativeOrderMM[]> {\n        const {\n            altRfqAssetOfferings,\n            assetFillAmount,\n            comparisonPrice,\n            integrator,\n            intentOnFilling, // tslint:disable-line boolean-naming\n            makerToken,\n            marketOperation,\n            takerAddress,\n            takerToken,\n            txOrigin,\n        } = parameters;\n\n        const quotes = await this._quoteRequestor.requestRfqtFirmQuotesAsync(\n            makerToken,\n            takerToken,\n            assetFillAmount,\n            marketOperation,\n            comparisonPrice,\n            {\n                altRfqAssetOfferings,\n                integrator,\n                intentOnFilling,\n                isIndicative: false,\n                isLastLook: false,\n                makerEndpointMaxResponseTimeMs: 600,\n                takerAddress,\n                txOrigin,\n            },\n        );\n\n        return quotes.map((q) => {\n            return {\n                ...q,\n                makerUri: this._quoteRequestor.getMakerUriForSignature(q.signature),\n            };\n        });\n    }\n\n    /**\n     * Accepts data sent by 0x API and fetches prices from Market Makers\n     * configured on the given pair.\n     *\n     * Note that by this point, 0x API should be sending the null address\n     * as the `takerAddress` and the taker's address as the `txOrigin`.\n     */\n    public async getV2PricesAsync(quoteContext: QuoteContext, now: Date = new Date()): Promise<RfqtV2Price[]> {\n        const { feeWithDetails: fee } = await this._feeService.calculateFeeAsync(quoteContext);\n        return this._getV2PricesInternalAsync(quoteContext, fee, now);\n    }\n\n    /**\n     * Accepts data sent by 0x API and fetches quotes from market makers\n     * configured on the given pair.\n     *\n     * Preparing quotes is a two step process:\n     *  1. Requests are made to the market makers' `/price` endpoint using\n     *     logic similar to that of `getV2PricesAsync`\n     *  2. Valid prices are then sent to the market makers' `/sign`\n     *     endpoint to get a signed quote\n     */\n    public async getV2QuotesAsync(quoteContext: FirmQuoteContext, now: Date = new Date()): Promise<RfqtV2Quote[]> {\n        const { feeWithDetails: fee } = await this._feeService.calculateFeeAsync(quoteContext);\n        const storedFee: StoredFee = feeToStoredFee(fee);\n\n        // TODO (rhinodavid): put a meter on this response time\n        const prices = await this._getV2PricesInternalAsync(quoteContext, fee, now);\n\n        // Handle nonce\n        let pricesAndOrders: { price: RfqtV2Price; order: OtcOrder }[] = [];\n\n        if (quoteContext.workflow === 'gasless-rfqt') {\n            // For gasless RFQt, each order needs a different bucket\n            // \"Reserve\" the next N buckets and get the last one\n            const lastReservedBucket =\n                (await this._cacheClient.getNextNOtcOrderBucketsAsync(quoteContext.chainId, prices.length)) %\n                GASLESS_OTC_ORDER_NUM_BUCKETS;\n\n            // Starting with the last bucket, we give each request its own bucket by decrementing\n            // and wrapping around if negative (via modulo)\n            const baseNonce = new BigNumber(Math.floor(now.getTime() / ONE_SECOND_MS));\n            pricesAndOrders = prices.map((price, i) => ({\n                order: this._v2priceToOrder(\n                    price,\n                    quoteContext.txOrigin,\n                    baseNonce,\n                    new BigNumber(modulo(lastReservedBucket - i, GASLESS_OTC_ORDER_NUM_BUCKETS)), // decrement from last bucket and wrap around if negative\n                ),\n                price,\n            }));\n        } else if (quoteContext.workflow === 'rfqt') {\n            // For RFQt, all orders share the same bucket, but must have different nonces\n            // For RFQtMultiHop all orders have different buckets and nonces\n            const baseNonce = new BigNumber(Math.floor(now.getTime() / ONE_SECOND_MS));\n            pricesAndOrders = prices.map((price, i) => ({\n                order: this._v2priceToOrder(\n                    price,\n                    quoteContext.txOrigin,\n                    baseNonce.plus(i),\n                    quoteContext.bucket !== undefined ? new BigNumber(quoteContext.bucket + i) : new BigNumber(0), // bucket\n                ),\n                price,\n            }));\n        }\n\n        const pricesAndOrdersAndSignatures = await Promise.all(\n            pricesAndOrders.map(async ({ price, order }) => {\n                let signature: Signature | undefined;\n                try {\n                    const orderHash = order.getHash();\n                    signature = await this._quoteServerClient.signV2Async(\n                        price.makerUri,\n                        quoteContext.integrator.integratorId,\n                        {\n                            order,\n                            orderHash,\n                            expiry: price.expiry,\n                            fee,\n                            trader: quoteContext.trader,\n                            workflow: quoteContext.workflow,\n                        },\n                        (u: string) => `${u}/rfqt/v2/sign`,\n                        /* requireProceedWithFill */ false,\n                    );\n\n                    if (signature) {\n                        // Certain market makers are returning signature components which are missing\n                        // leading bytes. Add them if they don't exist.\n                        const paddedSignature = padSignature(signature);\n                        if (paddedSignature.r !== signature.r || paddedSignature.s !== signature.s) {\n                            logger.warn(\n                                { orderHash, r: paddedSignature.r, s: paddedSignature.s },\n                                'Got market maker signature with missing bytes',\n                            );\n                            signature = paddedSignature;\n                        }\n\n                        // Verify the signer was the maker\n                        const signerAddress = getSignerFromHash(orderHash, signature).toLowerCase();\n                        const makerAddress = order.maker.toLowerCase();\n                        if (signerAddress !== makerAddress) {\n                            const isValidSigner = await this._blockchainUtils.isValidOrderSignerAsync(\n                                makerAddress,\n                                signerAddress,\n                            );\n                            if (!isValidSigner) {\n                                logger.warn(\n                                    { signerAddress, makerAddress, orderHash, makerUri: price.makerUri },\n                                    'Invalid maker signature',\n                                );\n\n                                // Quotes with `undefined` signature will be filtered out later\n                                signature = undefined;\n                            }\n                        }\n                    }\n                } catch (e) {\n                    logger.warn(\n                        { orderHash: order.getHash(), makerId: price.makerId },\n                        'Failed trying to get rfqt signature from market maker',\n                    );\n                }\n                return {\n                    price,\n                    order,\n                    signature: signature ?? null,\n                };\n            }),\n        );\n\n        // (Maker Balance Cache) Fetch maker balances to calculate fillable amounts\n        let quotedMakerBalances: BigNumber[] | undefined;\n        const quotedERC20Owners = prices.map((price) => ({\n            owner: price.makerAddress,\n            token: price.makerToken,\n        }));\n        try {\n            quotedMakerBalances = await this._rfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(\n                this._chainId,\n                quotedERC20Owners,\n            );\n        } catch (e) {\n            logger.error(\n                { chainId: this._chainId, quotedERC20Owners, errorMessage: e.message },\n                'Failed to fetch maker balances to calculate fillable amounts',\n            );\n        }\n\n        const fillableAmounts = getRfqtV2FillableAmounts(prices, this._chainId, quotedMakerBalances);\n\n        const quotes = pricesAndOrdersAndSignatures\n            .filter((pos) => pos.signature)\n            .map(({ price, order, signature }, i) => ({\n                ...fillableAmounts[i],\n                fillableTakerFeeAmount: new BigNumber(0),\n                makerId: price.makerId,\n                makerUri: price.makerUri,\n                order,\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                signature: signature!, // `null` signatures already filtered out\n            }));\n\n        // Write to Fee Event Report\n        if (this._kafkaProducer) {\n            try {\n                await quoteReportUtils.publishRfqtV2FeeEvent(\n                    {\n                        requestedBuyAmount: quoteContext.makerAmount ?? null,\n                        requestedSellAmount: quoteContext.takerAmount ?? null,\n                        requestedTakerAddress: quoteContext.takerAddress,\n                        buyTokenAddress: quoteContext.makerToken,\n                        sellTokenAddress: quoteContext.takerToken,\n                        integratorId: quoteContext.integrator.integratorId,\n                        quotes,\n                        fee: storedFee,\n                    },\n                    this._kafkaProducer,\n                    this._feeEventTopic,\n                );\n            } catch (e) {\n                logger.error(\n                    {\n                        chainId: this._chainId,\n                        requestedBuyAmount: quoteContext.makerAmount,\n                        requestedSellAmount: quoteContext.takerAmount,\n                        requestedTakerAddress: quoteContext.takerAddress,\n                        buyTokenAddress: quoteContext.makerToken,\n                        sellTokenAddress: quoteContext.takerToken,\n                        integratorId: quoteContext.integrator.integratorId,\n                        errorMessage: e.message,\n                    },\n                    'Failed to publish RFQt quote to Fee Event Report',\n                );\n            }\n        }\n\n        return quotes;\n    }\n\n    public get feeModelVersion(): FeeModelVersion {\n        return this._feeModelVersion;\n    }\n\n    /**\n     * Passthrough to TokenMetadataManager's `getTokenDecimalsAsync` method\n     */\n    public async getTokenDecimalsAsync(tokenAddress: string): Promise<number> {\n        return this._tokenMetadataManager.getTokenDecimalsAsync(tokenAddress);\n    }\n\n    /**\n     * Get prices from MMs for given quote context and fee.\n     */\n    public async _getV2PricesInternalAsync(\n        quoteContext: QuoteContext,\n        fee: Fee,\n        now: Date = new Date(),\n    ): Promise<RfqtV2Price[]> {\n        const { integrator, makerToken, takerToken } = quoteContext;\n        // Fetch the makers active on this pair\n        const makers = this._rfqMakerManager.getRfqtV2MakersForPair(makerToken, takerToken).filter((m) => {\n            if (m.rfqtUri === null) {\n                return false;\n            }\n            if (integrator.whitelistMakerIds && !integrator.whitelistMakerIds.includes(m.makerId)) {\n                return false;\n            }\n            return true;\n        });\n\n        // Short circuit if no makers are active\n        if (!makers.length) {\n            return [];\n        }\n\n        // TODO (haozhuo): check to see if MM passes circuit breaker\n\n        const prices = (\n            await this._quoteServerClient.batchGetPriceV2Async(\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                makers.map((m) => /* won't be null because of previous `filter` operation */ m.rfqtUri!),\n                integrator,\n                transformRfqtV2PricesParameters(quoteContext, fee, this._chainId),\n                (url) => `${url}/rfqt/v2/price`,\n            )\n        ).map((price) => {\n            const maker = makers.find((m) => m.rfqtUri === price.makerUri);\n            if (!maker) {\n                throw new Error(`Could not find maker with URI ${price.makerUri}`);\n            }\n            return {\n                expiry: price.expiry,\n                makerAddress: price.maker,\n                makerAmount: price.makerAmount,\n                makerId: maker.makerId,\n                makerToken: price.makerToken,\n                makerUri: price.makerUri,\n                takerAmount: price.takerAmount,\n                takerToken: price.takerToken,\n            };\n        });\n\n        // Filter out invalid prices\n        const validatedPrices = validateV2Prices(prices, quoteContext, this._minExpiryDurationMs, now);\n\n        return validatedPrices;\n    }\n\n    /**\n     * Converts a price returned from the market maker's `price` endpoint\n     * into an v2 order\n     */\n    private _v2priceToOrder(price: RfqtV2Price, txOrigin: string, nonce: BigNumber, nonceBucket: BigNumber): OtcOrder {\n        return new OtcOrder({\n            chainId: this._chainId,\n            expiryAndNonce: OtcOrder.encodeExpiryAndNonce(price.expiry, nonceBucket, nonce),\n            maker: price.makerAddress,\n            makerAmount: price.makerAmount,\n            makerToken: price.makerToken,\n            taker: NULL_ADDRESS,\n            takerAmount: price.takerAmount,\n            takerToken: price.takerToken,\n            txOrigin,\n            verifyingContract: this._contractAddresses.exchangeProxy,\n        });\n    }\n}\n"],"version":3}