{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfq_blocked_address_utils.ts","mappings":";;;AAAA,6CAAoC;AAGpC,2EAAwE;AACxE,sCAAmC;AAEnC,MAAM,YAAY,GAAG,IAAI,CAAC;AAE1B,MAAM,4BAA4B,GAAG,IAAI,mBAAK,CAAC;IAC3C,IAAI,EAAE,8BAA8B;IACpC,IAAI,EAAE,iCAAiC;CAC1C,CAAC,CAAC;AAEH;;GAEG;AACH,MAAa,sBAAsB;IAO/B,YAA6B,WAAuB,EAAE,iBAA8B,EAAE,KAAa;QAAtE,gBAAW,GAAX,WAAW,CAAY;QAChD,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAC;QAClC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,4BAA4B;IACxE,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,OAAe;QAC5B,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YAC3D,uCAAuC;YACvC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;SACvD;QAED,qCAAqC;QACrC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;IACpD,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,mBAAmB;QAC5B,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,OAAO,IAAI,CAAC,cAAc,CAAC;SAC9B;IACL,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,sBAAsB;QAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,WAAW;aAC1C,aAAa,CAAC,2CAAoB,CAAC;aACnC,IAAI,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;QAElC,4BAA4B,CAAC,GAAG,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAC1D,IAAI,gBAAgB,CAAC,MAAM,IAAI,YAAY,EAAE;YACzC,eAAM,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;SACtE;QACD,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QACxF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;QACrD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IAC3B,CAAC;CACJ;AAtDD,wDAsDC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfq_blocked_address_utils.ts"],"sourcesContent":["import { Gauge } from 'prom-client';\nimport { Connection } from 'typeorm/connection/Connection';\n\nimport { BlockedAddressEntity } from '../entities/BlockedAddressEntity';\nimport { logger } from '../logger';\n\nconst MAX_SET_SIZE = 5000;\n\nconst RFQ_BLOCKED_ADDRESS_SET_SIZE = new Gauge({\n    name: 'rfq_blocked_address_set_size',\n    help: 'The number of blocked addresses',\n});\n\n/**\n * RfqBlockedAddressUtils helps manage the RFQ blocked addresses\n */\nexport class RfqBlockedAddressUtils {\n    public _blocked: Set<string>;\n    private _expiresAt: number;\n    private _updatePromise: Promise<void> | undefined;\n    private _updating: boolean;\n    private readonly _ttlMs: number;\n\n    constructor(private readonly _connection: Connection, initialBlockedSet: Set<string>, ttlMs: number) {\n        this._blocked = initialBlockedSet;\n        this._ttlMs = ttlMs;\n        this._updating = false;\n        this._expiresAt = Date.now().valueOf(); // cache expires immediately\n    }\n\n    /**\n     * isBlocked returns whether an address is blocked from the cache\n     * NOTE: In the background, it also updates the blocked set if the cache is expired\n     */\n    public isBlocked(address: string): boolean {\n        if (Date.now().valueOf() > this._expiresAt && !this._updating) {\n            // If expired, update in the background\n            this._updatePromise = this._updateBlockedSetAsync();\n        }\n\n        // Return cached value, even if stale\n        return this._blocked.has(address.toLowerCase());\n    }\n\n    /**\n     * completeUpdateAsync returns a Promise that resolves when the blocked address cache is updated\n     */\n    public async completeUpdateAsync(): Promise<void> {\n        if (this._updatePromise) {\n            return this._updatePromise;\n        }\n    }\n\n    /**\n     * Updates the blocked set of addresses\n     */\n    private async _updateBlockedSetAsync(): Promise<void> {\n        this._updating = true;\n        const blockedAddresses = await this._connection\n            .getRepository(BlockedAddressEntity)\n            .find({ take: MAX_SET_SIZE });\n\n        RFQ_BLOCKED_ADDRESS_SET_SIZE.set(blockedAddresses.length);\n        if (blockedAddresses.length >= MAX_SET_SIZE) {\n            logger.warn('Blocked address table has hit or exceeded the limit');\n        }\n        this._blocked = new Set(blockedAddresses.map((entity) => entity.address.toLowerCase()));\n        this._expiresAt = Date.now().valueOf() + this._ttlMs;\n        this._updating = false;\n    }\n}\n"],"version":3}