99c627e1171f2ec846d1f43a82b9ae89
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startMetricsServer = exports.closeWorkersAsync = exports.closeRedisConnectionsAsync = void 0;
const api_utils_1 = require("@0x/api-utils");
const express = require("express");
const config_1 = require("../config");
const constants_1 = require("../core/constants");
const logger_1 = require("../logger");
/**
 * Close redis connections.
 *
 * @param redisConnections Redis connections to close.
 */
async function closeRedisConnectionsAsync(redisConnections) {
    const results = [];
    for (const connection of redisConnections) {
        try {
            const result = await connection.quit();
            results.push(result);
        }
        catch (error) {
            logger_1.logger.error({ errorMessage: error.message, stack: error.stack }, 'Faied to shutdown redis connection');
        }
    }
    return results;
}
exports.closeRedisConnectionsAsync = closeRedisConnectionsAsync;
/**
 * Close bullmq workers.
 *
 * @param workers Bullmq workers to close.
 */
async function closeWorkersAsync(workers) {
    for (const worker of workers) {
        try {
            await worker.close();
        }
        catch (error) {
            logger_1.logger.error({ errorMessage: error.message, stack: error.stack }, `Failed to shutdown worker ${worker.name}`);
        }
    }
}
exports.closeWorkersAsync = closeWorkersAsync;
/**
 * Start the metrics server.
 */
function startMetricsServer() {
    if (config_1.ENABLE_PROMETHEUS_METRICS) {
        const metricsService = new api_utils_1.MetricsService();
        const metricsRouter = (0, api_utils_1.createMetricsRouter)(metricsService);
        const metricsApp = express();
        metricsApp.use(constants_1.METRICS_PATH, metricsRouter);
        const metricsServer = metricsApp.listen(config_1.PROMETHEUS_PORT, () => {
            logger_1.logger.info(`Metrics (HTTP) listening on port ${config_1.PROMETHEUS_PORT}`);
        });
        metricsServer.on('error', (error) => {
            logger_1.logger.error({ errorMessage: error, stack: error.stack }, 'Error in metrics server');
        });
    }
}
exports.startMetricsServer = startMetricsServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9ydW5uZXJfdXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQW9FO0FBRXBFLG1DQUFtQztBQUVuQyxzQ0FBdUU7QUFDdkUsaURBQWlEO0FBQ2pELHNDQUFtQztBQUVuQzs7OztHQUlHO0FBQ0ksS0FBSyxVQUFVLDBCQUEwQixDQUFJLGdCQUE4QztJQUM5RixNQUFNLE9BQU8sR0FBUSxFQUFFLENBQUM7SUFDeEIsS0FBSyxNQUFNLFVBQVUsSUFBSSxnQkFBZ0IsRUFBRTtRQUN2QyxJQUFJO1lBQ0EsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDdkMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN4QjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ1osZUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsb0NBQW9DLENBQUMsQ0FBQztTQUMzRztLQUNKO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQVhELGdFQVdDO0FBRUQ7Ozs7R0FJRztBQUNJLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxPQUFpQjtJQUNyRCxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUMxQixJQUFJO1lBQ0EsTUFBTSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDeEI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNaLGVBQU0sQ0FBQyxLQUFLLENBQ1IsRUFBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUNuRCw2QkFBNkIsTUFBTSxDQUFDLElBQUksRUFBRSxDQUM3QyxDQUFDO1NBQ0w7S0FDSjtBQUNMLENBQUM7QUFYRCw4Q0FXQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0Isa0JBQWtCO0lBQzlCLElBQUksa0NBQXlCLEVBQUU7UUFDM0IsTUFBTSxjQUFjLEdBQUcsSUFBSSwwQkFBYyxFQUFFLENBQUM7UUFDNUMsTUFBTSxhQUFhLEdBQUcsSUFBQSwrQkFBbUIsRUFBQyxjQUFjLENBQUMsQ0FBQztRQUMxRCxNQUFNLFVBQVUsR0FBRyxPQUFPLEVBQUUsQ0FBQztRQUU3QixVQUFVLENBQUMsR0FBRyxDQUFDLHdCQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDNUMsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyx3QkFBZSxFQUFFLEdBQUcsRUFBRTtZQUMxRCxlQUFNLENBQUMsSUFBSSxDQUFDLG9DQUFvQyx3QkFBZSxFQUFFLENBQUMsQ0FBQztRQUN2RSxDQUFDLENBQUMsQ0FBQztRQUVILGFBQWEsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDaEMsZUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3pGLENBQUMsQ0FBQyxDQUFDO0tBQ047QUFDTCxDQUFDO0FBZkQsZ0RBZUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9ydW5uZXJfdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTWV0cmljc1JvdXRlciwgTWV0cmljc1NlcnZpY2UgfSBmcm9tICdAMHgvYXBpLXV0aWxzJztcbmltcG9ydCB7IFdvcmtlciB9IGZyb20gJ2J1bGxtcSc7XG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuXG5pbXBvcnQgeyBFTkFCTEVfUFJPTUVUSEVVU19NRVRSSUNTLCBQUk9NRVRIRVVTX1BPUlQgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgTUVUUklDU19QQVRIIH0gZnJvbSAnLi4vY29yZS9jb25zdGFudHMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyJztcblxuLyoqXG4gKiBDbG9zZSByZWRpcyBjb25uZWN0aW9ucy5cbiAqXG4gKiBAcGFyYW0gcmVkaXNDb25uZWN0aW9ucyBSZWRpcyBjb25uZWN0aW9ucyB0byBjbG9zZS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsb3NlUmVkaXNDb25uZWN0aW9uc0FzeW5jPFQ+KHJlZGlzQ29ubmVjdGlvbnM6IHsgcXVpdDogKCkgPT4gUHJvbWlzZTxUPiB9W10pOiBQcm9taXNlPFRbXT4ge1xuICAgIGNvbnN0IHJlc3VsdHM6IFRbXSA9IFtdO1xuICAgIGZvciAoY29uc3QgY29ubmVjdGlvbiBvZiByZWRpc0Nvbm5lY3Rpb25zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb25uZWN0aW9uLnF1aXQoKTtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKHsgZXJyb3JNZXNzYWdlOiBlcnJvci5tZXNzYWdlLCBzdGFjazogZXJyb3Iuc3RhY2sgfSwgJ0ZhaWVkIHRvIHNodXRkb3duIHJlZGlzIGNvbm5lY3Rpb24nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbn1cblxuLyoqXG4gKiBDbG9zZSBidWxsbXEgd29ya2Vycy5cbiAqXG4gKiBAcGFyYW0gd29ya2VycyBCdWxsbXEgd29ya2VycyB0byBjbG9zZS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsb3NlV29ya2Vyc0FzeW5jKHdvcmtlcnM6IFdvcmtlcltdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgZm9yIChjb25zdCB3b3JrZXIgb2Ygd29ya2Vycykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgd29ya2VyLmNsb3NlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgICAgeyBlcnJvck1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsIHN0YWNrOiBlcnJvci5zdGFjayB9LFxuICAgICAgICAgICAgICAgIGBGYWlsZWQgdG8gc2h1dGRvd24gd29ya2VyICR7d29ya2VyLm5hbWV9YCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogU3RhcnQgdGhlIG1ldHJpY3Mgc2VydmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRNZXRyaWNzU2VydmVyKCk6IHZvaWQge1xuICAgIGlmIChFTkFCTEVfUFJPTUVUSEVVU19NRVRSSUNTKSB7XG4gICAgICAgIGNvbnN0IG1ldHJpY3NTZXJ2aWNlID0gbmV3IE1ldHJpY3NTZXJ2aWNlKCk7XG4gICAgICAgIGNvbnN0IG1ldHJpY3NSb3V0ZXIgPSBjcmVhdGVNZXRyaWNzUm91dGVyKG1ldHJpY3NTZXJ2aWNlKTtcbiAgICAgICAgY29uc3QgbWV0cmljc0FwcCA9IGV4cHJlc3MoKTtcblxuICAgICAgICBtZXRyaWNzQXBwLnVzZShNRVRSSUNTX1BBVEgsIG1ldHJpY3NSb3V0ZXIpO1xuICAgICAgICBjb25zdCBtZXRyaWNzU2VydmVyID0gbWV0cmljc0FwcC5saXN0ZW4oUFJPTUVUSEVVU19QT1JULCAoKSA9PiB7XG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhgTWV0cmljcyAoSFRUUCkgbGlzdGVuaW5nIG9uIHBvcnQgJHtQUk9NRVRIRVVTX1BPUlR9YCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1ldHJpY3NTZXJ2ZXIub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoeyBlcnJvck1lc3NhZ2U6IGVycm9yLCBzdGFjazogZXJyb3Iuc3RhY2sgfSwgJ0Vycm9yIGluIG1ldHJpY3Mgc2VydmVyJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==