{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/runner_utils.ts","mappings":";;;AAAA,6CAAoE;AAEpE,mCAAmC;AAEnC,sCAAuE;AACvE,iDAAiD;AACjD,sCAAmC;AAEnC;;;;GAIG;AACI,KAAK,UAAU,0BAA0B,CAAI,gBAA8C;IAC9F,MAAM,OAAO,GAAQ,EAAE,CAAC;IACxB,KAAK,MAAM,UAAU,IAAI,gBAAgB,EAAE;QACvC,IAAI;YACA,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YACvC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACxB;QAAC,OAAO,KAAK,EAAE;YACZ,eAAM,CAAC,KAAK,CAAC,EAAE,YAAY,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,oCAAoC,CAAC,CAAC;SAC3G;KACJ;IACD,OAAO,OAAO,CAAC;AACnB,CAAC;AAXD,gEAWC;AAED;;;;GAIG;AACI,KAAK,UAAU,iBAAiB,CAAC,OAAiB;IACrD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;QAC1B,IAAI;YACA,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;SACxB;QAAC,OAAO,KAAK,EAAE;YACZ,eAAM,CAAC,KAAK,CACR,EAAE,YAAY,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,EACnD,6BAA6B,MAAM,CAAC,IAAI,EAAE,CAC7C,CAAC;SACL;KACJ;AACL,CAAC;AAXD,8CAWC;AAED;;GAEG;AACH,SAAgB,kBAAkB;IAC9B,IAAI,kCAAyB,EAAE;QAC3B,MAAM,cAAc,GAAG,IAAI,0BAAc,EAAE,CAAC;QAC5C,MAAM,aAAa,GAAG,IAAA,+BAAmB,EAAC,cAAc,CAAC,CAAC;QAC1D,MAAM,UAAU,GAAG,OAAO,EAAE,CAAC;QAE7B,UAAU,CAAC,GAAG,CAAC,wBAAY,EAAE,aAAa,CAAC,CAAC;QAC5C,MAAM,aAAa,GAAG,UAAU,CAAC,MAAM,CAAC,wBAAe,EAAE,GAAG,EAAE;YAC1D,eAAM,CAAC,IAAI,CAAC,oCAAoC,wBAAe,EAAE,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,aAAa,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;YAChC,eAAM,CAAC,KAAK,CAAC,EAAE,YAAY,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,yBAAyB,CAAC,CAAC;QACzF,CAAC,CAAC,CAAC;KACN;AACL,CAAC;AAfD,gDAeC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/runner_utils.ts"],"sourcesContent":["import { createMetricsRouter, MetricsService } from '@0x/api-utils';\nimport { Worker } from 'bullmq';\nimport * as express from 'express';\n\nimport { ENABLE_PROMETHEUS_METRICS, PROMETHEUS_PORT } from '../config';\nimport { METRICS_PATH } from '../core/constants';\nimport { logger } from '../logger';\n\n/**\n * Close redis connections.\n *\n * @param redisConnections Redis connections to close.\n */\nexport async function closeRedisConnectionsAsync<T>(redisConnections: { quit: () => Promise<T> }[]): Promise<T[]> {\n    const results: T[] = [];\n    for (const connection of redisConnections) {\n        try {\n            const result = await connection.quit();\n            results.push(result);\n        } catch (error) {\n            logger.error({ errorMessage: error.message, stack: error.stack }, 'Faied to shutdown redis connection');\n        }\n    }\n    return results;\n}\n\n/**\n * Close bullmq workers.\n *\n * @param workers Bullmq workers to close.\n */\nexport async function closeWorkersAsync(workers: Worker[]): Promise<void> {\n    for (const worker of workers) {\n        try {\n            await worker.close();\n        } catch (error) {\n            logger.error(\n                { errorMessage: error.message, stack: error.stack },\n                `Failed to shutdown worker ${worker.name}`,\n            );\n        }\n    }\n}\n\n/**\n * Start the metrics server.\n */\nexport function startMetricsServer(): void {\n    if (ENABLE_PROMETHEUS_METRICS) {\n        const metricsService = new MetricsService();\n        const metricsRouter = createMetricsRouter(metricsService);\n        const metricsApp = express();\n\n        metricsApp.use(METRICS_PATH, metricsRouter);\n        const metricsServer = metricsApp.listen(PROMETHEUS_PORT, () => {\n            logger.info(`Metrics (HTTP) listening on port ${PROMETHEUS_PORT}`);\n        });\n\n        metricsServer.on('error', (error) => {\n            logger.error({ errorMessage: error, stack: error.stack }, 'Error in metrics server');\n        });\n    }\n}\n"],"version":3}