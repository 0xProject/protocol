a1f628265847151a557396a24ba7f508
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const web3_wrapper_1 = require("@0x/web3-wrapper");
const axios_1 = require("axios");
const axios_mock_adapter_1 = require("axios-mock-adapter");
const chai_1 = require("chai");
const ethers_1 = require("ethers");
const HttpStatus = require("http-status-codes");
const ioredis_1 = require("ioredis");
const sqs_producer_1 = require("sqs-producer");
const request = require("supertest");
const ts_mockito_1 = require("ts-mockito");
const config = require("../src/config");
const constants_1 = require("../src/core/constants");
const entities_1 = require("../src/entities");
const types_1 = require("../src/entities/types");
const http_rfqm_service_runner_1 = require("../src/runners/http_rfqm_service_runner");
const fee_service_1 = require("../src/services/fee_service");
const rfqm_service_1 = require("../src/services/rfqm_service");
const rfq_maker_balance_cache_service_1 = require("../src/services/rfq_maker_balance_cache_service");
const types_2 = require("../src/core/types");
const cache_client_1 = require("../src/utils/cache_client");
const config_manager_1 = require("../src/utils/config_manager");
const quote_server_client_1 = require("../src/utils/quote_server_client");
const rfqm_db_utils_1 = require("../src/utils/rfqm_db_utils");
const rfq_blockchain_utils_1 = require("../src/utils/rfq_blockchain_utils");
const rfq_maker_db_utils_1 = require("../src/utils/rfq_maker_db_utils");
const rfq_maker_manager_1 = require("../src/utils/rfq_maker_manager");
const SubmissionContext_1 = require("../src/utils/SubmissionContext");
const TokenMetadataManager_1 = require("../src/utils/TokenMetadataManager");
const constants_2 = require("./constants");
const deployment_1 = require("./test_utils/deployment");
const initDbDataSourceAsync_1 = require("./test_utils/initDbDataSourceAsync");
const MOCK_WORKER_REGISTRY_ADDRESS = '0x1023331a469c6391730ff1E2749422CE8873EC38';
const API_KEY = 'koolApiKey';
const ADMIN_API_KEY = 'adminApiKey';
const INTEGRATOR_ID = 'koolIntegratorId';
const contractAddresses = constants_2.CONTRACT_ADDRESSES;
const WORKER_FULL_BALANCE_WEI = new utils_1.BigNumber(1).shiftedBy(constants_1.ETH_DECIMALS);
// RFQM Market Maker request specific constants
const MARKET_MAKER_1 = 'https://mock-rfqt1.club';
const MARKET_MAKER_2 = 'https://mock-rfqt2.club';
const MARKET_MAKER_3 = 'https://mock-rfqt3.club';
const MARKET_MAKER_2_ADDR = '0xbEA29fE10caed0E1a65A7AdBddd254dD372e83Ff';
const MARKET_MAKER_3_ADDR = '0xA84f003D3a6F62c5dF218c7fb7b0EFB766b5AC07';
const GAS_PRICE = new utils_1.BigNumber(100);
const MOCK_META_TX_CALL_DATA = '0x123';
const RANDOM_VALID_SIGNATURE = {
    r: '0x72ba2125d4efe1f9cc77882138ed94cbd485f8897fe6d9fe34854906634fc59d',
    s: '0x1e19d3d29ab2855debc62a1df98a727673b8bf31c4da3a391a6eaea465920ff2',
    v: 27,
    signatureType: protocol_utils_1.SignatureType.EthSign,
};
const SAFE_EXPIRY = '1903620548';
const GAS_ESTIMATE = 165000;
const WORKER_ADDRESS = '0xaWorkerAddress';
const FIRST_TRANSACTION_HASH = '0xfirstTxHash';
const FIRST_SIGNED_TRANSACTION = '0xfirstSignedTransaction';
const TX_STATUS = 1;
// it's over 9K
const MINED_BLOCK = 9001;
// the tx should be finalized
const CURRENT_BLOCK = MINED_BLOCK + SubmissionContext_1.BLOCK_FINALITY_THRESHOLD;
const MOCK_EXCHANGE_PROXY = '0xtheExchangeProxy';
const SUCCESSFUL_TRANSACTION_RECEIPT = {
    blockHash: '0xaBlockHash',
    blockNumber: MINED_BLOCK,
    byzantium: true,
    confirmations: 2,
    contractAddress: '',
    cumulativeGasUsed: ethers_1.BigNumber.from(150000),
    effectiveGasPrice: ethers_1.BigNumber.from(1000),
    from: WORKER_ADDRESS,
    gasUsed: ethers_1.BigNumber.from(GAS_ESTIMATE),
    logs: [constants_2.TEST_RFQ_ORDER_FILLED_EVENT_LOG],
    logsBloom: '',
    status: TX_STATUS,
    to: MOCK_EXCHANGE_PROXY,
    transactionHash: FIRST_TRANSACTION_HASH,
    transactionIndex: 5,
    type: 2,
};
const MOCK_RFQM_JOB = new entities_1.RfqmV2JobEntity({
    chainId: 1337,
    createdAt: new Date(),
    expiry: new utils_1.BigNumber(Date.now()),
    fee: {
        amount: '1000',
        token: '0x123',
        type: 'fixed',
    },
    integratorId: null,
    makerUri: MARKET_MAKER_1,
    order: {
        order: {
            chainId: '1337',
            expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(SAFE_EXPIRY), constants_1.ZERO, new utils_1.BigNumber(SAFE_EXPIRY)).toString(),
            maker: '0x123',
            makerAmount: '1',
            makerToken: '0x123',
            taker: '0x123',
            takerAmount: '1',
            takerToken: '0x123',
            txOrigin: '0x123',
            verifyingContract: '0x123',
        },
        type: types_1.RfqmOrderTypes.Otc,
    },
    orderHash: '0x288d4d771179738ee9ca60f14df74612fb1ca43dfbc3bbb49dd9226a19747c11',
    status: types_1.RfqmJobStatus.PendingSubmitted,
    updatedAt: new Date(),
    workerAddress: null,
    lastLookResult: null,
    affiliateAddress: constants_2.MATCHA_AFFILIATE_ADDRESS,
    takerSpecifiedSide: 'makerToken',
});
jest.setTimeout(constants_1.ONE_MINUTE_MS * 2);
let teardownDependencies;
describe('RFQM Integration', () => {
    let app;
    let axiosClient;
    let cacheClient;
    let dataSource;
    let dbUtils;
    let mockAxios;
    let rfqBlockchainUtilsMock;
    let rfqmServiceChainId1337;
    let rfqmServiceChainId3;
    let server;
    let takerAddress;
    beforeAll(async () => {
        teardownDependencies = await (0, deployment_1.setupDependenciesAsync)(['postgres', 'ganache', 'redis']);
        // Create a Provider
        const provider = (0, constants_2.getProvider)();
        const web3Wrapper = new web3_wrapper_1.Web3Wrapper(provider);
        [takerAddress] = await web3Wrapper.getAvailableAddressesAsync();
        // Build dependencies
        // Create the mock FeeService
        const feeServiceMock = (0, ts_mockito_1.mock)(fee_service_1.FeeService);
        (0, ts_mockito_1.when)(feeServiceMock.getGasPriceEstimationAsync()).thenResolve(GAS_PRICE);
        (0, ts_mockito_1.when)(feeServiceMock.calculateFeeAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve({
            feeWithDetails: {
                token: '0xToken',
                amount: new utils_1.BigNumber(300),
                type: 'fixed',
                details: {
                    feeModelVersion: 1,
                    kind: 'default',
                    gasFeeAmount: new utils_1.BigNumber(100),
                    gasPrice: GAS_PRICE,
                    zeroExFeeAmount: new utils_1.BigNumber(200),
                    tradeSizeBps: 4,
                    feeTokenBaseUnitPriceUsd: new utils_1.BigNumber(30),
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: new utils_1.BigNumber(20),
                },
                breakdown: {
                    gas: {
                        amount: new utils_1.BigNumber(100),
                        details: {
                            gasPrice: GAS_PRICE,
                            estimatedGas: new utils_1.BigNumber(1),
                        },
                    },
                    zeroEx: {
                        amount: new utils_1.BigNumber(200),
                        details: {
                            kind: 'volume',
                            tradeSizeBps: 4,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: new utils_1.BigNumber(30),
                    feeTokenBaseUnitPriceUsd: new utils_1.BigNumber(30),
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: new utils_1.BigNumber(20),
                },
            },
        });
        const feeServiceInstance = (0, ts_mockito_1.instance)(feeServiceMock);
        // Create the mock ConfigManager
        const configManagerMock = (0, ts_mockito_1.mock)(config_manager_1.ConfigManager);
        (0, ts_mockito_1.when)(configManagerMock.getAdminApiKey()).thenReturn(ADMIN_API_KEY);
        (0, ts_mockito_1.when)(configManagerMock.getRfqmApiKeyWhitelist()).thenReturn(new Set([API_KEY]));
        (0, ts_mockito_1.when)(configManagerMock.getIntegratorIdForApiKey(API_KEY)).thenReturn(INTEGRATOR_ID);
        (0, ts_mockito_1.when)(configManagerMock.getIntegratorByIdOrThrow(INTEGRATOR_ID)).thenReturn({
            integratorId: INTEGRATOR_ID,
            apiKeys: [API_KEY],
            allowedChainIds: [1337],
            label: 'Test',
            rfqm: true,
            plp: false,
            rfqt: false,
        });
        const configManager = (0, ts_mockito_1.instance)(configManagerMock);
        // Create Axios client and mock
        axiosClient = axios_1.default.create();
        mockAxios = new axios_mock_adapter_1.default(axiosClient);
        // Create the mock rfqBlockchainUtils
        const validationResponse = [new utils_1.BigNumber(1), new utils_1.BigNumber(1)];
        rfqBlockchainUtilsMock = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.generateMetaTransaction((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenCall((_rfqOrder, _signature, _taker, _takerAmount, chainId) => new protocol_utils_1.MetaTransaction({ chainId }));
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.generateMetaTransactionCallData((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn(MOCK_META_TX_CALL_DATA);
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.validateMetaTransactionOrThrowAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(validationResponse);
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.getTokenBalancesAsync((0, ts_mockito_1.anything)())).thenResolve([new utils_1.BigNumber(1)]);
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([new utils_1.BigNumber(1)]);
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.getNonceAsync((0, ts_mockito_1.anything)())).thenResolve(1);
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(GAS_ESTIMATE);
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.signTransactionAsync((0, ts_mockito_1.anything)())).thenResolve({
            signedTransaction: FIRST_SIGNED_TRANSACTION,
            transactionHash: FIRST_TRANSACTION_HASH,
        });
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.submitSignedTransactionAsync(FIRST_SIGNED_TRANSACTION)).thenResolve(FIRST_TRANSACTION_HASH);
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.getReceiptsAsync((0, ts_mockito_1.deepEqual)([FIRST_TRANSACTION_HASH]))).thenResolve([
            SUCCESSFUL_TRANSACTION_RECEIPT,
        ]);
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.getCurrentBlockAsync()).thenResolve(CURRENT_BLOCK);
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.getExchangeProxyAddress()).thenReturn(MOCK_EXCHANGE_PROXY);
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.decodeMetaTransactionCallDataAndValidateAsync((0, ts_mockito_1.anyString)(), (0, ts_mockito_1.anyString)(), (0, ts_mockito_1.anything)())).thenResolve(validationResponse);
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.getDecodedRfqOrderFillEventLogFromLogs((0, ts_mockito_1.anything)())).thenReturn(constants_2.TEST_DECODED_RFQ_ORDER_FILLED_EVENT_LOG);
        (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.getAccountBalanceAsync(MOCK_WORKER_REGISTRY_ADDRESS)).thenResolve(WORKER_FULL_BALANCE_WEI);
        const rfqBlockchainUtils = (0, ts_mockito_1.instance)(rfqBlockchainUtilsMock);
        const tokenMetadataManagerMock = (0, ts_mockito_1.mock)(TokenMetadataManager_1.TokenMetadataManager);
        (0, ts_mockito_1.when)(tokenMetadataManagerMock.getTokenDecimalsAsync((0, ts_mockito_1.anything)())).thenResolve(18);
        const tokenMetadataManager = (0, ts_mockito_1.instance)(tokenMetadataManagerMock);
        const sqsResponse = [
            {
                Id: 'id',
                MD5OfMessageBody: 'MD5OfMessageBody',
                MessageId: 'MessageId',
            },
        ];
        // Create the dbUtils
        dataSource = await (0, initDbDataSourceAsync_1.initDbDataSourceAsync)();
        dbUtils = new rfqm_db_utils_1.RfqmDbUtils(dataSource);
        // Create the mock sqsProducer
        const sqsProducerMock = (0, ts_mockito_1.mock)(sqs_producer_1.Producer);
        (0, ts_mockito_1.when)(sqsProducerMock.send((0, ts_mockito_1.anything)())).thenResolve(sqsResponse);
        (0, ts_mockito_1.when)(sqsProducerMock.queueSize()).thenResolve(0);
        const sqsProducer = (0, ts_mockito_1.instance)(sqsProducerMock);
        // Create the quote server client
        const quoteServerClient = new quote_server_client_1.QuoteServerClient(axiosClient);
        // Create the CacheClient
        const redis = new ioredis_1.default();
        cacheClient = new cache_client_1.CacheClient(redis);
        // Create the maker balance cache service
        const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
        (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([new utils_1.BigNumber(200000000000000000)], [new utils_1.BigNumber(200000000000000000), new utils_1.BigNumber(200000000000000000)]);
        const rfqMakerBalanceCacheService = (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock);
        // Create the mock RfqMakerManager
        const rfqMakerManagerMock = (0, ts_mockito_1.mock)(rfq_maker_manager_1.RfqMakerManager);
        (0, ts_mockito_1.when)(rfqMakerManagerMock.getRfqmV2MakerUrisForPair((0, ts_mockito_1.anyString)(), (0, ts_mockito_1.anyString)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn([MARKET_MAKER_2, MARKET_MAKER_3]);
        (0, ts_mockito_1.when)(rfqMakerManagerMock.getRfqmV2MakerOfferings()).thenReturn({
            'https://mock-rfqm1.club': [
                ['0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c', '0x0b1ba0af832d7c05fd64161e0db78e85978e8082'],
            ],
        });
        const rfqMakerManager = (0, ts_mockito_1.instance)(rfqMakerManagerMock);
        rfqmServiceChainId1337 = new rfqm_service_1.RfqmService(1337, feeServiceInstance, 
        /* feeModelVersion */ 0, contractAddresses, MOCK_WORKER_REGISTRY_ADDRESS, rfqBlockchainUtils, dbUtils, sqsProducer, quoteServerClient, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, cacheClient, rfqMakerBalanceCacheService, rfqMakerManager, tokenMetadataManager);
        // Create another RFQM Service for chain ID 3 that returns 0 offering
        const rfqMakerManagerChain3Mock = (0, ts_mockito_1.mock)(rfq_maker_manager_1.RfqMakerManager);
        (0, ts_mockito_1.when)(rfqMakerManagerChain3Mock.getRfqmV2MakerOfferings()).thenReturn({
            'https://mock-rfqm1.club': [],
        });
        const rfqMakerManagerChainId3 = (0, ts_mockito_1.instance)(rfqMakerManagerChain3Mock);
        rfqmServiceChainId3 = new rfqm_service_1.RfqmService(3, feeServiceInstance, 
        /* feeModelVersion */ 0, contractAddresses, MOCK_WORKER_REGISTRY_ADDRESS, rfqBlockchainUtils, dbUtils, sqsProducer, quoteServerClient, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, cacheClient, rfqMakerBalanceCacheService, rfqMakerManagerChainId3, tokenMetadataManager);
        const rfqAdminService = (0, http_rfqm_service_runner_1.buildRfqAdminService)(dbUtils);
        const rfqMakerService = (0, http_rfqm_service_runner_1.buildRfqMakerService)(new rfq_maker_db_utils_1.RfqMakerDbUtils(dataSource), configManager);
        // Start the server
        const res = await (0, http_rfqm_service_runner_1.runHttpRfqmServiceAsync)(new Map([
            [1337, rfqmServiceChainId1337],
            [3, rfqmServiceChainId3],
        ]), new Map(), rfqAdminService, rfqMakerService, configManager, config.defaultHttpServiceConfig, dataSource, false);
        app = res.app;
        server = res.server;
    });
    afterEach(async () => {
        await dataSource.query('TRUNCATE TABLE rfqm_quotes CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_jobs CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_transaction_submissions CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_v2_quotes CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_v2_jobs CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_v2_transaction_submissions CASCADE;');
    });
    afterAll(async () => {
        await new Promise((resolve, reject) => {
            server.close((err) => {
                if (err) {
                    reject(err);
                }
                resolve();
            });
        });
        await cacheClient.closeAsync();
        if (!teardownDependencies()) {
            throw new Error('Failed to tear down dependencies');
        }
    });
    describe('rfqm/v1/healthz', () => {
        it('should return a 200 OK with active pairs', async () => {
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/healthz`)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.pairs[0][0]).to.equal('0x0b1ba0af832d7c05fd64161e0db78e85978e8082');
            (0, chai_1.expect)(appResponse.body.pairs[0][1]).to.equal('0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c');
        });
        // This test is to cover this issue: https://github.com/0xProject/0x-rfq-api/pull/200
        it('should return correct values for different chains', async () => {
            const chainId3HealthzResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/healthz`)
                .set('0x-chain-id', '3')
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            // tslint:disable-next-line: no-unused-expression
            (0, chai_1.expect)(chainId3HealthzResponse.body.pairs).to.be.an('array').that.is.empty;
            const chainId1337HealthzResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/healthz`)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(chainId1337HealthzResponse.body.pairs[0][0]).to.equal('0x0b1ba0af832d7c05fd64161e0db78e85978e8082');
            (0, chai_1.expect)(chainId1337HealthzResponse.body.pairs[0][1]).to.equal('0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c');
        });
    });
    describe('rfqm/v1/price', () => {
        it('should return a 200 OK with an indicative quote for buys', async () => {
            const buyAmount = 200000000000000000;
            const winningQuote = 100000000000000000;
            const losingQuote = 150000000000000000;
            const zeroExApiParams = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'WETH',
                buyAmount: buyAmount.toString(),
                takerAddress,
                intentOnFilling: 'false',
                skipValidation: 'true',
            });
            const baseResponse = {
                makerAmount: buyAmount.toString(),
                makerToken: contractAddresses.zrxToken,
                takerToken: contractAddresses.etherToken,
                expiry: '1903620548', // in the year 2030
            };
            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {
                ...baseResponse,
                takerAmount: winningQuote.toString(),
                maker: MARKET_MAKER_2_ADDR,
            });
            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {
                ...baseResponse,
                takerAmount: losingQuote.toString(),
                maker: MARKET_MAKER_3_ADDR,
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/price?${zeroExApiParams.toString()}`)
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            const expectedPrice = '0.5';
            (0, chai_1.expect)(appResponse.body.liquidityAvailable).to.equal(true);
            (0, chai_1.expect)(appResponse.body.price).to.equal(expectedPrice);
        });
        it('should return a 200 OK with an indicative quote for sells', async () => {
            const sellAmount = 100000000000000000;
            const winningQuote = 200000000000000000;
            const losingQuote = 150000000000000000;
            const zeroExApiParams = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'WETH',
                sellAmount: sellAmount.toString(),
                takerAddress,
                intentOnFilling: 'false',
                skipValidation: 'true',
            });
            const baseResponse = {
                takerAmount: sellAmount.toString(),
                makerToken: contractAddresses.zrxToken,
                takerToken: contractAddresses.etherToken,
                expiry: '1903620548', // in the year 2030
            };
            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {
                ...baseResponse,
                makerAmount: winningQuote.toString(),
                maker: MARKET_MAKER_2_ADDR,
            });
            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {
                ...baseResponse,
                makerAmount: losingQuote.toString(),
                maker: MARKET_MAKER_3_ADDR,
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/price?${zeroExApiParams.toString()}`)
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            const expectedPrice = '2';
            (0, chai_1.expect)(appResponse.body.liquidityAvailable).to.equal(true);
            (0, chai_1.expect)(appResponse.body.price).to.equal(expectedPrice);
        });
        it('should return a 200 OK, liquidityAvailable === false if no valid quotes found', async () => {
            const sellAmount = 100000000000000000;
            const quotedAmount = 200000000000000000;
            const params = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'WETH',
                sellAmount: sellAmount.toString(),
                takerAddress,
                intentOnFilling: 'false',
                skipValidation: 'true',
            });
            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {
                makerAmount: quotedAmount.toString(),
                takerAmount: sellAmount.toString(),
                makerToken: contractAddresses.zrxToken,
                takerToken: contractAddresses.etherToken,
                expiry: '0', // already expired
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/price?${params.toString()}`)
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.liquidityAvailable).to.equal(false);
            (0, chai_1.expect)(appResponse.body.price).to.equal(undefined);
        });
        it('should return a 400 BAD REQUEST if API Key is not permitted access', async () => {
            const sellAmount = 100000000000000000;
            const params = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'WETH',
                sellAmount: sellAmount.toString(),
                takerAddress,
                intentOnFilling: 'false',
                skipValidation: 'true',
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/price?${params.toString()}`)
                .set('0x-api-key', 'unknown-key')
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Invalid API key');
        });
        it('should return a 400 BAD REQUEST if API Key does not have access to the chain', async () => {
            const sellAmount = 100000000000000000;
            const params = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'WETH',
                sellAmount: sellAmount.toString(),
                takerAddress,
                intentOnFilling: 'false',
                skipValidation: 'true',
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/price?${params.toString()}`)
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1')
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Invalid API key');
        });
        it('should return a 400 BAD REQUEST Validation Error if Chain Id cannot be parsed', async () => {
            const sellAmount = 100000000000000000;
            const params = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'WETH',
                sellAmount: sellAmount.toString(),
                takerAddress,
                intentOnFilling: 'false',
                skipValidation: 'true',
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/price?${params.toString()}`)
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', 'invalid-id')
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Validation Failed');
            (0, chai_1.expect)(appResponse.body.validationErrors[0].reason).to.equal('Invalid chain id');
        });
        it('should return a 400 BAD REQUEST Validation Error if sending ETH, not WETH', async () => {
            const sellAmount = 100000000000000000;
            const params = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'ETH',
                sellAmount: sellAmount.toString(),
                takerAddress,
                intentOnFilling: 'false',
                skipValidation: 'true',
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/price?${params.toString()}`)
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Validation Failed');
            (0, chai_1.expect)(appResponse.body.validationErrors[0].reason).to.equal('Unwrapped Native Asset is not supported. Use WETH instead');
        });
        it('should return a 400 BAD REQUEST if buyToken is missing', async () => {
            const sellAmount = 100000000000000000;
            const params = new URLSearchParams({
                sellToken: 'WETH',
                sellAmount: sellAmount.toString(),
                takerAddress,
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/price?${params.toString()}`)
                .set('0x-api-key', API_KEY)
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Validation Failed');
        });
        it('should return a 400 BAD REQUEST if sellToken is missing', async () => {
            const sellAmount = 100000000000000000;
            const params = new URLSearchParams({
                buyToken: 'ZRX',
                sellAmount: sellAmount.toString(),
                takerAddress,
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/price?${params.toString()}`)
                .set('0x-api-key', API_KEY)
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Validation Failed');
        });
        it('should return a 400 BAD REQUEST if both sellAmount and buyAmount are missing', async () => {
            const params = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'WETH',
                takerAddress,
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/price?${params.toString()}`)
                .set('0x-api-key', API_KEY)
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Validation Failed');
        });
        it('should return a 400 BAD REQUEST Error if trading an unknown token', async () => {
            const sellAmount = 100000000000000000;
            const UNKNOWN_TOKEN = 'RACCOONS_FOREVER';
            const params = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: UNKNOWN_TOKEN,
                sellAmount: sellAmount.toString(),
                takerAddress,
                intentOnFilling: 'false',
                skipValidation: 'true',
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/price?${params.toString()}`)
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Validation Failed');
            (0, chai_1.expect)(appResponse.body.validationErrors[0].reason).to.equal(`Token ${UNKNOWN_TOKEN} is currently unsupported`);
        });
    });
    describe('rfqm/v1/quote', () => {
        it('should return a 200 OK, liquidityAvailable === false if no valid firm quotes found', async () => {
            const sellAmount = 100000000000000000;
            const insufficientSellAmount = 1;
            const params = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'WETH',
                sellAmount: sellAmount.toString(),
                takerAddress,
                intentOnFilling: 'false',
                skipValidation: 'true',
            });
            const baseResponse = {
                makerToken: contractAddresses.zrxToken,
                takerToken: contractAddresses.etherToken,
                expiry: '1903620548', // in the year 2030
            };
            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {
                ...baseResponse,
                takerAmount: insufficientSellAmount,
                makerAmount: insufficientSellAmount,
                maker: MARKET_MAKER_2_ADDR,
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/quote?${params.toString()}`)
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.liquidityAvailable).to.equal(false);
            (0, chai_1.expect)(appResponse.body.price).to.equal(undefined);
        });
        it('should return a 200 OK with a firm quote for buys', async () => {
            const buyAmount = 200000000000000000;
            const winningQuote = 100000000000000000;
            const losingQuote = 150000000000000000;
            const zeroExApiParams = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'WETH',
                buyAmount: buyAmount.toString(),
                takerAddress,
                intentOnFilling: 'true',
                skipValidation: 'true',
            });
            const headers = {
                Accept: 'application/json, text/plain, */*',
                '0x-api-key': INTEGRATOR_ID,
                '0x-integrator-id': INTEGRATOR_ID,
            };
            const baseResponse = {
                makerAmount: buyAmount.toString(),
                makerToken: contractAddresses.zrxToken,
                takerToken: contractAddresses.etherToken,
                expiry: '1903620548', // in the year 2030
            };
            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {
                ...baseResponse,
                takerAmount: winningQuote.toString(),
                maker: MARKET_MAKER_2_ADDR,
            });
            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {
                ...baseResponse,
                takerAmount: losingQuote.toString(),
                maker: MARKET_MAKER_3_ADDR,
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/quote?${zeroExApiParams.toString()}`)
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            const expectedPrice = '0.5';
            (0, chai_1.expect)(appResponse.body.price).to.equal(expectedPrice);
            (0, chai_1.expect)(appResponse.body.type).to.equal(types_2.GaslessTypes.OtcOrder);
            (0, chai_1.expect)(appResponse.body.orderHash).to.match(/^0x[0-9a-fA-F]+/);
            (0, chai_1.expect)(appResponse.body.order.maker).to.equal(MARKET_MAKER_2_ADDR);
            (0, chai_1.expect)(appResponse.body.approval).to.equal(undefined);
        });
        it('should return a 200 OK with a firm quote when OtcOrder pricing is available for sells', async () => {
            const sellAmount = 100000000000000000;
            const winningQuote = 200000000000000000;
            const losingQuote = 150000000000000000;
            const zeroExApiParams = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'WETH',
                sellAmount: sellAmount.toString(),
                takerAddress,
                intentOnFilling: 'true',
                skipValidation: 'true',
            });
            const headers = {
                Accept: 'application/json, text/plain, */*',
                '0x-api-key': INTEGRATOR_ID,
                '0x-integrator-id': INTEGRATOR_ID,
            };
            const baseResponse = {
                takerAmount: sellAmount.toString(),
                makerToken: contractAddresses.zrxToken,
                takerToken: contractAddresses.etherToken,
                expiry: '1903620548', // in the year 2030
            };
            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {
                ...baseResponse,
                makerAmount: winningQuote.toString(),
                maker: MARKET_MAKER_2_ADDR,
            });
            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {
                ...baseResponse,
                makerAmount: losingQuote.toString(),
                maker: MARKET_MAKER_3_ADDR,
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/quote?${zeroExApiParams.toString()}`)
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            const expectedPrice = '2';
            (0, chai_1.expect)(appResponse.body.price).to.equal(expectedPrice);
            (0, chai_1.expect)(appResponse.body.type).to.equal(types_2.GaslessTypes.OtcOrder);
            (0, chai_1.expect)(appResponse.body.orderHash).to.match(/^0x[0-9a-fA-F]+/);
            (0, chai_1.expect)(appResponse.body.order.maker).to.equal(MARKET_MAKER_2_ADDR);
            (0, chai_1.expect)(appResponse.body.approval).to.equal(undefined);
        });
        it('should return a 200 OK with a firm quote when OtcOrder pricing is available for sells and checkApproval is true', async () => {
            (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.getAllowanceAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(new utils_1.BigNumber(0));
            (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.getGaslessApprovalAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL);
            const sellAmount = 100000000000000000;
            const winningQuote = 200000000000000000;
            const losingQuote = 150000000000000000;
            const zeroExApiParams = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'WETH',
                sellAmount: sellAmount.toString(),
                takerAddress,
                checkApproval: 'true',
            });
            const headers = {
                Accept: 'application/json, text/plain, */*',
                '0x-api-key': INTEGRATOR_ID,
                '0x-integrator-id': INTEGRATOR_ID,
            };
            const baseResponse = {
                takerAmount: sellAmount.toString(),
                makerToken: contractAddresses.zrxToken,
                takerToken: contractAddresses.etherToken,
                expiry: '1903620548', // in the year 2030
            };
            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {
                ...baseResponse,
                makerAmount: winningQuote.toString(),
                maker: MARKET_MAKER_2_ADDR,
            });
            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {
                ...baseResponse,
                makerAmount: losingQuote.toString(),
                maker: MARKET_MAKER_3_ADDR,
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/quote?${zeroExApiParams.toString()}`)
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            const expectedPrice = '2';
            const expectedApproval = {
                isRequired: true,
                isGaslessAvailable: true,
                type: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL.kind,
                eip712: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL.eip712,
            };
            (0, chai_1.expect)(appResponse.body.price).to.equal(expectedPrice);
            (0, chai_1.expect)(appResponse.body.type).to.equal(types_2.GaslessTypes.OtcOrder);
            (0, chai_1.expect)(appResponse.body.orderHash).to.match(/^0x[0-9a-fA-F]+/);
            (0, chai_1.expect)(appResponse.body.order.maker).to.equal(MARKET_MAKER_2_ADDR);
            (0, chai_1.expect)(appResponse.body.approval).to.eql(expectedApproval);
        });
        it('should return a 400 BAD REQUEST if api key is missing', async () => {
            const sellAmount = 100000000000000000;
            const params = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'WETH',
                sellAmount: sellAmount.toString(),
                takerAddress,
                intentOnFilling: 'false',
                skipValidation: 'true',
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/quote?${params.toString()}`)
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Invalid API key');
        });
        it('should return a 400 BAD REQUEST if takerAddress is missing', async () => {
            const sellAmount = 100000000000000000;
            const params = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'WETH',
                sellAmount: sellAmount.toString(),
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/quote?${params.toString()}`)
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Validation Failed');
        });
        it('should return a 400 BAD REQUEST if buyToken is missing', async () => {
            const sellAmount = 100000000000000000;
            const params = new URLSearchParams({
                sellToken: 'WETH',
                sellAmount: sellAmount.toString(),
                takerAddress,
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/quote?${params.toString()}`)
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Validation Failed');
        });
        it('should return a 400 BAD REQUEST if sellToken is missing', async () => {
            const sellAmount = 100000000000000000;
            const params = new URLSearchParams({
                buyToken: 'ZRX',
                sellAmount: sellAmount.toString(),
                takerAddress,
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/quote?${params.toString()}`)
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Validation Failed');
        });
        it('should return a 400 BAD REQUEST if both sellAmount and buyAmount are missing', async () => {
            const params = new URLSearchParams({
                buyToken: 'ZRX',
                sellToken: 'WETH',
                takerAddress,
            });
            const appResponse = await request(app)
                .get(`${constants_1.RFQM_PATH}/quote?${params.toString()}`)
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Validation Failed');
        });
    });
    describe('rfqm/v1/submit', () => {
        const mockStoredFee = {
            token: '0x123',
            amount: '1000',
            type: 'fixed',
        };
        const mockStoredOrder = {
            type: types_1.RfqmOrderTypes.Otc,
            order: {
                chainId: '1337',
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(SAFE_EXPIRY), constants_1.ZERO, new utils_1.BigNumber(SAFE_EXPIRY)).toString(),
                maker: '0x123',
                makerAmount: '1',
                makerToken: '0x123',
                taker: '0x123',
                takerAmount: '1',
                takerToken: '0x123',
                txOrigin: '0x123',
                verifyingContract: '0x123',
            },
        };
        // OtcOrder Taker
        const otcOrderTakerAddress = '0xdA9AC423442169588DE6b4305f4E820D708d0cE5';
        const otcOrderTakerPrivateKey = '0x653fa328df81be180b58e42737bc4cef037a19a3b9673b15d20ee2eebb2e509d';
        // OtcOrder
        const mockStoredOtcOrder = {
            type: types_1.RfqmOrderTypes.Otc,
            order: {
                txOrigin: '0x123',
                maker: '0x123',
                taker: otcOrderTakerAddress,
                makerToken: '0x123',
                takerToken: '0x123',
                makerAmount: '1',
                takerAmount: '1',
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(SAFE_EXPIRY), constants_1.ZERO, new utils_1.BigNumber(SAFE_EXPIRY)).toString(),
                chainId: '1337',
                verifyingContract: '0x123',
            },
        };
        const otcOrder = (0, rfqm_db_utils_1.storedOtcOrderToOtcOrder)(mockStoredOtcOrder);
        it('[v2] should return status 201 created and queue up a job with a successful request', async () => {
            // OtcOrder
            const order = otcOrder;
            const orderHash = order.getHash();
            // Taker Signature
            const takerSignature = (0, protocol_utils_1.ethSignHashWithKey)(orderHash, otcOrderTakerPrivateKey);
            const mockQuote = new entities_1.RfqmV2QuoteEntity({
                orderHash,
                makerUri: MARKET_MAKER_1,
                fee: mockStoredFee,
                order: mockStoredOtcOrder,
                chainId: 1337,
                affiliateAddress: constants_2.MATCHA_AFFILIATE_ADDRESS,
                takerSpecifiedSide: 'makerToken',
            });
            // write a corresponding quote entity to validate against
            await dataSource.getRepository(entities_1.RfqmV2QuoteEntity).insert(mockQuote);
            const appResponse = await request(app)
                .post(`${constants_1.RFQM_PATH}/submit`)
                .send({ type: types_2.GaslessTypes.OtcOrder, order, signature: takerSignature })
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.CREATED)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.orderHash).to.equal(orderHash);
            const dbJobEntity = await dataSource.getRepository(entities_1.RfqmV2JobEntity).findOne({
                where: {
                    orderHash,
                },
            });
            (0, chai_1.expect)(dbJobEntity).to.not.equal(null);
            (0, chai_1.expect)(dbJobEntity === null || dbJobEntity === void 0 ? void 0 : dbJobEntity.orderHash).to.equal(mockQuote.orderHash);
            (0, chai_1.expect)(dbJobEntity === null || dbJobEntity === void 0 ? void 0 : dbJobEntity.makerUri).to.equal(MARKET_MAKER_1);
            (0, chai_1.expect)(dbJobEntity === null || dbJobEntity === void 0 ? void 0 : dbJobEntity.affiliateAddress).to.equal(constants_2.MATCHA_AFFILIATE_ADDRESS);
            (0, chai_1.expect)(dbJobEntity === null || dbJobEntity === void 0 ? void 0 : dbJobEntity.takerSignature).to.deep.eq(takerSignature);
        });
        it('[v2] should return status 404 not found if there is not a pre-existing quote', async () => {
            const order = otcOrder;
            // Taker Signature
            const takerSignature = (0, protocol_utils_1.ethSignHashWithKey)(order.getHash(), otcOrderTakerPrivateKey);
            const appResponse = await request(app)
                .post(`${constants_1.RFQM_PATH}/submit`)
                .send({
                type: types_2.GaslessTypes.OtcOrder,
                order,
                signature: takerSignature,
            })
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.NOT_FOUND)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Not Found');
        });
        it('should return a 400 BAD REQUEST Error the type is not supported', async () => {
            const invalidType = 'v10rfq';
            const appResponse = await request(app)
                .post(`${constants_1.RFQM_PATH}/submit`)
                .send({ type: invalidType, order: mockStoredOrder, signature: RANDOM_VALID_SIGNATURE })
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Validation Failed');
            (0, chai_1.expect)(appResponse.body.validationErrors[0].reason).to.equal(`${invalidType} is an invalid value for 'type'`);
        });
        it('[v2] should fail with status code 500 if a quote has already been submitted', async () => {
            // OtcOrder
            const order = otcOrder;
            const orderHash = order.getHash();
            // Taker Signature
            const takerSignature = (0, protocol_utils_1.ethSignHashWithKey)(orderHash, otcOrderTakerPrivateKey);
            const mockQuote = new entities_1.RfqmV2QuoteEntity({
                orderHash,
                makerUri: MARKET_MAKER_1,
                fee: mockStoredFee,
                order: mockStoredOtcOrder,
                chainId: 1337,
                affiliateAddress: constants_2.MATCHA_AFFILIATE_ADDRESS,
                takerSpecifiedSide: 'makerToken',
            });
            // write a corresponding quote entity to validate against
            await dataSource.getRepository(entities_1.RfqmV2QuoteEntity).insert(mockQuote);
            await request(app)
                .post(`${constants_1.RFQM_PATH}/submit`)
                .send({ type: types_2.GaslessTypes.OtcOrder, order, signature: takerSignature })
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.CREATED)
                .expect('Content-Type', /json/);
            // try to submit again
            await request(app)
                .post(`${constants_1.RFQM_PATH}/submit`)
                .send({ type: types_2.GaslessTypes.OtcOrder, order, signature: takerSignature })
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.INTERNAL_SERVER_ERROR)
                .expect('Content-Type', /json/);
        });
        it('[v2] should fail with 400 BAD REQUEST if meta tx is too close to expiration', async () => {
            const order = new protocol_utils_1.OtcOrder({
                ...otcOrder,
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(constants_1.ZERO, constants_1.ZERO, constants_1.ZERO),
            });
            const orderHash = order.getHash();
            const mockQuote = new entities_1.RfqmV2QuoteEntity({
                orderHash,
                makerUri: MARKET_MAKER_1,
                fee: mockStoredFee,
                order: mockStoredOtcOrder,
                chainId: 1337,
                affiliateAddress: constants_2.MATCHA_AFFILIATE_ADDRESS,
                takerSpecifiedSide: 'makerToken',
            });
            await dataSource.getRepository(entities_1.RfqmV2QuoteEntity).insert(mockQuote);
            const appResponse = await request(app)
                .post(`${constants_1.RFQM_PATH}/submit`)
                .send({ type: types_2.GaslessTypes.OtcOrder, order, signature: RANDOM_VALID_SIGNATURE })
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Validation Failed');
            (0, chai_1.expect)(appResponse.body.validationErrors[0].reason).to.equal(`order will expire too soon`);
        });
        it('[v2] should fail with 400 BAD REQUEST if signature is invalid', async () => {
            const order = otcOrder;
            const orderHash = order.getHash();
            const mockQuote = new entities_1.RfqmV2QuoteEntity({
                orderHash,
                makerUri: MARKET_MAKER_1,
                fee: mockStoredFee,
                order: mockStoredOtcOrder,
                chainId: 1337,
                affiliateAddress: constants_2.MATCHA_AFFILIATE_ADDRESS,
                takerSpecifiedSide: 'makerToken',
            });
            await dataSource.getRepository(entities_1.RfqmV2QuoteEntity).insert(mockQuote);
            const appResponse = await request(app)
                .post(`${constants_1.RFQM_PATH}/submit`)
                .send({ type: types_2.GaslessTypes.OtcOrder, order, signature: RANDOM_VALID_SIGNATURE })
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.reason).to.equal('Validation Failed');
            (0, chai_1.expect)(appResponse.body.validationErrors[0].reason).to.equal(`signature is not valid`);
        });
    });
    describe('rfqm/v1/submit-with-approval', () => {
        const mockStoredFee = {
            token: '0x123',
            amount: '1000',
            type: 'fixed',
        };
        // OtcOrder Taker
        const otcOrderTakerAddress = '0xdA9AC423442169588DE6b4305f4E820D708d0cE5';
        const otcOrderTakerPrivateKey = '0x653fa328df81be180b58e42737bc4cef037a19a3b9673b15d20ee2eebb2e509d';
        // OtcOrder
        const mockStoredOtcOrder = {
            type: types_1.RfqmOrderTypes.Otc,
            order: {
                txOrigin: '0x123',
                maker: '0x123',
                taker: otcOrderTakerAddress,
                makerToken: '0x123',
                takerToken: '0x123',
                makerAmount: '1',
                takerAmount: '1',
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(SAFE_EXPIRY), constants_1.ZERO, new utils_1.BigNumber(SAFE_EXPIRY)).toString(),
                chainId: '1337',
                verifyingContract: '0x123',
            },
        };
        // Approval
        const approval = {
            type: constants_2.MOCK_PERMIT_APPROVAL.kind,
            eip712: constants_2.MOCK_PERMIT_APPROVAL.eip712,
        };
        const otcOrder = (0, rfqm_db_utils_1.storedOtcOrderToOtcOrder)(mockStoredOtcOrder);
        it('[v2] should return status 201 created and queue up a job with a successful request', async () => {
            var _a, _b;
            // OtcOrder
            const order = otcOrder;
            const orderHash = order.getHash();
            // Taker Signature
            const takerSignature = (0, protocol_utils_1.ethSignHashWithKey)(orderHash, otcOrderTakerPrivateKey);
            // Approval signature
            const signer = new ethers_1.ethers.Wallet(otcOrderTakerPrivateKey);
            const typesCopy = { ...approval.eip712.types };
            delete typesCopy.EIP712Domain;
            const rawApprovalSignature = await signer._signTypedData(approval.eip712.domain, 
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            typesCopy, approval.eip712.message);
            const { v, r, s } = ethers_1.ethers.utils.splitSignature(rawApprovalSignature);
            const approvalSignature = {
                v,
                r,
                s,
                signatureType: 3,
            };
            const mockQuote = new entities_1.RfqmV2QuoteEntity({
                orderHash,
                makerUri: MARKET_MAKER_1,
                fee: mockStoredFee,
                order: mockStoredOtcOrder,
                chainId: 1337,
                affiliateAddress: constants_2.MATCHA_AFFILIATE_ADDRESS,
                takerSpecifiedSide: 'makerToken',
            });
            // write a corresponding quote entity to validate against
            await dataSource.getRepository(entities_1.RfqmV2QuoteEntity).insert(mockQuote);
            const appResponse = await request(app)
                .post(`${constants_1.RFQM_PATH}/submit-with-approval`)
                .send({
                trade: { type: types_2.GaslessTypes.OtcOrder, order, signature: takerSignature },
                approval: {
                    type: types_2.GaslessApprovalTypes.Permit,
                    eip712: approval.eip712,
                    signature: approvalSignature,
                },
            })
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.CREATED)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(appResponse.body.orderHash).to.equal(orderHash);
            const dbJobEntity = await dataSource.getRepository(entities_1.RfqmV2JobEntity).findOne({
                where: {
                    orderHash,
                },
            });
            (0, chai_1.expect)(dbJobEntity).to.not.equal(null);
            (0, chai_1.expect)(dbJobEntity === null || dbJobEntity === void 0 ? void 0 : dbJobEntity.orderHash).to.equal(mockQuote.orderHash);
            (0, chai_1.expect)(dbJobEntity === null || dbJobEntity === void 0 ? void 0 : dbJobEntity.makerUri).to.equal(MARKET_MAKER_1);
            (0, chai_1.expect)(dbJobEntity === null || dbJobEntity === void 0 ? void 0 : dbJobEntity.affiliateAddress).to.equal(constants_2.MATCHA_AFFILIATE_ADDRESS);
            (0, chai_1.expect)(dbJobEntity === null || dbJobEntity === void 0 ? void 0 : dbJobEntity.takerSignature).to.deep.eq(takerSignature);
            (0, chai_1.expect)((_a = dbJobEntity === null || dbJobEntity === void 0 ? void 0 : dbJobEntity.approval) === null || _a === void 0 ? void 0 : _a.eip712).to.deep.eq(approval.eip712);
            (0, chai_1.expect)((_b = dbJobEntity === null || dbJobEntity === void 0 ? void 0 : dbJobEntity.approval) === null || _b === void 0 ? void 0 : _b.kind).to.deep.eq(approval.type);
            (0, chai_1.expect)(dbJobEntity === null || dbJobEntity === void 0 ? void 0 : dbJobEntity.approvalSignature).to.deep.eq(approvalSignature);
        });
    });
    describe('rfqm/v1/status/:orderHash', () => {
        it('should return a 404 NOT FOUND if the order hash is not found', () => {
            const orderHash = '0x00';
            return request(app)
                .get(`${constants_1.RFQM_PATH}/status/${orderHash}`)
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.NOT_FOUND);
        });
        it('should return a 200 when the order exists', async () => {
            await dbUtils.writeV2JobAsync(MOCK_RFQM_JOB);
            const response = await request(app)
                .get(`${constants_1.RFQM_PATH}/status/${MOCK_RFQM_JOB.orderHash}`)
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            // Response details are covered by the service test, but do one small check for sanity
            (0, chai_1.expect)(response.body.status).to.equal('submitted');
        });
        it('should return status reason for failures', async () => {
            await dbUtils.writeV2JobAsync({
                ...MOCK_RFQM_JOB,
                status: types_1.RfqmJobStatus.FailedRevertedConfirmed,
            });
            const response = await request(app)
                .get(`${constants_1.RFQM_PATH}/status/${MOCK_RFQM_JOB.orderHash}`)
                .set('0x-api-key', API_KEY)
                .set('0x-chain-id', '1337')
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            // Response details are covered by the service test, but do one small check for sanity
            (0, chai_1.expect)(response.body.reason).to.equal('transaction_reverted');
        });
    });
    describe('/admin/v1/cleanup', () => {
        it('should return a 400 BAD REQUEST if the order hash is not found', () => {
            const orderHash = '0x00';
            return request(app)
                .post(`${constants_1.ADMIN_PATH}/cleanup`)
                .send({ orderHashes: [orderHash] })
                .set('0x-admin-api-key', ADMIN_API_KEY)
                .expect(HttpStatus.BAD_REQUEST);
        });
        it('should return a 400 BAD REQUEST if no order hashes are sent', async () => {
            await request(app)
                .post(`${constants_1.ADMIN_PATH}/cleanup`)
                .send({ orderHashes: [] })
                .set('0x-admin-api-key', ADMIN_API_KEY)
                .expect(HttpStatus.BAD_REQUEST);
        });
        it('should return a 400 BAD REQUEST if all job updates fail', async () => {
            await dbUtils.writeV2JobAsync({ ...MOCK_RFQM_JOB, status: types_1.RfqmJobStatus.SucceededConfirmed });
            const response = await request(app)
                .post(`${constants_1.ADMIN_PATH}/cleanup`)
                .send({ orderHashes: [MOCK_RFQM_JOB.orderHash] })
                .set('0x-admin-api-key', ADMIN_API_KEY)
                .expect(HttpStatus.BAD_REQUEST);
            (0, chai_1.expect)(response.body.unmodifiedJobs[0]).to.equal(MOCK_RFQM_JOB.orderHash);
        });
        it('should return a 401 UNAUTHORIZED if the API key is not an admin key', async () => {
            await dbUtils.writeV2JobAsync(MOCK_RFQM_JOB);
            const badApiKey = '0xbadapikey';
            return request(app)
                .post(`${constants_1.ADMIN_PATH}/cleanup`)
                .send({ orderHashes: [MOCK_RFQM_JOB.orderHash] })
                .set('0x-admin-api-key', badApiKey)
                .expect(HttpStatus.UNAUTHORIZED);
        });
        it('should return a 200 OK when the jobs are successfully set to failure', async () => {
            await dbUtils.writeV2JobAsync({
                ...MOCK_RFQM_JOB,
                expiry: new utils_1.BigNumber(Date.now() - 60000).dividedBy(constants_1.ONE_SECOND_MS).decimalPlaces(0),
            });
            const response = await request(app)
                .post(`${constants_1.ADMIN_PATH}/cleanup`)
                .send({ orderHashes: [MOCK_RFQM_JOB.orderHash] })
                .set('0x-admin-api-key', ADMIN_API_KEY)
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.modifiedJobs[0]).to.equal(MOCK_RFQM_JOB.orderHash);
        });
        it('should return a 207 MULTI STATUS if some jobs succeed and some jobs fail', async () => {
            await dbUtils.writeV2JobAsync({
                ...MOCK_RFQM_JOB,
                status: types_1.RfqmJobStatus.SucceededConfirmed,
                orderHash: '0x01',
            });
            await dbUtils.writeV2JobAsync({
                ...MOCK_RFQM_JOB,
                expiry: new utils_1.BigNumber(Date.now() - 60000).dividedBy(constants_1.ONE_SECOND_MS).decimalPlaces(0),
                orderHash: '0x02',
            });
            const response = await request(app)
                .post(`${constants_1.ADMIN_PATH}/cleanup`)
                .send({ orderHashes: ['0x01', '0x02'] })
                .set('0x-admin-api-key', ADMIN_API_KEY)
                .expect(HttpStatus.MULTI_STATUS);
            (0, chai_1.expect)(response.body.unmodifiedJobs[0]).to.equal('0x01');
            (0, chai_1.expect)(response.body.modifiedJobs[0]).to.equal('0x02');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,