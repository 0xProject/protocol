{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/rfqm_test.ts","mappings":";;AAEA,uDAAkG;AAClG,qCAAsC;AACtC,mDAA+C;AAC/C,iCAA6C;AAC7C,2DAAkD;AAClD,+BAA8B;AAE9B,mCAA8D;AAE9D,gDAAgD;AAChD,qCAA4B;AAC5B,+CAAwC;AACxC,qCAAqC;AACrC,2CAAkF;AAGlF,wCAAwC;AACxC,qDAQ+B;AAC/B,8CAAqE;AACrE,iDAAsF;AACtF,sFAIiD;AACjD,6DAAyD;AACzD,+DAA2D;AAC3D,qGAA8F;AAC9F,6CAAqG;AACrG,4DAAwD;AACxD,gEAA4D;AAC5D,0EAAqE;AACrE,8DAAmF;AACnF,4EAAuE;AACvE,wEAAkE;AAClE,sEAAiE;AACjE,sEAA0E;AAC1E,4EAAyE;AAEzE,2CAQqB;AACrB,wDAAqG;AACrG,8EAA2E;AAE3E,MAAM,4BAA4B,GAAG,4CAA4C,CAAC;AAClF,MAAM,OAAO,GAAG,YAAY,CAAC;AAC7B,MAAM,aAAa,GAAG,aAAa,CAAC;AACpC,MAAM,aAAa,GAAG,kBAAkB,CAAC;AACzC,MAAM,iBAAiB,GAAsB,8BAAkB,CAAC;AAChE,MAAM,uBAAuB,GAAG,IAAI,iBAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,wBAAY,CAAC,CAAC;AAEzE,+CAA+C;AAC/C,MAAM,cAAc,GAAG,yBAAyB,CAAC;AACjD,MAAM,cAAc,GAAG,yBAAyB,CAAC;AACjD,MAAM,cAAc,GAAG,yBAAyB,CAAC;AACjD,MAAM,mBAAmB,GAAG,4CAA4C,CAAC;AACzE,MAAM,mBAAmB,GAAG,4CAA4C,CAAC;AACzE,MAAM,SAAS,GAAG,IAAI,iBAAS,CAAC,GAAG,CAAC,CAAC;AAErC,MAAM,sBAAsB,GAAG,OAAO,CAAC;AACvC,MAAM,sBAAsB,GAAG;IAC3B,CAAC,EAAE,oEAAoE;IACvE,CAAC,EAAE,oEAAoE;IACvE,CAAC,EAAE,EAAE;IACL,aAAa,EAAE,8BAAa,CAAC,OAAO;CACvC,CAAC;AACF,MAAM,WAAW,GAAG,YAAY,CAAC;AACjC,MAAM,YAAY,GAAG,MAAM,CAAC;AAC5B,MAAM,cAAc,GAAG,kBAAkB,CAAC;AAC1C,MAAM,sBAAsB,GAAG,eAAe,CAAC;AAC/C,MAAM,wBAAwB,GAAG,0BAA0B,CAAC;AAC5D,MAAM,SAAS,GAA6B,CAAC,CAAC;AAC9C,eAAe;AACf,MAAM,WAAW,GAAG,IAAI,CAAC;AACzB,6BAA6B;AAC7B,MAAM,aAAa,GAAG,WAAW,GAAG,4CAAwB,CAAC;AAC7D,MAAM,mBAAmB,GAAG,oBAAoB,CAAC;AACjD,MAAM,8BAA8B,GAAG;IACnC,SAAS,EAAE,cAAc;IACzB,WAAW,EAAE,WAAW;IACxB,SAAS,EAAE,IAAI;IACf,aAAa,EAAE,CAAC;IAChB,eAAe,EAAE,EAAE;IACnB,iBAAiB,EAAE,kBAAe,CAAC,IAAI,CAAC,MAAM,CAAC;IAC/C,iBAAiB,EAAE,kBAAe,CAAC,IAAI,CAAC,IAAI,CAAC;IAC7C,IAAI,EAAE,cAAc;IACpB,OAAO,EAAE,kBAAe,CAAC,IAAI,CAAC,YAAY,CAAC;IAC3C,IAAI,EAAE,CAAC,2CAA+B,CAAC;IACvC,SAAS,EAAE,EAAE;IACb,MAAM,EAAE,SAAS;IACjB,EAAE,EAAE,mBAAmB;IACvB,eAAe,EAAE,sBAAsB;IACvC,gBAAgB,EAAE,CAAC;IACnB,IAAI,EAAE,CAAC;CACV,CAAC;AAEF,MAAM,aAAa,GAAG,IAAI,0BAAe,CAAC;IACtC,OAAO,EAAE,IAAI;IACb,SAAS,EAAE,IAAI,IAAI,EAAE;IACrB,MAAM,EAAE,IAAI,iBAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;IACjC,GAAG,EAAE;QACD,MAAM,EAAE,MAAM;QACd,KAAK,EAAE,OAAO;QACd,IAAI,EAAE,OAAO;KAChB;IACD,YAAY,EAAE,IAAI;IAClB,QAAQ,EAAE,cAAc;IACxB,KAAK,EAAE;QACH,KAAK,EAAE;YACH,OAAO,EAAE,MAAM;YACf,cAAc,EAAE,yBAAQ,CAAC,oBAAoB,CACzC,IAAI,iBAAS,CAAC,WAAW,CAAC,EAC1B,gBAAI,EACJ,IAAI,iBAAS,CAAC,WAAW,CAAC,CAC7B,CAAC,QAAQ,EAAE;YACZ,KAAK,EAAE,OAAO;YACd,WAAW,EAAE,GAAG;YAChB,UAAU,EAAE,OAAO;YACnB,KAAK,EAAE,OAAO;YACd,WAAW,EAAE,GAAG;YAChB,UAAU,EAAE,OAAO;YACnB,QAAQ,EAAE,OAAO;YACjB,iBAAiB,EAAE,OAAO;SAC7B;QACD,IAAI,EAAE,sBAAc,CAAC,GAAG;KAC3B;IACD,SAAS,EAAE,oEAAoE;IAC/E,MAAM,EAAE,qBAAa,CAAC,gBAAgB;IACtC,SAAS,EAAE,IAAI,IAAI,EAAE;IACrB,aAAa,EAAE,IAAI;IACnB,cAAc,EAAE,IAAI;IACpB,gBAAgB,EAAE,oCAAwB;IAC1C,kBAAkB,EAAE,YAAY;CACnC,CAAC,CAAC;AAEH,IAAI,CAAC,UAAU,CAAC,yBAAa,GAAG,CAAC,CAAC,CAAC;AACnC,IAAI,oBAAwD,CAAC;AAE7D,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAC9B,IAAI,GAAwB,CAAC;IAC7B,IAAI,WAA0B,CAAC;IAC/B,IAAI,WAAwB,CAAC;IAC7B,IAAI,UAAsB,CAAC;IAC3B,IAAI,OAAoB,CAAC;IACzB,IAAI,SAA2B,CAAC;IAChC,IAAI,sBAA0C,CAAC;IAC/C,IAAI,sBAAmC,CAAC;IACxC,IAAI,mBAAgC,CAAC;IACrC,IAAI,MAAc,CAAC;IACnB,IAAI,YAAoB,CAAC;IAEzB,SAAS,CAAC,KAAK,IAAI,EAAE;QACjB,oBAAoB,GAAG,MAAM,IAAA,mCAAsB,EAAC,CAAC,UAAU,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;QAEtF,oBAAoB;QACpB,MAAM,QAAQ,GAAG,IAAA,uBAAW,GAAE,CAAC;QAC/B,MAAM,WAAW,GAAG,IAAI,0BAAW,CAAC,QAAQ,CAAC,CAAC;QAC9C,CAAC,YAAY,CAAC,GAAG,MAAM,WAAW,CAAC,0BAA0B,EAAE,CAAC;QAEhE,qBAAqB;QACrB,6BAA6B;QAC7B,MAAM,cAAc,GAAG,IAAA,iBAAI,EAAC,wBAAU,CAAC,CAAC;QACxC,IAAA,iBAAI,EAAC,cAAc,CAAC,0BAA0B,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACzE,IAAA,iBAAI,EAAC,cAAc,CAAC,iBAAiB,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,WAAW,CAAC;YACvE,cAAc,EAAE;gBACZ,KAAK,EAAE,SAAS;gBAChB,MAAM,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;gBAC1B,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE;oBACL,eAAe,EAAE,CAAC;oBAClB,IAAI,EAAE,SAAS;oBACf,YAAY,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;oBAChC,QAAQ,EAAE,SAAS;oBACnB,eAAe,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;oBACnC,YAAY,EAAE,CAAC;oBACf,wBAAwB,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;oBAC3C,0BAA0B,EAAE,IAAI;oBAChC,0BAA0B,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;iBAChD;gBACD,SAAS,EAAE;oBACP,GAAG,EAAE;wBACD,MAAM,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;wBAC1B,OAAO,EAAE;4BACL,QAAQ,EAAE,SAAS;4BACnB,YAAY,EAAE,IAAI,iBAAS,CAAC,CAAC,CAAC;yBACjC;qBACJ;oBACD,MAAM,EAAE;wBACJ,MAAM,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;wBAC1B,OAAO,EAAE;4BACL,IAAI,EAAE,QAAQ;4BACd,YAAY,EAAE,CAAC;yBAClB;qBACJ;iBACJ;gBACD,eAAe,EAAE;oBACb,2BAA2B,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;oBAC9C,wBAAwB,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;oBAC3C,0BAA0B,EAAE,IAAI;oBAChC,0BAA0B,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;iBAChD;aACJ;SACJ,CAAC,CAAC;QACH,MAAM,kBAAkB,GAAG,IAAA,qBAAQ,EAAC,cAAc,CAAC,CAAC;QAEpD,gCAAgC;QAChC,MAAM,iBAAiB,GAAG,IAAA,iBAAI,EAAC,8BAAa,CAAC,CAAC;QAC9C,IAAA,iBAAI,EAAC,iBAAiB,CAAC,cAAc,EAAE,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QACnE,IAAA,iBAAI,EAAC,iBAAiB,CAAC,sBAAsB,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAChF,IAAA,iBAAI,EAAC,iBAAiB,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QACpF,IAAA,iBAAI,EAAC,iBAAiB,CAAC,wBAAwB,CAAC,aAAa,CAAC,CAAC,CAAC,UAAU,CAAC;YACvE,YAAY,EAAE,aAAa;YAC3B,OAAO,EAAE,CAAC,OAAO,CAAC;YAClB,eAAe,EAAE,CAAC,IAAI,CAAC;YACvB,KAAK,EAAE,MAAM;YACb,IAAI,EAAE,IAAI;YACV,GAAG,EAAE,KAAK;YACV,IAAI,EAAE,KAAK;SACd,CAAC,CAAC;QACH,MAAM,aAAa,GAAG,IAAA,qBAAQ,EAAC,iBAAiB,CAAC,CAAC;QAElD,+BAA+B;QAC/B,WAAW,GAAG,eAAK,CAAC,MAAM,EAAE,CAAC;QAC7B,SAAS,GAAG,IAAI,4BAAgB,CAAC,WAAW,CAAC,CAAC;QAE9C,qCAAqC;QACrC,MAAM,kBAAkB,GAA2B,CAAC,IAAI,iBAAS,CAAC,CAAC,CAAC,EAAE,IAAI,iBAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QACxF,sBAAsB,GAAG,IAAA,iBAAI,EAAC,yCAAkB,CAAC,CAAC;QAClD,IAAA,iBAAI,EACA,sBAAsB,CAAC,uBAAuB,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAC7G,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,EAAE,CAAC,IAAI,gCAAe,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;QACvG,IAAA,iBAAI,EAAC,sBAAsB,CAAC,+BAA+B,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,UAAU,CACvG,sBAAsB,CACzB,CAAC;QACF,IAAA,iBAAI,EACA,sBAAsB,CAAC,mCAAmC,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAC7G,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;QAClC,IAAA,iBAAI,EAAC,sBAAsB,CAAC,qBAAqB,CAAC,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,iBAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/F,IAAA,iBAAI,EAAC,sBAAsB,CAAC,kCAAkC,CAAC,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,iBAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5G,IAAA,iBAAI,EAAC,sBAAsB,CAAC,aAAa,CAAC,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACtE,IAAA,iBAAI,EAAC,sBAAsB,CAAC,mBAAmB,CAAC,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QACvF,IAAA,iBAAI,EAAC,sBAAsB,CAAC,oBAAoB,CAAC,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,WAAW,CAAC;YACtE,iBAAiB,EAAE,wBAAwB;YAC3C,eAAe,EAAE,sBAAsB;SAC1C,CAAC,CAAC;QACH,IAAA,iBAAI,EAAC,sBAAsB,CAAC,4BAA4B,CAAC,wBAAwB,CAAC,CAAC,CAAC,WAAW,CAC3F,sBAAsB,CACzB,CAAC;QACF,IAAA,iBAAI,EAAC,sBAAsB,CAAC,gBAAgB,CAAC,IAAA,sBAAS,EAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;YAC3F,8BAA8B;SACjC,CAAC,CAAC;QACH,IAAA,iBAAI,EAAC,sBAAsB,CAAC,oBAAoB,EAAE,CAAC,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAC/E,IAAA,iBAAI,EAAC,sBAAsB,CAAC,uBAAuB,EAAE,CAAC,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;QACvF,IAAA,iBAAI,EACA,sBAAsB,CAAC,6CAA6C,CAAC,IAAA,sBAAS,GAAE,EAAE,IAAA,sBAAS,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAC7G,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;QAClC,IAAA,iBAAI,EAAC,sBAAsB,CAAC,sCAAsC,CAAC,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,UAAU,CACtF,mDAAuC,CAC1C,CAAC;QACF,IAAA,iBAAI,EAAC,sBAAsB,CAAC,sBAAsB,CAAC,4BAA4B,CAAC,CAAC,CAAC,WAAW,CACzF,uBAAuB,CAC1B,CAAC;QACF,MAAM,kBAAkB,GAAG,IAAA,qBAAQ,EAAC,sBAAsB,CAAC,CAAC;QAE5D,MAAM,wBAAwB,GAAG,IAAA,iBAAI,EAAC,2CAAoB,CAAC,CAAC;QAC5D,IAAA,iBAAI,EAAC,wBAAwB,CAAC,qBAAqB,CAAC,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QACjF,MAAM,oBAAoB,GAAG,IAAA,qBAAQ,EAAC,wBAAwB,CAAC,CAAC;QAOhE,MAAM,WAAW,GAAkB;YAC/B;gBACI,EAAE,EAAE,IAAI;gBACR,gBAAgB,EAAE,kBAAkB;gBACpC,SAAS,EAAE,WAAW;aACzB;SACJ,CAAC;QAEF,qBAAqB;QACrB,UAAU,GAAG,MAAM,IAAA,6CAAqB,GAAE,CAAC;QAC3C,OAAO,GAAG,IAAI,2BAAW,CAAC,UAAU,CAAC,CAAC;QAEtC,8BAA8B;QAC9B,MAAM,eAAe,GAAG,IAAA,iBAAI,EAAC,uBAAQ,CAAC,CAAC;QACvC,IAAA,iBAAI,EAAC,eAAe,CAAC,IAAI,CAAC,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAChE,IAAA,iBAAI,EAAC,eAAe,CAAC,SAAS,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,WAAW,GAAG,IAAA,qBAAQ,EAAC,eAAe,CAAC,CAAC;QAE9C,iCAAiC;QACjC,MAAM,iBAAiB,GAAG,IAAI,uCAAiB,CAAC,WAAW,CAAC,CAAC;QAE7D,yBAAyB;QACzB,MAAM,KAAK,GAAG,IAAI,iBAAK,EAAE,CAAC;QAC1B,WAAW,GAAG,IAAI,0BAAW,CAAC,KAAK,CAAC,CAAC;QAErC,yCAAyC;QACzC,MAAM,+BAA+B,GAAG,IAAA,iBAAI,EAAC,6DAA2B,CAAC,CAAC;QAC1E,IAAA,iBAAI,EAAC,+BAA+B,CAAC,0BAA0B,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,WAAW,CAChG,CAAC,IAAI,iBAAS,CAAC,kBAAkB,CAAC,CAAC,EACnC,CAAC,IAAI,iBAAS,CAAC,kBAAkB,CAAC,EAAE,IAAI,iBAAS,CAAC,kBAAkB,CAAC,CAAC,CACzE,CAAC;QACF,MAAM,2BAA2B,GAAG,IAAA,qBAAQ,EAAC,+BAA+B,CAAC,CAAC;QAE9E,kCAAkC;QAClC,MAAM,mBAAmB,GAAG,IAAA,iBAAI,EAAC,mCAAe,CAAC,CAAC;QAClD,IAAA,iBAAI,EACA,mBAAmB,CAAC,yBAAyB,CAAC,IAAA,sBAAS,GAAE,EAAE,IAAA,sBAAS,GAAE,EAAE,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAClG,CAAC,UAAU,CAAC,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,CAAC;QAC/C,IAAA,iBAAI,EAAC,mBAAmB,CAAC,uBAAuB,EAAE,CAAC,CAAC,UAAU,CAAC;YAC3D,yBAAyB,EAAE;gBACvB,CAAC,4CAA4C,EAAE,4CAA4C,CAAC;aAC/F;SACJ,CAAC,CAAC;QACH,MAAM,eAAe,GAAG,IAAA,qBAAQ,EAAC,mBAAmB,CAAC,CAAC;QACtD,sBAAsB,GAAG,IAAI,0BAAW,CACpC,IAAI,EACJ,kBAAkB;QAClB,qBAAqB,CAAC,CAAC,EACvB,iBAAiB,EACjB,4BAA4B,EAC5B,kBAAkB,EAClB,OAAO,EACP,WAAW,EACX,iBAAiB,EACjB,0CAA8B,EAC9B,WAAW,EACX,2BAA2B,EAC3B,eAAe,EACf,oBAAoB,CACvB,CAAC;QAEF,qEAAqE;QACrE,MAAM,yBAAyB,GAAG,IAAA,iBAAI,EAAC,mCAAe,CAAC,CAAC;QACxD,IAAA,iBAAI,EAAC,yBAAyB,CAAC,uBAAuB,EAAE,CAAC,CAAC,UAAU,CAAC;YACjE,yBAAyB,EAAE,EAAE;SAChC,CAAC,CAAC;QACH,MAAM,uBAAuB,GAAG,IAAA,qBAAQ,EAAC,yBAAyB,CAAC,CAAC;QACpE,mBAAmB,GAAG,IAAI,0BAAW,CACjC,CAAC,EACD,kBAAkB;QAClB,qBAAqB,CAAC,CAAC,EACvB,iBAAiB,EACjB,4BAA4B,EAC5B,kBAAkB,EAClB,OAAO,EACP,WAAW,EACX,iBAAiB,EACjB,0CAA8B,EAC9B,WAAW,EACX,2BAA2B,EAC3B,uBAAuB,EACvB,oBAAoB,CACvB,CAAC;QAEF,MAAM,eAAe,GAAG,IAAA,+CAAoB,EAAC,OAAO,CAAC,CAAC;QACtD,MAAM,eAAe,GAAG,IAAA,+CAAoB,EAAC,IAAI,oCAAe,CAAC,UAAU,CAAC,EAAE,aAAa,CAAC,CAAC;QAE7F,mBAAmB;QACnB,MAAM,GAAG,GAAG,MAAM,IAAA,kDAAuB,EACrC,IAAI,GAAG,CAAC;YACJ,CAAC,IAAI,EAAE,sBAAsB,CAAC;YAC9B,CAAC,CAAC,EAAE,mBAAmB,CAAC;SAC3B,CAAC,EACF,IAAI,GAAG,EAAE,EACT,eAAe,EACf,eAAe,EACf,aAAa,EACb,MAAM,CAAC,wBAAwB,EAC/B,UAAU,EACV,KAAK,CACR,CAAC;QACF,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QACd,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK,IAAI,EAAE;QACjB,MAAM,UAAU,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;QAC9D,MAAM,UAAU,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;QAC5D,MAAM,UAAU,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;QAC/E,MAAM,UAAU,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAC;QACjE,MAAM,UAAU,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAC/D,MAAM,UAAU,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC;IACtF,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAChB,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAW,EAAE,EAAE;gBACzB,IAAI,GAAG,EAAE;oBACL,MAAM,CAAC,GAAG,CAAC,CAAC;iBACf;gBACD,OAAO,EAAE,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,MAAM,WAAW,CAAC,UAAU,EAAE,CAAC;QAC/B,IAAI,CAAC,oBAAoB,EAAE,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACvD;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,CAAC;iBAC3B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;iBACrB,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YACpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;YAC5F,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;QAChG,CAAC,CAAC,CAAC;QAEH,qFAAqF;QACrF,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,uBAAuB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC7C,GAAG,CAAC,GAAG,qBAAS,UAAU,CAAC;iBAC3B,GAAG,CAAC,aAAa,EAAE,GAAG,CAAC;iBACvB,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;iBACrB,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YACpC,iDAAiD;YACjD,IAAA,aAAM,EAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAE3E,MAAM,0BAA0B,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAChD,GAAG,CAAC,GAAG,qBAAS,UAAU,CAAC;iBAC3B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;iBACrB,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YACpC,IAAA,aAAM,EAAC,0BAA0B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;YAC3G,IAAA,aAAM,EAAC,0BAA0B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;QAC/G,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,SAAS,GAAG,kBAAkB,CAAC;YACrC,MAAM,YAAY,GAAG,kBAAkB,CAAC;YACxC,MAAM,WAAW,GAAG,kBAAkB,CAAC;YACvC,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC;gBACxC,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,MAAM;gBACjB,SAAS,EAAE,SAAS,CAAC,QAAQ,EAAE;gBAC/B,YAAY;gBACZ,eAAe,EAAE,OAAO;gBACxB,cAAc,EAAE,MAAM;aACzB,CAAC,CAAC;YAEH,MAAM,YAAY,GAAG;gBACjB,WAAW,EAAE,SAAS,CAAC,QAAQ,EAAE;gBACjC,UAAU,EAAE,iBAAiB,CAAC,QAAQ;gBACtC,UAAU,EAAE,iBAAiB,CAAC,UAAU;gBACxC,MAAM,EAAE,YAAY,EAAE,mBAAmB;aAC5C,CAAC;YAEF,SAAS,CAAC,KAAK,CAAC,GAAG,cAAc,gBAAgB,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE;gBACxE,GAAG,YAAY;gBACf,WAAW,EAAE,YAAY,CAAC,QAAQ,EAAE;gBACpC,KAAK,EAAE,mBAAmB;aAC7B,CAAC,CAAC;YACH,SAAS,CAAC,KAAK,CAAC,GAAG,cAAc,gBAAgB,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE;gBACxE,GAAG,YAAY;gBACf,WAAW,EAAE,WAAW,CAAC,QAAQ,EAAE;gBACnC,KAAK,EAAE,mBAAmB;aAC7B,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,eAAe,CAAC,QAAQ,EAAE,EAAE,CAAC;iBACvD,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;iBACrB,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,MAAM,aAAa,GAAG,KAAK,CAAC;YAC5B,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC3D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,YAAY,GAAG,kBAAkB,CAAC;YACxC,MAAM,WAAW,GAAG,kBAAkB,CAAC;YACvC,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC;gBACxC,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;gBACZ,eAAe,EAAE,OAAO;gBACxB,cAAc,EAAE,MAAM;aACzB,CAAC,CAAC;YAEH,MAAM,YAAY,GAAG;gBACjB,WAAW,EAAE,UAAU,CAAC,QAAQ,EAAE;gBAClC,UAAU,EAAE,iBAAiB,CAAC,QAAQ;gBACtC,UAAU,EAAE,iBAAiB,CAAC,UAAU;gBACxC,MAAM,EAAE,YAAY,EAAE,mBAAmB;aAC5C,CAAC;YAEF,SAAS,CAAC,KAAK,CAAC,GAAG,cAAc,gBAAgB,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE;gBACxE,GAAG,YAAY;gBACf,WAAW,EAAE,YAAY,CAAC,QAAQ,EAAE;gBACpC,KAAK,EAAE,mBAAmB;aAC7B,CAAC,CAAC;YACH,SAAS,CAAC,KAAK,CAAC,GAAG,cAAc,gBAAgB,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE;gBACxE,GAAG,YAAY;gBACf,WAAW,EAAE,WAAW,CAAC,QAAQ,EAAE;gBACnC,KAAK,EAAE,mBAAmB;aAC7B,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,eAAe,CAAC,QAAQ,EAAE,EAAE,CAAC;iBACvD,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;iBACrB,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,MAAM,aAAa,GAAG,GAAG,CAAC;YAC1B,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC3D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+EAA+E,EAAE,KAAK,IAAI,EAAE;YAC3F,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,YAAY,GAAG,kBAAkB,CAAC;YACxC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;gBACZ,eAAe,EAAE,OAAO;gBACxB,cAAc,EAAE,MAAM;aACzB,CAAC,CAAC;YAEH,SAAS,CAAC,KAAK,CAAC,GAAG,cAAc,gBAAgB,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE;gBACxE,WAAW,EAAE,YAAY,CAAC,QAAQ,EAAE;gBACpC,WAAW,EAAE,UAAU,CAAC,QAAQ,EAAE;gBAClC,UAAU,EAAE,iBAAiB,CAAC,QAAQ;gBACtC,UAAU,EAAE,iBAAiB,CAAC,UAAU;gBACxC,MAAM,EAAE,GAAG,EAAE,kBAAkB;aAClC,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;iBACrB,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC5D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;YAChF,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;gBACZ,eAAe,EAAE,OAAO;gBACxB,cAAc,EAAE,MAAM;aACzB,CAAC,CAAC;YACH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,GAAG,CAAC,YAAY,EAAE,aAAa,CAAC;iBAChC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;YAC1F,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;gBACZ,eAAe,EAAE,OAAO;gBACxB,cAAc,EAAE,MAAM;aACzB,CAAC,CAAC;YACH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,GAAG,CAAC;iBACvB,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+EAA+E,EAAE,KAAK,IAAI,EAAE;YAC3F,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;gBACZ,eAAe,EAAE,OAAO;gBACxB,cAAc,EAAE,MAAM;aACzB,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,YAAY,CAAC;iBAChC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAC9D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2EAA2E,EAAE,KAAK,IAAI,EAAE;YACvF,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,KAAK;gBAChB,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;gBACZ,eAAe,EAAE,OAAO;gBACxB,cAAc,EAAE,MAAM;aACzB,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAC9D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CACxD,2DAA2D,CAC9D,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;aACf,CAAC,CAAC;YACH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;aACf,CAAC,CAAC;YACH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;YAC1F,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,MAAM;gBACjB,YAAY;aACf,CAAC,CAAC;YACH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mEAAmE,EAAE,KAAK,IAAI,EAAE;YAC/E,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,aAAa,GAAG,kBAAkB,CAAC;YACzC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,aAAa;gBACxB,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;gBACZ,eAAe,EAAE,OAAO;gBACxB,cAAc,EAAE,MAAM;aACzB,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAC9D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CACxD,SAAS,aAAa,2BAA2B,CACpD,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,oFAAoF,EAAE,KAAK,IAAI,EAAE;YAChG,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,sBAAsB,GAAG,CAAC,CAAC;YAEjC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;gBACZ,eAAe,EAAE,OAAO;gBACxB,cAAc,EAAE,MAAM;aACzB,CAAC,CAAC;YAEH,MAAM,YAAY,GAAG;gBACjB,UAAU,EAAE,iBAAiB,CAAC,QAAQ;gBACtC,UAAU,EAAE,iBAAiB,CAAC,UAAU;gBACxC,MAAM,EAAE,YAAY,EAAE,mBAAmB;aAC5C,CAAC;YAEF,SAAS,CAAC,KAAK,CAAC,GAAG,cAAc,gBAAgB,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE;gBACxE,GAAG,YAAY;gBACf,WAAW,EAAE,sBAAsB;gBACnC,WAAW,EAAE,sBAAsB;gBACnC,KAAK,EAAE,mBAAmB;aAC7B,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;iBACrB,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC5D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,SAAS,GAAG,kBAAkB,CAAC;YACrC,MAAM,YAAY,GAAG,kBAAkB,CAAC;YACxC,MAAM,WAAW,GAAG,kBAAkB,CAAC;YACvC,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC;gBACxC,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,MAAM;gBACjB,SAAS,EAAE,SAAS,CAAC,QAAQ,EAAE;gBAC/B,YAAY;gBACZ,eAAe,EAAE,MAAM;gBACvB,cAAc,EAAE,MAAM;aACzB,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG;gBACZ,MAAM,EAAE,mCAAmC;gBAC3C,YAAY,EAAE,aAAa;gBAC3B,kBAAkB,EAAE,aAAa;aACpC,CAAC;YAEF,MAAM,YAAY,GAAG;gBACjB,WAAW,EAAE,SAAS,CAAC,QAAQ,EAAE;gBACjC,UAAU,EAAE,iBAAiB,CAAC,QAAQ;gBACtC,UAAU,EAAE,iBAAiB,CAAC,UAAU;gBACxC,MAAM,EAAE,YAAY,EAAE,mBAAmB;aAC5C,CAAC;YAEF,SAAS,CAAC,KAAK,CAAC,GAAG,cAAc,gBAAgB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE;gBACrF,GAAG,YAAY;gBACf,WAAW,EAAE,YAAY,CAAC,QAAQ,EAAE;gBACpC,KAAK,EAAE,mBAAmB;aAC7B,CAAC,CAAC;YACH,SAAS,CAAC,KAAK,CAAC,GAAG,cAAc,gBAAgB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE;gBACrF,GAAG,YAAY;gBACf,WAAW,EAAE,WAAW,CAAC,QAAQ,EAAE;gBACnC,KAAK,EAAE,mBAAmB;aAC7B,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,eAAe,CAAC,QAAQ,EAAE,EAAE,CAAC;iBACvD,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;iBACrB,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,MAAM,aAAa,GAAG,KAAK,CAAC;YAC5B,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YACvD,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,oBAAY,CAAC,QAAQ,CAAC,CAAC;YAC9D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAC/D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACnE,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uFAAuF,EAAE,KAAK,IAAI,EAAE;YACnG,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,YAAY,GAAG,kBAAkB,CAAC;YACxC,MAAM,WAAW,GAAG,kBAAkB,CAAC;YACvC,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC;gBACxC,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;gBACZ,eAAe,EAAE,MAAM;gBACvB,cAAc,EAAE,MAAM;aACzB,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG;gBACZ,MAAM,EAAE,mCAAmC;gBAC3C,YAAY,EAAE,aAAa;gBAC3B,kBAAkB,EAAE,aAAa;aACpC,CAAC;YAEF,MAAM,YAAY,GAAG;gBACjB,WAAW,EAAE,UAAU,CAAC,QAAQ,EAAE;gBAClC,UAAU,EAAE,iBAAiB,CAAC,QAAQ;gBACtC,UAAU,EAAE,iBAAiB,CAAC,UAAU;gBACxC,MAAM,EAAE,YAAY,EAAE,mBAAmB;aAC5C,CAAC;YAEF,SAAS,CAAC,KAAK,CAAC,GAAG,cAAc,gBAAgB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE;gBACrF,GAAG,YAAY;gBACf,WAAW,EAAE,YAAY,CAAC,QAAQ,EAAE;gBACpC,KAAK,EAAE,mBAAmB;aAC7B,CAAC,CAAC;YACH,SAAS,CAAC,KAAK,CAAC,GAAG,cAAc,gBAAgB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE;gBACrF,GAAG,YAAY;gBACf,WAAW,EAAE,WAAW,CAAC,QAAQ,EAAE;gBACnC,KAAK,EAAE,mBAAmB;aAC7B,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,eAAe,CAAC,QAAQ,EAAE,EAAE,CAAC;iBACvD,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;iBACrB,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,MAAM,aAAa,GAAG,GAAG,CAAC;YAC1B,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YACvD,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,oBAAY,CAAC,QAAQ,CAAC,CAAC;YAC9D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAC/D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACnE,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iHAAiH,EAAE,KAAK,IAAI,EAAE;YAC7H,IAAA,iBAAI,EAAC,sBAAsB,CAAC,iBAAiB,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,WAAW,CAC1F,IAAI,iBAAS,CAAC,CAAC,CAAC,CACnB,CAAC;YACF,IAAA,iBAAI,EAAC,sBAAsB,CAAC,uBAAuB,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,WAAW,CAChG,kDAAsC,CACzC,CAAC;YAEF,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,YAAY,GAAG,kBAAkB,CAAC;YACxC,MAAM,WAAW,GAAG,kBAAkB,CAAC;YACvC,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC;gBACxC,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;gBACZ,aAAa,EAAE,MAAM;aACxB,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG;gBACZ,MAAM,EAAE,mCAAmC;gBAC3C,YAAY,EAAE,aAAa;gBAC3B,kBAAkB,EAAE,aAAa;aACpC,CAAC;YAEF,MAAM,YAAY,GAAG;gBACjB,WAAW,EAAE,UAAU,CAAC,QAAQ,EAAE;gBAClC,UAAU,EAAE,iBAAiB,CAAC,QAAQ;gBACtC,UAAU,EAAE,iBAAiB,CAAC,UAAU;gBACxC,MAAM,EAAE,YAAY,EAAE,mBAAmB;aAC5C,CAAC;YAEF,SAAS,CAAC,KAAK,CAAC,GAAG,cAAc,gBAAgB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE;gBACrF,GAAG,YAAY;gBACf,WAAW,EAAE,YAAY,CAAC,QAAQ,EAAE;gBACpC,KAAK,EAAE,mBAAmB;aAC7B,CAAC,CAAC;YACH,SAAS,CAAC,KAAK,CAAC,GAAG,cAAc,gBAAgB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE;gBACrF,GAAG,YAAY;gBACf,WAAW,EAAE,WAAW,CAAC,QAAQ,EAAE;gBACnC,KAAK,EAAE,mBAAmB;aAC7B,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,eAAe,CAAC,QAAQ,EAAE,EAAE,CAAC;iBACvD,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;iBACrB,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,MAAM,aAAa,GAAG,GAAG,CAAC;YAC1B,MAAM,gBAAgB,GAAG;gBACrB,UAAU,EAAE,IAAI;gBAChB,kBAAkB,EAAE,IAAI;gBACxB,IAAI,EAAE,kDAAsC,CAAC,IAAI;gBACjD,MAAM,EAAE,kDAAsC,CAAC,MAAM;aACxD,CAAC;YACF,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YACvD,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,oBAAY,CAAC,QAAQ,CAAC,CAAC;YAC9D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAC/D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACnE,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;gBACZ,eAAe,EAAE,OAAO;gBACxB,cAAc,EAAE,MAAM;aACzB,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YACxE,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;aACpC,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;aACf,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,UAAU,GAAG,kBAAkB,CAAC;YACtC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY;aACf,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;YAC1F,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;gBAC/B,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,MAAM;gBACjB,YAAY;aACf,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,GAAG,CAAC,GAAG,qBAAS,UAAU,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;iBAC9C,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC5B,MAAM,aAAa,GAAc;YAC7B,KAAK,EAAE,OAAO;YACd,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,OAAO;SAChB,CAAC;QACF,MAAM,eAAe,GAAmB;YACpC,IAAI,EAAE,sBAAc,CAAC,GAAG;YACxB,KAAK,EAAE;gBACH,OAAO,EAAE,MAAM;gBACf,cAAc,EAAE,yBAAQ,CAAC,oBAAoB,CACzC,IAAI,iBAAS,CAAC,WAAW,CAAC,EAC1B,gBAAI,EACJ,IAAI,iBAAS,CAAC,WAAW,CAAC,CAC7B,CAAC,QAAQ,EAAE;gBACZ,KAAK,EAAE,OAAO;gBACd,WAAW,EAAE,GAAG;gBAChB,UAAU,EAAE,OAAO;gBACnB,KAAK,EAAE,OAAO;gBACd,WAAW,EAAE,GAAG;gBAChB,UAAU,EAAE,OAAO;gBACnB,QAAQ,EAAE,OAAO;gBACjB,iBAAiB,EAAE,OAAO;aAC7B;SACJ,CAAC;QACF,iBAAiB;QACjB,MAAM,oBAAoB,GAAG,4CAA4C,CAAC;QAC1E,MAAM,uBAAuB,GAAG,oEAAoE,CAAC;QAErG,WAAW;QACX,MAAM,kBAAkB,GAAmB;YACvC,IAAI,EAAE,sBAAc,CAAC,GAAG;YACxB,KAAK,EAAE;gBACH,QAAQ,EAAE,OAAO;gBACjB,KAAK,EAAE,OAAO;gBACd,KAAK,EAAE,oBAAoB;gBAC3B,UAAU,EAAE,OAAO;gBACnB,UAAU,EAAE,OAAO;gBACnB,WAAW,EAAE,GAAG;gBAChB,WAAW,EAAE,GAAG;gBAChB,cAAc,EAAE,yBAAQ,CAAC,oBAAoB,CACzC,IAAI,iBAAS,CAAC,WAAW,CAAC,EAC1B,gBAAI,EACJ,IAAI,iBAAS,CAAC,WAAW,CAAC,CAC7B,CAAC,QAAQ,EAAE;gBACZ,OAAO,EAAE,MAAM;gBACf,iBAAiB,EAAE,OAAO;aAC7B;SACJ,CAAC;QACF,MAAM,QAAQ,GAAG,IAAA,wCAAwB,EAAC,kBAAkB,CAAC,CAAC;QAC9D,EAAE,CAAC,oFAAoF,EAAE,KAAK,IAAI,EAAE;YAChG,WAAW;YACX,MAAM,KAAK,GAAG,QAAQ,CAAC;YACvB,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YAElC,kBAAkB;YAClB,MAAM,cAAc,GAAG,IAAA,mCAAkB,EAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC;YAE9E,MAAM,SAAS,GAAG,IAAI,4BAAiB,CAAC;gBACpC,SAAS;gBACT,QAAQ,EAAE,cAAc;gBACxB,GAAG,EAAE,aAAa;gBAClB,KAAK,EAAE,kBAAkB;gBACzB,OAAO,EAAE,IAAI;gBACb,gBAAgB,EAAE,oCAAwB;gBAC1C,kBAAkB,EAAE,YAAY;aACnC,CAAC,CAAC;YAEH,yDAAyD;YACzD,MAAM,UAAU,CAAC,aAAa,CAAC,4BAAiB,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAEpE,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,IAAI,CAAC,GAAG,qBAAS,SAAS,CAAC;iBAC3B,IAAI,CAAC,EAAE,IAAI,EAAE,oBAAY,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,cAAc,EAAE,CAAC;iBACvE,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC;iBAC1B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAEvD,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,aAAa,CAAC,0BAAe,CAAC,CAAC,OAAO,CAAC;gBACxE,KAAK,EAAE;oBACH,SAAS;iBACZ;aACJ,CAAC,CAAC;YACH,IAAA,aAAM,EAAC,WAAW,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACvC,IAAA,aAAM,EAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAC7D,IAAA,aAAM,EAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YACvD,IAAA,aAAM,EAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,gBAAgB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,oCAAwB,CAAC,CAAC;YACzE,IAAA,aAAM,EAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,cAAc,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;YAC1F,MAAM,KAAK,GAAG,QAAQ,CAAC;YAEvB,kBAAkB;YAClB,MAAM,cAAc,GAAG,IAAA,mCAAkB,EAAC,KAAK,CAAC,OAAO,EAAE,EAAE,uBAAuB,CAAC,CAAC;YAEpF,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,IAAI,CAAC,GAAG,qBAAS,SAAS,CAAC;iBAC3B,IAAI,CAAC;gBACF,IAAI,EAAE,oBAAY,CAAC,QAAQ;gBAC3B,KAAK;gBACL,SAAS,EAAE,cAAc;aAC5B,CAAC;iBACD,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC;iBAC5B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;YAC7E,MAAM,WAAW,GAAG,QAAQ,CAAC;YAE7B,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,IAAI,CAAC,GAAG,qBAAS,SAAS,CAAC;iBAC3B,IAAI,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,eAAe,EAAE,SAAS,EAAE,sBAAsB,EAAE,CAAC;iBACtF,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAC9D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CACxD,GAAG,WAAW,iCAAiC,CAClD,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6EAA6E,EAAE,KAAK,IAAI,EAAE;YACzF,WAAW;YACX,MAAM,KAAK,GAAG,QAAQ,CAAC;YACvB,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YAElC,kBAAkB;YAClB,MAAM,cAAc,GAAG,IAAA,mCAAkB,EAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC;YAE9E,MAAM,SAAS,GAAG,IAAI,4BAAiB,CAAC;gBACpC,SAAS;gBACT,QAAQ,EAAE,cAAc;gBACxB,GAAG,EAAE,aAAa;gBAClB,KAAK,EAAE,kBAAkB;gBACzB,OAAO,EAAE,IAAI;gBACb,gBAAgB,EAAE,oCAAwB;gBAC1C,kBAAkB,EAAE,YAAY;aACnC,CAAC,CAAC;YAEH,yDAAyD;YACzD,MAAM,UAAU,CAAC,aAAa,CAAC,4BAAiB,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAEpE,MAAM,OAAO,CAAC,GAAG,CAAC;iBACb,IAAI,CAAC,GAAG,qBAAS,SAAS,CAAC;iBAC3B,IAAI,CAAC,EAAE,IAAI,EAAE,oBAAY,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,cAAc,EAAE,CAAC;iBACvE,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC;iBAC1B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,sBAAsB;YACtB,MAAM,OAAO,CAAC,GAAG,CAAC;iBACb,IAAI,CAAC,GAAG,qBAAS,SAAS,CAAC;iBAC3B,IAAI,CAAC,EAAE,IAAI,EAAE,oBAAY,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,cAAc,EAAE,CAAC;iBACvE,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,qBAAqB,CAAC;iBACxC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6EAA6E,EAAE,KAAK,IAAI,EAAE;YACzF,MAAM,KAAK,GAAG,IAAI,yBAAQ,CAAC;gBACvB,GAAG,QAAQ;gBACX,cAAc,EAAE,yBAAQ,CAAC,oBAAoB,CAAC,gBAAI,EAAE,gBAAI,EAAE,gBAAI,CAAC;aAClE,CAAC,CAAC;YACH,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YAElC,MAAM,SAAS,GAAG,IAAI,4BAAiB,CAAC;gBACpC,SAAS;gBACT,QAAQ,EAAE,cAAc;gBACxB,GAAG,EAAE,aAAa;gBAClB,KAAK,EAAE,kBAAkB;gBACzB,OAAO,EAAE,IAAI;gBACb,gBAAgB,EAAE,oCAAwB;gBAC1C,kBAAkB,EAAE,YAAY;aACnC,CAAC,CAAC;YAEH,MAAM,UAAU,CAAC,aAAa,CAAC,4BAAiB,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAEpE,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,IAAI,CAAC,GAAG,qBAAS,SAAS,CAAC;iBAC3B,IAAI,CAAC,EAAE,IAAI,EAAE,oBAAY,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,sBAAsB,EAAE,CAAC;iBAC/E,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAC9D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAC/F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM,KAAK,GAAG,QAAQ,CAAC;YACvB,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YAElC,MAAM,SAAS,GAAG,IAAI,4BAAiB,CAAC;gBACpC,SAAS;gBACT,QAAQ,EAAE,cAAc;gBACxB,GAAG,EAAE,aAAa;gBAClB,KAAK,EAAE,kBAAkB;gBACzB,OAAO,EAAE,IAAI;gBACb,gBAAgB,EAAE,oCAAwB;gBAC1C,kBAAkB,EAAE,YAAY;aACnC,CAAC,CAAC;YAEH,MAAM,UAAU,CAAC,aAAa,CAAC,4BAAiB,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAEpE,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,IAAI,CAAC,GAAG,qBAAS,SAAS,CAAC;iBAC3B,IAAI,CAAC,EAAE,IAAI,EAAE,oBAAY,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,sBAAsB,EAAE,CAAC;iBAC/E,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAC9D,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;QAC3F,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC1C,MAAM,aAAa,GAAc;YAC7B,KAAK,EAAE,OAAO;YACd,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,OAAO;SAChB,CAAC;QAEF,iBAAiB;QACjB,MAAM,oBAAoB,GAAG,4CAA4C,CAAC;QAC1E,MAAM,uBAAuB,GAAG,oEAAoE,CAAC;QAErG,WAAW;QACX,MAAM,kBAAkB,GAAmB;YACvC,IAAI,EAAE,sBAAc,CAAC,GAAG;YACxB,KAAK,EAAE;gBACH,QAAQ,EAAE,OAAO;gBACjB,KAAK,EAAE,OAAO;gBACd,KAAK,EAAE,oBAAoB;gBAC3B,UAAU,EAAE,OAAO;gBACnB,UAAU,EAAE,OAAO;gBACnB,WAAW,EAAE,GAAG;gBAChB,WAAW,EAAE,GAAG;gBAChB,cAAc,EAAE,yBAAQ,CAAC,oBAAoB,CACzC,IAAI,iBAAS,CAAC,WAAW,CAAC,EAC1B,gBAAI,EACJ,IAAI,iBAAS,CAAC,WAAW,CAAC,CAC7B,CAAC,QAAQ,EAAE;gBACZ,OAAO,EAAE,MAAM;gBACf,iBAAiB,EAAE,OAAO;aAC7B;SACJ,CAAC;QAEF,WAAW;QACX,MAAM,QAAQ,GAAG;YACb,IAAI,EAAE,gCAAoB,CAAC,IAAI;YAC/B,MAAM,EAAE,gCAAoB,CAAC,MAAM;SACtC,CAAC;QACF,MAAM,QAAQ,GAAG,IAAA,wCAAwB,EAAC,kBAAkB,CAAC,CAAC;QAC9D,EAAE,CAAC,oFAAoF,EAAE,KAAK,IAAI,EAAE;;YAChG,WAAW;YACX,MAAM,KAAK,GAAG,QAAQ,CAAC;YACvB,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YAElC,kBAAkB;YAClB,MAAM,cAAc,GAAG,IAAA,mCAAkB,EAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC;YAE9E,qBAAqB;YACrB,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;YAC1D,MAAM,SAAS,GAA+B,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YAC3E,OAAO,SAAS,CAAC,YAAY,CAAC;YAC9B,MAAM,oBAAoB,GAAG,MAAM,MAAM,CAAC,cAAc,CACpD,QAAQ,CAAC,MAAM,CAAC,MAAM;YACtB,6DAA6D;YAC7D,8DAA8D;YAC9D,SAAgB,EAChB,QAAQ,CAAC,MAAM,CAAC,OAAO,CAC1B,CAAC;YACF,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,eAAM,CAAC,KAAK,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAAC;YACtE,MAAM,iBAAiB,GAAG;gBACtB,CAAC;gBACD,CAAC;gBACD,CAAC;gBACD,aAAa,EAAE,CAAC;aACnB,CAAC;YAEF,MAAM,SAAS,GAAG,IAAI,4BAAiB,CAAC;gBACpC,SAAS;gBACT,QAAQ,EAAE,cAAc;gBACxB,GAAG,EAAE,aAAa;gBAClB,KAAK,EAAE,kBAAkB;gBACzB,OAAO,EAAE,IAAI;gBACb,gBAAgB,EAAE,oCAAwB;gBAC1C,kBAAkB,EAAE,YAAY;aACnC,CAAC,CAAC;YAEH,yDAAyD;YACzD,MAAM,UAAU,CAAC,aAAa,CAAC,4BAAiB,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAEpE,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBACjC,IAAI,CAAC,GAAG,qBAAS,uBAAuB,CAAC;iBACzC,IAAI,CAAC;gBACF,KAAK,EAAE,EAAE,IAAI,EAAE,oBAAY,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,cAAc,EAAE;gBACxE,QAAQ,EAAE;oBACN,IAAI,EAAE,4BAAoB,CAAC,MAAM;oBACjC,MAAM,EAAE,QAAQ,CAAC,MAAM;oBACvB,SAAS,EAAE,iBAAiB;iBAC/B;aACJ,CAAC;iBACD,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC;iBAC1B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAEvD,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,aAAa,CAAC,0BAAe,CAAC,CAAC,OAAO,CAAC;gBACxE,KAAK,EAAE;oBACH,SAAS;iBACZ;aACJ,CAAC,CAAC;YAEH,IAAA,aAAM,EAAC,WAAW,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACvC,IAAA,aAAM,EAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAC7D,IAAA,aAAM,EAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YACvD,IAAA,aAAM,EAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,gBAAgB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,oCAAwB,CAAC,CAAC;YACzE,IAAA,aAAM,EAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,cAAc,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC;YAC/D,IAAA,aAAM,EAAC,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,0CAAE,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAClE,IAAA,aAAM,EAAC,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,0CAAE,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC9D,IAAA,aAAM,EAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,iBAAiB,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,iBAAiB,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;YACpE,MAAM,SAAS,GAAG,MAAM,CAAC;YACzB,OAAO,OAAO,CAAC,GAAG,CAAC;iBACd,GAAG,CAAC,GAAG,qBAAS,WAAW,SAAS,EAAE,CAAC;iBACvC,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,OAAO,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAE7C,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC9B,GAAG,CAAC,GAAG,qBAAS,WAAW,aAAa,CAAC,SAAS,EAAE,CAAC;iBACrD,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;iBACrB,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,sFAAsF;YACtF,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,OAAO,CAAC,eAAe,CAAC;gBAC1B,GAAG,aAAa;gBAChB,MAAM,EAAE,qBAAa,CAAC,uBAAuB;aAChD,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC9B,GAAG,CAAC,GAAG,qBAAS,WAAW,aAAa,CAAC,SAAS,EAAE,CAAC;iBACrD,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;iBAC1B,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;iBAC1B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;iBACrB,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,sFAAsF;YACtF,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;YACtE,MAAM,SAAS,GAAG,MAAM,CAAC;YACzB,OAAO,OAAO,CAAC,GAAG,CAAC;iBACd,IAAI,CAAC,GAAG,sBAAU,UAAU,CAAC;iBAC7B,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC;iBAClC,GAAG,CAAC,kBAAkB,EAAE,aAAa,CAAC;iBACtC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YACzE,MAAM,OAAO,CAAC,GAAG,CAAC;iBACb,IAAI,CAAC,GAAG,sBAAU,UAAU,CAAC;iBAC7B,IAAI,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;iBACzB,GAAG,CAAC,kBAAkB,EAAE,aAAa,CAAC;iBACtC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,OAAO,CAAC,eAAe,CAAC,EAAE,GAAG,aAAa,EAAE,MAAM,EAAE,qBAAa,CAAC,kBAAkB,EAAE,CAAC,CAAC;YAC9F,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC9B,IAAI,CAAC,GAAG,sBAAU,UAAU,CAAC;iBAC7B,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,CAAC;iBAChD,GAAG,CAAC,kBAAkB,EAAE,aAAa,CAAC;iBACtC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;YACjF,MAAM,OAAO,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAC7C,MAAM,SAAS,GAAG,aAAa,CAAC;YAEhC,OAAO,OAAO,CAAC,GAAG,CAAC;iBACd,IAAI,CAAC,GAAG,sBAAU,UAAU,CAAC;iBAC7B,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,CAAC;iBAChD,GAAG,CAAC,kBAAkB,EAAE,SAAS,CAAC;iBAClC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sEAAsE,EAAE,KAAK,IAAI,EAAE;YAClF,MAAM,OAAO,CAAC,eAAe,CAAC;gBAC1B,GAAG,aAAa;gBAChB,MAAM,EAAE,IAAI,iBAAS,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,KAAM,CAAC,CAAC,SAAS,CAAC,yBAAa,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;aACvF,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC9B,IAAI,CAAC,GAAG,sBAAU,UAAU,CAAC;iBAC7B,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,CAAC;iBAChD,GAAG,CAAC,kBAAkB,EAAE,aAAa,CAAC;iBACtC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;iBACrB,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0EAA0E,EAAE,KAAK,IAAI,EAAE;YACtF,MAAM,OAAO,CAAC,eAAe,CAAC;gBAC1B,GAAG,aAAa;gBAChB,MAAM,EAAE,qBAAa,CAAC,kBAAkB;gBACxC,SAAS,EAAE,MAAM;aACpB,CAAC,CAAC;YACH,MAAM,OAAO,CAAC,eAAe,CAAC;gBAC1B,GAAG,aAAa;gBAChB,MAAM,EAAE,IAAI,iBAAS,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,KAAM,CAAC,CAAC,SAAS,CAAC,yBAAa,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBACpF,SAAS,EAAE,MAAM;aACpB,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC9B,IAAI,CAAC,GAAG,sBAAU,UAAU,CAAC;iBAC7B,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC;iBACvC,GAAG,CAAC,kBAAkB,EAAE,aAAa,CAAC;iBACtC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAErC,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACzD,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/rfqm_test.ts"],"sourcesContent":["// tslint:disable:max-file-line-count custom-no-magic-numbers\nimport { ContractAddresses } from '@0x/contract-addresses';\nimport { ethSignHashWithKey, MetaTransaction, OtcOrder, SignatureType } from '@0x/protocol-utils';\nimport { BigNumber } from '@0x/utils';\nimport { Web3Wrapper } from '@0x/web3-wrapper';\nimport Axios, { AxiosInstance } from 'axios';\nimport AxiosMockAdapter from 'axios-mock-adapter';\nimport { expect } from 'chai';\nimport { TransactionReceiptStatus } from 'ethereum-types';\nimport { BigNumber as EthersBigNumber, ethers } from 'ethers';\nimport { Server } from 'http';\nimport * as HttpStatus from 'http-status-codes';\nimport Redis from 'ioredis';\nimport { Producer } from 'sqs-producer';\nimport * as request from 'supertest';\nimport { anyString, anything, deepEqual, instance, mock, when } from 'ts-mockito';\nimport { DataSource } from 'typeorm';\n\nimport * as config from '../src/config';\nimport {\n    ADMIN_PATH,\n    DEFAULT_MIN_EXPIRY_DURATION_MS,\n    ETH_DECIMALS,\n    ONE_MINUTE_MS,\n    ONE_SECOND_MS,\n    RFQM_PATH,\n    ZERO,\n} from '../src/core/constants';\nimport { RfqmV2JobEntity, RfqmV2QuoteEntity } from '../src/entities';\nimport { RfqmJobStatus, RfqmOrderTypes, StoredOtcOrder } from '../src/entities/types';\nimport {\n    buildRfqAdminService,\n    buildRfqMakerService,\n    runHttpRfqmServiceAsync,\n} from '../src/runners/http_rfqm_service_runner';\nimport { FeeService } from '../src/services/fee_service';\nimport { RfqmService } from '../src/services/rfqm_service';\nimport { RfqMakerBalanceCacheService } from '../src/services/rfq_maker_balance_cache_service';\nimport { GaslessApprovalTypes, GaslessTypes, PermitEip712Types, StoredFee } from '../src/core/types';\nimport { CacheClient } from '../src/utils/cache_client';\nimport { ConfigManager } from '../src/utils/config_manager';\nimport { QuoteServerClient } from '../src/utils/quote_server_client';\nimport { RfqmDbUtils, storedOtcOrderToOtcOrder } from '../src/utils/rfqm_db_utils';\nimport { RfqBlockchainUtils } from '../src/utils/rfq_blockchain_utils';\nimport { RfqMakerDbUtils } from '../src/utils/rfq_maker_db_utils';\nimport { RfqMakerManager } from '../src/utils/rfq_maker_manager';\nimport { BLOCK_FINALITY_THRESHOLD } from '../src/utils/SubmissionContext';\nimport { TokenMetadataManager } from '../src/utils/TokenMetadataManager';\n\nimport {\n    CONTRACT_ADDRESSES,\n    getProvider,\n    MATCHA_AFFILIATE_ADDRESS,\n    MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\n    MOCK_PERMIT_APPROVAL,\n    TEST_DECODED_RFQ_ORDER_FILLED_EVENT_LOG,\n    TEST_RFQ_ORDER_FILLED_EVENT_LOG,\n} from './constants';\nimport { setupDependenciesAsync, TeardownDependenciesFunctionHandle } from './test_utils/deployment';\nimport { initDbDataSourceAsync } from './test_utils/initDbDataSourceAsync';\n\nconst MOCK_WORKER_REGISTRY_ADDRESS = '0x1023331a469c6391730ff1E2749422CE8873EC38';\nconst API_KEY = 'koolApiKey';\nconst ADMIN_API_KEY = 'adminApiKey';\nconst INTEGRATOR_ID = 'koolIntegratorId';\nconst contractAddresses: ContractAddresses = CONTRACT_ADDRESSES;\nconst WORKER_FULL_BALANCE_WEI = new BigNumber(1).shiftedBy(ETH_DECIMALS);\n\n// RFQM Market Maker request specific constants\nconst MARKET_MAKER_1 = 'https://mock-rfqt1.club';\nconst MARKET_MAKER_2 = 'https://mock-rfqt2.club';\nconst MARKET_MAKER_3 = 'https://mock-rfqt3.club';\nconst MARKET_MAKER_2_ADDR = '0xbEA29fE10caed0E1a65A7AdBddd254dD372e83Ff';\nconst MARKET_MAKER_3_ADDR = '0xA84f003D3a6F62c5dF218c7fb7b0EFB766b5AC07';\nconst GAS_PRICE = new BigNumber(100);\n\nconst MOCK_META_TX_CALL_DATA = '0x123';\nconst RANDOM_VALID_SIGNATURE = {\n    r: '0x72ba2125d4efe1f9cc77882138ed94cbd485f8897fe6d9fe34854906634fc59d',\n    s: '0x1e19d3d29ab2855debc62a1df98a727673b8bf31c4da3a391a6eaea465920ff2',\n    v: 27,\n    signatureType: SignatureType.EthSign,\n};\nconst SAFE_EXPIRY = '1903620548';\nconst GAS_ESTIMATE = 165000;\nconst WORKER_ADDRESS = '0xaWorkerAddress';\nconst FIRST_TRANSACTION_HASH = '0xfirstTxHash';\nconst FIRST_SIGNED_TRANSACTION = '0xfirstSignedTransaction';\nconst TX_STATUS: TransactionReceiptStatus = 1;\n// it's over 9K\nconst MINED_BLOCK = 9001;\n// the tx should be finalized\nconst CURRENT_BLOCK = MINED_BLOCK + BLOCK_FINALITY_THRESHOLD;\nconst MOCK_EXCHANGE_PROXY = '0xtheExchangeProxy';\nconst SUCCESSFUL_TRANSACTION_RECEIPT = {\n    blockHash: '0xaBlockHash',\n    blockNumber: MINED_BLOCK,\n    byzantium: true,\n    confirmations: 2,\n    contractAddress: '',\n    cumulativeGasUsed: EthersBigNumber.from(150000),\n    effectiveGasPrice: EthersBigNumber.from(1000),\n    from: WORKER_ADDRESS,\n    gasUsed: EthersBigNumber.from(GAS_ESTIMATE),\n    logs: [TEST_RFQ_ORDER_FILLED_EVENT_LOG],\n    logsBloom: '',\n    status: TX_STATUS,\n    to: MOCK_EXCHANGE_PROXY,\n    transactionHash: FIRST_TRANSACTION_HASH,\n    transactionIndex: 5,\n    type: 2,\n};\n\nconst MOCK_RFQM_JOB = new RfqmV2JobEntity({\n    chainId: 1337,\n    createdAt: new Date(),\n    expiry: new BigNumber(Date.now()),\n    fee: {\n        amount: '1000',\n        token: '0x123',\n        type: 'fixed',\n    },\n    integratorId: null,\n    makerUri: MARKET_MAKER_1,\n    order: {\n        order: {\n            chainId: '1337',\n            expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\n                new BigNumber(SAFE_EXPIRY),\n                ZERO,\n                new BigNumber(SAFE_EXPIRY),\n            ).toString(),\n            maker: '0x123',\n            makerAmount: '1',\n            makerToken: '0x123',\n            taker: '0x123',\n            takerAmount: '1',\n            takerToken: '0x123',\n            txOrigin: '0x123',\n            verifyingContract: '0x123',\n        },\n        type: RfqmOrderTypes.Otc,\n    },\n    orderHash: '0x288d4d771179738ee9ca60f14df74612fb1ca43dfbc3bbb49dd9226a19747c11',\n    status: RfqmJobStatus.PendingSubmitted,\n    updatedAt: new Date(),\n    workerAddress: null,\n    lastLookResult: null,\n    affiliateAddress: MATCHA_AFFILIATE_ADDRESS,\n    takerSpecifiedSide: 'makerToken',\n});\n\njest.setTimeout(ONE_MINUTE_MS * 2);\nlet teardownDependencies: TeardownDependenciesFunctionHandle;\n\ndescribe('RFQM Integration', () => {\n    let app: Express.Application;\n    let axiosClient: AxiosInstance;\n    let cacheClient: CacheClient;\n    let dataSource: DataSource;\n    let dbUtils: RfqmDbUtils;\n    let mockAxios: AxiosMockAdapter;\n    let rfqBlockchainUtilsMock: RfqBlockchainUtils;\n    let rfqmServiceChainId1337: RfqmService;\n    let rfqmServiceChainId3: RfqmService;\n    let server: Server;\n    let takerAddress: string;\n\n    beforeAll(async () => {\n        teardownDependencies = await setupDependenciesAsync(['postgres', 'ganache', 'redis']);\n\n        // Create a Provider\n        const provider = getProvider();\n        const web3Wrapper = new Web3Wrapper(provider);\n        [takerAddress] = await web3Wrapper.getAvailableAddressesAsync();\n\n        // Build dependencies\n        // Create the mock FeeService\n        const feeServiceMock = mock(FeeService);\n        when(feeServiceMock.getGasPriceEstimationAsync()).thenResolve(GAS_PRICE);\n        when(feeServiceMock.calculateFeeAsync(anything(), anything())).thenResolve({\n            feeWithDetails: {\n                token: '0xToken',\n                amount: new BigNumber(300),\n                type: 'fixed',\n                details: {\n                    feeModelVersion: 1,\n                    kind: 'default',\n                    gasFeeAmount: new BigNumber(100),\n                    gasPrice: GAS_PRICE,\n                    zeroExFeeAmount: new BigNumber(200),\n                    tradeSizeBps: 4,\n                    feeTokenBaseUnitPriceUsd: new BigNumber(30),\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: new BigNumber(20),\n                },\n                breakdown: {\n                    gas: {\n                        amount: new BigNumber(100),\n                        details: {\n                            gasPrice: GAS_PRICE,\n                            estimatedGas: new BigNumber(1),\n                        },\n                    },\n                    zeroEx: {\n                        amount: new BigNumber(200),\n                        details: {\n                            kind: 'volume',\n                            tradeSizeBps: 4,\n                        },\n                    },\n                },\n                conversionRates: {\n                    nativeTokenBaseUnitPriceUsd: new BigNumber(30),\n                    feeTokenBaseUnitPriceUsd: new BigNumber(30),\n                    takerTokenBaseUnitPriceUsd: null,\n                    makerTokenBaseUnitPriceUsd: new BigNumber(20),\n                },\n            },\n        });\n        const feeServiceInstance = instance(feeServiceMock);\n\n        // Create the mock ConfigManager\n        const configManagerMock = mock(ConfigManager);\n        when(configManagerMock.getAdminApiKey()).thenReturn(ADMIN_API_KEY);\n        when(configManagerMock.getRfqmApiKeyWhitelist()).thenReturn(new Set([API_KEY]));\n        when(configManagerMock.getIntegratorIdForApiKey(API_KEY)).thenReturn(INTEGRATOR_ID);\n        when(configManagerMock.getIntegratorByIdOrThrow(INTEGRATOR_ID)).thenReturn({\n            integratorId: INTEGRATOR_ID,\n            apiKeys: [API_KEY],\n            allowedChainIds: [1337],\n            label: 'Test',\n            rfqm: true,\n            plp: false,\n            rfqt: false,\n        });\n        const configManager = instance(configManagerMock);\n\n        // Create Axios client and mock\n        axiosClient = Axios.create();\n        mockAxios = new AxiosMockAdapter(axiosClient);\n\n        // Create the mock rfqBlockchainUtils\n        const validationResponse: [BigNumber, BigNumber] = [new BigNumber(1), new BigNumber(1)];\n        rfqBlockchainUtilsMock = mock(RfqBlockchainUtils);\n        when(\n            rfqBlockchainUtilsMock.generateMetaTransaction(anything(), anything(), anything(), anything(), anything()),\n        ).thenCall((_rfqOrder, _signature, _taker, _takerAmount, chainId) => new MetaTransaction({ chainId }));\n        when(rfqBlockchainUtilsMock.generateMetaTransactionCallData(anything(), anything(), anything())).thenReturn(\n            MOCK_META_TX_CALL_DATA,\n        );\n        when(\n            rfqBlockchainUtilsMock.validateMetaTransactionOrThrowAsync(anything(), anything(), anything(), anything()),\n        ).thenResolve(validationResponse);\n        when(rfqBlockchainUtilsMock.getTokenBalancesAsync(anything())).thenResolve([new BigNumber(1)]);\n        when(rfqBlockchainUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([new BigNumber(1)]);\n        when(rfqBlockchainUtilsMock.getNonceAsync(anything())).thenResolve(1);\n        when(rfqBlockchainUtilsMock.estimateGasForAsync(anything())).thenResolve(GAS_ESTIMATE);\n        when(rfqBlockchainUtilsMock.signTransactionAsync(anything())).thenResolve({\n            signedTransaction: FIRST_SIGNED_TRANSACTION,\n            transactionHash: FIRST_TRANSACTION_HASH,\n        });\n        when(rfqBlockchainUtilsMock.submitSignedTransactionAsync(FIRST_SIGNED_TRANSACTION)).thenResolve(\n            FIRST_TRANSACTION_HASH,\n        );\n        when(rfqBlockchainUtilsMock.getReceiptsAsync(deepEqual([FIRST_TRANSACTION_HASH]))).thenResolve([\n            SUCCESSFUL_TRANSACTION_RECEIPT,\n        ]);\n        when(rfqBlockchainUtilsMock.getCurrentBlockAsync()).thenResolve(CURRENT_BLOCK);\n        when(rfqBlockchainUtilsMock.getExchangeProxyAddress()).thenReturn(MOCK_EXCHANGE_PROXY);\n        when(\n            rfqBlockchainUtilsMock.decodeMetaTransactionCallDataAndValidateAsync(anyString(), anyString(), anything()),\n        ).thenResolve(validationResponse);\n        when(rfqBlockchainUtilsMock.getDecodedRfqOrderFillEventLogFromLogs(anything())).thenReturn(\n            TEST_DECODED_RFQ_ORDER_FILLED_EVENT_LOG,\n        );\n        when(rfqBlockchainUtilsMock.getAccountBalanceAsync(MOCK_WORKER_REGISTRY_ADDRESS)).thenResolve(\n            WORKER_FULL_BALANCE_WEI,\n        );\n        const rfqBlockchainUtils = instance(rfqBlockchainUtilsMock);\n\n        const tokenMetadataManagerMock = mock(TokenMetadataManager);\n        when(tokenMetadataManagerMock.getTokenDecimalsAsync(anything())).thenResolve(18);\n        const tokenMetadataManager = instance(tokenMetadataManagerMock);\n\n        interface SqsResponse {\n            Id: string;\n            MD5OfMessageBody: string;\n            MessageId: string;\n        }\n        const sqsResponse: SqsResponse[] = [\n            {\n                Id: 'id',\n                MD5OfMessageBody: 'MD5OfMessageBody',\n                MessageId: 'MessageId',\n            },\n        ];\n\n        // Create the dbUtils\n        dataSource = await initDbDataSourceAsync();\n        dbUtils = new RfqmDbUtils(dataSource);\n\n        // Create the mock sqsProducer\n        const sqsProducerMock = mock(Producer);\n        when(sqsProducerMock.send(anything())).thenResolve(sqsResponse);\n        when(sqsProducerMock.queueSize()).thenResolve(0);\n        const sqsProducer = instance(sqsProducerMock);\n\n        // Create the quote server client\n        const quoteServerClient = new QuoteServerClient(axiosClient);\n\n        // Create the CacheClient\n        const redis = new Redis();\n        cacheClient = new CacheClient(redis);\n\n        // Create the maker balance cache service\n        const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n        when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve(\n            [new BigNumber(200000000000000000)],\n            [new BigNumber(200000000000000000), new BigNumber(200000000000000000)],\n        );\n        const rfqMakerBalanceCacheService = instance(rfqMakerBalanceCacheServiceMock);\n\n        // Create the mock RfqMakerManager\n        const rfqMakerManagerMock = mock(RfqMakerManager);\n        when(\n            rfqMakerManagerMock.getRfqmV2MakerUrisForPair(anyString(), anyString(), anything(), anything()),\n        ).thenReturn([MARKET_MAKER_2, MARKET_MAKER_3]);\n        when(rfqMakerManagerMock.getRfqmV2MakerOfferings()).thenReturn({\n            'https://mock-rfqm1.club': [\n                ['0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c', '0x0b1ba0af832d7c05fd64161e0db78e85978e8082'],\n            ],\n        });\n        const rfqMakerManager = instance(rfqMakerManagerMock);\n        rfqmServiceChainId1337 = new RfqmService(\n            1337,\n            feeServiceInstance,\n            /* feeModelVersion */ 0,\n            contractAddresses,\n            MOCK_WORKER_REGISTRY_ADDRESS,\n            rfqBlockchainUtils,\n            dbUtils,\n            sqsProducer,\n            quoteServerClient,\n            DEFAULT_MIN_EXPIRY_DURATION_MS,\n            cacheClient,\n            rfqMakerBalanceCacheService,\n            rfqMakerManager,\n            tokenMetadataManager,\n        );\n\n        // Create another RFQM Service for chain ID 3 that returns 0 offering\n        const rfqMakerManagerChain3Mock = mock(RfqMakerManager);\n        when(rfqMakerManagerChain3Mock.getRfqmV2MakerOfferings()).thenReturn({\n            'https://mock-rfqm1.club': [],\n        });\n        const rfqMakerManagerChainId3 = instance(rfqMakerManagerChain3Mock);\n        rfqmServiceChainId3 = new RfqmService(\n            3,\n            feeServiceInstance,\n            /* feeModelVersion */ 0,\n            contractAddresses,\n            MOCK_WORKER_REGISTRY_ADDRESS,\n            rfqBlockchainUtils,\n            dbUtils,\n            sqsProducer,\n            quoteServerClient,\n            DEFAULT_MIN_EXPIRY_DURATION_MS,\n            cacheClient,\n            rfqMakerBalanceCacheService,\n            rfqMakerManagerChainId3,\n            tokenMetadataManager,\n        );\n\n        const rfqAdminService = buildRfqAdminService(dbUtils);\n        const rfqMakerService = buildRfqMakerService(new RfqMakerDbUtils(dataSource), configManager);\n\n        // Start the server\n        const res = await runHttpRfqmServiceAsync(\n            new Map([\n                [1337, rfqmServiceChainId1337],\n                [3, rfqmServiceChainId3],\n            ]),\n            new Map(),\n            rfqAdminService,\n            rfqMakerService,\n            configManager,\n            config.defaultHttpServiceConfig,\n            dataSource,\n            false,\n        );\n        app = res.app;\n        server = res.server;\n    });\n\n    afterEach(async () => {\n        await dataSource.query('TRUNCATE TABLE rfqm_quotes CASCADE;');\n        await dataSource.query('TRUNCATE TABLE rfqm_jobs CASCADE;');\n        await dataSource.query('TRUNCATE TABLE rfqm_transaction_submissions CASCADE;');\n        await dataSource.query('TRUNCATE TABLE rfqm_v2_quotes CASCADE;');\n        await dataSource.query('TRUNCATE TABLE rfqm_v2_jobs CASCADE;');\n        await dataSource.query('TRUNCATE TABLE rfqm_v2_transaction_submissions CASCADE;');\n    });\n\n    afterAll(async () => {\n        await new Promise<void>((resolve, reject) => {\n            server.close((err?: Error) => {\n                if (err) {\n                    reject(err);\n                }\n                resolve();\n            });\n        });\n        await cacheClient.closeAsync();\n        if (!teardownDependencies()) {\n            throw new Error('Failed to tear down dependencies');\n        }\n    });\n\n    describe('rfqm/v1/healthz', () => {\n        it('should return a 200 OK with active pairs', async () => {\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/healthz`)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.OK)\n                .expect('Content-Type', /json/);\n            expect(appResponse.body.pairs[0][0]).to.equal('0x0b1ba0af832d7c05fd64161e0db78e85978e8082');\n            expect(appResponse.body.pairs[0][1]).to.equal('0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c');\n        });\n\n        // This test is to cover this issue: https://github.com/0xProject/0x-rfq-api/pull/200\n        it('should return correct values for different chains', async () => {\n            const chainId3HealthzResponse = await request(app)\n                .get(`${RFQM_PATH}/healthz`)\n                .set('0x-chain-id', '3')\n                .expect(HttpStatus.OK)\n                .expect('Content-Type', /json/);\n            // tslint:disable-next-line: no-unused-expression\n            expect(chainId3HealthzResponse.body.pairs).to.be.an('array').that.is.empty;\n\n            const chainId1337HealthzResponse = await request(app)\n                .get(`${RFQM_PATH}/healthz`)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.OK)\n                .expect('Content-Type', /json/);\n            expect(chainId1337HealthzResponse.body.pairs[0][0]).to.equal('0x0b1ba0af832d7c05fd64161e0db78e85978e8082');\n            expect(chainId1337HealthzResponse.body.pairs[0][1]).to.equal('0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c');\n        });\n    });\n\n    describe('rfqm/v1/price', () => {\n        it('should return a 200 OK with an indicative quote for buys', async () => {\n            const buyAmount = 200000000000000000;\n            const winningQuote = 100000000000000000;\n            const losingQuote = 150000000000000000;\n            const zeroExApiParams = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'WETH',\n                buyAmount: buyAmount.toString(),\n                takerAddress,\n                intentOnFilling: 'false',\n                skipValidation: 'true',\n            });\n\n            const baseResponse = {\n                makerAmount: buyAmount.toString(),\n                makerToken: contractAddresses.zrxToken,\n                takerToken: contractAddresses.etherToken,\n                expiry: '1903620548', // in the year 2030\n            };\n\n            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {\n                ...baseResponse,\n                takerAmount: winningQuote.toString(),\n                maker: MARKET_MAKER_2_ADDR,\n            });\n            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {\n                ...baseResponse,\n                takerAmount: losingQuote.toString(),\n                maker: MARKET_MAKER_3_ADDR,\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/price?${zeroExApiParams.toString()}`)\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.OK)\n                .expect('Content-Type', /json/);\n\n            const expectedPrice = '0.5';\n            expect(appResponse.body.liquidityAvailable).to.equal(true);\n            expect(appResponse.body.price).to.equal(expectedPrice);\n        });\n\n        it('should return a 200 OK with an indicative quote for sells', async () => {\n            const sellAmount = 100000000000000000;\n            const winningQuote = 200000000000000000;\n            const losingQuote = 150000000000000000;\n            const zeroExApiParams = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'WETH',\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n                intentOnFilling: 'false',\n                skipValidation: 'true',\n            });\n\n            const baseResponse = {\n                takerAmount: sellAmount.toString(),\n                makerToken: contractAddresses.zrxToken,\n                takerToken: contractAddresses.etherToken,\n                expiry: '1903620548', // in the year 2030\n            };\n\n            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {\n                ...baseResponse,\n                makerAmount: winningQuote.toString(),\n                maker: MARKET_MAKER_2_ADDR,\n            });\n            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {\n                ...baseResponse,\n                makerAmount: losingQuote.toString(),\n                maker: MARKET_MAKER_3_ADDR,\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/price?${zeroExApiParams.toString()}`)\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.OK)\n                .expect('Content-Type', /json/);\n\n            const expectedPrice = '2';\n            expect(appResponse.body.liquidityAvailable).to.equal(true);\n            expect(appResponse.body.price).to.equal(expectedPrice);\n        });\n\n        it('should return a 200 OK, liquidityAvailable === false if no valid quotes found', async () => {\n            const sellAmount = 100000000000000000;\n            const quotedAmount = 200000000000000000;\n            const params = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'WETH',\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n                intentOnFilling: 'false',\n                skipValidation: 'true',\n            });\n\n            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {\n                makerAmount: quotedAmount.toString(),\n                takerAmount: sellAmount.toString(),\n                makerToken: contractAddresses.zrxToken,\n                takerToken: contractAddresses.etherToken,\n                expiry: '0', // already expired\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.OK)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.liquidityAvailable).to.equal(false);\n            expect(appResponse.body.price).to.equal(undefined);\n        });\n\n        it('should return a 400 BAD REQUEST if API Key is not permitted access', async () => {\n            const sellAmount = 100000000000000000;\n            const params = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'WETH',\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n                intentOnFilling: 'false',\n                skipValidation: 'true',\n            });\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\n                .set('0x-api-key', 'unknown-key')\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Invalid API key');\n        });\n\n        it('should return a 400 BAD REQUEST if API Key does not have access to the chain', async () => {\n            const sellAmount = 100000000000000000;\n            const params = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'WETH',\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n                intentOnFilling: 'false',\n                skipValidation: 'true',\n            });\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1')\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Invalid API key');\n        });\n\n        it('should return a 400 BAD REQUEST Validation Error if Chain Id cannot be parsed', async () => {\n            const sellAmount = 100000000000000000;\n            const params = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'WETH',\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n                intentOnFilling: 'false',\n                skipValidation: 'true',\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', 'invalid-id')\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Validation Failed');\n            expect(appResponse.body.validationErrors[0].reason).to.equal('Invalid chain id');\n        });\n\n        it('should return a 400 BAD REQUEST Validation Error if sending ETH, not WETH', async () => {\n            const sellAmount = 100000000000000000;\n            const params = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'ETH',\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n                intentOnFilling: 'false',\n                skipValidation: 'true',\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Validation Failed');\n            expect(appResponse.body.validationErrors[0].reason).to.equal(\n                'Unwrapped Native Asset is not supported. Use WETH instead',\n            );\n        });\n\n        it('should return a 400 BAD REQUEST if buyToken is missing', async () => {\n            const sellAmount = 100000000000000000;\n            const params = new URLSearchParams({\n                sellToken: 'WETH',\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n            });\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\n                .set('0x-api-key', API_KEY)\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Validation Failed');\n        });\n\n        it('should return a 400 BAD REQUEST if sellToken is missing', async () => {\n            const sellAmount = 100000000000000000;\n            const params = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n            });\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\n                .set('0x-api-key', API_KEY)\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Validation Failed');\n        });\n\n        it('should return a 400 BAD REQUEST if both sellAmount and buyAmount are missing', async () => {\n            const params = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'WETH',\n                takerAddress,\n            });\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\n                .set('0x-api-key', API_KEY)\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Validation Failed');\n        });\n\n        it('should return a 400 BAD REQUEST Error if trading an unknown token', async () => {\n            const sellAmount = 100000000000000000;\n            const UNKNOWN_TOKEN = 'RACCOONS_FOREVER';\n            const params = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: UNKNOWN_TOKEN,\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n                intentOnFilling: 'false',\n                skipValidation: 'true',\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Validation Failed');\n            expect(appResponse.body.validationErrors[0].reason).to.equal(\n                `Token ${UNKNOWN_TOKEN} is currently unsupported`,\n            );\n        });\n    });\n\n    describe('rfqm/v1/quote', () => {\n        it('should return a 200 OK, liquidityAvailable === false if no valid firm quotes found', async () => {\n            const sellAmount = 100000000000000000;\n            const insufficientSellAmount = 1;\n\n            const params = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'WETH',\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n                intentOnFilling: 'false',\n                skipValidation: 'true',\n            });\n\n            const baseResponse = {\n                makerToken: contractAddresses.zrxToken,\n                takerToken: contractAddresses.etherToken,\n                expiry: '1903620548', // in the year 2030\n            };\n\n            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {\n                ...baseResponse,\n                takerAmount: insufficientSellAmount,\n                makerAmount: insufficientSellAmount,\n                maker: MARKET_MAKER_2_ADDR,\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/quote?${params.toString()}`)\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.OK)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.liquidityAvailable).to.equal(false);\n            expect(appResponse.body.price).to.equal(undefined);\n        });\n\n        it('should return a 200 OK with a firm quote for buys', async () => {\n            const buyAmount = 200000000000000000;\n            const winningQuote = 100000000000000000;\n            const losingQuote = 150000000000000000;\n            const zeroExApiParams = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'WETH',\n                buyAmount: buyAmount.toString(),\n                takerAddress,\n                intentOnFilling: 'true',\n                skipValidation: 'true',\n            });\n\n            const headers = {\n                Accept: 'application/json, text/plain, */*',\n                '0x-api-key': INTEGRATOR_ID,\n                '0x-integrator-id': INTEGRATOR_ID,\n            };\n\n            const baseResponse = {\n                makerAmount: buyAmount.toString(),\n                makerToken: contractAddresses.zrxToken,\n                takerToken: contractAddresses.etherToken,\n                expiry: '1903620548', // in the year 2030\n            };\n\n            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {\n                ...baseResponse,\n                takerAmount: winningQuote.toString(),\n                maker: MARKET_MAKER_2_ADDR,\n            });\n            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {\n                ...baseResponse,\n                takerAmount: losingQuote.toString(),\n                maker: MARKET_MAKER_3_ADDR,\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/quote?${zeroExApiParams.toString()}`)\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.OK)\n                .expect('Content-Type', /json/);\n\n            const expectedPrice = '0.5';\n            expect(appResponse.body.price).to.equal(expectedPrice);\n            expect(appResponse.body.type).to.equal(GaslessTypes.OtcOrder);\n            expect(appResponse.body.orderHash).to.match(/^0x[0-9a-fA-F]+/);\n            expect(appResponse.body.order.maker).to.equal(MARKET_MAKER_2_ADDR);\n            expect(appResponse.body.approval).to.equal(undefined);\n        });\n\n        it('should return a 200 OK with a firm quote when OtcOrder pricing is available for sells', async () => {\n            const sellAmount = 100000000000000000;\n            const winningQuote = 200000000000000000;\n            const losingQuote = 150000000000000000;\n            const zeroExApiParams = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'WETH',\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n                intentOnFilling: 'true',\n                skipValidation: 'true',\n            });\n\n            const headers = {\n                Accept: 'application/json, text/plain, */*',\n                '0x-api-key': INTEGRATOR_ID,\n                '0x-integrator-id': INTEGRATOR_ID,\n            };\n\n            const baseResponse = {\n                takerAmount: sellAmount.toString(),\n                makerToken: contractAddresses.zrxToken,\n                takerToken: contractAddresses.etherToken,\n                expiry: '1903620548', // in the year 2030\n            };\n\n            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {\n                ...baseResponse,\n                makerAmount: winningQuote.toString(),\n                maker: MARKET_MAKER_2_ADDR,\n            });\n            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {\n                ...baseResponse,\n                makerAmount: losingQuote.toString(),\n                maker: MARKET_MAKER_3_ADDR,\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/quote?${zeroExApiParams.toString()}`)\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.OK)\n                .expect('Content-Type', /json/);\n\n            const expectedPrice = '2';\n            expect(appResponse.body.price).to.equal(expectedPrice);\n            expect(appResponse.body.type).to.equal(GaslessTypes.OtcOrder);\n            expect(appResponse.body.orderHash).to.match(/^0x[0-9a-fA-F]+/);\n            expect(appResponse.body.order.maker).to.equal(MARKET_MAKER_2_ADDR);\n            expect(appResponse.body.approval).to.equal(undefined);\n        });\n\n        it('should return a 200 OK with a firm quote when OtcOrder pricing is available for sells and checkApproval is true', async () => {\n            when(rfqBlockchainUtilsMock.getAllowanceAsync(anything(), anything(), anything())).thenResolve(\n                new BigNumber(0),\n            );\n            when(rfqBlockchainUtilsMock.getGaslessApprovalAsync(anything(), anything(), anything())).thenResolve(\n                MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\n            );\n\n            const sellAmount = 100000000000000000;\n            const winningQuote = 200000000000000000;\n            const losingQuote = 150000000000000000;\n            const zeroExApiParams = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'WETH',\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n                checkApproval: 'true',\n            });\n\n            const headers = {\n                Accept: 'application/json, text/plain, */*',\n                '0x-api-key': INTEGRATOR_ID,\n                '0x-integrator-id': INTEGRATOR_ID,\n            };\n\n            const baseResponse = {\n                takerAmount: sellAmount.toString(),\n                makerToken: contractAddresses.zrxToken,\n                takerToken: contractAddresses.etherToken,\n                expiry: '1903620548', // in the year 2030\n            };\n\n            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {\n                ...baseResponse,\n                makerAmount: winningQuote.toString(),\n                maker: MARKET_MAKER_2_ADDR,\n            });\n            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {\n                ...baseResponse,\n                makerAmount: losingQuote.toString(),\n                maker: MARKET_MAKER_3_ADDR,\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/quote?${zeroExApiParams.toString()}`)\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.OK)\n                .expect('Content-Type', /json/);\n\n            const expectedPrice = '2';\n            const expectedApproval = {\n                isRequired: true,\n                isGaslessAvailable: true,\n                type: MOCK_EXECUTE_META_TRANSACTION_APPROVAL.kind,\n                eip712: MOCK_EXECUTE_META_TRANSACTION_APPROVAL.eip712,\n            };\n            expect(appResponse.body.price).to.equal(expectedPrice);\n            expect(appResponse.body.type).to.equal(GaslessTypes.OtcOrder);\n            expect(appResponse.body.orderHash).to.match(/^0x[0-9a-fA-F]+/);\n            expect(appResponse.body.order.maker).to.equal(MARKET_MAKER_2_ADDR);\n            expect(appResponse.body.approval).to.eql(expectedApproval);\n        });\n\n        it('should return a 400 BAD REQUEST if api key is missing', async () => {\n            const sellAmount = 100000000000000000;\n            const params = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'WETH',\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n                intentOnFilling: 'false',\n                skipValidation: 'true',\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/quote?${params.toString()}`)\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Invalid API key');\n        });\n\n        it('should return a 400 BAD REQUEST if takerAddress is missing', async () => {\n            const sellAmount = 100000000000000000;\n            const params = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'WETH',\n                sellAmount: sellAmount.toString(),\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/quote?${params.toString()}`)\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Validation Failed');\n        });\n\n        it('should return a 400 BAD REQUEST if buyToken is missing', async () => {\n            const sellAmount = 100000000000000000;\n            const params = new URLSearchParams({\n                sellToken: 'WETH',\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/quote?${params.toString()}`)\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Validation Failed');\n        });\n\n        it('should return a 400 BAD REQUEST if sellToken is missing', async () => {\n            const sellAmount = 100000000000000000;\n            const params = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellAmount: sellAmount.toString(),\n                takerAddress,\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/quote?${params.toString()}`)\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Validation Failed');\n        });\n\n        it('should return a 400 BAD REQUEST if both sellAmount and buyAmount are missing', async () => {\n            const params = new URLSearchParams({\n                buyToken: 'ZRX',\n                sellToken: 'WETH',\n                takerAddress,\n            });\n\n            const appResponse = await request(app)\n                .get(`${RFQM_PATH}/quote?${params.toString()}`)\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Validation Failed');\n        });\n    });\n\n    describe('rfqm/v1/submit', () => {\n        const mockStoredFee: StoredFee = {\n            token: '0x123',\n            amount: '1000',\n            type: 'fixed',\n        };\n        const mockStoredOrder: StoredOtcOrder = {\n            type: RfqmOrderTypes.Otc,\n            order: {\n                chainId: '1337',\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\n                    new BigNumber(SAFE_EXPIRY),\n                    ZERO,\n                    new BigNumber(SAFE_EXPIRY),\n                ).toString(),\n                maker: '0x123',\n                makerAmount: '1',\n                makerToken: '0x123',\n                taker: '0x123',\n                takerAmount: '1',\n                takerToken: '0x123',\n                txOrigin: '0x123',\n                verifyingContract: '0x123',\n            },\n        };\n        // OtcOrder Taker\n        const otcOrderTakerAddress = '0xdA9AC423442169588DE6b4305f4E820D708d0cE5';\n        const otcOrderTakerPrivateKey = '0x653fa328df81be180b58e42737bc4cef037a19a3b9673b15d20ee2eebb2e509d';\n\n        // OtcOrder\n        const mockStoredOtcOrder: StoredOtcOrder = {\n            type: RfqmOrderTypes.Otc,\n            order: {\n                txOrigin: '0x123',\n                maker: '0x123',\n                taker: otcOrderTakerAddress,\n                makerToken: '0x123',\n                takerToken: '0x123',\n                makerAmount: '1',\n                takerAmount: '1',\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\n                    new BigNumber(SAFE_EXPIRY),\n                    ZERO,\n                    new BigNumber(SAFE_EXPIRY),\n                ).toString(),\n                chainId: '1337',\n                verifyingContract: '0x123',\n            },\n        };\n        const otcOrder = storedOtcOrderToOtcOrder(mockStoredOtcOrder);\n        it('[v2] should return status 201 created and queue up a job with a successful request', async () => {\n            // OtcOrder\n            const order = otcOrder;\n            const orderHash = order.getHash();\n\n            // Taker Signature\n            const takerSignature = ethSignHashWithKey(orderHash, otcOrderTakerPrivateKey);\n\n            const mockQuote = new RfqmV2QuoteEntity({\n                orderHash,\n                makerUri: MARKET_MAKER_1,\n                fee: mockStoredFee,\n                order: mockStoredOtcOrder,\n                chainId: 1337,\n                affiliateAddress: MATCHA_AFFILIATE_ADDRESS,\n                takerSpecifiedSide: 'makerToken',\n            });\n\n            // write a corresponding quote entity to validate against\n            await dataSource.getRepository(RfqmV2QuoteEntity).insert(mockQuote);\n\n            const appResponse = await request(app)\n                .post(`${RFQM_PATH}/submit`)\n                .send({ type: GaslessTypes.OtcOrder, order, signature: takerSignature })\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.CREATED)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.orderHash).to.equal(orderHash);\n\n            const dbJobEntity = await dataSource.getRepository(RfqmV2JobEntity).findOne({\n                where: {\n                    orderHash,\n                },\n            });\n            expect(dbJobEntity).to.not.equal(null);\n            expect(dbJobEntity?.orderHash).to.equal(mockQuote.orderHash);\n            expect(dbJobEntity?.makerUri).to.equal(MARKET_MAKER_1);\n            expect(dbJobEntity?.affiliateAddress).to.equal(MATCHA_AFFILIATE_ADDRESS);\n            expect(dbJobEntity?.takerSignature).to.deep.eq(takerSignature);\n        });\n\n        it('[v2] should return status 404 not found if there is not a pre-existing quote', async () => {\n            const order = otcOrder;\n\n            // Taker Signature\n            const takerSignature = ethSignHashWithKey(order.getHash(), otcOrderTakerPrivateKey);\n\n            const appResponse = await request(app)\n                .post(`${RFQM_PATH}/submit`)\n                .send({\n                    type: GaslessTypes.OtcOrder,\n                    order,\n                    signature: takerSignature,\n                })\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.NOT_FOUND)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Not Found');\n        });\n\n        it('should return a 400 BAD REQUEST Error the type is not supported', async () => {\n            const invalidType = 'v10rfq';\n\n            const appResponse = await request(app)\n                .post(`${RFQM_PATH}/submit`)\n                .send({ type: invalidType, order: mockStoredOrder, signature: RANDOM_VALID_SIGNATURE })\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Validation Failed');\n            expect(appResponse.body.validationErrors[0].reason).to.equal(\n                `${invalidType} is an invalid value for 'type'`,\n            );\n        });\n\n        it('[v2] should fail with status code 500 if a quote has already been submitted', async () => {\n            // OtcOrder\n            const order = otcOrder;\n            const orderHash = order.getHash();\n\n            // Taker Signature\n            const takerSignature = ethSignHashWithKey(orderHash, otcOrderTakerPrivateKey);\n\n            const mockQuote = new RfqmV2QuoteEntity({\n                orderHash,\n                makerUri: MARKET_MAKER_1,\n                fee: mockStoredFee,\n                order: mockStoredOtcOrder,\n                chainId: 1337,\n                affiliateAddress: MATCHA_AFFILIATE_ADDRESS,\n                takerSpecifiedSide: 'makerToken',\n            });\n\n            // write a corresponding quote entity to validate against\n            await dataSource.getRepository(RfqmV2QuoteEntity).insert(mockQuote);\n\n            await request(app)\n                .post(`${RFQM_PATH}/submit`)\n                .send({ type: GaslessTypes.OtcOrder, order, signature: takerSignature })\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.CREATED)\n                .expect('Content-Type', /json/);\n\n            // try to submit again\n            await request(app)\n                .post(`${RFQM_PATH}/submit`)\n                .send({ type: GaslessTypes.OtcOrder, order, signature: takerSignature })\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.INTERNAL_SERVER_ERROR)\n                .expect('Content-Type', /json/);\n        });\n\n        it('[v2] should fail with 400 BAD REQUEST if meta tx is too close to expiration', async () => {\n            const order = new OtcOrder({\n                ...otcOrder,\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(ZERO, ZERO, ZERO),\n            });\n            const orderHash = order.getHash();\n\n            const mockQuote = new RfqmV2QuoteEntity({\n                orderHash,\n                makerUri: MARKET_MAKER_1,\n                fee: mockStoredFee,\n                order: mockStoredOtcOrder,\n                chainId: 1337,\n                affiliateAddress: MATCHA_AFFILIATE_ADDRESS,\n                takerSpecifiedSide: 'makerToken',\n            });\n\n            await dataSource.getRepository(RfqmV2QuoteEntity).insert(mockQuote);\n\n            const appResponse = await request(app)\n                .post(`${RFQM_PATH}/submit`)\n                .send({ type: GaslessTypes.OtcOrder, order, signature: RANDOM_VALID_SIGNATURE })\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Validation Failed');\n            expect(appResponse.body.validationErrors[0].reason).to.equal(`order will expire too soon`);\n        });\n\n        it('[v2] should fail with 400 BAD REQUEST if signature is invalid', async () => {\n            const order = otcOrder;\n            const orderHash = order.getHash();\n\n            const mockQuote = new RfqmV2QuoteEntity({\n                orderHash,\n                makerUri: MARKET_MAKER_1,\n                fee: mockStoredFee,\n                order: mockStoredOtcOrder,\n                chainId: 1337,\n                affiliateAddress: MATCHA_AFFILIATE_ADDRESS,\n                takerSpecifiedSide: 'makerToken',\n            });\n\n            await dataSource.getRepository(RfqmV2QuoteEntity).insert(mockQuote);\n\n            const appResponse = await request(app)\n                .post(`${RFQM_PATH}/submit`)\n                .send({ type: GaslessTypes.OtcOrder, order, signature: RANDOM_VALID_SIGNATURE })\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.reason).to.equal('Validation Failed');\n            expect(appResponse.body.validationErrors[0].reason).to.equal(`signature is not valid`);\n        });\n    });\n\n    describe('rfqm/v1/submit-with-approval', () => {\n        const mockStoredFee: StoredFee = {\n            token: '0x123',\n            amount: '1000',\n            type: 'fixed',\n        };\n\n        // OtcOrder Taker\n        const otcOrderTakerAddress = '0xdA9AC423442169588DE6b4305f4E820D708d0cE5';\n        const otcOrderTakerPrivateKey = '0x653fa328df81be180b58e42737bc4cef037a19a3b9673b15d20ee2eebb2e509d';\n\n        // OtcOrder\n        const mockStoredOtcOrder: StoredOtcOrder = {\n            type: RfqmOrderTypes.Otc,\n            order: {\n                txOrigin: '0x123',\n                maker: '0x123',\n                taker: otcOrderTakerAddress,\n                makerToken: '0x123',\n                takerToken: '0x123',\n                makerAmount: '1',\n                takerAmount: '1',\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\n                    new BigNumber(SAFE_EXPIRY),\n                    ZERO,\n                    new BigNumber(SAFE_EXPIRY),\n                ).toString(),\n                chainId: '1337',\n                verifyingContract: '0x123',\n            },\n        };\n\n        // Approval\n        const approval = {\n            type: MOCK_PERMIT_APPROVAL.kind,\n            eip712: MOCK_PERMIT_APPROVAL.eip712,\n        };\n        const otcOrder = storedOtcOrderToOtcOrder(mockStoredOtcOrder);\n        it('[v2] should return status 201 created and queue up a job with a successful request', async () => {\n            // OtcOrder\n            const order = otcOrder;\n            const orderHash = order.getHash();\n\n            // Taker Signature\n            const takerSignature = ethSignHashWithKey(orderHash, otcOrderTakerPrivateKey);\n\n            // Approval signature\n            const signer = new ethers.Wallet(otcOrderTakerPrivateKey);\n            const typesCopy: Partial<PermitEip712Types> = { ...approval.eip712.types };\n            delete typesCopy.EIP712Domain;\n            const rawApprovalSignature = await signer._signTypedData(\n                approval.eip712.domain,\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                typesCopy as any,\n                approval.eip712.message,\n            );\n            const { v, r, s } = ethers.utils.splitSignature(rawApprovalSignature);\n            const approvalSignature = {\n                v,\n                r,\n                s,\n                signatureType: 3,\n            };\n\n            const mockQuote = new RfqmV2QuoteEntity({\n                orderHash,\n                makerUri: MARKET_MAKER_1,\n                fee: mockStoredFee,\n                order: mockStoredOtcOrder,\n                chainId: 1337,\n                affiliateAddress: MATCHA_AFFILIATE_ADDRESS,\n                takerSpecifiedSide: 'makerToken',\n            });\n\n            // write a corresponding quote entity to validate against\n            await dataSource.getRepository(RfqmV2QuoteEntity).insert(mockQuote);\n\n            const appResponse = await request(app)\n                .post(`${RFQM_PATH}/submit-with-approval`)\n                .send({\n                    trade: { type: GaslessTypes.OtcOrder, order, signature: takerSignature },\n                    approval: {\n                        type: GaslessApprovalTypes.Permit,\n                        eip712: approval.eip712,\n                        signature: approvalSignature,\n                    },\n                })\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.CREATED)\n                .expect('Content-Type', /json/);\n\n            expect(appResponse.body.orderHash).to.equal(orderHash);\n\n            const dbJobEntity = await dataSource.getRepository(RfqmV2JobEntity).findOne({\n                where: {\n                    orderHash,\n                },\n            });\n\n            expect(dbJobEntity).to.not.equal(null);\n            expect(dbJobEntity?.orderHash).to.equal(mockQuote.orderHash);\n            expect(dbJobEntity?.makerUri).to.equal(MARKET_MAKER_1);\n            expect(dbJobEntity?.affiliateAddress).to.equal(MATCHA_AFFILIATE_ADDRESS);\n            expect(dbJobEntity?.takerSignature).to.deep.eq(takerSignature);\n            expect(dbJobEntity?.approval?.eip712).to.deep.eq(approval.eip712);\n            expect(dbJobEntity?.approval?.kind).to.deep.eq(approval.type);\n            expect(dbJobEntity?.approvalSignature).to.deep.eq(approvalSignature);\n        });\n    });\n\n    describe('rfqm/v1/status/:orderHash', () => {\n        it('should return a 404 NOT FOUND if the order hash is not found', () => {\n            const orderHash = '0x00';\n            return request(app)\n                .get(`${RFQM_PATH}/status/${orderHash}`)\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.NOT_FOUND);\n        });\n\n        it('should return a 200 when the order exists', async () => {\n            await dbUtils.writeV2JobAsync(MOCK_RFQM_JOB);\n\n            const response = await request(app)\n                .get(`${RFQM_PATH}/status/${MOCK_RFQM_JOB.orderHash}`)\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.OK)\n                .expect('Content-Type', /json/);\n\n            // Response details are covered by the service test, but do one small check for sanity\n            expect(response.body.status).to.equal('submitted');\n        });\n\n        it('should return status reason for failures', async () => {\n            await dbUtils.writeV2JobAsync({\n                ...MOCK_RFQM_JOB,\n                status: RfqmJobStatus.FailedRevertedConfirmed,\n            });\n\n            const response = await request(app)\n                .get(`${RFQM_PATH}/status/${MOCK_RFQM_JOB.orderHash}`)\n                .set('0x-api-key', API_KEY)\n                .set('0x-chain-id', '1337')\n                .expect(HttpStatus.OK)\n                .expect('Content-Type', /json/);\n\n            // Response details are covered by the service test, but do one small check for sanity\n            expect(response.body.reason).to.equal('transaction_reverted');\n        });\n    });\n\n    describe('/admin/v1/cleanup', () => {\n        it('should return a 400 BAD REQUEST if the order hash is not found', () => {\n            const orderHash = '0x00';\n            return request(app)\n                .post(`${ADMIN_PATH}/cleanup`)\n                .send({ orderHashes: [orderHash] })\n                .set('0x-admin-api-key', ADMIN_API_KEY)\n                .expect(HttpStatus.BAD_REQUEST);\n        });\n\n        it('should return a 400 BAD REQUEST if no order hashes are sent', async () => {\n            await request(app)\n                .post(`${ADMIN_PATH}/cleanup`)\n                .send({ orderHashes: [] })\n                .set('0x-admin-api-key', ADMIN_API_KEY)\n                .expect(HttpStatus.BAD_REQUEST);\n        });\n\n        it('should return a 400 BAD REQUEST if all job updates fail', async () => {\n            await dbUtils.writeV2JobAsync({ ...MOCK_RFQM_JOB, status: RfqmJobStatus.SucceededConfirmed });\n            const response = await request(app)\n                .post(`${ADMIN_PATH}/cleanup`)\n                .send({ orderHashes: [MOCK_RFQM_JOB.orderHash] })\n                .set('0x-admin-api-key', ADMIN_API_KEY)\n                .expect(HttpStatus.BAD_REQUEST);\n\n            expect(response.body.unmodifiedJobs[0]).to.equal(MOCK_RFQM_JOB.orderHash);\n        });\n\n        it('should return a 401 UNAUTHORIZED if the API key is not an admin key', async () => {\n            await dbUtils.writeV2JobAsync(MOCK_RFQM_JOB);\n            const badApiKey = '0xbadapikey';\n\n            return request(app)\n                .post(`${ADMIN_PATH}/cleanup`)\n                .send({ orderHashes: [MOCK_RFQM_JOB.orderHash] })\n                .set('0x-admin-api-key', badApiKey)\n                .expect(HttpStatus.UNAUTHORIZED);\n        });\n\n        it('should return a 200 OK when the jobs are successfully set to failure', async () => {\n            await dbUtils.writeV2JobAsync({\n                ...MOCK_RFQM_JOB,\n                expiry: new BigNumber(Date.now() - 60_000).dividedBy(ONE_SECOND_MS).decimalPlaces(0),\n            });\n\n            const response = await request(app)\n                .post(`${ADMIN_PATH}/cleanup`)\n                .send({ orderHashes: [MOCK_RFQM_JOB.orderHash] })\n                .set('0x-admin-api-key', ADMIN_API_KEY)\n                .expect(HttpStatus.OK)\n                .expect('Content-Type', /json/);\n\n            expect(response.body.modifiedJobs[0]).to.equal(MOCK_RFQM_JOB.orderHash);\n        });\n\n        it('should return a 207 MULTI STATUS if some jobs succeed and some jobs fail', async () => {\n            await dbUtils.writeV2JobAsync({\n                ...MOCK_RFQM_JOB,\n                status: RfqmJobStatus.SucceededConfirmed,\n                orderHash: '0x01',\n            });\n            await dbUtils.writeV2JobAsync({\n                ...MOCK_RFQM_JOB,\n                expiry: new BigNumber(Date.now() - 60_000).dividedBy(ONE_SECOND_MS).decimalPlaces(0),\n                orderHash: '0x02',\n            });\n\n            const response = await request(app)\n                .post(`${ADMIN_PATH}/cleanup`)\n                .send({ orderHashes: ['0x01', '0x02'] })\n                .set('0x-admin-api-key', ADMIN_API_KEY)\n                .expect(HttpStatus.MULTI_STATUS);\n\n            expect(response.body.unmodifiedJobs[0]).to.equal('0x01');\n            expect(response.body.modifiedJobs[0]).to.equal('0x02');\n        });\n    });\n});\n"],"version":3}