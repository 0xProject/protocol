ec1e7fcf2168dc3d283d3880803235d8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGaslessV1Router = exports.createZeroGRouter = void 0;
const express = require("express");
const asyncHandler = require("express-async-handler");
const GaslessSwapHandlers_1 = require("../handlers/GaslessSwapHandlers");
/**
 * Creates an express router for zero-g related routes.
 */
function createZeroGRouter(gaslessSwapServices, configManager) {
    const router = express.Router();
    const handlers = new GaslessSwapHandlers_1.GaslessSwapHandlers(gaslessSwapServices, configManager);
    // Routes
    router.get('/healthz', asyncHandler(handlers.getHealthAsync.bind(handlers)));
    router.get('/price', asyncHandler(handlers.getPriceAsync.bind(handlers)));
    router.get('/quote', asyncHandler(handlers.getQuoteAsync.bind(handlers)));
    router.get('/status/:hash', asyncHandler(handlers.getStatusAsync.bind(handlers)));
    router.post('/submit', asyncHandler(handlers.processSubmitAsync.bind(handlers)));
    return router;
}
exports.createZeroGRouter = createZeroGRouter;
/**
 * Creates an express router for gasless v1 related routes.
 */
function createGaslessV1Router(gaslessSwapServices, configManager) {
    const router = express.Router();
    const handlers = new GaslessSwapHandlers_1.GaslessSwapHandlers(gaslessSwapServices, configManager);
    // Routes
    router.get('/healthz', asyncHandler(handlers.getHealthAsync.bind(handlers)));
    router.get('/price', asyncHandler(handlers.getPriceAsync.bind(handlers)));
    router.get('/quote', asyncHandler(handlers.getQuoteAsync.bind(handlers)));
    router.get('/status/:hash', asyncHandler(handlers.getStatusAsync.bind(handlers)));
    router.post('/submit', asyncHandler(handlers.processSubmitAsync.bind(handlers)));
    return router;
}
exports.createGaslessV1Router = createGaslessV1Router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9yb3V0ZXJzL0dhc2xlc3NTd2FwUm91dGVyLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFtQztBQUNuQyxzREFBc0Q7QUFFdEQseUVBQXNFO0FBSXRFOztHQUVHO0FBQ0gsU0FBZ0IsaUJBQWlCLENBQzdCLG1CQUFvRCxFQUNwRCxhQUE0QjtJQUU1QixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEMsTUFBTSxRQUFRLEdBQUcsSUFBSSx5Q0FBbUIsQ0FBQyxtQkFBbUIsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUU3RSxTQUFTO0lBQ1QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RSxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFakYsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQWZELDhDQWVDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixxQkFBcUIsQ0FDakMsbUJBQW9ELEVBQ3BELGFBQTRCO0lBRTVCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQyxNQUFNLFFBQVEsR0FBRyxJQUFJLHlDQUFtQixDQUFDLG1CQUFtQixFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBRTdFLFNBQVM7SUFDVCxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdFLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRSxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVqRixPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBZkQsc0RBZUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9yb3V0ZXJzL0dhc2xlc3NTd2FwUm91dGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCAqIGFzIGFzeW5jSGFuZGxlciBmcm9tICdleHByZXNzLWFzeW5jLWhhbmRsZXInO1xyXG5cclxuaW1wb3J0IHsgR2FzbGVzc1N3YXBIYW5kbGVycyB9IGZyb20gJy4uL2hhbmRsZXJzL0dhc2xlc3NTd2FwSGFuZGxlcnMnO1xyXG5pbXBvcnQgeyBHYXNsZXNzU3dhcFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9HYXNsZXNzU3dhcFNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb25maWdNYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbHMvY29uZmlnX21hbmFnZXInO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gZXhwcmVzcyByb3V0ZXIgZm9yIHplcm8tZyByZWxhdGVkIHJvdXRlcy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVaZXJvR1JvdXRlcihcclxuICAgIGdhc2xlc3NTd2FwU2VydmljZXM6IE1hcDxudW1iZXIsIEdhc2xlc3NTd2FwU2VydmljZT4sXHJcbiAgICBjb25maWdNYW5hZ2VyOiBDb25maWdNYW5hZ2VyLFxyXG4pOiBleHByZXNzLlJvdXRlciB7XHJcbiAgICBjb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xyXG4gICAgY29uc3QgaGFuZGxlcnMgPSBuZXcgR2FzbGVzc1N3YXBIYW5kbGVycyhnYXNsZXNzU3dhcFNlcnZpY2VzLCBjb25maWdNYW5hZ2VyKTtcclxuXHJcbiAgICAvLyBSb3V0ZXNcclxuICAgIHJvdXRlci5nZXQoJy9oZWFsdGh6JywgYXN5bmNIYW5kbGVyKGhhbmRsZXJzLmdldEhlYWx0aEFzeW5jLmJpbmQoaGFuZGxlcnMpKSk7XHJcbiAgICByb3V0ZXIuZ2V0KCcvcHJpY2UnLCBhc3luY0hhbmRsZXIoaGFuZGxlcnMuZ2V0UHJpY2VBc3luYy5iaW5kKGhhbmRsZXJzKSkpO1xyXG4gICAgcm91dGVyLmdldCgnL3F1b3RlJywgYXN5bmNIYW5kbGVyKGhhbmRsZXJzLmdldFF1b3RlQXN5bmMuYmluZChoYW5kbGVycykpKTtcclxuICAgIHJvdXRlci5nZXQoJy9zdGF0dXMvOmhhc2gnLCBhc3luY0hhbmRsZXIoaGFuZGxlcnMuZ2V0U3RhdHVzQXN5bmMuYmluZChoYW5kbGVycykpKTtcclxuICAgIHJvdXRlci5wb3N0KCcvc3VibWl0JywgYXN5bmNIYW5kbGVyKGhhbmRsZXJzLnByb2Nlc3NTdWJtaXRBc3luYy5iaW5kKGhhbmRsZXJzKSkpO1xyXG5cclxuICAgIHJldHVybiByb3V0ZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIGV4cHJlc3Mgcm91dGVyIGZvciBnYXNsZXNzIHYxIHJlbGF0ZWQgcm91dGVzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUdhc2xlc3NWMVJvdXRlcihcclxuICAgIGdhc2xlc3NTd2FwU2VydmljZXM6IE1hcDxudW1iZXIsIEdhc2xlc3NTd2FwU2VydmljZT4sXHJcbiAgICBjb25maWdNYW5hZ2VyOiBDb25maWdNYW5hZ2VyLFxyXG4pOiBleHByZXNzLlJvdXRlciB7XHJcbiAgICBjb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xyXG4gICAgY29uc3QgaGFuZGxlcnMgPSBuZXcgR2FzbGVzc1N3YXBIYW5kbGVycyhnYXNsZXNzU3dhcFNlcnZpY2VzLCBjb25maWdNYW5hZ2VyKTtcclxuXHJcbiAgICAvLyBSb3V0ZXNcclxuICAgIHJvdXRlci5nZXQoJy9oZWFsdGh6JywgYXN5bmNIYW5kbGVyKGhhbmRsZXJzLmdldEhlYWx0aEFzeW5jLmJpbmQoaGFuZGxlcnMpKSk7XHJcbiAgICByb3V0ZXIuZ2V0KCcvcHJpY2UnLCBhc3luY0hhbmRsZXIoaGFuZGxlcnMuZ2V0UHJpY2VBc3luYy5iaW5kKGhhbmRsZXJzKSkpO1xyXG4gICAgcm91dGVyLmdldCgnL3F1b3RlJywgYXN5bmNIYW5kbGVyKGhhbmRsZXJzLmdldFF1b3RlQXN5bmMuYmluZChoYW5kbGVycykpKTtcclxuICAgIHJvdXRlci5nZXQoJy9zdGF0dXMvOmhhc2gnLCBhc3luY0hhbmRsZXIoaGFuZGxlcnMuZ2V0U3RhdHVzQXN5bmMuYmluZChoYW5kbGVycykpKTtcclxuICAgIHJvdXRlci5wb3N0KCcvc3VibWl0JywgYXN5bmNIYW5kbGVyKGhhbmRsZXJzLnByb2Nlc3NTdWJtaXRBc3luYy5iaW5kKGhhbmRsZXJzKSkpO1xyXG5cclxuICAgIHJldHVybiByb3V0ZXI7XHJcbn1cclxuIl0sInZlcnNpb24iOjN9