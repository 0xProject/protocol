{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/GaslessSwapHandlers.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/GaslessSwapHandlers.ts"],"sourcesContent":["// tslint:disable:max-file-line-count\nimport {\n    InternalServerError,\n    InvalidAPIKeyError,\n    isAPIError,\n    ValidationError,\n    ValidationErrorCodes,\n} from '@0x/api-utils';\nimport { MetaTransaction, OtcOrder } from '@0x/protocol-utils';\nimport { getTokenMetadataIfExists, isNativeSymbolOrAddress, nativeWrappedTokenSymbol } from '@0x/token-metadata';\nimport { addressUtils, BigNumber } from '@0x/utils';\nimport * as express from 'express';\nimport * as HttpStatus from 'http-status-codes';\nimport { Counter } from 'prom-client';\n\nimport { Integrator } from '../config';\nimport { schemas } from '../core/schemas';\nimport { GaslessSwapService } from '../services/GaslessSwapService';\nimport {\n    FetchFirmQuoteParams,\n    FetchIndicativeQuoteParams,\n    FetchQuoteParamsBase,\n    MetaTransactionV2,\n    SubmitMetaTransactionSignedQuoteParams,\n    SubmitMetaTransactionV2SignedQuoteParams,\n    SubmitRfqmSignedQuoteWithApprovalParams,\n} from '../services/types';\nimport {\n    ExecuteMetaTransactionEip712Context,\n    GaslessApprovalTypes,\n    GaslessTypes,\n    PermitEip712Context,\n} from '../core/types';\nimport { ConfigManager } from '../utils/config_manager';\nimport { HealthCheckResult, transformResultToShortResponse } from '../utils/rfqm_health_check';\nimport {\n    RawMetaTransactionFields,\n    RawOtcOrderFields,\n    StringSignatureFields,\n    stringsToEIP712Context,\n    stringsToMetaTransactionFields,\n    stringsToOtcOrderFields,\n    stringsToSignature,\n} from '../utils/rfqm_request_utils';\nimport { schemaUtils } from '../core/schema_utils';\nimport { TX_RELAY_V1_PATH, ZERO_G_PATH, ZERO_G_ALIAS_PATH } from '../core/constants';\n\n// Minimum slippage allowed. This value should be kept consistent with the value set in 0x-api\nconst MIN_ALLOWED_SLIPPAGE = 0.001; // 0.1%\n\n// If the cache is more milliseconds old than the value specified here, it will be refreshed.\nconst HEALTH_CHECK_RESULT_CACHE_DURATION_MS = 30000;\n\nconst ZEROG_GASLESS_SWAP_REQUEST = new Counter({\n    name: 'zerog_gasless_swap_request_total',\n    help: 'Number of requests of a gasless swap endpoint',\n    labelNames: ['chainId', 'integratorLabel', 'endpoint'],\n});\nconst ZEROG_GASLESS_SWAP_REQUEST_ERROR = new Counter({\n    name: 'zerog_gasless_swap_request_error',\n    help: 'Number of request errors of a gasless swap endpoint',\n    labelNames: ['chainId', 'integratorLabel', 'endpoint'],\n});\n\ntype HealthCheckResultCache = [HealthCheckResult, Date];\n\n/**\n * Logic to bridge Gasless Swap API requests to the `GaslessSwapService` and translate\n * results from the `GaslessSwapService` back to API responses.\n */\nexport class GaslessSwapHandlers {\n    private readonly _cachedHealthCheckResultByChainId = new Map<number, HealthCheckResultCache>();\n    constructor(\n        private readonly _gaslessSwapServices: Map<number, GaslessSwapService>,\n        private readonly _configManager: ConfigManager,\n    ) {}\n\n    /**\n     * Handler for the /price endpoint\n     */\n    public async getPriceAsync(req: express.Request, res: express.Response): Promise<void> {\n        const metaTransactionType = getMetaTransactionType(req.baseUrl);\n        const { chainId, params } = await this._parsePriceParamsAsync(req, metaTransactionType);\n        // Consistent with `rfqm_handlers`: not all requests are emitted if they fail parsing\n        ZEROG_GASLESS_SWAP_REQUEST.inc({\n            chainId,\n            integratorLabel: params.integrator.label,\n            endpoint: '/price',\n        });\n\n        let price;\n        try {\n            price = await this._getServiceForChain(chainId).fetchPriceAsync(params, metaTransactionType);\n        } catch (err) {\n            ZEROG_GASLESS_SWAP_REQUEST_ERROR.inc({\n                chainId,\n                integratorLabel: params.integrator.label,\n                endpoint: '/price',\n            });\n            throw err;\n        }\n\n        // Result\n        res.status(HttpStatus.OK).send({\n            liquidityAvailable: price !== null,\n            ...price,\n        });\n    }\n\n    /**\n     * Handler for the /quote endpoint\n     */\n    public async getQuoteAsync(req: express.Request, res: express.Response): Promise<void> {\n        const metaTransactionType = getMetaTransactionType(req.baseUrl);\n        // Parse request\n        const { chainId, params } = await this._parseFetchFirmQuoteParamsAsync(req, metaTransactionType);\n        // Consistent with `rfqm_handlers`: not all requests are emitted if they fail parsing\n        ZEROG_GASLESS_SWAP_REQUEST.inc({\n            chainId,\n            integratorLabel: params.integrator.label,\n            endpoint: '/quote',\n        });\n\n        let quote;\n        try {\n            quote = await this._getServiceForChain(chainId).fetchQuoteAsync(params, metaTransactionType);\n        } catch (err) {\n            ZEROG_GASLESS_SWAP_REQUEST_ERROR.inc({\n                chainId,\n                integratorLabel: params.integrator.label,\n                endpoint: '/quote',\n            });\n            throw err;\n        }\n        // Result\n        res.status(HttpStatus.OK).send({\n            liquidityAvailable: quote !== null,\n            ...quote,\n        });\n    }\n\n    /**\n     * Handler for the `/healthz` endpoint.\n     */\n    public async getHealthAsync(req: express.Request, res: express.Response): Promise<void> {\n        const chainId = extractChainId(req, this._gaslessSwapServices);\n        const cachedResult = this._cachedHealthCheckResultByChainId.get(chainId);\n        let result: HealthCheckResult;\n        if (!cachedResult) {\n            result = await this._getServiceForChain(chainId).runHealthCheckAsync();\n            this._cachedHealthCheckResultByChainId.set(chainId, [result, new Date()]);\n        } else {\n            const cacheAgeMs = Date.now() - cachedResult[1].getTime();\n            if (cacheAgeMs >= HEALTH_CHECK_RESULT_CACHE_DURATION_MS) {\n                result = await this._getServiceForChain(chainId).runHealthCheckAsync();\n                this._cachedHealthCheckResultByChainId.set(chainId, [result, new Date()]);\n            } else {\n                result = cachedResult[0];\n            }\n        }\n\n        const response = transformResultToShortResponse(result);\n        res.status(HttpStatus.OK).send(response);\n    }\n\n    /**\n     * Handler for the /status/:hash endpoint\n     */\n    public async getStatusAsync(req: express.Request, res: express.Response): Promise<void> {\n        const chainId = extractChainId(req, this._gaslessSwapServices);\n        const { hash } = req.params;\n\n        const status = await this._getServiceForChain(chainId).getStatusAsync(hash);\n\n        status ? res.status(HttpStatus.OK).send(status) : res.status(HttpStatus.NOT_FOUND).send();\n    }\n\n    /**\n     * Handler for the /submit endpoint\n     */\n    public async processSubmitAsync(req: express.Request, res: express.Response): Promise<void> {\n        const { chainId, integrator, params } = this._parseSubmitParams(req);\n        // Consistent with `rfqm_handlers`: not all requests are emitted if they fail parsing\n        ZEROG_GASLESS_SWAP_REQUEST.inc({\n            chainId,\n            integratorLabel: integrator.label,\n            endpoint: '/submit',\n        });\n\n        try {\n            const response = await this._getServiceForChain(chainId).processSubmitAsync(\n                params,\n                integrator.integratorId,\n            );\n            res.status(HttpStatus.CREATED).send(response);\n        } catch (err) {\n            ZEROG_GASLESS_SWAP_REQUEST_ERROR.inc({\n                chainId,\n                integratorLabel: integrator.label,\n                endpoint: '/submit',\n            });\n            req.log.error(err, 'Encountered an error while queuing a signed quote');\n            if (isAPIError(err)) {\n                throw err;\n            } else {\n                throw new InternalServerError(`An unexpected error occurred`);\n            }\n        }\n    }\n\n    private async _parseFetchFirmQuoteParamsAsync(\n        req: express.Request,\n        metaTransactionType: GaslessTypes,\n    ): Promise<{ chainId: number; params: FetchFirmQuoteParams }> {\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        schemaUtils.validateSchema(req.query, schemas.firmQuoteRequestSchema as any);\n        const takerAddress = req.query.takerAddress;\n        const shouldCheckApproval = req.query.checkApproval === 'true' ? true : false;\n        const { chainId, params } = await this._parseIndicativeAndFirmQuoteSharedParamsAsync(req, metaTransactionType);\n        if (!addressUtils.isAddress(takerAddress as string)) {\n            throw new ValidationError([\n                {\n                    field: 'takerAddress',\n                    code: ValidationErrorCodes.InvalidAddress,\n                    reason: `Must provide a valid takerAddress`,\n                },\n            ]);\n        }\n        return {\n            chainId,\n            params: {\n                ...params,\n                takerAddress: takerAddress as string,\n                checkApproval: shouldCheckApproval,\n            },\n        };\n    }\n\n    private _getServiceForChain(chainId: number): GaslessSwapService {\n        const service = this._gaslessSwapServices.get(chainId);\n\n        if (!service) {\n            throw new Error('No configuration exists for chain');\n        }\n        return service;\n    }\n\n    /**\n     * Examines the API key provided in the request, ensures it is valid for RFQM, and fetches the associated\n     * integrator ID.\n     */\n    private _validateApiKey(apiKey: string | undefined, chainId: number): { apiKey: string; integrator: Integrator } {\n        if (apiKey === undefined) {\n            throw new InvalidAPIKeyError('Must access with an API key');\n        }\n        if (!this._configManager.getRfqmApiKeyWhitelist().has(apiKey)) {\n            throw new InvalidAPIKeyError('API key not authorized for RFQM access');\n        }\n        const integratorId = this._configManager.getIntegratorIdForApiKey(apiKey);\n        if (!integratorId) {\n            // With a valid configuration this should never happen\n            throw new InvalidAPIKeyError('API key has no associated Integrator ID');\n        }\n        const integrator = this._configManager.getIntegratorByIdOrThrow(integratorId);\n        if (!integrator.allowedChainIds.includes(chainId)) {\n            throw new InvalidAPIKeyError(`API Key not authorized to access chain ${chainId}`);\n        }\n        return { apiKey, integrator };\n    }\n\n    private async _parsePriceParamsAsync(\n        req: express.Request,\n        metaTransactionType: GaslessTypes,\n    ): Promise<{ chainId: number; params: FetchIndicativeQuoteParams }> {\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        schemaUtils.validateSchema(req.query, schemas.indicativeQuoteRequestSchema as any);\n        const { takerAddress } = req.query;\n        const { chainId, params } = await this._parseIndicativeAndFirmQuoteSharedParamsAsync(req, metaTransactionType);\n\n        return {\n            chainId,\n            params: {\n                ...params,\n                takerAddress: takerAddress as string,\n            },\n        };\n    }\n\n    /**\n     * Parse shared params of indicative and firm quotes\n     */\n    private async _parseIndicativeAndFirmQuoteSharedParamsAsync(\n        req: express.Request,\n        metaTransactionType: GaslessTypes,\n    ): Promise<{ chainId: number; params: FetchQuoteParamsBase }> {\n        const chainId = extractChainId(req, this._gaslessSwapServices);\n        const { integrator } = this._validateApiKey(req.header('0x-api-key'), chainId);\n        const { affiliateAddress } = req.query;\n\n        // Parse tokens\n        const sellTokenRaw = req.query.sellToken as string;\n        const buyTokenRaw = req.query.buyToken as string;\n        validateNotNativeTokenOrThrow(sellTokenRaw, chainId, 'sellToken');\n\n        let buyTokenDecimals: number;\n        let sellTokenDecimals: number;\n        let buyTokenContractAddress: string;\n        let sellTokenContractAddress: string;\n\n        try {\n            buyTokenContractAddress = buyTokenRaw.toLocaleLowerCase().startsWith('0x')\n                ? buyTokenRaw\n                : contractAddressForSymbol(buyTokenRaw, chainId);\n            buyTokenDecimals = await this._getServiceForChain(chainId).getTokenDecimalsAsync(buyTokenRaw);\n        } catch (e) {\n            throw new ValidationError([\n                {\n                    field: 'buyToken',\n                    code: ValidationErrorCodes.AddressNotSupported,\n                    reason: `Token ${buyTokenRaw} is currently unsupported`,\n                },\n            ]);\n        }\n\n        try {\n            sellTokenContractAddress = sellTokenRaw.toLocaleLowerCase().startsWith('0x')\n                ? sellTokenRaw\n                : contractAddressForSymbol(sellTokenRaw, chainId);\n            sellTokenDecimals = await this._getServiceForChain(chainId).getTokenDecimalsAsync(sellTokenRaw);\n        } catch {\n            throw new ValidationError([\n                {\n                    field: 'sellToken',\n                    code: ValidationErrorCodes.AddressNotSupported,\n                    reason: `Token ${sellTokenRaw} is currently unsupported`,\n                },\n            ]);\n        }\n\n        // Parse number params\n        const sellAmount =\n            req.query.sellAmount === undefined ? undefined : new BigNumber(req.query.sellAmount as string);\n        const buyAmount = req.query.buyAmount === undefined ? undefined : new BigNumber(req.query.buyAmount as string);\n        const slippagePercentage =\n            req.query.slippagePercentage === undefined\n                ? undefined\n                : new BigNumber(req.query.slippagePercentage as string);\n\n        let feeType: 'volume' | undefined;\n        let feeSellTokenPercentage: BigNumber | undefined;\n        let feeRecipient: string | undefined;\n\n        if (metaTransactionType === GaslessTypes.MetaTransaction) {\n            if (slippagePercentage?.lt(MIN_ALLOWED_SLIPPAGE) || slippagePercentage?.gt(1)) {\n                throw new ValidationError([\n                    {\n                        field: 'slippagePercentage',\n                        code: ValidationErrorCodes.ValueOutOfRange,\n                        reason: `slippagePercentage ${slippagePercentage} is out of range`,\n                    },\n                ]);\n            }\n        } else if (metaTransactionType === GaslessTypes.MetaTransactionV2) {\n            // slippage percentage of tx relay v1 is on scale of 100 which is what percentage means (a fix from zero-g)\n            if (slippagePercentage?.lt(MIN_ALLOWED_SLIPPAGE * 100) || slippagePercentage?.gt(100)) {\n                throw new ValidationError([\n                    {\n                        field: 'slippagePercentage',\n                        code: ValidationErrorCodes.ValueOutOfRange,\n                        reason: `slippagePercentage ${slippagePercentage} is out of range`,\n                    },\n                ]);\n            }\n\n            if (req.query.feeType) {\n                if (req.query.feeType !== 'volume') {\n                    throw new ValidationError([\n                        {\n                            field: 'feeType',\n                            code: ValidationErrorCodes.IncorrectFormat,\n                            reason: `feeType ${req.query.feeType} is of wrong format`,\n                        },\n                    ]);\n                }\n\n                feeType = 'volume';\n                if (req.query.feeSellTokenPercentage === undefined) {\n                    throw new ValidationError([\n                        {\n                            field: 'feeSellTokenPercentage',\n                            code: ValidationErrorCodes.RequiredField,\n                            reason: `feeSellTokenPercentage is a required field when feeType ${feeType} is specified`,\n                        },\n                    ]);\n                }\n                feeSellTokenPercentage = new BigNumber(req.query.feeSellTokenPercentage as string);\n                if (feeSellTokenPercentage.lt(0) || feeSellTokenPercentage.gte(100)) {\n                    throw new ValidationError([\n                        {\n                            field: 'feeSellTokenPercentage',\n                            code: ValidationErrorCodes.ValueOutOfRange,\n                            reason: `feeSellTokenPercentage ${feeSellTokenPercentage} is out of range`,\n                        },\n                    ]);\n                }\n\n                if (req.query.feeRecipient === undefined) {\n                    throw new ValidationError([\n                        {\n                            field: 'feeRecipient',\n                            code: ValidationErrorCodes.RequiredField,\n                            reason: `feeRecipient is a required field when feeType ${feeType} is specified`,\n                        },\n                    ]);\n                }\n                feeRecipient = req.query.feeRecipient as string;\n            }\n        }\n\n        return {\n            chainId,\n            params: {\n                buyAmount,\n                buyToken: buyTokenContractAddress,\n                buyTokenDecimals,\n                integrator,\n                sellAmount,\n                sellToken: sellTokenContractAddress,\n                sellTokenDecimals,\n                affiliateAddress: affiliateAddress as string,\n                slippagePercentage,\n                feeType,\n                feeSellTokenPercentage,\n                feeRecipient,\n            },\n        };\n    }\n\n    private _parseSubmitParams<T extends ExecuteMetaTransactionEip712Context | PermitEip712Context>(\n        req: express.Request,\n    ): {\n        chainId: number;\n        integrator: Integrator;\n        params:\n            | SubmitRfqmSignedQuoteWithApprovalParams<T>\n            | SubmitMetaTransactionSignedQuoteParams<T>\n            | SubmitMetaTransactionV2SignedQuoteParams<T>;\n    } {\n        const chainId = extractChainId(req, this._gaslessSwapServices);\n        const { integrator } = this._validateApiKey(req.header('0x-api-key'), chainId);\n\n        const { approval, trade } = req.body;\n\n        const parsedParams: Partial<\n            SubmitRfqmSignedQuoteWithApprovalParams<T> | SubmitMetaTransactionSignedQuoteParams<T>\n        > = {};\n\n        // Parse approval params\n        if (approval) {\n            if (\n                approval.type === GaslessApprovalTypes.ExecuteMetaTransaction ||\n                approval.type === GaslessApprovalTypes.Permit\n            ) {\n                const eip712 = stringsToEIP712Context(approval.eip712) as T;\n                const signature = stringsToSignature(approval.signature as StringSignatureFields);\n                parsedParams.approval = {\n                    type: approval.type,\n                    eip712,\n                    signature,\n                };\n            } else {\n                throw new ValidationError([\n                    {\n                        field: 'approval',\n                        code: ValidationErrorCodes.FieldInvalid,\n                        reason: `${approval.type} is an invalid value for Approval 'type'`,\n                    },\n                ]);\n            }\n        }\n\n        // Parse trade params\n        if (trade.type === GaslessTypes.OtcOrder) {\n            const order = new OtcOrder(stringsToOtcOrderFields(trade.order as RawOtcOrderFields));\n            const signature = stringsToSignature(trade.signature as StringSignatureFields);\n            parsedParams.trade = {\n                type: trade.type,\n                order,\n                signature,\n            };\n        } else if (trade.type === GaslessTypes.MetaTransaction) {\n            const metaTransaction = new MetaTransaction(\n                stringsToMetaTransactionFields(trade.metaTransaction as RawMetaTransactionFields),\n            );\n            const signature = stringsToSignature(trade.signature as StringSignatureFields);\n            parsedParams.trade = {\n                type: trade.type,\n                metaTransaction,\n                signature,\n            };\n        } else if (trade.type === GaslessTypes.MetaTransactionV2) {\n            // TODO: This needs to be changed\n            const metaTransaction = new MetaTransactionV2(\n                stringsToMetaTransactionFields(trade.metaTransaction as RawMetaTransactionFields),\n            );\n            const signature = stringsToSignature(trade.signature as StringSignatureFields);\n            parsedParams.trade = {\n                type: trade.type,\n                metaTransaction,\n                signature,\n            };\n        } else {\n            throw new ValidationError([\n                {\n                    field: 'type',\n                    code: ValidationErrorCodes.FieldInvalid,\n                    reason: `${trade.type} is an invalid value for Trade 'type'`,\n                },\n            ]);\n        }\n\n        parsedParams.kind = trade.type;\n\n        return {\n            chainId,\n            integrator,\n            params: parsedParams as\n                | SubmitRfqmSignedQuoteWithApprovalParams<T>\n                | SubmitMetaTransactionSignedQuoteParams<T>\n                | SubmitMetaTransactionV2SignedQuoteParams<T>,\n        };\n    }\n}\n\n/**\n * Extracts the Chain Id from the request.\n *\n * Note that legacy RFQm defaulted to a chain ID of \"1\",\n * but that default has been removed for Gasless Swap.\n */\nfunction extractChainId(req: express.Request, services: Map<number, GaslessSwapService>): number {\n    const chainIdFromHeader = req.header('0x-chain-id');\n    if (chainIdFromHeader === undefined) {\n        throw new ValidationError([\n            {\n                field: '0x-chain-id',\n                code: ValidationErrorCodes.FieldInvalid,\n                reason: 'Request must include a chain ID header',\n            },\n        ]);\n    }\n    const chainId = parseInt(chainIdFromHeader, 10);\n    if (Number.isNaN(chainId)) {\n        throw new ValidationError([\n            {\n                field: '0x-chain-id',\n                code: ValidationErrorCodes.FieldInvalid,\n                reason: 'Invalid chain id',\n            },\n        ]);\n    }\n\n    if (!services.has(chainId)) {\n        throw new ValidationError([\n            {\n                field: '0x-chain-id',\n                code: ValidationErrorCodes.FieldInvalid,\n                reason: 'Service unavailable on specified chain',\n            },\n        ]);\n    }\n    return chainId;\n}\n\n/**\n * Gets the token address for a given symbol.\n *\n * Throws if the symbol is not present in @0x/token-metadata\n */\nfunction contractAddressForSymbol(symbol: string, chainId: number): string {\n    const address = getTokenMetadataIfExists(symbol, chainId)?.tokenAddress;\n    if (!address) {\n        throw new Error('Unsupported token');\n    }\n    return address;\n}\n\nfunction validateNotNativeTokenOrThrow(token: string, chainId: number, field: string): boolean {\n    if (isNativeSymbolOrAddress(token, chainId)) {\n        const symbol = nativeWrappedTokenSymbol(chainId);\n        throw new ValidationError([\n            {\n                field,\n                code: ValidationErrorCodes.TokenNotSupported,\n                reason: `Unwrapped Native Asset is not supported. Use ${symbol} instead`,\n            },\n        ]);\n    }\n\n    return true;\n}\n\n/**\n * Get the meta-transaction type to pass to service.\n */\nfunction getMetaTransactionType(baseURL: string): GaslessTypes {\n    if (ZERO_G_PATH.includes(baseURL) || ZERO_G_ALIAS_PATH.includes(baseURL)) {\n        return GaslessTypes.MetaTransaction;\n    }\n    if (TX_RELAY_V1_PATH.includes(baseURL)) {\n        return GaslessTypes.MetaTransactionV2;\n    }\n\n    // This should never happen\n    throw new Error('Unknown gasless base URL');\n}\n"],"version":3}