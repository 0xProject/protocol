574aac55f80cc1070f55e5d5e563e80f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GaslessSwapHandlers = void 0;
// tslint:disable:max-file-line-count
const api_utils_1 = require("@0x/api-utils");
const protocol_utils_1 = require("@0x/protocol-utils");
const token_metadata_1 = require("@0x/token-metadata");
const utils_1 = require("@0x/utils");
const HttpStatus = require("http-status-codes");
const prom_client_1 = require("prom-client");
const schemas_1 = require("../core/schemas");
const types_1 = require("../services/types");
const types_2 = require("../core/types");
const rfqm_health_check_1 = require("../utils/rfqm_health_check");
const rfqm_request_utils_1 = require("../utils/rfqm_request_utils");
const schema_utils_1 = require("../core/schema_utils");
const constants_1 = require("../core/constants");
// Minimum slippage allowed. This value should be kept consistent with the value set in 0x-api
const MIN_ALLOWED_SLIPPAGE = 0.001; // 0.1%
// If the cache is more milliseconds old than the value specified here, it will be refreshed.
const HEALTH_CHECK_RESULT_CACHE_DURATION_MS = 30000;
const ZEROG_GASLESS_SWAP_REQUEST = new prom_client_1.Counter({
    name: 'zerog_gasless_swap_request_total',
    help: 'Number of requests of a gasless swap endpoint',
    labelNames: ['chainId', 'integratorLabel', 'endpoint'],
});
const ZEROG_GASLESS_SWAP_REQUEST_ERROR = new prom_client_1.Counter({
    name: 'zerog_gasless_swap_request_error',
    help: 'Number of request errors of a gasless swap endpoint',
    labelNames: ['chainId', 'integratorLabel', 'endpoint'],
});
/**
 * Logic to bridge Gasless Swap API requests to the `GaslessSwapService` and translate
 * results from the `GaslessSwapService` back to API responses.
 */
class GaslessSwapHandlers {
    constructor(_gaslessSwapServices, _configManager) {
        this._gaslessSwapServices = _gaslessSwapServices;
        this._configManager = _configManager;
        this._cachedHealthCheckResultByChainId = new Map();
    }
    /**
     * Handler for the /price endpoint
     */
    async getPriceAsync(req, res) {
        const metaTransactionType = getMetaTransactionType(req.baseUrl);
        const { chainId, params } = await this._parsePriceParamsAsync(req, metaTransactionType);
        // Consistent with `rfqm_handlers`: not all requests are emitted if they fail parsing
        ZEROG_GASLESS_SWAP_REQUEST.inc({
            chainId,
            integratorLabel: params.integrator.label,
            endpoint: '/price',
        });
        let price;
        try {
            price = await this._getServiceForChain(chainId).fetchPriceAsync(params, metaTransactionType);
        }
        catch (err) {
            ZEROG_GASLESS_SWAP_REQUEST_ERROR.inc({
                chainId,
                integratorLabel: params.integrator.label,
                endpoint: '/price',
            });
            throw err;
        }
        // Result
        res.status(HttpStatus.OK).send({
            liquidityAvailable: price !== null,
            ...price,
        });
    }
    /**
     * Handler for the /quote endpoint
     */
    async getQuoteAsync(req, res) {
        const metaTransactionType = getMetaTransactionType(req.baseUrl);
        // Parse request
        const { chainId, params } = await this._parseFetchFirmQuoteParamsAsync(req, metaTransactionType);
        // Consistent with `rfqm_handlers`: not all requests are emitted if they fail parsing
        ZEROG_GASLESS_SWAP_REQUEST.inc({
            chainId,
            integratorLabel: params.integrator.label,
            endpoint: '/quote',
        });
        let quote;
        try {
            quote = await this._getServiceForChain(chainId).fetchQuoteAsync(params, metaTransactionType);
        }
        catch (err) {
            ZEROG_GASLESS_SWAP_REQUEST_ERROR.inc({
                chainId,
                integratorLabel: params.integrator.label,
                endpoint: '/quote',
            });
            throw err;
        }
        // Result
        res.status(HttpStatus.OK).send({
            liquidityAvailable: quote !== null,
            ...quote,
        });
    }
    /**
     * Handler for the `/healthz` endpoint.
     */
    async getHealthAsync(req, res) {
        const chainId = extractChainId(req, this._gaslessSwapServices);
        const cachedResult = this._cachedHealthCheckResultByChainId.get(chainId);
        let result;
        if (!cachedResult) {
            result = await this._getServiceForChain(chainId).runHealthCheckAsync();
            this._cachedHealthCheckResultByChainId.set(chainId, [result, new Date()]);
        }
        else {
            const cacheAgeMs = Date.now() - cachedResult[1].getTime();
            if (cacheAgeMs >= HEALTH_CHECK_RESULT_CACHE_DURATION_MS) {
                result = await this._getServiceForChain(chainId).runHealthCheckAsync();
                this._cachedHealthCheckResultByChainId.set(chainId, [result, new Date()]);
            }
            else {
                result = cachedResult[0];
            }
        }
        const response = (0, rfqm_health_check_1.transformResultToShortResponse)(result);
        res.status(HttpStatus.OK).send(response);
    }
    /**
     * Handler for the /status/:hash endpoint
     */
    async getStatusAsync(req, res) {
        const chainId = extractChainId(req, this._gaslessSwapServices);
        const { hash } = req.params;
        const status = await this._getServiceForChain(chainId).getStatusAsync(hash);
        status ? res.status(HttpStatus.OK).send(status) : res.status(HttpStatus.NOT_FOUND).send();
    }
    /**
     * Handler for the /submit endpoint
     */
    async processSubmitAsync(req, res) {
        const { chainId, integrator, params } = this._parseSubmitParams(req);
        // Consistent with `rfqm_handlers`: not all requests are emitted if they fail parsing
        ZEROG_GASLESS_SWAP_REQUEST.inc({
            chainId,
            integratorLabel: integrator.label,
            endpoint: '/submit',
        });
        try {
            const response = await this._getServiceForChain(chainId).processSubmitAsync(params, integrator.integratorId);
            res.status(HttpStatus.CREATED).send(response);
        }
        catch (err) {
            ZEROG_GASLESS_SWAP_REQUEST_ERROR.inc({
                chainId,
                integratorLabel: integrator.label,
                endpoint: '/submit',
            });
            req.log.error(err, 'Encountered an error while queuing a signed quote');
            if ((0, api_utils_1.isAPIError)(err)) {
                throw err;
            }
            else {
                throw new api_utils_1.InternalServerError(`An unexpected error occurred`);
            }
        }
    }
    async _parseFetchFirmQuoteParamsAsync(req, metaTransactionType) {
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        schema_utils_1.schemaUtils.validateSchema(req.query, schemas_1.schemas.firmQuoteRequestSchema);
        const takerAddress = req.query.takerAddress;
        const shouldCheckApproval = req.query.checkApproval === 'true' ? true : false;
        const { chainId, params } = await this._parseIndicativeAndFirmQuoteSharedParamsAsync(req, metaTransactionType);
        if (!utils_1.addressUtils.isAddress(takerAddress)) {
            throw new api_utils_1.ValidationError([
                {
                    field: 'takerAddress',
                    code: api_utils_1.ValidationErrorCodes.InvalidAddress,
                    reason: `Must provide a valid takerAddress`,
                },
            ]);
        }
        return {
            chainId,
            params: {
                ...params,
                takerAddress: takerAddress,
                checkApproval: shouldCheckApproval,
            },
        };
    }
    _getServiceForChain(chainId) {
        const service = this._gaslessSwapServices.get(chainId);
        if (!service) {
            throw new Error('No configuration exists for chain');
        }
        return service;
    }
    /**
     * Examines the API key provided in the request, ensures it is valid for RFQM, and fetches the associated
     * integrator ID.
     */
    _validateApiKey(apiKey, chainId) {
        if (apiKey === undefined) {
            throw new api_utils_1.InvalidAPIKeyError('Must access with an API key');
        }
        if (!this._configManager.getRfqmApiKeyWhitelist().has(apiKey)) {
            throw new api_utils_1.InvalidAPIKeyError('API key not authorized for RFQM access');
        }
        const integratorId = this._configManager.getIntegratorIdForApiKey(apiKey);
        if (!integratorId) {
            // With a valid configuration this should never happen
            throw new api_utils_1.InvalidAPIKeyError('API key has no associated Integrator ID');
        }
        const integrator = this._configManager.getIntegratorByIdOrThrow(integratorId);
        if (!integrator.allowedChainIds.includes(chainId)) {
            throw new api_utils_1.InvalidAPIKeyError(`API Key not authorized to access chain ${chainId}`);
        }
        return { apiKey, integrator };
    }
    async _parsePriceParamsAsync(req, metaTransactionType) {
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        schema_utils_1.schemaUtils.validateSchema(req.query, schemas_1.schemas.indicativeQuoteRequestSchema);
        const { takerAddress } = req.query;
        const { chainId, params } = await this._parseIndicativeAndFirmQuoteSharedParamsAsync(req, metaTransactionType);
        return {
            chainId,
            params: {
                ...params,
                takerAddress: takerAddress,
            },
        };
    }
    /**
     * Parse shared params of indicative and firm quotes
     */
    async _parseIndicativeAndFirmQuoteSharedParamsAsync(req, metaTransactionType) {
        const chainId = extractChainId(req, this._gaslessSwapServices);
        const { integrator } = this._validateApiKey(req.header('0x-api-key'), chainId);
        const { affiliateAddress } = req.query;
        // Parse tokens
        const sellTokenRaw = req.query.sellToken;
        const buyTokenRaw = req.query.buyToken;
        validateNotNativeTokenOrThrow(sellTokenRaw, chainId, 'sellToken');
        let buyTokenDecimals;
        let sellTokenDecimals;
        let buyTokenContractAddress;
        let sellTokenContractAddress;
        try {
            buyTokenContractAddress = buyTokenRaw.toLocaleLowerCase().startsWith('0x')
                ? buyTokenRaw
                : contractAddressForSymbol(buyTokenRaw, chainId);
            buyTokenDecimals = await this._getServiceForChain(chainId).getTokenDecimalsAsync(buyTokenRaw);
        }
        catch (e) {
            throw new api_utils_1.ValidationError([
                {
                    field: 'buyToken',
                    code: api_utils_1.ValidationErrorCodes.AddressNotSupported,
                    reason: `Token ${buyTokenRaw} is currently unsupported`,
                },
            ]);
        }
        try {
            sellTokenContractAddress = sellTokenRaw.toLocaleLowerCase().startsWith('0x')
                ? sellTokenRaw
                : contractAddressForSymbol(sellTokenRaw, chainId);
            sellTokenDecimals = await this._getServiceForChain(chainId).getTokenDecimalsAsync(sellTokenRaw);
        }
        catch {
            throw new api_utils_1.ValidationError([
                {
                    field: 'sellToken',
                    code: api_utils_1.ValidationErrorCodes.AddressNotSupported,
                    reason: `Token ${sellTokenRaw} is currently unsupported`,
                },
            ]);
        }
        // Parse number params
        const sellAmount = req.query.sellAmount === undefined ? undefined : new utils_1.BigNumber(req.query.sellAmount);
        const buyAmount = req.query.buyAmount === undefined ? undefined : new utils_1.BigNumber(req.query.buyAmount);
        const slippagePercentage = req.query.slippagePercentage === undefined
            ? undefined
            : new utils_1.BigNumber(req.query.slippagePercentage);
        let feeType;
        let feeSellTokenPercentage;
        let feeRecipient;
        if (metaTransactionType === types_2.GaslessTypes.MetaTransaction) {
            if ((slippagePercentage === null || slippagePercentage === void 0 ? void 0 : slippagePercentage.lt(MIN_ALLOWED_SLIPPAGE)) || (slippagePercentage === null || slippagePercentage === void 0 ? void 0 : slippagePercentage.gt(1))) {
                throw new api_utils_1.ValidationError([
                    {
                        field: 'slippagePercentage',
                        code: api_utils_1.ValidationErrorCodes.ValueOutOfRange,
                        reason: `slippagePercentage ${slippagePercentage} is out of range`,
                    },
                ]);
            }
        }
        else if (metaTransactionType === types_2.GaslessTypes.MetaTransactionV2) {
            // slippage percentage of tx relay v1 is on scale of 100 which is what percentage means (a fix from zero-g)
            if ((slippagePercentage === null || slippagePercentage === void 0 ? void 0 : slippagePercentage.lt(MIN_ALLOWED_SLIPPAGE * 100)) || (slippagePercentage === null || slippagePercentage === void 0 ? void 0 : slippagePercentage.gt(100))) {
                throw new api_utils_1.ValidationError([
                    {
                        field: 'slippagePercentage',
                        code: api_utils_1.ValidationErrorCodes.ValueOutOfRange,
                        reason: `slippagePercentage ${slippagePercentage} is out of range`,
                    },
                ]);
            }
            if (req.query.feeType) {
                if (req.query.feeType !== 'volume') {
                    throw new api_utils_1.ValidationError([
                        {
                            field: 'feeType',
                            code: api_utils_1.ValidationErrorCodes.IncorrectFormat,
                            reason: `feeType ${req.query.feeType} is of wrong format`,
                        },
                    ]);
                }
                feeType = 'volume';
                if (req.query.feeSellTokenPercentage === undefined) {
                    throw new api_utils_1.ValidationError([
                        {
                            field: 'feeSellTokenPercentage',
                            code: api_utils_1.ValidationErrorCodes.RequiredField,
                            reason: `feeSellTokenPercentage is a required field when feeType ${feeType} is specified`,
                        },
                    ]);
                }
                feeSellTokenPercentage = new utils_1.BigNumber(req.query.feeSellTokenPercentage);
                if (feeSellTokenPercentage.lt(0) || feeSellTokenPercentage.gte(100)) {
                    throw new api_utils_1.ValidationError([
                        {
                            field: 'feeSellTokenPercentage',
                            code: api_utils_1.ValidationErrorCodes.ValueOutOfRange,
                            reason: `feeSellTokenPercentage ${feeSellTokenPercentage} is out of range`,
                        },
                    ]);
                }
                if (req.query.feeRecipient === undefined) {
                    throw new api_utils_1.ValidationError([
                        {
                            field: 'feeRecipient',
                            code: api_utils_1.ValidationErrorCodes.RequiredField,
                            reason: `feeRecipient is a required field when feeType ${feeType} is specified`,
                        },
                    ]);
                }
                feeRecipient = req.query.feeRecipient;
            }
        }
        return {
            chainId,
            params: {
                buyAmount,
                buyToken: buyTokenContractAddress,
                buyTokenDecimals,
                integrator,
                sellAmount,
                sellToken: sellTokenContractAddress,
                sellTokenDecimals,
                affiliateAddress: affiliateAddress,
                slippagePercentage,
                feeType,
                feeSellTokenPercentage,
                feeRecipient,
            },
        };
    }
    _parseSubmitParams(req) {
        const chainId = extractChainId(req, this._gaslessSwapServices);
        const { integrator } = this._validateApiKey(req.header('0x-api-key'), chainId);
        const { approval, trade } = req.body;
        const parsedParams = {};
        // Parse approval params
        if (approval) {
            if (approval.type === types_2.GaslessApprovalTypes.ExecuteMetaTransaction ||
                approval.type === types_2.GaslessApprovalTypes.Permit) {
                const eip712 = (0, rfqm_request_utils_1.stringsToEIP712Context)(approval.eip712);
                const signature = (0, rfqm_request_utils_1.stringsToSignature)(approval.signature);
                parsedParams.approval = {
                    type: approval.type,
                    eip712,
                    signature,
                };
            }
            else {
                throw new api_utils_1.ValidationError([
                    {
                        field: 'approval',
                        code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                        reason: `${approval.type} is an invalid value for Approval 'type'`,
                    },
                ]);
            }
        }
        // Parse trade params
        if (trade.type === types_2.GaslessTypes.OtcOrder) {
            const order = new protocol_utils_1.OtcOrder((0, rfqm_request_utils_1.stringsToOtcOrderFields)(trade.order));
            const signature = (0, rfqm_request_utils_1.stringsToSignature)(trade.signature);
            parsedParams.trade = {
                type: trade.type,
                order,
                signature,
            };
        }
        else if (trade.type === types_2.GaslessTypes.MetaTransaction) {
            const metaTransaction = new protocol_utils_1.MetaTransaction((0, rfqm_request_utils_1.stringsToMetaTransactionFields)(trade.metaTransaction));
            const signature = (0, rfqm_request_utils_1.stringsToSignature)(trade.signature);
            parsedParams.trade = {
                type: trade.type,
                metaTransaction,
                signature,
            };
        }
        else if (trade.type === types_2.GaslessTypes.MetaTransactionV2) {
            // TODO: This needs to be changed
            const metaTransaction = new types_1.MetaTransactionV2((0, rfqm_request_utils_1.stringsToMetaTransactionFields)(trade.metaTransaction));
            const signature = (0, rfqm_request_utils_1.stringsToSignature)(trade.signature);
            parsedParams.trade = {
                type: trade.type,
                metaTransaction,
                signature,
            };
        }
        else {
            throw new api_utils_1.ValidationError([
                {
                    field: 'type',
                    code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                    reason: `${trade.type} is an invalid value for Trade 'type'`,
                },
            ]);
        }
        parsedParams.kind = trade.type;
        return {
            chainId,
            integrator,
            params: parsedParams,
        };
    }
}
exports.GaslessSwapHandlers = GaslessSwapHandlers;
/**
 * Extracts the Chain Id from the request.
 *
 * Note that legacy RFQm defaulted to a chain ID of "1",
 * but that default has been removed for Gasless Swap.
 */
function extractChainId(req, services) {
    const chainIdFromHeader = req.header('0x-chain-id');
    if (chainIdFromHeader === undefined) {
        throw new api_utils_1.ValidationError([
            {
                field: '0x-chain-id',
                code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                reason: 'Request must include a chain ID header',
            },
        ]);
    }
    const chainId = parseInt(chainIdFromHeader, 10);
    if (Number.isNaN(chainId)) {
        throw new api_utils_1.ValidationError([
            {
                field: '0x-chain-id',
                code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                reason: 'Invalid chain id',
            },
        ]);
    }
    if (!services.has(chainId)) {
        throw new api_utils_1.ValidationError([
            {
                field: '0x-chain-id',
                code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                reason: 'Service unavailable on specified chain',
            },
        ]);
    }
    return chainId;
}
/**
 * Gets the token address for a given symbol.
 *
 * Throws if the symbol is not present in @0x/token-metadata
 */
function contractAddressForSymbol(symbol, chainId) {
    var _a;
    const address = (_a = (0, token_metadata_1.getTokenMetadataIfExists)(symbol, chainId)) === null || _a === void 0 ? void 0 : _a.tokenAddress;
    if (!address) {
        throw new Error('Unsupported token');
    }
    return address;
}
function validateNotNativeTokenOrThrow(token, chainId, field) {
    if ((0, token_metadata_1.isNativeSymbolOrAddress)(token, chainId)) {
        const symbol = (0, token_metadata_1.nativeWrappedTokenSymbol)(chainId);
        throw new api_utils_1.ValidationError([
            {
                field,
                code: api_utils_1.ValidationErrorCodes.TokenNotSupported,
                reason: `Unwrapped Native Asset is not supported. Use ${symbol} instead`,
            },
        ]);
    }
    return true;
}
/**
 * Get the meta-transaction type to pass to service.
 */
function getMetaTransactionType(baseURL) {
    if (constants_1.ZERO_G_PATH.includes(baseURL) || constants_1.ZERO_G_ALIAS_PATH.includes(baseURL)) {
        return types_2.GaslessTypes.MetaTransaction;
    }
    if (constants_1.TX_RELAY_V1_PATH.includes(baseURL)) {
        return types_2.GaslessTypes.MetaTransactionV2;
    }
    // This should never happen
    throw new Error('Unknown gasless base URL');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,