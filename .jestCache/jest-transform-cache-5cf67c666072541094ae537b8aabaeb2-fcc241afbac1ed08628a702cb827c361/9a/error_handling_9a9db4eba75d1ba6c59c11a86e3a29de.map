{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/middleware/error_handling.ts","mappings":";;;AAAA,6CAAwG;AACxG,gDAAgD;AAEhD,2CAAuE;AAEvE,MAAM,UAAW,SAAQ,sBAAc;IACnC,6DAA6D;IAC7D,8DAA8D;IACvD,aAAa,CAAC,GAAU;QAC3B,iDAAiD;QACjD,IACI,IAAA,sBAAU,EAAC,GAAG,CAAC;YACf,oBAAoB,CAAC,GAAG,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,sBAAa,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAC7D;YACE,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;YAClC,MAAM,IAAI,GAAG,GAAG,CAAC,gBAAgB,CAAC;YAClC,OAAO;gBACH,UAAU;gBACV,SAAS,EAAE;oBACP,IAAI;oBACJ,MAAM,EAAE,+BAAsB,CAAC,IAAI,CAAC;iBACvC;aACJ,CAAC;SACL;QACD,uCAAuC;QACvC,OAAO,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;CACJ;AAED,SAAS,oBAAoB,CAAC,KAAmB;IAC7C,OAAO,KAAK,CAAC,UAAU,KAAK,UAAU,CAAC,WAAW,CAAC;AACvD,CAAC;AAEY,QAAA,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;AAC9B,QAAA,YAAY,GAAG,kBAAU,CAAC,eAAe,EAAE,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/middleware/error_handling.ts"],"sourcesContent":["import { APIBaseError, BadRequestError, ErrorUtils as BaseErrorUtils, isAPIError } from '@0x/api-utils';\nimport * as HttpStatus from 'http-status-codes';\n\nimport { APIErrorCodes, apiErrorCodesToReasons } from '../core/errors';\n\nclass ErrorUtils extends BaseErrorUtils {\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public generateError(err: Error): any {\n        // handle error codes that are specific to 0x API\n        if (\n            isAPIError(err) &&\n            isAPIBadRequestError(err) &&\n            Object.values(APIErrorCodes).includes(err.generalErrorCode)\n        ) {\n            const statusCode = err.statusCode;\n            const code = err.generalErrorCode;\n            return {\n                statusCode,\n                errorBody: {\n                    code,\n                    reason: apiErrorCodesToReasons[code],\n                },\n            };\n        }\n        // otherwise use general error handling\n        return super.generateError(err);\n    }\n}\n\nfunction isAPIBadRequestError(error: APIBaseError): error is APIBaseError & BadRequestError<APIErrorCodes> {\n    return error.statusCode === HttpStatus.BAD_REQUEST;\n}\n\nexport const errorUtils = new ErrorUtils();\nexport const errorHandler = errorUtils.getErrorHandler();\n"],"version":3}