107b479e3f8a997e627953e9a3079de1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreatePersistentSignedOrder1604516429383 = exports.OrderEventEndState = void 0;
const typeorm_1 = require("typeorm");
var OrderEventEndState;
(function (OrderEventEndState) {
    OrderEventEndState["Invalid"] = "INVALID";
    OrderEventEndState["Added"] = "ADDED";
    OrderEventEndState["Filled"] = "FILLED";
    OrderEventEndState["FullyFilled"] = "FULLY_FILLED";
    OrderEventEndState["Cancelled"] = "CANCELLED";
    OrderEventEndState["Expired"] = "EXPIRED";
    OrderEventEndState["Unexpired"] = "UNEXPIRED";
    OrderEventEndState["StoppedWatching"] = "STOPPED_WATCHING";
    OrderEventEndState["Unfunded"] = "UNFUNDED";
    OrderEventEndState["FillabilityIncreased"] = "FILLABILITY_INCREASED";
})(OrderEventEndState = exports.OrderEventEndState || (exports.OrderEventEndState = {}));
const OrderEventEndStateStrings = Object.keys(OrderEventEndState)
    .filter((x) => isNaN(parseInt(x, 10)))
    .map((s) => s.toUpperCase());
class CreatePersistentSignedOrder1604516429383 {
    constructor() {
        this.indices = ['maker_address', 'maker_asset_data', 'taker_asset_data', 'fee_recipient_address'].map((colName) => new typeorm_1.TableIndex({ name: `persistent_signed_orders_${colName}`, columnNames: [colName] }));
    }
    // tslint:disable-next-line
    async up(queryRunner) {
        await queryRunner.query(
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line no-useless-escape
        `CREATE TYPE "persistent_signed_orders_state_enum" AS ENUM(\'${OrderEventEndStateStrings.join(
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line no-useless-escape
        `\',\'`)}\');`);
        await queryRunner.createTable(new typeorm_1.Table({
            name: 'persistent_signed_orders',
            columns: [
                { name: 'hash', type: 'varchar', isPrimary: true },
                { name: 'sender_address', type: 'varchar' },
                { name: 'maker_address', type: 'varchar' },
                { name: 'taker_address', type: 'varchar' },
                { name: 'maker_asset_data', type: 'varchar' },
                { name: 'taker_asset_data', type: 'varchar' },
                { name: 'exchange_address', type: 'varchar' },
                { name: 'fee_recipient_address', type: 'varchar' },
                { name: 'expiration_time_seconds', type: 'varchar' },
                { name: 'maker_fee', type: 'varchar' },
                { name: 'taker_fee', type: 'varchar' },
                { name: 'maker_asset_amount', type: 'varchar' },
                { name: 'taker_asset_amount', type: 'varchar' },
                { name: 'salt', type: 'varchar' },
                { name: 'signature', type: 'varchar' },
                { name: 'remaining_fillable_taker_asset_amount', type: 'varchar' },
                { name: 'maker_fee_asset_data', type: 'varchar' },
                { name: 'taker_fee_asset_data', type: 'varchar' },
                {
                    name: 'state',
                    type: 'enum',
                    enum: OrderEventEndStateStrings,
                    default: `'${OrderEventEndState.Added}'`,
                },
            ],
        }), true);
        await queryRunner.createIndices('persistent_signed_orders', this.indices);
    }
    // tslint:disable-next-line
    async down(queryRunner) {
        await queryRunner.dropTable('persistent_signed_orders', true, true, true);
        await queryRunner.query(`DROP TYPE "persistent_signed_orders_state_enum"`);
    }
}
exports.CreatePersistentSignedOrder1604516429383 = CreatePersistentSignedOrder1604516429383;
//# sourceMappingURL=1604516429383-CreatePersistentSignedOrder.js.map