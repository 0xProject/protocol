71fc21edc447446ca2a2161b436d579f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('axios');
jest.mock('../QuoteRequestor', () => {
    return {
        QuoteRequestor: jest.fn().mockImplementation((..._args) => {
            return {
                requestRfqtIndicativeQuotesAsync: mockRequestRfqtIndicativeQuotesAsync,
                requestRfqtFirmQuotesAsync: mockRequestRfqtFirmQuotesAsync,
            };
        }),
    };
});
jest.mock('../../utils/rfq_maker_manager', () => {
    return {
        RfqMakerManager: jest.fn().mockImplementation((..._args) => {
            const rmm = new stream_1.EventEmitter();
            rmm.getRfqtV1MakerOfferings = jest.fn().mockReturnValue([]);
            return rmm;
        }),
    };
});
const types_1 = require("@0x/asset-swapper/lib/src/types");
const utils_1 = require("@0x/utils");
const axios_1 = require("axios");
const stream_1 = require("stream");
const rfq_maker_manager_1 = require("../../utils/rfq_maker_manager");
const QuoteRequestor_1 = require("../QuoteRequestor");
const RefreshingQuoteRequestor_1 = require("../RefreshingQuoteRequestor");
const mockRequestRfqtIndicativeQuotesAsync = jest.fn().mockResolvedValue([]);
const mockRequestRfqtFirmQuotesAsync = jest.fn().mockResolvedValue([]);
// TODO (rhinodavid): Find a better way to initialize mocked classes
const mockRfqMakerManager = jest.mocked(
// tslint:disable-next-line: no-object-literal-type-assertion custom-no-magic-numbers
new rfq_maker_manager_1.RfqMakerManager({}, {}, /* chainId */ 1337));
const mockAxiosInstance = jest.mocked(axios_1.default.create());
describe('RefreshingQuoteRequestor', () => {
    it('refreshes the quote requestor instance on new pairs', () => {
        new RefreshingQuoteRequestor_1.RefreshingQuoteRequestor(mockRfqMakerManager, mockAxiosInstance); // tslint:disable-line: no-unused-expression
        expect(QuoteRequestor_1.QuoteRequestor).toBeCalledTimes(1);
        mockRfqMakerManager.emit(rfq_maker_manager_1.RfqMakerManager.REFRESHED_EVENT);
        expect(QuoteRequestor_1.QuoteRequestor).toBeCalledTimes(2);
    });
    describe('requestRfqtIndicativeQuotesAsync', () => {
        it('passes through arguments to quote requestor', async () => {
            const refreshingQuoteRequestor = new RefreshingQuoteRequestor_1.RefreshingQuoteRequestor(mockRfqMakerManager, mockAxiosInstance);
            await refreshingQuoteRequestor.requestRfqtIndicativeQuotesAsync('0xmakertoken', '0xtakertoken', 
            /* assetFillAmount */ new utils_1.BigNumber(100), types_1.MarketOperation.Buy, 
            /* comparisonPrice */ undefined, {
                integrator: {
                    integratorId: 'uuid-integrator-id',
                    label: 'integrator',
                },
                intentOnFilling: false,
                isIndicative: true,
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorign',
            });
            const args = mockRequestRfqtIndicativeQuotesAsync.mock.calls[0];
            expect(args).toMatchInlineSnapshot(`
                Array [
                  "0xmakertoken",
                  "0xtakertoken",
                  "100",
                  "Buy",
                  undefined,
                  Object {
                    "integrator": Object {
                      "integratorId": "uuid-integrator-id",
                      "label": "integrator",
                    },
                    "intentOnFilling": false,
                    "isIndicative": true,
                    "takerAddress": "0xtakeraddress",
                    "txOrigin": "0xtxorign",
                  },
                ]
            `);
        });
    });
    describe('requestRfqtFirmQuotesAsync', () => {
        it('passes through arguments to quote requestor', async () => {
            const refreshingQuoteRequestor = new RefreshingQuoteRequestor_1.RefreshingQuoteRequestor(mockRfqMakerManager, mockAxiosInstance);
            await refreshingQuoteRequestor.requestRfqtFirmQuotesAsync('0xmakertoken', '0xtakertoken', 
            /* assetFillAmount */ new utils_1.BigNumber(100), types_1.MarketOperation.Buy, 
            /* comparisonPrice */ undefined, {
                integrator: {
                    integratorId: 'uuid-integrator-id',
                    label: 'integrator',
                },
                intentOnFilling: true,
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorign',
            });
            const args = mockRequestRfqtFirmQuotesAsync.mock.calls[0];
            expect(args).toMatchInlineSnapshot(`
                Array [
                  "0xmakertoken",
                  "0xtakertoken",
                  "100",
                  "Buy",
                  undefined,
                  Object {
                    "integrator": Object {
                      "integratorId": "uuid-integrator-id",
                      "label": "integrator",
                    },
                    "intentOnFilling": true,
                    "takerAddress": "0xtakeraddress",
                    "txOrigin": "0xtxorign",
                  },
                ]
            `);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,