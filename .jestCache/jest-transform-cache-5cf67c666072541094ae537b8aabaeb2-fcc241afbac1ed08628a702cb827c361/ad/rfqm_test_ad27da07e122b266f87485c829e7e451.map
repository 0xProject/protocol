{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/rfqm_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/rfqm_test.ts"],"sourcesContent":["// tslint:disable:max-file-line-count custom-no-magic-numbers\r\nimport { SignatureType } from '@0x/asset-swapper';\r\nimport { ContractAddresses } from '@0x/contract-addresses';\r\nimport { ethSignHashWithKey, MetaTransaction, OtcOrder } from '@0x/protocol-utils';\r\nimport { BigNumber } from '@0x/utils';\r\nimport { Web3Wrapper } from '@0x/web3-wrapper';\r\nimport Axios, { AxiosInstance } from 'axios';\r\nimport AxiosMockAdapter from 'axios-mock-adapter';\r\nimport { expect } from 'chai';\r\nimport { TransactionReceiptStatus } from 'ethereum-types';\r\nimport { BigNumber as EthersBigNumber, ethers } from 'ethers';\r\nimport { Server } from 'http';\r\nimport * as HttpStatus from 'http-status-codes';\r\nimport Redis from 'ioredis';\r\nimport { Producer } from 'sqs-producer';\r\nimport * as request from 'supertest';\r\nimport { anyString, anything, deepEqual, instance, mock, when } from 'ts-mockito';\r\nimport { DataSource } from 'typeorm';\r\n\r\nimport * as config from '../src/config';\r\nimport {\r\n    ADMIN_PATH,\r\n    DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n    ETH_DECIMALS,\r\n    ONE_MINUTE_MS,\r\n    ONE_SECOND_MS,\r\n    RFQM_PATH,\r\n    ZERO,\r\n} from '../src/core/constants';\r\nimport { RfqmV2JobEntity, RfqmV2QuoteEntity } from '../src/entities';\r\nimport { RfqmJobStatus, RfqmOrderTypes, StoredOtcOrder } from '../src/entities/types';\r\nimport {\r\n    buildRfqAdminService,\r\n    buildRfqMakerService,\r\n    runHttpRfqmServiceAsync,\r\n} from '../src/runners/http_rfqm_service_runner';\r\nimport { FeeService } from '../src/services/fee_service';\r\nimport { RfqmService } from '../src/services/rfqm_service';\r\nimport { RfqMakerBalanceCacheService } from '../src/services/rfq_maker_balance_cache_service';\r\nimport { GaslessApprovalTypes, GaslessTypes, PermitEip712Types, StoredFee } from '../src/core/types';\r\nimport { CacheClient } from '../src/utils/cache_client';\r\nimport { ConfigManager } from '../src/utils/config_manager';\r\nimport { QuoteServerClient } from '../src/utils/quote_server_client';\r\nimport { RfqmDbUtils, storedOtcOrderToOtcOrder } from '../src/utils/rfqm_db_utils';\r\nimport { RfqBlockchainUtils } from '../src/utils/rfq_blockchain_utils';\r\nimport { RfqMakerDbUtils } from '../src/utils/rfq_maker_db_utils';\r\nimport { RfqMakerManager } from '../src/utils/rfq_maker_manager';\r\nimport { BLOCK_FINALITY_THRESHOLD } from '../src/utils/SubmissionContext';\r\nimport { TokenMetadataManager } from '../src/utils/TokenMetadataManager';\r\n\r\nimport {\r\n    CONTRACT_ADDRESSES,\r\n    getProvider,\r\n    MATCHA_AFFILIATE_ADDRESS,\r\n    MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\r\n    MOCK_PERMIT_APPROVAL,\r\n    TEST_DECODED_RFQ_ORDER_FILLED_EVENT_LOG,\r\n    TEST_RFQ_ORDER_FILLED_EVENT_LOG,\r\n} from './constants';\r\nimport { setupDependenciesAsync, TeardownDependenciesFunctionHandle } from './test_utils/deployment';\r\nimport { initDbDataSourceAsync } from './test_utils/initDbDataSourceAsync';\r\n\r\nconst MOCK_WORKER_REGISTRY_ADDRESS = '0x1023331a469c6391730ff1E2749422CE8873EC38';\r\nconst API_KEY = 'koolApiKey';\r\nconst ADMIN_API_KEY = 'adminApiKey';\r\nconst INTEGRATOR_ID = 'koolIntegratorId';\r\nconst contractAddresses: ContractAddresses = CONTRACT_ADDRESSES;\r\nconst WORKER_FULL_BALANCE_WEI = new BigNumber(1).shiftedBy(ETH_DECIMALS);\r\n\r\n// RFQM Market Maker request specific constants\r\nconst MARKET_MAKER_1 = 'https://mock-rfqt1.club';\r\nconst MARKET_MAKER_2 = 'https://mock-rfqt2.club';\r\nconst MARKET_MAKER_3 = 'https://mock-rfqt3.club';\r\nconst MARKET_MAKER_2_ADDR = '0xbEA29fE10caed0E1a65A7AdBddd254dD372e83Ff';\r\nconst MARKET_MAKER_3_ADDR = '0xA84f003D3a6F62c5dF218c7fb7b0EFB766b5AC07';\r\nconst GAS_PRICE = new BigNumber(100);\r\n\r\nconst MOCK_META_TX_CALL_DATA = '0x123';\r\nconst RANDOM_VALID_SIGNATURE = {\r\n    r: '0x72ba2125d4efe1f9cc77882138ed94cbd485f8897fe6d9fe34854906634fc59d',\r\n    s: '0x1e19d3d29ab2855debc62a1df98a727673b8bf31c4da3a391a6eaea465920ff2',\r\n    v: 27,\r\n    signatureType: SignatureType.EthSign,\r\n};\r\nconst SAFE_EXPIRY = '1903620548';\r\nconst GAS_ESTIMATE = 165000;\r\nconst WORKER_ADDRESS = '0xaWorkerAddress';\r\nconst FIRST_TRANSACTION_HASH = '0xfirstTxHash';\r\nconst FIRST_SIGNED_TRANSACTION = '0xfirstSignedTransaction';\r\nconst TX_STATUS: TransactionReceiptStatus = 1;\r\n// it's over 9K\r\nconst MINED_BLOCK = 9001;\r\n// the tx should be finalized\r\nconst CURRENT_BLOCK = MINED_BLOCK + BLOCK_FINALITY_THRESHOLD;\r\nconst MOCK_EXCHANGE_PROXY = '0xtheExchangeProxy';\r\nconst SUCCESSFUL_TRANSACTION_RECEIPT = {\r\n    blockHash: '0xaBlockHash',\r\n    blockNumber: MINED_BLOCK,\r\n    byzantium: true,\r\n    confirmations: 2,\r\n    contractAddress: '',\r\n    cumulativeGasUsed: EthersBigNumber.from(150000),\r\n    effectiveGasPrice: EthersBigNumber.from(1000),\r\n    from: WORKER_ADDRESS,\r\n    gasUsed: EthersBigNumber.from(GAS_ESTIMATE),\r\n    logs: [TEST_RFQ_ORDER_FILLED_EVENT_LOG],\r\n    logsBloom: '',\r\n    status: TX_STATUS,\r\n    to: MOCK_EXCHANGE_PROXY,\r\n    transactionHash: FIRST_TRANSACTION_HASH,\r\n    transactionIndex: 5,\r\n    type: 2,\r\n};\r\n\r\nconst MOCK_RFQM_JOB = new RfqmV2JobEntity({\r\n    chainId: 1337,\r\n    createdAt: new Date(),\r\n    expiry: new BigNumber(Date.now()),\r\n    fee: {\r\n        amount: '1000',\r\n        token: '0x123',\r\n        type: 'fixed',\r\n    },\r\n    integratorId: null,\r\n    makerUri: MARKET_MAKER_1,\r\n    order: {\r\n        order: {\r\n            chainId: '1337',\r\n            expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                new BigNumber(SAFE_EXPIRY),\r\n                ZERO,\r\n                new BigNumber(SAFE_EXPIRY),\r\n            ).toString(),\r\n            maker: '0x123',\r\n            makerAmount: '1',\r\n            makerToken: '0x123',\r\n            taker: '0x123',\r\n            takerAmount: '1',\r\n            takerToken: '0x123',\r\n            txOrigin: '0x123',\r\n            verifyingContract: '0x123',\r\n        },\r\n        type: RfqmOrderTypes.Otc,\r\n    },\r\n    orderHash: '0x288d4d771179738ee9ca60f14df74612fb1ca43dfbc3bbb49dd9226a19747c11',\r\n    status: RfqmJobStatus.PendingSubmitted,\r\n    updatedAt: new Date(),\r\n    workerAddress: null,\r\n    lastLookResult: null,\r\n    affiliateAddress: MATCHA_AFFILIATE_ADDRESS,\r\n    takerSpecifiedSide: 'makerToken',\r\n});\r\n\r\njest.setTimeout(ONE_MINUTE_MS * 2);\r\nlet teardownDependencies: TeardownDependenciesFunctionHandle;\r\n\r\ndescribe('RFQM Integration', () => {\r\n    let app: Express.Application;\r\n    let axiosClient: AxiosInstance;\r\n    let cacheClient: CacheClient;\r\n    let dataSource: DataSource;\r\n    let dbUtils: RfqmDbUtils;\r\n    let mockAxios: AxiosMockAdapter;\r\n    let rfqBlockchainUtilsMock: RfqBlockchainUtils;\r\n    let rfqmServiceChainId1337: RfqmService;\r\n    let rfqmServiceChainId3: RfqmService;\r\n    let server: Server;\r\n    let takerAddress: string;\r\n\r\n    beforeAll(async () => {\r\n        teardownDependencies = await setupDependenciesAsync(['postgres', 'ganache', 'redis']);\r\n\r\n        // Create a Provider\r\n        const provider = getProvider();\r\n        const web3Wrapper = new Web3Wrapper(provider);\r\n        [takerAddress] = await web3Wrapper.getAvailableAddressesAsync();\r\n\r\n        // Build dependencies\r\n        // Create the mock FeeService\r\n        const feeServiceMock = mock(FeeService);\r\n        when(feeServiceMock.getGasPriceEstimationAsync()).thenResolve(GAS_PRICE);\r\n        when(feeServiceMock.calculateFeeAsync(anything(), anything())).thenResolve({\r\n            feeWithDetails: {\r\n                token: '0xToken',\r\n                amount: new BigNumber(300),\r\n                type: 'fixed',\r\n                details: {\r\n                    feeModelVersion: 1,\r\n                    kind: 'default',\r\n                    gasFeeAmount: new BigNumber(100),\r\n                    gasPrice: GAS_PRICE,\r\n                    zeroExFeeAmount: new BigNumber(200),\r\n                    tradeSizeBps: 4,\r\n                    feeTokenBaseUnitPriceUsd: new BigNumber(30),\r\n                    takerTokenBaseUnitPriceUsd: null,\r\n                    makerTokenBaseUnitPriceUsd: new BigNumber(20),\r\n                },\r\n                breakdown: {\r\n                    gas: {\r\n                        amount: new BigNumber(100),\r\n                        details: {\r\n                            gasPrice: GAS_PRICE,\r\n                            estimatedGas: new BigNumber(1),\r\n                        },\r\n                    },\r\n                    zeroEx: {\r\n                        amount: new BigNumber(200),\r\n                        details: {\r\n                            kind: 'volume',\r\n                            tradeSizeBps: 4,\r\n                        },\r\n                    },\r\n                },\r\n                conversionRates: {\r\n                    nativeTokenBaseUnitPriceUsd: new BigNumber(30),\r\n                    feeTokenBaseUnitPriceUsd: new BigNumber(30),\r\n                    takerTokenBaseUnitPriceUsd: null,\r\n                    makerTokenBaseUnitPriceUsd: new BigNumber(20),\r\n                },\r\n            },\r\n        });\r\n        const feeServiceInstance = instance(feeServiceMock);\r\n\r\n        // Create the mock ConfigManager\r\n        const configManagerMock = mock(ConfigManager);\r\n        when(configManagerMock.getAdminApiKey()).thenReturn(ADMIN_API_KEY);\r\n        when(configManagerMock.getRfqmApiKeyWhitelist()).thenReturn(new Set([API_KEY]));\r\n        when(configManagerMock.getIntegratorIdForApiKey(API_KEY)).thenReturn(INTEGRATOR_ID);\r\n        when(configManagerMock.getIntegratorByIdOrThrow(INTEGRATOR_ID)).thenReturn({\r\n            integratorId: INTEGRATOR_ID,\r\n            apiKeys: [API_KEY],\r\n            allowedChainIds: [1337],\r\n            label: 'Test',\r\n            rfqm: true,\r\n            plp: false,\r\n            rfqt: false,\r\n        });\r\n        const configManager = instance(configManagerMock);\r\n\r\n        // Create Axios client and mock\r\n        axiosClient = Axios.create();\r\n        mockAxios = new AxiosMockAdapter(axiosClient);\r\n\r\n        // Create the mock rfqBlockchainUtils\r\n        const validationResponse: [BigNumber, BigNumber] = [new BigNumber(1), new BigNumber(1)];\r\n        rfqBlockchainUtilsMock = mock(RfqBlockchainUtils);\r\n        when(\r\n            rfqBlockchainUtilsMock.generateMetaTransaction(anything(), anything(), anything(), anything(), anything()),\r\n        ).thenCall((_rfqOrder, _signature, _taker, _takerAmount, chainId) => new MetaTransaction({ chainId }));\r\n        when(rfqBlockchainUtilsMock.generateMetaTransactionCallData(anything(), anything(), anything())).thenReturn(\r\n            MOCK_META_TX_CALL_DATA,\r\n        );\r\n        when(\r\n            rfqBlockchainUtilsMock.validateMetaTransactionOrThrowAsync(anything(), anything(), anything(), anything()),\r\n        ).thenResolve(validationResponse);\r\n        when(rfqBlockchainUtilsMock.getTokenBalancesAsync(anything())).thenResolve([new BigNumber(1)]);\r\n        when(rfqBlockchainUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([new BigNumber(1)]);\r\n        when(rfqBlockchainUtilsMock.getNonceAsync(anything())).thenResolve(1);\r\n        when(rfqBlockchainUtilsMock.estimateGasForAsync(anything())).thenResolve(GAS_ESTIMATE);\r\n        when(rfqBlockchainUtilsMock.signTransactionAsync(anything())).thenResolve({\r\n            signedTransaction: FIRST_SIGNED_TRANSACTION,\r\n            transactionHash: FIRST_TRANSACTION_HASH,\r\n        });\r\n        when(rfqBlockchainUtilsMock.submitSignedTransactionAsync(FIRST_SIGNED_TRANSACTION)).thenResolve(\r\n            FIRST_TRANSACTION_HASH,\r\n        );\r\n        when(rfqBlockchainUtilsMock.getReceiptsAsync(deepEqual([FIRST_TRANSACTION_HASH]))).thenResolve([\r\n            SUCCESSFUL_TRANSACTION_RECEIPT,\r\n        ]);\r\n        when(rfqBlockchainUtilsMock.getCurrentBlockAsync()).thenResolve(CURRENT_BLOCK);\r\n        when(rfqBlockchainUtilsMock.getExchangeProxyAddress()).thenReturn(MOCK_EXCHANGE_PROXY);\r\n        when(\r\n            rfqBlockchainUtilsMock.decodeMetaTransactionCallDataAndValidateAsync(anyString(), anyString(), anything()),\r\n        ).thenResolve(validationResponse);\r\n        when(rfqBlockchainUtilsMock.getDecodedRfqOrderFillEventLogFromLogs(anything())).thenReturn(\r\n            TEST_DECODED_RFQ_ORDER_FILLED_EVENT_LOG,\r\n        );\r\n        when(rfqBlockchainUtilsMock.getAccountBalanceAsync(MOCK_WORKER_REGISTRY_ADDRESS)).thenResolve(\r\n            WORKER_FULL_BALANCE_WEI,\r\n        );\r\n        const rfqBlockchainUtils = instance(rfqBlockchainUtilsMock);\r\n\r\n        const tokenMetadataManagerMock = mock(TokenMetadataManager);\r\n        when(tokenMetadataManagerMock.getTokenDecimalsAsync(anything())).thenResolve(18);\r\n        const tokenMetadataManager = instance(tokenMetadataManagerMock);\r\n\r\n        interface SqsResponse {\r\n            Id: string;\r\n            MD5OfMessageBody: string;\r\n            MessageId: string;\r\n        }\r\n        const sqsResponse: SqsResponse[] = [\r\n            {\r\n                Id: 'id',\r\n                MD5OfMessageBody: 'MD5OfMessageBody',\r\n                MessageId: 'MessageId',\r\n            },\r\n        ];\r\n\r\n        // Create the dbUtils\r\n        dataSource = await initDbDataSourceAsync();\r\n        dbUtils = new RfqmDbUtils(dataSource);\r\n\r\n        // Create the mock sqsProducer\r\n        const sqsProducerMock = mock(Producer);\r\n        when(sqsProducerMock.send(anything())).thenResolve(sqsResponse);\r\n        when(sqsProducerMock.queueSize()).thenResolve(0);\r\n        const sqsProducer = instance(sqsProducerMock);\r\n\r\n        // Create the quote server client\r\n        const quoteServerClient = new QuoteServerClient(axiosClient);\r\n\r\n        // Create the CacheClient\r\n        const redis = new Redis();\r\n        cacheClient = new CacheClient(redis);\r\n\r\n        // Create the maker balance cache service\r\n        const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\r\n        when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve(\r\n            [new BigNumber(200000000000000000)],\r\n            [new BigNumber(200000000000000000), new BigNumber(200000000000000000)],\r\n        );\r\n        const rfqMakerBalanceCacheService = instance(rfqMakerBalanceCacheServiceMock);\r\n\r\n        // Create the mock RfqMakerManager\r\n        const rfqMakerManagerMock = mock(RfqMakerManager);\r\n        when(\r\n            rfqMakerManagerMock.getRfqmV2MakerUrisForPair(anyString(), anyString(), anything(), anything()),\r\n        ).thenReturn([MARKET_MAKER_2, MARKET_MAKER_3]);\r\n        when(rfqMakerManagerMock.getRfqmV2MakerOfferings()).thenReturn({\r\n            'https://mock-rfqm1.club': [\r\n                ['0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c', '0x0b1ba0af832d7c05fd64161e0db78e85978e8082'],\r\n            ],\r\n        });\r\n        const rfqMakerManager = instance(rfqMakerManagerMock);\r\n        rfqmServiceChainId1337 = new RfqmService(\r\n            1337,\r\n            feeServiceInstance,\r\n            /* feeModelVersion */ 0,\r\n            contractAddresses,\r\n            MOCK_WORKER_REGISTRY_ADDRESS,\r\n            rfqBlockchainUtils,\r\n            dbUtils,\r\n            sqsProducer,\r\n            quoteServerClient,\r\n            DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n            cacheClient,\r\n            rfqMakerBalanceCacheService,\r\n            rfqMakerManager,\r\n            tokenMetadataManager,\r\n        );\r\n\r\n        // Create another RFQM Service for chain ID 3 that returns 0 offering\r\n        const rfqMakerManagerChain3Mock = mock(RfqMakerManager);\r\n        when(rfqMakerManagerChain3Mock.getRfqmV2MakerOfferings()).thenReturn({\r\n            'https://mock-rfqm1.club': [],\r\n        });\r\n        const rfqMakerManagerChainId3 = instance(rfqMakerManagerChain3Mock);\r\n        rfqmServiceChainId3 = new RfqmService(\r\n            3,\r\n            feeServiceInstance,\r\n            /* feeModelVersion */ 0,\r\n            contractAddresses,\r\n            MOCK_WORKER_REGISTRY_ADDRESS,\r\n            rfqBlockchainUtils,\r\n            dbUtils,\r\n            sqsProducer,\r\n            quoteServerClient,\r\n            DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n            cacheClient,\r\n            rfqMakerBalanceCacheService,\r\n            rfqMakerManagerChainId3,\r\n            tokenMetadataManager,\r\n        );\r\n\r\n        const rfqAdminService = buildRfqAdminService(dbUtils);\r\n        const rfqMakerService = buildRfqMakerService(new RfqMakerDbUtils(dataSource), configManager);\r\n\r\n        // Start the server\r\n        const res = await runHttpRfqmServiceAsync(\r\n            new Map([\r\n                [1337, rfqmServiceChainId1337],\r\n                [3, rfqmServiceChainId3],\r\n            ]),\r\n            new Map(),\r\n            rfqAdminService,\r\n            rfqMakerService,\r\n            configManager,\r\n            config.defaultHttpServiceConfig,\r\n            dataSource,\r\n            false,\r\n        );\r\n        app = res.app;\r\n        server = res.server;\r\n    });\r\n\r\n    afterEach(async () => {\r\n        await dataSource.query('TRUNCATE TABLE rfqm_quotes CASCADE;');\r\n        await dataSource.query('TRUNCATE TABLE rfqm_jobs CASCADE;');\r\n        await dataSource.query('TRUNCATE TABLE rfqm_transaction_submissions CASCADE;');\r\n        await dataSource.query('TRUNCATE TABLE rfqm_v2_quotes CASCADE;');\r\n        await dataSource.query('TRUNCATE TABLE rfqm_v2_jobs CASCADE;');\r\n        await dataSource.query('TRUNCATE TABLE rfqm_v2_transaction_submissions CASCADE;');\r\n    });\r\n\r\n    afterAll(async () => {\r\n        await new Promise<void>((resolve, reject) => {\r\n            server.close((err?: Error) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                resolve();\r\n            });\r\n        });\r\n        await cacheClient.closeAsync();\r\n        if (!teardownDependencies()) {\r\n            throw new Error('Failed to tear down dependencies');\r\n        }\r\n    });\r\n\r\n    describe('rfqm/v1/healthz', () => {\r\n        it('should return a 200 OK with active pairs', async () => {\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/healthz`)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.OK)\r\n                .expect('Content-Type', /json/);\r\n            expect(appResponse.body.pairs[0][0]).to.equal('0x0b1ba0af832d7c05fd64161e0db78e85978e8082');\r\n            expect(appResponse.body.pairs[0][1]).to.equal('0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c');\r\n        });\r\n\r\n        // This test is to cover this issue: https://github.com/0xProject/0x-rfq-api/pull/200\r\n        it('should return correct values for different chains', async () => {\r\n            const chainId3HealthzResponse = await request(app)\r\n                .get(`${RFQM_PATH}/healthz`)\r\n                .set('0x-chain-id', '3')\r\n                .expect(HttpStatus.OK)\r\n                .expect('Content-Type', /json/);\r\n            // tslint:disable-next-line: no-unused-expression\r\n            expect(chainId3HealthzResponse.body.pairs).to.be.an('array').that.is.empty;\r\n\r\n            const chainId1337HealthzResponse = await request(app)\r\n                .get(`${RFQM_PATH}/healthz`)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.OK)\r\n                .expect('Content-Type', /json/);\r\n            expect(chainId1337HealthzResponse.body.pairs[0][0]).to.equal('0x0b1ba0af832d7c05fd64161e0db78e85978e8082');\r\n            expect(chainId1337HealthzResponse.body.pairs[0][1]).to.equal('0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c');\r\n        });\r\n    });\r\n\r\n    describe('rfqm/v1/price', () => {\r\n        it('should return a 200 OK with an indicative quote for buys', async () => {\r\n            const buyAmount = 200000000000000000;\r\n            const winningQuote = 100000000000000000;\r\n            const losingQuote = 150000000000000000;\r\n            const zeroExApiParams = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'WETH',\r\n                buyAmount: buyAmount.toString(),\r\n                takerAddress,\r\n                intentOnFilling: 'false',\r\n                skipValidation: 'true',\r\n            });\r\n\r\n            const baseResponse = {\r\n                makerAmount: buyAmount.toString(),\r\n                makerToken: contractAddresses.zrxToken,\r\n                takerToken: contractAddresses.etherToken,\r\n                expiry: '1903620548', // in the year 2030\r\n            };\r\n\r\n            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {\r\n                ...baseResponse,\r\n                takerAmount: winningQuote.toString(),\r\n                maker: MARKET_MAKER_2_ADDR,\r\n            });\r\n            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {\r\n                ...baseResponse,\r\n                takerAmount: losingQuote.toString(),\r\n                maker: MARKET_MAKER_3_ADDR,\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/price?${zeroExApiParams.toString()}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.OK)\r\n                .expect('Content-Type', /json/);\r\n\r\n            const expectedPrice = '0.5';\r\n            expect(appResponse.body.liquidityAvailable).to.equal(true);\r\n            expect(appResponse.body.price).to.equal(expectedPrice);\r\n        });\r\n\r\n        it('should return a 200 OK with an indicative quote for sells', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const winningQuote = 200000000000000000;\r\n            const losingQuote = 150000000000000000;\r\n            const zeroExApiParams = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'WETH',\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n                intentOnFilling: 'false',\r\n                skipValidation: 'true',\r\n            });\r\n\r\n            const baseResponse = {\r\n                takerAmount: sellAmount.toString(),\r\n                makerToken: contractAddresses.zrxToken,\r\n                takerToken: contractAddresses.etherToken,\r\n                expiry: '1903620548', // in the year 2030\r\n            };\r\n\r\n            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {\r\n                ...baseResponse,\r\n                makerAmount: winningQuote.toString(),\r\n                maker: MARKET_MAKER_2_ADDR,\r\n            });\r\n            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {\r\n                ...baseResponse,\r\n                makerAmount: losingQuote.toString(),\r\n                maker: MARKET_MAKER_3_ADDR,\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/price?${zeroExApiParams.toString()}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.OK)\r\n                .expect('Content-Type', /json/);\r\n\r\n            const expectedPrice = '2';\r\n            expect(appResponse.body.liquidityAvailable).to.equal(true);\r\n            expect(appResponse.body.price).to.equal(expectedPrice);\r\n        });\r\n\r\n        it('should return a 200 OK, liquidityAvailable === false if no valid quotes found', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const quotedAmount = 200000000000000000;\r\n            const params = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'WETH',\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n                intentOnFilling: 'false',\r\n                skipValidation: 'true',\r\n            });\r\n\r\n            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {\r\n                makerAmount: quotedAmount.toString(),\r\n                takerAmount: sellAmount.toString(),\r\n                makerToken: contractAddresses.zrxToken,\r\n                takerToken: contractAddresses.etherToken,\r\n                expiry: '0', // already expired\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.OK)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.liquidityAvailable).to.equal(false);\r\n            expect(appResponse.body.price).to.equal(undefined);\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST if API Key is not permitted access', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const params = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'WETH',\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n                intentOnFilling: 'false',\r\n                skipValidation: 'true',\r\n            });\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\r\n                .set('0x-api-key', 'unknown-key')\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Invalid API key');\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST if API Key does not have access to the chain', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const params = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'WETH',\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n                intentOnFilling: 'false',\r\n                skipValidation: 'true',\r\n            });\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1')\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Invalid API key');\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST Validation Error if Chain Id cannot be parsed', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const params = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'WETH',\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n                intentOnFilling: 'false',\r\n                skipValidation: 'true',\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', 'invalid-id')\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Validation Failed');\r\n            expect(appResponse.body.validationErrors[0].reason).to.equal('Invalid chain id');\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST Validation Error if sending ETH, not WETH', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const params = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'ETH',\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n                intentOnFilling: 'false',\r\n                skipValidation: 'true',\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Validation Failed');\r\n            expect(appResponse.body.validationErrors[0].reason).to.equal(\r\n                'Unwrapped Native Asset is not supported. Use WETH instead',\r\n            );\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST if buyToken is missing', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const params = new URLSearchParams({\r\n                sellToken: 'WETH',\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n            });\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Validation Failed');\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST if sellToken is missing', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const params = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n            });\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Validation Failed');\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST if both sellAmount and buyAmount are missing', async () => {\r\n            const params = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'WETH',\r\n                takerAddress,\r\n            });\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Validation Failed');\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST Error if trading an unknown token', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const UNKNOWN_TOKEN = 'RACCOONS_FOREVER';\r\n            const params = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: UNKNOWN_TOKEN,\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n                intentOnFilling: 'false',\r\n                skipValidation: 'true',\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/price?${params.toString()}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Validation Failed');\r\n            expect(appResponse.body.validationErrors[0].reason).to.equal(\r\n                `Token ${UNKNOWN_TOKEN} is currently unsupported`,\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('rfqm/v1/quote', () => {\r\n        it('should return a 200 OK, liquidityAvailable === false if no valid firm quotes found', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const insufficientSellAmount = 1;\r\n\r\n            const params = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'WETH',\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n                intentOnFilling: 'false',\r\n                skipValidation: 'true',\r\n            });\r\n\r\n            const baseResponse = {\r\n                makerToken: contractAddresses.zrxToken,\r\n                takerToken: contractAddresses.etherToken,\r\n                expiry: '1903620548', // in the year 2030\r\n            };\r\n\r\n            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`).replyOnce(HttpStatus.OK, {\r\n                ...baseResponse,\r\n                takerAmount: insufficientSellAmount,\r\n                makerAmount: insufficientSellAmount,\r\n                maker: MARKET_MAKER_2_ADDR,\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/quote?${params.toString()}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.OK)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.liquidityAvailable).to.equal(false);\r\n            expect(appResponse.body.price).to.equal(undefined);\r\n        });\r\n\r\n        it('should return a 200 OK with a firm quote for buys', async () => {\r\n            const buyAmount = 200000000000000000;\r\n            const winningQuote = 100000000000000000;\r\n            const losingQuote = 150000000000000000;\r\n            const zeroExApiParams = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'WETH',\r\n                buyAmount: buyAmount.toString(),\r\n                takerAddress,\r\n                intentOnFilling: 'true',\r\n                skipValidation: 'true',\r\n            });\r\n\r\n            const headers = {\r\n                Accept: 'application/json, text/plain, */*',\r\n                '0x-api-key': INTEGRATOR_ID,\r\n                '0x-integrator-id': INTEGRATOR_ID,\r\n            };\r\n\r\n            const baseResponse = {\r\n                makerAmount: buyAmount.toString(),\r\n                makerToken: contractAddresses.zrxToken,\r\n                takerToken: contractAddresses.etherToken,\r\n                expiry: '1903620548', // in the year 2030\r\n            };\r\n\r\n            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {\r\n                ...baseResponse,\r\n                takerAmount: winningQuote.toString(),\r\n                maker: MARKET_MAKER_2_ADDR,\r\n            });\r\n            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {\r\n                ...baseResponse,\r\n                takerAmount: losingQuote.toString(),\r\n                maker: MARKET_MAKER_3_ADDR,\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/quote?${zeroExApiParams.toString()}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.OK)\r\n                .expect('Content-Type', /json/);\r\n\r\n            const expectedPrice = '0.5';\r\n            expect(appResponse.body.price).to.equal(expectedPrice);\r\n            expect(appResponse.body.type).to.equal(GaslessTypes.OtcOrder);\r\n            expect(appResponse.body.orderHash).to.match(/^0x[0-9a-fA-F]+/);\r\n            expect(appResponse.body.order.maker).to.equal(MARKET_MAKER_2_ADDR);\r\n            expect(appResponse.body.approval).to.equal(undefined);\r\n        });\r\n\r\n        it('should return a 200 OK with a firm quote when OtcOrder pricing is available for sells', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const winningQuote = 200000000000000000;\r\n            const losingQuote = 150000000000000000;\r\n            const zeroExApiParams = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'WETH',\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n                intentOnFilling: 'true',\r\n                skipValidation: 'true',\r\n            });\r\n\r\n            const headers = {\r\n                Accept: 'application/json, text/plain, */*',\r\n                '0x-api-key': INTEGRATOR_ID,\r\n                '0x-integrator-id': INTEGRATOR_ID,\r\n            };\r\n\r\n            const baseResponse = {\r\n                takerAmount: sellAmount.toString(),\r\n                makerToken: contractAddresses.zrxToken,\r\n                takerToken: contractAddresses.etherToken,\r\n                expiry: '1903620548', // in the year 2030\r\n            };\r\n\r\n            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {\r\n                ...baseResponse,\r\n                makerAmount: winningQuote.toString(),\r\n                maker: MARKET_MAKER_2_ADDR,\r\n            });\r\n            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {\r\n                ...baseResponse,\r\n                makerAmount: losingQuote.toString(),\r\n                maker: MARKET_MAKER_3_ADDR,\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/quote?${zeroExApiParams.toString()}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.OK)\r\n                .expect('Content-Type', /json/);\r\n\r\n            const expectedPrice = '2';\r\n            expect(appResponse.body.price).to.equal(expectedPrice);\r\n            expect(appResponse.body.type).to.equal(GaslessTypes.OtcOrder);\r\n            expect(appResponse.body.orderHash).to.match(/^0x[0-9a-fA-F]+/);\r\n            expect(appResponse.body.order.maker).to.equal(MARKET_MAKER_2_ADDR);\r\n            expect(appResponse.body.approval).to.equal(undefined);\r\n        });\r\n\r\n        it('should return a 200 OK with a firm quote when OtcOrder pricing is available for sells and checkApproval is true', async () => {\r\n            when(rfqBlockchainUtilsMock.getAllowanceAsync(anything(), anything(), anything())).thenResolve(\r\n                new BigNumber(0),\r\n            );\r\n            when(rfqBlockchainUtilsMock.getGaslessApprovalAsync(anything(), anything(), anything())).thenResolve(\r\n                MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\r\n            );\r\n\r\n            const sellAmount = 100000000000000000;\r\n            const winningQuote = 200000000000000000;\r\n            const losingQuote = 150000000000000000;\r\n            const zeroExApiParams = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'WETH',\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n                checkApproval: 'true',\r\n            });\r\n\r\n            const headers = {\r\n                Accept: 'application/json, text/plain, */*',\r\n                '0x-api-key': INTEGRATOR_ID,\r\n                '0x-integrator-id': INTEGRATOR_ID,\r\n            };\r\n\r\n            const baseResponse = {\r\n                takerAmount: sellAmount.toString(),\r\n                makerToken: contractAddresses.zrxToken,\r\n                takerToken: contractAddresses.etherToken,\r\n                expiry: '1903620548', // in the year 2030\r\n            };\r\n\r\n            mockAxios.onGet(`${MARKET_MAKER_2}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {\r\n                ...baseResponse,\r\n                makerAmount: winningQuote.toString(),\r\n                maker: MARKET_MAKER_2_ADDR,\r\n            });\r\n            mockAxios.onGet(`${MARKET_MAKER_3}/rfqm/v2/price`, { headers }).replyOnce(HttpStatus.OK, {\r\n                ...baseResponse,\r\n                makerAmount: losingQuote.toString(),\r\n                maker: MARKET_MAKER_3_ADDR,\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/quote?${zeroExApiParams.toString()}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.OK)\r\n                .expect('Content-Type', /json/);\r\n\r\n            const expectedPrice = '2';\r\n            const expectedApproval = {\r\n                isRequired: true,\r\n                isGaslessAvailable: true,\r\n                type: MOCK_EXECUTE_META_TRANSACTION_APPROVAL.kind,\r\n                eip712: MOCK_EXECUTE_META_TRANSACTION_APPROVAL.eip712,\r\n            };\r\n            expect(appResponse.body.price).to.equal(expectedPrice);\r\n            expect(appResponse.body.type).to.equal(GaslessTypes.OtcOrder);\r\n            expect(appResponse.body.orderHash).to.match(/^0x[0-9a-fA-F]+/);\r\n            expect(appResponse.body.order.maker).to.equal(MARKET_MAKER_2_ADDR);\r\n            expect(appResponse.body.approval).to.eql(expectedApproval);\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST if api key is missing', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const params = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'WETH',\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n                intentOnFilling: 'false',\r\n                skipValidation: 'true',\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/quote?${params.toString()}`)\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Invalid API key');\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST if takerAddress is missing', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const params = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'WETH',\r\n                sellAmount: sellAmount.toString(),\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/quote?${params.toString()}`)\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Validation Failed');\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST if buyToken is missing', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const params = new URLSearchParams({\r\n                sellToken: 'WETH',\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/quote?${params.toString()}`)\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Validation Failed');\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST if sellToken is missing', async () => {\r\n            const sellAmount = 100000000000000000;\r\n            const params = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellAmount: sellAmount.toString(),\r\n                takerAddress,\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/quote?${params.toString()}`)\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Validation Failed');\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST if both sellAmount and buyAmount are missing', async () => {\r\n            const params = new URLSearchParams({\r\n                buyToken: 'ZRX',\r\n                sellToken: 'WETH',\r\n                takerAddress,\r\n            });\r\n\r\n            const appResponse = await request(app)\r\n                .get(`${RFQM_PATH}/quote?${params.toString()}`)\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Validation Failed');\r\n        });\r\n    });\r\n\r\n    describe('rfqm/v1/submit', () => {\r\n        const mockStoredFee: StoredFee = {\r\n            token: '0x123',\r\n            amount: '1000',\r\n            type: 'fixed',\r\n        };\r\n        const mockStoredOrder: StoredOtcOrder = {\r\n            type: RfqmOrderTypes.Otc,\r\n            order: {\r\n                chainId: '1337',\r\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                    new BigNumber(SAFE_EXPIRY),\r\n                    ZERO,\r\n                    new BigNumber(SAFE_EXPIRY),\r\n                ).toString(),\r\n                maker: '0x123',\r\n                makerAmount: '1',\r\n                makerToken: '0x123',\r\n                taker: '0x123',\r\n                takerAmount: '1',\r\n                takerToken: '0x123',\r\n                txOrigin: '0x123',\r\n                verifyingContract: '0x123',\r\n            },\r\n        };\r\n        // OtcOrder Taker\r\n        const otcOrderTakerAddress = '0xdA9AC423442169588DE6b4305f4E820D708d0cE5';\r\n        const otcOrderTakerPrivateKey = '0x653fa328df81be180b58e42737bc4cef037a19a3b9673b15d20ee2eebb2e509d';\r\n\r\n        // OtcOrder\r\n        const mockStoredOtcOrder: StoredOtcOrder = {\r\n            type: RfqmOrderTypes.Otc,\r\n            order: {\r\n                txOrigin: '0x123',\r\n                maker: '0x123',\r\n                taker: otcOrderTakerAddress,\r\n                makerToken: '0x123',\r\n                takerToken: '0x123',\r\n                makerAmount: '1',\r\n                takerAmount: '1',\r\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                    new BigNumber(SAFE_EXPIRY),\r\n                    ZERO,\r\n                    new BigNumber(SAFE_EXPIRY),\r\n                ).toString(),\r\n                chainId: '1337',\r\n                verifyingContract: '0x123',\r\n            },\r\n        };\r\n        const otcOrder = storedOtcOrderToOtcOrder(mockStoredOtcOrder);\r\n        it('[v2] should return status 201 created and queue up a job with a successful request', async () => {\r\n            // OtcOrder\r\n            const order = otcOrder;\r\n            const orderHash = order.getHash();\r\n\r\n            // Taker Signature\r\n            const takerSignature = ethSignHashWithKey(orderHash, otcOrderTakerPrivateKey);\r\n\r\n            const mockQuote = new RfqmV2QuoteEntity({\r\n                orderHash,\r\n                makerUri: MARKET_MAKER_1,\r\n                fee: mockStoredFee,\r\n                order: mockStoredOtcOrder,\r\n                chainId: 1337,\r\n                affiliateAddress: MATCHA_AFFILIATE_ADDRESS,\r\n                takerSpecifiedSide: 'makerToken',\r\n            });\r\n\r\n            // write a corresponding quote entity to validate against\r\n            await dataSource.getRepository(RfqmV2QuoteEntity).insert(mockQuote);\r\n\r\n            const appResponse = await request(app)\r\n                .post(`${RFQM_PATH}/submit`)\r\n                .send({ type: GaslessTypes.OtcOrder, order, signature: takerSignature })\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.CREATED)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.orderHash).to.equal(orderHash);\r\n\r\n            const dbJobEntity = await dataSource.getRepository(RfqmV2JobEntity).findOne({\r\n                where: {\r\n                    orderHash,\r\n                },\r\n            });\r\n            expect(dbJobEntity).to.not.equal(null);\r\n            expect(dbJobEntity?.orderHash).to.equal(mockQuote.orderHash);\r\n            expect(dbJobEntity?.makerUri).to.equal(MARKET_MAKER_1);\r\n            expect(dbJobEntity?.affiliateAddress).to.equal(MATCHA_AFFILIATE_ADDRESS);\r\n            expect(dbJobEntity?.takerSignature).to.deep.eq(takerSignature);\r\n        });\r\n\r\n        it('[v2] should return status 404 not found if there is not a pre-existing quote', async () => {\r\n            const order = otcOrder;\r\n\r\n            // Taker Signature\r\n            const takerSignature = ethSignHashWithKey(order.getHash(), otcOrderTakerPrivateKey);\r\n\r\n            const appResponse = await request(app)\r\n                .post(`${RFQM_PATH}/submit`)\r\n                .send({\r\n                    type: GaslessTypes.OtcOrder,\r\n                    order,\r\n                    signature: takerSignature,\r\n                })\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.NOT_FOUND)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Not Found');\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST Error the type is not supported', async () => {\r\n            const invalidType = 'v10rfq';\r\n\r\n            const appResponse = await request(app)\r\n                .post(`${RFQM_PATH}/submit`)\r\n                .send({ type: invalidType, order: mockStoredOrder, signature: RANDOM_VALID_SIGNATURE })\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Validation Failed');\r\n            expect(appResponse.body.validationErrors[0].reason).to.equal(\r\n                `${invalidType} is an invalid value for 'type'`,\r\n            );\r\n        });\r\n\r\n        it('[v2] should fail with status code 500 if a quote has already been submitted', async () => {\r\n            // OtcOrder\r\n            const order = otcOrder;\r\n            const orderHash = order.getHash();\r\n\r\n            // Taker Signature\r\n            const takerSignature = ethSignHashWithKey(orderHash, otcOrderTakerPrivateKey);\r\n\r\n            const mockQuote = new RfqmV2QuoteEntity({\r\n                orderHash,\r\n                makerUri: MARKET_MAKER_1,\r\n                fee: mockStoredFee,\r\n                order: mockStoredOtcOrder,\r\n                chainId: 1337,\r\n                affiliateAddress: MATCHA_AFFILIATE_ADDRESS,\r\n                takerSpecifiedSide: 'makerToken',\r\n            });\r\n\r\n            // write a corresponding quote entity to validate against\r\n            await dataSource.getRepository(RfqmV2QuoteEntity).insert(mockQuote);\r\n\r\n            await request(app)\r\n                .post(`${RFQM_PATH}/submit`)\r\n                .send({ type: GaslessTypes.OtcOrder, order, signature: takerSignature })\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.CREATED)\r\n                .expect('Content-Type', /json/);\r\n\r\n            // try to submit again\r\n            await request(app)\r\n                .post(`${RFQM_PATH}/submit`)\r\n                .send({ type: GaslessTypes.OtcOrder, order, signature: takerSignature })\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.INTERNAL_SERVER_ERROR)\r\n                .expect('Content-Type', /json/);\r\n        });\r\n\r\n        it('[v2] should fail with 400 BAD REQUEST if meta tx is too close to expiration', async () => {\r\n            const order = new OtcOrder({\r\n                ...otcOrder,\r\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(ZERO, ZERO, ZERO),\r\n            });\r\n            const orderHash = order.getHash();\r\n\r\n            const mockQuote = new RfqmV2QuoteEntity({\r\n                orderHash,\r\n                makerUri: MARKET_MAKER_1,\r\n                fee: mockStoredFee,\r\n                order: mockStoredOtcOrder,\r\n                chainId: 1337,\r\n                affiliateAddress: MATCHA_AFFILIATE_ADDRESS,\r\n                takerSpecifiedSide: 'makerToken',\r\n            });\r\n\r\n            await dataSource.getRepository(RfqmV2QuoteEntity).insert(mockQuote);\r\n\r\n            const appResponse = await request(app)\r\n                .post(`${RFQM_PATH}/submit`)\r\n                .send({ type: GaslessTypes.OtcOrder, order, signature: RANDOM_VALID_SIGNATURE })\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Validation Failed');\r\n            expect(appResponse.body.validationErrors[0].reason).to.equal(`order will expire too soon`);\r\n        });\r\n\r\n        it('[v2] should fail with 400 BAD REQUEST if signature is invalid', async () => {\r\n            const order = otcOrder;\r\n            const orderHash = order.getHash();\r\n\r\n            const mockQuote = new RfqmV2QuoteEntity({\r\n                orderHash,\r\n                makerUri: MARKET_MAKER_1,\r\n                fee: mockStoredFee,\r\n                order: mockStoredOtcOrder,\r\n                chainId: 1337,\r\n                affiliateAddress: MATCHA_AFFILIATE_ADDRESS,\r\n                takerSpecifiedSide: 'makerToken',\r\n            });\r\n\r\n            await dataSource.getRepository(RfqmV2QuoteEntity).insert(mockQuote);\r\n\r\n            const appResponse = await request(app)\r\n                .post(`${RFQM_PATH}/submit`)\r\n                .send({ type: GaslessTypes.OtcOrder, order, signature: RANDOM_VALID_SIGNATURE })\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.BAD_REQUEST)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.reason).to.equal('Validation Failed');\r\n            expect(appResponse.body.validationErrors[0].reason).to.equal(`signature is not valid`);\r\n        });\r\n    });\r\n\r\n    describe('rfqm/v1/submit-with-approval', () => {\r\n        const mockStoredFee: StoredFee = {\r\n            token: '0x123',\r\n            amount: '1000',\r\n            type: 'fixed',\r\n        };\r\n\r\n        // OtcOrder Taker\r\n        const otcOrderTakerAddress = '0xdA9AC423442169588DE6b4305f4E820D708d0cE5';\r\n        const otcOrderTakerPrivateKey = '0x653fa328df81be180b58e42737bc4cef037a19a3b9673b15d20ee2eebb2e509d';\r\n\r\n        // OtcOrder\r\n        const mockStoredOtcOrder: StoredOtcOrder = {\r\n            type: RfqmOrderTypes.Otc,\r\n            order: {\r\n                txOrigin: '0x123',\r\n                maker: '0x123',\r\n                taker: otcOrderTakerAddress,\r\n                makerToken: '0x123',\r\n                takerToken: '0x123',\r\n                makerAmount: '1',\r\n                takerAmount: '1',\r\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                    new BigNumber(SAFE_EXPIRY),\r\n                    ZERO,\r\n                    new BigNumber(SAFE_EXPIRY),\r\n                ).toString(),\r\n                chainId: '1337',\r\n                verifyingContract: '0x123',\r\n            },\r\n        };\r\n\r\n        // Approval\r\n        const approval = {\r\n            type: MOCK_PERMIT_APPROVAL.kind,\r\n            eip712: MOCK_PERMIT_APPROVAL.eip712,\r\n        };\r\n        const otcOrder = storedOtcOrderToOtcOrder(mockStoredOtcOrder);\r\n        it('[v2] should return status 201 created and queue up a job with a successful request', async () => {\r\n            // OtcOrder\r\n            const order = otcOrder;\r\n            const orderHash = order.getHash();\r\n\r\n            // Taker Signature\r\n            const takerSignature = ethSignHashWithKey(orderHash, otcOrderTakerPrivateKey);\r\n\r\n            // Approval signature\r\n            const signer = new ethers.Wallet(otcOrderTakerPrivateKey);\r\n            const typesCopy: Partial<PermitEip712Types> = { ...approval.eip712.types };\r\n            delete typesCopy.EIP712Domain;\r\n            const rawApprovalSignature = await signer._signTypedData(\r\n                approval.eip712.domain,\r\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typesCopy as any,\r\n                approval.eip712.message,\r\n            );\r\n            const { v, r, s } = ethers.utils.splitSignature(rawApprovalSignature);\r\n            const approvalSignature = {\r\n                v,\r\n                r,\r\n                s,\r\n                signatureType: 3,\r\n            };\r\n\r\n            const mockQuote = new RfqmV2QuoteEntity({\r\n                orderHash,\r\n                makerUri: MARKET_MAKER_1,\r\n                fee: mockStoredFee,\r\n                order: mockStoredOtcOrder,\r\n                chainId: 1337,\r\n                affiliateAddress: MATCHA_AFFILIATE_ADDRESS,\r\n                takerSpecifiedSide: 'makerToken',\r\n            });\r\n\r\n            // write a corresponding quote entity to validate against\r\n            await dataSource.getRepository(RfqmV2QuoteEntity).insert(mockQuote);\r\n\r\n            const appResponse = await request(app)\r\n                .post(`${RFQM_PATH}/submit-with-approval`)\r\n                .send({\r\n                    trade: { type: GaslessTypes.OtcOrder, order, signature: takerSignature },\r\n                    approval: {\r\n                        type: GaslessApprovalTypes.Permit,\r\n                        eip712: approval.eip712,\r\n                        signature: approvalSignature,\r\n                    },\r\n                })\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.CREATED)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(appResponse.body.orderHash).to.equal(orderHash);\r\n\r\n            const dbJobEntity = await dataSource.getRepository(RfqmV2JobEntity).findOne({\r\n                where: {\r\n                    orderHash,\r\n                },\r\n            });\r\n\r\n            expect(dbJobEntity).to.not.equal(null);\r\n            expect(dbJobEntity?.orderHash).to.equal(mockQuote.orderHash);\r\n            expect(dbJobEntity?.makerUri).to.equal(MARKET_MAKER_1);\r\n            expect(dbJobEntity?.affiliateAddress).to.equal(MATCHA_AFFILIATE_ADDRESS);\r\n            expect(dbJobEntity?.takerSignature).to.deep.eq(takerSignature);\r\n            expect(dbJobEntity?.approval?.eip712).to.deep.eq(approval.eip712);\r\n            expect(dbJobEntity?.approval?.kind).to.deep.eq(approval.type);\r\n            expect(dbJobEntity?.approvalSignature).to.deep.eq(approvalSignature);\r\n        });\r\n    });\r\n\r\n    describe('rfqm/v1/status/:orderHash', () => {\r\n        it('should return a 404 NOT FOUND if the order hash is not found', () => {\r\n            const orderHash = '0x00';\r\n            return request(app)\r\n                .get(`${RFQM_PATH}/status/${orderHash}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.NOT_FOUND);\r\n        });\r\n\r\n        it('should return a 200 when the order exists', async () => {\r\n            await dbUtils.writeV2JobAsync(MOCK_RFQM_JOB);\r\n\r\n            const response = await request(app)\r\n                .get(`${RFQM_PATH}/status/${MOCK_RFQM_JOB.orderHash}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.OK)\r\n                .expect('Content-Type', /json/);\r\n\r\n            // Response details are covered by the service test, but do one small check for sanity\r\n            expect(response.body.status).to.equal('submitted');\r\n        });\r\n\r\n        it('should return status reason for failures', async () => {\r\n            await dbUtils.writeV2JobAsync({\r\n                ...MOCK_RFQM_JOB,\r\n                status: RfqmJobStatus.FailedRevertedConfirmed,\r\n            });\r\n\r\n            const response = await request(app)\r\n                .get(`${RFQM_PATH}/status/${MOCK_RFQM_JOB.orderHash}`)\r\n                .set('0x-api-key', API_KEY)\r\n                .set('0x-chain-id', '1337')\r\n                .expect(HttpStatus.OK)\r\n                .expect('Content-Type', /json/);\r\n\r\n            // Response details are covered by the service test, but do one small check for sanity\r\n            expect(response.body.reason).to.equal('transaction_reverted');\r\n        });\r\n    });\r\n\r\n    describe('/admin/v1/cleanup', () => {\r\n        it('should return a 400 BAD REQUEST if the order hash is not found', () => {\r\n            const orderHash = '0x00';\r\n            return request(app)\r\n                .post(`${ADMIN_PATH}/cleanup`)\r\n                .send({ orderHashes: [orderHash] })\r\n                .set('0x-admin-api-key', ADMIN_API_KEY)\r\n                .expect(HttpStatus.BAD_REQUEST);\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST if no order hashes are sent', async () => {\r\n            await request(app)\r\n                .post(`${ADMIN_PATH}/cleanup`)\r\n                .send({ orderHashes: [] })\r\n                .set('0x-admin-api-key', ADMIN_API_KEY)\r\n                .expect(HttpStatus.BAD_REQUEST);\r\n        });\r\n\r\n        it('should return a 400 BAD REQUEST if all job updates fail', async () => {\r\n            await dbUtils.writeV2JobAsync({ ...MOCK_RFQM_JOB, status: RfqmJobStatus.SucceededConfirmed });\r\n            const response = await request(app)\r\n                .post(`${ADMIN_PATH}/cleanup`)\r\n                .send({ orderHashes: [MOCK_RFQM_JOB.orderHash] })\r\n                .set('0x-admin-api-key', ADMIN_API_KEY)\r\n                .expect(HttpStatus.BAD_REQUEST);\r\n\r\n            expect(response.body.unmodifiedJobs[0]).to.equal(MOCK_RFQM_JOB.orderHash);\r\n        });\r\n\r\n        it('should return a 401 UNAUTHORIZED if the API key is not an admin key', async () => {\r\n            await dbUtils.writeV2JobAsync(MOCK_RFQM_JOB);\r\n            const badApiKey = '0xbadapikey';\r\n\r\n            return request(app)\r\n                .post(`${ADMIN_PATH}/cleanup`)\r\n                .send({ orderHashes: [MOCK_RFQM_JOB.orderHash] })\r\n                .set('0x-admin-api-key', badApiKey)\r\n                .expect(HttpStatus.UNAUTHORIZED);\r\n        });\r\n\r\n        it('should return a 200 OK when the jobs are successfully set to failure', async () => {\r\n            await dbUtils.writeV2JobAsync({\r\n                ...MOCK_RFQM_JOB,\r\n                expiry: new BigNumber(Date.now() - 60_000).dividedBy(ONE_SECOND_MS).decimalPlaces(0),\r\n            });\r\n\r\n            const response = await request(app)\r\n                .post(`${ADMIN_PATH}/cleanup`)\r\n                .send({ orderHashes: [MOCK_RFQM_JOB.orderHash] })\r\n                .set('0x-admin-api-key', ADMIN_API_KEY)\r\n                .expect(HttpStatus.OK)\r\n                .expect('Content-Type', /json/);\r\n\r\n            expect(response.body.modifiedJobs[0]).to.equal(MOCK_RFQM_JOB.orderHash);\r\n        });\r\n\r\n        it('should return a 207 MULTI STATUS if some jobs succeed and some jobs fail', async () => {\r\n            await dbUtils.writeV2JobAsync({\r\n                ...MOCK_RFQM_JOB,\r\n                status: RfqmJobStatus.SucceededConfirmed,\r\n                orderHash: '0x01',\r\n            });\r\n            await dbUtils.writeV2JobAsync({\r\n                ...MOCK_RFQM_JOB,\r\n                expiry: new BigNumber(Date.now() - 60_000).dividedBy(ONE_SECOND_MS).decimalPlaces(0),\r\n                orderHash: '0x02',\r\n            });\r\n\r\n            const response = await request(app)\r\n                .post(`${ADMIN_PATH}/cleanup`)\r\n                .send({ orderHashes: ['0x01', '0x02'] })\r\n                .set('0x-admin-api-key', ADMIN_API_KEY)\r\n                .expect(HttpStatus.MULTI_STATUS);\r\n\r\n            expect(response.body.unmodifiedJobs[0]).to.equal('0x01');\r\n            expect(response.body.modifiedJobs[0]).to.equal('0x02');\r\n        });\r\n    });\r\n});\r\n"],"version":3}