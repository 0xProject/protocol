{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/entities/RfqmV2QuoteEntity.ts","mappings":";;;;;;;;;;;;AAAA,qCAA+D;AAa/D,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAuC1B,4DAA4D;IAC5D,YAAY,OAAmC,EAAgC;;QAC3E,wCAAwC;QACxC,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;SACnC;QAED,IAAI,CAAC,gBAAgB,GAAG,MAAA,IAAI,CAAC,gBAAgB,mCAAI,IAAI,CAAC;QACtD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACpB,IAAI,CAAC,YAAY,GAAG,MAAA,IAAI,CAAC,YAAY,mCAAI,IAAI,CAAC;QAC9C,IAAI,CAAC,QAAQ,GAAG,MAAA,IAAI,CAAC,QAAQ,mCAAI,KAAK,CAAC;QACvC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,kBAAkB,GAAG,MAAA,IAAI,CAAC,kBAAkB,mCAAI,IAAI,CAAC;IAC9D,CAAC;CACJ,CAAA;AAtDG;IADC,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;;oDAC9B;AAIzB;IAFC,IAAA,eAAK,GAAE;IACP,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,aAAa,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC;8BACzD,IAAI;oDAAC;AAGxB;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;;kDACvB;AAGvB;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;uDAChC;AAGnC;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;;mDACvB;AAGxB;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;8CACjB;AAGtB;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;gDACZ;AAK7B;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;;mDACtB;AAGzB;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,mBAAmB,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;2DAChC;AAQvC;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,sBAAsB,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;6DACZ;AArCrD,iBAAiB;IAD7B,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC;;GACtB,iBAAiB,CAwD7B;AAxDY,8CAAiB","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/entities/RfqmV2QuoteEntity.ts"],"sourcesContent":["import { Column, Entity, Index, PrimaryColumn } from 'typeorm';\r\n\r\nimport { StoredFee } from '../core/types';\r\n\r\nimport { StoredOtcOrder } from './types';\r\n\r\nexport type RfqmV2QuoteConstructorOpts = Pick<\r\n    RfqmV2QuoteEntity,\r\n    'chainId' | 'fee' | 'makerUri' | 'orderHash' | 'order'\r\n> &\r\n    Partial<RfqmV2QuoteEntity>;\r\n\r\n@Entity({ name: 'rfqm_v2_quotes' })\r\nexport class RfqmV2QuoteEntity {\r\n    @PrimaryColumn({ name: 'order_hash', type: 'varchar' })\r\n    public orderHash: string;\r\n\r\n    @Index()\r\n    @Column({ name: 'created_at', type: 'timestamptz', default: () => 'now()' })\r\n    public createdAt!: Date;\r\n\r\n    @Column({ name: 'chain_id', type: 'integer' })\r\n    public chainId: number;\r\n\r\n    @Column({ name: 'integrator_id', type: 'varchar', nullable: true })\r\n    public integratorId: string | null;\r\n\r\n    @Column({ name: 'maker_uri', type: 'varchar' })\r\n    public makerUri: string;\r\n\r\n    @Column({ name: 'fee', type: 'jsonb' })\r\n    public fee: StoredFee;\r\n\r\n    @Column({ name: 'order', type: 'jsonb' })\r\n    public order: StoredOtcOrder;\r\n\r\n    // Whether the maker wrapped native token will be unwrapped to the native token\r\n    // when passed to the taker\r\n    @Column({ name: 'is_unwrap', type: 'boolean' })\r\n    public isUnwrap: boolean;\r\n\r\n    @Column({ name: 'affiliate_address', type: 'varchar', nullable: true })\r\n    public affiliateAddress: string | null;\r\n\r\n    // When requesting a quote, taker specifies one amount (maker or taker amount)\r\n    // and the MM populates the other field.\r\n    // This field preserves that information.\r\n    // This field is accepted to be null, only for backward compatibility,\r\n    // in normal operation \"taker_specified_side\" is always known.\r\n    @Column({ name: 'taker_specified_side', type: 'varchar', nullable: true })\r\n    public takerSpecifiedSide: 'makerToken' | 'takerToken' | null;\r\n\r\n    // tslint:disable-next-line no-object-literal-type-assertion\r\n    constructor(opts: RfqmV2QuoteConstructorOpts = {} as RfqmV2QuoteConstructorOpts) {\r\n        // allow createdAt overrides for testing\r\n        if (opts.createdAt) {\r\n            this.createdAt = opts.createdAt;\r\n        }\r\n\r\n        this.affiliateAddress = opts.affiliateAddress ?? null;\r\n        this.chainId = opts.chainId;\r\n        this.fee = opts.fee;\r\n        this.integratorId = opts.integratorId ?? null;\r\n        this.isUnwrap = opts.isUnwrap ?? false;\r\n        this.makerUri = opts.makerUri;\r\n        this.order = opts.order;\r\n        this.orderHash = opts.orderHash;\r\n        this.takerSpecifiedSide = opts.takerSpecifiedSide ?? null;\r\n    }\r\n}\r\n"],"version":3}