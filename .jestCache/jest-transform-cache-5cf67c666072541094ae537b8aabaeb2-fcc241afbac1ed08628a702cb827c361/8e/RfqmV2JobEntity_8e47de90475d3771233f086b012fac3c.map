{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/entities/RfqmV2JobEntity.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/entities/RfqmV2JobEntity.ts"],"sourcesContent":["import { Signature } from '@0x/protocol-utils';\nimport { BigNumber } from '@0x/utils';\nimport { Column, Entity, Index, PrimaryColumn, UpdateDateColumn } from 'typeorm';\n\nimport { Approval, StoredFee } from '../core/types';\n\nimport { BigNumberTransformer } from './transformers';\nimport { RfqmJobStatus, StoredOtcOrder } from './types';\n\nexport type RfqmV2JobApprovalOpts = Pick<RfqmV2JobEntity, 'approval' | 'approvalSignature'>;\n\nexport type RfqmV2JobConstructorOpts = Pick<\n    RfqmV2JobEntity,\n    'chainId' | 'expiry' | 'fee' | 'makerUri' | 'order' | 'orderHash'\n> &\n    Partial<RfqmV2JobEntity>;\n\n@Entity({ name: 'rfqm_v2_jobs' })\nexport class RfqmV2JobEntity {\n    // Differentiator for different flavors of RFQM jobs\n    public kind: 'rfqm_v2_job';\n\n    @PrimaryColumn({ name: 'order_hash', type: 'varchar' })\n    public orderHash: string;\n\n    @Index()\n    @Column({ name: 'created_at', type: 'timestamptz', default: () => 'now()' })\n    public createdAt!: Date;\n\n    @UpdateDateColumn({ name: 'updated_at', type: 'timestamptz', nullable: true })\n    public updatedAt: Date | null;\n\n    // The expiration time of the job, in unix seconds\n    @Column({ name: 'expiry', type: 'numeric', transformer: BigNumberTransformer })\n    public expiry: BigNumber;\n\n    @Column({ name: 'chain_id', type: 'integer' })\n    public chainId: number;\n\n    @Column({ name: 'integrator_id', type: 'varchar', nullable: true })\n    public integratorId: string | null;\n\n    @Column({ name: 'maker_uri', type: 'varchar' })\n    public makerUri: string;\n\n    @Index()\n    @Column({ name: 'status', type: 'varchar' })\n    public status: RfqmJobStatus;\n\n    @Column({ name: 'fee', type: 'jsonb' })\n    public fee: StoredFee;\n\n    @Column({ name: 'order', type: 'jsonb' })\n    public order: StoredOtcOrder;\n\n    @Column({ name: 'worker_address', type: 'varchar', nullable: true })\n    public workerAddress: string | null;\n\n    @Column({ name: 'last_look_result', type: 'boolean', nullable: true })\n    public lastLookResult: boolean | null;\n\n    @Column({ name: 'affiliate_address', type: 'varchar', nullable: true })\n    public affiliateAddress: string | null;\n\n    // The taker's signature of the order hash.\n    // Should be deleted upon job failure or last look rejection.\n    @Column({ name: 'taker_signature', type: 'jsonb', nullable: true })\n    public takerSignature: Signature | null;\n\n    // The maker's signature of the order hash.\n    // Should be deleted upon job failure.\n    @Column({ name: 'maker_signature', type: 'jsonb', nullable: true })\n    public makerSignature: Signature | null;\n\n    // Whether the maker wrapped native token will be unwrapped to the native token\n    // when passed to the taker\n    @Column({ name: 'is_unwrap', type: Boolean })\n    public isUnwrap: boolean;\n\n    // When a market maker rejects a last look, the server queries the market maker\n    // for a price for the same trade that was just rejected (same pair and size).\n    // The difference between the rejected price and the new price is stored here.\n    @Column({ name: 'll_reject_price_difference_bps', type: 'integer', nullable: true })\n    public llRejectPriceDifferenceBps: number | null;\n\n    // The optional approval object that contains the EIP-712 context (which includes\n    // the message that the taker will sign). This is stored to help us prepare the\n    // calldata for gasless approvals\n    @Column({ name: 'approval', type: 'jsonb', nullable: true })\n    public approval: Approval | null;\n\n    // The signature for the approval.\n    @Column({ name: 'approval_signature', type: 'jsonb', nullable: true })\n    public approvalSignature: Signature | null;\n\n    // When requesting a quote, taker specifies one amount (maker or taker amount)\n    // and the MM populates the other field.\n    // This field preserves that information.\n    // This field is accepted to be null, only for backward compatibility,\n    // in normal operation \"taker_specified_side\" is always known.\n    @Column({ name: 'taker_specified_side', type: 'varchar', nullable: true })\n    public takerSpecifiedSide: 'makerToken' | 'takerToken' | null;\n\n    /**\n     * Used to get the 'canonical' hash of the job. This is useful\n     * because it can also be called on a metatransaction job and\n     * that will return the metatransaction hash.\n     */\n    public getHash(): string {\n        return this.orderHash;\n    }\n\n    // TypeORM runs a validation check where it calls this initializer with no argument.\n    // With no default `opts`, `opts` will be undefined and the validation will throw,\n    // therefore, add this hacky default.\n    // tslint:disable-next-line no-object-literal-type-assertion\n    constructor(opts: RfqmV2JobConstructorOpts = {} as RfqmV2JobConstructorOpts) {\n        this.kind = 'rfqm_v2_job';\n\n        // allow createdAt overrides for testing\n        if (opts.createdAt) {\n            this.createdAt = opts.createdAt;\n        }\n\n        this.affiliateAddress = opts.affiliateAddress ?? null;\n        this.approval = opts.approval ?? null;\n        this.approvalSignature = opts.approvalSignature ?? null;\n        this.chainId = opts.chainId;\n        this.expiry = opts.expiry;\n        this.fee = opts.fee;\n        this.integratorId = opts.integratorId ?? null;\n        this.isUnwrap = opts.isUnwrap ?? false;\n        this.lastLookResult = opts.lastLookResult ?? null;\n        this.llRejectPriceDifferenceBps = opts.llRejectPriceDifferenceBps ?? null;\n        this.makerSignature = opts.makerSignature ?? null;\n        this.makerUri = opts.makerUri;\n        this.order = opts.order;\n        this.orderHash = opts.orderHash;\n        this.status = opts.status ?? RfqmJobStatus.PendingEnqueued;\n        this.takerSignature = opts.takerSignature ?? null;\n        this.updatedAt = opts.updatedAt ?? null;\n        this.workerAddress = opts.workerAddress ?? null;\n        this.takerSpecifiedSide = opts.takerSpecifiedSide ?? null;\n    }\n}\n"],"version":3}