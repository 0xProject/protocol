a92090c3c905c18b313c8748f4a09db7
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqmV2JobEntity = void 0;
const utils_1 = require("@0x/utils");
const typeorm_1 = require("typeorm");
const transformers_1 = require("./transformers");
const types_1 = require("./types");
let RfqmV2JobEntity = class RfqmV2JobEntity {
    // TypeORM runs a validation check where it calls this initializer with no argument.
    // With no default `opts`, `opts` will be undefined and the validation will throw,
    // therefore, add this hacky default.
    // tslint:disable-next-line no-object-literal-type-assertion
    constructor(opts = {}) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        this.kind = 'rfqm_v2_job';
        // allow createdAt overrides for testing
        if (opts.createdAt) {
            this.createdAt = opts.createdAt;
        }
        this.affiliateAddress = (_a = opts.affiliateAddress) !== null && _a !== void 0 ? _a : null;
        this.approval = (_b = opts.approval) !== null && _b !== void 0 ? _b : null;
        this.approvalSignature = (_c = opts.approvalSignature) !== null && _c !== void 0 ? _c : null;
        this.chainId = opts.chainId;
        this.expiry = opts.expiry;
        this.fee = opts.fee;
        this.integratorId = (_d = opts.integratorId) !== null && _d !== void 0 ? _d : null;
        this.isUnwrap = (_e = opts.isUnwrap) !== null && _e !== void 0 ? _e : false;
        this.lastLookResult = (_f = opts.lastLookResult) !== null && _f !== void 0 ? _f : null;
        this.llRejectPriceDifferenceBps = (_g = opts.llRejectPriceDifferenceBps) !== null && _g !== void 0 ? _g : null;
        this.makerSignature = (_h = opts.makerSignature) !== null && _h !== void 0 ? _h : null;
        this.makerUri = opts.makerUri;
        this.order = opts.order;
        this.orderHash = opts.orderHash;
        this.status = (_j = opts.status) !== null && _j !== void 0 ? _j : types_1.RfqmJobStatus.PendingEnqueued;
        this.takerSignature = (_k = opts.takerSignature) !== null && _k !== void 0 ? _k : null;
        this.updatedAt = (_l = opts.updatedAt) !== null && _l !== void 0 ? _l : null;
        this.workerAddress = (_m = opts.workerAddress) !== null && _m !== void 0 ? _m : null;
        this.takerSpecifiedSide = (_o = opts.takerSpecifiedSide) !== null && _o !== void 0 ? _o : null;
    }
    /**
     * Used to get the 'canonical' hash of the job. This is useful
     * because it can also be called on a metatransaction job and
     * that will return the metatransaction hash.
     */
    getHash() {
        return this.orderHash;
    }
};
__decorate([
    (0, typeorm_1.PrimaryColumn)({ name: 'order_hash', type: 'varchar' }),
    __metadata("design:type", String)
], RfqmV2JobEntity.prototype, "orderHash", void 0);
__decorate([
    (0, typeorm_1.Index)(),
    (0, typeorm_1.Column)({ name: 'created_at', type: 'timestamptz', default: () => 'now()' }),
    __metadata("design:type", Date)
], RfqmV2JobEntity.prototype, "createdAt", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at', type: 'timestamptz', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "updatedAt", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'expiry', type: 'numeric', transformer: transformers_1.BigNumberTransformer }),
    __metadata("design:type", utils_1.BigNumber)
], RfqmV2JobEntity.prototype, "expiry", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'chain_id', type: 'integer' }),
    __metadata("design:type", Number)
], RfqmV2JobEntity.prototype, "chainId", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'integrator_id', type: 'varchar', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "integratorId", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'maker_uri', type: 'varchar' }),
    __metadata("design:type", String)
], RfqmV2JobEntity.prototype, "makerUri", void 0);
__decorate([
    (0, typeorm_1.Index)(),
    (0, typeorm_1.Column)({ name: 'status', type: 'varchar' }),
    __metadata("design:type", String)
], RfqmV2JobEntity.prototype, "status", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'fee', type: 'jsonb' }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "fee", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'order', type: 'jsonb' }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "order", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'worker_address', type: 'varchar', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "workerAddress", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'last_look_result', type: 'boolean', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "lastLookResult", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'affiliate_address', type: 'varchar', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "affiliateAddress", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'taker_signature', type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "takerSignature", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'maker_signature', type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "makerSignature", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'is_unwrap', type: Boolean }),
    __metadata("design:type", Boolean)
], RfqmV2JobEntity.prototype, "isUnwrap", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'll_reject_price_difference_bps', type: 'integer', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "llRejectPriceDifferenceBps", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'approval', type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "approval", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'approval_signature', type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "approvalSignature", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'taker_specified_side', type: 'varchar', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "takerSpecifiedSide", void 0);
RfqmV2JobEntity = __decorate([
    (0, typeorm_1.Entity)({ name: 'rfqm_v2_jobs' }),
    __metadata("design:paramtypes", [Object])
], RfqmV2JobEntity);
exports.RfqmV2JobEntity = RfqmV2JobEntity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9lbnRpdGllcy9SZnFtVjJKb2JFbnRpdHkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0EscUNBQXNDO0FBQ3RDLHFDQUFpRjtBQUlqRixpREFBc0Q7QUFDdEQsbUNBQXdEO0FBV3hELElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUE4RnhCLG9GQUFvRjtJQUNwRixrRkFBa0Y7SUFDbEYscUNBQXFDO0lBQ3JDLDREQUE0RDtJQUM1RCxZQUFZLE9BQWlDLEVBQThCOztRQUN2RSxJQUFJLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztRQUUxQix3Q0FBd0M7UUFDeEMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUNuQztRQUVELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFBLElBQUksQ0FBQyxnQkFBZ0IsbUNBQUksSUFBSSxDQUFDO1FBQ3RELElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBQSxJQUFJLENBQUMsUUFBUSxtQ0FBSSxJQUFJLENBQUM7UUFDdEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLE1BQUEsSUFBSSxDQUFDLGlCQUFpQixtQ0FBSSxJQUFJLENBQUM7UUFDeEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMxQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFBLElBQUksQ0FBQyxZQUFZLG1DQUFJLElBQUksQ0FBQztRQUM5QyxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQUEsSUFBSSxDQUFDLFFBQVEsbUNBQUksS0FBSyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBQSxJQUFJLENBQUMsY0FBYyxt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QUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQzs7MkRBQ1o7QUFuRnJELGVBQWU7SUFEM0IsSUFBQSxnQkFBTSxFQUFDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxDQUFDOztHQUNwQixlQUFlLENBOEgzQjtBQTlIWSwwQ0FBZSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvc3JjL2VudGl0aWVzL1JmcW1WMkpvYkVudGl0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaWduYXR1cmUgfSBmcm9tICdAMHgvcHJvdG9jb2wtdXRpbHMnO1xuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnQDB4L3V0aWxzJztcbmltcG9ydCB7IENvbHVtbiwgRW50aXR5LCBJbmRleCwgUHJpbWFyeUNvbHVtbiwgVXBkYXRlRGF0ZUNvbHVtbiB9IGZyb20gJ3R5cGVvcm0nO1xuXG5pbXBvcnQgeyBBcHByb3ZhbCwgU3RvcmVkRmVlIH0gZnJvbSAnLi4vY29yZS90eXBlcyc7XG5cbmltcG9ydCB7IEJpZ051bWJlclRyYW5zZm9ybWVyIH0gZnJvbSAnLi90cmFuc2Zvcm1lcnMnO1xuaW1wb3J0IHsgUmZxbUpvYlN0YXR1cywgU3RvcmVkT3RjT3JkZXIgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IHR5cGUgUmZxbVYySm9iQXBwcm92YWxPcHRzID0gUGljazxSZnFtVjJKb2JFbnRpdHksICdhcHByb3ZhbCcgfCAnYXBwcm92YWxTaWduYXR1cmUnPjtcblxuZXhwb3J0IHR5cGUgUmZxbVYySm9iQ29uc3RydWN0b3JPcHRzID0gUGljazxcbiAgICBSZnFtVjJKb2JFbnRpdHksXG4gICAgJ2NoYWluSWQnIHwgJ2V4cGlyeScgfCAnZmVlJyB8ICdtYWtlclVyaScgfCAnb3JkZXInIHwgJ29yZGVySGFzaCdcbj4gJlxuICAgIFBhcnRpYWw8UmZxbVYySm9iRW50aXR5PjtcblxuQEVudGl0eSh7IG5hbWU6ICdyZnFtX3YyX2pvYnMnIH0pXG5leHBvcnQgY2xhc3MgUmZxbVYySm9iRW50aXR5IHtcbiAgICAvLyBEaWZmZXJlbnRpYXRvciBmb3IgZGlmZmVyZW50IGZsYXZvcnMgb2YgUkZRTSBqb2JzXG4gICAgcHVibGljIGtpbmQ6ICdyZnFtX3YyX2pvYic7XG5cbiAgICBAUHJpbWFyeUNvbHVtbih7IG5hbWU6ICdvcmRlcl9oYXNoJywgdHlwZTogJ3ZhcmNoYXInIH0pXG4gICAgcHVibGljIG9yZGVySGFzaDogc3RyaW5nO1xuXG4gICAgQEluZGV4KClcbiAgICBAQ29sdW1uKHsgbmFtZTogJ2NyZWF0ZWRfYXQnLCB0eXBlOiAndGltZXN0YW1wdHonLCBkZWZhdWx0OiAoKSA9PiAnbm93KCknIH0pXG4gICAgcHVibGljIGNyZWF0ZWRBdCE6IERhdGU7XG5cbiAgICBAVXBkYXRlRGF0ZUNvbHVtbih7IG5hbWU6ICd1cGRhdGVkX2F0JywgdHlwZTogJ3RpbWVzdGFtcHR6JywgbnVsbGFibGU6IHRydWUgfSlcbiAgICBwdWJsaWMgdXBkYXRlZEF0OiBEYXRlIHwgbnVsbDtcblxuICAgIC8vIFRoZSBleHBpcmF0aW9uIHRpbWUgb2YgdGhlIGpvYiwgaW4gdW5peCBzZWNvbmRzXG4gICAgQENvbHVtbih7IG5hbWU6ICdleHBpcnknLCB0eXBlOiAnbnVtZXJpYycsIHRyYW5zZm9ybWVyOiBCaWdOdW1iZXJUcmFuc2Zvcm1lciB9KVxuICAgIHB1YmxpYyBleHBpcnk6IEJpZ051bWJlcjtcblxuICAgIEBDb2x1bW4oeyBuYW1lOiAnY2hhaW5faWQnLCB0eXBlOiAnaW50ZWdlcicgfSlcbiAgICBwdWJsaWMgY2hhaW5JZDogbnVtYmVyO1xuXG4gICAgQENvbHVtbih7IG5hbWU6ICdpbnRlZ3JhdG9yX2lkJywgdHlwZTogJ3ZhcmNoYXInLCBudWxsYWJsZTogdHJ1ZSB9KVxuICAgIHB1YmxpYyBpbnRlZ3JhdG9ySWQ6IHN0cmluZyB8IG51bGw7XG5cbiAgICBAQ29sdW1uKHsgbmFtZTogJ21ha2VyX3VyaScsIHR5cGU6ICd2YXJjaGFyJyB9KVxuICAgIHB1YmxpYyBtYWtlclVyaTogc3RyaW5nO1xuXG4gICAgQEluZGV4KClcbiAgICBAQ29sdW1uKHsgbmFtZTogJ3N0YXR1cycsIHR5cGU6ICd2YXJjaGFyJyB9KVxuICAgIHB1YmxpYyBzdGF0dXM6IFJmcW1Kb2JTdGF0dXM7XG5cbiAgICBAQ29sdW1uKHsgbmFtZTogJ2ZlZScsIHR5cGU6ICdqc29uYicgfSlcbiAgICBwdWJsaWMgZmVlOiBTdG9yZWRGZWU7XG5cbiAgICBAQ29sdW1uKHsgbmFtZTogJ29yZGVyJywgdHlwZTogJ2pzb25iJyB9KVxuICAgIHB1YmxpYyBvcmRlcjogU3RvcmVkT3RjT3JkZXI7XG5cbiAgICBAQ29sdW1uKHsgbmFtZTogJ3dvcmtlcl9hZGRyZXNzJywgdHlwZTogJ3ZhcmNoYXInLCBudWxsYWJsZTogdHJ1ZSB9KVxuICAgIHB1YmxpYyB3b3JrZXJBZGRyZXNzOiBzdHJpbmcgfCBudWxsO1xuXG4gICAgQENvbHVtbih7IG5hbWU6ICdsYXN0X2xvb2tfcmVzdWx0JywgdHlwZTogJ2Jvb2xlYW4nLCBudWxsYWJsZTogdHJ1ZSB9KVxuICAgIHB1YmxpYyBsYXN0TG9va1Jlc3VsdDogYm9vbGVhbiB8IG51bGw7XG5cbiAgICBAQ29sdW1uKHsgbmFtZTogJ2FmZmlsaWF0ZV9hZGRyZXNzJywgdHlwZTogJ3ZhcmNoYXInLCBudWxsYWJsZTogdHJ1ZSB9KVxuICAgIHB1YmxpYyBhZmZpbGlhdGVBZGRyZXNzOiBzdHJpbmcgfCBudWxsO1xuXG4gICAgLy8gVGhlIHRha2VyJ3Mgc2lnbmF0dXJlIG9mIHRoZSBvcmRlciBoYXNoLlxuICAgIC8vIFNob3VsZCBiZSBkZWxldGVkIHVwb24gam9iIGZhaWx1cmUgb3IgbGFzdCBsb29rIHJlamVjdGlvbi5cbiAgICBAQ29sdW1uKHsgbmFtZTogJ3Rha2VyX3NpZ25hdHVyZScsIHR5cGU6ICdqc29uYicsIG51bGxhYmxlOiB0cnVlIH0pXG4gICAgcHVibGljIHRha2VyU2lnbmF0dXJlOiBTaWduYXR1cmUgfCBudWxsO1xuXG4gICAgLy8gVGhlIG1ha2VyJ3Mgc2lnbmF0dXJlIG9mIHRoZSBvcmRlciBoYXNoLlxuICAgIC8vIFNob3VsZCBiZSBkZWxldGVkIHVwb24gam9iIGZhaWx1cmUuXG4gICAgQENvbHVtbih7IG5hbWU6ICdtYWtlcl9zaWduYXR1cmUnLCB0eXBlOiAnanNvbmInLCBudWxsYWJsZTogdHJ1ZSB9KVxuICAgIHB1YmxpYyBtYWtlclNpZ25hdHVyZTogU2lnbmF0dXJlIHwgbnVsbDtcblxuICAgIC8vIFdoZXRoZXIgdGhlIG1ha2VyIHdyYXBwZWQgbmF0aXZlIHRva2VuIHdpbGwgYmUgdW53cmFwcGVkIHRvIHRoZSBuYXRpdmUgdG9rZW5cbiAgICAvLyB3aGVuIHBhc3NlZCB0byB0aGUgdGFrZXJcbiAgICBAQ29sdW1uKHsgbmFtZTogJ2lzX3Vud3JhcCcsIHR5cGU6IEJvb2xlYW4gfSlcbiAgICBwdWJsaWMgaXNVbndyYXA6IGJvb2xlYW47XG5cbiAgICAvLyBXaGVuIGEgbWFya2V0IG1ha2VyIHJlamVjdHMgYSBsYXN0IGxvb2ssIHRoZSBzZXJ2ZXIgcXVlcmllcyB0aGUgbWFya2V0IG1ha2VyXG4gICAgLy8gZm9yIGEgcHJpY2UgZm9yIHRoZSBzYW1lIHRyYWRlIHRoYXQgd2FzIGp1c3QgcmVqZWN0ZWQgKHNhbWUgcGFpciBhbmQgc2l6ZSkuXG4gICAgLy8gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgcmVqZWN0ZWQgcHJpY2UgYW5kIHRoZSBuZXcgcHJpY2UgaXMgc3RvcmVkIGhlcmUuXG4gICAgQENvbHVtbih7IG5hbWU6ICdsbF9yZWplY3RfcHJpY2VfZGlmZmVyZW5jZV9icHMnLCB0eXBlOiAnaW50ZWdlcicsIG51bGxhYmxlOiB0cnVlIH0pXG4gICAgcHVibGljIGxsUmVqZWN0UHJpY2VEaWZmZXJlbmNlQnBzOiBudW1iZXIgfCBudWxsO1xuXG4gICAgLy8gVGhlIG9wdGlvbmFsIGFwcHJvdmFsIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBFSVAtNzEyIGNvbnRleHQgKHdoaWNoIGluY2x1ZGVzXG4gICAgLy8gdGhlIG1lc3NhZ2UgdGhhdCB0aGUgdGFrZXIgd2lsbCBzaWduKS4gVGhpcyBpcyBzdG9yZWQgdG8gaGVscCB1cyBwcmVwYXJlIHRoZVxuICAgIC8vIGNhbGxkYXRhIGZvciBnYXNsZXNzIGFwcHJvdmFsc1xuICAgIEBDb2x1bW4oeyBuYW1lOiAnYXBwcm92YWwnLCB0eXBlOiAnanNvbmInLCBudWxsYWJsZTogdHJ1ZSB9KVxuICAgIHB1YmxpYyBhcHByb3ZhbDogQXBwcm92YWwgfCBudWxsO1xuXG4gICAgLy8gVGhlIHNpZ25hdHVyZSBmb3IgdGhlIGFwcHJvdmFsLlxuICAgIEBDb2x1bW4oeyBuYW1lOiAnYXBwcm92YWxfc2lnbmF0dXJlJywgdHlwZTogJ2pzb25iJywgbnVsbGFibGU6IHRydWUgfSlcbiAgICBwdWJsaWMgYXBwcm92YWxTaWduYXR1cmU6IFNpZ25hdHVyZSB8IG51bGw7XG5cbiAgICAvLyBXaGVuIHJlcXVlc3RpbmcgYSBxdW90ZSwgdGFrZXIgc3BlY2lmaWVzIG9uZSBhbW91bnQgKG1ha2VyIG9yIHRha2VyIGFtb3VudClcbiAgICAvLyBhbmQgdGhlIE1NIHBvcHVsYXRlcyB0aGUgb3RoZXIgZmllbGQuXG4gICAgLy8gVGhpcyBmaWVsZCBwcmVzZXJ2ZXMgdGhhdCBpbmZvcm1hdGlvbi5cbiAgICAvLyBUaGlzIGZpZWxkIGlzIGFjY2VwdGVkIHRvIGJlIG51bGwsIG9ubHkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksXG4gICAgLy8gaW4gbm9ybWFsIG9wZXJhdGlvbiBcInRha2VyX3NwZWNpZmllZF9zaWRlXCIgaXMgYWx3YXlzIGtub3duLlxuICAgIEBDb2x1bW4oeyBuYW1lOiAndGFrZXJfc3BlY2lmaWVkX3NpZGUnLCB0eXBlOiAndmFyY2hhcicsIG51bGxhYmxlOiB0cnVlIH0pXG4gICAgcHVibGljIHRha2VyU3BlY2lmaWVkU2lkZTogJ21ha2VyVG9rZW4nIHwgJ3Rha2VyVG9rZW4nIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gZ2V0IHRoZSAnY2Fub25pY2FsJyBoYXNoIG9mIHRoZSBqb2IuIFRoaXMgaXMgdXNlZnVsXG4gICAgICogYmVjYXVzZSBpdCBjYW4gYWxzbyBiZSBjYWxsZWQgb24gYSBtZXRhdHJhbnNhY3Rpb24gam9iIGFuZFxuICAgICAqIHRoYXQgd2lsbCByZXR1cm4gdGhlIG1ldGF0cmFuc2FjdGlvbiBoYXNoLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRIYXNoKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yZGVySGFzaDtcbiAgICB9XG5cbiAgICAvLyBUeXBlT1JNIHJ1bnMgYSB2YWxpZGF0aW9uIGNoZWNrIHdoZXJlIGl0IGNhbGxzIHRoaXMgaW5pdGlhbGl6ZXIgd2l0aCBubyBhcmd1bWVudC5cbiAgICAvLyBXaXRoIG5vIGRlZmF1bHQgYG9wdHNgLCBgb3B0c2Agd2lsbCBiZSB1bmRlZmluZWQgYW5kIHRoZSB2YWxpZGF0aW9uIHdpbGwgdGhyb3csXG4gICAgLy8gdGhlcmVmb3JlLCBhZGQgdGhpcyBoYWNreSBkZWZhdWx0LlxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSBuby1vYmplY3QtbGl0ZXJhbC10eXBlLWFzc2VydGlvblxuICAgIGNvbnN0cnVjdG9yKG9wdHM6IFJmcW1WMkpvYkNvbnN0cnVjdG9yT3B0cyA9IHt9IGFzIFJmcW1WMkpvYkNvbnN0cnVjdG9yT3B0cykge1xuICAgICAgICB0aGlzLmtpbmQgPSAncmZxbV92Ml9qb2InO1xuXG4gICAgICAgIC8vIGFsbG93IGNyZWF0ZWRBdCBvdmVycmlkZXMgZm9yIHRlc3RpbmdcbiAgICAgICAgaWYgKG9wdHMuY3JlYXRlZEF0KSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZWRBdCA9IG9wdHMuY3JlYXRlZEF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hZmZpbGlhdGVBZGRyZXNzID0gb3B0cy5hZmZpbGlhdGVBZGRyZXNzID8/IG51bGw7XG4gICAgICAgIHRoaXMuYXBwcm92YWwgPSBvcHRzLmFwcHJvdmFsID8/IG51bGw7XG4gICAgICAgIHRoaXMuYXBwcm92YWxTaWduYXR1cmUgPSBvcHRzLmFwcHJvdmFsU2lnbmF0dXJlID8/IG51bGw7XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IG9wdHMuY2hhaW5JZDtcbiAgICAgICAgdGhpcy5leHBpcnkgPSBvcHRzLmV4cGlyeTtcbiAgICAgICAgdGhpcy5mZWUgPSBvcHRzLmZlZTtcbiAgICAgICAgdGhpcy5pbnRlZ3JhdG9ySWQgPSBvcHRzLmludGVncmF0b3JJZCA/PyBudWxsO1xuICAgICAgICB0aGlzLmlzVW53cmFwID0gb3B0cy5pc1Vud3JhcCA/PyBmYWxzZTtcbiAgICAgICAgdGhpcy5sYXN0TG9va1Jlc3VsdCA9IG9wdHMubGFzdExvb2tSZXN1bHQgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5sbFJlamVjdFByaWNlRGlmZmVyZW5jZUJwcyA9IG9wdHMubGxSZWplY3RQcmljZURpZmZlcmVuY2VCcHMgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5tYWtlclNpZ25hdHVyZSA9IG9wdHMubWFrZXJTaWduYXR1cmUgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5tYWtlclVyaSA9IG9wdHMubWFrZXJVcmk7XG4gICAgICAgIHRoaXMub3JkZXIgPSBvcHRzLm9yZGVyO1xuICAgICAgICB0aGlzLm9yZGVySGFzaCA9IG9wdHMub3JkZXJIYXNoO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IG9wdHMuc3RhdHVzID8/IFJmcW1Kb2JTdGF0dXMuUGVuZGluZ0VucXVldWVkO1xuICAgICAgICB0aGlzLnRha2VyU2lnbmF0dXJlID0gb3B0cy50YWtlclNpZ25hdHVyZSA/PyBudWxsO1xuICAgICAgICB0aGlzLnVwZGF0ZWRBdCA9IG9wdHMudXBkYXRlZEF0ID8/IG51bGw7XG4gICAgICAgIHRoaXMud29ya2VyQWRkcmVzcyA9IG9wdHMud29ya2VyQWRkcmVzcyA/PyBudWxsO1xuICAgICAgICB0aGlzLnRha2VyU3BlY2lmaWVkU2lkZSA9IG9wdHMudGFrZXJTcGVjaWZpZWRTaWRlID8/IG51bGw7XG4gICAgfVxufVxuIl0sInZlcnNpb24iOjN9