{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/quote_server_client.ts","mappings":";;;AAAA,mDAAmD;AAEnD,qDAAwE;AAExE,qCAAsC;AAEtC,yDAAuC;AACvC,6DAA6D;AAC7D,6CAAsC;AACtC,6BAA6B;AAE7B,sCAKmB;AACnB,iDAAyC;AACzC,sCAAmC;AACnC,6CAA0C;AAE1C,qCAA4C;AAE5C,MAAM,yBAAyB,GAAG,IAAI,qBAAO,CAAC;IAC1C,IAAI,EAAE,2BAA2B;IACjC,IAAI,EAAE,2CAA2C;IACjD,UAAU,EAAE,CAAC,UAAU,EAAE,YAAY,CAAC;CACzC,CAAC,CAAC;AAEH,MAAM,+CAA+C,GAAG,IAAI,qBAAO,CAAC;IAChE,IAAI,EAAE,iDAAiD;IACvD,IAAI,EAAE,yDAAyD;IAC/D,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;IAC1C,UAAU,EAAE,CAAC,MAAM,EAAE,iBAAiB,EAAE,UAAU,EAAE,SAAS,EAAE,YAAY,EAAE,QAAQ,CAAC;IACtF,aAAa,EAAE,EAAE;IACjB,UAAU,EAAE,CAAC;CAChB,CAAC,CAAC;AAEH,MAAM,YAAY,GAA8B;IAC5C,UAAU;IACV,4CAA4C,EAAE,KAAK;IACnD,4CAA4C,EAAE,MAAM;IACpD,4CAA4C,EAAE,MAAM;IACpD,4CAA4C,EAAE,MAAM;IACpD,UAAU;IACV,4CAA4C,EAAE,KAAK;IACnD,4CAA4C,EAAE,MAAM;IACpD,4CAA4C,EAAE,MAAM;IACpD,4CAA4C,EAAE,MAAM;IACpD,4CAA4C,EAAE,QAAQ;CACzD,CAAC;AAEF;;;;;;;;GAQG;AACH,SAAS,cAAc,CAAC,SAAiB,EAAE,cAAsB;IAC7D,MAAM,KAAK,GAAG,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,cAAc,CAAC,WAAW,EAAE,CAAC,CAAC;IACtE,KAAK,CAAC,IAAI,EAAE,CAAC;IAEb,MAAM,MAAM,GAAuB,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,MAAM,MAAM,GAAuB,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE;QACpB,OAAO,OAAO,CAAC;KAClB;IACD,OAAO,GAAG,MAAM,IAAI,MAAM,EAAE,CAAC;AACjC,CAAC;AAED,MAAM,eAAe,GAAG,IAAI,8BAAe,EAAE,CAAC;AAC9C,eAAe,CAAC,SAAS,CAAC,iBAAkB,CAAC,SAAS,CAAC,CAAC;AACxD,eAAe,CAAC,SAAS,CAAC,iBAAkB,CAAC,mBAAmB,CAAC,CAAC;AAClE,eAAe,CAAC,SAAS,CAAC,iBAAkB,CAAC,mBAAmB,CAAC,CAAC;AAClE,eAAe,CAAC,SAAS,CAAC,iBAAkB,CAAC,sBAAsB,CAAC,CAAC;AAErE,MAAa,iBAAiB;IAyG1B,YAA6B,cAA6B;QAA7B,mBAAc,GAAd,cAAc,CAAe;IAAG,CAAC;IAxG9D;;OAEG;IACI,MAAM,CAAC,mBAAmB,CAAC,KAWjC;QACG,MAAM,EACF,OAAO,EACP,QAAQ,EACR,YAAY,EACZ,eAAe,EACf,eAAe,EACf,gBAAgB,EAChB,eAAe,EACf,eAAe,EACf,UAAU,EACV,GAAG,GACN,GAAG,KAAK,CAAC;QACV,MAAM,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,GAC7C,eAAe,KAAK,uBAAe,CAAC,GAAG;YACnC,CAAC,CAAC;gBACI,kBAAkB,EAAE,eAAe;gBACnC,mBAAmB,EAAE,SAAS;aACjC;YACH,CAAC,CAAC;gBACI,mBAAmB,EAAE,eAAe;gBACpC,kBAAkB,EAAE,SAAS;aAChC,CAAC;QAEZ,MAAM,2BAA2B,GAa7B;YACA,QAAQ;YACR,YAAY;YACZ,eAAe;YACf,gBAAgB;YAChB,eAAe,EAAE,GAAG;SACvB,CAAC;QAEF,IAAI,eAAe,EAAE;YACjB,2BAA2B,CAAC,eAAe,GAAG,eAAe,CAAC,QAAQ,EAAE,CAAC;SAC5E;QAED,IAAI,UAAU,EAAE;YACZ,IAAI,GAAG,KAAK,SAAS,EAAE;gBACnB,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;aAC1E;YACD,2BAA2B,CAAC,UAAU,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;SAClE;QAED,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,wCAAwC,CAAC,CAAC;QAC/D,IAAI,GAAG,EAAE;YACL,eAAM,CAAC,IAAI,CACP;gBACI,SAAS,EAAE,GAAG,CAAC,MAAM;gBACrB,eAAe,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE;aACzC,EACD,sCAAsC,CACzC,CAAC;YACF,2BAA2B,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;YAC9D,2BAA2B,CAAC,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC;YACjD,2BAA2B,CAAC,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;SAClD;QAED,IAAI,OAAO,EAAE;YACT,2BAA2B,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;SACzD;QAED,gEAAgE;QAChE,IAAI,mBAAmB,EAAE;YACrB,OAAO;gBACH,GAAG,2BAA2B;gBAC9B,mBAAmB,EAAE,mBAAmB,CAAC,QAAQ,EAAE;aACtD,CAAC;SACL;aAAM,IAAI,kBAAkB,EAAE;YAC3B,OAAO;gBACH,GAAG,2BAA2B;gBAC9B,kBAAkB,EAAE,kBAAkB,CAAC,QAAQ,EAAE;aACpD,CAAC;SACL;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;SACzF;IACL,CAAC;IAID;;;;;;;;;OASG;IACI,KAAK,CAAC,eAAe,CACxB,QAAgB,EAChB,UAAsB,EACtB,UAAkC,EAClC,aAAoC;QAEpC,MAAM,WAAW,GAAG,+CAA+C,CAAC,UAAU,EAAE,CAAC;QACjF,MAAM,OAAO,GAAG;YACZ,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE;YAC5B,kBAAkB,EAAE,UAAU,CAAC,YAAY;YAC3C,YAAY,EAAE,UAAU,CAAC,YAAY;SACxC,CAAC;QACF,eAAM,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,UAAU,CAAC,YAAY,EAAE,QAAQ,EAAE,EAAE,wBAAwB,CAAC,CAAC;QAEhH,MAAM,UAAU,GAAG,EAAE,GAAG,UAAU,EAAE,CAAC;QACrC,OAAO,UAAU,CAAC,MAAM,CAAC;QACzB,OAAO,UAAU,CAAC,OAAO,CAAC;QAE1B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;YACpE,OAAO,EAAE,sCAA6B;YACtC,cAAc,EAAE,CAAC,MAAc,EAAE,EAAE;gBAC/B,oDAAoD;gBACpD,IAAI,MAAM,IAAI,GAAG,EAAE;oBACf,eAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,2DAA2D,CAAC,CAAC;iBAClG;gBACD,mCAAmC;gBACnC,OAAO,IAAI,CAAC;YAChB,CAAC;YACD,OAAO;YACP,MAAM,EAAE,UAAU;SACrB,CAAC,CAAC;QACH,eAAM,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,EAAE,2BAA2B,CAAC,CAAC;QAErG,WAAW,CAAC;YACR,IAAI,EAAE,aAAa,CAAC,EAAE,CAAC;YACvB,eAAe,EAAE,UAAU,CAAC,KAAK;YACjC,QAAQ;YACR,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,UAAU,EAAE,QAAQ,CAAC,MAAM;YAC3B,MAAM,EAAE,cAAc,CAAC,UAAU,CAAC,gBAAgB,EAAE,UAAU,CAAC,eAAe,CAAC;SAClF,CAAC,CAAC;QAEH,6DAA6D;QAC7D,IAAI,QAAQ,CAAC,MAAM,KAAK,sBAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YACrF,OAAO;SACV;QAED,MAAM,gBAAgB,GAAG,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,iBAAO,CAAC,gCAAgC,CAAC,CAAC;QAC3G,IAAI,gBAAgB,CAAC,MAAM,IAAI,gBAAgB,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/D,MAAM,SAAS,GAAG,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC9E,eAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,EAAE,0BAA0B,CAAC,CAAC;YACzG,MAAM,IAAI,KAAK,CAAC,yBAAyB,SAAS,EAAE,CAAC,CAAC;SACzD;QAED,OAAO;YACH,MAAM,EAAE,IAAI,iBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;YAC3C,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK;YAC1B,WAAW,EAAE,IAAI,iBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC;YACrD,UAAU,EAAE,QAAQ,CAAC,IAAI,CAAC,UAAU;YACpC,QAAQ;YACR,WAAW,EAAE,IAAI,iBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC;YACrD,UAAU,EAAE,QAAQ,CAAC,IAAI,CAAC,UAAU;SACvC,CAAC;IACN,CAAC;IAED;;;;;;;;OAQG;IACI,KAAK,CAAC,oBAAoB,CAC7B,SAAmB,EACnB,UAAsB,EACtB,UAAkC,EAClC,gBAAuC,CAAC,CAAS,EAAE,EAAE,CAAC,GAAG,CAAC,gBAAgB;QAE1E,OAAO,OAAO,CAAC,GAAG,CACd,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;YAC7B,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;;gBACvF,eAAM,CAAC,KAAK,CACR;oBACI,YAAY,EAAE,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO;oBAC1B,QAAQ;oBACR,MAAM,EAAE,MAAA,MAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,QAAQ,0CAAE,MAAM,mCAAI,SAAS;iBAC7C,EACD,qDAAqD,CACxD,CAAC;gBACF,OAAO,SAAS,CAAC;YACrB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CACL,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,EAA6B,EAAE,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;IAC7F,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACI,KAAK,CAAC,WAAW,CACpB,QAAgB,EAChB,YAAoB,EACpB,OAA2F,EAC3F,gBAAuC,CAAC,CAAS,EAAE,EAAE,CAAC,GAAG,CAAC,eAAe;IACzE,6DAA6D;IAC7D,kEAAkE;IAClE,yBAAkC,IAAI;;QAEtC,MAAM,WAAW,GAAG,yBAAyB,CAAC,UAAU,EAAE,CAAC;QAC3D,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAC9B,MAAM,OAAO,GAAG;YACZ,YAAY,EAAE,YAAY;YAC1B,kBAAkB,EAAE,YAAY;YAChC,iBAAiB,EAAE,WAAW;YAC9B,cAAc,EAAE,kBAAkB;SACrC,CAAC;QACF,eAAM,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,EAAE,uBAAuB,CAAC,CAAC;QACnF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAC9C,aAAa,CAAC,QAAQ,CAAC,EACvB;YACI,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,cAAc,EAAE,OAAO,CAAC,cAAc;YACtC,0BAA0B;YAC1B,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,KAAK;YAC3B,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,MAAM;YAC7B,8BAA8B;YAC9B,GAAG,CAAC,qCAA4B;gBAC5B,OAAO,CAAC,kBAAkB,IAAI,EAAE,kBAAkB,EAAE,OAAO,CAAC,kBAAkB,EAAE,CAAC;SACxF,EACD;YACI,OAAO,EAAE,qCAA4B;YACrC,OAAO,EAAE;gBACL,YAAY,EAAE,YAAY;gBAC1B,kBAAkB,EAAE,YAAY;gBAChC,iBAAiB,EAAE,WAAW;gBAC9B,cAAc,EAAE,kBAAkB;aACrC;YACD,cAAc,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,mCAAmC;SAClE,CACJ,CAAC;QACF,eAAM,CAAC,IAAI,CACP;YACI,QAAQ;YACR,WAAW;YACX,MAAM,EAAE,WAAW,CAAC,MAAM;YAC1B,IAAI,EAAE,WAAW,CAAC,IAAI;SACzB,EACD,0BAA0B,CAC7B,CAAC;QACF,WAAW,CAAC;YACR,QAAQ;YACR,UAAU,EAAE,WAAW,CAAC,MAAM;SACjC,CAAC,CAAC;QAEH,6EAA6E;QAE7E,MAAM,gBAAgB,GAAG,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,iBAAO,CAAC,kBAAkB,CAAC,CAAC;QAChG,IAAI,gBAAgB,CAAC,MAAM,IAAI,gBAAgB,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/D,MAAM,SAAS,GAAG,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC9E,eAAM,CAAC,KAAK,CACR,EAAE,QAAQ,EAAE,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,CAAC,MAAM,EAAE,EACpE,yBAAyB,CAC5B,CAAC;YACF,MAAM,IAAI,KAAK,CAAC,yBAAyB,SAAS,EAAE,CAAC,CAAC;SACzD;QAED,MAAM,eAAe,GAAG,MAAA,WAAW,CAAC,IAAI,0CAAE,eAAsC,CAAC;QACjF,MAAM,cAAc,GAA0B,MAAA,WAAW,CAAC,IAAI,0CAAE,cAAc,CAAC;QAC/E,MAAM,SAAS,GAAG,IAAI,iBAAS,CAAC,MAAA,WAAW,CAAC,IAAI,0CAAE,SAAS,CAAC,CAAC;QAE7D,IAAI,CAAC,eAAe,IAAI,sBAAsB,EAAE;YAC5C,eAAM,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,EAAE,uBAAuB,CAAC,CAAC;YACnD,OAAO,SAAS,CAAC;SACpB;QAED,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,gBAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YACpE,eAAM,CAAC,IAAI,CACP,EAAE,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,iBAAiB,EAAE,SAAS,EAAE,QAAQ,EAAE,EAChF,6BAA6B,CAChC,CAAC;YACF,OAAO,SAAS,CAAC;SACpB;QAED,IAAI,cAAc,KAAK,SAAS,EAAE;YAC9B,eAAM,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,EAAE,sBAAsB,CAAC,CAAC;YAClD,OAAO,SAAS,CAAC;SACpB;QAED,OAAO,cAAc,CAAC;IAC1B,CAAC;CACJ;AAlUD,8CAkUC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/quote_server_client.ts"],"sourcesContent":["import { SchemaValidator } from '@0x/json-schemas';\nimport { Signature } from '@0x/protocol-utils';\nimport { schemas as quoteServerSchemas } from '../quote-server/schemas';\nimport { SignRequest } from '../quote-server/types';\nimport { BigNumber } from '@0x/utils';\nimport { AxiosInstance } from 'axios';\nimport { OK } from 'http-status-codes';\n// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\nimport { Summary } from 'prom-client';\nimport * as uuid from 'uuid';\n\nimport {\n    Integrator,\n    RFQ_PRICE_ENDPOINT_TIMEOUT_MS,\n    RFQ_SIGN_ENDPOINT_TIMEOUT_MS,\n    TAKER_SPECIFIED_SIDE_ENABLED,\n} from '../config';\nimport { ZERO } from '../core/constants';\nimport { logger } from '../logger';\nimport { schemas } from '../core/schemas';\nimport { Fee, IndicativeQuote, QuoteServerPriceParams } from '../core/types';\nimport { MarketOperation } from '@0x/types';\n\nconst MARKET_MAKER_SIGN_LATENCY = new Summary({\n    name: 'market_maker_sign_latency',\n    help: 'Latency for sign request to Market Makers',\n    labelNames: ['makerUri', 'statusCode'],\n});\n\nconst RFQ_MARKET_MAKER_PRICE_REQUEST_DURATION_SECONDS = new Summary({\n    name: 'rfq_market_maker_price_request_duration_seconds',\n    help: 'Provides stats around market maker network interactions',\n    percentiles: [0.5, 0.9, 0.95, 0.99, 0.999], // tslint:disable-line: custom-no-magic-numbers\n    labelNames: ['type', 'integratorLabel', 'makerUri', 'chainId', 'statusCode', 'market'],\n    maxAgeSeconds: 60,\n    ageBuckets: 5,\n});\n\nconst KNOWN_TOKENS: { [key: string]: string } = {\n    // Mainnet\n    '0x6b175474e89094c44da98b954eedeac495271d0f': 'DAI',\n    '0xdac17f958d2ee523a2206206994597c13d831ec7': 'USDT',\n    '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48': 'USDC',\n    '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2': 'WETH',\n    // Polygon\n    '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063': 'DAI',\n    '0xc2132d05d31c914a87c6611c10748aeb04b58e8f': 'USDT',\n    '0x2791bca1f2de4661ed88a30c99a7a9449aa84174': 'USDC',\n    '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619': 'WETH',\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270': 'WMATIC',\n};\n\n/**\n * [Read this in Daniel's voice] Returns a human-readable label for Prometheus counters.\n * Only popular most relevant pairs should be displayed in Prometheus (since it overload the service)\n * and any other market that does not contain popular pairs will simply return \"Other\".\n *\n * @param tokenSold the token being sold\n * @param tokenPurchased the token being purchased\n * @returns a market like \"WETH-DAI\", or \"Other\" is a pair is unknown\n */\nfunction getMarketLabel(tokenSold: string, tokenPurchased: string): string {\n    const items = [tokenSold.toLowerCase(), tokenPurchased.toLowerCase()];\n    items.sort();\n\n    const tokenA: string | undefined = KNOWN_TOKENS[items[0]];\n    const tokenB: string | undefined = KNOWN_TOKENS[items[1]];\n    if (!tokenA || !tokenB) {\n        return 'Other';\n    }\n    return `${tokenA}-${tokenB}`;\n}\n\nconst schemaValidator = new SchemaValidator();\nschemaValidator.addSchema(quoteServerSchemas.feeSchema);\nschemaValidator.addSchema(quoteServerSchemas.submitRequestSchema);\nschemaValidator.addSchema(quoteServerSchemas.submitReceiptSchema);\nschemaValidator.addSchema(quoteServerSchemas.otcQuoteResponseSchema);\n\nexport class QuoteServerClient {\n    /**\n     * Prepares the query parameters (copied from QuoteRequestor)\n     */\n    public static makeQueryParameters(input: {\n        chainId?: number;\n        txOrigin: string;\n        takerAddress: string;\n        marketOperation: MarketOperation;\n        buyTokenAddress: string; // maker token\n        sellTokenAddress: string; // taker token\n        assetFillAmount: BigNumber;\n        comparisonPrice?: BigNumber;\n        isLastLook?: boolean | undefined;\n        fee?: Fee | undefined;\n    }): QuoteServerPriceParams {\n        const {\n            chainId,\n            txOrigin,\n            takerAddress,\n            marketOperation,\n            buyTokenAddress,\n            sellTokenAddress,\n            assetFillAmount,\n            comparisonPrice,\n            isLastLook,\n            fee,\n        } = input;\n        const { buyAmountBaseUnits, sellAmountBaseUnits } =\n            marketOperation === MarketOperation.Buy\n                ? {\n                      buyAmountBaseUnits: assetFillAmount,\n                      sellAmountBaseUnits: undefined,\n                  }\n                : {\n                      sellAmountBaseUnits: assetFillAmount,\n                      buyAmountBaseUnits: undefined,\n                  };\n\n        const requestParamsWithBigNumbers: Pick<\n            QuoteServerPriceParams,\n            | 'chainId'\n            | 'txOrigin'\n            | 'takerAddress'\n            | 'buyTokenAddress'\n            | 'sellTokenAddress'\n            | 'comparisonPrice'\n            | 'isLastLook'\n            | 'protocolVersion'\n            | 'feeAmount'\n            | 'feeToken'\n            | 'feeType'\n        > = {\n            txOrigin,\n            takerAddress,\n            buyTokenAddress,\n            sellTokenAddress,\n            protocolVersion: '4',\n        };\n\n        if (comparisonPrice) {\n            requestParamsWithBigNumbers.comparisonPrice = comparisonPrice.toString();\n        }\n\n        if (isLastLook) {\n            if (fee === undefined) {\n                throw new Error(`isLastLook cannot be passed without a fee parameter`);\n            }\n            requestParamsWithBigNumbers.isLastLook = isLastLook.toString();\n        }\n\n        logger.info({ fee }, 'fee parameter in `makeQueryParameters`');\n        if (fee) {\n            logger.info(\n                {\n                    feeAmount: fee.amount,\n                    feeAmountString: fee.amount.toString(),\n                },\n                'fee amounts in `makeQueryParameters`',\n            );\n            requestParamsWithBigNumbers.feeAmount = fee.amount.toString();\n            requestParamsWithBigNumbers.feeToken = fee.token;\n            requestParamsWithBigNumbers.feeType = fee.type;\n        }\n\n        if (chainId) {\n            requestParamsWithBigNumbers.chainId = String(chainId);\n        }\n\n        // convert BigNumbers to strings so they are digestible by axios\n        if (sellAmountBaseUnits) {\n            return {\n                ...requestParamsWithBigNumbers,\n                sellAmountBaseUnits: sellAmountBaseUnits.toString(),\n            };\n        } else if (buyAmountBaseUnits) {\n            return {\n                ...requestParamsWithBigNumbers,\n                buyAmountBaseUnits: buyAmountBaseUnits.toString(),\n            };\n        } else {\n            throw new Error('Neither \"buyAmountBaseUnits\" or \"sellAmountBaseUnits\" were defined');\n        }\n    }\n\n    constructor(private readonly _axiosInstance: AxiosInstance) {}\n\n    /**\n     * Fetch a price (indicative quote)\n     *\n     * @param makerUri - the maker URI\n     * @param integrator - the integrator\n     * @param parameters - the query parameters (created via {@link QuoteServerClient.makeQueryParameters} )\n     * @param makerUriToUrl - function to transform the maker URI into its `price` endpoint\n     * @returns - a Promise containing the indicative quote if available, else undefined\n     * @throws - Will throw an error if a 4xx or 5xx is returned\n     */\n    public async getPriceV2Async(\n        makerUri: string,\n        integrator: Integrator,\n        parameters: QuoteServerPriceParams,\n        makerUriToUrl: (u: string) => string,\n    ): Promise<IndicativeQuote | undefined> {\n        const timerStopFn = RFQ_MARKET_MAKER_PRICE_REQUEST_DURATION_SECONDS.startTimer();\n        const headers = {\n            '0x-request-uuid': uuid.v4(),\n            '0x-integrator-id': integrator.integratorId,\n            '0x-api-key': integrator.integratorId,\n        };\n        logger.info({ headers, parameters, integratorId: integrator.integratorId, makerUri }, 'v2/price request to MM');\n\n        const tempParams = { ...parameters };\n        delete tempParams.trader;\n        delete tempParams.worflow;\n\n        const response = await this._axiosInstance.get(makerUriToUrl(makerUri), {\n            timeout: RFQ_PRICE_ENDPOINT_TIMEOUT_MS,\n            validateStatus: (status: number) => {\n                // tslint:disable-next-line: custom-no-magic-numbers\n                if (status >= 300) {\n                    logger.warn({ status, makerUri }, 'Received non-OK status requesting price from market maker');\n                }\n                // Don't throw errors on 4xx or 5xx\n                return true;\n            },\n            headers,\n            params: tempParams,\n        });\n        logger.info({ makerUri, body: response.data, status: response.status }, 'v2/price response from MM');\n\n        timerStopFn({\n            type: makerUriToUrl(''), // HACK - used to distinguish between RFQm and RFQt\n            integratorLabel: integrator.label,\n            makerUri,\n            chainId: parameters.chainId,\n            statusCode: response.status,\n            market: getMarketLabel(parameters.sellTokenAddress, parameters.buyTokenAddress),\n        });\n\n        // Empty response from MM (not 200, no data, or empty object)\n        if (response.status !== OK || !response.data || Object.keys(response.data).length === 0) {\n            return;\n        }\n\n        const validationResult = schemaValidator.validate(response.data, schemas.indicativeOtcQuoteResponseSchema);\n        if (validationResult.errors && validationResult.errors.length > 0) {\n            const errorsMsg = validationResult.errors.map((err) => err.message).join(',');\n            logger.error({ response: response.data, makerUri, status: response.status }, 'Malformed price response');\n            throw new Error(`Error from validator: ${errorsMsg}`);\n        }\n\n        return {\n            expiry: new BigNumber(response.data.expiry),\n            maker: response.data.maker,\n            makerAmount: new BigNumber(response.data.makerAmount),\n            makerToken: response.data.makerToken,\n            makerUri,\n            takerAmount: new BigNumber(response.data.takerAmount),\n            takerToken: response.data.takerToken,\n        };\n    }\n\n    /**\n     * Fetch a batch of prices. Ignores all quotes that return errors\n     *\n     * @param makerUris - a list of maker URIs\n     * @param integrator - the integrator\n     * @param parameters - the query parameters (created via {@link QuoteServerClient.makeQueryParameters} )\n     * @param makerUriToUrl - function to transform the maker URI into its `price` endpoint\n     * @returns - a Promise containing a list of indicative quotes\n     */\n    public async batchGetPriceV2Async(\n        makerUris: string[],\n        integrator: Integrator,\n        parameters: QuoteServerPriceParams,\n        makerUriToUrl: (u: string) => string = (u: string) => `${u}/rfqm/v2/price`,\n    ): Promise<IndicativeQuote[]> {\n        return Promise.all(\n            makerUris.map(async (makerUri) => {\n                return this.getPriceV2Async(makerUri, integrator, parameters, makerUriToUrl).catch((err) => {\n                    logger.error(\n                        {\n                            errorMessage: err?.message,\n                            makerUri,\n                            status: err?.response?.status ?? 'unknown',\n                        },\n                        'Encountered an error requesting an indicative quote',\n                    );\n                    return undefined;\n                });\n            }),\n        ).then((arr) => arr.filter((result): result is IndicativeQuote => result !== undefined));\n    }\n\n    /**\n     * Request a signature from a MM for a given OtcOrder\n     *\n     * @param makerUri - the MM's uri\n     * @param integratorId - the integrator id\n     * @param payload - the payload of the request. RFQm transactions require\n     *   `takerSignature` to be present, while `takerSignature` will not be\n     *   present for RFQt transactions.\n     * @param requireProceedWithFill - whether or not to require the response\n     *  to include a `proceedWithFill` field. This field is specific to RFQm\n     *  and isn't required for an RFQt sign request.\n     * @param makerUriToUrl - function to transform the maker URI into its `sign` endpoint\n     * @returns - The signature if successful, undefined otherwise\n     * @throws - Will throw an error if a 4xx or 5xx is returned\n     */\n    public async signV2Async(\n        makerUri: string,\n        integratorId: string,\n        payload: Omit<SignRequest, 'takerSignature'> & Pick<Partial<SignRequest>, 'takerSignature'>,\n        makerUriToUrl: (u: string) => string = (u: string) => `${u}/rfqm/v2/sign`,\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-inferrable-types\n        requireProceedWithFill: boolean = true,\n    ): Promise<Signature | undefined> {\n        const timerStopFn = MARKET_MAKER_SIGN_LATENCY.startTimer();\n        const requestUuid = uuid.v4();\n        const headers = {\n            '0x-api-key': integratorId,\n            '0x-integrator-id': integratorId,\n            '0x-request-uuid': requestUuid,\n            'Content-Type': 'application/json',\n        };\n        logger.info({ headers, payload, integratorId, makerUri }, 'v2/sign request to MM');\n        const rawResponse = await this._axiosInstance.post(\n            makerUriToUrl(makerUri),\n            {\n                order: payload.order,\n                orderHash: payload.orderHash,\n                expiry: payload.expiry,\n                takerSignature: payload.takerSignature,\n                // trader: payload.trader,\n                feeToken: payload.fee.token,\n                feeAmount: payload.fee.amount,\n                // workflow: payload.workflow,\n                ...(TAKER_SPECIFIED_SIDE_ENABLED &&\n                    payload.takerSpecifiedSide && { takerSpecifiedSide: payload.takerSpecifiedSide }),\n            },\n            {\n                timeout: RFQ_SIGN_ENDPOINT_TIMEOUT_MS,\n                headers: {\n                    '0x-api-key': integratorId,\n                    '0x-integrator-id': integratorId,\n                    '0x-request-uuid': requestUuid,\n                    'Content-Type': 'application/json',\n                },\n                validateStatus: () => true, // Don't throw errors on 4xx or 5xx\n            },\n        );\n        logger.info(\n            {\n                makerUri,\n                requestUuid,\n                status: rawResponse.status,\n                body: rawResponse.data,\n            },\n            'v2/sign response from MM',\n        );\n        timerStopFn({\n            makerUri,\n            statusCode: rawResponse.status,\n        });\n\n        // TODO (rhinodavid): Filter out non-successful statuses from validation step\n\n        const validationResult = schemaValidator.validate(rawResponse.data, schemas.signResponseSchema);\n        if (validationResult.errors && validationResult.errors.length > 0) {\n            const errorsMsg = validationResult.errors.map((err) => err.message).join(',');\n            logger.error(\n                { response: rawResponse.data, makerUri, status: rawResponse.status },\n                'Malformed sign response',\n            );\n            throw new Error(`Error from validator: ${errorsMsg}`);\n        }\n\n        const proceedWithFill = rawResponse.data?.proceedWithFill as boolean | undefined;\n        const makerSignature: Signature | undefined = rawResponse.data?.makerSignature;\n        const feeAmount = new BigNumber(rawResponse.data?.feeAmount);\n\n        if (!proceedWithFill && requireProceedWithFill) {\n            logger.info({ makerUri }, 'Sign request rejected');\n            return undefined;\n        }\n\n        if (!payload.fee.amount.eq(ZERO) && !feeAmount.gte(payload.fee.amount)) {\n            logger.warn(\n                { requestFeeAmount: payload.fee.amount, responseFeeAmount: feeAmount, makerUri },\n                'Invalid fee acknowledgement',\n            );\n            return undefined;\n        }\n\n        if (makerSignature === undefined) {\n            logger.warn({ makerUri }, 'Signature is missing');\n            return undefined;\n        }\n\n        return makerSignature;\n    }\n}\n"],"version":3}