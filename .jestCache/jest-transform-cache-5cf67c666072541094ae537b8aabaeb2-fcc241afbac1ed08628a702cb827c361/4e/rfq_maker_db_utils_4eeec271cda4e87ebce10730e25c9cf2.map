{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfq_maker_db_utils.ts","mappings":";;;AAEA,0CAA+D;AAE/D;;GAEG;AACH,MAAa,eAAe;IACxB,YAA6B,WAAuB;QAAvB,gBAAW,GAAX,WAAW,CAAY;IAAG,CAAC;IAExD;;OAEG;IACI,KAAK,CAAC,gBAAgB,CAAC,OAAe,EAAE,OAAe;QAC1D,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,mBAAQ,CAAC,CAAC,OAAO,CAAC;YACpD,KAAK,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE;SAC9B,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,iBAAiB,CAAC,OAAe;QAC1C,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,mBAAQ,CAAC,CAAC,IAAI,CAAC;YACjD,KAAK,EAAE,EAAE,OAAO,EAAE;SACrB,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,+BAA+B,CAAC,OAAe;QACxD,MAAM,sBAAsB,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,iCAAsB,CAAC,CAAC,OAAO,CAAC;YAChG,KAAK,EAAE,EAAE,OAAO,EAAE;SACrB,CAAC,CAAC;QAEH,OAAO,sBAAsB,CAAC,CAAC,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IACvE,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,2BAA2B,CACpC,OAAe,EACf,OAAe,EACf,KAAyB,EACzB,OAAsB,EACtB,OAAsB;QAEtB,MAAM,QAAQ,GAAG,IAAI,mBAAQ,CAAC;YAC1B,OAAO;YACP,OAAO;YACP,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,KAAK;YACL,OAAO;YACP,OAAO;SACV,CAAC,CAAC;QACH,MAAM,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,mBAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9D,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,8DAA8D,CAAC,CAAC;QAC7F,OAAO,QAAQ,CAAC;IACpB,CAAC;CACJ;AAtDD,0CAsDC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfq_maker_db_utils.ts"],"sourcesContent":["import { Connection } from 'typeorm';\n\nimport { RfqMaker, RfqMakerUpdateTimeHash } from '../entities';\n\n/**\n * RfqMakerDbUtils provides tools for maker services to interact with the database\n */\nexport class RfqMakerDbUtils {\n    constructor(private readonly _connection: Connection) {}\n\n    /**\n     * [RFQ maker] find RfqMaker for given maker and blockchain\n     */\n    public async getRfqMakerAsync(makerId: string, chainId: number): Promise<RfqMaker | null> {\n        return this._connection.getRepository(RfqMaker).findOne({\n            where: { makerId, chainId },\n        });\n    }\n\n    /**\n     * [RFQ maker] find all RfqMaker for given blockchain\n     */\n    public async getRfqMakersAsync(chainId: number): Promise<RfqMaker[]> {\n        return this._connection.getRepository(RfqMaker).find({\n            where: { chainId },\n        });\n    }\n\n    /**\n     * [RFQ maker] find a hash for all RfqMaker update time\n     */\n    public async getRfqMakersUpdateTimeHashAsync(chainId: number): Promise<string | null> {\n        const rfqMakerUpdateTimeHash = await this._connection.getRepository(RfqMakerUpdateTimeHash).findOne({\n            where: { chainId },\n        });\n\n        return rfqMakerUpdateTimeHash ? rfqMakerUpdateTimeHash.hash : null;\n    }\n\n    /**\n     * [RFQ maker] create or update RfqMaker for given maker and blockchain\n     */\n    public async createOrUpdateRfqMakerAsync(\n        makerId: string,\n        chainId: number,\n        pairs: [string, string][],\n        rfqtUri: string | null,\n        rfqmUri: string | null,\n    ): Promise<RfqMaker> {\n        const rfqMaker = new RfqMaker({\n            makerId,\n            chainId,\n            updatedAt: new Date(),\n            pairs,\n            rfqtUri,\n            rfqmUri,\n        });\n        await this._connection.getRepository(RfqMaker).save(rfqMaker);\n        await this._connection.query(`REFRESH MATERIALIZED VIEW rfq_maker_pairs_update_time_hashes`);\n        return rfqMaker;\n    }\n}\n"],"version":3}