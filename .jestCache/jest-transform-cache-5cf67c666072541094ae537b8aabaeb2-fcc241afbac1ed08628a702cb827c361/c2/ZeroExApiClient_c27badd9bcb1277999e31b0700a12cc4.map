{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/ZeroExApiClient.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/ZeroExApiClient.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { AxiosInstance } from 'axios';\nimport { Summary } from 'prom-client';\n\nimport { ChainConfiguration } from '../config';\nimport { logger } from '../logger';\nimport { QuoteContext } from '../services/types';\n\n/**\n * With this summary metric, some of the things you can do are:\n * - Get the rate of failed requests\n * - Get the rate of success requests\n * - Get the p99 of request duration of success/failed requests (with the sliding window of 1 minute)\n */\nconst RFQ_AMM_QUOTE_FETCH_REQUEST_DURATION_SECONDS = new Summary({\n    name: 'rfq_amm_quote_fetch_request_duration_seconds',\n    help: 'Histogram of request duration of AMM Quote fetch request',\n    percentiles: [0.5, 0.9, 0.95, 0.99, 0.999], // tslint:disable-line: custom-no-magic-numbers\n    labelNames: ['chainId', 'success', 'errorType'],\n    // Set sliding window to 1 minutes\n    maxAgeSeconds: 60,\n    // The more number of age buckets, the smoother the time window is moved\n    // but it also consumes more memory & CPU for maintaining the bucket.\n    ageBuckets: 5,\n});\n\nenum FailedFetchErrorType {\n    InvalidBody = 'invalid_body',\n    Other = 'other',\n}\n\nexport interface AmmQuote {\n    makerAmount: BigNumber;\n    takerAmount: BigNumber;\n    expectedSlippage: BigNumber;\n    estimatedGasFeeWei: BigNumber;\n    decodedUniqueId?: string;\n}\n\ninterface ZeroExApiGetQuoteResponse {\n    buyAmount: string;\n    sellAmount: string;\n    estimatedGas: string;\n    gasPrice: string;\n    expectedSlippage: string;\n    decodedUniqueId?: string;\n}\n\nexport class ZeroExApiClient {\n    public constructor(\n        private readonly _axiosInstance: AxiosInstance,\n        private readonly _zeroExApiKey: string,\n        private readonly _chainConfiguration: Pick<ChainConfiguration, 'chainId' | 'zeroExClientBaseUrl'>,\n    ) {}\n\n    /**\n     * Fetch AMM Quote from 0x API. The quoteContext provided in the params will be transformed to match with 0x API definition:\n     * - takerAmount -> sellAmount\n     * - makerAmount -> buyAmount\n     *\n     * The response from 0x API will also be transformed (in reverse) to match with AmmQuote interface.\n     *\n     * @returns a promise resolved to AMM Quote if the fetch was successful. Otherwise, returns a promise resolved to null.\n     */\n    public async fetchAmmQuoteAsync(\n        quoteContext: Pick<\n            QuoteContext,\n            'takerAmount' | 'makerAmount' | 'takerToken' | 'makerToken' | 'takerAddress' | 'affiliateAddress'\n        >,\n    ): Promise<AmmQuote | null> {\n        const stopTimer = RFQ_AMM_QUOTE_FETCH_REQUEST_DURATION_SECONDS.startTimer({\n            chainId: this._chainConfiguration.chainId.toString(),\n        });\n\n        // Transform QuoteContext to 0xAPI Get Quote Params\n        const zeroExApiGetQuoteParams: {\n            buyAmount?: string;\n            buyToken: string;\n            sellAmount?: string;\n            sellToken: string;\n            takerAddress?: string;\n            affiliateAddress?: string;\n            excludedSources: string;\n        } = {\n            buyAmount: quoteContext.makerAmount?.toString(),\n            buyToken: quoteContext.makerToken,\n            sellAmount: quoteContext.takerAmount?.toString(),\n            sellToken: quoteContext.takerToken,\n            takerAddress: quoteContext.takerAddress,\n            affiliateAddress: quoteContext.affiliateAddress,\n            excludedSources: '0x', // Exclude 0x source to get quote from AMM only\n        };\n\n        try {\n            const { data }: { data: ZeroExApiGetQuoteResponse } = await this._axiosInstance.get('/swap/v1/quote', {\n                baseURL: this._chainConfiguration.zeroExClientBaseUrl,\n                params: zeroExApiGetQuoteParams,\n                headers: {\n                    '0x-api-key': this._zeroExApiKey,\n                },\n            });\n\n            // Parsing and validating 0xAPI response\n            const makerAmount = new BigNumber(data.buyAmount);\n            const takerAmount = new BigNumber(data.sellAmount);\n            const estimatedGas = new BigNumber(data.estimatedGas);\n            const gasPrice = new BigNumber(data.gasPrice);\n            const expectedSlippage = new BigNumber(data.expectedSlippage !== null ? data.expectedSlippage : 0);\n            const { decodedUniqueId } = data;\n            if (\n                makerAmount.isNaN() ||\n                takerAmount.isNaN() ||\n                estimatedGas.isNaN() ||\n                gasPrice.isNaN() ||\n                expectedSlippage.isNaN()\n            ) {\n                throw new Error(`Unexpected body returned from 0xAPI: ${JSON.stringify(data)}`);\n            }\n            if (!decodedUniqueId) {\n                logger.warn(`Missing decodedUniqueId from 0xAPI`);\n            }\n\n            // Mapping 0x API's response to AmmQuote\n            const ammQuote: AmmQuote = {\n                makerAmount,\n                takerAmount,\n                estimatedGasFeeWei: estimatedGas.times(gasPrice),\n                expectedSlippage,\n                decodedUniqueId,\n            };\n\n            stopTimer({ success: 'true' });\n            return ammQuote;\n        } catch (error) {\n            if (error.message.includes('Unexpected body returned from 0xAPI')) {\n                stopTimer({ success: 'false', errorType: FailedFetchErrorType.InvalidBody });\n            } else {\n                stopTimer({ success: 'false', errorType: FailedFetchErrorType.Other });\n            }\n            logger.error(\n                {\n                    chainId: this._chainConfiguration.chainId,\n                    zeroExApiGetQuoteParams,\n                    message: error.message,\n                    body: error.response?.data || null,\n                },\n                'Failed to fetch AMM Quote from 0x API',\n            );\n            return null;\n        }\n    }\n}\n"],"version":3}