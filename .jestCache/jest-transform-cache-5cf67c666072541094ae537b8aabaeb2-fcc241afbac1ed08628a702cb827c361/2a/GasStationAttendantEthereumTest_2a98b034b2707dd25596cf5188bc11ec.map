{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/GasStationAttendantEthereumTest.ts","mappings":";;AAAA,qCAAsC;AACtC,+BAA8B;AAC9B,2CAAkD;AAElD,mEAAgE;AAChE,6FAA0F;AAC1F,qFAA+E;AAE/E,IAAI,aAA6B,CAAC;AAElC,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IACzC,SAAS,CAAC,GAAG,EAAE;QACX,aAAa,GAAG,IAAA,iBAAI,EAAC,+BAAc,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;QAC3C,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YACvC,IAAA,iBAAI,EAAC,aAAa,CAAC,wBAAwB,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,iBAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAChF,IAAA,iBAAI,EAAC,aAAa,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,iBAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YAE/F,MAAM,SAAS,GAAG,IAAI,yDAA2B,CAAC,IAAA,qBAAQ,EAAC,aAAa,CAAC,CAAC,CAAC;YAE3E,MAAM,gBAAgB,GAAG,MAAM,SAAS,CAAC,6BAA6B,EAAE,CAAC;YAEzE,sEAAsE;YACtE,qBAAqB;YACrB,qDAAqD;YACrD,MAAM,WAAW,GAAG,IAAA,8CAAoB,EACpC,4CAA4C,EAC5C,4CAA4C,EAC5C,KAAK,EACL,IAAI,CACP,CAAC;YAEF,IAAA,aAAM,EAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK;YACvD,oDAAoD;YACpD,IAAI,iBAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CACjF,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAChD,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAChD,IAAA,iBAAI,EAAC,aAAa,CAAC,wBAAwB,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,iBAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAEhF,MAAM,SAAS,GAAG,IAAI,yDAA2B,CAAC,IAAA,qBAAQ,EAAC,aAAa,CAAC,CAAC,CAAC;YAE3E,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,kCAAkC,EAAE,CAAC;YAErE,mBAAmB;YACnB,kBAAkB;YAClB,MAAM,WAAW,GAAG,IAAI,iBAAS,CAAC,UAAU,CAAC,CAAC;YAE9C,IAAA,aAAM,EAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK;YAC/B,oDAAoD;YACpD,IAAI,iBAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,QAAQ,EAAE,CACnD,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/GasStationAttendantEthereumTest.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { expect } from 'chai';\nimport { instance, mock, when } from 'ts-mockito';\n\nimport { GasOracleType2 } from '../../src/utils/GasOracleType2';\nimport { GasStationAttendantEthereum } from '../../src/utils/GasStationAttendantEthereum';\nimport { calculateGasEstimate } from '../../src/utils/rfqm_gas_estimate_utils';\n\nlet gasOracleMock: GasOracleType2;\n\ndescribe('GasStationAttendantEthereum', () => {\n    beforeAll(() => {\n        gasOracleMock = mock(GasOracleType2);\n    });\n\n    describe('getWorkerBalanceForTradeAsync', () => {\n        it('gets the balance to trade', async () => {\n            when(gasOracleMock.getBaseFeePerGasWeiAsync()).thenResolve(new BigNumber(1000));\n            when(gasOracleMock.getMaxPriorityFeePerGasWeiAsync('instant')).thenResolve(new BigNumber(666));\n\n            const attendant = new GasStationAttendantEthereum(instance(gasOracleMock));\n\n            const workerGasToTrade = await attendant.getWorkerBalanceForTradeAsync();\n\n            // Base fee is 1000. With 6 10% increases = 1000 * (1.1)^ 6 = 1771.561\n            // Instant tip is 666\n            // Gas estimate matches the one used in the algorithm\n            const gasEstimate = calculateGasEstimate(\n                '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9',\n                '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n                'otc',\n                true,\n            );\n\n            expect(workerGasToTrade.toPrecision(2).toString()).to.equal(\n                // tslint:disable-next-line: custom-no-magic-numbers\n                new BigNumber(1771.561).plus(666).times(gasEstimate).toPrecision(2).toString(),\n            );\n        });\n    });\n\n    describe('getExpectedTransactionGasRateAsync', () => {\n        it('estimates the transaction gas rate', async () => {\n            when(gasOracleMock.getBaseFeePerGasWeiAsync()).thenResolve(new BigNumber(1000));\n\n            const attendant = new GasStationAttendantEthereum(instance(gasOracleMock));\n\n            const gasRate = await attendant.getExpectedTransactionGasRateAsync();\n\n            // Base fee is 1000\n            // Tip estimate is\n            const tipEstimate = new BigNumber(2750000000);\n\n            expect(gasRate.toString()).to.equal(\n                // tslint:disable-next-line: custom-no-magic-numbers\n                new BigNumber(1000).plus(tipEstimate).toString(),\n            );\n        });\n    });\n});\n"],"version":3}