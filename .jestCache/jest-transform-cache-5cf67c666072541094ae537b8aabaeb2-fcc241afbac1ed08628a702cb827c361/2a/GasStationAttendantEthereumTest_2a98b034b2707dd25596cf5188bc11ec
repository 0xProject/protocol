16851e4323b65ccbe582a6de73767745
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@0x/utils");
const chai_1 = require("chai");
const ts_mockito_1 = require("ts-mockito");
const GasOracleType2_1 = require("../../src/utils/GasOracleType2");
const GasStationAttendantEthereum_1 = require("../../src/utils/GasStationAttendantEthereum");
const rfqm_gas_estimate_utils_1 = require("../../src/utils/rfqm_gas_estimate_utils");
let gasOracleMock;
describe('GasStationAttendantEthereum', () => {
    beforeAll(() => {
        gasOracleMock = (0, ts_mockito_1.mock)(GasOracleType2_1.GasOracleType2);
    });
    describe('getWorkerBalanceForTradeAsync', () => {
        it('gets the balance to trade', async () => {
            (0, ts_mockito_1.when)(gasOracleMock.getBaseFeePerGasWeiAsync()).thenResolve(new utils_1.BigNumber(1000));
            (0, ts_mockito_1.when)(gasOracleMock.getMaxPriorityFeePerGasWeiAsync('instant')).thenResolve(new utils_1.BigNumber(666));
            const attendant = new GasStationAttendantEthereum_1.GasStationAttendantEthereum((0, ts_mockito_1.instance)(gasOracleMock));
            const workerGasToTrade = await attendant.getWorkerBalanceForTradeAsync();
            // Base fee is 1000. With 6 10% increases = 1000 * (1.1)^ 6 = 1771.561
            // Instant tip is 666
            // Gas estimate matches the one used in the algorithm
            const gasEstimate = (0, rfqm_gas_estimate_utils_1.calculateGasEstimate)('0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9', '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', 'otc', true);
            (0, chai_1.expect)(workerGasToTrade.toPrecision(2).toString()).to.equal(
            // tslint:disable-next-line: custom-no-magic-numbers
            new utils_1.BigNumber(1771.561).plus(666).times(gasEstimate).toPrecision(2).toString());
        });
    });
    describe('getExpectedTransactionGasRateAsync', () => {
        it('estimates the transaction gas rate', async () => {
            (0, ts_mockito_1.when)(gasOracleMock.getBaseFeePerGasWeiAsync()).thenResolve(new utils_1.BigNumber(1000));
            const attendant = new GasStationAttendantEthereum_1.GasStationAttendantEthereum((0, ts_mockito_1.instance)(gasOracleMock));
            const gasRate = await attendant.getExpectedTransactionGasRateAsync();
            // Base fee is 1000
            // Tip estimate is
            const tipEstimate = new utils_1.BigNumber(2750000000);
            (0, chai_1.expect)(gasRate.toString()).to.equal(
            // tslint:disable-next-line: custom-no-magic-numbers
            new utils_1.BigNumber(1000).plus(tipEstimate).toString());
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvR2FzU3RhdGlvbkF0dGVuZGFudEV0aGVyZXVtVGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFzQztBQUN0QywrQkFBOEI7QUFDOUIsMkNBQWtEO0FBRWxELG1FQUFnRTtBQUNoRSw2RkFBMEY7QUFDMUYscUZBQStFO0FBRS9FLElBQUksYUFBNkIsQ0FBQztBQUVsQyxRQUFRLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO0lBQ3pDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDWCxhQUFhLEdBQUcsSUFBQSxpQkFBSSxFQUFDLCtCQUFjLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7UUFDM0MsRUFBRSxDQUFDLDJCQUEyQixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3ZDLElBQUEsaUJBQUksRUFBQyxhQUFhLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLGlCQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNoRixJQUFBLGlCQUFJLEVBQUMsYUFBYSxDQUFDLCtCQUErQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksaUJBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBRS9GLE1BQU0sU0FBUyxHQUFHLElBQUkseURBQTJCLENBQUMsSUFBQSxxQkFBUSxFQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFFM0UsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLFNBQVMsQ0FBQyw2QkFBNkIsRUFBRSxDQUFDO1lBRXpFLHNFQUFzRTtZQUN0RSxxQkFBcUI7WUFDckIscURBQXFEO1lBQ3JELE1BQU0sV0FBVyxHQUFHLElBQUEsOENBQW9CLEVBQ3BDLDRDQUE0QyxFQUM1Qyw0Q0FBNEMsRUFDNUMsS0FBSyxFQUNMLElBQUksQ0FDUCxDQUFDO1lBRUYsSUFBQSxhQUFNLEVBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUs7WUFDdkQsb0RBQW9EO1lBQ3BELElBQUksaUJBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FDakYsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUFFO1FBQ2hELEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNoRCxJQUFBLGlCQUFJLEVBQUMsYUFBYSxDQUFDLHdCQUF3QixFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxpQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFFaEYsTUFBTSxTQUFTLEdBQUcsSUFBSSx5REFBMkIsQ0FBQyxJQUFBLHFCQUFRLEVBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUUzRSxNQUFNLE9BQU8sR0FBRyxNQUFNLFNBQVMsQ0FBQyxrQ0FBa0MsRUFBRSxDQUFDO1lBRXJFLG1CQUFtQjtZQUNuQixrQkFBa0I7WUFDbEIsTUFBTSxXQUFXLEdBQUcsSUFBSSxpQkFBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRTlDLElBQUEsYUFBTSxFQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLO1lBQy9CLG9EQUFvRDtZQUNwRCxJQUFJLGlCQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUNuRCxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZHdhbHNoL2NvZGUtbG9jYWwvMHgtcmZxLWFwaS90ZXN0L3V0aWxzL0dhc1N0YXRpb25BdHRlbmRhbnRFdGhlcmV1bVRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnQDB4L3V0aWxzJztcbmltcG9ydCB7IGV4cGVjdCB9IGZyb20gJ2NoYWknO1xuaW1wb3J0IHsgaW5zdGFuY2UsIG1vY2ssIHdoZW4gfSBmcm9tICd0cy1tb2NraXRvJztcblxuaW1wb3J0IHsgR2FzT3JhY2xlVHlwZTIgfSBmcm9tICcuLi8uLi9zcmMvdXRpbHMvR2FzT3JhY2xlVHlwZTInO1xuaW1wb3J0IHsgR2FzU3RhdGlvbkF0dGVuZGFudEV0aGVyZXVtIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL0dhc1N0YXRpb25BdHRlbmRhbnRFdGhlcmV1bSc7XG5pbXBvcnQgeyBjYWxjdWxhdGVHYXNFc3RpbWF0ZSB9IGZyb20gJy4uLy4uL3NyYy91dGlscy9yZnFtX2dhc19lc3RpbWF0ZV91dGlscyc7XG5cbmxldCBnYXNPcmFjbGVNb2NrOiBHYXNPcmFjbGVUeXBlMjtcblxuZGVzY3JpYmUoJ0dhc1N0YXRpb25BdHRlbmRhbnRFdGhlcmV1bScsICgpID0+IHtcbiAgICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgICAgICBnYXNPcmFjbGVNb2NrID0gbW9jayhHYXNPcmFjbGVUeXBlMik7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnZ2V0V29ya2VyQmFsYW5jZUZvclRyYWRlQXN5bmMnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdnZXRzIHRoZSBiYWxhbmNlIHRvIHRyYWRlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgd2hlbihnYXNPcmFjbGVNb2NrLmdldEJhc2VGZWVQZXJHYXNXZWlBc3luYygpKS50aGVuUmVzb2x2ZShuZXcgQmlnTnVtYmVyKDEwMDApKTtcbiAgICAgICAgICAgIHdoZW4oZ2FzT3JhY2xlTW9jay5nZXRNYXhQcmlvcml0eUZlZVBlckdhc1dlaUFzeW5jKCdpbnN0YW50JykpLnRoZW5SZXNvbHZlKG5ldyBCaWdOdW1iZXIoNjY2KSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGF0dGVuZGFudCA9IG5ldyBHYXNTdGF0aW9uQXR0ZW5kYW50RXRoZXJldW0oaW5zdGFuY2UoZ2FzT3JhY2xlTW9jaykpO1xuXG4gICAgICAgICAgICBjb25zdCB3b3JrZXJHYXNUb1RyYWRlID0gYXdhaXQgYXR0ZW5kYW50LmdldFdvcmtlckJhbGFuY2VGb3JUcmFkZUFzeW5jKCk7XG5cbiAgICAgICAgICAgIC8vIEJhc2UgZmVlIGlzIDEwMDAuIFdpdGggNiAxMCUgaW5jcmVhc2VzID0gMTAwMCAqICgxLjEpXiA2ID0gMTc3MS41NjFcbiAgICAgICAgICAgIC8vIEluc3RhbnQgdGlwIGlzIDY2NlxuICAgICAgICAgICAgLy8gR2FzIGVzdGltYXRlIG1hdGNoZXMgdGhlIG9uZSB1c2VkIGluIHRoZSBhbGdvcml0aG1cbiAgICAgICAgICAgIGNvbnN0IGdhc0VzdGltYXRlID0gY2FsY3VsYXRlR2FzRXN0aW1hdGUoXG4gICAgICAgICAgICAgICAgJzB4N2ZjNjY1MDBjODRhNzZhZDdlOWM5MzQzN2JmYzVhYzMzZTJkZGFlOScsXG4gICAgICAgICAgICAgICAgJzB4YTBiODY5OTFjNjIxOGIzNmMxZDE5ZDRhMmU5ZWIwY2UzNjA2ZWI0OCcsXG4gICAgICAgICAgICAgICAgJ290YycsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh3b3JrZXJHYXNUb1RyYWRlLnRvUHJlY2lzaW9uKDIpLnRvU3RyaW5nKCkpLnRvLmVxdWFsKFxuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY3VzdG9tLW5vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgICAgICAgICBuZXcgQmlnTnVtYmVyKDE3NzEuNTYxKS5wbHVzKDY2NikudGltZXMoZ2FzRXN0aW1hdGUpLnRvUHJlY2lzaW9uKDIpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdnZXRFeHBlY3RlZFRyYW5zYWN0aW9uR2FzUmF0ZUFzeW5jJywgKCkgPT4ge1xuICAgICAgICBpdCgnZXN0aW1hdGVzIHRoZSB0cmFuc2FjdGlvbiBnYXMgcmF0ZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHdoZW4oZ2FzT3JhY2xlTW9jay5nZXRCYXNlRmVlUGVyR2FzV2VpQXN5bmMoKSkudGhlblJlc29sdmUobmV3IEJpZ051bWJlcigxMDAwKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGF0dGVuZGFudCA9IG5ldyBHYXNTdGF0aW9uQXR0ZW5kYW50RXRoZXJldW0oaW5zdGFuY2UoZ2FzT3JhY2xlTW9jaykpO1xuXG4gICAgICAgICAgICBjb25zdCBnYXNSYXRlID0gYXdhaXQgYXR0ZW5kYW50LmdldEV4cGVjdGVkVHJhbnNhY3Rpb25HYXNSYXRlQXN5bmMoKTtcblxuICAgICAgICAgICAgLy8gQmFzZSBmZWUgaXMgMTAwMFxuICAgICAgICAgICAgLy8gVGlwIGVzdGltYXRlIGlzXG4gICAgICAgICAgICBjb25zdCB0aXBFc3RpbWF0ZSA9IG5ldyBCaWdOdW1iZXIoMjc1MDAwMDAwMCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChnYXNSYXRlLnRvU3RyaW5nKCkpLnRvLmVxdWFsKFxuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY3VzdG9tLW5vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgICAgICAgICBuZXcgQmlnTnVtYmVyKDEwMDApLnBsdXModGlwRXN0aW1hdGUpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9