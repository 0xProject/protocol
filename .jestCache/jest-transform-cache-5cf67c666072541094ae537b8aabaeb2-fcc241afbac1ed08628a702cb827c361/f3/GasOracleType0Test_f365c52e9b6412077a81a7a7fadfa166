6c4034b129fd7dce268a8e456e8aa8fd
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const axios_mock_adapter_1 = require("axios-mock-adapter");
const HttpStatus = require("http-status-codes");
const GasOracleType0_1 = require("../../src/utils/GasOracleType0");
const fakeResponse = {
    result: {
        source: 'MEDIAN',
        timestamp: 1676403824,
        instant: 353363290000,
        fast: 353363290000,
        standard: 353113290000,
        low: 266513290000,
    },
};
let axiosClient;
let axiosMock;
describe('GasOracleType0', () => {
    beforeAll(() => {
        axiosClient = axios_1.default.create();
        axiosMock = new axios_mock_adapter_1.default(axiosClient);
    });
    describe('create', () => {
        it('fails for non-default output formats', async () => {
            expect(() => GasOracleType0_1.GasOracleType0.create('http://gas-price-oracle-svc.gas-price-oracle/source/median?output=eth_gas_station', axiosClient)).toThrow();
        });
        it('fails for a v2 URL', async () => {
            expect(() => GasOracleType0_1.GasOracleType0.create('http://gas-price-oracle-svc.gas-price-oracle/v2/source/median', axiosClient)).toThrow();
        });
    });
    describe('getGasWeiAsync', () => {
        it('gets the fast gas price', async () => {
            axiosMock
                .onGet(`http://gas-price-oracle-svc.gas-price-oracle/source/median`)
                .replyOnce(HttpStatus.OK, fakeResponse);
            const gasOracle = GasOracleType0_1.GasOracleType0.create('http://gas-price-oracle-svc.gas-price-oracle/source/median', axiosClient);
            const result = await gasOracle.getGasWeiAsync('fast');
            expect(result.toString()).toEqual('353363290000');
        });
        it('gets the standard gas price', async () => {
            axiosMock
                .onGet(`http://gas-price-oracle-svc.gas-price-oracle/source/median`)
                .replyOnce(HttpStatus.OK, fakeResponse);
            const gasOracle = GasOracleType0_1.GasOracleType0.create('http://gas-price-oracle-svc.gas-price-oracle/source/median', axiosClient);
            const result = await gasOracle.getGasWeiAsync('standard');
            expect(result.toString()).toEqual('353113290000');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvR2FzT3JhY2xlVHlwZTBUZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQTZDO0FBQzdDLDJEQUFrRDtBQUNsRCxnREFBZ0Q7QUFFaEQsbUVBQWdFO0FBRWhFLE1BQU0sWUFBWSxHQUFHO0lBQ2pCLE1BQU0sRUFBRTtRQUNKLE1BQU0sRUFBRSxRQUFRO1FBQ2hCLFNBQVMsRUFBRSxVQUFVO1FBQ3JCLE9BQU8sRUFBRSxZQUFZO1FBQ3JCLElBQUksRUFBRSxZQUFZO1FBQ2xCLFFBQVEsRUFBRSxZQUFZO1FBQ3RCLEdBQUcsRUFBRSxZQUFZO0tBQ3BCO0NBQ0osQ0FBQztBQUVGLElBQUksV0FBMEIsQ0FBQztBQUMvQixJQUFJLFNBQTJCLENBQUM7QUFFaEMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM1QixTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ1gsV0FBVyxHQUFHLGVBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM3QixTQUFTLEdBQUcsSUFBSSw0QkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO1FBQ3BCLEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNsRCxNQUFNLENBQUMsR0FBRyxFQUFFLENBQ1IsK0JBQWMsQ0FBQyxNQUFNLENBQ2pCLG1GQUFtRixFQUNuRixXQUFXLENBQ2QsQ0FDSixDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLG9CQUFvQixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2hDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FDUiwrQkFBYyxDQUFDLE1BQU0sQ0FDakIsK0RBQStELEVBQy9ELFdBQVcsQ0FDZCxDQUNKLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDNUIsRUFBRSxDQUFDLHlCQUF5QixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3JDLFNBQVM7aUJBQ0osS0FBSyxDQUFDLDREQUE0RCxDQUFDO2lCQUNuRSxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUU1QyxNQUFNLFNBQVMsR0FBRywrQkFBYyxDQUFDLE1BQU0sQ0FDbkMsNERBQTRELEVBQzVELFdBQVcsQ0FDZCxDQUFDO1lBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxTQUFTLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RELE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsNkJBQTZCLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDekMsU0FBUztpQkFDSixLQUFLLENBQUMsNERBQTRELENBQUM7aUJBQ25FLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBRTVDLE1BQU0sU0FBUyxHQUFHLCtCQUFjLENBQUMsTUFBTSxDQUNuQyw0REFBNEQsRUFDNUQsV0FBVyxDQUNkLENBQUM7WUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLFNBQVMsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDMUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvR2FzT3JhY2xlVHlwZTBUZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBeGlvcywgeyBBeGlvc0luc3RhbmNlIH0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IEF4aW9zTW9ja0FkYXB0ZXIgZnJvbSAnYXhpb3MtbW9jay1hZGFwdGVyJztcbmltcG9ydCAqIGFzIEh0dHBTdGF0dXMgZnJvbSAnaHR0cC1zdGF0dXMtY29kZXMnO1xuXG5pbXBvcnQgeyBHYXNPcmFjbGVUeXBlMCB9IGZyb20gJy4uLy4uL3NyYy91dGlscy9HYXNPcmFjbGVUeXBlMCc7XG5cbmNvbnN0IGZha2VSZXNwb25zZSA9IHtcbiAgICByZXN1bHQ6IHtcbiAgICAgICAgc291cmNlOiAnTUVESUFOJyxcbiAgICAgICAgdGltZXN0YW1wOiAxNjc2NDAzODI0LFxuICAgICAgICBpbnN0YW50OiAzNTMzNjMyOTAwMDAsXG4gICAgICAgIGZhc3Q6IDM1MzM2MzI5MDAwMCxcbiAgICAgICAgc3RhbmRhcmQ6IDM1MzExMzI5MDAwMCxcbiAgICAgICAgbG93OiAyNjY1MTMyOTAwMDAsXG4gICAgfSxcbn07XG5cbmxldCBheGlvc0NsaWVudDogQXhpb3NJbnN0YW5jZTtcbmxldCBheGlvc01vY2s6IEF4aW9zTW9ja0FkYXB0ZXI7XG5cbmRlc2NyaWJlKCdHYXNPcmFjbGVUeXBlMCcsICgpID0+IHtcbiAgICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgICAgICBheGlvc0NsaWVudCA9IEF4aW9zLmNyZWF0ZSgpO1xuICAgICAgICBheGlvc01vY2sgPSBuZXcgQXhpb3NNb2NrQWRhcHRlcihheGlvc0NsaWVudCk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnY3JlYXRlJywgKCkgPT4ge1xuICAgICAgICBpdCgnZmFpbHMgZm9yIG5vbi1kZWZhdWx0IG91dHB1dCBmb3JtYXRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KCgpID0+XG4gICAgICAgICAgICAgICAgR2FzT3JhY2xlVHlwZTAuY3JlYXRlKFxuICAgICAgICAgICAgICAgICAgICAnaHR0cDovL2dhcy1wcmljZS1vcmFjbGUtc3ZjLmdhcy1wcmljZS1vcmFjbGUvc291cmNlL21lZGlhbj9vdXRwdXQ9ZXRoX2dhc19zdGF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgYXhpb3NDbGllbnQsXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICkudG9UaHJvdygpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ2ZhaWxzIGZvciBhIHYyIFVSTCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PlxuICAgICAgICAgICAgICAgIEdhc09yYWNsZVR5cGUwLmNyZWF0ZShcbiAgICAgICAgICAgICAgICAgICAgJ2h0dHA6Ly9nYXMtcHJpY2Utb3JhY2xlLXN2Yy5nYXMtcHJpY2Utb3JhY2xlL3YyL3NvdXJjZS9tZWRpYW4nLFxuICAgICAgICAgICAgICAgICAgICBheGlvc0NsaWVudCxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKS50b1Rocm93KCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2dldEdhc1dlaUFzeW5jJywgKCkgPT4ge1xuICAgICAgICBpdCgnZ2V0cyB0aGUgZmFzdCBnYXMgcHJpY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBheGlvc01vY2tcbiAgICAgICAgICAgICAgICAub25HZXQoYGh0dHA6Ly9nYXMtcHJpY2Utb3JhY2xlLXN2Yy5nYXMtcHJpY2Utb3JhY2xlL3NvdXJjZS9tZWRpYW5gKVxuICAgICAgICAgICAgICAgIC5yZXBseU9uY2UoSHR0cFN0YXR1cy5PSywgZmFrZVJlc3BvbnNlKTtcblxuICAgICAgICAgICAgY29uc3QgZ2FzT3JhY2xlID0gR2FzT3JhY2xlVHlwZTAuY3JlYXRlKFxuICAgICAgICAgICAgICAgICdodHRwOi8vZ2FzLXByaWNlLW9yYWNsZS1zdmMuZ2FzLXByaWNlLW9yYWNsZS9zb3VyY2UvbWVkaWFuJyxcbiAgICAgICAgICAgICAgICBheGlvc0NsaWVudCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdhc09yYWNsZS5nZXRHYXNXZWlBc3luYygnZmFzdCcpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC50b1N0cmluZygpKS50b0VxdWFsKCczNTMzNjMyOTAwMDAnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdnZXRzIHRoZSBzdGFuZGFyZCBnYXMgcHJpY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBheGlvc01vY2tcbiAgICAgICAgICAgICAgICAub25HZXQoYGh0dHA6Ly9nYXMtcHJpY2Utb3JhY2xlLXN2Yy5nYXMtcHJpY2Utb3JhY2xlL3NvdXJjZS9tZWRpYW5gKVxuICAgICAgICAgICAgICAgIC5yZXBseU9uY2UoSHR0cFN0YXR1cy5PSywgZmFrZVJlc3BvbnNlKTtcblxuICAgICAgICAgICAgY29uc3QgZ2FzT3JhY2xlID0gR2FzT3JhY2xlVHlwZTAuY3JlYXRlKFxuICAgICAgICAgICAgICAgICdodHRwOi8vZ2FzLXByaWNlLW9yYWNsZS1zdmMuZ2FzLXByaWNlLW9yYWNsZS9zb3VyY2UvbWVkaWFuJyxcbiAgICAgICAgICAgICAgICBheGlvc0NsaWVudCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdhc09yYWNsZS5nZXRHYXNXZWlBc3luYygnc3RhbmRhcmQnKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQudG9TdHJpbmcoKSkudG9FcXVhbCgnMzUzMTEzMjkwMDAwJyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=