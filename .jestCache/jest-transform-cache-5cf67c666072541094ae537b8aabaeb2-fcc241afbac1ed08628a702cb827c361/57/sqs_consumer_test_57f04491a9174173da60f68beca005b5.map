{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/sqs_consumer_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/sqs_consumer_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\n// tslint:disable:no-empty\n// tslint:disable:max-file-line-count\n\nimport { expect } from 'chai';\nimport { anyString, anything, instance, mock, verify, when } from 'ts-mockito';\n\nimport { SqsClient } from '../../src/utils/sqs_client';\nimport { SqsConsumer, SqsRetryableError } from '../../src/utils/sqs_consumer';\n\ndescribe('SqsConsumer', () => {\n    describe('consumeOnceAsync', () => {\n        describe('beforeHandle', () => {\n            it('should not call handleMessage if beforeHandle returns false', async () => {\n                // Given\n                const sqsClientMock = mock(SqsClient);\n                let isHandleCalled = false;\n                const beforeHandle = async () => false;\n                const handleMessage = async () => {\n                    isHandleCalled = true;\n                };\n\n                const consumer = new SqsConsumer({\n                    workerIndex: 0,\n                    workerAddress: 'id',\n                    sqsClient: sqsClientMock,\n                    handleMessage,\n                    beforeHandle,\n                });\n\n                // When\n                await consumer.consumeOnceAsync();\n\n                // Then\n                expect(isHandleCalled).to.equal(false);\n            });\n\n            it('should not call handleMessage if beforeHandle throws an error', async () => {\n                // Given\n                const sqsClientMock = mock(SqsClient);\n                let isHandleCalled = false;\n                const beforeHandle = async () => Promise.reject('error!');\n                const handleMessage = async () => {\n                    isHandleCalled = true;\n                };\n\n                const consumer = new SqsConsumer({\n                    workerIndex: 0,\n                    workerAddress: 'id',\n                    sqsClient: sqsClientMock,\n                    handleMessage,\n                    beforeHandle,\n                });\n\n                // When\n                await consumer.consumeOnceAsync();\n\n                // Then\n                expect(isHandleCalled).to.equal(false);\n            });\n\n            it('should call handleMessage if no beforeHandle', async () => {\n                // Given\n                const sqsClientMock = mock(SqsClient);\n                when(sqsClientMock.receiveMessageAsync()).thenResolve({\n                    Body: '0xdeadbeef',\n                });\n                const sqsClientInstance = instance(sqsClientMock);\n                let isHandleCalled = false;\n                const handleMessage = async () => {\n                    isHandleCalled = true;\n                };\n\n                const consumer = new SqsConsumer({\n                    workerIndex: 0,\n                    workerAddress: 'id',\n                    sqsClient: sqsClientInstance,\n                    handleMessage,\n                });\n\n                // When\n                await consumer.consumeOnceAsync();\n\n                // Then\n                expect(isHandleCalled).to.equal(true);\n            });\n\n            it('should call handleMessage if beforeHandle returns true', async () => {\n                // Given\n                const sqsClientMock = mock(SqsClient);\n                when(sqsClientMock.receiveMessageAsync()).thenResolve({\n                    Body: '0xdeadbeef',\n                });\n                const sqsClientInstance = instance(sqsClientMock);\n                const beforeHandle = async () => true;\n                let isHandleCalled = false;\n                const handleMessage = async () => {\n                    isHandleCalled = true;\n                };\n\n                const consumer = new SqsConsumer({\n                    workerIndex: 0,\n                    workerAddress: 'id',\n                    sqsClient: sqsClientInstance,\n                    beforeHandle,\n                    handleMessage,\n                });\n\n                // When\n                await consumer.consumeOnceAsync();\n\n                // Then\n                expect(isHandleCalled).to.equal(true);\n            });\n        });\n\n        describe('handleMessage', () => {\n            it('should not be called if no message is recieved', async () => {\n                // Given\n                const sqsClientMock = mock(SqsClient);\n                when(sqsClientMock.receiveMessageAsync()).thenResolve(null);\n                const sqsClientInstance = instance(sqsClientMock);\n\n                let isHandleCalled = false;\n                const handleMessage = async () => {\n                    isHandleCalled = true;\n                };\n\n                const consumer = new SqsConsumer({\n                    workerIndex: 0,\n                    workerAddress: 'id',\n                    sqsClient: sqsClientInstance,\n                    handleMessage,\n                });\n\n                // When\n                await consumer.consumeOnceAsync();\n\n                // Then\n                expect(isHandleCalled).to.equal(false);\n            });\n\n            it('should call changeMessageVisibility if a SqsRetryableError is encountered (triggers a retry)', async () => {\n                // Given\n                const sqsClientMock = mock(SqsClient);\n                when(sqsClientMock.receiveMessageAsync()).thenResolve({\n                    Body: '0xdeadbeef',\n                    ReceiptHandle: '1',\n                });\n                const sqsClientInstance = instance(sqsClientMock);\n\n                const handleMessage = async () => {\n                    throw new SqsRetryableError('error');\n                };\n\n                const consumer = new SqsConsumer({\n                    workerIndex: 0,\n                    workerAddress: 'id',\n                    sqsClient: sqsClientInstance,\n                    handleMessage,\n                });\n\n                // When\n                await consumer.consumeOnceAsync();\n\n                // Then\n                verify(sqsClientMock.changeMessageVisibilityAsync(anyString(), 0)).once();\n            });\n\n            it('should not call changeMessageVisibility if a non SqsRetryableError is encountered', async () => {\n                // Given\n                const sqsClientMock = mock(SqsClient);\n                when(sqsClientMock.receiveMessageAsync()).thenResolve({\n                    Body: '0xdeadbeef',\n                    ReceiptHandle: '1',\n                });\n                const sqsClientInstance = instance(sqsClientMock);\n\n                const handleMessage = async () => {\n                    throw new Error('error');\n                };\n\n                const consumer = new SqsConsumer({\n                    workerIndex: 0,\n                    workerAddress: 'id',\n                    sqsClient: sqsClientInstance,\n                    handleMessage,\n                });\n\n                // When\n                await consumer.consumeOnceAsync();\n\n                // Then\n                verify(sqsClientMock.changeMessageVisibilityAsync(anything(), anything())).never();\n            });\n\n            it('should call deleteMessageAsync if message is successfully handled', async () => {\n                // Given\n                const sqsClientMock = mock(SqsClient);\n                when(sqsClientMock.receiveMessageAsync()).thenResolve({\n                    Body: '0xdeadbeef',\n                    ReceiptHandle: '1',\n                });\n                const sqsClientInstance = instance(sqsClientMock);\n\n                let isHandleCalled = false;\n                const handleMessage = async () => {\n                    isHandleCalled = true;\n                };\n\n                const consumer = new SqsConsumer({\n                    workerIndex: 0,\n                    workerAddress: 'id',\n                    sqsClient: sqsClientInstance,\n                    handleMessage,\n                });\n\n                // When\n                await consumer.consumeOnceAsync();\n\n                // Then\n                expect(isHandleCalled).to.equal(true);\n                verify(sqsClientMock.deleteMessageAsync(anyString())).once();\n            });\n        });\n\n        describe('afterHandle', () => {\n            it('should be called once everything is successful', async () => {\n                // Given\n                const sqsClientMock = mock(SqsClient);\n                when(sqsClientMock.receiveMessageAsync()).thenResolve({\n                    Body: '0xdeadbeef',\n                    ReceiptHandle: '1',\n                });\n\n                const sqsClientInstance = instance(sqsClientMock);\n                let isAfterCalled = false;\n                const afterHandle = async () => {\n                    isAfterCalled = true;\n                };\n\n                const consumer = new SqsConsumer({\n                    workerIndex: 0,\n                    workerAddress: 'id',\n                    sqsClient: sqsClientInstance,\n                    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                    // eslint-disable-next-line @typescript-eslint/no-empty-function\n                    handleMessage: async () => {},\n                    afterHandle,\n                });\n\n                // When\n                await consumer.consumeOnceAsync();\n\n                // Then\n                expect(isAfterCalled).to.equal(true);\n            });\n\n            it('should be passed an error if a non-retryable error was encountered', async () => {\n                // Given\n                const sqsClientMock = mock(SqsClient);\n                when(sqsClientMock.receiveMessageAsync()).thenResolve({\n                    Body: '0xdeadbeef',\n                    ReceiptHandle: '1',\n                });\n\n                const sqsClientInstance = instance(sqsClientMock);\n                let isAfterCalledWithError = false;\n\n                const consumer = new SqsConsumer({\n                    workerIndex: 0,\n                    workerAddress: 'id',\n                    sqsClient: sqsClientInstance,\n                    handleMessage: async () => {\n                        throw new Error();\n                    },\n                    afterHandle: async (_, error) => {\n                        if (error) {\n                            isAfterCalledWithError = true;\n                        }\n                    },\n                });\n\n                // When\n                await consumer.consumeOnceAsync();\n\n                // Then\n                expect(isAfterCalledWithError).to.equal(true);\n            });\n        });\n    });\n});\n"],"version":3}