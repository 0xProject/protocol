4fc0bc41a5ed51c29ed92c32f74481ce
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRfqMakerRouter = void 0;
const express = require("express");
const asyncHandler = require("express-async-handler");
const swaggerUi = require("swagger-ui-express");
const apiDocs = require("../api-docs/rfq_maker_docs.json");
const rfq_maker_handlers_1 = require("../handlers/rfq_maker_handlers");
/**
 * Create a RFQ maker API router, which routes incoming requests to RFQ maker API handler.
 * Also provides swagger endpoints to serve the documentation of the maker API.
 * @param rfqMakerService Injected service object which validate incoming requests and do the jobs.
 * @returns the RFQ maker API router
 */
function createRfqMakerRouter(rfqMakerService) {
    const router = express.Router();
    const handlers = new rfq_maker_handlers_1.RfqMakerHandlers(rfqMakerService);
    // Routes
    router.get('/chain-id/:chainId', asyncHandler(handlers.getRfqMakerAsync.bind(handlers)));
    router.put('/chain-id/:chainId', asyncHandler(handlers.putRfqMakerAsync.bind(handlers)));
    router.patch('/chain-id/:chainId', asyncHandler(handlers.patchRfqMakerAsync.bind(handlers)));
    // Swagger
    const swaggerOptions = {
        swaggerOptions: {
            url: '/api-docs/swagger.json',
        },
    };
    router.use('/api-docs', swaggerUi.serveFiles(apiDocs, swaggerOptions));
    router.get('/api-docs', swaggerUi.setup(apiDocs, swaggerOptions));
    router.get('/api-docs/swagger.json', (_req, res) => res.json(apiDocs));
    return router;
}
exports.createRfqMakerRouter = createRfqMakerRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9yb3V0ZXJzL3JmcV9tYWtlcl9yb3V0ZXIudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW1DO0FBQ25DLHNEQUFzRDtBQUN0RCxnREFBZ0Q7QUFFaEQsMkRBQTJEO0FBQzNELHVFQUFrRTtBQUdsRTs7Ozs7R0FLRztBQUNILFNBQWdCLG9CQUFvQixDQUFDLGVBQWdDO0lBQ2pFLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQyxNQUFNLFFBQVEsR0FBRyxJQUFJLHFDQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRXZELFNBQVM7SUFDVCxNQUFNLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RixNQUFNLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RixNQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3RixVQUFVO0lBQ1YsTUFBTSxjQUFjLEdBQUc7UUFDbkIsY0FBYyxFQUFFO1lBQ1osR0FBRyxFQUFFLHdCQUF3QjtTQUNoQztLQUNKLENBQUM7SUFFRixNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDbEUsTUFBTSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUV2RSxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBckJELG9EQXFCQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvc3JjL3JvdXRlcnMvcmZxX21ha2VyX3JvdXRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0ICogYXMgYXN5bmNIYW5kbGVyIGZyb20gJ2V4cHJlc3MtYXN5bmMtaGFuZGxlcic7XG5pbXBvcnQgKiBhcyBzd2FnZ2VyVWkgZnJvbSAnc3dhZ2dlci11aS1leHByZXNzJztcblxuaW1wb3J0ICogYXMgYXBpRG9jcyBmcm9tICcuLi9hcGktZG9jcy9yZnFfbWFrZXJfZG9jcy5qc29uJztcbmltcG9ydCB7IFJmcU1ha2VySGFuZGxlcnMgfSBmcm9tICcuLi9oYW5kbGVycy9yZnFfbWFrZXJfaGFuZGxlcnMnO1xuaW1wb3J0IHsgUmZxTWFrZXJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvcmZxX21ha2VyX3NlcnZpY2UnO1xuXG4vKipcbiAqIENyZWF0ZSBhIFJGUSBtYWtlciBBUEkgcm91dGVyLCB3aGljaCByb3V0ZXMgaW5jb21pbmcgcmVxdWVzdHMgdG8gUkZRIG1ha2VyIEFQSSBoYW5kbGVyLlxuICogQWxzbyBwcm92aWRlcyBzd2FnZ2VyIGVuZHBvaW50cyB0byBzZXJ2ZSB0aGUgZG9jdW1lbnRhdGlvbiBvZiB0aGUgbWFrZXIgQVBJLlxuICogQHBhcmFtIHJmcU1ha2VyU2VydmljZSBJbmplY3RlZCBzZXJ2aWNlIG9iamVjdCB3aGljaCB2YWxpZGF0ZSBpbmNvbWluZyByZXF1ZXN0cyBhbmQgZG8gdGhlIGpvYnMuXG4gKiBAcmV0dXJucyB0aGUgUkZRIG1ha2VyIEFQSSByb3V0ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJmcU1ha2VyUm91dGVyKHJmcU1ha2VyU2VydmljZTogUmZxTWFrZXJTZXJ2aWNlKTogZXhwcmVzcy5Sb3V0ZXIge1xuICAgIGNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG4gICAgY29uc3QgaGFuZGxlcnMgPSBuZXcgUmZxTWFrZXJIYW5kbGVycyhyZnFNYWtlclNlcnZpY2UpO1xuXG4gICAgLy8gUm91dGVzXG4gICAgcm91dGVyLmdldCgnL2NoYWluLWlkLzpjaGFpbklkJywgYXN5bmNIYW5kbGVyKGhhbmRsZXJzLmdldFJmcU1ha2VyQXN5bmMuYmluZChoYW5kbGVycykpKTtcbiAgICByb3V0ZXIucHV0KCcvY2hhaW4taWQvOmNoYWluSWQnLCBhc3luY0hhbmRsZXIoaGFuZGxlcnMucHV0UmZxTWFrZXJBc3luYy5iaW5kKGhhbmRsZXJzKSkpO1xuICAgIHJvdXRlci5wYXRjaCgnL2NoYWluLWlkLzpjaGFpbklkJywgYXN5bmNIYW5kbGVyKGhhbmRsZXJzLnBhdGNoUmZxTWFrZXJBc3luYy5iaW5kKGhhbmRsZXJzKSkpO1xuXG4gICAgLy8gU3dhZ2dlclxuICAgIGNvbnN0IHN3YWdnZXJPcHRpb25zID0ge1xuICAgICAgICBzd2FnZ2VyT3B0aW9uczoge1xuICAgICAgICAgICAgdXJsOiAnL2FwaS1kb2NzL3N3YWdnZXIuanNvbicsXG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIHJvdXRlci51c2UoJy9hcGktZG9jcycsIHN3YWdnZXJVaS5zZXJ2ZUZpbGVzKGFwaURvY3MsIHN3YWdnZXJPcHRpb25zKSk7XG4gICAgcm91dGVyLmdldCgnL2FwaS1kb2NzJywgc3dhZ2dlclVpLnNldHVwKGFwaURvY3MsIHN3YWdnZXJPcHRpb25zKSk7XG4gICAgcm91dGVyLmdldCgnL2FwaS1kb2NzL3N3YWdnZXIuanNvbicsIChfcmVxLCByZXMpID0+IHJlcy5qc29uKGFwaURvY3MpKTtcblxuICAgIHJldHVybiByb3V0ZXI7XG59XG4iXSwidmVyc2lvbiI6M30=