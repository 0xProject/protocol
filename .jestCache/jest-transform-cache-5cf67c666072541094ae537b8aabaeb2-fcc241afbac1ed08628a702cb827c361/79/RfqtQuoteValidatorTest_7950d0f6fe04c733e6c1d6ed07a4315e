f47325ab0e24c533047d9cdaae15562a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@0x/utils");
const constants_1 = require("../../src/core/constants");
const RfqtQuoteValidator_1 = require("../../src/utils/RfqtQuoteValidator");
describe('Rfqt Quote Validator', () => {
    const chainId = 1337;
    const integrator = {
        allowedChainIds: [chainId],
        apiKeys: [],
        integratorId: 'integrator-id',
        label: 'test integrator',
        plp: false,
        rfqm: false,
        rfqt: true,
    };
    const quoteContext = {
        isFirm: false,
        workflow: 'rfqt',
        isUnwrap: false,
        originalMakerToken: '0x1',
        takerTokenDecimals: 18,
        makerTokenDecimals: 18,
        feeModelVersion: 1,
        assetFillAmount: new utils_1.BigNumber(111),
        chainId,
        integrator,
        makerToken: '0x1',
        isSelling: false,
        takerAddress: '0x0',
        takerToken: '0x2',
        txOrigin: '0xtakeraddress',
    };
    const nowTimeS = new utils_1.BigNumber(Date.now()).div(constants_1.ONE_SECOND_MS);
    const validPrices = [
        {
            expiry: nowTimeS.plus(75),
            makerAddress: '0xmaker1',
            makerAmount: new utils_1.BigNumber(111),
            makerId: 'uuid-maker1',
            makerToken: '0x1',
            makerUri: 'maker1.xyz',
            takerAmount: new utils_1.BigNumber(111),
            takerToken: '0x2',
        },
        {
            expiry: nowTimeS.plus(75),
            makerAddress: '0xmaker2',
            makerAmount: new utils_1.BigNumber(111),
            makerId: 'uuid-maker2',
            makerToken: '0x1',
            makerUri: 'maker2.xyz',
            takerAmount: new utils_1.BigNumber(111),
            takerToken: '0x2',
        },
    ];
    const validityWindowMs = constants_1.ONE_MINUTE_MS;
    describe('validateV2Prices', () => {
        it('filters fetched prices for the wrong pair', () => {
            const prices = [
                ...validPrices,
                {
                    expiry: nowTimeS.plus(75),
                    makerAddress: '0xmaker3',
                    makerAmount: new utils_1.BigNumber(111),
                    makerId: 'uuid-maker3',
                    makerToken: '0x1',
                    makerUri: 'maker3.xyz',
                    takerAmount: new utils_1.BigNumber(111),
                    takerToken: '0x3',
                },
            ];
            const validatedPrices = (0, RfqtQuoteValidator_1.validateV2Prices)(prices, quoteContext, validityWindowMs);
            expect(validatedPrices).toEqual(validPrices);
        });
        it('filters fetched prices with tight expiration windows', () => {
            const prices = [
                ...validPrices,
                {
                    expiry: nowTimeS.plus(59),
                    makerAddress: '0xmaker3',
                    makerAmount: new utils_1.BigNumber(111),
                    makerId: 'uuid-maker3',
                    makerToken: '0x1',
                    makerUri: 'maker3.xyz',
                    takerAmount: new utils_1.BigNumber(111),
                    takerToken: '0x2',
                },
            ];
            const validatedPrices = (0, RfqtQuoteValidator_1.validateV2Prices)(prices, quoteContext, validityWindowMs);
            expect(validatedPrices).toEqual(validPrices);
        });
        it('returns an empty array from empty prices', () => {
            const emptyPrices = (0, RfqtQuoteValidator_1.validateV2Prices)([], quoteContext, validityWindowMs);
            expect(emptyPrices).toEqual([]);
        });
    });
    describe('getRfqtV2FillableAmounts', () => {
        it('returns full amounts for fully fillable orders', () => {
            const quotedMakerBalances = [new utils_1.BigNumber(1000), new utils_1.BigNumber(1000)];
            const fillableAmounts = (0, RfqtQuoteValidator_1.getRfqtV2FillableAmounts)(validPrices, chainId, quotedMakerBalances);
            expect(fillableAmounts).toEqual([
                { fillableMakerAmount: new utils_1.BigNumber(111), fillableTakerAmount: new utils_1.BigNumber(111) },
                { fillableMakerAmount: new utils_1.BigNumber(111), fillableTakerAmount: new utils_1.BigNumber(111) },
            ]);
        });
        it('returns full amounts if maker balances are not present', () => {
            const fillableAmounts = (0, RfqtQuoteValidator_1.getRfqtV2FillableAmounts)(validPrices, chainId);
            expect(fillableAmounts).toEqual([
                { fillableMakerAmount: new utils_1.BigNumber(111), fillableTakerAmount: new utils_1.BigNumber(111) },
                { fillableMakerAmount: new utils_1.BigNumber(111), fillableTakerAmount: new utils_1.BigNumber(111) },
            ]);
        });
        it('returns partial amounts if a maker does not have enough balance', () => {
            const quotedMakerBalances = [new utils_1.BigNumber(1000), new utils_1.BigNumber(10)];
            const fillableAmounts = (0, RfqtQuoteValidator_1.getRfqtV2FillableAmounts)(validPrices, chainId, quotedMakerBalances);
            expect(fillableAmounts).toEqual([
                { fillableMakerAmount: new utils_1.BigNumber(111), fillableTakerAmount: new utils_1.BigNumber(111) },
                { fillableMakerAmount: new utils_1.BigNumber(10), fillableTakerAmount: new utils_1.BigNumber(10) },
            ]);
        });
        it('returns zero amounts if a maker has zero balance', () => {
            const quotedMakerBalances = [new utils_1.BigNumber(1000), new utils_1.BigNumber(0)];
            const fillableAmounts = (0, RfqtQuoteValidator_1.getRfqtV2FillableAmounts)(validPrices, chainId, quotedMakerBalances);
            expect(fillableAmounts).toEqual([
                { fillableMakerAmount: new utils_1.BigNumber(111), fillableTakerAmount: new utils_1.BigNumber(111) },
                { fillableMakerAmount: new utils_1.BigNumber(0), fillableTakerAmount: new utils_1.BigNumber(0) },
            ]);
        });
        it('returns zero amounts if supplied maker amount is zero', () => {
            const prices = [
                {
                    expiry: nowTimeS.plus(75),
                    makerAddress: '0xmaker3',
                    makerAmount: new utils_1.BigNumber(0),
                    makerId: 'uuid-maker3',
                    makerToken: '0x1',
                    makerUri: 'maker3.xyz',
                    takerAmount: new utils_1.BigNumber(111),
                    takerToken: '0x2',
                },
            ];
            const quotedMakerBalances = [new utils_1.BigNumber(1000)];
            const fillableAmounts = (0, RfqtQuoteValidator_1.getRfqtV2FillableAmounts)(prices, chainId, quotedMakerBalances);
            expect(fillableAmounts).toEqual([
                { fillableMakerAmount: new utils_1.BigNumber(0), fillableTakerAmount: new utils_1.BigNumber(0) },
            ]);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,