{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/logger.ts","mappings":";;;AAAA,6CAAqC;AAErC,mCAAoC;AAEpC,qCAA+D;AAElD,QAAA,MAAM,GAAG,IAAA,gBAAI,EAAC;IACvB,UAAU,EAAE;QACR,KAAK,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YACf,KAAK,EAAE,KAAK;SACf,CAAC;KACL;IACD,KAAK,EAAE,kBAAS;IAChB,SAAS,EAAE,iCAAwB;CACtC,CAAC,CAAC;AAEH;;;;;;;;;;;GAWG;AACH,SAAgB,YAAY,CAAC,UAO5B;;IACG,MAAM,EAAE,YAAY,EAAE,GAAG,UAAU,CAAC;IACpC,IAAI,CAAC,YAAY,EAAE;QACf,OAAO,IAAI,CAAC;KACf;IACD,MAAM,QAAQ,GAAG,EAAE,CAAC;IACpB,OAAO,IAAA,mBAAU,EAAC,MAAM,CAAC;SACpB,MAAM,CACH,GAAG,MAAA,MAAA,UAAU,CAAC,SAAS,0CAAE,QAAQ,EAAE,mCAAI,EAAE,GAAG,UAAU,CAAC,QAAQ,GAAG,MAAA,MAAA,UAAU,CAAC,UAAU,0CAAE,QAAQ,EAAE,mCAAI,EAAE,GACrG,UAAU,CAAC,SACf,GAAG,UAAU,CAAC,YAAY,EAAE,CAC/B;SACA,MAAM,CAAC,KAAK,CAAC;SACb,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;AAC5B,CAAC;AArBD,oCAqBC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/logger.ts"],"sourcesContent":["import { pino } from '@0x/api-utils';\nimport { BigNumber } from '@0x/utils';\nimport { createHash } from 'crypto';\n\nimport { LOGGER_INCLUDE_TIMESTAMP, LOG_LEVEL } from './config';\n\nexport const logger = pino({\n    formatters: {\n        level: (label) => ({\n            level: label,\n        }),\n    },\n    level: LOG_LEVEL,\n    timestamp: LOGGER_INCLUDE_TIMESTAMP,\n});\n\n/**\n * Converts the parameters of a swap request into a 16-character ID\n * which can be used in logging to associate price and quote requests.\n *\n * Used SHA1 because apparently it's the fastest:\n * https://medium.com/@chris_72272/what-is-the-fastest-node-js-hashing-algorithm-c15c1a0e164e\n *\n * `takerAddress` is an optional parameter so it's easy to put a price request\n * into the function. However, if `takerAddress` is not present, the function returns\n * `null`. The reasoning for this is so two common trades by different takers\n * (e.x.: sell 1 WMATIC for USDC) aren't given the same ID.\n */\nexport function createSwapId(parameters: {\n    buyAmount?: BigNumber;\n    buyToken: string;\n    sellAmount?: BigNumber;\n    sellToken: string;\n    // If a taker address is not provided, the function returns `null`.\n    takerAddress?: string;\n}): string | null {\n    const { takerAddress } = parameters;\n    if (!takerAddress) {\n        return null;\n    }\n    const idLength = 16;\n    return createHash('sha1')\n        .update(\n            `${parameters.buyAmount?.toString() ?? ''}${parameters.buyToken}${parameters.sellAmount?.toString() ?? ''}${\n                parameters.sellToken\n            }${parameters.takerAddress}`,\n        )\n        .digest('hex')\n        .slice(0, idLength);\n}\n"],"version":3}