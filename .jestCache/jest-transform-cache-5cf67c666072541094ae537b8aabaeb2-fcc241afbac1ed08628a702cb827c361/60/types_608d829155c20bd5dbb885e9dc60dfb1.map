{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/services/types.ts","mappings":";;;AAAA,uDAA0E;AA+E1E,6JAA6J;AAC7J,MAAa,iBAAkB,SAAQ,gCAAe;CAAG;AAAzD,8CAAyD","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/services/types.ts"],"sourcesContent":["import { MetaTransaction, OtcOrder, Signature } from '@0x/protocol-utils';\r\nimport { BigNumber } from '@0x/utils';\r\n\r\nimport { Integrator } from '../config';\r\nimport { JobFailureReason } from '../entities/types';\r\nimport {\r\n    ExecuteMetaTransactionEip712Context,\r\n    FeeModelVersion,\r\n    GaslessApprovalTypes,\r\n    GaslessTypes,\r\n    PermitEip712Context,\r\n} from '../core/types';\r\n\r\nexport interface FetchIndicativeQuoteParams extends FetchQuoteParamsBase {\r\n    takerAddress?: string;\r\n}\r\n\r\nexport interface FetchIndicativeQuoteResponse {\r\n    allowanceTarget?: string;\r\n    buyAmount: BigNumber;\r\n    buyTokenAddress: string;\r\n    gas: BigNumber;\r\n    price: BigNumber;\r\n    sellAmount: BigNumber;\r\n    sellTokenAddress: string;\r\n}\r\n\r\nexport interface FetchFirmQuoteParams extends FetchQuoteParamsBase {\r\n    takerAddress: string;\r\n    checkApproval: boolean;\r\n}\r\n\r\nexport interface FetchQuoteParamsBase {\r\n    affiliateAddress?: string;\r\n    buyAmount?: BigNumber;\r\n    buyToken: string;\r\n    buyTokenDecimals: number;\r\n    integrator: Integrator;\r\n    sellAmount?: BigNumber;\r\n    sellToken: string;\r\n    sellTokenDecimals: number;\r\n    // fields specific to gasless endpoints\r\n    slippagePercentage?: BigNumber;\r\n    feeType?: 'volume';\r\n    feeSellTokenPercentage?: BigNumber;\r\n    feeRecipient?: string;\r\n}\r\n\r\nexport interface BaseRfqmQuoteResponse {\r\n    allowanceTarget?: string;\r\n    buyAmount: BigNumber;\r\n    buyTokenAddress: string;\r\n    gas: BigNumber;\r\n    price: BigNumber;\r\n    sellAmount: BigNumber;\r\n    sellTokenAddress: string;\r\n}\r\n\r\nexport interface OtcOrderRfqmQuoteResponse extends BaseRfqmQuoteResponse {\r\n    type: GaslessTypes.OtcOrder;\r\n    order: OtcOrder;\r\n    orderHash: string;\r\n    approval?: ApprovalResponse;\r\n}\r\n\r\n/**\r\n * Response from the Gasless Swap Service `/quote` endpoint.\r\n *\r\n * `approval` will be populated if `checkApproval` is `true`\r\n * in the parameters, the token supports gasless approval,\r\n * and no allowance already exists.\r\n */\r\nexport interface MetaTransactionQuoteResponse extends BaseRfqmQuoteResponse {\r\n    type: GaslessTypes.MetaTransaction;\r\n    metaTransaction: MetaTransaction;\r\n    metaTransactionHash: string;\r\n    approval?: ApprovalResponse;\r\n}\r\n\r\n// TODO: This needs to be updated to the new meta-transaction type when smart contract changes are finished and corresponding types are published in packages\r\nexport class MetaTransactionV2 extends MetaTransaction {}\r\n\r\nexport interface LiquiditySource {\r\n    name: string;\r\n    proportion: BigNumber;\r\n    intermediateToken?: string;\r\n    hops?: string[];\r\n}\r\n\r\nexport interface ApprovalResponse {\r\n    isRequired: boolean;\r\n    isGaslessAvailable?: boolean;\r\n    type?: GaslessApprovalTypes;\r\n    eip712?: ExecuteMetaTransactionEip712Context | PermitEip712Context;\r\n}\r\n\r\nexport interface OtcOrderSubmitRfqmSignedQuoteParams {\r\n    type: GaslessTypes.OtcOrder;\r\n    order: OtcOrder;\r\n    signature: Signature;\r\n}\r\n\r\n/**\r\n * Payload for the Gasless Swap `/submit` endpoint in the\r\n * metatransaction flow\r\n */\r\nexport interface SubmitMetaTransactionSignedQuoteParams<\r\n    T extends ExecuteMetaTransactionEip712Context | PermitEip712Context,\r\n> {\r\n    approval?: SubmitApprovalParams<T>;\r\n    // Used to distinguish between `SubmitRfqmSignedQuoteWithApprovalParams` during type check.\r\n    // Note that this information is in `trade`, but TypeScript does not narrow types based\r\n    // on nested values.\r\n    kind: GaslessTypes.MetaTransaction;\r\n    trade: { metaTransaction: MetaTransaction; signature: Signature; type: GaslessTypes.MetaTransaction };\r\n}\r\n\r\nexport interface OtcOrderSubmitRfqmSignedQuoteResponse {\r\n    type: GaslessTypes.OtcOrder;\r\n    orderHash: string;\r\n}\r\n\r\nexport interface SubmitApprovalParams<T extends ExecuteMetaTransactionEip712Context | PermitEip712Context> {\r\n    type: T extends ExecuteMetaTransactionEip712Context\r\n        ? GaslessApprovalTypes.ExecuteMetaTransaction\r\n        : GaslessApprovalTypes.Permit;\r\n    eip712: T;\r\n    signature: Signature;\r\n}\r\n\r\nexport interface SubmitRfqmSignedQuoteWithApprovalParams<\r\n    T extends ExecuteMetaTransactionEip712Context | PermitEip712Context,\r\n> {\r\n    approval?: SubmitApprovalParams<T>;\r\n    // Used to distinguish between `SubmitMetaTransactionSignedQuoteParams` during type check.\r\n    // Note that this information is in `trade`, but TypeScript does not narrow types based\r\n    // on nested values.\r\n    kind: GaslessTypes.OtcOrder;\r\n    trade: OtcOrderSubmitRfqmSignedQuoteParams;\r\n}\r\n\r\nexport interface SubmitRfqmSignedQuoteWithApprovalResponse {\r\n    type: GaslessTypes.OtcOrder;\r\n    orderHash: string;\r\n}\r\n\r\nexport interface SubmitMetaTransactionSignedQuoteResponse {\r\n    type: GaslessTypes.MetaTransaction;\r\n    metaTransactionHash: string;\r\n}\r\n\r\nexport interface TransactionDetails {\r\n    hash: string;\r\n    timestamp: number /* unix ms */;\r\n}\r\n\r\nexport type StatusResponse = {\r\n    transactions: TransactionDetails[];\r\n    approvalTransactions?: TransactionDetails[];\r\n} & ({ status: 'pending' | 'submitted' | 'succeeded' | 'confirmed' } | { status: 'failed'; reason?: JobFailureReason });\r\n\r\n/**\r\n * Result type used by the cleanup jobs functionality of the\r\n * rfq admin service\r\n */\r\nexport interface CleanupJobsResponse {\r\n    // Jobs successfuly cleaned up by `cleanupJobsAsync`\r\n    modifiedJobs: string[];\r\n    // Jobs that could not be cleaned up by `cleanupJobsAsync`. This includes\r\n    // jobs that could not be found, jobs too close to expiration, or jobs\r\n    // with non-pending statuses.\r\n    unmodifiedJobs: string[];\r\n}\r\n\r\n/**\r\n * Base interface for quote context, which includes input query parameters, derived\r\n * variables, and configuration information.\r\n */\r\ninterface QuoteContextBase {\r\n    workflow: 'rfqm' | 'rfqt' | 'gasless-rfqt';\r\n    chainId: number;\r\n    isFirm: boolean;\r\n    takerAmount?: BigNumber;\r\n    makerAmount?: BigNumber;\r\n    takerToken: string;\r\n    makerToken: string;\r\n    originalMakerToken: string;\r\n    takerTokenDecimals: number;\r\n    makerTokenDecimals: number;\r\n    integrator: Integrator;\r\n    affiliateAddress?: string;\r\n    isUnwrap: boolean;\r\n    isSelling: boolean;\r\n    assetFillAmount: BigNumber;\r\n    feeModelVersion: FeeModelVersion;\r\n}\r\n\r\n/**\r\n * Context for indicative quote\r\n */\r\ninterface IndicativeQuoteContext extends QuoteContextBase {\r\n    isFirm: false;\r\n    trader?: string;\r\n    takerAddress?: string;\r\n    txOrigin?: string;\r\n}\r\n\r\n/**\r\n * Context for firm quote\r\n */\r\nexport interface FirmQuoteContext extends QuoteContextBase {\r\n    isFirm: true;\r\n    trader: string;\r\n    takerAddress: string;\r\n    txOrigin: string;\r\n}\r\n\r\nexport type QuoteContext = IndicativeQuoteContext | FirmQuoteContext;\r\n"],"version":3}