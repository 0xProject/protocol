4940cf614ad7f76c8adc2d41334aa0e5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetaTransactionV2 = void 0;
const protocol_utils_1 = require("@0x/protocol-utils");
// TODO: This needs to be updated to the new meta-transaction type when smart contract changes are finished and corresponding types are published in packages
class MetaTransactionV2 extends protocol_utils_1.MetaTransaction {
}
exports.MetaTransactionV2 = MetaTransactionV2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,