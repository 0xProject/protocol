{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/entities/types.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/entities/types.ts"],"sourcesContent":["import { OtcOrderFields } from '@0x/protocol-utils';\nimport { BigNumber } from '@0x/utils';\n\nexport enum RfqTables {\n    RfqmV2Quotes = 'rfqm_v2_quotes',\n    RfqmV2Jobs = 'rfqm_v2_jobs',\n    RfqmV2TransactionSubmissions = 'rfqm_v2_transaction_submissions',\n}\n\nexport enum RfqmJobStatus {\n    // Transaction has been enqueued and will be processed once a worker is available\n    PendingEnqueued = 'pending_enqueued',\n    // Transaction has passed initial validation. Last look will be executed and transaction will be submitted if last look is accepted.\n    PendingProcessing = 'pending_processing',\n    // For v1 orders, the last look has been approved. For v2 orders, the market maker has signed the order.\n    PendingLastLookAccepted = 'pending_last_look_accepted',\n    // Transaction has passed initial verification and has been submitted to the mem pool\n    PendingSubmitted = 'pending_submitted',\n\n    // Eth Call made before transaction submission was unsuccessful\n    FailedEthCallFailed = 'failed_eth_call_failed',\n    // Transaction has expired prior to eth call or worker is not available to make an eth call\n    FailedExpired = 'failed_expired',\n    // Market Maker declined the last look\n    FailedLastLookDeclined = 'failed_last_look_declined',\n    // [RFQM v2] Balance checks executed before obtaining market maker signature failed\n    FailedPresignValidationFailed = 'failed_presign_validation_failed',\n    // Transaction was reverted more than 3 blocks ago\n    FailedRevertedConfirmed = 'failed_reverted_confirmed',\n    // Transaction was reverted less than 3 blocks ago\n    FailedRevertedUnconfirmed = 'failed_reverted_unconfirmed',\n    // Obtaining the market maker's signature for a v2 order failed.\n    // This is NOT a status for the case where the market maker intentionally declined to sign.\n    FailedSignFailed = 'failed_sign_failed',\n    // Submitting the transaction to the network was unsuccessful\n    FailedSubmitFailed = 'failed_submit_failed',\n    // Transaction does not contain call data\n    FailedValidationNoCallData = 'failed_validation_no_call_data',\n    // Transaction does not include a maker URI\n    FailedValidationNoMakerUri = 'failed_validation_no_maker_uri',\n    // Job has been submitted with no taker signuature\n    FailedValidationNoTakerSignature = 'failed_validation_no_taker_signature',\n    // Transaction does not contain an order\n    FailedValidationNoOrder = 'failed_validation_no_order',\n    // Transaction does not contain a fee\n    FailedValidationNoFee = 'failed_validation_no_fee',\n\n    // Transaction has succeeded with 3 subsequent blocks\n    SucceededConfirmed = 'succeeded_confirmed',\n    // Transaction was successfully mined and filled\n    SucceededUnconfirmed = 'succeeded_unconfirmed',\n}\n\n// From https://0xproject.quip.com/ixNbA6mmn1KT/Error-reason-on-RFQm-zerog-status\nexport enum JobFailureReason {\n    TransactionSimulationFailed = 'transaction_simulation_failed',\n    OrderExpired = 'order_expired',\n    LastLookDeclined = 'last_look_declined',\n    TransactionReverted = 'transaction_reverted',\n    MarketMakerSignatureError = 'market_maker_sigature_error',\n    InvalidBalance = 'invalid_balance',\n    InternalError = 'internal_error', // fallback error reason\n}\n\n/**\n * Determines whether or not a given `RfqmJobStatus` indicates\n * the associated job has been processed to completion or not.\n *\n * Returns `true` if the status indicates the associated job is\n * resolved and should not be retried; returns `false` if the\n * associated job is in an incomplete state and should be retried.\n */\nfunction isJobResolved(status: RfqmJobStatus): boolean {\n    switch (status) {\n        case RfqmJobStatus.FailedEthCallFailed:\n        case RfqmJobStatus.FailedExpired:\n        case RfqmJobStatus.FailedLastLookDeclined:\n        case RfqmJobStatus.FailedPresignValidationFailed:\n        case RfqmJobStatus.FailedRevertedConfirmed:\n        case RfqmJobStatus.FailedSignFailed:\n        case RfqmJobStatus.FailedSubmitFailed:\n        case RfqmJobStatus.FailedValidationNoCallData:\n        case RfqmJobStatus.FailedValidationNoFee:\n        case RfqmJobStatus.FailedValidationNoMakerUri:\n        case RfqmJobStatus.FailedValidationNoOrder:\n        case RfqmJobStatus.FailedValidationNoTakerSignature:\n        case RfqmJobStatus.SucceededConfirmed:\n            return true;\n        case RfqmJobStatus.FailedRevertedUnconfirmed:\n        case RfqmJobStatus.PendingEnqueued:\n        case RfqmJobStatus.PendingLastLookAccepted:\n        case RfqmJobStatus.PendingProcessing:\n        case RfqmJobStatus.PendingSubmitted:\n        case RfqmJobStatus.SucceededUnconfirmed:\n            return false;\n        default:\n            ((_x: never) => {\n                throw new Error('unreachable');\n            })(status);\n    }\n}\n\n/**\n * `RfqmJobStatus` values which should be considered incomplete\n * and should be retried.\n */\nexport const UnresolvedRfqmJobStatuses = Object.values(RfqmJobStatus).filter((v) => !isJobResolved(v));\n\nexport enum RfqmTransactionSubmissionType {\n    Trade = 'trade',\n    Approval = 'approval',\n}\n\nexport enum RfqmTransactionSubmissionStatus {\n    DroppedAndReplaced = 'dropped_and_replaced',\n    Presubmit = 'presubmit', // Transaction created but not yet broadcast\n    RevertedConfirmed = 'reverted_confirmed',\n    RevertedUnconfirmed = 'reverted_unconfirmed',\n    Submitted = 'submitted',\n    SucceededConfirmed = 'succeeded_confirmed',\n    SucceededUnconfirmed = 'succeeded_unconfirmed',\n}\n\n/**\n * `SubmissionContext` contains multiple submissions with different gas prices. `SubmissionContextStatus`\n * is the collective status of all submissions contained within the submission context. It marks the final result of a\n * submission action which may contain several submission attempts.\n */\nexport enum SubmissionContextStatus {\n    FailedExpired = 'failed_expired',\n    FailedRevertedConfirmed = 'failed_reverted_confirmed',\n    FailedRevertedUnconfirmed = 'failed_reverted_unconfirmed',\n    PendingSubmitted = 'pending_submitted',\n    SucceededConfirmed = 'succeeded_confirmed',\n    SucceededUnconfirmed = 'succeeded_unconfirmed',\n}\n\nexport interface TransactionEntityOpts {\n    refHash: string;\n    apiKey?: string;\n    txHash?: string;\n    takerAddress?: string;\n    status: string;\n    expectedMinedInSec: number;\n    to: string;\n    data?: string;\n    value?: BigNumber;\n    from?: string;\n    nonce?: number;\n    gasPrice?: BigNumber;\n    gas?: number | null;\n    gasUsed?: number | null;\n    blockNumber?: number;\n    // Ethereum tx status, 1 == success, 0 == failure\n    txStatus?: number | null;\n}\n\nexport enum RfqmOrderTypes {\n    V4Rfq = 'v4Rfq',\n    Otc = 'otc',\n}\n\n/******* OTC ********/\nexport interface StoredOtcOrder {\n    type: RfqmOrderTypes.Otc;\n    order: StringOtcOrderFields;\n}\n\nexport type StringOtcOrderFields = Record<keyof OtcOrderFields, string>;\n"],"version":3}