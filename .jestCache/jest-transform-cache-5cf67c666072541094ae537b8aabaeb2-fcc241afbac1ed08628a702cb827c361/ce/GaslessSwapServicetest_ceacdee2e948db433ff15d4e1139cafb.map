{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/services/GaslessSwapService.test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/services/GaslessSwapService.test.ts"],"sourcesContent":["// tslint:disable: max-file-line-count\r\nimport { ValidationError, ValidationErrorCodes } from '@0x/api-utils';\r\nimport { AssetSwapperContractAddresses as ContractAddresses, SupportedProvider } from '@0x/asset-swapper';\r\nimport { ethSignHashWithKey, MetaTransaction, OtcOrder, SignatureType } from '@0x/protocol-utils';\r\nimport { BigNumber } from '@0x/utils';\r\nimport { AxiosInstance } from 'axios';\r\nimport { providers } from 'ethers';\r\nimport Redis from 'ioredis';\r\nimport { Producer } from 'sqs-producer';\r\nimport { Connection } from 'typeorm';\r\n\r\nimport { Integrator } from '../../src/config';\r\nimport { DEFAULT_MIN_EXPIRY_DURATION_MS, ZERO } from '../../src/core/constants';\r\nimport { MetaTransactionJobEntity } from '../../src/entities';\r\nimport { RfqmJobStatus } from '../../src/entities/types';\r\nimport { GaslessSwapService } from '../../src/services/GaslessSwapService';\r\nimport { FeeService } from '../../src/services/fee_service';\r\nimport { RfqmService } from '../../src/services/rfqm_service';\r\nimport { RfqMakerBalanceCacheService } from '../../src/services/rfq_maker_balance_cache_service';\r\nimport { ApprovalResponse, FetchIndicativeQuoteResponse, OtcOrderRfqmQuoteResponse } from '../../src/services/types';\r\nimport { BalanceChecker } from '../../src/utils/balance_checker';\r\nimport { CacheClient } from '../../src/utils/cache_client';\r\nimport { getV1QuoteAsync } from '../../src/utils/MetaTransactionClient';\r\nimport { QuoteServerClient } from '../../src/utils/quote_server_client';\r\nimport { RfqmDbUtils } from '../../src/utils/rfqm_db_utils';\r\nimport { RfqBlockchainUtils } from '../../src/utils/rfq_blockchain_utils';\r\nimport { RfqMakerManager } from '../../src/utils/rfq_maker_manager';\r\nimport { TokenMetadataManager } from '../../src/utils/TokenMetadataManager';\r\nimport { GaslessTypes } from '../../src/core/types';\r\n\r\njest.mock('../../src/services/rfqm_service', () => {\r\n    return {\r\n        RfqmService: jest.fn().mockImplementation(() => {\r\n            return {\r\n                fetchFirmQuoteAsync: jest.fn(),\r\n                fetchIndicativeQuoteAsync: jest.fn(),\r\n                getGaslessApprovalResponseAsync: jest.fn(),\r\n            };\r\n        }),\r\n    };\r\n});\r\n\r\njest.mock('../../src/utils/MetaTransactionClient', () => {\r\n    return {\r\n        getV1QuoteAsync: jest.fn(),\r\n    };\r\n});\r\n\r\njest.mock('../../src/utils/rfq_blockchain_utils', () => {\r\n    return {\r\n        RfqBlockchainUtils: jest.fn().mockImplementation(() => {\r\n            return {\r\n                getTokenBalancesAsync: jest.fn(),\r\n                getMinOfBalancesAndAllowancesAsync: jest.fn(),\r\n                getExchangeProxyAddress: jest.fn(),\r\n            };\r\n        }),\r\n    };\r\n});\r\n\r\njest.mock('../../src/utils/rfqm_db_utils', () => {\r\n    return {\r\n        RfqmDbUtils: jest.fn().mockImplementation(() => {\r\n            return {\r\n                findMetaTransactionJobsWithStatusesAsync: jest.fn().mockResolvedValue([]),\r\n                writeMetaTransactionJobAsync: jest.fn(),\r\n            };\r\n        }),\r\n    };\r\n});\r\n\r\njest.mock('ioredis', () => {\r\n    return {\r\n        default: jest.fn().mockImplementation(() => {\r\n            return {\r\n                set: jest.fn(),\r\n                get: jest.fn(),\r\n            };\r\n        }),\r\n    };\r\n});\r\n\r\njest.mock('sqs-producer', () => {\r\n    return {\r\n        Producer: jest.fn().mockImplementation(() => {\r\n            return {\r\n                send: jest.fn(),\r\n            };\r\n        }),\r\n    };\r\n});\r\n\r\n// tslint:disable: no-object-literal-type-assertion\r\nconst getMetaTransactionQuoteAsyncMock = getV1QuoteAsync as jest.Mock<\r\n    ReturnType<typeof getV1QuoteAsync>,\r\n    Parameters<typeof getV1QuoteAsync>\r\n>;\r\nconst mockSqsProducer = jest.mocked(new Producer({}));\r\nconst mockDbUtils = jest.mocked(new RfqmDbUtils({} as Connection));\r\nconst mockBlockchainUtils = jest.mocked(\r\n    new RfqBlockchainUtils({} as SupportedProvider, '0xdefi', {} as BalanceChecker, {} as providers.JsonRpcProvider),\r\n);\r\n\r\nconst mockRfqmService = jest.mocked(\r\n    new RfqmService(\r\n        0,\r\n        {} as FeeService,\r\n        0,\r\n        {} as ContractAddresses,\r\n        '0x0',\r\n        {} as RfqBlockchainUtils,\r\n        {} as RfqmDbUtils,\r\n        {} as Producer,\r\n        {} as QuoteServerClient,\r\n        DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n        {} as CacheClient,\r\n        {} as RfqMakerBalanceCacheService,\r\n        {} as RfqMakerManager,\r\n        {} as TokenMetadataManager,\r\n    ),\r\n);\r\n\r\nconst mockRedis = jest.mocked(new Redis());\r\n\r\nconst gaslessSwapService = new GaslessSwapService(\r\n    /* chainId */ 1337, // tslint:disable-line: custom-no-magic-numbers\r\n    mockRfqmService,\r\n    new URL('https://hokiesports.com/quote'),\r\n    {} as AxiosInstance,\r\n    mockRedis,\r\n    mockDbUtils,\r\n    mockBlockchainUtils,\r\n    mockSqsProducer,\r\n);\r\n\r\ndescribe('GaslessSwapService', () => {\r\n    const takerPrivateKey = '0xd2c2349e10170e4219d9febd1c663ea5c7334f79c38d25f4f52c85af796c7c05';\r\n    const metaTransaction = new MetaTransaction({\r\n        callData:\r\n            '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',\r\n        chainId: 137,\r\n        verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n        expirationTimeSeconds: new BigNumber('9990868679'),\r\n        feeAmount: new BigNumber(0),\r\n        feeToken: '0x0000000000000000000000000000000000000000',\r\n        maxGasPrice: new BigNumber(4294967296),\r\n        minGasPrice: new BigNumber(1),\r\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n        // eslint-disable-next-line @typescript-eslint/no-loss-of-precision\r\n        salt: new BigNumber(32606650794224189614795510724011106220035660490560169776986607186708081701146),\r\n        sender: '0x0000000000000000000000000000000000000000',\r\n        signer: '0x4c42a706410f1190f97d26fe3c999c90070aa40f',\r\n        value: new BigNumber(0),\r\n    });\r\n    const price: FetchIndicativeQuoteResponse = {\r\n        allowanceTarget: '0x12345',\r\n        buyAmount: new BigNumber(1800054805473),\r\n        sellAmount: new BigNumber(1000000000000000000000),\r\n        buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n        sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n        gas: new BigNumber(1043459),\r\n        price: new BigNumber(1800.054805),\r\n    };\r\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n    // eslint-disable-next-line @typescript-eslint/no-loss-of-precision\r\n    const expiry = new BigNumber(9999999999999999); // tslint:disable-line custom-no-magic-numbers\r\n    const otcOrder = new OtcOrder({\r\n        txOrigin: '0x0000000000000000000000000000000000000000',\r\n        taker: '0x1111111111111111111111111111111111111111',\r\n        maker: '0x2222222222222222222222222222222222222222',\r\n        makerToken: '0x3333333333333333333333333333333333333333',\r\n        takerToken: '0x4444444444444444444444444444444444444444',\r\n        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(expiry, ZERO, expiry),\r\n        chainId: 1337,\r\n        verifyingContract: '0x0000000000000000000000000000000000000000',\r\n    });\r\n    const otcQuote: OtcOrderRfqmQuoteResponse = {\r\n        allowanceTarget: '0x12345',\r\n        buyAmount: new BigNumber(1800054805473),\r\n        sellAmount: new BigNumber(1000000000000000000000),\r\n        buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n        sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n        gas: new BigNumber(1043459),\r\n        price: new BigNumber(1800.054805),\r\n        type: GaslessTypes.OtcOrder,\r\n        order: otcOrder,\r\n        orderHash: otcOrder.getHash(),\r\n    };\r\n\r\n    beforeEach(() => {\r\n        mockBlockchainUtils.getExchangeProxyAddress.mockReturnValue('0x12345');\r\n        jest.clearAllMocks();\r\n    });\r\n\r\n    describe('fetchPriceAsync', () => {\r\n        it('gets an RFQ price if available', async () => {\r\n            mockRfqmService.fetchIndicativeQuoteAsync.mockResolvedValueOnce(price);\r\n\r\n            const result = await gaslessSwapService.fetchPriceAsync({\r\n                buyAmount: new BigNumber(1800054805473),\r\n                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                buyTokenDecimals: 6,\r\n                integrator: {} as Integrator,\r\n                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                sellTokenDecimals: 18,\r\n            });\r\n\r\n            expect(result?.liquiditySource).toEqual('rfq');\r\n            expect(result).toMatchInlineSnapshot(`\r\n                Object {\r\n                  \"allowanceTarget\": \"0x12345\",\r\n                  \"buyAmount\": \"1800054805473\",\r\n                  \"buyTokenAddress\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\r\n                  \"gas\": \"1043459\",\r\n                  \"liquiditySource\": \"rfq\",\r\n                  \"price\": \"1800.054805\",\r\n                  \"sellAmount\": \"1000000000000000000000\",\r\n                  \"sellTokenAddress\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\r\n                }\r\n            `);\r\n            expect(getMetaTransactionQuoteAsyncMock).not.toBeCalled();\r\n        });\r\n\r\n        it('gets an AMM price if no RFQ liquidity is available', async () => {\r\n            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce({ metaTransaction, price });\r\n            mockRfqmService.fetchIndicativeQuoteAsync.mockResolvedValueOnce(null);\r\n\r\n            const result = await gaslessSwapService.fetchPriceAsync({\r\n                buyAmount: new BigNumber(1800054805473),\r\n                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                buyTokenDecimals: 6,\r\n                integrator: {} as Integrator,\r\n                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                sellTokenDecimals: 18,\r\n            });\r\n\r\n            expect(result?.liquiditySource).toEqual('amm');\r\n            expect(result).toMatchInlineSnapshot(`\r\n                Object {\r\n                  \"allowanceTarget\": \"0x12345\",\r\n                  \"buyAmount\": \"1800054805473\",\r\n                  \"buyTokenAddress\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\r\n                  \"gas\": \"1043459\",\r\n                  \"liquiditySource\": \"amm\",\r\n                  \"price\": \"1800.054805\",\r\n                  \"sellAmount\": \"1000000000000000000000\",\r\n                  \"sellTokenAddress\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\r\n                }\r\n            `);\r\n        });\r\n\r\n        it('gets an AMM price if RFQ request throws', async () => {\r\n            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce({ metaTransaction, price });\r\n            mockRfqmService.fetchIndicativeQuoteAsync.mockImplementationOnce(() => {\r\n                throw new Error('rfqm quote threw up');\r\n            });\r\n\r\n            const result = await gaslessSwapService.fetchPriceAsync({\r\n                buyAmount: new BigNumber(1800054805473),\r\n                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                buyTokenDecimals: 6,\r\n                integrator: {} as Integrator,\r\n                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                sellTokenDecimals: 18,\r\n            });\r\n\r\n            expect(result?.liquiditySource).toEqual('amm');\r\n            expect(result).toMatchInlineSnapshot(`\r\n                Object {\r\n                  \"allowanceTarget\": \"0x12345\",\r\n                  \"buyAmount\": \"1800054805473\",\r\n                  \"buyTokenAddress\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\r\n                  \"gas\": \"1043459\",\r\n                  \"liquiditySource\": \"amm\",\r\n                  \"price\": \"1800.054805\",\r\n                  \"sellAmount\": \"1000000000000000000000\",\r\n                  \"sellTokenAddress\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\r\n                }\r\n            `);\r\n        });\r\n\r\n        it('returns `null` if no liquidity is available', async () => {\r\n            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce(null);\r\n            mockRfqmService.fetchIndicativeQuoteAsync.mockResolvedValueOnce(null);\r\n\r\n            const result = await gaslessSwapService.fetchPriceAsync({\r\n                buyAmount: new BigNumber(1800054805473),\r\n                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                buyTokenDecimals: 6,\r\n                integrator: {} as Integrator,\r\n                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                sellTokenDecimals: 18,\r\n            });\r\n\r\n            expect(result).toBeNull();\r\n        });\r\n\r\n        it('throws if AMM request throws and RFQ has no liquidity / request throws', async () => {\r\n            mockRfqmService.fetchIndicativeQuoteAsync.mockImplementationOnce(() => {\r\n                throw new Error('rfqm price threw up');\r\n            });\r\n            getMetaTransactionQuoteAsyncMock.mockImplementationOnce(() => {\r\n                throw new Error('amm price threw up');\r\n            });\r\n\r\n            await expect(() =>\r\n                gaslessSwapService.fetchPriceAsync({\r\n                    buyAmount: new BigNumber(1800054805473),\r\n                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                    buyTokenDecimals: 6,\r\n                    integrator: {} as Integrator,\r\n                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                    sellTokenDecimals: 18,\r\n                }),\r\n            ).rejects.toThrow('Error fetching price');\r\n        });\r\n\r\n        it('throws validation error if AMM quote throws validation error', async () => {\r\n            getMetaTransactionQuoteAsyncMock.mockImplementation(() => {\r\n                throw new ValidationError([\r\n                    {\r\n                        field: 'sellAmount',\r\n                        code: ValidationErrorCodes.FieldInvalid,\r\n                        reason: 'sellAmount too small',\r\n                    },\r\n                ]);\r\n            });\r\n            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValue({ quote: null, quoteReportId: null });\r\n\r\n            await expect(() =>\r\n                gaslessSwapService.fetchPriceAsync({\r\n                    buyAmount: new BigNumber(1800054805473),\r\n                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                    buyTokenDecimals: 6,\r\n                    integrator: {} as Integrator,\r\n                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                    sellTokenDecimals: 18,\r\n                    takerAddress: '0xtaker',\r\n                }),\r\n            ).rejects.toThrow(ValidationError);\r\n\r\n            await expect(() =>\r\n                gaslessSwapService.fetchPriceAsync({\r\n                    sellAmount: new BigNumber(1800054805473),\r\n                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                    buyTokenDecimals: 6,\r\n                    integrator: {} as Integrator,\r\n                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                    sellTokenDecimals: 18,\r\n                    takerAddress: '0xtaker',\r\n                }),\r\n            ).rejects.toThrow(ValidationError);\r\n        });\r\n    });\r\n    describe('fetchQuoteAsync', () => {\r\n        it('gets an RFQ quote if available', async () => {\r\n            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: otcQuote, quoteReportId: null });\r\n\r\n            const result = await gaslessSwapService.fetchQuoteAsync({\r\n                buyAmount: new BigNumber(1800054805473),\r\n                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                buyTokenDecimals: 6,\r\n                integrator: {} as Integrator,\r\n                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                sellTokenDecimals: 18,\r\n                takerAddress: '0xtaker',\r\n                checkApproval: false,\r\n            });\r\n\r\n            expect(result).not.toBeNull();\r\n            expect(result?.type).toEqual(GaslessTypes.OtcOrder);\r\n            expect(result).toMatchInlineSnapshot(`\r\n                Object {\r\n                  \"allowanceTarget\": \"0x12345\",\r\n                  \"buyAmount\": \"1800054805473\",\r\n                  \"buyTokenAddress\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\r\n                  \"gas\": \"1043459\",\r\n                  \"liquiditySource\": \"rfq\",\r\n                  \"order\": OtcOrder {\r\n                    \"chainId\": 1337,\r\n                    \"expiry\": \"10000000000000000\",\r\n                    \"expiryAndNonce\": \"62771017353866807638357894232076664161023554444640345128970000000000000000\",\r\n                    \"maker\": \"0x2222222222222222222222222222222222222222\",\r\n                    \"makerAmount\": \"0\",\r\n                    \"makerToken\": \"0x3333333333333333333333333333333333333333\",\r\n                    \"nonce\": \"10000000000000000\",\r\n                    \"nonceBucket\": \"0\",\r\n                    \"taker\": \"0x1111111111111111111111111111111111111111\",\r\n                    \"takerAmount\": \"0\",\r\n                    \"takerToken\": \"0x4444444444444444444444444444444444444444\",\r\n                    \"txOrigin\": \"0x0000000000000000000000000000000000000000\",\r\n                    \"verifyingContract\": \"0x0000000000000000000000000000000000000000\",\r\n                  },\r\n                  \"orderHash\": \"0x69b784087387d37e2361a40146420a5a68b08375238a5ba0329f612d5673b2ea\",\r\n                  \"price\": \"1800.054805\",\r\n                  \"sellAmount\": \"1000000000000000000000\",\r\n                  \"sellTokenAddress\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\r\n                  \"type\": \"otc\",\r\n                }\r\n            `);\r\n            expect(getMetaTransactionQuoteAsyncMock).not.toBeCalled();\r\n        });\r\n\r\n        it('gets an AMM quote if no RFQ liquidity is available', async () => {\r\n            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce({ metaTransaction, price });\r\n            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });\r\n\r\n            const result = await gaslessSwapService.fetchQuoteAsync({\r\n                buyAmount: new BigNumber(1800054805473),\r\n                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                buyTokenDecimals: 6,\r\n                integrator: {} as Integrator,\r\n                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                sellTokenDecimals: 18,\r\n                takerAddress: '0xtaker',\r\n                checkApproval: false,\r\n            });\r\n\r\n            expect(result).not.toBeNull();\r\n            expect(result?.type).toEqual(GaslessTypes.MetaTransaction);\r\n            if (result?.type !== GaslessTypes.MetaTransaction) {\r\n                // Refine type for further assertions\r\n                throw new Error('Result should be a meta transaction');\r\n            }\r\n            expect(result.metaTransaction.getHash()).toEqual(metaTransaction.getHash());\r\n            expect(result).toMatchInlineSnapshot(`\r\n                Object {\r\n                  \"allowanceTarget\": \"0x12345\",\r\n                  \"approval\": undefined,\r\n                  \"buyAmount\": \"1800054805473\",\r\n                  \"buyTokenAddress\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\r\n                  \"gas\": \"1043459\",\r\n                  \"liquiditySource\": \"amm\",\r\n                  \"metaTransaction\": MetaTransaction {\r\n                    \"callData\": \"0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b\",\r\n                    \"chainId\": 137,\r\n                    \"expirationTimeSeconds\": \"9990868679\",\r\n                    \"feeAmount\": \"0\",\r\n                    \"feeToken\": \"0x0000000000000000000000000000000000000000\",\r\n                    \"maxGasPrice\": \"4294967296\",\r\n                    \"minGasPrice\": \"1\",\r\n                    \"salt\": \"32606650794224190000000000000000000000000000000000000000000000000000000000000\",\r\n                    \"sender\": \"0x0000000000000000000000000000000000000000\",\r\n                    \"signer\": \"0x4c42a706410f1190f97d26fe3c999c90070aa40f\",\r\n                    \"value\": \"0\",\r\n                    \"verifyingContract\": \"0xdef1c0ded9bec7f1a1670819833240f027b25eff\",\r\n                  },\r\n                  \"metaTransactionHash\": \"0xde5a11983edd012047dd3107532f007a73ae488bfb354f35b8a40580e2a775a1\",\r\n                  \"price\": \"1800.054805\",\r\n                  \"sellAmount\": \"1000000000000000000000\",\r\n                  \"sellTokenAddress\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\r\n                  \"type\": \"metatransaction\",\r\n                }\r\n            `);\r\n        });\r\n\r\n        it('throws validation error if AMM quote throws validation error', async () => {\r\n            getMetaTransactionQuoteAsyncMock.mockImplementation(() => {\r\n                throw new ValidationError([\r\n                    {\r\n                        field: 'sellAmount',\r\n                        code: ValidationErrorCodes.FieldInvalid,\r\n                        reason: 'sellAmount too small',\r\n                    },\r\n                ]);\r\n            });\r\n            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValue({ quote: null, quoteReportId: null });\r\n\r\n            await expect(() =>\r\n                gaslessSwapService.fetchQuoteAsync({\r\n                    buyAmount: new BigNumber(1800054805473),\r\n                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                    buyTokenDecimals: 6,\r\n                    integrator: {} as Integrator,\r\n                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                    sellTokenDecimals: 18,\r\n                    takerAddress: '0xtaker',\r\n                    checkApproval: false,\r\n                }),\r\n            ).rejects.toThrow(ValidationError);\r\n\r\n            await expect(() =>\r\n                gaslessSwapService.fetchQuoteAsync({\r\n                    sellAmount: new BigNumber(1800054805473),\r\n                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                    buyTokenDecimals: 6,\r\n                    integrator: {} as Integrator,\r\n                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                    sellTokenDecimals: 18,\r\n                    takerAddress: '0xtaker',\r\n                    checkApproval: false,\r\n                }),\r\n            ).rejects.toThrow(ValidationError);\r\n        });\r\n\r\n        it('adds an affiliate address if one is included in the integrator configuration but not in the quote request', async () => {\r\n            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce({ metaTransaction, price });\r\n            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });\r\n\r\n            await gaslessSwapService.fetchQuoteAsync({\r\n                buyAmount: new BigNumber(1800054805473),\r\n                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                buyTokenDecimals: 6,\r\n                integrator: { affiliateAddress: '0xaffiliateAddress' } as Integrator,\r\n                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                sellTokenDecimals: 18,\r\n                takerAddress: '0xtaker',\r\n                checkApproval: false,\r\n            });\r\n            expect(getMetaTransactionQuoteAsyncMock.mock.calls[0][/* params */ 2]['affiliateAddress']).toEqual(\r\n                '0xaffiliateAddress',\r\n            );\r\n        });\r\n\r\n        it('uses the affiliate address in the quote request even if one is present in integrator configuration', async () => {\r\n            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce({ metaTransaction, price });\r\n            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });\r\n\r\n            await gaslessSwapService.fetchQuoteAsync({\r\n                affiliateAddress: '0xaffiliateAddressShouldUse',\r\n                buyAmount: new BigNumber(1800054805473),\r\n                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                buyTokenDecimals: 6,\r\n                integrator: { affiliateAddress: '0xaffiliateAddressShouldntUse' } as Integrator,\r\n                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                sellTokenDecimals: 18,\r\n                takerAddress: '0xtaker',\r\n                checkApproval: false,\r\n            });\r\n            expect(getMetaTransactionQuoteAsyncMock.mock.calls[0][/* params */ 2]['affiliateAddress']).toEqual(\r\n                '0xaffiliateAddressShouldUse',\r\n            );\r\n        });\r\n\r\n        it('returns `null` if no liquidity is available', async () => {\r\n            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });\r\n            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce(null);\r\n\r\n            const result = await gaslessSwapService.fetchQuoteAsync({\r\n                buyAmount: new BigNumber(1800054805473),\r\n                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                buyTokenDecimals: 6,\r\n                integrator: {} as Integrator,\r\n                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                sellTokenDecimals: 18,\r\n                takerAddress: '0xtaker',\r\n                checkApproval: false,\r\n            });\r\n\r\n            expect(result).toBeNull();\r\n        });\r\n\r\n        it('throws if AMM request throws and RFQ has no liquidity / request throws', async () => {\r\n            mockRfqmService.fetchFirmQuoteAsync.mockImplementationOnce(() => {\r\n                throw new Error('rfqm price threw up');\r\n            });\r\n            getMetaTransactionQuoteAsyncMock.mockImplementationOnce(() => {\r\n                throw new Error('amm price threw up');\r\n            });\r\n\r\n            await expect(() =>\r\n                gaslessSwapService.fetchQuoteAsync({\r\n                    buyAmount: new BigNumber(1800054805473),\r\n                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                    buyTokenDecimals: 6,\r\n                    integrator: {} as Integrator,\r\n                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                    sellTokenDecimals: 18,\r\n                    takerAddress: '0xtaker',\r\n                    checkApproval: false,\r\n                }),\r\n            ).rejects.toThrow('Error fetching quote');\r\n        });\r\n\r\n        it('stores a metatransaction hash', async () => {\r\n            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce({ metaTransaction, price });\r\n            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });\r\n\r\n            await gaslessSwapService.fetchQuoteAsync({\r\n                buyAmount: new BigNumber(1800054805473),\r\n                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                buyTokenDecimals: 6,\r\n                integrator: {} as Integrator,\r\n                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                sellTokenDecimals: 18,\r\n                takerAddress: '0xtaker',\r\n                checkApproval: false,\r\n            });\r\n\r\n            expect(mockRedis.set).toBeCalledWith(`metaTransactionHash.${metaTransaction.getHash()}`, 0, 'EX', 900);\r\n        });\r\n\r\n        it('gets the approval object', async () => {\r\n            const approvalResponse: ApprovalResponse = {\r\n                isRequired: true,\r\n            };\r\n            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce({ metaTransaction, price });\r\n            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });\r\n            mockRfqmService.getGaslessApprovalResponseAsync.mockResolvedValueOnce(approvalResponse);\r\n\r\n            const result = await gaslessSwapService.fetchQuoteAsync({\r\n                buyAmount: new BigNumber(1800054805473),\r\n                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n                buyTokenDecimals: 6,\r\n                integrator: {} as Integrator,\r\n                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\r\n                sellTokenDecimals: 18,\r\n                takerAddress: '0xtaker',\r\n                checkApproval: true,\r\n            });\r\n\r\n            expect(result?.approval).not.toBeUndefined();\r\n        });\r\n    });\r\n    describe('processSubmitAsync', () => {\r\n        it('fails if the metatransaction is expired', async () => {\r\n            const expiredMetaTransaction = new MetaTransaction({\r\n                callData:\r\n                    '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',\r\n                chainId: 137,\r\n                verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\r\n                expirationTimeSeconds: new BigNumber('420'),\r\n                feeAmount: new BigNumber(0),\r\n                feeToken: '0x0000000000000000000000000000000000000000',\r\n                maxGasPrice: new BigNumber(4294967296),\r\n                minGasPrice: new BigNumber(1),\r\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n                // eslint-disable-next-line @typescript-eslint/no-loss-of-precision\r\n                salt: new BigNumber(32606650794224189614795510724011106220035660490560169776986607186708081701146),\r\n                sender: '0x0000000000000000000000000000000000000000',\r\n                signer: '0x4C42a706410F1190f97D26Fe3c999c90070aa40F',\r\n                value: new BigNumber(0),\r\n            });\r\n\r\n            await expect(() =>\r\n                gaslessSwapService.processSubmitAsync(\r\n                    {\r\n                        kind: GaslessTypes.MetaTransaction,\r\n                        trade: {\r\n                            metaTransaction: expiredMetaTransaction,\r\n                            type: GaslessTypes.MetaTransaction,\r\n                            signature: {\r\n                                r: '',\r\n                                s: '',\r\n                                signatureType: SignatureType.EthSign,\r\n                                v: 1,\r\n                            },\r\n                        },\r\n                    },\r\n\r\n                    'integratorId',\r\n                ),\r\n            ).rejects.toThrowError(ValidationError);\r\n        });\r\n\r\n        it(\"fails if the metatransaction hash doesn't exist in the redis store\", async () => {\r\n            mockRedis.get = jest.fn().mockResolvedValueOnce(null);\r\n            await expect(() =>\r\n                gaslessSwapService.processSubmitAsync(\r\n                    {\r\n                        kind: GaslessTypes.MetaTransaction,\r\n                        trade: {\r\n                            metaTransaction,\r\n                            type: GaslessTypes.MetaTransaction,\r\n                            signature: {\r\n                                r: '',\r\n                                s: '',\r\n                                signatureType: SignatureType.EthSign,\r\n                                v: 1,\r\n                            },\r\n                        },\r\n                    },\r\n                    'integratorId',\r\n                ),\r\n            ).rejects.toThrowError('MetaTransaction hash not found');\r\n            expect(mockRedis.get).toBeCalledWith(`metaTransactionHash.${metaTransaction.getHash()}`);\r\n        });\r\n\r\n        it('fails if there is already a pending transaction for the taker/taker token', async () => {\r\n            mockRedis.get = jest.fn().mockResolvedValueOnce({});\r\n            mockDbUtils.findMetaTransactionJobsWithStatusesAsync.mockResolvedValueOnce([\r\n                new MetaTransactionJobEntity({\r\n                    chainId: 1337,\r\n                    expiry: metaTransaction.expirationTimeSeconds,\r\n                    fee: {\r\n                        amount: metaTransaction.feeAmount,\r\n                        token: metaTransaction.feeToken,\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: price.sellTokenAddress,\r\n                    inputTokenAmount: price.sellAmount,\r\n                    integratorId: 'integrator-id',\r\n                    metaTransaction,\r\n                    metaTransactionHash: '0xotherhash',\r\n                    minOutputTokenAmount: new BigNumber(0),\r\n                    outputToken: price.buyTokenAddress,\r\n                    status: RfqmJobStatus.PendingProcessing,\r\n                    takerAddress: metaTransaction.signer,\r\n                    takerSignature: {\r\n                        r: '',\r\n                        s: '',\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                    },\r\n                }),\r\n            ]);\r\n            await expect(() =>\r\n                gaslessSwapService.processSubmitAsync(\r\n                    {\r\n                        kind: GaslessTypes.MetaTransaction,\r\n                        trade: {\r\n                            metaTransaction,\r\n                            type: GaslessTypes.MetaTransaction,\r\n                            signature: ethSignHashWithKey(metaTransaction.getHash(), takerPrivateKey),\r\n                        },\r\n                    },\r\n                    'integratorId',\r\n                ),\r\n            ).rejects.toThrowError('pending trade');\r\n        });\r\n\r\n        it('fails if the signature is invalid', async () => {\r\n            const otherPrivateKey = '0xae4536e2cdee8f32adc77ebe86977a01c6526a32eee7c4c2ccfb1d5ddcddaaa2';\r\n            mockRedis.get = jest.fn().mockResolvedValueOnce({});\r\n            mockDbUtils.findMetaTransactionJobsWithStatusesAsync.mockResolvedValueOnce([]);\r\n            await expect(() =>\r\n                gaslessSwapService.processSubmitAsync(\r\n                    {\r\n                        kind: GaslessTypes.MetaTransaction,\r\n                        trade: {\r\n                            metaTransaction,\r\n                            type: GaslessTypes.MetaTransaction,\r\n                            signature: ethSignHashWithKey(metaTransaction.getHash(), otherPrivateKey),\r\n                        },\r\n                    },\r\n                    'integratorId',\r\n                ),\r\n            ).rejects.toThrow(ValidationError);\r\n        });\r\n\r\n        it('fails if taker balance is too low', async () => {\r\n            mockRedis.get = jest.fn().mockResolvedValueOnce({});\r\n            mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync.mockResolvedValueOnce([new BigNumber(21)]);\r\n            await expect(() =>\r\n                gaslessSwapService.processSubmitAsync(\r\n                    {\r\n                        kind: GaslessTypes.MetaTransaction,\r\n                        trade: {\r\n                            metaTransaction,\r\n                            type: GaslessTypes.MetaTransaction,\r\n                            signature: ethSignHashWithKey(metaTransaction.getHash(), takerPrivateKey),\r\n                        },\r\n                    },\r\n                    'integratorId',\r\n                ),\r\n            ).rejects.toThrow(ValidationError);\r\n        });\r\n\r\n        it('creates a metatransaction job', async () => {\r\n            mockRedis.get = jest.fn().mockResolvedValueOnce({});\r\n            mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync = jest\r\n                .fn()\r\n                .mockResolvedValueOnce([price.sellAmount]);\r\n\r\n            mockDbUtils.writeMetaTransactionJobAsync.mockResolvedValueOnce({ id: 'id' } as MetaTransactionJobEntity);\r\n\r\n            const result = await gaslessSwapService.processSubmitAsync(\r\n                {\r\n                    kind: GaslessTypes.MetaTransaction,\r\n                    trade: {\r\n                        metaTransaction,\r\n                        type: GaslessTypes.MetaTransaction,\r\n                        signature: ethSignHashWithKey(metaTransaction.getHash(), takerPrivateKey),\r\n                    },\r\n                },\r\n                'integratorId',\r\n            );\r\n\r\n            expect(result.metaTransactionHash).toEqual(metaTransaction.getHash());\r\n            expect(result.type).toEqual(GaslessTypes.MetaTransaction);\r\n            // tslint:disable-next-line: no-unbound-method\r\n            expect(mockSqsProducer.send).toHaveBeenCalledWith({\r\n                body: '{\"id\":\"id\",\"type\":\"metatransaction\"}',\r\n                deduplicationId: 'id',\r\n                groupId: 'id',\r\n                id: 'id',\r\n            });\r\n        });\r\n    });\r\n});\r\n"],"version":3}