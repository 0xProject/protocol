6dee14e2155a6070dde14f5812990964
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../../src/services/rfqm_service', () => {
    return {
        RfqmService: jest.fn().mockImplementation(() => {
            return {
                fetchFirmQuoteAsync: jest.fn(),
                fetchIndicativeQuoteAsync: jest.fn(),
                getGaslessApprovalResponseAsync: jest.fn(),
            };
        }),
    };
});
jest.mock('../../src/utils/MetaTransactionClient', () => {
    return {
        getV1QuoteAsync: jest.fn(),
    };
});
jest.mock('../../src/utils/rfq_blockchain_utils', () => {
    return {
        RfqBlockchainUtils: jest.fn().mockImplementation(() => {
            return {
                getTokenBalancesAsync: jest.fn(),
                getMinOfBalancesAndAllowancesAsync: jest.fn(),
                getExchangeProxyAddress: jest.fn(),
            };
        }),
    };
});
jest.mock('../../src/utils/rfqm_db_utils', () => {
    return {
        RfqmDbUtils: jest.fn().mockImplementation(() => {
            return {
                findMetaTransactionJobsWithStatusesAsync: jest.fn().mockResolvedValue([]),
                writeMetaTransactionJobAsync: jest.fn(),
            };
        }),
    };
});
jest.mock('ioredis', () => {
    return {
        default: jest.fn().mockImplementation(() => {
            return {
                set: jest.fn(),
                get: jest.fn(),
            };
        }),
    };
});
jest.mock('sqs-producer', () => {
    return {
        Producer: jest.fn().mockImplementation(() => {
            return {
                send: jest.fn(),
            };
        }),
    };
});
// tslint:disable: max-file-line-count
const api_utils_1 = require("@0x/api-utils");
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const ioredis_1 = require("ioredis");
const sqs_producer_1 = require("sqs-producer");
const constants_1 = require("../../src/core/constants");
const entities_1 = require("../../src/entities");
const types_1 = require("../../src/entities/types");
const GaslessSwapService_1 = require("../../src/services/GaslessSwapService");
const rfqm_service_1 = require("../../src/services/rfqm_service");
const MetaTransactionClient_1 = require("../../src/utils/MetaTransactionClient");
const rfqm_db_utils_1 = require("../../src/utils/rfqm_db_utils");
const rfq_blockchain_utils_1 = require("../../src/utils/rfq_blockchain_utils");
const types_2 = require("../../src/core/types");
// tslint:disable: no-object-literal-type-assertion
const getMetaTransactionQuoteAsyncMock = MetaTransactionClient_1.getV1QuoteAsync;
const mockSqsProducer = jest.mocked(new sqs_producer_1.Producer({}));
const mockDbUtils = jest.mocked(new rfqm_db_utils_1.RfqmDbUtils({}));
const mockBlockchainUtils = jest.mocked(new rfq_blockchain_utils_1.RfqBlockchainUtils({}, '0xdefi', {}, {}));
const mockRfqmService = jest.mocked(new rfqm_service_1.RfqmService(0, {}, 0, {}, '0x0', {}, {}, {}, {}, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, {}, {}, {}, {}));
const mockRedis = jest.mocked(new ioredis_1.default());
const gaslessSwapService = new GaslessSwapService_1.GaslessSwapService(
/* chainId */ 1337, // tslint:disable-line: custom-no-magic-numbers
mockRfqmService, new URL('https://hokiesports.com/quote'), {}, mockRedis, mockDbUtils, mockBlockchainUtils, mockSqsProducer);
describe('GaslessSwapService', () => {
    const takerPrivateKey = '0xd2c2349e10170e4219d9febd1c663ea5c7334f79c38d25f4f52c85af796c7c05';
    const metaTransaction = new protocol_utils_1.MetaTransaction({
        callData: '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',
        chainId: 137,
        verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
        expirationTimeSeconds: new utils_1.BigNumber('9990868679'),
        feeAmount: new utils_1.BigNumber(0),
        feeToken: '0x0000000000000000000000000000000000000000',
        maxGasPrice: new utils_1.BigNumber(4294967296),
        minGasPrice: new utils_1.BigNumber(1),
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-loss-of-precision
        salt: new utils_1.BigNumber(32606650794224189614795510724011106220035660490560169776986607186708081701146),
        sender: '0x0000000000000000000000000000000000000000',
        signer: '0x4c42a706410f1190f97d26fe3c999c90070aa40f',
        value: new utils_1.BigNumber(0),
    });
    const price = {
        allowanceTarget: '0x12345',
        buyAmount: new utils_1.BigNumber(1800054805473),
        sellAmount: new utils_1.BigNumber(1000000000000000000000),
        buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
        sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
        gas: new utils_1.BigNumber(1043459),
        price: new utils_1.BigNumber(1800.054805),
    };
    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
    // eslint-disable-next-line @typescript-eslint/no-loss-of-precision
    const expiry = new utils_1.BigNumber(9999999999999999); // tslint:disable-line custom-no-magic-numbers
    const otcOrder = new protocol_utils_1.OtcOrder({
        txOrigin: '0x0000000000000000000000000000000000000000',
        taker: '0x1111111111111111111111111111111111111111',
        maker: '0x2222222222222222222222222222222222222222',
        makerToken: '0x3333333333333333333333333333333333333333',
        takerToken: '0x4444444444444444444444444444444444444444',
        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(expiry, constants_1.ZERO, expiry),
        chainId: 1337,
        verifyingContract: '0x0000000000000000000000000000000000000000',
    });
    const otcQuote = {
        allowanceTarget: '0x12345',
        buyAmount: new utils_1.BigNumber(1800054805473),
        sellAmount: new utils_1.BigNumber(1000000000000000000000),
        buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
        sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
        gas: new utils_1.BigNumber(1043459),
        price: new utils_1.BigNumber(1800.054805),
        type: types_2.GaslessTypes.OtcOrder,
        order: otcOrder,
        orderHash: otcOrder.getHash(),
    };
    beforeEach(() => {
        mockBlockchainUtils.getExchangeProxyAddress.mockReturnValue('0x12345');
        jest.clearAllMocks();
    });
    describe('fetchPriceAsync', () => {
        it('gets an RFQ price if available', async () => {
            mockRfqmService.fetchIndicativeQuoteAsync.mockResolvedValueOnce(price);
            const result = await gaslessSwapService.fetchPriceAsync({
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
            });
            expect(result === null || result === void 0 ? void 0 : result.liquiditySource).toEqual('rfq');
            expect(result).toMatchInlineSnapshot(`
                Object {
                  "allowanceTarget": "0x12345",
                  "buyAmount": "1800054805473",
                  "buyTokenAddress": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                  "gas": "1043459",
                  "liquiditySource": "rfq",
                  "price": "1800.054805",
                  "sellAmount": "1000000000000000000000",
                  "sellTokenAddress": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                }
            `);
            expect(getMetaTransactionQuoteAsyncMock).not.toBeCalled();
        });
        it('gets an AMM price if no RFQ liquidity is available', async () => {
            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce({ metaTransaction, price });
            mockRfqmService.fetchIndicativeQuoteAsync.mockResolvedValueOnce(null);
            const result = await gaslessSwapService.fetchPriceAsync({
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
            });
            expect(result === null || result === void 0 ? void 0 : result.liquiditySource).toEqual('amm');
            expect(result).toMatchInlineSnapshot(`
                Object {
                  "allowanceTarget": "0x12345",
                  "buyAmount": "1800054805473",
                  "buyTokenAddress": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                  "gas": "1043459",
                  "liquiditySource": "amm",
                  "price": "1800.054805",
                  "sellAmount": "1000000000000000000000",
                  "sellTokenAddress": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                }
            `);
        });
        it('gets an AMM price if RFQ request throws', async () => {
            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce({ metaTransaction, price });
            mockRfqmService.fetchIndicativeQuoteAsync.mockImplementationOnce(() => {
                throw new Error('rfqm quote threw up');
            });
            const result = await gaslessSwapService.fetchPriceAsync({
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
            });
            expect(result === null || result === void 0 ? void 0 : result.liquiditySource).toEqual('amm');
            expect(result).toMatchInlineSnapshot(`
                Object {
                  "allowanceTarget": "0x12345",
                  "buyAmount": "1800054805473",
                  "buyTokenAddress": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                  "gas": "1043459",
                  "liquiditySource": "amm",
                  "price": "1800.054805",
                  "sellAmount": "1000000000000000000000",
                  "sellTokenAddress": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                }
            `);
        });
        it('returns `null` if no liquidity is available', async () => {
            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce(null);
            mockRfqmService.fetchIndicativeQuoteAsync.mockResolvedValueOnce(null);
            const result = await gaslessSwapService.fetchPriceAsync({
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
            });
            expect(result).toBeNull();
        });
        it('throws if AMM request throws and RFQ has no liquidity / request throws', async () => {
            mockRfqmService.fetchIndicativeQuoteAsync.mockImplementationOnce(() => {
                throw new Error('rfqm price threw up');
            });
            getMetaTransactionQuoteAsyncMock.mockImplementationOnce(() => {
                throw new Error('amm price threw up');
            });
            await expect(() => gaslessSwapService.fetchPriceAsync({
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
            })).rejects.toThrow('Error fetching price');
        });
        it('throws validation error if AMM quote throws validation error', async () => {
            getMetaTransactionQuoteAsyncMock.mockImplementation(() => {
                throw new api_utils_1.ValidationError([
                    {
                        field: 'sellAmount',
                        code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                        reason: 'sellAmount too small',
                    },
                ]);
            });
            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValue({ quote: null, quoteReportId: null });
            await expect(() => gaslessSwapService.fetchPriceAsync({
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
                takerAddress: '0xtaker',
            })).rejects.toThrow(api_utils_1.ValidationError);
            await expect(() => gaslessSwapService.fetchPriceAsync({
                sellAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
                takerAddress: '0xtaker',
            })).rejects.toThrow(api_utils_1.ValidationError);
        });
    });
    describe('fetchQuoteAsync', () => {
        it('gets an RFQ quote if available', async () => {
            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: otcQuote, quoteReportId: null });
            const result = await gaslessSwapService.fetchQuoteAsync({
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
                takerAddress: '0xtaker',
                checkApproval: false,
            });
            expect(result).not.toBeNull();
            expect(result === null || result === void 0 ? void 0 : result.type).toEqual(types_2.GaslessTypes.OtcOrder);
            expect(result).toMatchInlineSnapshot(`
                Object {
                  "allowanceTarget": "0x12345",
                  "buyAmount": "1800054805473",
                  "buyTokenAddress": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                  "gas": "1043459",
                  "liquiditySource": "rfq",
                  "order": OtcOrder {
                    "chainId": 1337,
                    "expiry": "10000000000000000",
                    "expiryAndNonce": "62771017353866807638357894232076664161023554444640345128970000000000000000",
                    "maker": "0x2222222222222222222222222222222222222222",
                    "makerAmount": "0",
                    "makerToken": "0x3333333333333333333333333333333333333333",
                    "nonce": "10000000000000000",
                    "nonceBucket": "0",
                    "taker": "0x1111111111111111111111111111111111111111",
                    "takerAmount": "0",
                    "takerToken": "0x4444444444444444444444444444444444444444",
                    "txOrigin": "0x0000000000000000000000000000000000000000",
                    "verifyingContract": "0x0000000000000000000000000000000000000000",
                  },
                  "orderHash": "0x69b784087387d37e2361a40146420a5a68b08375238a5ba0329f612d5673b2ea",
                  "price": "1800.054805",
                  "sellAmount": "1000000000000000000000",
                  "sellTokenAddress": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                  "type": "otc",
                }
            `);
            expect(getMetaTransactionQuoteAsyncMock).not.toBeCalled();
        });
        it('gets an AMM quote if no RFQ liquidity is available', async () => {
            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce({ metaTransaction, price });
            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });
            const result = await gaslessSwapService.fetchQuoteAsync({
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
                takerAddress: '0xtaker',
                checkApproval: false,
            });
            expect(result).not.toBeNull();
            expect(result === null || result === void 0 ? void 0 : result.type).toEqual(types_2.GaslessTypes.MetaTransaction);
            if ((result === null || result === void 0 ? void 0 : result.type) !== types_2.GaslessTypes.MetaTransaction) {
                // Refine type for further assertions
                throw new Error('Result should be a meta transaction');
            }
            expect(result.metaTransaction.getHash()).toEqual(metaTransaction.getHash());
            expect(result).toMatchInlineSnapshot(`
                Object {
                  "allowanceTarget": "0x12345",
                  "approval": undefined,
                  "buyAmount": "1800054805473",
                  "buyTokenAddress": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                  "gas": "1043459",
                  "liquiditySource": "amm",
                  "metaTransaction": MetaTransaction {
                    "callData": "0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b",
                    "chainId": 137,
                    "expirationTimeSeconds": "9990868679",
                    "feeAmount": "0",
                    "feeToken": "0x0000000000000000000000000000000000000000",
                    "maxGasPrice": "4294967296",
                    "minGasPrice": "1",
                    "salt": "32606650794224190000000000000000000000000000000000000000000000000000000000000",
                    "sender": "0x0000000000000000000000000000000000000000",
                    "signer": "0x4c42a706410f1190f97d26fe3c999c90070aa40f",
                    "value": "0",
                    "verifyingContract": "0xdef1c0ded9bec7f1a1670819833240f027b25eff",
                  },
                  "metaTransactionHash": "0xde5a11983edd012047dd3107532f007a73ae488bfb354f35b8a40580e2a775a1",
                  "price": "1800.054805",
                  "sellAmount": "1000000000000000000000",
                  "sellTokenAddress": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                  "type": "metatransaction",
                }
            `);
        });
        it('throws validation error if AMM quote throws validation error', async () => {
            getMetaTransactionQuoteAsyncMock.mockImplementation(() => {
                throw new api_utils_1.ValidationError([
                    {
                        field: 'sellAmount',
                        code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                        reason: 'sellAmount too small',
                    },
                ]);
            });
            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValue({ quote: null, quoteReportId: null });
            await expect(() => gaslessSwapService.fetchQuoteAsync({
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
                takerAddress: '0xtaker',
                checkApproval: false,
            })).rejects.toThrow(api_utils_1.ValidationError);
            await expect(() => gaslessSwapService.fetchQuoteAsync({
                sellAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
                takerAddress: '0xtaker',
                checkApproval: false,
            })).rejects.toThrow(api_utils_1.ValidationError);
        });
        it('adds an affiliate address if one is included in the integrator configuration but not in the quote request', async () => {
            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce({ metaTransaction, price });
            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });
            await gaslessSwapService.fetchQuoteAsync({
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: { affiliateAddress: '0xaffiliateAddress' },
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
                takerAddress: '0xtaker',
                checkApproval: false,
            });
            expect(getMetaTransactionQuoteAsyncMock.mock.calls[0][ /* params */2]['affiliateAddress']).toEqual('0xaffiliateAddress');
        });
        it('uses the affiliate address in the quote request even if one is present in integrator configuration', async () => {
            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce({ metaTransaction, price });
            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });
            await gaslessSwapService.fetchQuoteAsync({
                affiliateAddress: '0xaffiliateAddressShouldUse',
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: { affiliateAddress: '0xaffiliateAddressShouldntUse' },
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
                takerAddress: '0xtaker',
                checkApproval: false,
            });
            expect(getMetaTransactionQuoteAsyncMock.mock.calls[0][ /* params */2]['affiliateAddress']).toEqual('0xaffiliateAddressShouldUse');
        });
        it('returns `null` if no liquidity is available', async () => {
            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });
            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce(null);
            const result = await gaslessSwapService.fetchQuoteAsync({
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
                takerAddress: '0xtaker',
                checkApproval: false,
            });
            expect(result).toBeNull();
        });
        it('throws if AMM request throws and RFQ has no liquidity / request throws', async () => {
            mockRfqmService.fetchFirmQuoteAsync.mockImplementationOnce(() => {
                throw new Error('rfqm price threw up');
            });
            getMetaTransactionQuoteAsyncMock.mockImplementationOnce(() => {
                throw new Error('amm price threw up');
            });
            await expect(() => gaslessSwapService.fetchQuoteAsync({
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
                takerAddress: '0xtaker',
                checkApproval: false,
            })).rejects.toThrow('Error fetching quote');
        });
        it('stores a metatransaction hash', async () => {
            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce({ metaTransaction, price });
            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });
            await gaslessSwapService.fetchQuoteAsync({
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
                takerAddress: '0xtaker',
                checkApproval: false,
            });
            expect(mockRedis.set).toBeCalledWith(`metaTransactionHash.${metaTransaction.getHash()}`, 0, 'EX', 900);
        });
        it('gets the approval object', async () => {
            const approvalResponse = {
                isRequired: true,
            };
            getMetaTransactionQuoteAsyncMock.mockResolvedValueOnce({ metaTransaction, price });
            mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });
            mockRfqmService.getGaslessApprovalResponseAsync.mockResolvedValueOnce(approvalResponse);
            const result = await gaslessSwapService.fetchQuoteAsync({
                buyAmount: new utils_1.BigNumber(1800054805473),
                buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyTokenDecimals: 6,
                integrator: {},
                sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                sellTokenDecimals: 18,
                takerAddress: '0xtaker',
                checkApproval: true,
            });
            expect(result === null || result === void 0 ? void 0 : result.approval).not.toBeUndefined();
        });
    });
    describe('processSubmitAsync', () => {
        it('fails if the metatransaction is expired', async () => {
            const expiredMetaTransaction = new protocol_utils_1.MetaTransaction({
                callData: '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',
                chainId: 137,
                verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
                expirationTimeSeconds: new utils_1.BigNumber('420'),
                feeAmount: new utils_1.BigNumber(0),
                feeToken: '0x0000000000000000000000000000000000000000',
                maxGasPrice: new utils_1.BigNumber(4294967296),
                minGasPrice: new utils_1.BigNumber(1),
                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                // eslint-disable-next-line @typescript-eslint/no-loss-of-precision
                salt: new utils_1.BigNumber(32606650794224189614795510724011106220035660490560169776986607186708081701146),
                sender: '0x0000000000000000000000000000000000000000',
                signer: '0x4C42a706410F1190f97D26Fe3c999c90070aa40F',
                value: new utils_1.BigNumber(0),
            });
            await expect(() => gaslessSwapService.processSubmitAsync({
                kind: types_2.GaslessTypes.MetaTransaction,
                trade: {
                    metaTransaction: expiredMetaTransaction,
                    type: types_2.GaslessTypes.MetaTransaction,
                    signature: {
                        r: '',
                        s: '',
                        signatureType: protocol_utils_1.SignatureType.EthSign,
                        v: 1,
                    },
                },
            }, 'integratorId')).rejects.toThrowError(api_utils_1.ValidationError);
        });
        it("fails if the metatransaction hash doesn't exist in the redis store", async () => {
            mockRedis.get = jest.fn().mockResolvedValueOnce(null);
            await expect(() => gaslessSwapService.processSubmitAsync({
                kind: types_2.GaslessTypes.MetaTransaction,
                trade: {
                    metaTransaction,
                    type: types_2.GaslessTypes.MetaTransaction,
                    signature: {
                        r: '',
                        s: '',
                        signatureType: protocol_utils_1.SignatureType.EthSign,
                        v: 1,
                    },
                },
            }, 'integratorId')).rejects.toThrowError('MetaTransaction hash not found');
            expect(mockRedis.get).toBeCalledWith(`metaTransactionHash.${metaTransaction.getHash()}`);
        });
        it('fails if there is already a pending transaction for the taker/taker token', async () => {
            mockRedis.get = jest.fn().mockResolvedValueOnce({});
            mockDbUtils.findMetaTransactionJobsWithStatusesAsync.mockResolvedValueOnce([
                new entities_1.MetaTransactionJobEntity({
                    chainId: 1337,
                    expiry: metaTransaction.expirationTimeSeconds,
                    fee: {
                        amount: metaTransaction.feeAmount,
                        token: metaTransaction.feeToken,
                        type: 'fixed',
                    },
                    inputToken: price.sellTokenAddress,
                    inputTokenAmount: price.sellAmount,
                    integratorId: 'integrator-id',
                    metaTransaction,
                    metaTransactionHash: '0xotherhash',
                    minOutputTokenAmount: new utils_1.BigNumber(0),
                    outputToken: price.buyTokenAddress,
                    status: types_1.RfqmJobStatus.PendingProcessing,
                    takerAddress: metaTransaction.signer,
                    takerSignature: {
                        r: '',
                        s: '',
                        signatureType: protocol_utils_1.SignatureType.EthSign,
                        v: 1,
                    },
                }),
            ]);
            await expect(() => gaslessSwapService.processSubmitAsync({
                kind: types_2.GaslessTypes.MetaTransaction,
                trade: {
                    metaTransaction,
                    type: types_2.GaslessTypes.MetaTransaction,
                    signature: (0, protocol_utils_1.ethSignHashWithKey)(metaTransaction.getHash(), takerPrivateKey),
                },
            }, 'integratorId')).rejects.toThrowError('pending trade');
        });
        it('fails if the signature is invalid', async () => {
            const otherPrivateKey = '0xae4536e2cdee8f32adc77ebe86977a01c6526a32eee7c4c2ccfb1d5ddcddaaa2';
            mockRedis.get = jest.fn().mockResolvedValueOnce({});
            mockDbUtils.findMetaTransactionJobsWithStatusesAsync.mockResolvedValueOnce([]);
            await expect(() => gaslessSwapService.processSubmitAsync({
                kind: types_2.GaslessTypes.MetaTransaction,
                trade: {
                    metaTransaction,
                    type: types_2.GaslessTypes.MetaTransaction,
                    signature: (0, protocol_utils_1.ethSignHashWithKey)(metaTransaction.getHash(), otherPrivateKey),
                },
            }, 'integratorId')).rejects.toThrow(api_utils_1.ValidationError);
        });
        it('fails if taker balance is too low', async () => {
            mockRedis.get = jest.fn().mockResolvedValueOnce({});
            mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync.mockResolvedValueOnce([new utils_1.BigNumber(21)]);
            await expect(() => gaslessSwapService.processSubmitAsync({
                kind: types_2.GaslessTypes.MetaTransaction,
                trade: {
                    metaTransaction,
                    type: types_2.GaslessTypes.MetaTransaction,
                    signature: (0, protocol_utils_1.ethSignHashWithKey)(metaTransaction.getHash(), takerPrivateKey),
                },
            }, 'integratorId')).rejects.toThrow(api_utils_1.ValidationError);
        });
        it('creates a metatransaction job', async () => {
            mockRedis.get = jest.fn().mockResolvedValueOnce({});
            mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync = jest
                .fn()
                .mockResolvedValueOnce([price.sellAmount]);
            mockDbUtils.writeMetaTransactionJobAsync.mockResolvedValueOnce({ id: 'id' });
            const result = await gaslessSwapService.processSubmitAsync({
                kind: types_2.GaslessTypes.MetaTransaction,
                trade: {
                    metaTransaction,
                    type: types_2.GaslessTypes.MetaTransaction,
                    signature: (0, protocol_utils_1.ethSignHashWithKey)(metaTransaction.getHash(), takerPrivateKey),
                },
            }, 'integratorId');
            expect(result.metaTransactionHash).toEqual(metaTransaction.getHash());
            expect(result.type).toEqual(types_2.GaslessTypes.MetaTransaction);
            // tslint:disable-next-line: no-unbound-method
            expect(mockSqsProducer.send).toHaveBeenCalledWith({
                body: '{"id":"id","type":"metatransaction"}',
                deduplicationId: 'id',
                groupId: 'id',
                id: 'id',
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3Qvc2VydmljZXMvR2FzbGVzc1N3YXBTZXJ2aWNlLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUE4QkEsSUFBSSxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7SUFDOUMsT0FBTztRQUNILFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFO1lBQzNDLE9BQU87Z0JBQ0gsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtnQkFDOUIseUJBQXlCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtnQkFDcEMsK0JBQStCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTthQUM3QyxDQUFDO1FBQ04sQ0FBQyxDQUFDO0tBQ0wsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLElBQUksQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7SUFDcEQsT0FBTztRQUNILGVBQWUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0tBQzdCLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxJQUFJLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO0lBQ25ELE9BQU87UUFDSCxrQkFBa0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFO1lBQ2xELE9BQU87Z0JBQ0gscUJBQXFCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtnQkFDaEMsa0NBQWtDLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtnQkFDN0MsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTthQUNyQyxDQUFDO1FBQ04sQ0FBQyxDQUFDO0tBQ0wsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLElBQUksQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7SUFDNUMsT0FBTztRQUNI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QzlDLElBQUksRUFBRSxzQ0FBc0M7Z0JBQzVDLGVBQWUsRUFBRSxJQUFJO2dCQUNyQixPQUFPLEVBQUUsSUFBSTtnQkFDYixFQUFFLEVBQUUsSUFBSTthQUNYLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvdGVzdC9zZXJ2aWNlcy9HYXNsZXNzU3dhcFNlcnZpY2UudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTogbWF4LWZpbGUtbGluZS1jb3VudFxyXG5pbXBvcnQgeyBWYWxpZGF0aW9uRXJyb3IsIFZhbGlkYXRpb25FcnJvckNvZGVzIH0gZnJvbSAnQDB4L2FwaS11dGlscyc7XHJcbmltcG9ydCB7IEFzc2V0U3dhcHBlckNvbnRyYWN0QWRkcmVzc2VzIGFzIENvbnRyYWN0QWRkcmVzc2VzLCBTdXBwb3J0ZWRQcm92aWRlciB9IGZyb20gJ0AweC9hc3NldC1zd2FwcGVyJztcclxuaW1wb3J0IHsgZXRoU2lnbkhhc2hXaXRoS2V5LCBNZXRhVHJhbnNhY3Rpb24sIE90Y09yZGVyLCBTaWduYXR1cmVUeXBlIH0gZnJvbSAnQDB4L3Byb3RvY29sLXV0aWxzJztcclxuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnQDB4L3V0aWxzJztcclxuaW1wb3J0IHsgQXhpb3NJbnN0YW5jZSB9IGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IHsgcHJvdmlkZXJzIH0gZnJvbSAnZXRoZXJzJztcclxuaW1wb3J0IFJlZGlzIGZyb20gJ2lvcmVkaXMnO1xyXG5pbXBvcnQgeyBQcm9kdWNlciB9IGZyb20gJ3Nxcy1wcm9kdWNlcic7XHJcbmltcG9ydCB7IENvbm5lY3Rpb24gfSBmcm9tICd0eXBlb3JtJztcclxuXHJcbmltcG9ydCB7IEludGVncmF0b3IgfSBmcm9tICcuLi8uLi9zcmMvY29uZmlnJztcclxuaW1wb3J0IHsgREVGQVVMVF9NSU5fRVhQSVJZX0RVUkFUSU9OX01TLCBaRVJPIH0gZnJvbSAnLi4vLi4vc3JjL2NvcmUvY29uc3RhbnRzJztcclxuaW1wb3J0IHsgTWV0YVRyYW5zYWN0aW9uSm9iRW50aXR5IH0gZnJvbSAnLi4vLi4vc3JjL2VudGl0aWVzJztcclxuaW1wb3J0IHsgUmZxbUpvYlN0YXR1cyB9IGZyb20gJy4uLy4uL3NyYy9lbnRpdGllcy90eXBlcyc7XHJcbmltcG9ydCB7IEdhc2xlc3NTd2FwU2VydmljZSB9IGZyb20gJy4uLy4uL3NyYy9zZXJ2aWNlcy9HYXNsZXNzU3dhcFNlcnZpY2UnO1xyXG5pbXBvcnQgeyBGZWVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc3JjL3NlcnZpY2VzL2ZlZV9zZXJ2aWNlJztcclxuaW1wb3J0IHsgUmZxbVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvcmZxbV9zZXJ2aWNlJztcclxuaW1wb3J0IHsgUmZxTWFrZXJCYWxhbmNlQ2FjaGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc3JjL3NlcnZpY2VzL3JmcV9tYWtlcl9iYWxhbmNlX2NhY2hlX3NlcnZpY2UnO1xyXG5pbXBvcnQgeyBBcHByb3ZhbFJlc3BvbnNlLCBGZXRjaEluZGljYXRpdmVRdW90ZVJlc3BvbnNlLCBPdGNPcmRlclJmcW1RdW90ZVJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vc3JjL3NlcnZpY2VzL3R5cGVzJztcclxuaW1wb3J0IHsgQmFsYW5jZUNoZWNrZXIgfSBmcm9tICcuLi8uLi9zcmMvdXRpbHMvYmFsYW5jZV9jaGVja2VyJztcclxuaW1wb3J0IHsgQ2FjaGVDbGllbnQgfSBmcm9tICcuLi8uLi9zcmMvdXRpbHMvY2FjaGVfY2xpZW50JztcclxuaW1wb3J0IHsgZ2V0VjFRdW90ZUFzeW5jIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL01ldGFUcmFuc2FjdGlvbkNsaWVudCc7XHJcbmltcG9ydCB7IFF1b3RlU2VydmVyQ2xpZW50IH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL3F1b3RlX3NlcnZlcl9jbGllbnQnO1xyXG5pbXBvcnQgeyBSZnFtRGJVdGlscyB9IGZyb20gJy4uLy4uL3NyYy91dGlscy9yZnFtX2RiX3V0aWxzJztcclxuaW1wb3J0IHsgUmZxQmxvY2tjaGFpblV0aWxzIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL3JmcV9ibG9ja2NoYWluX3V0aWxzJztcclxuaW1wb3J0IHsgUmZxTWFrZXJNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL3JmcV9tYWtlcl9tYW5hZ2VyJztcclxuaW1wb3J0IHsgVG9rZW5NZXRhZGF0YU1hbmFnZXIgfSBmcm9tICcuLi8uLi9zcmMvdXRpbHMvVG9rZW5NZXRhZGF0YU1hbmFnZXInO1xyXG5pbXBvcnQgeyBHYXNsZXNzVHlwZXMgfSBmcm9tICcuLi8uLi9zcmMvY29yZS90eXBlcyc7XHJcblxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zZXJ2aWNlcy9yZnFtX3NlcnZpY2UnLCAoKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIFJmcW1TZXJ2aWNlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGZldGNoRmlybVF1b3RlQXN5bmM6IGplc3QuZm4oKSxcclxuICAgICAgICAgICAgICAgIGZldGNoSW5kaWNhdGl2ZVF1b3RlQXN5bmM6IGplc3QuZm4oKSxcclxuICAgICAgICAgICAgICAgIGdldEdhc2xlc3NBcHByb3ZhbFJlc3BvbnNlQXN5bmM6IGplc3QuZm4oKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KSxcclxuICAgIH07XHJcbn0pO1xyXG5cclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvdXRpbHMvTWV0YVRyYW5zYWN0aW9uQ2xpZW50JywgKCkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRWMVF1b3RlQXN5bmM6IGplc3QuZm4oKSxcclxuICAgIH07XHJcbn0pO1xyXG5cclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvdXRpbHMvcmZxX2Jsb2NrY2hhaW5fdXRpbHMnLCAoKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIFJmcUJsb2NrY2hhaW5VdGlsczogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBnZXRUb2tlbkJhbGFuY2VzQXN5bmM6IGplc3QuZm4oKSxcclxuICAgICAgICAgICAgICAgIGdldE1pbk9mQmFsYW5jZXNBbmRBbGxvd2FuY2VzQXN5bmM6IGplc3QuZm4oKSxcclxuICAgICAgICAgICAgICAgIGdldEV4Y2hhbmdlUHJveHlBZGRyZXNzOiBqZXN0LmZuKCksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSksXHJcbiAgICB9O1xyXG59KTtcclxuXHJcbmplc3QubW9jaygnLi4vLi4vc3JjL3V0aWxzL3JmcW1fZGJfdXRpbHMnLCAoKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIFJmcW1EYlV0aWxzOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGZpbmRNZXRhVHJhbnNhY3Rpb25Kb2JzV2l0aFN0YXR1c2VzQXN5bmM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSksXHJcbiAgICAgICAgICAgICAgICB3cml0ZU1ldGFUcmFuc2FjdGlvbkpvYkFzeW5jOiBqZXN0LmZuKCksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSksXHJcbiAgICB9O1xyXG59KTtcclxuXHJcbmplc3QubW9jaygnaW9yZWRpcycsICgpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGVmYXVsdDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzZXQ6IGplc3QuZm4oKSxcclxuICAgICAgICAgICAgICAgIGdldDogamVzdC5mbigpLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pLFxyXG4gICAgfTtcclxufSk7XHJcblxyXG5qZXN0Lm1vY2soJ3Nxcy1wcm9kdWNlcicsICgpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgUHJvZHVjZXI6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2VuZDogamVzdC5mbigpLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pLFxyXG4gICAgfTtcclxufSk7XHJcblxyXG4vLyB0c2xpbnQ6ZGlzYWJsZTogbm8tb2JqZWN0LWxpdGVyYWwtdHlwZS1hc3NlcnRpb25cclxuY29uc3QgZ2V0TWV0YVRyYW5zYWN0aW9uUXVvdGVBc3luY01vY2sgPSBnZXRWMVF1b3RlQXN5bmMgYXMgamVzdC5Nb2NrPFxyXG4gICAgUmV0dXJuVHlwZTx0eXBlb2YgZ2V0VjFRdW90ZUFzeW5jPixcclxuICAgIFBhcmFtZXRlcnM8dHlwZW9mIGdldFYxUXVvdGVBc3luYz5cclxuPjtcclxuY29uc3QgbW9ja1Nxc1Byb2R1Y2VyID0gamVzdC5tb2NrZWQobmV3IFByb2R1Y2VyKHt9KSk7XHJcbmNvbnN0IG1vY2tEYlV0aWxzID0gamVzdC5tb2NrZWQobmV3IFJmcW1EYlV0aWxzKHt9IGFzIENvbm5lY3Rpb24pKTtcclxuY29uc3QgbW9ja0Jsb2NrY2hhaW5VdGlscyA9IGplc3QubW9ja2VkKFxyXG4gICAgbmV3IFJmcUJsb2NrY2hhaW5VdGlscyh7fSBhcyBTdXBwb3J0ZWRQcm92aWRlciwgJzB4ZGVmaScsIHt9IGFzIEJhbGFuY2VDaGVja2VyLCB7fSBhcyBwcm92aWRlcnMuSnNvblJwY1Byb3ZpZGVyKSxcclxuKTtcclxuXHJcbmNvbnN0IG1vY2tSZnFtU2VydmljZSA9IGplc3QubW9ja2VkKFxyXG4gICAgbmV3IFJmcW1TZXJ2aWNlKFxyXG4gICAgICAgIDAsXHJcbiAgICAgICAge30gYXMgRmVlU2VydmljZSxcclxuICAgICAgICAwLFxyXG4gICAgICAgIHt9IGFzIENvbnRyYWN0QWRkcmVzc2VzLFxyXG4gICAgICAgICcweDAnLFxyXG4gICAgICAgIHt9IGFzIFJmcUJsb2NrY2hhaW5VdGlscyxcclxuICAgICAgICB7fSBhcyBSZnFtRGJVdGlscyxcclxuICAgICAgICB7fSBhcyBQcm9kdWNlcixcclxuICAgICAgICB7fSBhcyBRdW90ZVNlcnZlckNsaWVudCxcclxuICAgICAgICBERUZBVUxUX01JTl9FWFBJUllfRFVSQVRJT05fTVMsXHJcbiAgICAgICAge30gYXMgQ2FjaGVDbGllbnQsXHJcbiAgICAgICAge30gYXMgUmZxTWFrZXJCYWxhbmNlQ2FjaGVTZXJ2aWNlLFxyXG4gICAgICAgIHt9IGFzIFJmcU1ha2VyTWFuYWdlcixcclxuICAgICAgICB7fSBhcyBUb2tlbk1ldGFkYXRhTWFuYWdlcixcclxuICAgICksXHJcbik7XHJcblxyXG5jb25zdCBtb2NrUmVkaXMgPSBqZXN0Lm1vY2tlZChuZXcgUmVkaXMoKSk7XHJcblxyXG5jb25zdCBnYXNsZXNzU3dhcFNlcnZpY2UgPSBuZXcgR2FzbGVzc1N3YXBTZXJ2aWNlKFxyXG4gICAgLyogY2hhaW5JZCAqLyAxMzM3LCAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOiBjdXN0b20tbm8tbWFnaWMtbnVtYmVyc1xyXG4gICAgbW9ja1JmcW1TZXJ2aWNlLFxyXG4gICAgbmV3IFVSTCgnaHR0cHM6Ly9ob2tpZXNwb3J0cy5jb20vcXVvdGUnKSxcclxuICAgIHt9IGFzIEF4aW9zSW5zdGFuY2UsXHJcbiAgICBtb2NrUmVkaXMsXHJcbiAgICBtb2NrRGJVdGlscyxcclxuICAgIG1vY2tCbG9ja2NoYWluVXRpbHMsXHJcbiAgICBtb2NrU3FzUHJvZHVjZXIsXHJcbik7XHJcblxyXG5kZXNjcmliZSgnR2FzbGVzc1N3YXBTZXJ2aWNlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgdGFrZXJQcml2YXRlS2V5ID0gJzB4ZDJjMjM0OWUxMDE3MGU0MjE5ZDlmZWJkMWM2NjNlYTVjNzMzNGY3OWMzOGQyNWY0ZjUyYzg1YWY3OTZjN2MwNSc7XHJcbiAgICBjb25zdCBtZXRhVHJhbnNhY3Rpb24gPSBuZXcgTWV0YVRyYW5zYWN0aW9uKHtcclxuICAgICAgICBjYWxsRGF0YTpcclxuICAgICAgICAgICAgJzB4NDE1NTY1YjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjc5MWJjYTFmMmRlNDY2MWVkODhhMzBjOTlhN2E5NDQ5YWE4NDE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzNjM1YzlhZGM1ZGVhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDE3YjllMmEzMDRmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDk0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDhhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDg2MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4NjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2MwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDM2MzVjOWFkYzVkZWEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjUxNzU2OTYzNmI1Mzc3NjE3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4NTcwYjU1Y2ZhYzE4ODU4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDM5ZDBiOWVmZDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGE1ZTA4MjljYWNlZDhmZmRkNGRlM2M0MzY5NmM1N2Y3ZDdhNjc4ZmYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI1MTc1Njk2MzZiNTM3NzYxNzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDJiODVhYWU3ZDYwYzQyYzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxYzk0ZWJlYzM3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhNWUwODI5Y2FjZWQ4ZmZkZDRkZTNjNDM2OTZjNTdmN2Q3YTY3OGZmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGQ1MDBiMWQ4ZThlZjMxZTIxYzk5ZDFkYjlhNjQ0NGQzYWRmMTI3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYjQ0NmY2NDZmNTYzMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MmI4NWFhZTdkNjBjNDJjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDFkYjUxNTZjMTMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDUzMzNlYjFlMzI1MjJmMTg5M2I3YzlmZWEzYzI2MzgwN2EwMmQ1NjEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTI1NTZlNjk3Mzc3NjE3MDU2MzMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxOTA1MjIwMTZmMDQ0YTA1YjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBiMDgyMTdhZjk0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBlNTkyNDI3YTBhZWNlOTJkZTNlZGVlMWYxOGUwMTU3YzA1ODYxNTY0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMjU1NmU2OTczNzc2MTcwNTYzMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBjODI5MTAwYjc4MjI0ZWY1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDU3MDE1NzM4OWYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGU1OTI0MjdhMGFlY2U5MmRlM2VkZWUxZjE4ZTAxNTdjMDU4NjE1NjQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MjdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAxZjQxYmZkNjcwMzdiNDJjZjczYWNmMjA0NzA2N2JkNGYyYzQ3ZDliZmQ2MDAwYmI4Mjc5MWJjYTFmMmRlNDY2MWVkODhhMzBjOTlhN2E5NDQ5YWE4NDE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBlMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4Njk1ODRjZDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDhjNjExZGVmYmQ4MzhhMTNkZTNhNTkyMzY5M2M1OGE3YzE4MDdjNjMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNWI4OWQ5NmI0ODYzMDY3YTZiJyxcclxuICAgICAgICBjaGFpbklkOiAxMzcsXHJcbiAgICAgICAgdmVyaWZ5aW5nQ29udHJhY3Q6ICcweGRlZjFjMGRlZDliZWM3ZjFhMTY3MDgxOTgzMzI0MGYwMjdiMjVlZmYnLFxyXG4gICAgICAgIGV4cGlyYXRpb25UaW1lU2Vjb25kczogbmV3IEJpZ051bWJlcignOTk5MDg2ODY3OScpLFxyXG4gICAgICAgIGZlZUFtb3VudDogbmV3IEJpZ051bWJlcigwKSxcclxuICAgICAgICBmZWVUb2tlbjogJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXHJcbiAgICAgICAgbWF4R2FzUHJpY2U6IG5ldyBCaWdOdW1iZXIoNDI5NDk2NzI5NiksXHJcbiAgICAgICAgbWluR2FzUHJpY2U6IG5ldyBCaWdOdW1iZXIoMSksXHJcbiAgICAgICAgLy8gJGVzbGludC1maXgtbWUgaHR0cHM6Ly9naXRodWIuY29tL3JoaW5vZGF2aWQvZXNsaW50LWZpeC1tZVxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbG9zcy1vZi1wcmVjaXNpb25cclxuICAgICAgICBzYWx0OiBuZXcgQmlnTnVtYmVyKDMyNjA2NjUwNzk0MjI0MTg5NjE0Nzk1NTEwNzI0MDExMTA2MjIwMDM1NjYwNDkwNTYwMTY5Nzc2OTg2NjA3MTg2NzA4MDgxNzAxMTQ2KSxcclxuICAgICAgICBzZW5kZXI6ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxyXG4gICAgICAgIHNpZ25lcjogJzB4NGM0MmE3MDY0MTBmMTE5MGY5N2QyNmZlM2M5OTljOTAwNzBhYTQwZicsXHJcbiAgICAgICAgdmFsdWU6IG5ldyBCaWdOdW1iZXIoMCksXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHByaWNlOiBGZXRjaEluZGljYXRpdmVRdW90ZVJlc3BvbnNlID0ge1xyXG4gICAgICAgIGFsbG93YW5jZVRhcmdldDogJzB4MTIzNDUnLFxyXG4gICAgICAgIGJ1eUFtb3VudDogbmV3IEJpZ051bWJlcigxODAwMDU0ODA1NDczKSxcclxuICAgICAgICBzZWxsQW1vdW50OiBuZXcgQmlnTnVtYmVyKDEwMDAwMDAwMDAwMDAwMDAwMDAwMDApLFxyXG4gICAgICAgIGJ1eVRva2VuQWRkcmVzczogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXHJcbiAgICAgICAgc2VsbFRva2VuQWRkcmVzczogJzB4N2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOScsXHJcbiAgICAgICAgZ2FzOiBuZXcgQmlnTnVtYmVyKDEwNDM0NTkpLFxyXG4gICAgICAgIHByaWNlOiBuZXcgQmlnTnVtYmVyKDE4MDAuMDU0ODA1KSxcclxuICAgIH07XHJcbiAgICAvLyAkZXNsaW50LWZpeC1tZSBodHRwczovL2dpdGh1Yi5jb20vcmhpbm9kYXZpZC9lc2xpbnQtZml4LW1lXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWxvc3Mtb2YtcHJlY2lzaW9uXHJcbiAgICBjb25zdCBleHBpcnkgPSBuZXcgQmlnTnVtYmVyKDk5OTk5OTk5OTk5OTk5OTkpOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lIGN1c3RvbS1uby1tYWdpYy1udW1iZXJzXHJcbiAgICBjb25zdCBvdGNPcmRlciA9IG5ldyBPdGNPcmRlcih7XHJcbiAgICAgICAgdHhPcmlnaW46ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxyXG4gICAgICAgIHRha2VyOiAnMHgxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExJyxcclxuICAgICAgICBtYWtlcjogJzB4MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMicsXHJcbiAgICAgICAgbWFrZXJUb2tlbjogJzB4MzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMycsXHJcbiAgICAgICAgdGFrZXJUb2tlbjogJzB4NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NCcsXHJcbiAgICAgICAgZXhwaXJ5QW5kTm9uY2U6IE90Y09yZGVyLmVuY29kZUV4cGlyeUFuZE5vbmNlKGV4cGlyeSwgWkVSTywgZXhwaXJ5KSxcclxuICAgICAgICBjaGFpbklkOiAxMzM3LFxyXG4gICAgICAgIHZlcmlmeWluZ0NvbnRyYWN0OiAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcclxuICAgIH0pO1xyXG4gICAgY29uc3Qgb3RjUXVvdGU6IE90Y09yZGVyUmZxbVF1b3RlUmVzcG9uc2UgPSB7XHJcbiAgICAgICAgYWxsb3dhbmNlVGFyZ2V0OiAnMHgxMjM0NScsXHJcbiAgICAgICAgYnV5QW1vdW50OiBuZXcgQmlnTnVtYmVyKDE4MDAwNTQ4MDU0NzMpLFxyXG4gICAgICAgIHNlbGxBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMTAwMDAwMDAwMDAwMDAwMDAwMDAwMCksXHJcbiAgICAgICAgYnV5VG9rZW5BZGRyZXNzOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcclxuICAgICAgICBzZWxsVG9rZW5BZGRyZXNzOiAnMHg3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5JyxcclxuICAgICAgICBnYXM6IG5ldyBCaWdOdW1iZXIoMTA0MzQ1OSksXHJcbiAgICAgICAgcHJpY2U6IG5ldyBCaWdOdW1iZXIoMTgwMC4wNTQ4MDUpLFxyXG4gICAgICAgIHR5cGU6IEdhc2xlc3NUeXBlcy5PdGNPcmRlcixcclxuICAgICAgICBvcmRlcjogb3RjT3JkZXIsXHJcbiAgICAgICAgb3JkZXJIYXNoOiBvdGNPcmRlci5nZXRIYXNoKCksXHJcbiAgICB9O1xyXG5cclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICAgIG1vY2tCbG9ja2NoYWluVXRpbHMuZ2V0RXhjaGFuZ2VQcm94eUFkZHJlc3MubW9ja1JldHVyblZhbHVlKCcweDEyMzQ1Jyk7XHJcbiAgICAgICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZXNjcmliZSgnZmV0Y2hQcmljZUFzeW5jJywgKCkgPT4ge1xyXG4gICAgICAgIGl0KCdnZXRzIGFuIFJGUSBwcmljZSBpZiBhdmFpbGFibGUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIG1vY2tSZnFtU2VydmljZS5mZXRjaEluZGljYXRpdmVRdW90ZUFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlT25jZShwcmljZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnYXNsZXNzU3dhcFNlcnZpY2UuZmV0Y2hQcmljZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogbmV3IEJpZ051bWJlcigxODAwMDU0ODA1NDczKSxcclxuICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcclxuICAgICAgICAgICAgICAgIGJ1eVRva2VuRGVjaW1hbHM6IDYsXHJcbiAgICAgICAgICAgICAgICBpbnRlZ3JhdG9yOiB7fSBhcyBJbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICAgICAgc2VsbFRva2VuOiAnMHg3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5JyxcclxuICAgICAgICAgICAgICAgIHNlbGxUb2tlbkRlY2ltYWxzOiAxOCxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0Py5saXF1aWRpdHlTb3VyY2UpLnRvRXF1YWwoJ3JmcScpO1xyXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0KS50b01hdGNoSW5saW5lU25hcHNob3QoYFxyXG4gICAgICAgICAgICAgICAgT2JqZWN0IHtcclxuICAgICAgICAgICAgICAgICAgXCJhbGxvd2FuY2VUYXJnZXRcIjogXCIweDEyMzQ1XCIsXHJcbiAgICAgICAgICAgICAgICAgIFwiYnV5QW1vdW50XCI6IFwiMTgwMDA1NDgwNTQ3M1wiLFxyXG4gICAgICAgICAgICAgICAgICBcImJ1eVRva2VuQWRkcmVzc1wiOiBcIjB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NFwiLFxyXG4gICAgICAgICAgICAgICAgICBcImdhc1wiOiBcIjEwNDM0NTlcIixcclxuICAgICAgICAgICAgICAgICAgXCJsaXF1aWRpdHlTb3VyY2VcIjogXCJyZnFcIixcclxuICAgICAgICAgICAgICAgICAgXCJwcmljZVwiOiBcIjE4MDAuMDU0ODA1XCIsXHJcbiAgICAgICAgICAgICAgICAgIFwic2VsbEFtb3VudFwiOiBcIjEwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcclxuICAgICAgICAgICAgICAgICAgXCJzZWxsVG9rZW5BZGRyZXNzXCI6IFwiMHg3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5XCIsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGApO1xyXG4gICAgICAgICAgICBleHBlY3QoZ2V0TWV0YVRyYW5zYWN0aW9uUXVvdGVBc3luY01vY2spLm5vdC50b0JlQ2FsbGVkKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdnZXRzIGFuIEFNTSBwcmljZSBpZiBubyBSRlEgbGlxdWlkaXR5IGlzIGF2YWlsYWJsZScsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgZ2V0TWV0YVRyYW5zYWN0aW9uUXVvdGVBc3luY01vY2subW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgbWV0YVRyYW5zYWN0aW9uLCBwcmljZSB9KTtcclxuICAgICAgICAgICAgbW9ja1JmcW1TZXJ2aWNlLmZldGNoSW5kaWNhdGl2ZVF1b3RlQXN5bmMubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG51bGwpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2FzbGVzc1N3YXBTZXJ2aWNlLmZldGNoUHJpY2VBc3luYyh7XHJcbiAgICAgICAgICAgICAgICBidXlBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMTgwMDA1NDgwNTQ3MyksXHJcbiAgICAgICAgICAgICAgICBidXlUb2tlbjogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXHJcbiAgICAgICAgICAgICAgICBidXlUb2tlbkRlY2ltYWxzOiA2LFxyXG4gICAgICAgICAgICAgICAgaW50ZWdyYXRvcjoge30gYXMgSW50ZWdyYXRvcixcclxuICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4N2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOScsXHJcbiAgICAgICAgICAgICAgICBzZWxsVG9rZW5EZWNpbWFsczogMTgsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdD8ubGlxdWlkaXR5U291cmNlKS50b0VxdWFsKCdhbW0nKTtcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaElubGluZVNuYXBzaG90KGBcclxuICAgICAgICAgICAgICAgIE9iamVjdCB7XHJcbiAgICAgICAgICAgICAgICAgIFwiYWxsb3dhbmNlVGFyZ2V0XCI6IFwiMHgxMjM0NVwiLFxyXG4gICAgICAgICAgICAgICAgICBcImJ1eUFtb3VudFwiOiBcIjE4MDAwNTQ4MDU0NzNcIixcclxuICAgICAgICAgICAgICAgICAgXCJidXlUb2tlbkFkZHJlc3NcIjogXCIweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzRcIixcclxuICAgICAgICAgICAgICAgICAgXCJnYXNcIjogXCIxMDQzNDU5XCIsXHJcbiAgICAgICAgICAgICAgICAgIFwibGlxdWlkaXR5U291cmNlXCI6IFwiYW1tXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwicHJpY2VcIjogXCIxODAwLjA1NDgwNVwiLFxyXG4gICAgICAgICAgICAgICAgICBcInNlbGxBbW91bnRcIjogXCIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwic2VsbFRva2VuQWRkcmVzc1wiOiBcIjB4N2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOVwiLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBgKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ2dldHMgYW4gQU1NIHByaWNlIGlmIFJGUSByZXF1ZXN0IHRocm93cycsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgZ2V0TWV0YVRyYW5zYWN0aW9uUXVvdGVBc3luY01vY2subW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgbWV0YVRyYW5zYWN0aW9uLCBwcmljZSB9KTtcclxuICAgICAgICAgICAgbW9ja1JmcW1TZXJ2aWNlLmZldGNoSW5kaWNhdGl2ZVF1b3RlQXN5bmMubW9ja0ltcGxlbWVudGF0aW9uT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JmcW0gcXVvdGUgdGhyZXcgdXAnKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnYXNsZXNzU3dhcFNlcnZpY2UuZmV0Y2hQcmljZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogbmV3IEJpZ051bWJlcigxODAwMDU0ODA1NDczKSxcclxuICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcclxuICAgICAgICAgICAgICAgIGJ1eVRva2VuRGVjaW1hbHM6IDYsXHJcbiAgICAgICAgICAgICAgICBpbnRlZ3JhdG9yOiB7fSBhcyBJbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICAgICAgc2VsbFRva2VuOiAnMHg3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5JyxcclxuICAgICAgICAgICAgICAgIHNlbGxUb2tlbkRlY2ltYWxzOiAxOCxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0Py5saXF1aWRpdHlTb3VyY2UpLnRvRXF1YWwoJ2FtbScpO1xyXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0KS50b01hdGNoSW5saW5lU25hcHNob3QoYFxyXG4gICAgICAgICAgICAgICAgT2JqZWN0IHtcclxuICAgICAgICAgICAgICAgICAgXCJhbGxvd2FuY2VUYXJnZXRcIjogXCIweDEyMzQ1XCIsXHJcbiAgICAgICAgICAgICAgICAgIFwiYnV5QW1vdW50XCI6IFwiMTgwMDA1NDgwNTQ3M1wiLFxyXG4gICAgICAgICAgICAgICAgICBcImJ1eVRva2VuQWRkcmVzc1wiOiBcIjB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NFwiLFxyXG4gICAgICAgICAgICAgICAgICBcImdhc1wiOiBcIjEwNDM0NTlcIixcclxuICAgICAgICAgICAgICAgICAgXCJsaXF1aWRpdHlTb3VyY2VcIjogXCJhbW1cIixcclxuICAgICAgICAgICAgICAgICAgXCJwcmljZVwiOiBcIjE4MDAuMDU0ODA1XCIsXHJcbiAgICAgICAgICAgICAgICAgIFwic2VsbEFtb3VudFwiOiBcIjEwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcclxuICAgICAgICAgICAgICAgICAgXCJzZWxsVG9rZW5BZGRyZXNzXCI6IFwiMHg3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5XCIsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgncmV0dXJucyBgbnVsbGAgaWYgbm8gbGlxdWlkaXR5IGlzIGF2YWlsYWJsZScsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgZ2V0TWV0YVRyYW5zYWN0aW9uUXVvdGVBc3luY01vY2subW9ja1Jlc29sdmVkVmFsdWVPbmNlKG51bGwpO1xyXG4gICAgICAgICAgICBtb2NrUmZxbVNlcnZpY2UuZmV0Y2hJbmRpY2F0aXZlUXVvdGVBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobnVsbCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnYXNsZXNzU3dhcFNlcnZpY2UuZmV0Y2hQcmljZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogbmV3IEJpZ051bWJlcigxODAwMDU0ODA1NDczKSxcclxuICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcclxuICAgICAgICAgICAgICAgIGJ1eVRva2VuRGVjaW1hbHM6IDYsXHJcbiAgICAgICAgICAgICAgICBpbnRlZ3JhdG9yOiB7fSBhcyBJbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICAgICAgc2VsbFRva2VuOiAnMHg3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5JyxcclxuICAgICAgICAgICAgICAgIHNlbGxUb2tlbkRlY2ltYWxzOiAxOCxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0KS50b0JlTnVsbCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgndGhyb3dzIGlmIEFNTSByZXF1ZXN0IHRocm93cyBhbmQgUkZRIGhhcyBubyBsaXF1aWRpdHkgLyByZXF1ZXN0IHRocm93cycsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgbW9ja1JmcW1TZXJ2aWNlLmZldGNoSW5kaWNhdGl2ZVF1b3RlQXN5bmMubW9ja0ltcGxlbWVudGF0aW9uT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JmcW0gcHJpY2UgdGhyZXcgdXAnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGdldE1ldGFUcmFuc2FjdGlvblF1b3RlQXN5bmNNb2NrLm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhbW0gcHJpY2UgdGhyZXcgdXAnKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBhd2FpdCBleHBlY3QoKCkgPT5cclxuICAgICAgICAgICAgICAgIGdhc2xlc3NTd2FwU2VydmljZS5mZXRjaFByaWNlQXN5bmMoe1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogbmV3IEJpZ051bWJlcigxODAwMDU0ODA1NDczKSxcclxuICAgICAgICAgICAgICAgICAgICBidXlUb2tlbjogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW5EZWNpbWFsczogNixcclxuICAgICAgICAgICAgICAgICAgICBpbnRlZ3JhdG9yOiB7fSBhcyBJbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4N2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOScsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsbFRva2VuRGVjaW1hbHM6IDE4LFxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICkucmVqZWN0cy50b1Rocm93KCdFcnJvciBmZXRjaGluZyBwcmljZScpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgndGhyb3dzIHZhbGlkYXRpb24gZXJyb3IgaWYgQU1NIHF1b3RlIHRocm93cyB2YWxpZGF0aW9uIGVycm9yJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBnZXRNZXRhVHJhbnNhY3Rpb25RdW90ZUFzeW5jTW9jay5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogJ3NlbGxBbW91bnQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBWYWxpZGF0aW9uRXJyb3JDb2Rlcy5GaWVsZEludmFsaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbjogJ3NlbGxBbW91bnQgdG9vIHNtYWxsJyxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtb2NrUmZxbVNlcnZpY2UuZmV0Y2hGaXJtUXVvdGVBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHF1b3RlOiBudWxsLCBxdW90ZVJlcG9ydElkOiBudWxsIH0pO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgZXhwZWN0KCgpID0+XHJcbiAgICAgICAgICAgICAgICBnYXNsZXNzU3dhcFNlcnZpY2UuZmV0Y2hQcmljZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgICAgICBidXlBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMTgwMDA1NDgwNTQ3MyksXHJcbiAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW46ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuRGVjaW1hbHM6IDYsXHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZWdyYXRvcjoge30gYXMgSW50ZWdyYXRvcixcclxuICAgICAgICAgICAgICAgICAgICBzZWxsVG9rZW46ICcweDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTknLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbkRlY2ltYWxzOiAxOCxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3M6ICcweHRha2VyJyxcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICApLnJlamVjdHMudG9UaHJvdyhWYWxpZGF0aW9uRXJyb3IpO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgZXhwZWN0KCgpID0+XHJcbiAgICAgICAgICAgICAgICBnYXNsZXNzU3dhcFNlcnZpY2UuZmV0Y2hQcmljZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxsQW1vdW50OiBuZXcgQmlnTnVtYmVyKDE4MDAwNTQ4MDU0NzMpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcclxuICAgICAgICAgICAgICAgICAgICBidXlUb2tlbkRlY2ltYWxzOiA2LFxyXG4gICAgICAgICAgICAgICAgICAgIGludGVncmF0b3I6IHt9IGFzIEludGVncmF0b3IsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsbFRva2VuOiAnMHg3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5JyxcclxuICAgICAgICAgICAgICAgICAgICBzZWxsVG9rZW5EZWNpbWFsczogMTgsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzOiAnMHh0YWtlcicsXHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgKS5yZWplY3RzLnRvVGhyb3coVmFsaWRhdGlvbkVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgZGVzY3JpYmUoJ2ZldGNoUXVvdGVBc3luYycsICgpID0+IHtcclxuICAgICAgICBpdCgnZ2V0cyBhbiBSRlEgcXVvdGUgaWYgYXZhaWxhYmxlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBtb2NrUmZxbVNlcnZpY2UuZmV0Y2hGaXJtUXVvdGVBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBxdW90ZTogb3RjUXVvdGUsIHF1b3RlUmVwb3J0SWQ6IG51bGwgfSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnYXNsZXNzU3dhcFNlcnZpY2UuZmV0Y2hRdW90ZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogbmV3IEJpZ051bWJlcigxODAwMDU0ODA1NDczKSxcclxuICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcclxuICAgICAgICAgICAgICAgIGJ1eVRva2VuRGVjaW1hbHM6IDYsXHJcbiAgICAgICAgICAgICAgICBpbnRlZ3JhdG9yOiB7fSBhcyBJbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICAgICAgc2VsbFRva2VuOiAnMHg3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5JyxcclxuICAgICAgICAgICAgICAgIHNlbGxUb2tlbkRlY2ltYWxzOiAxOCxcclxuICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzczogJzB4dGFrZXInLFxyXG4gICAgICAgICAgICAgICAgY2hlY2tBcHByb3ZhbDogZmFsc2UsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdCkubm90LnRvQmVOdWxsKCk7XHJcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQ/LnR5cGUpLnRvRXF1YWwoR2FzbGVzc1R5cGVzLk90Y09yZGVyKTtcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaElubGluZVNuYXBzaG90KGBcclxuICAgICAgICAgICAgICAgIE9iamVjdCB7XHJcbiAgICAgICAgICAgICAgICAgIFwiYWxsb3dhbmNlVGFyZ2V0XCI6IFwiMHgxMjM0NVwiLFxyXG4gICAgICAgICAgICAgICAgICBcImJ1eUFtb3VudFwiOiBcIjE4MDAwNTQ4MDU0NzNcIixcclxuICAgICAgICAgICAgICAgICAgXCJidXlUb2tlbkFkZHJlc3NcIjogXCIweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzRcIixcclxuICAgICAgICAgICAgICAgICAgXCJnYXNcIjogXCIxMDQzNDU5XCIsXHJcbiAgICAgICAgICAgICAgICAgIFwibGlxdWlkaXR5U291cmNlXCI6IFwicmZxXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwib3JkZXJcIjogT3RjT3JkZXIge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiY2hhaW5JZFwiOiAxMzM3LFxyXG4gICAgICAgICAgICAgICAgICAgIFwiZXhwaXJ5XCI6IFwiMTAwMDAwMDAwMDAwMDAwMDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcImV4cGlyeUFuZE5vbmNlXCI6IFwiNjI3NzEwMTczNTM4NjY4MDc2MzgzNTc4OTQyMzIwNzY2NjQxNjEwMjM1NTQ0NDQ2NDAzNDUxMjg5NzAwMDAwMDAwMDAwMDAwMDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm1ha2VyXCI6IFwiMHgyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJtYWtlckFtb3VudFwiOiBcIjBcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm1ha2VyVG9rZW5cIjogXCIweDMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzNcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5vbmNlXCI6IFwiMTAwMDAwMDAwMDAwMDAwMDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5vbmNlQnVja2V0XCI6IFwiMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidGFrZXJcIjogXCIweDExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTFcIixcclxuICAgICAgICAgICAgICAgICAgICBcInRha2VyQW1vdW50XCI6IFwiMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidGFrZXJUb2tlblwiOiBcIjB4NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHhPcmlnaW5cIjogXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcInZlcmlmeWluZ0NvbnRyYWN0XCI6IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgIFwib3JkZXJIYXNoXCI6IFwiMHg2OWI3ODQwODczODdkMzdlMjM2MWE0MDE0NjQyMGE1YTY4YjA4Mzc1MjM4YTViYTAzMjlmNjEyZDU2NzNiMmVhXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwicHJpY2VcIjogXCIxODAwLjA1NDgwNVwiLFxyXG4gICAgICAgICAgICAgICAgICBcInNlbGxBbW91bnRcIjogXCIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwic2VsbFRva2VuQWRkcmVzc1wiOiBcIjB4N2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOVwiLFxyXG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvdGNcIixcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYCk7XHJcbiAgICAgICAgICAgIGV4cGVjdChnZXRNZXRhVHJhbnNhY3Rpb25RdW90ZUFzeW5jTW9jaykubm90LnRvQmVDYWxsZWQoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ2dldHMgYW4gQU1NIHF1b3RlIGlmIG5vIFJGUSBsaXF1aWRpdHkgaXMgYXZhaWxhYmxlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBnZXRNZXRhVHJhbnNhY3Rpb25RdW90ZUFzeW5jTW9jay5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBtZXRhVHJhbnNhY3Rpb24sIHByaWNlIH0pO1xyXG4gICAgICAgICAgICBtb2NrUmZxbVNlcnZpY2UuZmV0Y2hGaXJtUXVvdGVBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBxdW90ZTogbnVsbCwgcXVvdGVSZXBvcnRJZDogbnVsbCB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdhc2xlc3NTd2FwU2VydmljZS5mZXRjaFF1b3RlQXN5bmMoe1xyXG4gICAgICAgICAgICAgICAgYnV5QW1vdW50OiBuZXcgQmlnTnVtYmVyKDE4MDAwNTQ4MDU0NzMpLFxyXG4gICAgICAgICAgICAgICAgYnV5VG9rZW46ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxyXG4gICAgICAgICAgICAgICAgYnV5VG9rZW5EZWNpbWFsczogNixcclxuICAgICAgICAgICAgICAgIGludGVncmF0b3I6IHt9IGFzIEludGVncmF0b3IsXHJcbiAgICAgICAgICAgICAgICBzZWxsVG9rZW46ICcweDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTknLFxyXG4gICAgICAgICAgICAgICAgc2VsbFRva2VuRGVjaW1hbHM6IDE4LFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzOiAnMHh0YWtlcicsXHJcbiAgICAgICAgICAgICAgICBjaGVja0FwcHJvdmFsOiBmYWxzZSxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0KS5ub3QudG9CZU51bGwoKTtcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdD8udHlwZSkudG9FcXVhbChHYXNsZXNzVHlwZXMuTWV0YVRyYW5zYWN0aW9uKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdD8udHlwZSAhPT0gR2FzbGVzc1R5cGVzLk1ldGFUcmFuc2FjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgLy8gUmVmaW5lIHR5cGUgZm9yIGZ1cnRoZXIgYXNzZXJ0aW9uc1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXN1bHQgc2hvdWxkIGJlIGEgbWV0YSB0cmFuc2FjdGlvbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQubWV0YVRyYW5zYWN0aW9uLmdldEhhc2goKSkudG9FcXVhbChtZXRhVHJhbnNhY3Rpb24uZ2V0SGFzaCgpKTtcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaElubGluZVNuYXBzaG90KGBcclxuICAgICAgICAgICAgICAgIE9iamVjdCB7XHJcbiAgICAgICAgICAgICAgICAgIFwiYWxsb3dhbmNlVGFyZ2V0XCI6IFwiMHgxMjM0NVwiLFxyXG4gICAgICAgICAgICAgICAgICBcImFwcHJvdmFsXCI6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgXCJidXlBbW91bnRcIjogXCIxODAwMDU0ODA1NDczXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwiYnV5VG9rZW5BZGRyZXNzXCI6IFwiMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0XCIsXHJcbiAgICAgICAgICAgICAgICAgIFwiZ2FzXCI6IFwiMTA0MzQ1OVwiLFxyXG4gICAgICAgICAgICAgICAgICBcImxpcXVpZGl0eVNvdXJjZVwiOiBcImFtbVwiLFxyXG4gICAgICAgICAgICAgICAgICBcIm1ldGFUcmFuc2FjdGlvblwiOiBNZXRhVHJhbnNhY3Rpb24ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiY2FsbERhdGFcIjogXCIweDQxNTU2NWIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzYzNWM5YWRjNWRlYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxN2I5ZTJhMzA0ZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA5NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4YTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4NjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzNjM1YzlhZGM1ZGVhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDM0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI1MTc1Njk2MzZiNTM3NzYxNzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODU3MGI1NWNmYWMxODg1ODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzOWQwYjllZmQxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhNWUwODI5Y2FjZWQ4ZmZkZDRkZTNjNDM2OTZjNTdmN2Q3YTY3OGZmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjc5MWJjYTFmMmRlNDY2MWVkODhhMzBjOTlhN2E5NDQ5YWE4NDE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNTE3NTY5NjM2YjUzNzc2MTcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQyYjg1YWFlN2Q2MGM0MmMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWM5NGViZWMzNzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTVlMDgyOWNhY2VkOGZmZGQ0ZGUzYzQzNjk2YzU3ZjdkN2E2NzhmZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBkNTAwYjFkOGU4ZWYzMWUyMWM5OWQxZGI5YTY0NDRkM2FkZjEyNzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGI0NDZmNjQ2ZjU2MzIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDJiODVhYWU3ZDYwYzQyYzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZGI1MTU2YzEzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MzMzZWIxZTMyNTIyZjE4OTNiN2M5ZmVhM2MyNjM4MDdhMDJkNTYxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEyNTU2ZTY5NzM3NzYxNzA1NjMzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTkwNTIyMDE2ZjA0NGEwNWIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYjA4MjE3YWY5NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZTU5MjQyN2EwYWVjZTkyZGUzZWRlZTFmMThlMDE1N2MwNTg2MTU2NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTI1NTZlNjk3Mzc3NjE3MDU2MzMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYzgyOTEwMGI3ODIyNGVmNTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1NzAxNTczODlmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBlNTkyNDI3YTBhZWNlOTJkZTNlZGVlMWYxOGUwMTU3YzA1ODYxNTY0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDI3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMWY0MWJmZDY3MDM3YjQyY2Y3M2FjZjIwNDcwNjdiZDRmMmM0N2Q5YmZkNjAwMGJiODI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODY5NTg0Y2QwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4YzYxMWRlZmJkODM4YTEzZGUzYTU5MjM2OTNjNThhN2MxODA3YzYzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDViODlkOTZiNDg2MzA2N2E2YlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2hhaW5JZFwiOiAxMzcsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJleHBpcmF0aW9uVGltZVNlY29uZHNcIjogXCI5OTkwODY4Njc5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJmZWVBbW91bnRcIjogXCIwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJmZWVUb2tlblwiOiBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibWF4R2FzUHJpY2VcIjogXCI0Mjk0OTY3Mjk2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJtaW5HYXNQcmljZVwiOiBcIjFcIixcclxuICAgICAgICAgICAgICAgICAgICBcInNhbHRcIjogXCIzMjYwNjY1MDc5NDIyNDE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwic2VuZGVyXCI6IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJzaWduZXJcIjogXCIweDRjNDJhNzA2NDEwZjExOTBmOTdkMjZmZTNjOTk5YzkwMDcwYWE0MGZcIixcclxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwiMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmVyaWZ5aW5nQ29udHJhY3RcIjogXCIweGRlZjFjMGRlZDliZWM3ZjFhMTY3MDgxOTgzMzI0MGYwMjdiMjVlZmZcIixcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgXCJtZXRhVHJhbnNhY3Rpb25IYXNoXCI6IFwiMHhkZTVhMTE5ODNlZGQwMTIwNDdkZDMxMDc1MzJmMDA3YTczYWU0ODhiZmIzNTRmMzViOGE0MDU4MGUyYTc3NWExXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwicHJpY2VcIjogXCIxODAwLjA1NDgwNVwiLFxyXG4gICAgICAgICAgICAgICAgICBcInNlbGxBbW91bnRcIjogXCIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwic2VsbFRva2VuQWRkcmVzc1wiOiBcIjB4N2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOVwiLFxyXG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJtZXRhdHJhbnNhY3Rpb25cIixcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCd0aHJvd3MgdmFsaWRhdGlvbiBlcnJvciBpZiBBTU0gcXVvdGUgdGhyb3dzIHZhbGlkYXRpb24gZXJyb3InLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGdldE1ldGFUcmFuc2FjdGlvblF1b3RlQXN5bmNNb2NrLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiAnc2VsbEFtb3VudCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFZhbGlkYXRpb25FcnJvckNvZGVzLkZpZWxkSW52YWxpZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uOiAnc2VsbEFtb3VudCB0b28gc21hbGwnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1vY2tSZnFtU2VydmljZS5mZXRjaEZpcm1RdW90ZUFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlKHsgcXVvdGU6IG51bGwsIHF1b3RlUmVwb3J0SWQ6IG51bGwgfSk7XHJcblxyXG4gICAgICAgICAgICBhd2FpdCBleHBlY3QoKCkgPT5cclxuICAgICAgICAgICAgICAgIGdhc2xlc3NTd2FwU2VydmljZS5mZXRjaFF1b3RlQXN5bmMoe1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogbmV3IEJpZ051bWJlcigxODAwMDU0ODA1NDczKSxcclxuICAgICAgICAgICAgICAgICAgICBidXlUb2tlbjogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW5EZWNpbWFsczogNixcclxuICAgICAgICAgICAgICAgICAgICBpbnRlZ3JhdG9yOiB7fSBhcyBJbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4N2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOScsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsbFRva2VuRGVjaW1hbHM6IDE4LFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzczogJzB4dGFrZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQXBwcm92YWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICkucmVqZWN0cy50b1Rocm93KFZhbGlkYXRpb25FcnJvcik7XHJcblxyXG4gICAgICAgICAgICBhd2FpdCBleHBlY3QoKCkgPT5cclxuICAgICAgICAgICAgICAgIGdhc2xlc3NTd2FwU2VydmljZS5mZXRjaFF1b3RlQXN5bmMoe1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGxBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMTgwMDA1NDgwNTQ3MyksXHJcbiAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW46ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuRGVjaW1hbHM6IDYsXHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZWdyYXRvcjoge30gYXMgSW50ZWdyYXRvcixcclxuICAgICAgICAgICAgICAgICAgICBzZWxsVG9rZW46ICcweDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTknLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbkRlY2ltYWxzOiAxOCxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3M6ICcweHRha2VyJyxcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0FwcHJvdmFsOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICApLnJlamVjdHMudG9UaHJvdyhWYWxpZGF0aW9uRXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnYWRkcyBhbiBhZmZpbGlhdGUgYWRkcmVzcyBpZiBvbmUgaXMgaW5jbHVkZWQgaW4gdGhlIGludGVncmF0b3IgY29uZmlndXJhdGlvbiBidXQgbm90IGluIHRoZSBxdW90ZSByZXF1ZXN0JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBnZXRNZXRhVHJhbnNhY3Rpb25RdW90ZUFzeW5jTW9jay5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBtZXRhVHJhbnNhY3Rpb24sIHByaWNlIH0pO1xyXG4gICAgICAgICAgICBtb2NrUmZxbVNlcnZpY2UuZmV0Y2hGaXJtUXVvdGVBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBxdW90ZTogbnVsbCwgcXVvdGVSZXBvcnRJZDogbnVsbCB9KTtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IGdhc2xlc3NTd2FwU2VydmljZS5mZXRjaFF1b3RlQXN5bmMoe1xyXG4gICAgICAgICAgICAgICAgYnV5QW1vdW50OiBuZXcgQmlnTnVtYmVyKDE4MDAwNTQ4MDU0NzMpLFxyXG4gICAgICAgICAgICAgICAgYnV5VG9rZW46ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxyXG4gICAgICAgICAgICAgICAgYnV5VG9rZW5EZWNpbWFsczogNixcclxuICAgICAgICAgICAgICAgIGludGVncmF0b3I6IHsgYWZmaWxpYXRlQWRkcmVzczogJzB4YWZmaWxpYXRlQWRkcmVzcycgfSBhcyBJbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICAgICAgc2VsbFRva2VuOiAnMHg3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5JyxcclxuICAgICAgICAgICAgICAgIHNlbGxUb2tlbkRlY2ltYWxzOiAxOCxcclxuICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzczogJzB4dGFrZXInLFxyXG4gICAgICAgICAgICAgICAgY2hlY2tBcHByb3ZhbDogZmFsc2UsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBleHBlY3QoZ2V0TWV0YVRyYW5zYWN0aW9uUXVvdGVBc3luY01vY2subW9jay5jYWxsc1swXVsvKiBwYXJhbXMgKi8gMl1bJ2FmZmlsaWF0ZUFkZHJlc3MnXSkudG9FcXVhbChcclxuICAgICAgICAgICAgICAgICcweGFmZmlsaWF0ZUFkZHJlc3MnLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgndXNlcyB0aGUgYWZmaWxpYXRlIGFkZHJlc3MgaW4gdGhlIHF1b3RlIHJlcXVlc3QgZXZlbiBpZiBvbmUgaXMgcHJlc2VudCBpbiBpbnRlZ3JhdG9yIGNvbmZpZ3VyYXRpb24nLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGdldE1ldGFUcmFuc2FjdGlvblF1b3RlQXN5bmNNb2NrLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IG1ldGFUcmFuc2FjdGlvbiwgcHJpY2UgfSk7XHJcbiAgICAgICAgICAgIG1vY2tSZnFtU2VydmljZS5mZXRjaEZpcm1RdW90ZUFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IHF1b3RlOiBudWxsLCBxdW90ZVJlcG9ydElkOiBudWxsIH0pO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgZ2FzbGVzc1N3YXBTZXJ2aWNlLmZldGNoUXVvdGVBc3luYyh7XHJcbiAgICAgICAgICAgICAgICBhZmZpbGlhdGVBZGRyZXNzOiAnMHhhZmZpbGlhdGVBZGRyZXNzU2hvdWxkVXNlJyxcclxuICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogbmV3IEJpZ051bWJlcigxODAwMDU0ODA1NDczKSxcclxuICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcclxuICAgICAgICAgICAgICAgIGJ1eVRva2VuRGVjaW1hbHM6IDYsXHJcbiAgICAgICAgICAgICAgICBpbnRlZ3JhdG9yOiB7IGFmZmlsaWF0ZUFkZHJlc3M6ICcweGFmZmlsaWF0ZUFkZHJlc3NTaG91bGRudFVzZScgfSBhcyBJbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICAgICAgc2VsbFRva2VuOiAnMHg3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5JyxcclxuICAgICAgICAgICAgICAgIHNlbGxUb2tlbkRlY2ltYWxzOiAxOCxcclxuICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzczogJzB4dGFrZXInLFxyXG4gICAgICAgICAgICAgICAgY2hlY2tBcHByb3ZhbDogZmFsc2UsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBleHBlY3QoZ2V0TWV0YVRyYW5zYWN0aW9uUXVvdGVBc3luY01vY2subW9jay5jYWxsc1swXVsvKiBwYXJhbXMgKi8gMl1bJ2FmZmlsaWF0ZUFkZHJlc3MnXSkudG9FcXVhbChcclxuICAgICAgICAgICAgICAgICcweGFmZmlsaWF0ZUFkZHJlc3NTaG91bGRVc2UnLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgncmV0dXJucyBgbnVsbGAgaWYgbm8gbGlxdWlkaXR5IGlzIGF2YWlsYWJsZScsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgbW9ja1JmcW1TZXJ2aWNlLmZldGNoRmlybVF1b3RlQXN5bmMubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgcXVvdGU6IG51bGwsIHF1b3RlUmVwb3J0SWQ6IG51bGwgfSk7XHJcbiAgICAgICAgICAgIGdldE1ldGFUcmFuc2FjdGlvblF1b3RlQXN5bmNNb2NrLm1vY2tSZXNvbHZlZFZhbHVlT25jZShudWxsKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdhc2xlc3NTd2FwU2VydmljZS5mZXRjaFF1b3RlQXN5bmMoe1xyXG4gICAgICAgICAgICAgICAgYnV5QW1vdW50OiBuZXcgQmlnTnVtYmVyKDE4MDAwNTQ4MDU0NzMpLFxyXG4gICAgICAgICAgICAgICAgYnV5VG9rZW46ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxyXG4gICAgICAgICAgICAgICAgYnV5VG9rZW5EZWNpbWFsczogNixcclxuICAgICAgICAgICAgICAgIGludGVncmF0b3I6IHt9IGFzIEludGVncmF0b3IsXHJcbiAgICAgICAgICAgICAgICBzZWxsVG9rZW46ICcweDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTknLFxyXG4gICAgICAgICAgICAgICAgc2VsbFRva2VuRGVjaW1hbHM6IDE4LFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzOiAnMHh0YWtlcicsXHJcbiAgICAgICAgICAgICAgICBjaGVja0FwcHJvdmFsOiBmYWxzZSxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0KS50b0JlTnVsbCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgndGhyb3dzIGlmIEFNTSByZXF1ZXN0IHRocm93cyBhbmQgUkZRIGhhcyBubyBsaXF1aWRpdHkgLyByZXF1ZXN0IHRocm93cycsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgbW9ja1JmcW1TZXJ2aWNlLmZldGNoRmlybVF1b3RlQXN5bmMubW9ja0ltcGxlbWVudGF0aW9uT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JmcW0gcHJpY2UgdGhyZXcgdXAnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGdldE1ldGFUcmFuc2FjdGlvblF1b3RlQXN5bmNNb2NrLm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhbW0gcHJpY2UgdGhyZXcgdXAnKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBhd2FpdCBleHBlY3QoKCkgPT5cclxuICAgICAgICAgICAgICAgIGdhc2xlc3NTd2FwU2VydmljZS5mZXRjaFF1b3RlQXN5bmMoe1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogbmV3IEJpZ051bWJlcigxODAwMDU0ODA1NDczKSxcclxuICAgICAgICAgICAgICAgICAgICBidXlUb2tlbjogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW5EZWNpbWFsczogNixcclxuICAgICAgICAgICAgICAgICAgICBpbnRlZ3JhdG9yOiB7fSBhcyBJbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4N2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOScsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsbFRva2VuRGVjaW1hbHM6IDE4LFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzczogJzB4dGFrZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQXBwcm92YWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICkucmVqZWN0cy50b1Rocm93KCdFcnJvciBmZXRjaGluZyBxdW90ZScpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc3RvcmVzIGEgbWV0YXRyYW5zYWN0aW9uIGhhc2gnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGdldE1ldGFUcmFuc2FjdGlvblF1b3RlQXN5bmNNb2NrLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IG1ldGFUcmFuc2FjdGlvbiwgcHJpY2UgfSk7XHJcbiAgICAgICAgICAgIG1vY2tSZnFtU2VydmljZS5mZXRjaEZpcm1RdW90ZUFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IHF1b3RlOiBudWxsLCBxdW90ZVJlcG9ydElkOiBudWxsIH0pO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgZ2FzbGVzc1N3YXBTZXJ2aWNlLmZldGNoUXVvdGVBc3luYyh7XHJcbiAgICAgICAgICAgICAgICBidXlBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMTgwMDA1NDgwNTQ3MyksXHJcbiAgICAgICAgICAgICAgICBidXlUb2tlbjogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXHJcbiAgICAgICAgICAgICAgICBidXlUb2tlbkRlY2ltYWxzOiA2LFxyXG4gICAgICAgICAgICAgICAgaW50ZWdyYXRvcjoge30gYXMgSW50ZWdyYXRvcixcclxuICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4N2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOScsXHJcbiAgICAgICAgICAgICAgICBzZWxsVG9rZW5EZWNpbWFsczogMTgsXHJcbiAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3M6ICcweHRha2VyJyxcclxuICAgICAgICAgICAgICAgIGNoZWNrQXBwcm92YWw6IGZhbHNlLFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGV4cGVjdChtb2NrUmVkaXMuc2V0KS50b0JlQ2FsbGVkV2l0aChgbWV0YVRyYW5zYWN0aW9uSGFzaC4ke21ldGFUcmFuc2FjdGlvbi5nZXRIYXNoKCl9YCwgMCwgJ0VYJywgOTAwKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ2dldHMgdGhlIGFwcHJvdmFsIG9iamVjdCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYXBwcm92YWxSZXNwb25zZTogQXBwcm92YWxSZXNwb25zZSA9IHtcclxuICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGdldE1ldGFUcmFuc2FjdGlvblF1b3RlQXN5bmNNb2NrLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IG1ldGFUcmFuc2FjdGlvbiwgcHJpY2UgfSk7XHJcbiAgICAgICAgICAgIG1vY2tSZnFtU2VydmljZS5mZXRjaEZpcm1RdW90ZUFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IHF1b3RlOiBudWxsLCBxdW90ZVJlcG9ydElkOiBudWxsIH0pO1xyXG4gICAgICAgICAgICBtb2NrUmZxbVNlcnZpY2UuZ2V0R2FzbGVzc0FwcHJvdmFsUmVzcG9uc2VBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoYXBwcm92YWxSZXNwb25zZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnYXNsZXNzU3dhcFNlcnZpY2UuZmV0Y2hRdW90ZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogbmV3IEJpZ051bWJlcigxODAwMDU0ODA1NDczKSxcclxuICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcclxuICAgICAgICAgICAgICAgIGJ1eVRva2VuRGVjaW1hbHM6IDYsXHJcbiAgICAgICAgICAgICAgICBpbnRlZ3JhdG9yOiB7fSBhcyBJbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICAgICAgc2VsbFRva2VuOiAnMHg3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5JyxcclxuICAgICAgICAgICAgICAgIHNlbGxUb2tlbkRlY2ltYWxzOiAxOCxcclxuICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzczogJzB4dGFrZXInLFxyXG4gICAgICAgICAgICAgICAgY2hlY2tBcHByb3ZhbDogdHJ1ZSxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0Py5hcHByb3ZhbCkubm90LnRvQmVVbmRlZmluZWQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgZGVzY3JpYmUoJ3Byb2Nlc3NTdWJtaXRBc3luYycsICgpID0+IHtcclxuICAgICAgICBpdCgnZmFpbHMgaWYgdGhlIG1ldGF0cmFuc2FjdGlvbiBpcyBleHBpcmVkJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBleHBpcmVkTWV0YVRyYW5zYWN0aW9uID0gbmV3IE1ldGFUcmFuc2FjdGlvbih7XHJcbiAgICAgICAgICAgICAgICBjYWxsRGF0YTpcclxuICAgICAgICAgICAgICAgICAgICAnMHg0MTU1NjViMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDM2MzVjOWFkYzVkZWEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTdiOWUyYTMwNGYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOTQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjc5MWJjYTFmMmRlNDY2MWVkODhhMzBjOTlhN2E5NDQ5YWE4NDE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDg2MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3YzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzYzNWM5YWRjNWRlYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDFlMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDUyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNTE3NTY5NjM2YjUzNzc2MTcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDg1NzBiNTVjZmFjMTg4NTgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzlkMGI5ZWZkMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTVlMDgyOWNhY2VkOGZmZGQ0ZGUzYzQzNjk2YzU3ZjdkN2E2NzhmZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjUxNzU2OTYzNmI1Mzc3NjE3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MmI4NWFhZTdkNjBjNDJjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDFjOTRlYmVjMzcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGE1ZTA4MjljYWNlZDhmZmRkNGRlM2M0MzY5NmM1N2Y3ZDdhNjc4ZmYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZDUwMGIxZDhlOGVmMzFlMjFjOTlkMWRiOWE2NDQ0ZDNhZGYxMjcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjc5MWJjYTFmMmRlNDY2MWVkODhhMzBjOTlhN2E5NDQ5YWE4NDE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBiNDQ2ZjY0NmY1NjMyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQyYjg1YWFlN2Q2MGM0MmMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWRiNTE1NmMxMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTMzM2ViMWUzMjUyMmYxODkzYjdjOWZlYTNjMjYzODA3YTAyZDU2MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMjU1NmU2OTczNzc2MTcwNTYzMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDE5MDUyMjAxNmYwNDRhMDViMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGIwODIxN2FmOTQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA2MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGU1OTI0MjdhMGFlY2U5MmRlM2VkZWUxZjE4ZTAxNTdjMDU4NjE1NjQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEyNTU2ZTY5NzM3NzYxNzA1NjMzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGM4MjkxMDBiNzgyMjRlZjUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTcwMTU3Mzg5ZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZTU5MjQyN2EwYWVjZTkyZGUzZWRlZTFmMThlMDE1N2MwNTg2MTU2NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQyN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDFmNDFiZmQ2NzAzN2I0MmNmNzNhY2YyMDQ3MDY3YmQ0ZjJjNDdkOWJmZDYwMDBiYjgyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDg2OTU4NGNkMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOGM2MTFkZWZiZDgzOGExM2RlM2E1OTIzNjkzYzU4YTdjMTgwN2M2MzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1Yjg5ZDk2YjQ4NjMwNjdhNmInLFxyXG4gICAgICAgICAgICAgICAgY2hhaW5JZDogMTM3LFxyXG4gICAgICAgICAgICAgICAgdmVyaWZ5aW5nQ29udHJhY3Q6ICcweGRlZjFjMGRlZDliZWM3ZjFhMTY3MDgxOTgzMzI0MGYwMjdiMjVlZmYnLFxyXG4gICAgICAgICAgICAgICAgZXhwaXJhdGlvblRpbWVTZWNvbmRzOiBuZXcgQmlnTnVtYmVyKCc0MjAnKSxcclxuICAgICAgICAgICAgICAgIGZlZUFtb3VudDogbmV3IEJpZ051bWJlcigwKSxcclxuICAgICAgICAgICAgICAgIGZlZVRva2VuOiAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcclxuICAgICAgICAgICAgICAgIG1heEdhc1ByaWNlOiBuZXcgQmlnTnVtYmVyKDQyOTQ5NjcyOTYpLFxyXG4gICAgICAgICAgICAgICAgbWluR2FzUHJpY2U6IG5ldyBCaWdOdW1iZXIoMSksXHJcbiAgICAgICAgICAgICAgICAvLyAkZXNsaW50LWZpeC1tZSBodHRwczovL2dpdGh1Yi5jb20vcmhpbm9kYXZpZC9lc2xpbnQtZml4LW1lXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWxvc3Mtb2YtcHJlY2lzaW9uXHJcbiAgICAgICAgICAgICAgICBzYWx0OiBuZXcgQmlnTnVtYmVyKDMyNjA2NjUwNzk0MjI0MTg5NjE0Nzk1NTEwNzI0MDExMTA2MjIwMDM1NjYwNDkwNTYwMTY5Nzc2OTg2NjA3MTg2NzA4MDgxNzAxMTQ2KSxcclxuICAgICAgICAgICAgICAgIHNlbmRlcjogJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXHJcbiAgICAgICAgICAgICAgICBzaWduZXI6ICcweDRDNDJhNzA2NDEwRjExOTBmOTdEMjZGZTNjOTk5YzkwMDcwYWE0MEYnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBCaWdOdW1iZXIoMCksXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgZXhwZWN0KCgpID0+XHJcbiAgICAgICAgICAgICAgICBnYXNsZXNzU3dhcFNlcnZpY2UucHJvY2Vzc1N1Ym1pdEFzeW5jKFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAga2luZDogR2FzbGVzc1R5cGVzLk1ldGFUcmFuc2FjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhZGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFUcmFuc2FjdGlvbjogZXhwaXJlZE1ldGFUcmFuc2FjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEdhc2xlc3NUeXBlcy5NZXRhVHJhbnNhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmVUeXBlOiBTaWduYXR1cmVUeXBlLkV0aFNpZ24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdjogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJ2ludGVncmF0b3JJZCcsXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICApLnJlamVjdHMudG9UaHJvd0Vycm9yKFZhbGlkYXRpb25FcnJvcik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KFwiZmFpbHMgaWYgdGhlIG1ldGF0cmFuc2FjdGlvbiBoYXNoIGRvZXNuJ3QgZXhpc3QgaW4gdGhlIHJlZGlzIHN0b3JlXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgbW9ja1JlZGlzLmdldCA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobnVsbCk7XHJcbiAgICAgICAgICAgIGF3YWl0IGV4cGVjdCgoKSA9PlxyXG4gICAgICAgICAgICAgICAgZ2FzbGVzc1N3YXBTZXJ2aWNlLnByb2Nlc3NTdWJtaXRBc3luYyhcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6IEdhc2xlc3NUeXBlcy5NZXRhVHJhbnNhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWRlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhVHJhbnNhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBHYXNsZXNzVHlwZXMuTWV0YVRyYW5zYWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcjogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlVHlwZTogU2lnbmF0dXJlVHlwZS5FdGhTaWduLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHY6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ2ludGVncmF0b3JJZCcsXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICApLnJlamVjdHMudG9UaHJvd0Vycm9yKCdNZXRhVHJhbnNhY3Rpb24gaGFzaCBub3QgZm91bmQnKTtcclxuICAgICAgICAgICAgZXhwZWN0KG1vY2tSZWRpcy5nZXQpLnRvQmVDYWxsZWRXaXRoKGBtZXRhVHJhbnNhY3Rpb25IYXNoLiR7bWV0YVRyYW5zYWN0aW9uLmdldEhhc2goKX1gKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ2ZhaWxzIGlmIHRoZXJlIGlzIGFscmVhZHkgYSBwZW5kaW5nIHRyYW5zYWN0aW9uIGZvciB0aGUgdGFrZXIvdGFrZXIgdG9rZW4nLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIG1vY2tSZWRpcy5nZXQgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHt9KTtcclxuICAgICAgICAgICAgbW9ja0RiVXRpbHMuZmluZE1ldGFUcmFuc2FjdGlvbkpvYnNXaXRoU3RhdHVzZXNBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoW1xyXG4gICAgICAgICAgICAgICAgbmV3IE1ldGFUcmFuc2FjdGlvbkpvYkVudGl0eSh7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5JZDogMTMzNyxcclxuICAgICAgICAgICAgICAgICAgICBleHBpcnk6IG1ldGFUcmFuc2FjdGlvbi5leHBpcmF0aW9uVGltZVNlY29uZHMsXHJcbiAgICAgICAgICAgICAgICAgICAgZmVlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogbWV0YVRyYW5zYWN0aW9uLmZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46IG1ldGFUcmFuc2FjdGlvbi5mZWVUb2tlbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2ZpeGVkJyxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0VG9rZW46IHByaWNlLnNlbGxUb2tlbkFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRUb2tlbkFtb3VudDogcHJpY2Uuc2VsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICBpbnRlZ3JhdG9ySWQ6ICdpbnRlZ3JhdG9yLWlkJyxcclxuICAgICAgICAgICAgICAgICAgICBtZXRhVHJhbnNhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgbWV0YVRyYW5zYWN0aW9uSGFzaDogJzB4b3RoZXJoYXNoJyxcclxuICAgICAgICAgICAgICAgICAgICBtaW5PdXRwdXRUb2tlbkFtb3VudDogbmV3IEJpZ051bWJlcigwKSxcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRUb2tlbjogcHJpY2UuYnV5VG9rZW5BZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogUmZxbUpvYlN0YXR1cy5QZW5kaW5nUHJvY2Vzc2luZyxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3M6IG1ldGFUcmFuc2FjdGlvbi5zaWduZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJTaWduYXR1cmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcjogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHM6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmVUeXBlOiBTaWduYXR1cmVUeXBlLkV0aFNpZ24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHY6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgYXdhaXQgZXhwZWN0KCgpID0+XHJcbiAgICAgICAgICAgICAgICBnYXNsZXNzU3dhcFNlcnZpY2UucHJvY2Vzc1N1Ym1pdEFzeW5jKFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAga2luZDogR2FzbGVzc1R5cGVzLk1ldGFUcmFuc2FjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhZGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFUcmFuc2FjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEdhc2xlc3NUeXBlcy5NZXRhVHJhbnNhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmU6IGV0aFNpZ25IYXNoV2l0aEtleShtZXRhVHJhbnNhY3Rpb24uZ2V0SGFzaCgpLCB0YWtlclByaXZhdGVLZXkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ2ludGVncmF0b3JJZCcsXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICApLnJlamVjdHMudG9UaHJvd0Vycm9yKCdwZW5kaW5nIHRyYWRlJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdmYWlscyBpZiB0aGUgc2lnbmF0dXJlIGlzIGludmFsaWQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG90aGVyUHJpdmF0ZUtleSA9ICcweGFlNDUzNmUyY2RlZThmMzJhZGM3N2ViZTg2OTc3YTAxYzY1MjZhMzJlZWU3YzRjMmNjZmIxZDVkZGNkZGFhYTInO1xyXG4gICAgICAgICAgICBtb2NrUmVkaXMuZ2V0ID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7fSk7XHJcbiAgICAgICAgICAgIG1vY2tEYlV0aWxzLmZpbmRNZXRhVHJhbnNhY3Rpb25Kb2JzV2l0aFN0YXR1c2VzQXN5bmMubW9ja1Jlc29sdmVkVmFsdWVPbmNlKFtdKTtcclxuICAgICAgICAgICAgYXdhaXQgZXhwZWN0KCgpID0+XHJcbiAgICAgICAgICAgICAgICBnYXNsZXNzU3dhcFNlcnZpY2UucHJvY2Vzc1N1Ym1pdEFzeW5jKFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAga2luZDogR2FzbGVzc1R5cGVzLk1ldGFUcmFuc2FjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhZGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFUcmFuc2FjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEdhc2xlc3NUeXBlcy5NZXRhVHJhbnNhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmU6IGV0aFNpZ25IYXNoV2l0aEtleShtZXRhVHJhbnNhY3Rpb24uZ2V0SGFzaCgpLCBvdGhlclByaXZhdGVLZXkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ2ludGVncmF0b3JJZCcsXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICApLnJlamVjdHMudG9UaHJvdyhWYWxpZGF0aW9uRXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnZmFpbHMgaWYgdGFrZXIgYmFsYW5jZSBpcyB0b28gbG93JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBtb2NrUmVkaXMuZ2V0ID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7fSk7XHJcbiAgICAgICAgICAgIG1vY2tCbG9ja2NoYWluVXRpbHMuZ2V0TWluT2ZCYWxhbmNlc0FuZEFsbG93YW5jZXNBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoW25ldyBCaWdOdW1iZXIoMjEpXSk7XHJcbiAgICAgICAgICAgIGF3YWl0IGV4cGVjdCgoKSA9PlxyXG4gICAgICAgICAgICAgICAgZ2FzbGVzc1N3YXBTZXJ2aWNlLnByb2Nlc3NTdWJtaXRBc3luYyhcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6IEdhc2xlc3NUeXBlcy5NZXRhVHJhbnNhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWRlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhVHJhbnNhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBHYXNsZXNzVHlwZXMuTWV0YVRyYW5zYWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlOiBldGhTaWduSGFzaFdpdGhLZXkobWV0YVRyYW5zYWN0aW9uLmdldEhhc2goKSwgdGFrZXJQcml2YXRlS2V5KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICdpbnRlZ3JhdG9ySWQnLFxyXG4gICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgKS5yZWplY3RzLnRvVGhyb3coVmFsaWRhdGlvbkVycm9yKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ2NyZWF0ZXMgYSBtZXRhdHJhbnNhY3Rpb24gam9iJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBtb2NrUmVkaXMuZ2V0ID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7fSk7XHJcbiAgICAgICAgICAgIG1vY2tCbG9ja2NoYWluVXRpbHMuZ2V0TWluT2ZCYWxhbmNlc0FuZEFsbG93YW5jZXNBc3luYyA9IGplc3RcclxuICAgICAgICAgICAgICAgIC5mbigpXHJcbiAgICAgICAgICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKFtwcmljZS5zZWxsQW1vdW50XSk7XHJcblxyXG4gICAgICAgICAgICBtb2NrRGJVdGlscy53cml0ZU1ldGFUcmFuc2FjdGlvbkpvYkFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IGlkOiAnaWQnIH0gYXMgTWV0YVRyYW5zYWN0aW9uSm9iRW50aXR5KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdhc2xlc3NTd2FwU2VydmljZS5wcm9jZXNzU3VibWl0QXN5bmMoXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAga2luZDogR2FzbGVzc1R5cGVzLk1ldGFUcmFuc2FjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICB0cmFkZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhVHJhbnNhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEdhc2xlc3NUeXBlcy5NZXRhVHJhbnNhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogZXRoU2lnbkhhc2hXaXRoS2V5KG1ldGFUcmFuc2FjdGlvbi5nZXRIYXNoKCksIHRha2VyUHJpdmF0ZUtleSksXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAnaW50ZWdyYXRvcklkJyxcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQubWV0YVRyYW5zYWN0aW9uSGFzaCkudG9FcXVhbChtZXRhVHJhbnNhY3Rpb24uZ2V0SGFzaCgpKTtcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC50eXBlKS50b0VxdWFsKEdhc2xlc3NUeXBlcy5NZXRhVHJhbnNhY3Rpb24pO1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXVuYm91bmQtbWV0aG9kXHJcbiAgICAgICAgICAgIGV4cGVjdChtb2NrU3FzUHJvZHVjZXIuc2VuZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xyXG4gICAgICAgICAgICAgICAgYm9keTogJ3tcImlkXCI6XCJpZFwiLFwidHlwZVwiOlwibWV0YXRyYW5zYWN0aW9uXCJ9JyxcclxuICAgICAgICAgICAgICAgIGRlZHVwbGljYXRpb25JZDogJ2lkJyxcclxuICAgICAgICAgICAgICAgIGdyb3VwSWQ6ICdpZCcsXHJcbiAgICAgICAgICAgICAgICBpZDogJ2lkJyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==