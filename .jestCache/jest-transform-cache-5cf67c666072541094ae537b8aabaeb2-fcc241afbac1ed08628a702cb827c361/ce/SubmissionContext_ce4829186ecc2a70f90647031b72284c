9f1d55e0c090bb2c1651e23343734fe3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubmissionContext = exports.BLOCK_FINALITY_THRESHOLD = void 0;
const utils_1 = require("@0x/utils");
const constants_1 = require("../core/constants");
const types_1 = require("../entities/types");
exports.BLOCK_FINALITY_THRESHOLD = 3;
// https://stackoverflow.com/questions/47632622/typescript-and-filter-boolean
function isDefined(value) {
    return value !== null && value !== undefined;
}
/**
 * Encapsulates the transaction submissions for an RFQM job.
 *
 * Since one job can have multiple transactions, this class is used to treat them
 * all as one unit. It ensures consistency across transactions and makes retrieval
 * of the mined transaction receipt, if one exists, easy.
 */
class SubmissionContext {
    constructor(blockchainUtils, transactions) {
        this._ensureTransactionsAreConsistent(transactions);
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line no-extra-boolean-cast
        this._transactionType = !!transactions[0].gasPrice ? 0 : 2;
        this._transactions = transactions;
        this._blockchainUtils = blockchainUtils;
    }
    static isBlockConfirmed(currentBlock, receiptBlockNumber) {
        // We specify a finality threshold of n blocks deep to have greater confidence
        // in the transaction receipt
        return currentBlock - receiptBlockNumber >= exports.BLOCK_FINALITY_THRESHOLD;
    }
    /**
     * Get corresponding job status given status of submission context for `RfqmTransactionSubmissionType.Approval`.
     * Different submission context status would trigger different job status transition.
     *
     * @returns Corresponding job status.
     */
    static approvalSubmissionContextStatusToJobStatus(submissionContextStatus) {
        switch (submissionContextStatus) {
            case types_1.SubmissionContextStatus.FailedExpired:
                return types_1.RfqmJobStatus.FailedExpired;
            case types_1.SubmissionContextStatus.FailedRevertedConfirmed:
                return types_1.RfqmJobStatus.FailedRevertedConfirmed;
            case types_1.SubmissionContextStatus.FailedRevertedUnconfirmed:
                return types_1.RfqmJobStatus.FailedRevertedUnconfirmed;
            case types_1.SubmissionContextStatus.PendingSubmitted:
            case types_1.SubmissionContextStatus.SucceededConfirmed:
            case types_1.SubmissionContextStatus.SucceededUnconfirmed:
                // For the first version of gasless approval, a successful approval submission
                // would still keep the job in pending submitted status
                return types_1.RfqmJobStatus.PendingSubmitted;
            default:
                ((_x) => {
                    throw new Error('unreachable');
                })(submissionContextStatus);
        }
    }
    /**
     * Get corresponding job status given status of submission context for `RfqmTransactionSubmissionType.Trade`.
     * Different submission context status would trigger different job status transition.
     *
     * @param submissionContextStatus Status of submission context.
     */
    static tradeSubmissionContextStatusToJobStatus(submissionContextStatus) {
        switch (submissionContextStatus) {
            case types_1.SubmissionContextStatus.FailedExpired:
                return types_1.RfqmJobStatus.FailedExpired;
            case types_1.SubmissionContextStatus.FailedRevertedConfirmed:
                return types_1.RfqmJobStatus.FailedRevertedConfirmed;
            case types_1.SubmissionContextStatus.FailedRevertedUnconfirmed:
                return types_1.RfqmJobStatus.FailedRevertedUnconfirmed;
            case types_1.SubmissionContextStatus.PendingSubmitted:
                return types_1.RfqmJobStatus.PendingSubmitted;
            case types_1.SubmissionContextStatus.SucceededConfirmed:
                return types_1.RfqmJobStatus.SucceededConfirmed;
            case types_1.SubmissionContextStatus.SucceededUnconfirmed:
                return types_1.RfqmJobStatus.SucceededUnconfirmed;
            default:
                ((_x) => {
                    throw new Error('unreachable');
                })(submissionContextStatus);
        }
    }
    get transactions() {
        return this._transactions;
    }
    // Gets the transaction hashes for the transactions in the SubmissionContext
    get transactionHashes() {
        return this._transactions.map((t) => t.transactionHash).filter(isDefined);
    }
    /**
     * Gets the type of the transactions in the `SubmissionContext`:
     * 0 for non-EIP1559 transactions and 2 for EIP-1559 transactions.
     */
    get transactionType() {
        return this._transactionType;
    }
    /**
     * Adds a transaction to the SubmissionContext. Throws if the transaction has a nonce or type
     * different than the existing transactions.
     */
    addTransaction(transaction) {
        // TODO (Vic): Remove any[] once https://github.com/microsoft/TypeScript/issues/44373 is fixed
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this._transactions.push(transaction);
        this._ensureTransactionsAreConsistent(this._transactions);
    }
    /**
     * Gets the nonce of the transactions of the `SubmissionContext`
     */
    get nonce() {
        const nonce = this._transactions[0].nonce;
        if (nonce === undefined || nonce === null) {
            throw new Error('Transaction does not have a nonce');
        }
        return nonce;
    }
    /**
     * Gets the max gas price set for any transaction in the `SubmissionContext`
     */
    get maxGasPrice() {
        if (this._transactionType !== 0) {
            throw new Error('Attempted to access the max gas price of a EIP-1559 transaction set');
        }
        return (this._transactions
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            .map((t) => t.gasPrice)
            .filter(Boolean)
            .reduce((result, gasPrice) => utils_1.BigNumber.maximum(result, gasPrice)));
    }
    /**
     * Gets the maximum values for the `maxFeePerGas` and the `maxPriorityFeePerGas` for a
     * set of EIP-1559 transactions.
     */
    get maxGasFees() {
        if (this._transactionType !== 2) {
            throw new Error('Attempted to access the max gas fees for a non-EIP-1559 transaction set');
        }
        return {
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            maxFeePerGas: utils_1.BigNumber.maximum(...this._transactions.map((t) => t.maxFeePerGas)),
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            maxPriorityFeePerGas: utils_1.BigNumber.maximum(...this._transactions.map((t) => t.maxPriorityFeePerGas)),
        };
    }
    /**
     * Gets the epoch time, in seconds, of the earliest transaction submission.
     * Note: This uses the database time the transaction submission was created,
     * not the blockchain timestamp.
     */
    get firstSubmissionTimestampS() {
        const submissionCreationTimesS = this._transactions
            .map((t) => t.createdAt.getTime() / constants_1.ONE_SECOND_MS)
            .map((t) => Math.round(t));
        return submissionCreationTimesS.reduce((result, time) => Math.min(result, time), Infinity);
    }
    /**
     * Returns the transaction receipt if one of the transactions in the SubmissionContext
     * has been mined; otherwise returns `null`.
     */
    async getReceiptAsync() {
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        /* eslint-disable @typescript-eslint/no-non-null-assertion */
        const receipts = (await this._blockchainUtils.getReceiptsAsync(this._transactions.map((t) => t.transactionHash))).filter(isDefined);
        /* eslint-enable @typescript-eslint/no-non-null-assertion */
        if (receipts.length > 1) {
            throw new Error('Found more than one transaction receipt');
        }
        return receipts.length ? receipts[0] : null;
    }
    /**
     * 1. Updates the in-memory transactions in response to a mined transaction receipt.
     * 2. Updates the statuses of all transaction submission.
     */
    async updateForReceiptAsync(receipt, now = new Date()) {
        const isTransactionSuccessful = receipt.status === 1;
        const currentBlock = await this._blockchainUtils.getCurrentBlockAsync();
        const isTransactionConfirmed = SubmissionContext.isBlockConfirmed(currentBlock, receipt.blockNumber);
        this._transactions = this._transactions.map((transaction) => {
            transaction.updatedAt = now;
            if (transaction.transactionHash === receipt.transactionHash) {
                const submissionStatus = isTransactionSuccessful
                    ? isTransactionConfirmed
                        ? types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed
                        : types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed
                    : isTransactionConfirmed
                        ? types_1.RfqmTransactionSubmissionStatus.RevertedConfirmed
                        : types_1.RfqmTransactionSubmissionStatus.RevertedUnconfirmed;
                transaction.status = submissionStatus;
                transaction.blockMined = new utils_1.BigNumber(receipt.blockNumber);
                transaction.gasUsed = new utils_1.BigNumber(receipt.gasUsed.toString());
                if (transaction.gasPrice === null) {
                    transaction.gasPrice = new utils_1.BigNumber(receipt.effectiveGasPrice.toString());
                }
            }
            else {
                transaction.status = types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced;
            }
            return transaction;
        });
    }
    /**
     * Returns the appropriate job status given the statuses of the transactions
     */
    get jobStatus() {
        for (const transaction of this._transactions) {
            switch (transaction.status) {
                case types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced:
                    continue;
                case types_1.RfqmTransactionSubmissionStatus.Presubmit:
                    continue;
                case types_1.RfqmTransactionSubmissionStatus.RevertedConfirmed:
                    return types_1.RfqmJobStatus.FailedRevertedConfirmed;
                case types_1.RfqmTransactionSubmissionStatus.RevertedUnconfirmed:
                    return types_1.RfqmJobStatus.FailedRevertedUnconfirmed;
                case types_1.RfqmTransactionSubmissionStatus.Submitted:
                    continue;
                case types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed:
                    return types_1.RfqmJobStatus.SucceededConfirmed;
                case types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed:
                    return types_1.RfqmJobStatus.SucceededUnconfirmed;
                default:
                    ((_x) => {
                        throw new Error('unreachable');
                    })(transaction.status);
            }
        }
        return types_1.RfqmJobStatus.PendingSubmitted;
    }
    /**
     * Returns the submission context status given the statuses of the transactions. A submission context contains
     * multiple transactions and the submission context status is the collective status for all transactions.
     */
    get submissionContextStatus() {
        for (const transaction of this._transactions) {
            switch (transaction.status) {
                case types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced:
                    continue;
                case types_1.RfqmTransactionSubmissionStatus.Presubmit:
                    continue;
                case types_1.RfqmTransactionSubmissionStatus.RevertedConfirmed:
                    return types_1.SubmissionContextStatus.FailedRevertedConfirmed;
                case types_1.RfqmTransactionSubmissionStatus.RevertedUnconfirmed:
                    return types_1.SubmissionContextStatus.FailedRevertedUnconfirmed;
                case types_1.RfqmTransactionSubmissionStatus.Submitted:
                    continue;
                case types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed:
                    return types_1.SubmissionContextStatus.SucceededConfirmed;
                case types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed:
                    return types_1.SubmissionContextStatus.SucceededUnconfirmed;
                default:
                    throw new Error(`Transaction status ${transaction.status} should not be reached`);
            }
        }
        return types_1.SubmissionContextStatus.PendingSubmitted;
    }
    /**
     * Assesses whether the given transactions have the same nonce, type (EIP-1559 or not),
     * and unique transaction hashes; throws if they do not.
     *
     * Throws if `transactions` has a zero length.
     *
     * `perfer-function-over-method` rule is disabled to since a function would not be able to use the
     * `T` generic type.
     */
    // tslint:disable-next-line: prefer-function-over-method
    _ensureTransactionsAreConsistent(transactions) {
        if (!transactions.length) {
            throw new Error('`transactions` must have a nonzero length');
        }
        if (!transactions.map((t) => t.nonce).every((n, _, nonces) => n === nonces[0])) {
            throw new Error('Transactions do not have the same nonce');
        }
        if (new Set(transactions.map((t) => t.transactionHash)).size !== transactions.length) {
            throw new Error('Transactions are not unique');
        }
        // TODO (Vic): Remove any[] once https://github.com/microsoft/TypeScript/issues/44373 is fixed
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const areAllGasPricesNonNull = transactions.every((t) => t.gasPrice !== null);
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const areAllMaxFeesPerGasNonNull = transactions.every((t) => t.maxFeePerGas !== null);
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const areAllMaxPriorityFeesPerGasNonNull = transactions.every((t) => t.maxPriorityFeePerGas !== null);
        if (!(areAllGasPricesNonNull || (areAllMaxFeesPerGasNonNull && areAllMaxPriorityFeesPerGasNonNull))) {
            throw new Error('Transactions do not have the same gas type');
        }
    }
}
exports.SubmissionContext = SubmissionContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,