32cb7567b455db394614d5b0be976b02
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigManager = void 0;
// tslint:disable: prefer-function-over-method
const crypto_1 = require("crypto");
const config_1 = require("../config");
const pair_utils_1 = require("../core/pair_utils");
const getApiKeyHash = (apiKey) => (0, crypto_1.createHash)('sha256').update(apiKey).digest('base64');
/**
 * ConfigManager is a simple wrapper around configs.
 *
 * It exists to provide a layer around our configs which can then be mocked while writing tests
 */
class ConfigManager {
    getAdminApiKey() {
        return config_1.ADMIN_API_KEY;
    }
    getRfqmApiKeyWhitelist() {
        return config_1.RFQM_API_KEY_WHITELIST;
    }
    getRfqMakerIdForApiKey(apiKey) {
        return config_1.RFQ_API_KEY_HASH_TO_MAKER_ID.get(getApiKeyHash(apiKey));
    }
    getIntegratorByIdOrThrow(integratorId) {
        return (0, config_1.getIntegratorByIdOrThrow)(integratorId);
    }
    getIntegratorIdForApiKey(apiKey) {
        return (0, config_1.getIntegratorIdForApiKey)(apiKey);
    }
    /**
     * Get a set of makers that support RFQt workflow with rfq order type
     */
    getRfqtMakerIdSetForRfqOrder() {
        return config_1.RFQT_MAKER_ID_SET_FOR_RFQ_ORDER;
    }
    /**
     * Get a set of makers that support RFQm workflow
     */
    getRfqmMakerIdSet() {
        return config_1.RFQM_MAKER_ID_SET;
    }
    /**
     * Get a set of makers that support RFQt workflow with otc order type
     */
    getRfqtMakerIdSetForOtcOrder() {
        return config_1.RFQT_MAKER_ID_SET_FOR_OTC_ORDER;
    }
    /**
     * Get a set of makers that support RFQm workflow with otc order type
     */
    getRfqmMakerIdSetForOtcOrder() {
        return config_1.RFQM_MAKER_ID_SET_FOR_OTC_ORDER;
    }
    /**
     * Get fee model constant for given pair on a given chain.
     */
    getFeeModelConfiguration(chainId, tokenA, tokenB) {
        if (config_1.FEE_MODEL_CONFIGURATION_MAP.has(chainId)) {
            const pairKey = (0, pair_utils_1.toPairString)(tokenA, tokenB);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const innerMap = config_1.FEE_MODEL_CONFIGURATION_MAP.get(chainId);
            if (innerMap.has(pairKey)) {
                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                return innerMap.get(pairKey);
            }
        }
        return config_1.DEFAULT_FEE_MODEL_CONFIGURATION;
    }
}
exports.ConfigManager = ConfigManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9jb25maWdfbWFuYWdlci50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbUNBQW9DO0FBRXBDLHNDQWVtQjtBQUVuQixtREFBa0Q7QUFFbEQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxNQUFjLEVBQVUsRUFBRSxDQUFDLElBQUEsbUJBQVUsRUFBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRXZHOzs7O0dBSUc7QUFDSCxNQUFhLGFBQWE7SUFDZixjQUFjO1FBQ2pCLE9BQU8sc0JBQWEsQ0FBQztJQUN6QixDQUFDO0lBRU0sc0JBQXNCO1FBQ3pCLE9BQU8sK0JBQXNCLENBQUM7SUFDbEMsQ0FBQztJQUVNLHNCQUFzQixDQUFDLE1BQWM7UUFDeEMsT0FBTyxxQ0FBNEIsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVNLHdCQUF3QixDQUFDLFlBQW9CO1FBQ2hELE9BQU8sSUFBQSxpQ0FBd0IsRUFBQyxZQUFZLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU0sd0JBQXdCLENBQUMsTUFBYztRQUMxQyxPQUFPLElBQUEsaUNBQXdCLEVBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksNEJBQTRCO1FBQy9CLE9BQU8sd0NBQStCLENBQUM7SUFDM0MsQ0FBQztJQUVEOztPQUVHO0lBQ0ksaUJBQWlCO1FBQ3BCLE9BQU8sMEJBQWlCLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ0ksNEJBQTRCO1FBQy9CLE9BQU8sd0NBQStCLENBQUM7SUFDM0MsQ0FBQztJQUVEOztPQUVHO0lBQ0ksNEJBQTRCO1FBQy9CLE9BQU8sd0NBQStCLENBQUM7SUFDM0MsQ0FBQztJQUVEOztPQUVHO0lBQ0ksd0JBQXdCLENBQUMsT0FBZSxFQUFFLE1BQWMsRUFBRSxNQUFjO1FBQzNFLElBQUksb0NBQTJCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzFDLE1BQU0sT0FBTyxHQUFHLElBQUEseUJBQVksRUFBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDN0MsNkRBQTZEO1lBQzdELG9FQUFvRTtZQUNwRSxNQUFNLFFBQVEsR0FBRyxvQ0FBMkIsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFFLENBQUM7WUFDM0QsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUN2Qiw2REFBNkQ7Z0JBQzdELG9FQUFvRTtnQkFDcEUsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBRSxDQUFDO2FBQ2pDO1NBQ0o7UUFFRCxPQUFPLHdDQUErQixDQUFDO0lBQzNDLENBQUM7Q0FDSjtBQW5FRCxzQ0FtRUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9jb25maWdfbWFuYWdlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTogcHJlZmVyLWZ1bmN0aW9uLW92ZXItbWV0aG9kXHJcbmltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tICdjcnlwdG8nO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIEFETUlOX0FQSV9LRVksXHJcbiAgICBERUZBVUxUX0ZFRV9NT0RFTF9DT05GSUdVUkFUSU9OLFxyXG4gICAgRmVlTW9kZWxDb25maWd1cmF0aW9uLFxyXG4gICAgRkVFX01PREVMX0NPTkZJR1VSQVRJT05fTUFQLFxyXG4gICAgZ2V0SW50ZWdyYXRvckJ5SWRPclRocm93LFxyXG4gICAgZ2V0SW50ZWdyYXRvcklkRm9yQXBpS2V5LFxyXG4gICAgSW50ZWdyYXRvcixcclxuICAgIE1ha2VySWRTZXQsXHJcbiAgICBSRlFNX0FQSV9LRVlfV0hJVEVMSVNULFxyXG4gICAgUkZRTV9NQUtFUl9JRF9TRVQsXHJcbiAgICBSRlFNX01BS0VSX0lEX1NFVF9GT1JfT1RDX09SREVSLFxyXG4gICAgUkZRVF9NQUtFUl9JRF9TRVRfRk9SX09UQ19PUkRFUixcclxuICAgIFJGUVRfTUFLRVJfSURfU0VUX0ZPUl9SRlFfT1JERVIsXHJcbiAgICBSRlFfQVBJX0tFWV9IQVNIX1RPX01BS0VSX0lELFxyXG59IGZyb20gJy4uL2NvbmZpZyc7XHJcblxyXG5pbXBvcnQgeyB0b1BhaXJTdHJpbmcgfSBmcm9tICcuLi9jb3JlL3BhaXJfdXRpbHMnO1xyXG5cclxuY29uc3QgZ2V0QXBpS2V5SGFzaCA9IChhcGlLZXk6IHN0cmluZyk6IHN0cmluZyA9PiBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoYXBpS2V5KS5kaWdlc3QoJ2Jhc2U2NCcpO1xyXG5cclxuLyoqXHJcbiAqIENvbmZpZ01hbmFnZXIgaXMgYSBzaW1wbGUgd3JhcHBlciBhcm91bmQgY29uZmlncy5cclxuICpcclxuICogSXQgZXhpc3RzIHRvIHByb3ZpZGUgYSBsYXllciBhcm91bmQgb3VyIGNvbmZpZ3Mgd2hpY2ggY2FuIHRoZW4gYmUgbW9ja2VkIHdoaWxlIHdyaXRpbmcgdGVzdHNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDb25maWdNYW5hZ2VyIHtcclxuICAgIHB1YmxpYyBnZXRBZG1pbkFwaUtleSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiBBRE1JTl9BUElfS0VZO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRSZnFtQXBpS2V5V2hpdGVsaXN0KCk6IFNldDxzdHJpbmc+IHtcclxuICAgICAgICByZXR1cm4gUkZRTV9BUElfS0VZX1dISVRFTElTVDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UmZxTWFrZXJJZEZvckFwaUtleShhcGlLZXk6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIFJGUV9BUElfS0VZX0hBU0hfVE9fTUFLRVJfSUQuZ2V0KGdldEFwaUtleUhhc2goYXBpS2V5KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEludGVncmF0b3JCeUlkT3JUaHJvdyhpbnRlZ3JhdG9ySWQ6IHN0cmluZyk6IEludGVncmF0b3Ige1xyXG4gICAgICAgIHJldHVybiBnZXRJbnRlZ3JhdG9yQnlJZE9yVGhyb3coaW50ZWdyYXRvcklkKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0SW50ZWdyYXRvcklkRm9yQXBpS2V5KGFwaUtleTogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gZ2V0SW50ZWdyYXRvcklkRm9yQXBpS2V5KGFwaUtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSBzZXQgb2YgbWFrZXJzIHRoYXQgc3VwcG9ydCBSRlF0IHdvcmtmbG93IHdpdGggcmZxIG9yZGVyIHR5cGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFJmcXRNYWtlcklkU2V0Rm9yUmZxT3JkZXIoKTogTWFrZXJJZFNldCB7XHJcbiAgICAgICAgcmV0dXJuIFJGUVRfTUFLRVJfSURfU0VUX0ZPUl9SRlFfT1JERVI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSBzZXQgb2YgbWFrZXJzIHRoYXQgc3VwcG9ydCBSRlFtIHdvcmtmbG93XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRSZnFtTWFrZXJJZFNldCgpOiBNYWtlcklkU2V0IHtcclxuICAgICAgICByZXR1cm4gUkZRTV9NQUtFUl9JRF9TRVQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSBzZXQgb2YgbWFrZXJzIHRoYXQgc3VwcG9ydCBSRlF0IHdvcmtmbG93IHdpdGggb3RjIG9yZGVyIHR5cGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFJmcXRNYWtlcklkU2V0Rm9yT3RjT3JkZXIoKTogTWFrZXJJZFNldCB7XHJcbiAgICAgICAgcmV0dXJuIFJGUVRfTUFLRVJfSURfU0VUX0ZPUl9PVENfT1JERVI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSBzZXQgb2YgbWFrZXJzIHRoYXQgc3VwcG9ydCBSRlFtIHdvcmtmbG93IHdpdGggb3RjIG9yZGVyIHR5cGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFJmcW1NYWtlcklkU2V0Rm9yT3RjT3JkZXIoKTogTWFrZXJJZFNldCB7XHJcbiAgICAgICAgcmV0dXJuIFJGUU1fTUFLRVJfSURfU0VUX0ZPUl9PVENfT1JERVI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgZmVlIG1vZGVsIGNvbnN0YW50IGZvciBnaXZlbiBwYWlyIG9uIGEgZ2l2ZW4gY2hhaW4uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRGZWVNb2RlbENvbmZpZ3VyYXRpb24oY2hhaW5JZDogbnVtYmVyLCB0b2tlbkE6IHN0cmluZywgdG9rZW5COiBzdHJpbmcpOiBGZWVNb2RlbENvbmZpZ3VyYXRpb24ge1xyXG4gICAgICAgIGlmIChGRUVfTU9ERUxfQ09ORklHVVJBVElPTl9NQVAuaGFzKGNoYWluSWQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhaXJLZXkgPSB0b1BhaXJTdHJpbmcodG9rZW5BLCB0b2tlbkIpO1xyXG4gICAgICAgICAgICAvLyAkZXNsaW50LWZpeC1tZSBodHRwczovL2dpdGh1Yi5jb20vcmhpbm9kYXZpZC9lc2xpbnQtZml4LW1lXHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXHJcbiAgICAgICAgICAgIGNvbnN0IGlubmVyTWFwID0gRkVFX01PREVMX0NPTkZJR1VSQVRJT05fTUFQLmdldChjaGFpbklkKSE7XHJcbiAgICAgICAgICAgIGlmIChpbm5lck1hcC5oYXMocGFpcktleSkpIHtcclxuICAgICAgICAgICAgICAgIC8vICRlc2xpbnQtZml4LW1lIGh0dHBzOi8vZ2l0aHViLmNvbS9yaGlub2RhdmlkL2VzbGludC1maXgtbWVcclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5uZXJNYXAuZ2V0KHBhaXJLZXkpITtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIERFRkFVTFRfRkVFX01PREVMX0NPTkZJR1VSQVRJT047XHJcbiAgICB9XHJcbn1cclxuIl0sInZlcnNpb24iOjN9