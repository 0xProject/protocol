{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfqm_health_check_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfqm_health_check_test.ts"],"sourcesContent":["// tslint:disable custom-no-magic-numbers\r\nimport { BigNumber } from '@0x/utils';\r\nimport { expect } from 'chai';\r\nimport { Producer } from 'sqs-producer';\r\nimport { instance, mock, when } from 'ts-mockito';\r\n\r\nimport { ETH_DECIMALS } from '../../src/core/constants';\r\nimport { RfqmWorkerHeartbeatEntity } from '../../src/entities';\r\nimport {\r\n    checkSqsQueueAsync,\r\n    checkWorkerHeartbeatsAsync,\r\n    getHttpIssues,\r\n    HealthCheckStatus,\r\n} from '../../src/utils/rfqm_health_check';\r\n\r\nlet producerMock: Producer;\r\n\r\nconst MS_IN_MINUTE = 60000;\r\nconst fullBalance = new BigNumber(1).shiftedBy(ETH_DECIMALS);\r\n\r\ndescribe('RFQm Health Check', () => {\r\n    describe('checkSqsQueueAsync', () => {\r\n        beforeEach(() => {\r\n            producerMock = mock(Producer);\r\n        });\r\n\r\n        describe('queue size check', () => {\r\n            it('creates no issues if there are 10 or less jobs in the queue', async () => {\r\n                when(producerMock.queueSize()).thenResolve(1);\r\n\r\n                const issues = await checkSqsQueueAsync(instance(producerMock));\r\n\r\n                expect(issues).to.have.length(0);\r\n            });\r\n\r\n            it('creates a DEGRADED issue if there are more than 5 messages in the queue', async () => {\r\n                when(producerMock.queueSize()).thenResolve(11);\r\n\r\n                const issues = await checkSqsQueueAsync(instance(producerMock));\r\n\r\n                expect(issues).to.have.length(1);\r\n                expect(issues[0].status).to.equal(HealthCheckStatus.Degraded);\r\n            });\r\n\r\n            it('creates a FAILED issue if there are more than 20 messages in the queue', async () => {\r\n                when(producerMock.queueSize()).thenResolve(21);\r\n\r\n                const issues = await checkSqsQueueAsync(instance(producerMock));\r\n\r\n                expect(issues).to.have.length(1);\r\n                expect(issues[0].status).to.equal(HealthCheckStatus.Failed);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('checkWorkerHeartbeatsAsync', () => {\r\n        it('creates a failed issue when no heartbeats are found', async () => {\r\n            const issues = await checkWorkerHeartbeatsAsync([]);\r\n\r\n            expect(issues).to.have.length(1);\r\n            expect(issues[0].status).to.equal(HealthCheckStatus.Failed);\r\n        });\r\n\r\n        describe('Heartbeat age', () => {\r\n            it('creates a failed issue with no recent heartbeats', async () => {\r\n                const now = new Date();\r\n                const nowTime = now.getTime();\r\n                const heartbeat = new RfqmWorkerHeartbeatEntity({\r\n                    address: '0x00',\r\n                    balance: fullBalance,\r\n                    index: 0,\r\n                    timestamp: new Date(nowTime - MS_IN_MINUTE * 6),\r\n                    chainId: 1337,\r\n                });\r\n\r\n                const issues = await checkWorkerHeartbeatsAsync([heartbeat], now);\r\n                const failedIssues = issues.filter(({ status }) => status === HealthCheckStatus.Failed);\r\n\r\n                expect(failedIssues).to.have.length(1);\r\n            });\r\n\r\n            it('creates degraded issues for stale heartbeats', async () => {\r\n                const now = new Date();\r\n                const nowTime = now.getTime();\r\n                const heartbeat1 = new RfqmWorkerHeartbeatEntity({\r\n                    address: '0x00',\r\n                    balance: fullBalance,\r\n                    index: 0,\r\n                    timestamp: now,\r\n                    chainId: 1337,\r\n                });\r\n                const heartbeat2 = new RfqmWorkerHeartbeatEntity({\r\n                    address: '0x01',\r\n                    balance: fullBalance,\r\n                    index: 1,\r\n                    timestamp: new Date(nowTime - MS_IN_MINUTE * 8),\r\n                    chainId: 1337,\r\n                });\r\n\r\n                const issues = await checkWorkerHeartbeatsAsync([heartbeat1, heartbeat2], now);\r\n                const failedIssues = issues.filter(({ status }) => status === HealthCheckStatus.Failed);\r\n                expect(failedIssues).to.have.length(0);\r\n                const degradedIssues = issues.filter(({ status }) => status === HealthCheckStatus.Degraded);\r\n                expect(degradedIssues).to.have.length(1);\r\n                expect(degradedIssues[0].description).to.contain('0x01');\r\n            });\r\n        });\r\n\r\n        describe('Worker balance', () => {\r\n            it('creates a failed issue when no worker has a balance above the failed threshold', async () => {\r\n                const now = new Date();\r\n                const heartbeat = new RfqmWorkerHeartbeatEntity({\r\n                    address: '0x00',\r\n                    balance: new BigNumber(0.01),\r\n                    index: 0,\r\n                    timestamp: now,\r\n                    chainId: 1337,\r\n                });\r\n\r\n                const issues = await checkWorkerHeartbeatsAsync([heartbeat], now);\r\n                const failedIssues = issues.filter(({ status }) => status === HealthCheckStatus.Failed);\r\n\r\n                expect(failedIssues).to.have.length(1);\r\n            });\r\n\r\n            it('creates degraded issues for low worker balances', async () => {\r\n                const now = new Date();\r\n                const heartbeat1 = new RfqmWorkerHeartbeatEntity({\r\n                    address: '0x00',\r\n                    balance: new BigNumber(0.01),\r\n                    index: 0,\r\n                    timestamp: now,\r\n                    chainId: 1337,\r\n                });\r\n                const heartbeat2 = new RfqmWorkerHeartbeatEntity({\r\n                    address: '0x01',\r\n                    balance: fullBalance,\r\n                    index: 1,\r\n                    timestamp: now,\r\n                    chainId: 1337,\r\n                });\r\n\r\n                const issues = await checkWorkerHeartbeatsAsync([heartbeat1, heartbeat2], now);\r\n                const failedIssues = issues.filter(({ status }) => status === HealthCheckStatus.Failed);\r\n                expect(failedIssues).to.have.length(0);\r\n\r\n                const degradedIssues = issues.filter(({ status }) => status === HealthCheckStatus.Degraded);\r\n\r\n                expect(degradedIssues).to.have.length(1);\r\n                expect(degradedIssues[0].description).to.contain(\r\n                    'Less than two workers have a balance above the degraded threshold',\r\n                );\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('getHttpIssues', () => {\r\n        it('goes into maintainence mode', async () => {\r\n            const issues = getHttpIssues(/* isMaintainenceMode */ true);\r\n\r\n            expect(issues[0].status).to.equal(HealthCheckStatus.Maintenance);\r\n        });\r\n    });\r\n});\r\n"],"version":3}