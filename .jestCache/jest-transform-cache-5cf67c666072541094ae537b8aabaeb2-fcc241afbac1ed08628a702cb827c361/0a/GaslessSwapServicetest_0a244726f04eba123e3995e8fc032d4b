6871065b3fb6083682ee496de17123a1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../../src/services/rfqm_service', () => {
    return {
        RfqmService: jest.fn().mockImplementation(() => {
            return {
                fetchFirmQuoteAsync: jest.fn(),
                fetchIndicativeQuoteAsync: jest.fn(),
                getGaslessApprovalResponseAsync: jest.fn(),
            };
        }),
    };
});
jest.mock('../../src/utils/MetaTransactionClient', () => {
    return {
        getV1QuoteAsync: jest.fn(),
        getV2QuoteAsync: jest.fn(),
    };
});
jest.mock('../../src/utils/rfq_blockchain_utils', () => {
    return {
        RfqBlockchainUtils: jest.fn().mockImplementation(() => {
            return {
                getTokenBalancesAsync: jest.fn(),
                getMinOfBalancesAndAllowancesAsync: jest.fn(),
                getExchangeProxyAddress: jest.fn(),
            };
        }),
    };
});
jest.mock('../../src/utils/rfqm_db_utils', () => {
    return {
        RfqmDbUtils: jest.fn().mockImplementation(() => {
            return {
                findMetaTransactionJobsWithStatusesAsync: jest.fn().mockResolvedValue([]),
                writeMetaTransactionJobAsync: jest.fn(),
            };
        }),
    };
});
jest.mock('ioredis', () => {
    return {
        default: jest.fn().mockImplementation(() => {
            return {
                set: jest.fn(),
                get: jest.fn(),
            };
        }),
    };
});
jest.mock('sqs-producer', () => {
    return {
        Producer: jest.fn().mockImplementation(() => {
            return {
                send: jest.fn(),
            };
        }),
    };
});
// tslint:disable: max-file-line-count
const api_utils_1 = require("@0x/api-utils");
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const ioredis_1 = require("ioredis");
const sqs_producer_1 = require("sqs-producer");
const constants_1 = require("../../src/core/constants");
const entities_1 = require("../../src/entities");
const types_1 = require("../../src/entities/types");
const GaslessSwapService_1 = require("../../src/services/GaslessSwapService");
const rfqm_service_1 = require("../../src/services/rfqm_service");
const types_2 = require("../../src/services/types");
const MetaTransactionClient_1 = require("../../src/utils/MetaTransactionClient");
const rfqm_db_utils_1 = require("../../src/utils/rfqm_db_utils");
const rfq_blockchain_utils_1 = require("../../src/utils/rfq_blockchain_utils");
const types_3 = require("../../src/core/types");
// tslint:disable: no-object-literal-type-assertion
const getMetaTransactionV1QuoteAsyncMock = MetaTransactionClient_1.getV1QuoteAsync;
const getMetaTransactionV2QuoteAsyncMock = MetaTransactionClient_1.getV2QuoteAsync;
const mockSqsProducer = jest.mocked(new sqs_producer_1.Producer({}));
const mockDbUtils = jest.mocked(new rfqm_db_utils_1.RfqmDbUtils({}));
const mockBlockchainUtils = jest.mocked(new rfq_blockchain_utils_1.RfqBlockchainUtils({}, '0xdefi', {}, {}));
const mockRfqmService = jest.mocked(new rfqm_service_1.RfqmService(0, {}, 0, {}, '0x0', {}, {}, {}, {}, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, {}, {}, {}, {}));
const mockRedis = jest.mocked(new ioredis_1.default());
const gaslessSwapService = new GaslessSwapService_1.GaslessSwapService(
/* chainId */ 1337, // tslint:disable-line: custom-no-magic-numbers
mockRfqmService, new URL('https://hokiesports.com/quote'), {}, mockRedis, mockDbUtils, mockBlockchainUtils, mockSqsProducer);
describe('GaslessSwapService', () => {
    const takerPrivateKey = '0xd2c2349e10170e4219d9febd1c663ea5c7334f79c38d25f4f52c85af796c7c05';
    const integratorAddress = '0x4ea754349ace5303c82f0d1d491041e042f2ad22';
    const zeroExAddress = '0x4ea754349ace5303c82f0d1d491041e042f2ad22';
    const metaTransactionV1 = new protocol_utils_1.MetaTransaction({
        callData: '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',
        chainId: 137,
        verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
        expirationTimeSeconds: new utils_1.BigNumber('9990868679'),
        feeAmount: new utils_1.BigNumber(0),
        feeToken: '0x0000000000000000000000000000000000000000',
        maxGasPrice: new utils_1.BigNumber(4294967296),
        minGasPrice: new utils_1.BigNumber(1),
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-loss-of-precision
        salt: new utils_1.BigNumber(32606650794224189614795510724011106220035660490560169776986607186708081701146),
        sender: '0x0000000000000000000000000000000000000000',
        signer: '0x4c42a706410f1190f97d26fe3c999c90070aa40f',
        value: new utils_1.BigNumber(0),
    });
    // TODO: This needs to be updated to the new meta-transaction type when smart contract changes are finished and corresponding types are published in packages
    const metaTransactionV2 = new types_2.MetaTransactionV2({
        callData: '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',
        chainId: 137,
        verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
        expirationTimeSeconds: new utils_1.BigNumber('9990868679'),
        feeAmount: new utils_1.BigNumber(0),
        feeToken: '0x0000000000000000000000000000000000000000',
        maxGasPrice: new utils_1.BigNumber(4294967296),
        minGasPrice: new utils_1.BigNumber(1),
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-loss-of-precision
        salt: new utils_1.BigNumber(32606650794224189614795510724011106220035660490560169776986607186708081701146),
        sender: '0x0000000000000000000000000000000000000000',
        signer: '0x4c42a706410f1190f97d26fe3c999c90070aa40f',
        value: new utils_1.BigNumber(0),
    });
    const price = {
        allowanceTarget: '0x12345',
        buyAmount: new utils_1.BigNumber(1800054805473),
        sellAmount: new utils_1.BigNumber(1000000000000000000000),
        buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
        sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
        gas: new utils_1.BigNumber(1043459),
        price: new utils_1.BigNumber(1800.054805),
    };
    const sources = [
        {
            name: 'QuickSwap',
            proportion: new utils_1.BigNumber('0.2308'),
        },
        {
            name: 'DODO_V2',
            proportion: new utils_1.BigNumber('0.07692'),
        },
        {
            name: 'Uniswap_V3',
            proportion: new utils_1.BigNumber('0.6923'),
        },
    ];
    const fees = {
        integratorFee: {
            type: 'volume',
            feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
            feeAmount: new utils_1.BigNumber(1000000000000000000),
            feeRecipient: integratorAddress,
            billingType: 'on-chain',
            volumePercentage: new utils_1.BigNumber(0.1),
        },
        zeroExFee: {
            type: 'integrator_share',
            feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
            feeAmount: new utils_1.BigNumber(1000000000000000),
            feeRecipient: zeroExAddress,
            billingType: 'on-chain',
            integratorSharePercentage: new utils_1.BigNumber(0.1),
        },
        gasFee: {
            type: 'gas',
            gasPrice: new utils_1.BigNumber(115200000000),
            feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
            feeAmount: new utils_1.BigNumber(10000000),
            feeRecipient: null,
            billingType: 'off-chain',
            estimatedGas: new utils_1.BigNumber(1043459),
            feeTokenAmountPerBaseUnitNativeToken: new utils_1.BigNumber(0.001),
        },
    };
    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
    // eslint-disable-next-line @typescript-eslint/no-loss-of-precision
    const expiry = new utils_1.BigNumber(9999999999999999); // tslint:disable-line custom-no-magic-numbers
    const otcOrder = new protocol_utils_1.OtcOrder({
        txOrigin: '0x0000000000000000000000000000000000000000',
        taker: '0x1111111111111111111111111111111111111111',
        maker: '0x2222222222222222222222222222222222222222',
        makerToken: '0x3333333333333333333333333333333333333333',
        takerToken: '0x4444444444444444444444444444444444444444',
        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(expiry, constants_1.ZERO, expiry),
        chainId: 1337,
        verifyingContract: '0x0000000000000000000000000000000000000000',
    });
    const otcQuote = {
        allowanceTarget: '0x12345',
        buyAmount: new utils_1.BigNumber(1800054805473),
        sellAmount: new utils_1.BigNumber(1000000000000000000000),
        buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
        sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
        gas: new utils_1.BigNumber(1043459),
        price: new utils_1.BigNumber(1800.054805),
        type: types_3.GaslessTypes.OtcOrder,
        order: otcOrder,
        orderHash: otcOrder.getHash(),
    };
    beforeEach(() => {
        mockBlockchainUtils.getExchangeProxyAddress.mockReturnValue('0x12345');
        jest.clearAllMocks();
    });
    describe('fetchPriceAsync', () => {
        describe('zero-g', () => {
            it('gets an RFQ price if available', async () => {
                mockRfqmService.fetchIndicativeQuoteAsync.mockResolvedValueOnce(price);
                const result = (await gaslessSwapService.fetchPriceAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                }, types_3.GaslessTypes.MetaTransaction));
                expect(result === null || result === void 0 ? void 0 : result.liquiditySource).toEqual('rfq');
                expect(result).toMatchInlineSnapshot(`
                    Object {
                      "allowanceTarget": "0x12345",
                      "buyAmount": "1800054805473",
                      "buyTokenAddress": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                      "gas": "1043459",
                      "liquiditySource": "rfq",
                      "price": "1800.054805",
                      "sellAmount": "1000000000000000000000",
                      "sellTokenAddress": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                    }
                `);
                expect(getMetaTransactionV1QuoteAsyncMock).not.toBeCalled();
            });
            it('gets an AMM price if no RFQ liquidity is available', async () => {
                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce({
                    trade: {
                        kind: types_3.GaslessTypes.MetaTransaction,
                        hash: metaTransactionV1.getHash(),
                        metaTransaction: metaTransactionV1,
                    },
                    price,
                });
                mockRfqmService.fetchIndicativeQuoteAsync.mockResolvedValueOnce(null);
                const result = (await gaslessSwapService.fetchPriceAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                }, types_3.GaslessTypes.MetaTransaction));
                expect(result === null || result === void 0 ? void 0 : result.liquiditySource).toEqual('amm');
                expect(result).toMatchInlineSnapshot(`
                    Object {
                      "allowanceTarget": "0x12345",
                      "buyAmount": "1800054805473",
                      "buyTokenAddress": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                      "gas": "1043459",
                      "liquiditySource": "amm",
                      "price": "1800.054805",
                      "sellAmount": "1000000000000000000000",
                      "sellTokenAddress": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                    }
                `);
            });
            it('gets an AMM price if RFQ request throws', async () => {
                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce({
                    trade: {
                        kind: types_3.GaslessTypes.MetaTransaction,
                        hash: metaTransactionV1.getHash(),
                        metaTransaction: metaTransactionV1,
                    },
                    price,
                });
                mockRfqmService.fetchIndicativeQuoteAsync.mockImplementationOnce(() => {
                    throw new Error('rfqm quote threw up');
                });
                const result = (await gaslessSwapService.fetchPriceAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                }, types_3.GaslessTypes.MetaTransaction));
                expect(result === null || result === void 0 ? void 0 : result.liquiditySource).toEqual('amm');
                expect(result).toMatchInlineSnapshot(`
                    Object {
                      "allowanceTarget": "0x12345",
                      "buyAmount": "1800054805473",
                      "buyTokenAddress": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                      "gas": "1043459",
                      "liquiditySource": "amm",
                      "price": "1800.054805",
                      "sellAmount": "1000000000000000000000",
                      "sellTokenAddress": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                    }
                `);
            });
            it('returns `null` if no liquidity is available', async () => {
                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce(null);
                mockRfqmService.fetchIndicativeQuoteAsync.mockResolvedValueOnce(null);
                const result = await gaslessSwapService.fetchPriceAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                }, types_3.GaslessTypes.MetaTransaction);
                expect(result).toBeNull();
            });
            it('throws if AMM request throws and RFQ has no liquidity / request throws', async () => {
                mockRfqmService.fetchIndicativeQuoteAsync.mockImplementationOnce(() => {
                    throw new Error('rfqm price threw up');
                });
                getMetaTransactionV1QuoteAsyncMock.mockImplementationOnce(() => {
                    throw new Error('amm price threw up');
                });
                await expect(() => gaslessSwapService.fetchPriceAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                }, types_3.GaslessTypes.MetaTransaction)).rejects.toThrow('Error fetching price');
            });
            it('throws validation error if AMM quote throws validation error', async () => {
                getMetaTransactionV1QuoteAsyncMock.mockImplementation(() => {
                    throw new api_utils_1.ValidationError([
                        {
                            field: 'sellAmount',
                            code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                            reason: 'sellAmount too small',
                        },
                    ]);
                });
                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValue({ quote: null, quoteReportId: null });
                await expect(() => gaslessSwapService.fetchPriceAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                }, types_3.GaslessTypes.MetaTransaction)).rejects.toThrow(api_utils_1.ValidationError);
            });
        });
        describe('tx relay v1', () => {
            it('gets a meta-transaction price', async () => {
                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce({
                    trade: {
                        kind: types_3.GaslessTypes.MetaTransaction,
                        hash: metaTransactionV1.getHash(),
                        metaTransaction: metaTransactionV1,
                    },
                    price,
                    sources,
                    fees,
                });
                mockRfqmService.fetchIndicativeQuoteAsync.mockResolvedValueOnce(null);
                const result = (await gaslessSwapService.fetchPriceAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    feeType: 'volume',
                    feeRecipient: integratorAddress,
                    feeSellTokenPercentage: new utils_1.BigNumber(0.1),
                }, types_3.GaslessTypes.MetaTransactionV2));
                expect(result).toMatchInlineSnapshot(`
                    Object {
                      "allowanceTarget": "0x12345",
                      "buyAmount": "1800054805473",
                      "buyTokenAddress": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                      "fees": Object {
                        "gasFee": Object {
                          "feeAmount": "10000000",
                          "feeToken": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                          "feeType": "gas",
                        },
                        "integratorFee": Object {
                          "feeAmount": "1000000000000000000",
                          "feeToken": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                          "feeType": "volume",
                        },
                        "zeroExFee": Object {
                          "feeAmount": "1000000000000000",
                          "feeToken": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                          "feeType": "integrator_share",
                        },
                      },
                      "gas": "1043459",
                      "price": "1800.054805",
                      "sellAmount": "1000000000000000000000",
                      "sellTokenAddress": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                      "sources": Array [
                        Object {
                          "name": "QuickSwap",
                          "proportion": "0.2308",
                        },
                        Object {
                          "name": "DODO_V2",
                          "proportion": "0.07692",
                        },
                        Object {
                          "name": "Uniswap_V3",
                          "proportion": "0.6923",
                        },
                      ],
                    }
                `);
            });
            it('returns `null` if no liquidity is available', async () => {
                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce(null);
                const result = await gaslessSwapService.fetchPriceAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    feeType: 'volume',
                    feeRecipient: integratorAddress,
                    feeSellTokenPercentage: new utils_1.BigNumber(0.1),
                }, types_3.GaslessTypes.MetaTransactionV2);
                expect(result).toBeNull();
            });
            it('throws if meta-transaction request throws', async () => {
                getMetaTransactionV2QuoteAsyncMock.mockImplementationOnce(() => {
                    throw new Error('meta-transaction price throws');
                });
                await expect(() => gaslessSwapService.fetchPriceAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    feeType: 'volume',
                    feeRecipient: integratorAddress,
                    feeSellTokenPercentage: new utils_1.BigNumber(0.1),
                }, types_3.GaslessTypes.MetaTransactionV2)).rejects.toThrow('Error fetching price');
            });
            it('throws validation error if meta-transaction v2 quote throws validation error', async () => {
                getMetaTransactionV2QuoteAsyncMock.mockImplementation(() => {
                    throw new api_utils_1.ValidationError([
                        {
                            field: 'sellAmount',
                            code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                            reason: 'sellAmount too small',
                        },
                    ]);
                });
                await expect(() => gaslessSwapService.fetchPriceAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    feeType: 'volume',
                    feeRecipient: integratorAddress,
                    feeSellTokenPercentage: new utils_1.BigNumber(0.1),
                }, types_3.GaslessTypes.MetaTransactionV2)).rejects.toThrow(api_utils_1.ValidationError);
            });
        });
    });
    describe('fetchQuoteAsync', () => {
        describe('zero-g', () => {
            it('gets an RFQ quote if available', async () => {
                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: otcQuote, quoteReportId: null });
                const result = (await gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                }, types_3.GaslessTypes.MetaTransaction));
                expect(result).not.toBeNull();
                expect(result === null || result === void 0 ? void 0 : result.type).toEqual(types_3.GaslessTypes.OtcOrder);
                expect(result).toMatchInlineSnapshot(`
                    Object {
                      "allowanceTarget": "0x12345",
                      "buyAmount": "1800054805473",
                      "buyTokenAddress": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                      "gas": "1043459",
                      "liquiditySource": "rfq",
                      "order": OtcOrder {
                        "chainId": 1337,
                        "expiry": "10000000000000000",
                        "expiryAndNonce": "62771017353866807638357894232076664161023554444640345128970000000000000000",
                        "maker": "0x2222222222222222222222222222222222222222",
                        "makerAmount": "0",
                        "makerToken": "0x3333333333333333333333333333333333333333",
                        "nonce": "10000000000000000",
                        "nonceBucket": "0",
                        "taker": "0x1111111111111111111111111111111111111111",
                        "takerAmount": "0",
                        "takerToken": "0x4444444444444444444444444444444444444444",
                        "txOrigin": "0x0000000000000000000000000000000000000000",
                        "verifyingContract": "0x0000000000000000000000000000000000000000",
                      },
                      "orderHash": "0x69b784087387d37e2361a40146420a5a68b08375238a5ba0329f612d5673b2ea",
                      "price": "1800.054805",
                      "sellAmount": "1000000000000000000000",
                      "sellTokenAddress": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                      "type": "otc",
                    }
                `);
                expect(getMetaTransactionV1QuoteAsyncMock).not.toBeCalled();
            });
            it('gets an AMM quote if no RFQ liquidity is available', async () => {
                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce({
                    trade: {
                        kind: types_3.GaslessTypes.MetaTransaction,
                        hash: metaTransactionV1.getHash(),
                        metaTransaction: metaTransactionV1,
                    },
                    price,
                });
                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });
                const result = (await gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                }, types_3.GaslessTypes.MetaTransaction));
                expect(result).not.toBeNull();
                expect(result === null || result === void 0 ? void 0 : result.type).toEqual(types_3.GaslessTypes.MetaTransaction);
                if ((result === null || result === void 0 ? void 0 : result.type) !== types_3.GaslessTypes.MetaTransaction) {
                    // Refine type for further assertions
                    throw new Error('Result should be a meta transaction');
                }
                expect(result.metaTransaction.getHash()).toEqual(metaTransactionV1.getHash());
                expect(result).toMatchInlineSnapshot(`
                    Object {
                      "allowanceTarget": "0x12345",
                      "approval": undefined,
                      "buyAmount": "1800054805473",
                      "buyTokenAddress": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                      "gas": "1043459",
                      "liquiditySource": "amm",
                      "metaTransaction": MetaTransaction {
                        "callData": "0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b",
                        "chainId": 137,
                        "expirationTimeSeconds": "9990868679",
                        "feeAmount": "0",
                        "feeToken": "0x0000000000000000000000000000000000000000",
                        "maxGasPrice": "4294967296",
                        "minGasPrice": "1",
                        "salt": "32606650794224190000000000000000000000000000000000000000000000000000000000000",
                        "sender": "0x0000000000000000000000000000000000000000",
                        "signer": "0x4c42a706410f1190f97d26fe3c999c90070aa40f",
                        "value": "0",
                        "verifyingContract": "0xdef1c0ded9bec7f1a1670819833240f027b25eff",
                      },
                      "metaTransactionHash": "0xde5a11983edd012047dd3107532f007a73ae488bfb354f35b8a40580e2a775a1",
                      "price": "1800.054805",
                      "sellAmount": "1000000000000000000000",
                      "sellTokenAddress": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                      "type": "metatransaction",
                    }
                `);
            });
            it('throws validation error if AMM quote throws validation error', async () => {
                getMetaTransactionV1QuoteAsyncMock.mockImplementation(() => {
                    throw new api_utils_1.ValidationError([
                        {
                            field: 'sellAmount',
                            code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                            reason: 'sellAmount too small',
                        },
                    ]);
                });
                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValue({ quote: null, quoteReportId: null });
                await expect(() => gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                }, types_3.GaslessTypes.MetaTransaction)).rejects.toThrow(api_utils_1.ValidationError);
            });
            it('adds an affiliate address if one is included in the integrator configuration but not in the quote request', async () => {
                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce({
                    trade: {
                        kind: types_3.GaslessTypes.MetaTransaction,
                        hash: metaTransactionV1.getHash(),
                        metaTransaction: metaTransactionV1,
                    },
                    price,
                });
                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });
                await gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: { affiliateAddress: '0xaffiliateAddress' },
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                }, types_3.GaslessTypes.MetaTransaction);
                expect(getMetaTransactionV1QuoteAsyncMock.mock.calls[0][ /* params */2]['affiliateAddress']).toEqual('0xaffiliateAddress');
            });
            it('uses the affiliate address in the quote request even if one is present in integrator configuration', async () => {
                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce({
                    trade: {
                        kind: types_3.GaslessTypes.MetaTransaction,
                        hash: metaTransactionV1.getHash(),
                        metaTransaction: metaTransactionV1,
                    },
                    price,
                });
                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });
                await gaslessSwapService.fetchQuoteAsync({
                    affiliateAddress: '0xaffiliateAddressShouldUse',
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: { affiliateAddress: '0xaffiliateAddressShouldntUse' },
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                }, types_3.GaslessTypes.MetaTransaction);
                expect(getMetaTransactionV1QuoteAsyncMock.mock.calls[0][ /* params */2]['affiliateAddress']).toEqual('0xaffiliateAddressShouldUse');
            });
            it('returns `null` if no liquidity is available', async () => {
                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });
                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce(null);
                const result = await gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                }, types_3.GaslessTypes.MetaTransaction);
                expect(result).toBeNull();
            });
            it('throws if AMM request throws and RFQ has no liquidity / request throws', async () => {
                mockRfqmService.fetchFirmQuoteAsync.mockImplementationOnce(() => {
                    throw new Error('rfqm price threw up');
                });
                getMetaTransactionV1QuoteAsyncMock.mockImplementationOnce(() => {
                    throw new Error('amm price threw up');
                });
                await expect(() => gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                }, types_3.GaslessTypes.MetaTransaction)).rejects.toThrow('Error fetching quote');
            });
            it('stores a metatransaction hash', async () => {
                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce({
                    trade: {
                        kind: types_3.GaslessTypes.MetaTransaction,
                        hash: metaTransactionV1.getHash(),
                        metaTransaction: metaTransactionV1,
                    },
                    price,
                });
                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });
                await gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                }, types_3.GaslessTypes.MetaTransaction);
                expect(mockRedis.set).toBeCalledWith(`metaTransactionHash.${metaTransactionV1.getHash()}`, 0, 'EX', 900);
            });
            it('gets the approval object', async () => {
                const approvalResponse = {
                    isRequired: true,
                };
                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce({
                    trade: {
                        kind: types_3.GaslessTypes.MetaTransaction,
                        hash: metaTransactionV1.getHash(),
                        metaTransaction: metaTransactionV1,
                    },
                    price,
                });
                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });
                mockRfqmService.getGaslessApprovalResponseAsync.mockResolvedValueOnce(approvalResponse);
                const result = await gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: true,
                }, types_3.GaslessTypes.MetaTransaction);
                expect(result === null || result === void 0 ? void 0 : result.approval).not.toBeUndefined();
            });
        });
        describe('tx relay v1', () => {
            it('gets a meta-transaction quote', async () => {
                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce({
                    trade: {
                        kind: types_3.GaslessTypes.MetaTransaction,
                        hash: metaTransactionV1.getHash(),
                        metaTransaction: metaTransactionV1,
                    },
                    price,
                    sources,
                    fees,
                });
                const result = (await gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                    feeType: 'volume',
                    feeRecipient: integratorAddress,
                    feeSellTokenPercentage: new utils_1.BigNumber(0.1),
                }, types_3.GaslessTypes.MetaTransactionV2));
                expect(result).not.toBeNull();
                expect(result === null || result === void 0 ? void 0 : result.trade.kind).toEqual(types_3.GaslessTypes.MetaTransaction);
                expect(result === null || result === void 0 ? void 0 : result.trade.hash).toEqual(metaTransactionV1.getHash());
                console.log(result);
                expect(result).toMatchInlineSnapshot(`
                    Object {
                      "allowanceTarget": "0x12345",
                      "approval": undefined,
                      "buyAmount": "1800054805473",
                      "buyTokenAddress": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                      "fees": Object {
                        "gasFee": Object {
                          "feeAmount": "10000000",
                          "feeToken": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                          "feeType": "gas",
                        },
                        "integratorFee": Object {
                          "feeAmount": "1000000000000000000",
                          "feeToken": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                          "feeType": "volume",
                        },
                        "zeroExFee": Object {
                          "feeAmount": "1000000000000000",
                          "feeToken": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                          "feeType": "integrator_share",
                        },
                      },
                      "gas": "1043459",
                      "price": "1800.054805",
                      "sellAmount": "1000000000000000000000",
                      "sellTokenAddress": "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                      "sources": Array [
                        Object {
                          "name": "QuickSwap",
                          "proportion": "0.2308",
                        },
                        Object {
                          "name": "DODO_V2",
                          "proportion": "0.07692",
                        },
                        Object {
                          "name": "Uniswap_V3",
                          "proportion": "0.6923",
                        },
                      ],
                      "trade": Object {
                        "hash": "0xde5a11983edd012047dd3107532f007a73ae488bfb354f35b8a40580e2a775a1",
                        "kind": "metatransaction",
                        "metaTransaction": MetaTransaction {
                          "callData": "0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b",
                          "chainId": 137,
                          "expirationTimeSeconds": "9990868679",
                          "feeAmount": "0",
                          "feeToken": "0x0000000000000000000000000000000000000000",
                          "maxGasPrice": "4294967296",
                          "minGasPrice": "1",
                          "salt": "32606650794224190000000000000000000000000000000000000000000000000000000000000",
                          "sender": "0x0000000000000000000000000000000000000000",
                          "signer": "0x4c42a706410f1190f97d26fe3c999c90070aa40f",
                          "value": "0",
                          "verifyingContract": "0xdef1c0ded9bec7f1a1670819833240f027b25eff",
                        },
                      },
                    }
                `);
            });
            it('throws validation error if meta-transaction throws validation error', async () => {
                getMetaTransactionV2QuoteAsyncMock.mockImplementation(() => {
                    throw new api_utils_1.ValidationError([
                        {
                            field: 'sellAmount',
                            code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                            reason: 'sellAmount too small',
                        },
                    ]);
                });
                await expect(() => gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                    feeType: 'volume',
                    feeRecipient: integratorAddress,
                    feeSellTokenPercentage: new utils_1.BigNumber(0.1),
                }, types_3.GaslessTypes.MetaTransactionV2)).rejects.toThrow(api_utils_1.ValidationError);
            });
            it('adds an affiliate address if one is included in the integrator configuration but not in the quote request', async () => {
                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce({
                    trade: {
                        kind: types_3.GaslessTypes.MetaTransaction,
                        hash: metaTransactionV1.getHash(),
                        metaTransaction: metaTransactionV1,
                    },
                    price,
                    sources,
                    fees,
                });
                await gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: { affiliateAddress: '0xaffiliateAddress' },
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                    feeType: 'volume',
                    feeRecipient: integratorAddress,
                    feeSellTokenPercentage: new utils_1.BigNumber(0.1),
                }, types_3.GaslessTypes.MetaTransactionV2);
                expect(getMetaTransactionV2QuoteAsyncMock.mock.calls[0][ /* params */2]['affiliateAddress']).toEqual('0xaffiliateAddress');
            });
            it('uses the affiliate address in the quote request even if one is present in integrator configuration', async () => {
                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce({
                    trade: {
                        kind: types_3.GaslessTypes.MetaTransaction,
                        hash: metaTransactionV1.getHash(),
                        metaTransaction: metaTransactionV1,
                    },
                    price,
                    sources,
                    fees,
                });
                await gaslessSwapService.fetchQuoteAsync({
                    affiliateAddress: '0xaffiliateAddressShouldUse',
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: { affiliateAddress: '0xaffiliateAddressShouldntUse' },
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                    feeType: 'volume',
                    feeRecipient: integratorAddress,
                    feeSellTokenPercentage: new utils_1.BigNumber(0.1),
                }, types_3.GaslessTypes.MetaTransactionV2);
                expect(getMetaTransactionV2QuoteAsyncMock.mock.calls[0][ /* params */2]['affiliateAddress']).toEqual('0xaffiliateAddressShouldUse');
            });
            it('returns `null` if no liquidity is available', async () => {
                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce(null);
                const result = await gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                    feeType: 'volume',
                    feeRecipient: integratorAddress,
                    feeSellTokenPercentage: new utils_1.BigNumber(0.1),
                }, types_3.GaslessTypes.MetaTransactionV2);
                expect(result).toBeNull();
            });
            it('throws if meta-transaction request throws', async () => {
                getMetaTransactionV2QuoteAsyncMock.mockImplementationOnce(() => {
                    throw new Error('meta-transaction request throws');
                });
                await expect(() => gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                    feeType: 'volume',
                    feeRecipient: integratorAddress,
                    feeSellTokenPercentage: new utils_1.BigNumber(0.1),
                }, types_3.GaslessTypes.MetaTransactionV2)).rejects.toThrow('Error fetching quote');
            });
            it('stores a metatransaction hash', async () => {
                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce({
                    trade: {
                        kind: types_3.GaslessTypes.MetaTransaction,
                        hash: metaTransactionV1.getHash(),
                        metaTransaction: metaTransactionV1,
                    },
                    price,
                    sources,
                    fees,
                });
                await gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: false,
                    feeType: 'volume',
                    feeRecipient: integratorAddress,
                    feeSellTokenPercentage: new utils_1.BigNumber(0.1),
                }, types_3.GaslessTypes.MetaTransactionV2);
                expect(mockRedis.set).toBeCalledWith(`metaTransactionHash.${metaTransactionV2.getHash()}`, 0, 'EX', 900);
            });
            it('gets the approval object', async () => {
                const approvalResponse = {
                    isRequired: true,
                };
                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce({
                    trade: {
                        kind: types_3.GaslessTypes.MetaTransaction,
                        hash: metaTransactionV1.getHash(),
                        metaTransaction: metaTransactionV1,
                    },
                    price,
                    sources,
                    fees,
                });
                mockRfqmService.getGaslessApprovalResponseAsync.mockResolvedValueOnce(approvalResponse);
                const result = await gaslessSwapService.fetchQuoteAsync({
                    buyAmount: new utils_1.BigNumber(1800054805473),
                    buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyTokenDecimals: 6,
                    integrator: {},
                    sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sellTokenDecimals: 18,
                    takerAddress: '0xtaker',
                    checkApproval: true,
                    feeType: 'volume',
                    feeRecipient: integratorAddress,
                    feeSellTokenPercentage: new utils_1.BigNumber(0.1),
                }, types_3.GaslessTypes.MetaTransactionV2);
                expect(result === null || result === void 0 ? void 0 : result.approval).not.toBeUndefined();
            });
        });
    });
    describe('processSubmitAsync', () => {
        describe('zero-g', () => {
            it('fails if the metatransaction is expired', async () => {
                const expiredMetaTransaction = new protocol_utils_1.MetaTransaction({
                    callData: '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',
                    chainId: 137,
                    verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
                    expirationTimeSeconds: new utils_1.BigNumber('420'),
                    feeAmount: new utils_1.BigNumber(0),
                    feeToken: '0x0000000000000000000000000000000000000000',
                    maxGasPrice: new utils_1.BigNumber(4294967296),
                    minGasPrice: new utils_1.BigNumber(1),
                    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                    // eslint-disable-next-line @typescript-eslint/no-loss-of-precision
                    salt: new utils_1.BigNumber(32606650794224189614795510724011106220035660490560169776986607186708081701146),
                    sender: '0x0000000000000000000000000000000000000000',
                    signer: '0x4C42a706410F1190f97D26Fe3c999c90070aa40F',
                    value: new utils_1.BigNumber(0),
                });
                await expect(() => gaslessSwapService.processSubmitAsync({
                    kind: types_3.GaslessTypes.MetaTransaction,
                    trade: {
                        metaTransaction: expiredMetaTransaction,
                        type: types_3.GaslessTypes.MetaTransaction,
                        signature: {
                            r: '',
                            s: '',
                            signatureType: protocol_utils_1.SignatureType.EthSign,
                            v: 1,
                        },
                    },
                }, 'integratorId')).rejects.toThrowError(api_utils_1.ValidationError);
            });
            it("fails if the metatransaction hash doesn't exist in the redis store", async () => {
                mockRedis.get = jest.fn().mockResolvedValueOnce(null);
                await expect(() => gaslessSwapService.processSubmitAsync({
                    kind: types_3.GaslessTypes.MetaTransaction,
                    trade: {
                        metaTransaction: metaTransactionV1,
                        type: types_3.GaslessTypes.MetaTransaction,
                        signature: {
                            r: '',
                            s: '',
                            signatureType: protocol_utils_1.SignatureType.EthSign,
                            v: 1,
                        },
                    },
                }, 'integratorId')).rejects.toThrowError('MetaTransaction hash not found');
                expect(mockRedis.get).toBeCalledWith(`metaTransactionHash.${metaTransactionV1.getHash()}`);
            });
            it('fails if there is already a pending transaction for the taker/taker token', async () => {
                mockRedis.get = jest.fn().mockResolvedValueOnce({});
                mockDbUtils.findMetaTransactionJobsWithStatusesAsync.mockResolvedValueOnce([
                    new entities_1.MetaTransactionJobEntity({
                        chainId: 1337,
                        expiry: metaTransactionV1.expirationTimeSeconds,
                        fee: {
                            amount: metaTransactionV1.feeAmount,
                            token: metaTransactionV1.feeToken,
                            type: 'fixed',
                        },
                        inputToken: price.sellTokenAddress,
                        inputTokenAmount: price.sellAmount,
                        integratorId: 'integrator-id',
                        metaTransaction: metaTransactionV1,
                        metaTransactionHash: '0xotherhash',
                        minOutputTokenAmount: new utils_1.BigNumber(0),
                        outputToken: price.buyTokenAddress,
                        status: types_1.RfqmJobStatus.PendingProcessing,
                        takerAddress: metaTransactionV1.signer,
                        takerSignature: {
                            r: '',
                            s: '',
                            signatureType: protocol_utils_1.SignatureType.EthSign,
                            v: 1,
                        },
                    }),
                ]);
                await expect(() => gaslessSwapService.processSubmitAsync({
                    kind: types_3.GaslessTypes.MetaTransaction,
                    trade: {
                        metaTransaction: metaTransactionV1,
                        type: types_3.GaslessTypes.MetaTransaction,
                        signature: (0, protocol_utils_1.ethSignHashWithKey)(metaTransactionV1.getHash(), takerPrivateKey),
                    },
                }, 'integratorId')).rejects.toThrowError('pending trade');
            });
            it('fails if the signature is invalid', async () => {
                const otherPrivateKey = '0xae4536e2cdee8f32adc77ebe86977a01c6526a32eee7c4c2ccfb1d5ddcddaaa2';
                mockRedis.get = jest.fn().mockResolvedValueOnce({});
                mockDbUtils.findMetaTransactionJobsWithStatusesAsync.mockResolvedValueOnce([]);
                await expect(() => gaslessSwapService.processSubmitAsync({
                    kind: types_3.GaslessTypes.MetaTransaction,
                    trade: {
                        metaTransaction: metaTransactionV1,
                        type: types_3.GaslessTypes.MetaTransaction,
                        signature: (0, protocol_utils_1.ethSignHashWithKey)(metaTransactionV1.getHash(), otherPrivateKey),
                    },
                }, 'integratorId')).rejects.toThrow(api_utils_1.ValidationError);
            });
            it('fails if taker balance is too low', async () => {
                mockRedis.get = jest.fn().mockResolvedValueOnce({});
                mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync.mockResolvedValueOnce([new utils_1.BigNumber(21)]);
                await expect(() => gaslessSwapService.processSubmitAsync({
                    kind: types_3.GaslessTypes.MetaTransaction,
                    trade: {
                        metaTransaction: metaTransactionV1,
                        type: types_3.GaslessTypes.MetaTransaction,
                        signature: (0, protocol_utils_1.ethSignHashWithKey)(metaTransactionV1.getHash(), takerPrivateKey),
                    },
                }, 'integratorId')).rejects.toThrow(api_utils_1.ValidationError);
            });
            it('creates a metatransaction job', async () => {
                mockRedis.get = jest.fn().mockResolvedValueOnce({});
                mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync = jest
                    .fn()
                    .mockResolvedValueOnce([price.sellAmount]);
                mockDbUtils.writeMetaTransactionJobAsync.mockResolvedValueOnce({
                    id: 'id',
                });
                const result = await gaslessSwapService.processSubmitAsync({
                    kind: types_3.GaslessTypes.MetaTransaction,
                    trade: {
                        metaTransaction: metaTransactionV1,
                        type: types_3.GaslessTypes.MetaTransaction,
                        signature: (0, protocol_utils_1.ethSignHashWithKey)(metaTransactionV1.getHash(), takerPrivateKey),
                    },
                }, 'integratorId');
                expect(result.metaTransactionHash).toEqual(metaTransactionV1.getHash());
                expect(result.type).toEqual(types_3.GaslessTypes.MetaTransaction);
                // tslint:disable-next-line: no-unbound-method
                expect(mockSqsProducer.send).toHaveBeenCalledWith({
                    body: '{"id":"id","type":"metatransaction"}',
                    deduplicationId: 'id',
                    groupId: 'id',
                    id: 'id',
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,