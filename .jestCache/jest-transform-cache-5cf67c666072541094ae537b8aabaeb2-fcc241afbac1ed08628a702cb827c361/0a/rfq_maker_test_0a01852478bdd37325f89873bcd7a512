f7693f9083de9a5c5aba19895a478a14
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:custom-no-magic-numbers
// tslint:disable:no-empty
// tslint:disable:max-file-line-count
const chai_1 = require("chai");
const HttpStatus = require("http-status-codes");
const request = require("supertest");
const ts_mockito_1 = require("ts-mockito");
const typeorm_1 = require("typeorm");
const config = require("../src/config");
const constants_1 = require("../src/core/constants");
const entities_1 = require("../src/entities");
const http_rfqm_service_runner_1 = require("../src/runners/http_rfqm_service_runner");
const rfqm_service_1 = require("../src/services/rfqm_service");
const rfq_admin_service_1 = require("../src/services/rfq_admin_service");
const rfq_maker_service_1 = require("../src/services/rfq_maker_service");
const config_manager_1 = require("../src/utils/config_manager");
describe('RFQ maker API tests', () => {
    const makerApiKey = '111222333';
    const unknownMakerApiKey = '111222334';
    const makerId = '11';
    const chainId = 56;
    const invalidChainId = 57;
    const pairs = [
        ['0x374a16f5e686c09b0cc9e8bc3466b3b645c74aa7', '0xf84830b73b2ed3c7267e7638f500110ea47fdf30'],
    ];
    const invalidPairs = [['0x374a16f5e686c09b0cc9e8bc3466b3b645c74aa7', '123']];
    const rfqMaker = new entities_1.RfqMaker({ makerId, chainId, updatedAt: null, pairs, rfqtUri: null, rfqmUri: null });
    let app;
    let server;
    let mockRfqMakerService;
    beforeAll(async () => {
        const connection = (0, ts_mockito_1.mock)(typeorm_1.Connection);
        const configManagerMock = (0, ts_mockito_1.mock)(config_manager_1.ConfigManager);
        const mockRfqmService = (0, ts_mockito_1.mock)(rfqm_service_1.RfqmService);
        const mockRfqAdminService = (0, ts_mockito_1.mock)(rfq_admin_service_1.RfqAdminService);
        mockRfqMakerService = (0, ts_mockito_1.mock)(rfq_maker_service_1.RfqMakerService);
        (0, ts_mockito_1.when)(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).thenReturn(makerId);
        (0, ts_mockito_1.when)(mockRfqMakerService.getRfqMakerAsync(makerId, chainId)).thenResolve(rfqMaker);
        (0, ts_mockito_1.when)(mockRfqMakerService.createOrUpdateRfqMakerAsync(makerId, chainId, (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(rfqMaker);
        const mockRfqmServices = new Map([[chainId, mockRfqmService]]);
        // Start the server
        const res = await (0, http_rfqm_service_runner_1.runHttpRfqmServiceAsync)(mockRfqmServices, new Map(), mockRfqAdminService, (0, ts_mockito_1.instance)(mockRfqMakerService), configManagerMock, config.defaultHttpServiceConfig, connection, false);
        app = res.app;
        server = res.server;
    });
    beforeEach(() => {
        (0, ts_mockito_1.resetCalls)(mockRfqMakerService);
    });
    afterAll(async () => {
        await new Promise((resolve, reject) => {
            server.close((err) => {
                if (err) {
                    reject(err);
                }
                resolve();
            });
        });
    });
    describe('GET /maker/v1/chain-id/:chainId', () => {
        it('should return a 401 UNAUTHORIZED without maker api key', async () => {
            const response = await request(app)
                .get(`${constants_1.RFQ_MAKER_PATH}/chain-id/${chainId}`)
                .expect(HttpStatus.UNAUTHORIZED)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.error).to.be.eq('Invalid api key.');
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(undefined)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('should return a 401 UNAUTHORIZED with an unknown maker api key', async () => {
            const response = await request(app)
                .get(`${constants_1.RFQ_MAKER_PATH}/chain-id/${chainId}`)
                .set(constants_1.RFQ_MAKER_API_KEY_HEADER, unknownMakerApiKey)
                .expect(HttpStatus.UNAUTHORIZED)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.error).to.be.eq('Invalid api key.');
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(unknownMakerApiKey)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('should return a 400 BAD_REQUEST with an invalid chainId', async () => {
            const response = await request(app)
                .get(`${constants_1.RFQ_MAKER_PATH}/chain-id/${invalidChainId}`)
                .set(constants_1.RFQ_MAKER_API_KEY_HEADER, makerApiKey)
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.error).to.be.eq('Invalid chainId.');
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('should return a 200 OK with active pairs', async () => {
            const response = await request(app)
                .get(`${constants_1.RFQ_MAKER_PATH}/chain-id/${chainId}`)
                .set(constants_1.RFQ_MAKER_API_KEY_HEADER, makerApiKey)
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.makerId).to.be.eq(makerId);
            (0, chai_1.expect)(response.body.chainId).to.be.eq(chainId);
            (0, chai_1.expect)(response.body.pairs).to.deep.equal(pairs);
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync(makerId, chainId)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
    });
    describe('PUT /maker/v1/chain-id/:chainId', () => {
        it('should return a 401 UNAUTHORIZED without maker api key', async () => {
            const response = await request(app)
                .put(`${constants_1.RFQ_MAKER_PATH}/chain-id/${chainId}`)
                .send({ pairs, rfqtUri: null, rfqmUri: null })
                .expect(HttpStatus.UNAUTHORIZED)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.error).to.be.eq('Invalid api key.');
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(undefined)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('should return a 401 UNAUTHORIZED with an unknown maker api key', async () => {
            const response = await request(app)
                .put(`${constants_1.RFQ_MAKER_PATH}/chain-id/${chainId}`)
                .send({ pairs, rfqtUri: null, rfqmUri: null })
                .set(constants_1.RFQ_MAKER_API_KEY_HEADER, unknownMakerApiKey)
                .expect(HttpStatus.UNAUTHORIZED)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.error).to.be.eq('Invalid api key.');
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(unknownMakerApiKey)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('should return a 400 BAD_REQUEST with an invalid chainId', async () => {
            const response = await request(app)
                .put(`${constants_1.RFQ_MAKER_PATH}/chain-id/${invalidChainId}`)
                .send({ pairs, rfqtUri: null, rfqmUri: null })
                .set(constants_1.RFQ_MAKER_API_KEY_HEADER, makerApiKey)
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.error).to.be.eq('Invalid chainId.');
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('should return a 400 BAD_REQUEST with an invalid pairs payload', async () => {
            const response = await request(app)
                .put(`${constants_1.RFQ_MAKER_PATH}/chain-id/${chainId}`)
                .send({ pairs: invalidPairs, rfqtUri: null, rfqmUri: null })
                .set(constants_1.RFQ_MAKER_API_KEY_HEADER, makerApiKey)
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.error).to.be.eq('address of second token for pair 0 is invalid.');
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('should return a 201 CREATED on a valid PUT', async () => {
            const response = await request(app)
                .put(`${constants_1.RFQ_MAKER_PATH}/chain-id/${chainId}`)
                .send({ pairs, rfqtUri: null, rfqmUri: null })
                .set(constants_1.RFQ_MAKER_API_KEY_HEADER, makerApiKey)
                .expect(HttpStatus.CREATED)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.makerId).to.be.eq(makerId);
            (0, chai_1.expect)(response.body.chainId).to.be.eq(chainId);
            (0, chai_1.expect)(response.body.pairs).to.deep.equal(pairs);
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync(makerId, chainId, (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).once();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,