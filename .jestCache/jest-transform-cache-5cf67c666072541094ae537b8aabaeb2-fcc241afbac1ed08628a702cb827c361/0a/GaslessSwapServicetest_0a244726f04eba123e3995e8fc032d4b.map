{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/services/GaslessSwapService.test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/services/GaslessSwapService.test.ts"],"sourcesContent":["// tslint:disable: max-file-line-count\nimport { ValidationError, ValidationErrorCodes } from '@0x/api-utils';\nimport { AssetSwapperContractAddresses as ContractAddresses, SupportedProvider } from '@0x/asset-swapper';\nimport { ethSignHashWithKey, MetaTransaction, OtcOrder, SignatureType } from '@0x/protocol-utils';\nimport { BigNumber } from '@0x/utils';\nimport { AxiosInstance } from 'axios';\nimport { providers } from 'ethers';\nimport Redis from 'ioredis';\nimport { Producer } from 'sqs-producer';\nimport { Connection } from 'typeorm';\n\nimport { Integrator } from '../../src/config';\nimport { DEFAULT_MIN_EXPIRY_DURATION_MS, ZERO } from '../../src/core/constants';\nimport { MetaTransactionJobEntity } from '../../src/entities';\nimport { RfqmJobStatus } from '../../src/entities/types';\nimport { GaslessSwapService } from '../../src/services/GaslessSwapService';\nimport { FeeService } from '../../src/services/fee_service';\nimport { RfqmService } from '../../src/services/rfqm_service';\nimport { RfqMakerBalanceCacheService } from '../../src/services/rfq_maker_balance_cache_service';\nimport {\n    ApprovalResponse,\n    FetchIndicativeQuoteResponse,\n    LiquiditySource,\n    MetaTransactionV1QuoteResponse,\n    MetaTransactionV2QuoteResponse,\n    MetaTransactionV2,\n    OtcOrderRfqmQuoteResponse,\n} from '../../src/services/types';\nimport { BalanceChecker } from '../../src/utils/balance_checker';\nimport { CacheClient } from '../../src/utils/cache_client';\nimport { getV1QuoteAsync, getV2QuoteAsync } from '../../src/utils/MetaTransactionClient';\nimport { QuoteServerClient } from '../../src/utils/quote_server_client';\nimport { RfqmDbUtils } from '../../src/utils/rfqm_db_utils';\nimport { RfqBlockchainUtils } from '../../src/utils/rfq_blockchain_utils';\nimport { RfqMakerManager } from '../../src/utils/rfq_maker_manager';\nimport { TokenMetadataManager } from '../../src/utils/TokenMetadataManager';\nimport { GaslessTypes } from '../../src/core/types';\nimport { Fees } from '../../src/core/types/meta_transaction_fees';\n\njest.mock('../../src/services/rfqm_service', () => {\n    return {\n        RfqmService: jest.fn().mockImplementation(() => {\n            return {\n                fetchFirmQuoteAsync: jest.fn(),\n                fetchIndicativeQuoteAsync: jest.fn(),\n                getGaslessApprovalResponseAsync: jest.fn(),\n            };\n        }),\n    };\n});\n\njest.mock('../../src/utils/MetaTransactionClient', () => {\n    return {\n        getV1QuoteAsync: jest.fn(),\n        getV2QuoteAsync: jest.fn(),\n    };\n});\n\njest.mock('../../src/utils/rfq_blockchain_utils', () => {\n    return {\n        RfqBlockchainUtils: jest.fn().mockImplementation(() => {\n            return {\n                getTokenBalancesAsync: jest.fn(),\n                getMinOfBalancesAndAllowancesAsync: jest.fn(),\n                getExchangeProxyAddress: jest.fn(),\n            };\n        }),\n    };\n});\n\njest.mock('../../src/utils/rfqm_db_utils', () => {\n    return {\n        RfqmDbUtils: jest.fn().mockImplementation(() => {\n            return {\n                findMetaTransactionJobsWithStatusesAsync: jest.fn().mockResolvedValue([]),\n                writeMetaTransactionJobAsync: jest.fn(),\n            };\n        }),\n    };\n});\n\njest.mock('ioredis', () => {\n    return {\n        default: jest.fn().mockImplementation(() => {\n            return {\n                set: jest.fn(),\n                get: jest.fn(),\n            };\n        }),\n    };\n});\n\njest.mock('sqs-producer', () => {\n    return {\n        Producer: jest.fn().mockImplementation(() => {\n            return {\n                send: jest.fn(),\n            };\n        }),\n    };\n});\n\n// tslint:disable: no-object-literal-type-assertion\nconst getMetaTransactionV1QuoteAsyncMock = getV1QuoteAsync as jest.Mock<\n    ReturnType<typeof getV1QuoteAsync>,\n    Parameters<typeof getV1QuoteAsync>\n>;\nconst getMetaTransactionV2QuoteAsyncMock = getV2QuoteAsync as jest.Mock<\n    ReturnType<typeof getV2QuoteAsync>,\n    Parameters<typeof getV2QuoteAsync>\n>;\nconst mockSqsProducer = jest.mocked(new Producer({}));\nconst mockDbUtils = jest.mocked(new RfqmDbUtils({} as Connection));\nconst mockBlockchainUtils = jest.mocked(\n    new RfqBlockchainUtils({} as SupportedProvider, '0xdefi', {} as BalanceChecker, {} as providers.JsonRpcProvider),\n);\n\nconst mockRfqmService = jest.mocked(\n    new RfqmService(\n        0,\n        {} as FeeService,\n        0,\n        {} as ContractAddresses,\n        '0x0',\n        {} as RfqBlockchainUtils,\n        {} as RfqmDbUtils,\n        {} as Producer,\n        {} as QuoteServerClient,\n        DEFAULT_MIN_EXPIRY_DURATION_MS,\n        {} as CacheClient,\n        {} as RfqMakerBalanceCacheService,\n        {} as RfqMakerManager,\n        {} as TokenMetadataManager,\n    ),\n);\n\nconst mockRedis = jest.mocked(new Redis());\n\nconst gaslessSwapService = new GaslessSwapService(\n    /* chainId */ 1337, // tslint:disable-line: custom-no-magic-numbers\n    mockRfqmService,\n    new URL('https://hokiesports.com/quote'),\n    {} as AxiosInstance,\n    mockRedis,\n    mockDbUtils,\n    mockBlockchainUtils,\n    mockSqsProducer,\n);\n\ndescribe('GaslessSwapService', () => {\n    const takerPrivateKey = '0xd2c2349e10170e4219d9febd1c663ea5c7334f79c38d25f4f52c85af796c7c05';\n    const integratorAddress = '0x4ea754349ace5303c82f0d1d491041e042f2ad22';\n    const zeroExAddress = '0x4ea754349ace5303c82f0d1d491041e042f2ad22';\n    const metaTransactionV1 = new MetaTransaction({\n        callData:\n            '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',\n        chainId: 137,\n        verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\n        expirationTimeSeconds: new BigNumber('9990868679'),\n        feeAmount: new BigNumber(0),\n        feeToken: '0x0000000000000000000000000000000000000000',\n        maxGasPrice: new BigNumber(4294967296),\n        minGasPrice: new BigNumber(1),\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-loss-of-precision\n        salt: new BigNumber(32606650794224189614795510724011106220035660490560169776986607186708081701146),\n        sender: '0x0000000000000000000000000000000000000000',\n        signer: '0x4c42a706410f1190f97d26fe3c999c90070aa40f',\n        value: new BigNumber(0),\n    });\n    // TODO: This needs to be updated to the new meta-transaction type when smart contract changes are finished and corresponding types are published in packages\n    const metaTransactionV2 = new MetaTransactionV2({\n        callData:\n            '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',\n        chainId: 137,\n        verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\n        expirationTimeSeconds: new BigNumber('9990868679'),\n        feeAmount: new BigNumber(0),\n        feeToken: '0x0000000000000000000000000000000000000000',\n        maxGasPrice: new BigNumber(4294967296),\n        minGasPrice: new BigNumber(1),\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-loss-of-precision\n        salt: new BigNumber(32606650794224189614795510724011106220035660490560169776986607186708081701146),\n        sender: '0x0000000000000000000000000000000000000000',\n        signer: '0x4c42a706410f1190f97d26fe3c999c90070aa40f',\n        value: new BigNumber(0),\n    });\n    const price: FetchIndicativeQuoteResponse = {\n        allowanceTarget: '0x12345',\n        buyAmount: new BigNumber(1800054805473),\n        sellAmount: new BigNumber(1000000000000000000000),\n        buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n        sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n        gas: new BigNumber(1043459),\n        price: new BigNumber(1800.054805),\n    };\n    const sources: LiquiditySource[] = [\n        {\n            name: 'QuickSwap',\n            proportion: new BigNumber('0.2308'),\n        },\n        {\n            name: 'DODO_V2',\n            proportion: new BigNumber('0.07692'),\n        },\n        {\n            name: 'Uniswap_V3',\n            proportion: new BigNumber('0.6923'),\n        },\n    ];\n    const fees: Fees = {\n        integratorFee: {\n            type: 'volume',\n            feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n            feeAmount: new BigNumber(1000000000000000000),\n            feeRecipient: integratorAddress,\n            billingType: 'on-chain',\n            volumePercentage: new BigNumber(0.1),\n        },\n        zeroExFee: {\n            type: 'integrator_share',\n            feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n            feeAmount: new BigNumber(1000000000000000),\n            feeRecipient: zeroExAddress,\n            billingType: 'on-chain',\n            integratorSharePercentage: new BigNumber(0.1),\n        },\n        gasFee: {\n            type: 'gas',\n            gasPrice: new BigNumber(115200000000),\n            feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n            feeAmount: new BigNumber(10000000),\n            feeRecipient: null,\n            billingType: 'off-chain',\n            estimatedGas: new BigNumber(1043459),\n            feeTokenAmountPerBaseUnitNativeToken: new BigNumber(0.001),\n        },\n    };\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n    // eslint-disable-next-line @typescript-eslint/no-loss-of-precision\n    const expiry = new BigNumber(9999999999999999); // tslint:disable-line custom-no-magic-numbers\n    const otcOrder = new OtcOrder({\n        txOrigin: '0x0000000000000000000000000000000000000000',\n        taker: '0x1111111111111111111111111111111111111111',\n        maker: '0x2222222222222222222222222222222222222222',\n        makerToken: '0x3333333333333333333333333333333333333333',\n        takerToken: '0x4444444444444444444444444444444444444444',\n        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(expiry, ZERO, expiry),\n        chainId: 1337,\n        verifyingContract: '0x0000000000000000000000000000000000000000',\n    });\n    const otcQuote: OtcOrderRfqmQuoteResponse = {\n        allowanceTarget: '0x12345',\n        buyAmount: new BigNumber(1800054805473),\n        sellAmount: new BigNumber(1000000000000000000000),\n        buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n        sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n        gas: new BigNumber(1043459),\n        price: new BigNumber(1800.054805),\n        type: GaslessTypes.OtcOrder,\n        order: otcOrder,\n        orderHash: otcOrder.getHash(),\n    };\n\n    beforeEach(() => {\n        mockBlockchainUtils.getExchangeProxyAddress.mockReturnValue('0x12345');\n        jest.clearAllMocks();\n    });\n\n    describe('fetchPriceAsync', () => {\n        describe('zero-g', () => {\n            it('gets an RFQ price if available', async () => {\n                mockRfqmService.fetchIndicativeQuoteAsync.mockResolvedValueOnce(price);\n\n                const result = (await gaslessSwapService.fetchPriceAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                    },\n                    GaslessTypes.MetaTransaction,\n                )) as FetchIndicativeQuoteResponse & { liquiditySource: 'rfq' | 'amm' };\n\n                expect(result?.liquiditySource).toEqual('rfq');\n                expect(result).toMatchInlineSnapshot(`\n                    Object {\n                      \"allowanceTarget\": \"0x12345\",\n                      \"buyAmount\": \"1800054805473\",\n                      \"buyTokenAddress\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n                      \"gas\": \"1043459\",\n                      \"liquiditySource\": \"rfq\",\n                      \"price\": \"1800.054805\",\n                      \"sellAmount\": \"1000000000000000000000\",\n                      \"sellTokenAddress\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\n                    }\n                `);\n                expect(getMetaTransactionV1QuoteAsyncMock).not.toBeCalled();\n            });\n\n            it('gets an AMM price if no RFQ liquidity is available', async () => {\n                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce({\n                    trade: {\n                        kind: GaslessTypes.MetaTransaction,\n                        hash: metaTransactionV1.getHash(),\n                        metaTransaction: metaTransactionV1,\n                    },\n                    price,\n                });\n                mockRfqmService.fetchIndicativeQuoteAsync.mockResolvedValueOnce(null);\n\n                const result = (await gaslessSwapService.fetchPriceAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                    },\n                    GaslessTypes.MetaTransaction,\n                )) as FetchIndicativeQuoteResponse & { liquiditySource: 'rfq' | 'amm' };\n\n                expect(result?.liquiditySource).toEqual('amm');\n                expect(result).toMatchInlineSnapshot(`\n                    Object {\n                      \"allowanceTarget\": \"0x12345\",\n                      \"buyAmount\": \"1800054805473\",\n                      \"buyTokenAddress\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n                      \"gas\": \"1043459\",\n                      \"liquiditySource\": \"amm\",\n                      \"price\": \"1800.054805\",\n                      \"sellAmount\": \"1000000000000000000000\",\n                      \"sellTokenAddress\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\n                    }\n                `);\n            });\n\n            it('gets an AMM price if RFQ request throws', async () => {\n                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce({\n                    trade: {\n                        kind: GaslessTypes.MetaTransaction,\n                        hash: metaTransactionV1.getHash(),\n                        metaTransaction: metaTransactionV1,\n                    },\n                    price,\n                });\n                mockRfqmService.fetchIndicativeQuoteAsync.mockImplementationOnce(() => {\n                    throw new Error('rfqm quote threw up');\n                });\n\n                const result = (await gaslessSwapService.fetchPriceAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                    },\n                    GaslessTypes.MetaTransaction,\n                )) as FetchIndicativeQuoteResponse & { liquiditySource: 'rfq' | 'amm' };\n\n                expect(result?.liquiditySource).toEqual('amm');\n                expect(result).toMatchInlineSnapshot(`\n                    Object {\n                      \"allowanceTarget\": \"0x12345\",\n                      \"buyAmount\": \"1800054805473\",\n                      \"buyTokenAddress\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n                      \"gas\": \"1043459\",\n                      \"liquiditySource\": \"amm\",\n                      \"price\": \"1800.054805\",\n                      \"sellAmount\": \"1000000000000000000000\",\n                      \"sellTokenAddress\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\n                    }\n                `);\n            });\n\n            it('returns `null` if no liquidity is available', async () => {\n                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce(null);\n                mockRfqmService.fetchIndicativeQuoteAsync.mockResolvedValueOnce(null);\n\n                const result = await gaslessSwapService.fetchPriceAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                    },\n                    GaslessTypes.MetaTransaction,\n                );\n\n                expect(result).toBeNull();\n            });\n\n            it('throws if AMM request throws and RFQ has no liquidity / request throws', async () => {\n                mockRfqmService.fetchIndicativeQuoteAsync.mockImplementationOnce(() => {\n                    throw new Error('rfqm price threw up');\n                });\n                getMetaTransactionV1QuoteAsyncMock.mockImplementationOnce(() => {\n                    throw new Error('amm price threw up');\n                });\n\n                await expect(() =>\n                    gaslessSwapService.fetchPriceAsync(\n                        {\n                            buyAmount: new BigNumber(1800054805473),\n                            buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                            buyTokenDecimals: 6,\n                            integrator: {} as Integrator,\n                            sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                            sellTokenDecimals: 18,\n                        },\n                        GaslessTypes.MetaTransaction,\n                    ),\n                ).rejects.toThrow('Error fetching price');\n            });\n\n            it('throws validation error if AMM quote throws validation error', async () => {\n                getMetaTransactionV1QuoteAsyncMock.mockImplementation(() => {\n                    throw new ValidationError([\n                        {\n                            field: 'sellAmount',\n                            code: ValidationErrorCodes.FieldInvalid,\n                            reason: 'sellAmount too small',\n                        },\n                    ]);\n                });\n                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValue({ quote: null, quoteReportId: null });\n\n                await expect(() =>\n                    gaslessSwapService.fetchPriceAsync(\n                        {\n                            buyAmount: new BigNumber(1800054805473),\n                            buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                            buyTokenDecimals: 6,\n                            integrator: {} as Integrator,\n                            sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                            sellTokenDecimals: 18,\n                            takerAddress: '0xtaker',\n                        },\n                        GaslessTypes.MetaTransaction,\n                    ),\n                ).rejects.toThrow(ValidationError);\n            });\n        });\n\n        describe('tx relay v1', () => {\n            it('gets a meta-transaction price', async () => {\n                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce({\n                    trade: {\n                        kind: GaslessTypes.MetaTransaction,\n                        hash: metaTransactionV1.getHash(),\n                        metaTransaction: metaTransactionV1,\n                    },\n                    price,\n                    sources,\n                    fees,\n                });\n                mockRfqmService.fetchIndicativeQuoteAsync.mockResolvedValueOnce(null);\n\n                const result = (await gaslessSwapService.fetchPriceAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        feeType: 'volume',\n                        feeRecipient: integratorAddress,\n                        feeSellTokenPercentage: new BigNumber(0.1),\n                    },\n                    GaslessTypes.MetaTransactionV2,\n                )) as FetchIndicativeQuoteResponse & { sources: LiquiditySource[]; fees?: Fees };\n\n                expect(result).toMatchInlineSnapshot(`\n                    Object {\n                      \"allowanceTarget\": \"0x12345\",\n                      \"buyAmount\": \"1800054805473\",\n                      \"buyTokenAddress\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n                      \"fees\": Object {\n                        \"gasFee\": Object {\n                          \"feeAmount\": \"10000000\",\n                          \"feeToken\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\n                          \"feeType\": \"gas\",\n                        },\n                        \"integratorFee\": Object {\n                          \"feeAmount\": \"1000000000000000000\",\n                          \"feeToken\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\n                          \"feeType\": \"volume\",\n                        },\n                        \"zeroExFee\": Object {\n                          \"feeAmount\": \"1000000000000000\",\n                          \"feeToken\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\n                          \"feeType\": \"integrator_share\",\n                        },\n                      },\n                      \"gas\": \"1043459\",\n                      \"price\": \"1800.054805\",\n                      \"sellAmount\": \"1000000000000000000000\",\n                      \"sellTokenAddress\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\n                      \"sources\": Array [\n                        Object {\n                          \"name\": \"QuickSwap\",\n                          \"proportion\": \"0.2308\",\n                        },\n                        Object {\n                          \"name\": \"DODO_V2\",\n                          \"proportion\": \"0.07692\",\n                        },\n                        Object {\n                          \"name\": \"Uniswap_V3\",\n                          \"proportion\": \"0.6923\",\n                        },\n                      ],\n                    }\n                `);\n            });\n\n            it('returns `null` if no liquidity is available', async () => {\n                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce(null);\n\n                const result = await gaslessSwapService.fetchPriceAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        feeType: 'volume',\n                        feeRecipient: integratorAddress,\n                        feeSellTokenPercentage: new BigNumber(0.1),\n                    },\n                    GaslessTypes.MetaTransactionV2,\n                );\n\n                expect(result).toBeNull();\n            });\n\n            it('throws if meta-transaction request throws', async () => {\n                getMetaTransactionV2QuoteAsyncMock.mockImplementationOnce(() => {\n                    throw new Error('meta-transaction price throws');\n                });\n\n                await expect(() =>\n                    gaslessSwapService.fetchPriceAsync(\n                        {\n                            buyAmount: new BigNumber(1800054805473),\n                            buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                            buyTokenDecimals: 6,\n                            integrator: {} as Integrator,\n                            sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                            sellTokenDecimals: 18,\n                            feeType: 'volume',\n                            feeRecipient: integratorAddress,\n                            feeSellTokenPercentage: new BigNumber(0.1),\n                        },\n                        GaslessTypes.MetaTransactionV2,\n                    ),\n                ).rejects.toThrow('Error fetching price');\n            });\n\n            it('throws validation error if meta-transaction v2 quote throws validation error', async () => {\n                getMetaTransactionV2QuoteAsyncMock.mockImplementation(() => {\n                    throw new ValidationError([\n                        {\n                            field: 'sellAmount',\n                            code: ValidationErrorCodes.FieldInvalid,\n                            reason: 'sellAmount too small',\n                        },\n                    ]);\n                });\n\n                await expect(() =>\n                    gaslessSwapService.fetchPriceAsync(\n                        {\n                            buyAmount: new BigNumber(1800054805473),\n                            buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                            buyTokenDecimals: 6,\n                            integrator: {} as Integrator,\n                            sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                            sellTokenDecimals: 18,\n                            takerAddress: '0xtaker',\n                            feeType: 'volume',\n                            feeRecipient: integratorAddress,\n                            feeSellTokenPercentage: new BigNumber(0.1),\n                        },\n                        GaslessTypes.MetaTransactionV2,\n                    ),\n                ).rejects.toThrow(ValidationError);\n            });\n        });\n    });\n\n    describe('fetchQuoteAsync', () => {\n        describe('zero-g', () => {\n            it('gets an RFQ quote if available', async () => {\n                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: otcQuote, quoteReportId: null });\n\n                const result = (await gaslessSwapService.fetchQuoteAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        takerAddress: '0xtaker',\n                        checkApproval: false,\n                    },\n                    GaslessTypes.MetaTransaction,\n                )) as OtcOrderRfqmQuoteResponse & { liquiditySource: 'rfq' | 'amm' };\n\n                expect(result).not.toBeNull();\n                expect(result?.type).toEqual(GaslessTypes.OtcOrder);\n                expect(result).toMatchInlineSnapshot(`\n                    Object {\n                      \"allowanceTarget\": \"0x12345\",\n                      \"buyAmount\": \"1800054805473\",\n                      \"buyTokenAddress\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n                      \"gas\": \"1043459\",\n                      \"liquiditySource\": \"rfq\",\n                      \"order\": OtcOrder {\n                        \"chainId\": 1337,\n                        \"expiry\": \"10000000000000000\",\n                        \"expiryAndNonce\": \"62771017353866807638357894232076664161023554444640345128970000000000000000\",\n                        \"maker\": \"0x2222222222222222222222222222222222222222\",\n                        \"makerAmount\": \"0\",\n                        \"makerToken\": \"0x3333333333333333333333333333333333333333\",\n                        \"nonce\": \"10000000000000000\",\n                        \"nonceBucket\": \"0\",\n                        \"taker\": \"0x1111111111111111111111111111111111111111\",\n                        \"takerAmount\": \"0\",\n                        \"takerToken\": \"0x4444444444444444444444444444444444444444\",\n                        \"txOrigin\": \"0x0000000000000000000000000000000000000000\",\n                        \"verifyingContract\": \"0x0000000000000000000000000000000000000000\",\n                      },\n                      \"orderHash\": \"0x69b784087387d37e2361a40146420a5a68b08375238a5ba0329f612d5673b2ea\",\n                      \"price\": \"1800.054805\",\n                      \"sellAmount\": \"1000000000000000000000\",\n                      \"sellTokenAddress\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\n                      \"type\": \"otc\",\n                    }\n                `);\n                expect(getMetaTransactionV1QuoteAsyncMock).not.toBeCalled();\n            });\n\n            it('gets an AMM quote if no RFQ liquidity is available', async () => {\n                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce({\n                    trade: {\n                        kind: GaslessTypes.MetaTransaction,\n                        hash: metaTransactionV1.getHash(),\n                        metaTransaction: metaTransactionV1,\n                    },\n                    price,\n                });\n                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });\n\n                const result = (await gaslessSwapService.fetchQuoteAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        takerAddress: '0xtaker',\n                        checkApproval: false,\n                    },\n                    GaslessTypes.MetaTransaction,\n                )) as MetaTransactionV1QuoteResponse & { liquiditySource: 'rfq' | 'amm' };\n\n                expect(result).not.toBeNull();\n                expect(result?.type).toEqual(GaslessTypes.MetaTransaction);\n                if (result?.type !== GaslessTypes.MetaTransaction) {\n                    // Refine type for further assertions\n                    throw new Error('Result should be a meta transaction');\n                }\n                expect(result.metaTransaction.getHash()).toEqual(metaTransactionV1.getHash());\n                expect(result).toMatchInlineSnapshot(`\n                    Object {\n                      \"allowanceTarget\": \"0x12345\",\n                      \"approval\": undefined,\n                      \"buyAmount\": \"1800054805473\",\n                      \"buyTokenAddress\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n                      \"gas\": \"1043459\",\n                      \"liquiditySource\": \"amm\",\n                      \"metaTransaction\": MetaTransaction {\n                        \"callData\": \"0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b\",\n                        \"chainId\": 137,\n                        \"expirationTimeSeconds\": \"9990868679\",\n                        \"feeAmount\": \"0\",\n                        \"feeToken\": \"0x0000000000000000000000000000000000000000\",\n                        \"maxGasPrice\": \"4294967296\",\n                        \"minGasPrice\": \"1\",\n                        \"salt\": \"32606650794224190000000000000000000000000000000000000000000000000000000000000\",\n                        \"sender\": \"0x0000000000000000000000000000000000000000\",\n                        \"signer\": \"0x4c42a706410f1190f97d26fe3c999c90070aa40f\",\n                        \"value\": \"0\",\n                        \"verifyingContract\": \"0xdef1c0ded9bec7f1a1670819833240f027b25eff\",\n                      },\n                      \"metaTransactionHash\": \"0xde5a11983edd012047dd3107532f007a73ae488bfb354f35b8a40580e2a775a1\",\n                      \"price\": \"1800.054805\",\n                      \"sellAmount\": \"1000000000000000000000\",\n                      \"sellTokenAddress\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\n                      \"type\": \"metatransaction\",\n                    }\n                `);\n            });\n\n            it('throws validation error if AMM quote throws validation error', async () => {\n                getMetaTransactionV1QuoteAsyncMock.mockImplementation(() => {\n                    throw new ValidationError([\n                        {\n                            field: 'sellAmount',\n                            code: ValidationErrorCodes.FieldInvalid,\n                            reason: 'sellAmount too small',\n                        },\n                    ]);\n                });\n                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValue({ quote: null, quoteReportId: null });\n\n                await expect(() =>\n                    gaslessSwapService.fetchQuoteAsync(\n                        {\n                            buyAmount: new BigNumber(1800054805473),\n                            buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                            buyTokenDecimals: 6,\n                            integrator: {} as Integrator,\n                            sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                            sellTokenDecimals: 18,\n                            takerAddress: '0xtaker',\n                            checkApproval: false,\n                        },\n                        GaslessTypes.MetaTransaction,\n                    ),\n                ).rejects.toThrow(ValidationError);\n            });\n\n            it('adds an affiliate address if one is included in the integrator configuration but not in the quote request', async () => {\n                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce({\n                    trade: {\n                        kind: GaslessTypes.MetaTransaction,\n                        hash: metaTransactionV1.getHash(),\n                        metaTransaction: metaTransactionV1,\n                    },\n                    price,\n                });\n                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });\n\n                await gaslessSwapService.fetchQuoteAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: { affiliateAddress: '0xaffiliateAddress' } as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        takerAddress: '0xtaker',\n                        checkApproval: false,\n                    },\n                    GaslessTypes.MetaTransaction,\n                );\n                expect(getMetaTransactionV1QuoteAsyncMock.mock.calls[0][/* params */ 2]['affiliateAddress']).toEqual(\n                    '0xaffiliateAddress',\n                );\n            });\n\n            it('uses the affiliate address in the quote request even if one is present in integrator configuration', async () => {\n                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce({\n                    trade: {\n                        kind: GaslessTypes.MetaTransaction,\n                        hash: metaTransactionV1.getHash(),\n                        metaTransaction: metaTransactionV1,\n                    },\n                    price,\n                });\n                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });\n\n                await gaslessSwapService.fetchQuoteAsync(\n                    {\n                        affiliateAddress: '0xaffiliateAddressShouldUse',\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: { affiliateAddress: '0xaffiliateAddressShouldntUse' } as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        takerAddress: '0xtaker',\n                        checkApproval: false,\n                    },\n                    GaslessTypes.MetaTransaction,\n                );\n                expect(getMetaTransactionV1QuoteAsyncMock.mock.calls[0][/* params */ 2]['affiliateAddress']).toEqual(\n                    '0xaffiliateAddressShouldUse',\n                );\n            });\n\n            it('returns `null` if no liquidity is available', async () => {\n                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });\n                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce(null);\n\n                const result = await gaslessSwapService.fetchQuoteAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        takerAddress: '0xtaker',\n                        checkApproval: false,\n                    },\n                    GaslessTypes.MetaTransaction,\n                );\n\n                expect(result).toBeNull();\n            });\n\n            it('throws if AMM request throws and RFQ has no liquidity / request throws', async () => {\n                mockRfqmService.fetchFirmQuoteAsync.mockImplementationOnce(() => {\n                    throw new Error('rfqm price threw up');\n                });\n                getMetaTransactionV1QuoteAsyncMock.mockImplementationOnce(() => {\n                    throw new Error('amm price threw up');\n                });\n\n                await expect(() =>\n                    gaslessSwapService.fetchQuoteAsync(\n                        {\n                            buyAmount: new BigNumber(1800054805473),\n                            buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                            buyTokenDecimals: 6,\n                            integrator: {} as Integrator,\n                            sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                            sellTokenDecimals: 18,\n                            takerAddress: '0xtaker',\n                            checkApproval: false,\n                        },\n                        GaslessTypes.MetaTransaction,\n                    ),\n                ).rejects.toThrow('Error fetching quote');\n            });\n\n            it('stores a metatransaction hash', async () => {\n                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce({\n                    trade: {\n                        kind: GaslessTypes.MetaTransaction,\n                        hash: metaTransactionV1.getHash(),\n                        metaTransaction: metaTransactionV1,\n                    },\n                    price,\n                });\n                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });\n\n                await gaslessSwapService.fetchQuoteAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        takerAddress: '0xtaker',\n                        checkApproval: false,\n                    },\n                    GaslessTypes.MetaTransaction,\n                );\n\n                expect(mockRedis.set).toBeCalledWith(\n                    `metaTransactionHash.${metaTransactionV1.getHash()}`,\n                    0,\n                    'EX',\n                    900,\n                );\n            });\n\n            it('gets the approval object', async () => {\n                const approvalResponse: ApprovalResponse = {\n                    isRequired: true,\n                };\n                getMetaTransactionV1QuoteAsyncMock.mockResolvedValueOnce({\n                    trade: {\n                        kind: GaslessTypes.MetaTransaction,\n                        hash: metaTransactionV1.getHash(),\n                        metaTransaction: metaTransactionV1,\n                    },\n                    price,\n                });\n                mockRfqmService.fetchFirmQuoteAsync.mockResolvedValueOnce({ quote: null, quoteReportId: null });\n                mockRfqmService.getGaslessApprovalResponseAsync.mockResolvedValueOnce(approvalResponse);\n\n                const result = await gaslessSwapService.fetchQuoteAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        takerAddress: '0xtaker',\n                        checkApproval: true,\n                    },\n                    GaslessTypes.MetaTransaction,\n                );\n\n                expect(result?.approval).not.toBeUndefined();\n            });\n        });\n\n        describe('tx relay v1', () => {\n            it('gets a meta-transaction quote', async () => {\n                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce({\n                    trade: {\n                        kind: GaslessTypes.MetaTransaction,\n                        hash: metaTransactionV1.getHash(),\n                        metaTransaction: metaTransactionV1,\n                    },\n                    price,\n                    sources,\n                    fees,\n                });\n\n                const result = (await gaslessSwapService.fetchQuoteAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        takerAddress: '0xtaker',\n                        checkApproval: false,\n                        feeType: 'volume',\n                        feeRecipient: integratorAddress,\n                        feeSellTokenPercentage: new BigNumber(0.1),\n                    },\n                    GaslessTypes.MetaTransactionV2,\n                )) as MetaTransactionV2QuoteResponse;\n\n                expect(result).not.toBeNull();\n                expect(result?.trade.kind).toEqual(GaslessTypes.MetaTransaction);\n                expect(result?.trade.hash).toEqual(metaTransactionV1.getHash());\n                console.log(result);\n                expect(result).toMatchInlineSnapshot(`\n                    Object {\n                      \"allowanceTarget\": \"0x12345\",\n                      \"approval\": undefined,\n                      \"buyAmount\": \"1800054805473\",\n                      \"buyTokenAddress\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n                      \"fees\": Object {\n                        \"gasFee\": Object {\n                          \"feeAmount\": \"10000000\",\n                          \"feeToken\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\n                          \"feeType\": \"gas\",\n                        },\n                        \"integratorFee\": Object {\n                          \"feeAmount\": \"1000000000000000000\",\n                          \"feeToken\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\n                          \"feeType\": \"volume\",\n                        },\n                        \"zeroExFee\": Object {\n                          \"feeAmount\": \"1000000000000000\",\n                          \"feeToken\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\n                          \"feeType\": \"integrator_share\",\n                        },\n                      },\n                      \"gas\": \"1043459\",\n                      \"price\": \"1800.054805\",\n                      \"sellAmount\": \"1000000000000000000000\",\n                      \"sellTokenAddress\": \"0x7ceb23fd6bc0add59e62ac25578270cff1b9f619\",\n                      \"sources\": Array [\n                        Object {\n                          \"name\": \"QuickSwap\",\n                          \"proportion\": \"0.2308\",\n                        },\n                        Object {\n                          \"name\": \"DODO_V2\",\n                          \"proportion\": \"0.07692\",\n                        },\n                        Object {\n                          \"name\": \"Uniswap_V3\",\n                          \"proportion\": \"0.6923\",\n                        },\n                      ],\n                      \"trade\": Object {\n                        \"hash\": \"0xde5a11983edd012047dd3107532f007a73ae488bfb354f35b8a40580e2a775a1\",\n                        \"kind\": \"metatransaction\",\n                        \"metaTransaction\": MetaTransaction {\n                          \"callData\": \"0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b\",\n                          \"chainId\": 137,\n                          \"expirationTimeSeconds\": \"9990868679\",\n                          \"feeAmount\": \"0\",\n                          \"feeToken\": \"0x0000000000000000000000000000000000000000\",\n                          \"maxGasPrice\": \"4294967296\",\n                          \"minGasPrice\": \"1\",\n                          \"salt\": \"32606650794224190000000000000000000000000000000000000000000000000000000000000\",\n                          \"sender\": \"0x0000000000000000000000000000000000000000\",\n                          \"signer\": \"0x4c42a706410f1190f97d26fe3c999c90070aa40f\",\n                          \"value\": \"0\",\n                          \"verifyingContract\": \"0xdef1c0ded9bec7f1a1670819833240f027b25eff\",\n                        },\n                      },\n                    }\n                `);\n            });\n\n            it('throws validation error if meta-transaction throws validation error', async () => {\n                getMetaTransactionV2QuoteAsyncMock.mockImplementation(() => {\n                    throw new ValidationError([\n                        {\n                            field: 'sellAmount',\n                            code: ValidationErrorCodes.FieldInvalid,\n                            reason: 'sellAmount too small',\n                        },\n                    ]);\n                });\n\n                await expect(() =>\n                    gaslessSwapService.fetchQuoteAsync(\n                        {\n                            buyAmount: new BigNumber(1800054805473),\n                            buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                            buyTokenDecimals: 6,\n                            integrator: {} as Integrator,\n                            sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                            sellTokenDecimals: 18,\n                            takerAddress: '0xtaker',\n                            checkApproval: false,\n                            feeType: 'volume',\n                            feeRecipient: integratorAddress,\n                            feeSellTokenPercentage: new BigNumber(0.1),\n                        },\n                        GaslessTypes.MetaTransactionV2,\n                    ),\n                ).rejects.toThrow(ValidationError);\n            });\n\n            it('adds an affiliate address if one is included in the integrator configuration but not in the quote request', async () => {\n                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce({\n                    trade: {\n                        kind: GaslessTypes.MetaTransaction,\n                        hash: metaTransactionV1.getHash(),\n                        metaTransaction: metaTransactionV1,\n                    },\n                    price,\n                    sources,\n                    fees,\n                });\n\n                await gaslessSwapService.fetchQuoteAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: { affiliateAddress: '0xaffiliateAddress' } as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        takerAddress: '0xtaker',\n                        checkApproval: false,\n                        feeType: 'volume',\n                        feeRecipient: integratorAddress,\n                        feeSellTokenPercentage: new BigNumber(0.1),\n                    },\n                    GaslessTypes.MetaTransactionV2,\n                );\n                expect(getMetaTransactionV2QuoteAsyncMock.mock.calls[0][/* params */ 2]['affiliateAddress']).toEqual(\n                    '0xaffiliateAddress',\n                );\n            });\n\n            it('uses the affiliate address in the quote request even if one is present in integrator configuration', async () => {\n                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce({\n                    trade: {\n                        kind: GaslessTypes.MetaTransaction,\n                        hash: metaTransactionV1.getHash(),\n                        metaTransaction: metaTransactionV1,\n                    },\n                    price,\n                    sources,\n                    fees,\n                });\n\n                await gaslessSwapService.fetchQuoteAsync(\n                    {\n                        affiliateAddress: '0xaffiliateAddressShouldUse',\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: { affiliateAddress: '0xaffiliateAddressShouldntUse' } as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        takerAddress: '0xtaker',\n                        checkApproval: false,\n                        feeType: 'volume',\n                        feeRecipient: integratorAddress,\n                        feeSellTokenPercentage: new BigNumber(0.1),\n                    },\n                    GaslessTypes.MetaTransactionV2,\n                );\n                expect(getMetaTransactionV2QuoteAsyncMock.mock.calls[0][/* params */ 2]['affiliateAddress']).toEqual(\n                    '0xaffiliateAddressShouldUse',\n                );\n            });\n\n            it('returns `null` if no liquidity is available', async () => {\n                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce(null);\n\n                const result = await gaslessSwapService.fetchQuoteAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        takerAddress: '0xtaker',\n                        checkApproval: false,\n                        feeType: 'volume',\n                        feeRecipient: integratorAddress,\n                        feeSellTokenPercentage: new BigNumber(0.1),\n                    },\n                    GaslessTypes.MetaTransactionV2,\n                );\n\n                expect(result).toBeNull();\n            });\n\n            it('throws if meta-transaction request throws', async () => {\n                getMetaTransactionV2QuoteAsyncMock.mockImplementationOnce(() => {\n                    throw new Error('meta-transaction request throws');\n                });\n\n                await expect(() =>\n                    gaslessSwapService.fetchQuoteAsync(\n                        {\n                            buyAmount: new BigNumber(1800054805473),\n                            buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                            buyTokenDecimals: 6,\n                            integrator: {} as Integrator,\n                            sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                            sellTokenDecimals: 18,\n                            takerAddress: '0xtaker',\n                            checkApproval: false,\n                            feeType: 'volume',\n                            feeRecipient: integratorAddress,\n                            feeSellTokenPercentage: new BigNumber(0.1),\n                        },\n                        GaslessTypes.MetaTransactionV2,\n                    ),\n                ).rejects.toThrow('Error fetching quote');\n            });\n\n            it('stores a metatransaction hash', async () => {\n                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce({\n                    trade: {\n                        kind: GaslessTypes.MetaTransaction,\n                        hash: metaTransactionV1.getHash(),\n                        metaTransaction: metaTransactionV1,\n                    },\n                    price,\n                    sources,\n                    fees,\n                });\n\n                await gaslessSwapService.fetchQuoteAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        takerAddress: '0xtaker',\n                        checkApproval: false,\n                        feeType: 'volume',\n                        feeRecipient: integratorAddress,\n                        feeSellTokenPercentage: new BigNumber(0.1),\n                    },\n                    GaslessTypes.MetaTransactionV2,\n                );\n\n                expect(mockRedis.set).toBeCalledWith(\n                    `metaTransactionHash.${metaTransactionV2.getHash()}`,\n                    0,\n                    'EX',\n                    900,\n                );\n            });\n\n            it('gets the approval object', async () => {\n                const approvalResponse: ApprovalResponse = {\n                    isRequired: true,\n                };\n                getMetaTransactionV2QuoteAsyncMock.mockResolvedValueOnce({\n                    trade: {\n                        kind: GaslessTypes.MetaTransaction,\n                        hash: metaTransactionV1.getHash(),\n                        metaTransaction: metaTransactionV1,\n                    },\n                    price,\n                    sources,\n                    fees,\n                });\n                mockRfqmService.getGaslessApprovalResponseAsync.mockResolvedValueOnce(approvalResponse);\n\n                const result = await gaslessSwapService.fetchQuoteAsync(\n                    {\n                        buyAmount: new BigNumber(1800054805473),\n                        buyToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n                        buyTokenDecimals: 6,\n                        integrator: {} as Integrator,\n                        sellToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                        sellTokenDecimals: 18,\n                        takerAddress: '0xtaker',\n                        checkApproval: true,\n                        feeType: 'volume',\n                        feeRecipient: integratorAddress,\n                        feeSellTokenPercentage: new BigNumber(0.1),\n                    },\n                    GaslessTypes.MetaTransactionV2,\n                );\n\n                expect(result?.approval).not.toBeUndefined();\n            });\n        });\n    });\n\n    describe('processSubmitAsync', () => {\n        describe('zero-g', () => {\n            it('fails if the metatransaction is expired', async () => {\n                const expiredMetaTransaction = new MetaTransaction({\n                    callData:\n                        '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',\n                    chainId: 137,\n                    verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',\n                    expirationTimeSeconds: new BigNumber('420'),\n                    feeAmount: new BigNumber(0),\n                    feeToken: '0x0000000000000000000000000000000000000000',\n                    maxGasPrice: new BigNumber(4294967296),\n                    minGasPrice: new BigNumber(1),\n                    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                    // eslint-disable-next-line @typescript-eslint/no-loss-of-precision\n                    salt: new BigNumber(32606650794224189614795510724011106220035660490560169776986607186708081701146),\n                    sender: '0x0000000000000000000000000000000000000000',\n                    signer: '0x4C42a706410F1190f97D26Fe3c999c90070aa40F',\n                    value: new BigNumber(0),\n                });\n\n                await expect(() =>\n                    gaslessSwapService.processSubmitAsync(\n                        {\n                            kind: GaslessTypes.MetaTransaction,\n                            trade: {\n                                metaTransaction: expiredMetaTransaction,\n                                type: GaslessTypes.MetaTransaction,\n                                signature: {\n                                    r: '',\n                                    s: '',\n                                    signatureType: SignatureType.EthSign,\n                                    v: 1,\n                                },\n                            },\n                        },\n\n                        'integratorId',\n                    ),\n                ).rejects.toThrowError(ValidationError);\n            });\n\n            it(\"fails if the metatransaction hash doesn't exist in the redis store\", async () => {\n                mockRedis.get = jest.fn().mockResolvedValueOnce(null);\n                await expect(() =>\n                    gaslessSwapService.processSubmitAsync(\n                        {\n                            kind: GaslessTypes.MetaTransaction,\n                            trade: {\n                                metaTransaction: metaTransactionV1,\n                                type: GaslessTypes.MetaTransaction,\n                                signature: {\n                                    r: '',\n                                    s: '',\n                                    signatureType: SignatureType.EthSign,\n                                    v: 1,\n                                },\n                            },\n                        },\n                        'integratorId',\n                    ),\n                ).rejects.toThrowError('MetaTransaction hash not found');\n                expect(mockRedis.get).toBeCalledWith(`metaTransactionHash.${metaTransactionV1.getHash()}`);\n            });\n\n            it('fails if there is already a pending transaction for the taker/taker token', async () => {\n                mockRedis.get = jest.fn().mockResolvedValueOnce({});\n                mockDbUtils.findMetaTransactionJobsWithStatusesAsync.mockResolvedValueOnce([\n                    new MetaTransactionJobEntity({\n                        chainId: 1337,\n                        expiry: metaTransactionV1.expirationTimeSeconds,\n                        fee: {\n                            amount: metaTransactionV1.feeAmount,\n                            token: metaTransactionV1.feeToken,\n                            type: 'fixed',\n                        },\n                        inputToken: price.sellTokenAddress,\n                        inputTokenAmount: price.sellAmount,\n                        integratorId: 'integrator-id',\n                        metaTransaction: metaTransactionV1,\n                        metaTransactionHash: '0xotherhash',\n                        minOutputTokenAmount: new BigNumber(0),\n                        outputToken: price.buyTokenAddress,\n                        status: RfqmJobStatus.PendingProcessing,\n                        takerAddress: metaTransactionV1.signer,\n                        takerSignature: {\n                            r: '',\n                            s: '',\n                            signatureType: SignatureType.EthSign,\n                            v: 1,\n                        },\n                    }),\n                ]);\n                await expect(() =>\n                    gaslessSwapService.processSubmitAsync(\n                        {\n                            kind: GaslessTypes.MetaTransaction,\n                            trade: {\n                                metaTransaction: metaTransactionV1,\n                                type: GaslessTypes.MetaTransaction,\n                                signature: ethSignHashWithKey(metaTransactionV1.getHash(), takerPrivateKey),\n                            },\n                        },\n                        'integratorId',\n                    ),\n                ).rejects.toThrowError('pending trade');\n            });\n\n            it('fails if the signature is invalid', async () => {\n                const otherPrivateKey = '0xae4536e2cdee8f32adc77ebe86977a01c6526a32eee7c4c2ccfb1d5ddcddaaa2';\n                mockRedis.get = jest.fn().mockResolvedValueOnce({});\n                mockDbUtils.findMetaTransactionJobsWithStatusesAsync.mockResolvedValueOnce([]);\n                await expect(() =>\n                    gaslessSwapService.processSubmitAsync(\n                        {\n                            kind: GaslessTypes.MetaTransaction,\n                            trade: {\n                                metaTransaction: metaTransactionV1,\n                                type: GaslessTypes.MetaTransaction,\n                                signature: ethSignHashWithKey(metaTransactionV1.getHash(), otherPrivateKey),\n                            },\n                        },\n                        'integratorId',\n                    ),\n                ).rejects.toThrow(ValidationError);\n            });\n\n            it('fails if taker balance is too low', async () => {\n                mockRedis.get = jest.fn().mockResolvedValueOnce({});\n                mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync.mockResolvedValueOnce([new BigNumber(21)]);\n                await expect(() =>\n                    gaslessSwapService.processSubmitAsync(\n                        {\n                            kind: GaslessTypes.MetaTransaction,\n                            trade: {\n                                metaTransaction: metaTransactionV1,\n                                type: GaslessTypes.MetaTransaction,\n                                signature: ethSignHashWithKey(metaTransactionV1.getHash(), takerPrivateKey),\n                            },\n                        },\n                        'integratorId',\n                    ),\n                ).rejects.toThrow(ValidationError);\n            });\n\n            it('creates a metatransaction job', async () => {\n                mockRedis.get = jest.fn().mockResolvedValueOnce({});\n                mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync = jest\n                    .fn()\n                    .mockResolvedValueOnce([price.sellAmount]);\n\n                mockDbUtils.writeMetaTransactionJobAsync.mockResolvedValueOnce({\n                    id: 'id',\n                } as MetaTransactionJobEntity);\n\n                const result = await gaslessSwapService.processSubmitAsync(\n                    {\n                        kind: GaslessTypes.MetaTransaction,\n                        trade: {\n                            metaTransaction: metaTransactionV1,\n                            type: GaslessTypes.MetaTransaction,\n                            signature: ethSignHashWithKey(metaTransactionV1.getHash(), takerPrivateKey),\n                        },\n                    },\n                    'integratorId',\n                );\n\n                expect(result.metaTransactionHash).toEqual(metaTransactionV1.getHash());\n                expect(result.type).toEqual(GaslessTypes.MetaTransaction);\n                // tslint:disable-next-line: no-unbound-method\n                expect(mockSqsProducer.send).toHaveBeenCalledWith({\n                    body: '{\"id\":\"id\",\"type\":\"metatransaction\"}',\n                    deduplicationId: 'id',\n                    groupId: 'id',\n                    id: 'id',\n                });\n            });\n        });\n    });\n});\n"],"version":3}