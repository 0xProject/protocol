b12d9eaadb8b116b58f3a44cde75b056
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GaslessSwapService = void 0;
// tslint:disable:max-file-line-count
const api_utils_1 = require("@0x/api-utils");
const contract_wrappers_1 = require("@0x/contract-wrappers");
const utils_1 = require("@0x/utils");
const ethers_1 = require("ethers");
const prom_client_1 = require("prom-client");
const constants_1 = require("../core/constants");
const types_1 = require("../entities/types");
const logger_1 = require("../logger");
const types_2 = require("../core/types");
const MetaTransactionClient_1 = require("../utils/MetaTransactionClient");
const signature_utils_1 = require("../utils/signature_utils");
/**
 * When a metatransaction quote is issued, the hash
 * is stored in Redis. When a quote is submitted, it
 * is only accepted if the metatransaction hash is in
 * Redis. This prevents a malicious user submitting
 * a quote which was not issued by 0x.
 *
 * The length of time the quote metatransaction hash
 * is stored in Redis.
 */
const META_TRANSACTION_HASH_TTL_S = 15 * constants_1.ONE_MINUTE_S; // tslint:disable-line binary-expression-operand-order custom-no-magic-numbers
var GaslessSwapServiceErrorReason;
(function (GaslessSwapServiceErrorReason) {
    GaslessSwapServiceErrorReason["MetaTransactionAboutToExpire"] = "meta_transaction_about_to_expire";
    GaslessSwapServiceErrorReason["MetaTransactionPendingJobAlreadyExist"] = "meta_transaction_pending_job_already_exist";
    GaslessSwapServiceErrorReason["MetaTransactionTakerBalanceCheckFailed"] = "meta_transaction_taker_balance_check_failed";
    GaslessSwapServiceErrorReason["MetaTransactionHashNotExist"] = "meta_transaction_hash_does_not_exist";
    GaslessSwapServiceErrorReason["MetaTransactionInvalidSigner"] = "meta_transaction_invalid_signer";
    GaslessSwapServiceErrorReason["MetaTransactionFailedToQueue"] = "meta_transaction_failed_to_queue";
    GaslessSwapServiceErrorReason["RfqPriceError"] = "rfq_price_error";
    GaslessSwapServiceErrorReason["AmmPriceError"] = "amm_price_error";
    GaslessSwapServiceErrorReason["RfqQuoteError"] = "rfq_quote_error";
    GaslessSwapServiceErrorReason["AmmQuoteError"] = "amm_quote_error";
})(GaslessSwapServiceErrorReason || (GaslessSwapServiceErrorReason = {}));
/**
 * Produces a key for Redis using the MetaTransaction hash
 */
function metaTransactionHashRedisKey(hash) {
    return `metaTransactionHash.${hash}`;
}
/**
 * Accepts calldata for a transformErc20 call and extracts
 * arguments from the calldata.
 */
function decodeTransformErc20Calldata(calldata) {
    const transformErc20Interface = new ethers_1.utils.Interface(contract_wrappers_1.ITransformERC20Contract.ABI());
    const result = transformErc20Interface.parseTransaction({ data: calldata });
    const { args: [inputToken, outputToken, inputTokenAmount, minOutputTokenAmount], } = result;
    return {
        inputToken: inputToken,
        outputToken: outputToken,
        // Use `toString` because these are actually Ethers BigNumbers
        inputTokenAmount: new utils_1.BigNumber(inputTokenAmount.toString()),
        minOutputTokenAmount: new utils_1.BigNumber(minOutputTokenAmount.toString()),
    };
}
const ZEROG_META_TRANSACTION_QUOTE_REQUEST_DURATION_SECONDS = new prom_client_1.Summary({
    name: 'zerog_meta_transaction_quote_request_duration_seconds',
    help: 'Histogram of request duration of gasless swap',
    // tslint:disable-next-line: custom-no-magic-numbers
    percentiles: [0.5, 0.9, 0.95, 0.99, 0.999],
    labelNames: ['chainId', 'success'],
    maxAgeSeconds: 60,
    ageBuckets: 5,
});
const ZEROG_GASLESSS_SWAP_SERVICE_ERRORS = new prom_client_1.Counter({
    name: 'zerog_gasless_swap_service_errors_total',
    labelNames: ['chainId', 'reason'],
    help: 'Number of errors (with specific reason) encountered in galess swap service',
});
/**
 * Contains logic to fetch RFQm quotes, but with a fallback to
 * a MetaTransaction-wrapped AMM trade in the case no RFQm
 * liquidity is available.
 */
class GaslessSwapService {
    constructor(_chainId, _rfqmService, _metaTransactionServiceBaseUrl, _axiosInstance, _redis, _dbUtils, _blockchainUtils, _sqsProducer) {
        this._chainId = _chainId;
        this._rfqmService = _rfqmService;
        this._metaTransactionServiceBaseUrl = _metaTransactionServiceBaseUrl;
        this._axiosInstance = _axiosInstance;
        this._redis = _redis;
        this._dbUtils = _dbUtils;
        this._blockchainUtils = _blockchainUtils;
        this._sqsProducer = _sqsProducer;
    }
    /**
     * Fetches a "price" (aka "Indicative Quote").
     *
     * The request is first sent to market maker servers and then to the metatransaction
     * service if the market makers don't provide liquidity or errors out.
     *
     * If RFQ liquidity exists, then it is used to compute the price.
     * If AMM liquidity exists but RFQ liquidity is unavailable then
     * AMM liquidity is used to compute the price.
     *
     * Returns `null` if neither AMM or RFQ liquidity exists.
     */
    async fetchPriceAsync(params) {
        var _a;
        try {
            const rfqPrice = await this._rfqmService.fetchIndicativeQuoteAsync(params, 'gaslessSwapRfq');
            if (rfqPrice) {
                return { ...rfqPrice, liquiditySource: 'rfq' };
            }
        }
        catch (e) {
            ZEROG_GASLESSS_SWAP_SERVICE_ERRORS.labels(this._chainId.toString(), GaslessSwapServiceErrorReason.RfqPriceError).inc();
            logger_1.logger.error({ params, errorMessage: e.message, stack: e.stack }, 'Encountered error when fetching RFQ price in `GaslessSwapService`');
        }
        try {
            const ammPrice = await (0, MetaTransactionClient_1.getV1QuoteAsync)(this._axiosInstance, new URL(`${this._metaTransactionServiceBaseUrl.toString()}/quote`), {
                ...params,
                chainId: this._chainId,
                integratorId: params.integrator.integratorId,
                // Can use the null address here since we won't be returning
                // the actual metatransaction
                takerAddress: (_a = params.takerAddress) !== null && _a !== void 0 ? _a : utils_1.NULL_ADDRESS,
            }, {
                requestDurationSummary: ZEROG_META_TRANSACTION_QUOTE_REQUEST_DURATION_SECONDS,
                chainId: this._chainId,
            }, logger_1.logger.warn.bind(logger_1.logger)).then((r) => r === null || r === void 0 ? void 0 : r.price);
            if (ammPrice) {
                return {
                    ...ammPrice,
                    allowanceTarget: this._blockchainUtils.getExchangeProxyAddress(),
                    liquiditySource: 'amm',
                };
            }
        }
        catch (e) {
            if (e instanceof api_utils_1.ValidationError) {
                throw e;
            }
            ZEROG_GASLESSS_SWAP_SERVICE_ERRORS.labels(this._chainId.toString(), GaslessSwapServiceErrorReason.AmmPriceError).inc();
            logger_1.logger.error({ params, errorMessage: e.message, stack: e.stack }, 'Encountered error when fetching AMM price in `GaslessSwapService`');
            // Throw here as it means RFQ throws / does not liquidity and AMM throws
            throw new Error(`Error fetching price for ${params}`);
        }
        return null;
    }
    /**
     * Fetches a "quote" (aka "Firm Quote").
     *
     * Liquidity selection logic is the same as with `fetchPriceAsync`.
     *
     * If an AMM metatransaction is selected as the liquidity source,
     * its metatransaction hash is stored in Redis to be verified upon
     * submit.
     */
    async fetchQuoteAsync(params) {
        var _a;
        let rfqQuoteReportId = null;
        try {
            const { quote: rfqQuote, quoteReportId } = await this._rfqmService.fetchFirmQuoteAsync(params, 'gaslessSwapRfq');
            rfqQuoteReportId = quoteReportId;
            if (rfqQuote) {
                return { ...rfqQuote, liquiditySource: 'rfq' };
            }
        }
        catch (e) {
            ZEROG_GASLESSS_SWAP_SERVICE_ERRORS.labels(this._chainId.toString(), GaslessSwapServiceErrorReason.RfqQuoteError).inc();
            logger_1.logger.error({ params, errorMessage: e.message, stack: e.stack }, 'Encountered error when fetching RFQ quote in `GaslessSwapService`');
        }
        try {
            const ammQuote = await (0, MetaTransactionClient_1.getV1QuoteAsync)(this._axiosInstance, new URL(`${this._metaTransactionServiceBaseUrl.toString()}/quote`), {
                ...params,
                chainId: this._chainId,
                affiliateAddress: (_a = params.affiliateAddress) !== null && _a !== void 0 ? _a : params.integrator.affiliateAddress,
                integratorId: params.integrator.integratorId,
                quoteUniqueId: rfqQuoteReportId !== null && rfqQuoteReportId !== void 0 ? rfqQuoteReportId : undefined,
            }, {
                requestDurationSummary: ZEROG_META_TRANSACTION_QUOTE_REQUEST_DURATION_SECONDS,
                chainId: this._chainId,
            }, logger_1.logger.warn.bind(logger_1.logger));
            if (ammQuote) {
                const approval = params.checkApproval
                    ? await this._rfqmService.getGaslessApprovalResponseAsync(params.takerAddress, params.sellToken, ammQuote.price.sellAmount)
                    : null;
                await this._storeMetaTransactionHashAsync(ammQuote.metaTransaction.getHash());
                return {
                    ...ammQuote.price,
                    approval: approval !== null && approval !== void 0 ? approval : undefined,
                    metaTransaction: ammQuote.metaTransaction,
                    metaTransactionHash: ammQuote.metaTransaction.getHash(),
                    type: types_2.GaslessTypes.MetaTransaction,
                    allowanceTarget: this._blockchainUtils.getExchangeProxyAddress(),
                    liquiditySource: 'amm',
                };
            }
        }
        catch (e) {
            if (e instanceof api_utils_1.ValidationError) {
                throw e;
            }
            ZEROG_GASLESSS_SWAP_SERVICE_ERRORS.labels(this._chainId.toString(), GaslessSwapServiceErrorReason.AmmQuoteError).inc();
            logger_1.logger.error({ params, errorMessage: e.message, stack: e.stack }, 'Encountered error when fetching AMM quote in `GaslessSwapService`');
            // Throw here as it means RFQ throws / does not liquidity and AMM throws
            throw new Error(`Error fetching quote for ${params}`);
        }
        return null;
    }
    /**
     * Accepts a taker-signed MetaTransaction or OtcOrder trade, and optionally,
     * a signed permit transaction, and produces the appropriate Job and sends
     * a message to SQS.
     *
     * For lots of discussion on why the type assertions are needed, see:
     * https://github.com/microsoft/TypeScript/issues/33912
     */
    async processSubmitAsync(params, integratorId) {
        // OtcOrder
        if (params.kind === types_2.GaslessTypes.OtcOrder) {
            const otcOrderResult = await this._rfqmService.submitTakerSignedOtcOrderWithApprovalAsync(params);
            return otcOrderResult;
        }
        // MetaTransaction
        const { trade: { metaTransaction }, } = params;
        const { inputToken, inputTokenAmount, outputToken, minOutputTokenAmount } = decodeTransformErc20Calldata(metaTransaction.callData);
        // Verify that the metatransaction is not expired
        const currentTimeMs = new Date().getTime();
        const bufferS = 30;
        if (metaTransaction.expirationTimeSeconds.minus(bufferS).times(constants_1.ONE_SECOND_MS).isLessThanOrEqualTo(currentTimeMs)) {
            ZEROG_GASLESSS_SWAP_SERVICE_ERRORS.labels(this._chainId.toString(), GaslessSwapServiceErrorReason.MetaTransactionAboutToExpire).inc();
            logger_1.logger.warn({ metaTransactionHash: metaTransaction.getHash() }, 'Received metatransaction submission which is about to expire');
            throw new api_utils_1.ValidationError([
                {
                    field: 'expirationTimeSeconds',
                    code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                    reason: `trade will expire too soon`,
                },
            ]);
        }
        // Verify that the metatransaction was created by 0x API
        const doesMetaTransactionHashExist = await this._doesMetaTransactionHashExistAsync(metaTransaction.getHash());
        if (!doesMetaTransactionHashExist) {
            ZEROG_GASLESSS_SWAP_SERVICE_ERRORS.labels(this._chainId.toString(), GaslessSwapServiceErrorReason.MetaTransactionHashNotExist).inc();
            logger_1.logger.warn({ metaTransactionHash: metaTransaction.getHash() }, 'Received metatransaction submission not created by 0x API');
            throw new Error('MetaTransaction hash not found');
        }
        // Verify that there is not a pending transaction for this taker and taker token
        // TODO (rhinodavid): optimize this query by adding the taker & takerToken instead
        // of filtering it out in the next step
        const pendingJobs = await this._dbUtils.findMetaTransactionJobsWithStatusesAsync([
            types_1.RfqmJobStatus.PendingEnqueued,
            types_1.RfqmJobStatus.PendingProcessing,
            types_1.RfqmJobStatus.PendingLastLookAccepted,
            types_1.RfqmJobStatus.PendingSubmitted,
        ]);
        if (pendingJobs.some((job) => job.takerAddress.toLowerCase() === metaTransaction.signer.toLowerCase() &&
            job.inputToken.toLowerCase() === inputToken.toLowerCase() &&
            // Other logic handles the case where the same order is submitted twice
            job.metaTransactionHash !== metaTransaction.getHash())) {
            ZEROG_GASLESSS_SWAP_SERVICE_ERRORS.labels(this._chainId.toString(), GaslessSwapServiceErrorReason.MetaTransactionPendingJobAlreadyExist).inc();
            logger_1.logger.warn({
                metaTransactionHash: metaTransaction.getHash(),
                takerToken: inputToken,
                takerAddress: metaTransaction.signer.toLowerCase(),
            }, 'Metatransaction submission rejected because a job is pending with the same taker and taker token');
            throw new api_utils_1.TooManyRequestsError('a pending trade for this taker and takertoken already exists');
        }
        // validate that the given taker signature is valid
        const signerAddress = (0, signature_utils_1.getSignerFromHash)(metaTransaction.getHash(), params.trade.signature).toLowerCase();
        if (signerAddress !== metaTransaction.signer) {
            ZEROG_GASLESSS_SWAP_SERVICE_ERRORS.labels(this._chainId.toString(), GaslessSwapServiceErrorReason.MetaTransactionInvalidSigner).inc();
            logger_1.logger.warn({
                metaTransactionHash: metaTransaction.getHash(),
                metaTransactionSigner: metaTransaction.signer,
                transactionSigner: signerAddress,
            }, 'Received submission with signer mismatch');
            throw new api_utils_1.ValidationError([
                {
                    field: 'signature',
                    code: api_utils_1.ValidationErrorCodes.InvalidSignatureOrHash,
                    reason: `signature is not valid`,
                },
            ]);
        }
        // Validate that order is fillable according to balance and/or allowance.
        const [takerBalance] = params.approval
            ? await this._blockchainUtils.getTokenBalancesAsync([{ owner: metaTransaction.signer, token: inputToken }])
            : await this._blockchainUtils.getMinOfBalancesAndAllowancesAsync([
                { owner: metaTransaction.signer, token: inputToken },
            ]);
        if (takerBalance.isLessThan(inputTokenAmount)) {
            ZEROG_GASLESSS_SWAP_SERVICE_ERRORS.labels(this._chainId.toString(), GaslessSwapServiceErrorReason.MetaTransactionTakerBalanceCheckFailed).inc();
            logger_1.logger.warn({
                takerBalance,
                takerAddress: metaTransaction.signer,
                metaTransactionHash: metaTransaction.getHash(),
            }, 'Balance check failed while user was submitting');
            throw new api_utils_1.ValidationError([
                {
                    field: 'n/a',
                    code: api_utils_1.ValidationErrorCodes.InvalidOrder,
                    reason: `order is not fillable`,
                },
            ]);
        }
        const rfqmApprovalOpts = params.approval
            ? await this._rfqmService.createApprovalAsync(params.approval, metaTransaction.getHash(), inputToken)
            : undefined;
        const jobOptions = {
            chainId: this._chainId,
            expiry: metaTransaction.expirationTimeSeconds,
            fee: { token: metaTransaction.feeToken, amount: metaTransaction.feeAmount, type: 'fixed' },
            inputToken,
            inputTokenAmount,
            integratorId,
            metaTransaction,
            metaTransactionHash: metaTransaction.getHash(),
            minOutputTokenAmount,
            outputToken,
            takerAddress: metaTransaction.signer,
            takerSignature: params.trade.signature,
            ...rfqmApprovalOpts,
        };
        try {
            const { id } = await this._dbUtils.writeMetaTransactionJobAsync(jobOptions);
            await this._enqueueJobAsync(id, types_2.GaslessTypes.MetaTransaction);
        }
        catch (error) {
            ZEROG_GASLESSS_SWAP_SERVICE_ERRORS.labels(this._chainId.toString(), GaslessSwapServiceErrorReason.MetaTransactionFailedToQueue).inc();
            logger_1.logger.error({ errorMessage: error.message }, 'Failed to queue the quote for submission.');
            throw new api_utils_1.InternalServerError(`failed to queue the quote for submission, it may have already been submitted`);
        }
        const result = {
            metaTransactionHash: metaTransaction.getHash(),
            type: types_2.GaslessTypes.MetaTransaction,
        };
        return result;
    }
    async getStatusAsync(hash) {
        return this._rfqmService.getStatusAsync(hash);
    }
    /**
     * Passthrough to RFQm Service's `runHealthCheckAsync` method
     */
    async runHealthCheckAsync() {
        return this._rfqmService.runHealthCheckAsync();
    }
    /**
     * Passthrough to RFQm Service's `getTokenDecimalsAsync` method
     */
    async getTokenDecimalsAsync(tokenAddress) {
        return this._rfqmService.getTokenDecimalsAsync(tokenAddress);
    }
    async _enqueueJobAsync(id, type) {
        await this._sqsProducer.send({
            groupId: id,
            id,
            body: JSON.stringify({ id, type }),
            deduplicationId: id,
        });
    }
    async _doesMetaTransactionHashExistAsync(hash) {
        return this._redis.get(metaTransactionHashRedisKey(hash)).then((r) => !!r);
    }
    async _storeMetaTransactionHashAsync(hash) {
        await this._redis.set(metaTransactionHashRedisKey(hash), /* value */ 0, 'EX', META_TRANSACTION_HASH_TTL_S);
    }
}
exports.GaslessSwapService = GaslessSwapService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,