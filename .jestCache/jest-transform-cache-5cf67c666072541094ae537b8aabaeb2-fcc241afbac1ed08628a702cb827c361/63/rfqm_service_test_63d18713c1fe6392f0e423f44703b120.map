{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/services/rfqm_service_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/services/rfqm_service_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\n// tslint:disable:no-empty\n// tslint:disable:max-file-line-count\n\nimport { TooManyRequestsError } from '@0x/api-utils';\nimport { getContractAddressesForChainOrThrow } from '@0x/contract-addresses';\nimport {\n    eip712SignHashWithKey,\n    ethSignHashWithKey,\n    MetaTransaction,\n    OtcOrder,\n    SignatureType,\n} from '@0x/protocol-utils';\nimport { BigNumber } from '@0x/utils';\nimport { expect } from 'chai';\nimport { constants } from 'ethers';\nimport { Producer } from 'sqs-producer';\nimport { anything, capture, instance, mock, spy, verify, when } from 'ts-mockito';\n\nimport { Integrator } from '../../src/config';\nimport {\n    DEFAULT_MIN_EXPIRY_DURATION_MS,\n    ETH_DECIMALS,\n    ONE_MINUTE_MS,\n    ONE_SECOND_MS,\n    ZERO,\n} from '../../src/core/constants';\nimport { RfqmV2JobEntity, RfqmV2QuoteEntity, RfqmV2TransactionSubmissionEntity } from '../../src/entities';\nimport {\n    RfqmJobStatus,\n    RfqmOrderTypes,\n    RfqmTransactionSubmissionStatus,\n    RfqmTransactionSubmissionType,\n} from '../../src/entities/types';\nimport { FeeService } from '../../src/services/fee_service';\nimport { RfqmService } from '../../src/services/rfqm_service';\nimport { RfqMakerBalanceCacheService } from '../../src/services/rfq_maker_balance_cache_service';\nimport {\n    ApprovalResponse,\n    OtcOrderSubmitRfqmSignedQuoteParams,\n    SubmitRfqmSignedQuoteWithApprovalParams,\n} from '../../src/services/types';\nimport {\n    ExecuteMetaTransactionEip712Context,\n    FeeModelVersion,\n    GaslessApprovalTypes,\n    GaslessTypes,\n    IndicativeQuote,\n    PermitEip712Context,\n} from '../../src/core/types';\nimport { CacheClient } from '../../src/utils/cache_client';\nimport { QuoteServerClient } from '../../src/utils/quote_server_client';\nimport { otcOrderToStoredOtcOrder, RfqmDbUtils } from '../../src/utils/rfqm_db_utils';\nimport { HealthCheckStatus } from '../../src/utils/rfqm_health_check';\nimport { RfqBlockchainUtils } from '../../src/utils/rfq_blockchain_utils';\nimport { RfqMakerManager } from '../../src/utils/rfq_maker_manager';\nimport { TokenMetadataManager } from '../../src/utils/TokenMetadataManager';\nimport { MOCK_EXECUTE_META_TRANSACTION_APPROVAL } from '../constants';\n\n// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n// eslint-disable-next-line @typescript-eslint/no-loss-of-precision\nconst NEVER_EXPIRES = new BigNumber(9999999999999999);\nconst MOCK_WORKER_REGISTRY_ADDRESS = '0x1023331a469c6391730ff1E2749422CE8873EC38';\nconst MOCK_TOKEN = '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48';\nconst MOCK_GAS_PRICE = new BigNumber(100000000000);\nconst MOCK_MM_URI = 'https://mm-address';\nconst WORKER_FULL_BALANCE_WEI = new BigNumber(1).shiftedBy(ETH_DECIMALS);\nconst MOCK_INTEGRATOR: Integrator = {\n    apiKeys: ['an-integrator-id'],\n    integratorId: 'an-integrator-id',\n    allowedChainIds: [1337],\n    label: 'Test',\n    plp: false,\n    rfqm: true,\n    rfqt: true,\n};\n\nconst buildRfqmServiceForUnitTest = (\n    overrides: {\n        chainId?: number;\n        feeService?: FeeService;\n        feeModelVersion?: FeeModelVersion;\n        rfqBlockchainUtils?: RfqBlockchainUtils;\n        dbUtils?: RfqmDbUtils;\n        producer?: Producer;\n        quoteServerClient?: QuoteServerClient;\n        cacheClient?: CacheClient;\n        rfqMakerBalanceCacheService?: RfqMakerBalanceCacheService;\n        rfqMakerManager?: RfqMakerManager;\n        tokenMetadataManager?: TokenMetadataManager;\n    } = {},\n): RfqmService => {\n    const contractAddresses = getContractAddressesForChainOrThrow(1);\n    const feeServiceMock = mock(FeeService);\n    when(feeServiceMock.getGasPriceEstimationAsync()).thenResolve(MOCK_GAS_PRICE);\n    when(feeServiceMock.calculateFeeAsync(anything(), anything())).thenResolve({\n        feeWithDetails: {\n            token: '0xToken',\n            amount: new BigNumber(300),\n            type: 'fixed',\n            details: {\n                feeModelVersion: 1,\n                kind: 'default',\n                gasFeeAmount: new BigNumber(100),\n                gasPrice: MOCK_GAS_PRICE,\n                zeroExFeeAmount: new BigNumber(200),\n                tradeSizeBps: 4,\n                feeTokenBaseUnitPriceUsd: new BigNumber(30),\n                takerTokenBaseUnitPriceUsd: null,\n                makerTokenBaseUnitPriceUsd: new BigNumber(20),\n            },\n            breakdown: {\n                gas: {\n                    amount: new BigNumber(100),\n                    details: {\n                        gasPrice: MOCK_GAS_PRICE,\n                        estimatedGas: new BigNumber(1),\n                    },\n                },\n                zeroEx: {\n                    amount: new BigNumber(200),\n                    details: {\n                        kind: 'volume',\n                        tradeSizeBps: 4,\n                    },\n                },\n            },\n            conversionRates: {\n                nativeTokenBaseUnitPriceUsd: new BigNumber(30),\n                feeTokenBaseUnitPriceUsd: new BigNumber(30),\n                takerTokenBaseUnitPriceUsd: null,\n                makerTokenBaseUnitPriceUsd: new BigNumber(20),\n            },\n        },\n    });\n    const feeServiceInstance = instance(feeServiceMock);\n\n    const rfqBlockchainUtilsMock = mock(RfqBlockchainUtils);\n    when(rfqBlockchainUtilsMock.getAccountBalanceAsync(MOCK_WORKER_REGISTRY_ADDRESS)).thenResolve(\n        WORKER_FULL_BALANCE_WEI,\n    );\n    when(rfqBlockchainUtilsMock.getAllowanceAsync(anything(), anything(), anything())).thenResolve(\n        new BigNumber(constants.MaxUint256.toString()),\n        new BigNumber(0),\n        new BigNumber(0),\n    );\n    when(rfqBlockchainUtilsMock.getGaslessApprovalAsync(anything(), anything(), anything())).thenResolve(\n        null,\n        MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\n    );\n    const dbUtilsMock = mock(RfqmDbUtils);\n    const sqsMock = mock(Producer);\n    when(sqsMock.queueSize()).thenResolve(0);\n    const quoteServerClientMock = mock(QuoteServerClient);\n    const cacheClientMock = mock(CacheClient);\n    when(cacheClientMock.getMakersInCooldownForPairAsync(anything(), anything(), anything())).thenResolve([]);\n    const rfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\n    const rfqMakerManagerMock = mock(RfqMakerManager);\n\n    const tokenMetadataManagerMock = mock(TokenMetadataManager);\n    when(tokenMetadataManagerMock.getTokenDecimalsAsync(anything())).thenResolve(18);\n    const tokenMetadataManager = instance(tokenMetadataManagerMock);\n\n    return new RfqmService(\n        overrides.chainId || 1337,\n        overrides.feeService || feeServiceInstance,\n        overrides.feeModelVersion || 0,\n        contractAddresses,\n        MOCK_WORKER_REGISTRY_ADDRESS,\n        overrides.rfqBlockchainUtils || instance(rfqBlockchainUtilsMock),\n        overrides.dbUtils || dbUtilsMock,\n        overrides.producer || sqsMock,\n        overrides.quoteServerClient || quoteServerClientMock,\n        DEFAULT_MIN_EXPIRY_DURATION_MS,\n        overrides.cacheClient || instance(cacheClientMock),\n        overrides.rfqMakerBalanceCacheService || rfqMakerBalanceCacheService,\n        overrides.rfqMakerManager || rfqMakerManagerMock,\n        overrides.tokenMetadataManager || tokenMetadataManager,\n    );\n};\n\ndescribe('RfqmService HTTP Logic', () => {\n    describe('submitTakerSignedOtcOrderAsync', () => {\n        it('should fail if there is already a pending trade for the taker and taker token', async () => {\n            const expiry = new BigNumber(Date.now() + 1_000_000).dividedBy(ONE_SECOND_MS).decimalPlaces(0);\n            const otcOrder = new OtcOrder({\n                txOrigin: '0x0000000000000000000000000000000000000000',\n                taker: '0x1111111111111111111111111111111111111111',\n                maker: '0x2222222222222222222222222222222222222222',\n                makerToken: '0x3333333333333333333333333333333333333333',\n                takerToken: '0x4444444444444444444444444444444444444444',\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(expiry, ZERO, expiry),\n                chainId: 1337,\n                verifyingContract: '0x0000000000000000000000000000000000000000',\n            });\n            const existingJob = new RfqmV2JobEntity({\n                chainId: 1337,\n                expiry,\n                makerUri: '',\n                orderHash: '0x00',\n                fee: {\n                    token: '0xToken',\n                    amount: '100',\n                    type: 'fixed',\n                },\n                order: otcOrderToStoredOtcOrder(otcOrder),\n            });\n\n            const quote = new RfqmV2QuoteEntity({\n                affiliateAddress: '',\n                chainId: 1,\n                createdAt: new Date(),\n                fee: {\n                    amount: '0',\n                    token: '',\n                    type: 'fixed',\n                },\n                integratorId: '',\n                makerUri: 'http://foo.bar',\n                order: {\n                    order: existingJob.order.order,\n                    type: RfqmOrderTypes.Otc,\n                },\n                orderHash: '',\n                isUnwrap: false,\n            });\n\n            const dbUtilsMock = mock(RfqmDbUtils);\n            when(dbUtilsMock.findV2JobsWithStatusesAsync(anything())).thenResolve([existingJob]);\n            when(dbUtilsMock.findV2QuoteByOrderHashAsync(otcOrder.getHash())).thenResolve(quote);\n            const params: OtcOrderSubmitRfqmSignedQuoteParams = {\n                type: GaslessTypes.OtcOrder,\n                order: otcOrder,\n                signature: {\n                    r: '',\n                    s: '',\n                    signatureType: SignatureType.EthSign,\n                    v: 1,\n                },\n            };\n            const metatransactionMock = mock(MetaTransaction);\n            when(metatransactionMock.getHash()).thenReturn('0xmetatransactionhash');\n            when(metatransactionMock.expirationTimeSeconds).thenReturn(NEVER_EXPIRES);\n\n            const service = buildRfqmServiceForUnitTest({\n                chainId: 1,\n                dbUtils: instance(dbUtilsMock),\n                feeModelVersion: 0,\n            });\n\n            expect(service.submitTakerSignedOtcOrderAsync(params)).to.be.rejectedWith(\n                TooManyRequestsError,\n                'a pending trade for this taker and takertoken already exists',\n            ); // tslint:disable-line no-unused-expression\n        });\n\n        it('should allow two trades by the same taker with different taker tokens', async () => {\n            const takerPrivateKey = '0xe13ae9fa0166b501a2ab50e7b6fbb65819add7376da9b4fbb3bf3ae48cd9dcd3';\n            const takerAddress = '0x4e2145eDC29f27E126154B9c716Df70c429C291B';\n            const expiry = new BigNumber(Date.now() + 1_000_000).dividedBy(ONE_SECOND_MS).decimalPlaces(0);\n            const existingOtcOrder = new OtcOrder({\n                txOrigin: '0x0000000000000000000000000000000000000000',\n                taker: takerAddress,\n                maker: '0x2222222222222222222222222222222222222222',\n                makerToken: '0x3333333333333333333333333333333333333333',\n                takerToken: '0x4444444444444444444444444444444444444444',\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(expiry, ZERO, expiry),\n                chainId: 1337,\n                verifyingContract: '0x0000000000000000000000000000000000000000',\n            });\n            const newOtcOrder = new OtcOrder({\n                txOrigin: '0x0000000000000000000000000000000000000000',\n                taker: takerAddress,\n                maker: '0x2222222222222222222222222222222222222222',\n                makerToken: '0x3333333333333333333333333333333333333333',\n                takerToken: '0x9999999999999999999999999999999999999999',\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(expiry, ZERO, expiry),\n                chainId: 1337,\n                verifyingContract: '0x0000000000000000000000000000000000000000',\n            });\n            const existingJob = new RfqmV2JobEntity({\n                chainId: 1337,\n                expiry,\n                makerUri: '',\n                orderHash: '0x00',\n                fee: {\n                    token: '0xToken',\n                    amount: '100',\n                    type: 'fixed',\n                },\n                order: otcOrderToStoredOtcOrder(existingOtcOrder),\n            });\n\n            const dbUtilsMock = mock(RfqmDbUtils);\n            when(dbUtilsMock.findV2JobsWithStatusesAsync(anything())).thenResolve([existingJob]);\n            when(dbUtilsMock.findV2QuoteByOrderHashAsync(newOtcOrder.getHash())).thenResolve({\n                affiliateAddress: '',\n                chainId: 1,\n                createdAt: new Date(),\n                fee: {\n                    amount: '0',\n                    token: '',\n                    type: 'fixed',\n                },\n                integratorId: '',\n                makerUri: 'http://foo.bar',\n                order: otcOrderToStoredOtcOrder(newOtcOrder),\n                orderHash: '',\n                isUnwrap: false,\n                takerSpecifiedSide: null,\n            });\n            const metatransactionMock = mock(MetaTransaction);\n            when(metatransactionMock.getHash()).thenReturn('0xmetatransactionhash');\n            when(metatransactionMock.expirationTimeSeconds).thenReturn(NEVER_EXPIRES);\n            const blockchainUtilsMock = mock(RfqBlockchainUtils);\n            when(blockchainUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\n                new BigNumber(10000),\n            ]);\n            const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n            when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\n                new BigNumber(10000),\n            ]);\n\n            const service = buildRfqmServiceForUnitTest({\n                chainId: 1,\n                dbUtils: instance(dbUtilsMock),\n                rfqBlockchainUtils: instance(blockchainUtilsMock),\n                rfqMakerBalanceCacheService: instance(rfqMakerBalanceCacheServiceMock),\n                feeModelVersion: 0,\n            });\n\n            const submitParams: OtcOrderSubmitRfqmSignedQuoteParams = {\n                type: GaslessTypes.OtcOrder,\n                order: newOtcOrder,\n                signature: ethSignHashWithKey(newOtcOrder.getHash(), takerPrivateKey),\n            };\n            const result = await service.submitTakerSignedOtcOrderAsync(submitParams);\n            expect(result.type).to.equal('otc');\n        });\n    });\n\n    describe('submitTakerSignedOtcOrderWithApprovalAsync', () => {\n        it('should fail if approval params generate an invalid calldata', async () => {\n            const takerAddress = '0x4e2145eDC29f27E126154B9c716Df70c429C291B';\n            const expiry = new BigNumber(Date.now() + 1_000_000).dividedBy(ONE_SECOND_MS).decimalPlaces(0);\n            const otcOrder = new OtcOrder({\n                txOrigin: '0x0000000000000000000000000000000000000000',\n                taker: '0x1111111111111111111111111111111111111111',\n                maker: '0x2222222222222222222222222222222222222222',\n                makerToken: '0x3333333333333333333333333333333333333333',\n                takerToken: '0x4444444444444444444444444444444444444444',\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(expiry, ZERO, expiry),\n                chainId: 1,\n                verifyingContract: '0x0000000000000000000000000000000000000000',\n            });\n            const eip712Context: ExecuteMetaTransactionEip712Context = {\n                types: {\n                    EIP712Domain: [\n                        { name: 'name', type: 'string' },\n                        { name: 'version', type: 'string' },\n                        { name: 'verifyingContract', type: 'address' },\n                        { name: 'salt', type: 'bytes32' },\n                    ],\n                    MetaTransaction: [\n                        { name: 'nonce', type: 'uint256' },\n                        { name: 'from', type: 'address' },\n                        { name: 'functionSignature', type: 'bytes' },\n                    ],\n                },\n                primaryType: 'MetaTransaction',\n                domain: {},\n                message: {\n                    nonce: expiry.toNumber(),\n                    from: takerAddress,\n                    functionSignature: '',\n                },\n            };\n            const submitParams: SubmitRfqmSignedQuoteWithApprovalParams<ExecuteMetaTransactionEip712Context> = {\n                approval: {\n                    type: GaslessApprovalTypes.ExecuteMetaTransaction,\n                    eip712: eip712Context,\n                    signature: {\n                        r: '',\n                        s: '',\n                        v: 28,\n                        signatureType: SignatureType.EIP712,\n                    },\n                },\n                trade: {\n                    type: GaslessTypes.OtcOrder,\n                    order: otcOrder,\n                    signature: {\n                        r: '',\n                        s: '',\n                        v: 28,\n                        signatureType: SignatureType.EthSign,\n                    },\n                },\n                kind: GaslessTypes.OtcOrder,\n            };\n            const blockchainUtilsMock = mock(RfqBlockchainUtils);\n            when(blockchainUtilsMock.generateApprovalCalldataAsync(anything(), anything(), anything())).thenResolve(\n                '0xinvalidcalldata',\n            );\n            when(blockchainUtilsMock.estimateGasForAsync(anything())).thenReject();\n            const service = buildRfqmServiceForUnitTest({\n                chainId: 1,\n                feeModelVersion: 0,\n                rfqBlockchainUtils: instance(blockchainUtilsMock),\n            });\n            try {\n                await service.submitTakerSignedOtcOrderWithApprovalAsync(submitParams);\n                expect.fail('should fail eth call approval validation');\n            } catch (e) {\n                expect(e.message).to.contain('Eth call approval validation failed');\n                verify(blockchainUtilsMock.generateApprovalCalldataAsync(anything(), anything(), anything())).once();\n                verify(blockchainUtilsMock.estimateGasForAsync(anything())).thrice();\n            }\n        });\n        it('should proceed with trade submission if approval is empty', async () => {\n            const takerPrivateKey = '0xe13ae9fa0166b501a2ab50e7b6fbb65819add7376da9b4fbb3bf3ae48cd9dcd3';\n            const takerAddress = '0x4e2145eDC29f27E126154B9c716Df70c429C291B';\n            const expiry = new BigNumber(Date.now() + 1_000_000).dividedBy(ONE_SECOND_MS).decimalPlaces(0);\n            const otcOrder = new OtcOrder({\n                txOrigin: '0x0000000000000000000000000000000000000000',\n                taker: takerAddress,\n                maker: '0x2222222222222222222222222222222222222222',\n                makerToken: '0x3333333333333333333333333333333333333333',\n                takerToken: '0x4444444444444444444444444444444444444444',\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(expiry, ZERO, expiry),\n                chainId: 1,\n                verifyingContract: '0x0000000000000000000000000000000000000000',\n            });\n            const dbUtilsMock = mock(RfqmDbUtils);\n            when(dbUtilsMock.findV2JobsWithStatusesAsync(anything())).thenResolve([]);\n            when(dbUtilsMock.findV2QuoteByOrderHashAsync(otcOrder.getHash())).thenResolve({\n                affiliateAddress: '',\n                chainId: 1,\n                createdAt: new Date(),\n                fee: {\n                    amount: '0',\n                    token: '',\n                    type: 'fixed',\n                },\n                integratorId: '',\n                makerUri: 'http://foo.bar',\n                order: otcOrderToStoredOtcOrder(otcOrder),\n                orderHash: '',\n                isUnwrap: false,\n                takerSpecifiedSide: null,\n            });\n            const blockchainUtilsMock = mock(RfqBlockchainUtils);\n            when(blockchainUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\n                new BigNumber(10000),\n            ]);\n            const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n            when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\n                new BigNumber(10000),\n            ]);\n            const service = buildRfqmServiceForUnitTest({\n                chainId: 1,\n                feeModelVersion: 0,\n                dbUtils: instance(dbUtilsMock),\n                rfqBlockchainUtils: instance(blockchainUtilsMock),\n                rfqMakerBalanceCacheService: instance(rfqMakerBalanceCacheServiceMock),\n            });\n            const submitParams: SubmitRfqmSignedQuoteWithApprovalParams<\n                ExecuteMetaTransactionEip712Context | PermitEip712Context\n            > = {\n                kind: GaslessTypes.OtcOrder,\n                trade: {\n                    type: GaslessTypes.OtcOrder,\n                    order: otcOrder,\n                    signature: ethSignHashWithKey(otcOrder.getHash(), takerPrivateKey),\n                },\n            };\n            const result = await service.submitTakerSignedOtcOrderWithApprovalAsync(submitParams);\n            expect(result.type).to.equal('otc');\n            verify(dbUtilsMock.writeV2JobAsync(anything())).once();\n        });\n        it('should save job with executeMetaTransaction params to DB', async () => {\n            const takerPrivateKey = '0xe13ae9fa0166b501a2ab50e7b6fbb65819add7376da9b4fbb3bf3ae48cd9dcd3';\n            const takerAddress = '0x4e2145eDC29f27E126154B9c716Df70c429C291B';\n            const expiry = new BigNumber(Date.now() + 1_000_000).dividedBy(ONE_SECOND_MS).decimalPlaces(0);\n            const otcOrder = new OtcOrder({\n                txOrigin: '0x0000000000000000000000000000000000000000',\n                taker: takerAddress,\n                maker: '0x2222222222222222222222222222222222222222',\n                makerToken: '0x3333333333333333333333333333333333333333',\n                takerToken: '0x4444444444444444444444444444444444444444',\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(expiry, ZERO, expiry),\n                chainId: 1,\n                verifyingContract: '0x0000000000000000000000000000000000000000',\n            });\n            const eip712Context: ExecuteMetaTransactionEip712Context = {\n                types: {\n                    EIP712Domain: [\n                        { name: 'name', type: 'string' },\n                        { name: 'version', type: 'string' },\n                        { name: 'verifyingContract', type: 'address' },\n                        { name: 'salt', type: 'bytes32' },\n                    ],\n                    MetaTransaction: [\n                        { name: 'nonce', type: 'uint256' },\n                        { name: 'from', type: 'address' },\n                        { name: 'functionSignature', type: 'bytes' },\n                    ],\n                },\n                primaryType: 'MetaTransaction',\n                domain: {},\n                message: {\n                    from: takerAddress,\n                    functionSignature: '',\n                    nonce: expiry.toNumber(),\n                },\n            };\n            const dbUtilsMock = mock(RfqmDbUtils);\n            when(dbUtilsMock.findV2JobsWithStatusesAsync(anything())).thenResolve([]);\n            when(dbUtilsMock.findV2QuoteByOrderHashAsync(otcOrder.getHash())).thenResolve({\n                affiliateAddress: '',\n                chainId: 1,\n                createdAt: new Date(),\n                fee: {\n                    amount: '0',\n                    token: '',\n                    type: 'fixed',\n                },\n                integratorId: '',\n                makerUri: 'http://foo.bar',\n                order: otcOrderToStoredOtcOrder(otcOrder),\n                orderHash: '',\n                isUnwrap: false,\n                takerSpecifiedSide: null,\n            });\n            const blockchainUtilsMock = mock(RfqBlockchainUtils);\n            when(blockchainUtilsMock.getTokenBalancesAsync(anything())).thenResolve([new BigNumber(10000)]);\n            when(blockchainUtilsMock.generateApprovalCalldataAsync(anything(), anything(), anything())).thenResolve(\n                '0xvalidcalldata',\n            );\n            when(blockchainUtilsMock.simulateTransactionAsync(anything(), anything())).thenResolve();\n            const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n            when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\n                new BigNumber(10000),\n            ]);\n            const service = buildRfqmServiceForUnitTest({\n                chainId: 1,\n                feeModelVersion: 0,\n                dbUtils: instance(dbUtilsMock),\n                rfqBlockchainUtils: instance(blockchainUtilsMock),\n                rfqMakerBalanceCacheService: instance(rfqMakerBalanceCacheServiceMock),\n            });\n            const submitParams: SubmitRfqmSignedQuoteWithApprovalParams<ExecuteMetaTransactionEip712Context> = {\n                trade: {\n                    type: GaslessTypes.OtcOrder,\n                    order: otcOrder,\n                    signature: ethSignHashWithKey(otcOrder.getHash(), takerPrivateKey),\n                },\n                approval: {\n                    type: GaslessApprovalTypes.ExecuteMetaTransaction,\n                    eip712: eip712Context,\n                    signature: eip712SignHashWithKey(otcOrder.getHash(), takerPrivateKey),\n                },\n                kind: GaslessTypes.OtcOrder,\n            };\n            const result = await service.submitTakerSignedOtcOrderWithApprovalAsync(submitParams);\n            expect(result.type).to.equal('otc');\n            verify(blockchainUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).never();\n            verify(dbUtilsMock.writeV2JobAsync(anything())).once();\n        });\n        it('should save job with permit params to DB', async () => {\n            const takerPrivateKey = '0xe13ae9fa0166b501a2ab50e7b6fbb65819add7376da9b4fbb3bf3ae48cd9dcd3';\n            const takerAddress = '0x4e2145eDC29f27E126154B9c716Df70c429C291B';\n            const expiry = new BigNumber(Date.now() + 1_000_000).dividedBy(ONE_SECOND_MS).decimalPlaces(0);\n            const otcOrder = new OtcOrder({\n                txOrigin: '0x0000000000000000000000000000000000000000',\n                taker: takerAddress,\n                maker: '0x2222222222222222222222222222222222222222',\n                makerToken: '0x3333333333333333333333333333333333333333',\n                takerToken: '0x4444444444444444444444444444444444444444',\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(expiry, ZERO, expiry),\n                chainId: 1,\n                verifyingContract: '0x0000000000000000000000000000000000000000',\n            });\n            const eip712Context: PermitEip712Context = {\n                types: {\n                    EIP712Domain: [\n                        { name: 'name', type: 'string' },\n                        { name: 'version', type: 'string' },\n                        { name: 'verifyingContract', type: 'address' },\n                        { name: 'salt', type: 'bytes32' },\n                    ],\n                    Permit: [\n                        { name: 'owner', type: 'address' },\n                        { name: 'spender', type: 'address' },\n                        { name: 'value', type: 'uint256' },\n                        { name: 'nonce', type: 'uint256' },\n                        { name: 'deadline', type: 'uint256' },\n                    ],\n                },\n                primaryType: 'Permit',\n                domain: {},\n                message: {\n                    deadline: '12345',\n                    owner: takerAddress,\n                    spender: '0x0000000000000000000000000000000000000000',\n                    value: '0xffffffffffffffffffffffffffffffffffffffff',\n                    nonce: expiry.toNumber(),\n                },\n            };\n            const dbUtilsMock = mock(RfqmDbUtils);\n            when(dbUtilsMock.findV2JobsWithStatusesAsync(anything())).thenResolve([]);\n            when(dbUtilsMock.findV2QuoteByOrderHashAsync(otcOrder.getHash())).thenResolve({\n                affiliateAddress: '',\n                chainId: 1,\n                createdAt: new Date(),\n                fee: {\n                    amount: '0',\n                    token: '',\n                    type: 'fixed',\n                },\n                integratorId: '',\n                makerUri: 'http://foo.bar',\n                order: otcOrderToStoredOtcOrder(otcOrder),\n                orderHash: '',\n                isUnwrap: false,\n                takerSpecifiedSide: null,\n            });\n            const blockchainUtilsMock = mock(RfqBlockchainUtils);\n            when(blockchainUtilsMock.getTokenBalancesAsync(anything())).thenResolve([new BigNumber(10000)]);\n            when(blockchainUtilsMock.generateApprovalCalldataAsync(anything(), anything(), anything())).thenResolve(\n                '0xvalidcalldata',\n            );\n            when(blockchainUtilsMock.estimateGasForAsync(anything())).thenResolve(10);\n            const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n            when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\n                new BigNumber(10000),\n            ]);\n            const service = buildRfqmServiceForUnitTest({\n                chainId: 1,\n                feeModelVersion: 0,\n                dbUtils: instance(dbUtilsMock),\n                rfqBlockchainUtils: instance(blockchainUtilsMock),\n                rfqMakerBalanceCacheService: instance(rfqMakerBalanceCacheServiceMock),\n            });\n            const submitParams: SubmitRfqmSignedQuoteWithApprovalParams<PermitEip712Context> = {\n                trade: {\n                    type: GaslessTypes.OtcOrder,\n                    order: otcOrder,\n                    signature: ethSignHashWithKey(otcOrder.getHash(), takerPrivateKey),\n                },\n                approval: {\n                    type: GaslessApprovalTypes.Permit,\n                    eip712: eip712Context,\n                    signature: eip712SignHashWithKey(otcOrder.getHash(), takerPrivateKey),\n                },\n                kind: GaslessTypes.OtcOrder,\n            };\n            const result = await service.submitTakerSignedOtcOrderWithApprovalAsync(submitParams);\n            expect(result.type).to.equal('otc');\n            verify(blockchainUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).never();\n            verify(dbUtilsMock.writeV2JobAsync(anything())).once();\n        });\n    });\n\n    describe('fetchIndicativeQuoteAsync', () => {\n        describe('sells', () => {\n            it('should fetch indicative quote', async () => {\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n\n                const quote: IndicativeQuote = {\n                    maker: '0xmaker',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(101),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(100),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    quote,\n                ]);\n\n                const service = buildRfqmServiceForUnitTest({\n                    quoteServerClient: instance(quoteServerClientMock),\n                    feeModelVersion: 0,\n                });\n\n                const res = await service.fetchIndicativeQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    sellAmount: new BigNumber(100),\n                });\n\n                if (res === null) {\n                    expect.fail('res is null, but not expected to be null');\n                    return;\n                }\n                expect(res.sellAmount.toNumber()).to.be.at.least(100);\n                expect(res.price.toNumber()).to.equal(1.01);\n            });\n\n            it('should round price to six decimal places', async () => {\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const quote: IndicativeQuote = {\n                    maker: '0xmaker',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(111),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(333),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    quote,\n                ]);\n\n                const service = buildRfqmServiceForUnitTest({\n                    quoteServerClient: instance(quoteServerClientMock),\n                    feeModelVersion: 0,\n                });\n\n                const res = await service.fetchIndicativeQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    sellAmount: new BigNumber(333),\n                });\n\n                if (res === null) {\n                    expect.fail('res is null, but not expected to be null');\n                    return;\n                }\n\n                expect(res.price.toNumber()).to.equal(0.3333333);\n            });\n\n            it('should only return an indicative quote that is 100% filled when selling', async () => {\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const quote1: IndicativeQuote = {\n                    maker: '0xmaker',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(55),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(50),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n                const quote2: IndicativeQuote = {\n                    maker: '0xmaker',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(105),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(100),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    quote1,\n                    quote2,\n                ]);\n                const service = buildRfqmServiceForUnitTest({ quoteServerClient: instance(quoteServerClientMock) });\n\n                const res = await service.fetchIndicativeQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    sellAmount: new BigNumber(100),\n                });\n\n                if (res === null) {\n                    expect.fail('res is null, but not expected to be null');\n                    return;\n                }\n                expect(res.sellAmount.toNumber()).to.equal(100);\n                expect(res.price.toNumber()).to.equal(1.05);\n            });\n\n            it('should return null if no quotes are valid', async () => {\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const partialFillQuote: IndicativeQuote = {\n                    maker: '0xmaker',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(55),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(50),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    partialFillQuote,\n                ]);\n                const service = buildRfqmServiceForUnitTest({ quoteServerClient: instance(quoteServerClientMock) });\n\n                const res = await service.fetchIndicativeQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    sellAmount: new BigNumber(100),\n                });\n                expect(res).to.equal(null);\n            });\n\n            // TODO: we may want to reintroduce this test very soon. However, if not addressed by June 2022, remove\n            it.skip('should return an indicative quote that can fill more than 100%', async () => {\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const worseQuote: IndicativeQuote = {\n                    maker: '0xmaker',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(101),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(100),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n                const betterQuote: IndicativeQuote = {\n                    maker: '0xmaker2',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(222),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(200),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    worseQuote,\n                    betterQuote,\n                ]);\n                const service = buildRfqmServiceForUnitTest({ quoteServerClient: instance(quoteServerClientMock) });\n\n                const res = await service.fetchIndicativeQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    sellAmount: new BigNumber(100),\n                });\n\n                if (res === null) {\n                    expect.fail('res is null, but not expected to be null');\n                    return;\n                }\n                expect(res.sellAmount.toNumber()).to.equal(200);\n                expect(res.price.toNumber()).to.equal(1.11);\n            });\n\n            it('should ignore quotes that are for the wrong pair', async () => {\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const worseQuote: IndicativeQuote = {\n                    maker: '0xmaker',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(101),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(100),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n                const betterQuote: IndicativeQuote = {\n                    maker: '0xmaker2',\n                    makerToken: '0x1111111111111111111111111111111111111111',\n                    makerAmount: new BigNumber(111),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(100),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    worseQuote,\n                    betterQuote,\n                ]);\n                const service = buildRfqmServiceForUnitTest({ quoteServerClient: instance(quoteServerClientMock) });\n\n                const res = await service.fetchIndicativeQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    sellAmount: new BigNumber(100),\n                });\n\n                if (res === null) {\n                    expect.fail('res is null, but not expected to be null');\n                    return;\n                }\n                expect(res.sellAmount.toNumber()).to.equal(100);\n                expect(res.price.toNumber()).to.equal(1.01); // Worse pricing wins because better pricing is for wrong pair\n            });\n\n            it('should ignore quotes that expire within 3 minutes', async () => {\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const inOneMinute = (Date.now() + ONE_MINUTE_MS) / ONE_SECOND_MS;\n                const expiresSoon: IndicativeQuote = {\n                    maker: '0xmaker',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(111),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(100),\n                    expiry: new BigNumber(inOneMinute),\n                    makerUri: MOCK_MM_URI,\n                };\n                const neverExpires: IndicativeQuote = {\n                    maker: '0xmaker2',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(101),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(100),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    expiresSoon,\n                    neverExpires,\n                ]);\n                const service = buildRfqmServiceForUnitTest({ quoteServerClient: instance(quoteServerClientMock) });\n\n                const res = await service.fetchIndicativeQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    sellAmount: new BigNumber(100),\n                });\n\n                if (res === null) {\n                    expect.fail('res is null, but not expected to be null');\n                    return;\n                }\n                expect(res.sellAmount.toNumber()).to.equal(100);\n                expect(res.price.toNumber()).to.equal(1.01); // Worse pricing wins because better pricing expires too soon\n            });\n        });\n\n        describe('buys', () => {\n            it('should fetch indicative quote when buying', async () => {\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const quote: IndicativeQuote = {\n                    maker: '0xmaker',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(100),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(80),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    quote,\n                ]);\n                const service = buildRfqmServiceForUnitTest({ quoteServerClient: instance(quoteServerClientMock) });\n\n                const res = await service.fetchIndicativeQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    buyAmount: new BigNumber(100),\n                });\n\n                if (res === null) {\n                    expect.fail('res is null, but not expected to be null');\n                    return;\n                }\n                expect(res.buyAmount.toNumber()).to.be.at.least(100);\n                expect(res.price.toNumber()).to.equal(0.8);\n            });\n\n            it('should only return an indicative quote that is 100% filled when buying', async () => {\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const overFillQuoteGoodPricing: IndicativeQuote = {\n                    maker: '0xmaker',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(160),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(80),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n                const partialFillQuoteGoodPricing: IndicativeQuote = {\n                    maker: '0xmaker2',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(80),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(40),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n                const fullQuote: IndicativeQuote = {\n                    maker: '0xmaker3',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(100),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(80),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    overFillQuoteGoodPricing,\n                    partialFillQuoteGoodPricing,\n                    fullQuote,\n                ]);\n                const service = buildRfqmServiceForUnitTest({ quoteServerClient: instance(quoteServerClientMock) });\n\n                const res = await service.fetchIndicativeQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    buyAmount: new BigNumber(100),\n                });\n\n                if (res === null) {\n                    expect.fail('res is null, but not expected to be null');\n                    return;\n                }\n                expect(res.buyAmount.toNumber()).to.equal(100);\n                expect(res.price.toNumber()).to.equal(0.8);\n            });\n        });\n    });\n\n    describe('fetchFirmQuoteAsync', () => {\n        const takerAddress = '0xf003A9418DE2620f935181259C0Fa1595E871234';\n\n        it('should use an affiliate address provided in the quote request even if one is present in configuration', async () => {\n            const sellAmount = new BigNumber(100);\n            const contractAddresses = getContractAddressesForChainOrThrow(1);\n            const quote: IndicativeQuote = {\n                maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',\n                makerToken: contractAddresses.zrxToken,\n                makerAmount: new BigNumber(101),\n                takerToken: contractAddresses.etherToken,\n                takerAmount: new BigNumber(100),\n                expiry: NEVER_EXPIRES,\n                makerUri: MOCK_MM_URI,\n            };\n\n            const cacheClientMock = mock(CacheClient);\n            when(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);\n            when(cacheClientMock.getMakersInCooldownForPairAsync(anything(), anything(), anything())).thenResolve([]);\n\n            // Mock out the dbUtils\n            const dbUtilsMock = mock(RfqmDbUtils);\n            when(dbUtilsMock.writeV2QuoteAsync(anything())).thenResolve();\n            const dbUtils = instance(dbUtilsMock);\n\n            const quoteServerClientMock = mock(QuoteServerClient);\n            when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([quote]);\n            const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n            when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\n                new BigNumber(150),\n            ]);\n\n            const service = buildRfqmServiceForUnitTest({\n                quoteServerClient: instance(quoteServerClientMock),\n                dbUtils,\n                cacheClient: instance(cacheClientMock),\n                rfqMakerBalanceCacheService: instance(rfqMakerBalanceCacheServiceMock),\n            });\n\n            await service.fetchFirmQuoteAsync({\n                affiliateAddress: '0xaffiliateAddress',\n                buyToken: contractAddresses.zrxToken,\n                buyTokenDecimals: 18,\n                checkApproval: false,\n                integrator: { ...MOCK_INTEGRATOR, affiliateAddress: '0xaffiliateAddressNotThisOne' },\n                sellAmount,\n                sellToken: contractAddresses.etherToken,\n                sellTokenDecimals: 18,\n                takerAddress,\n            });\n\n            const writeV2QuoteArgs = capture(dbUtilsMock.writeV2QuoteAsync).last();\n            expect(writeV2QuoteArgs[0]['affiliateAddress']).to.equal('0xaffiliateAddress');\n        });\n\n        it('should use a configured affiliate address when none is provide in the quote request', async () => {\n            const sellAmount = new BigNumber(100);\n            const contractAddresses = getContractAddressesForChainOrThrow(1);\n            const quote: IndicativeQuote = {\n                maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',\n                makerToken: contractAddresses.zrxToken,\n                makerAmount: new BigNumber(101),\n                takerToken: contractAddresses.etherToken,\n                takerAmount: new BigNumber(100),\n                expiry: NEVER_EXPIRES,\n                makerUri: MOCK_MM_URI,\n            };\n\n            const cacheClientMock = mock(CacheClient);\n            when(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);\n            when(cacheClientMock.getMakersInCooldownForPairAsync(anything(), anything(), anything())).thenResolve([]);\n\n            // Mock out the dbUtils\n            const dbUtilsMock = mock(RfqmDbUtils);\n            when(dbUtilsMock.writeV2QuoteAsync(anything())).thenResolve();\n            const dbUtils = instance(dbUtilsMock);\n\n            const quoteServerClientMock = mock(QuoteServerClient);\n            when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([quote]);\n            const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n            when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\n                new BigNumber(150),\n            ]);\n\n            const service = buildRfqmServiceForUnitTest({\n                quoteServerClient: instance(quoteServerClientMock),\n                dbUtils,\n                cacheClient: instance(cacheClientMock),\n                rfqMakerBalanceCacheService: instance(rfqMakerBalanceCacheServiceMock),\n            });\n\n            await service.fetchFirmQuoteAsync({\n                buyToken: contractAddresses.zrxToken,\n                buyTokenDecimals: 18,\n                checkApproval: false,\n                integrator: { ...MOCK_INTEGRATOR, affiliateAddress: '0xaffiliateAddress' },\n                sellAmount,\n                sellToken: contractAddresses.etherToken,\n                sellTokenDecimals: 18,\n                takerAddress,\n            });\n\n            const writeV2QuoteArgs = capture(dbUtilsMock.writeV2QuoteAsync).last();\n            expect(writeV2QuoteArgs[0]['affiliateAddress']).to.equal('0xaffiliateAddress');\n        });\n\n        describe('sells', () => {\n            it('should fetch a firm quote', async () => {\n                const sellAmount = new BigNumber(100);\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const quote: IndicativeQuote = {\n                    maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(101),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(100),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n\n                const cacheClientMock = mock(CacheClient);\n                when(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);\n                when(cacheClientMock.getMakersInCooldownForPairAsync(anything(), anything(), anything())).thenResolve(\n                    [],\n                );\n\n                // Mock out the dbUtils\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.writeV2QuoteAsync(anything())).thenResolve();\n                const dbUtils = instance(dbUtilsMock);\n\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    quote,\n                ]);\n                const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n                when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\n                    new BigNumber(150),\n                ]);\n\n                const service = buildRfqmServiceForUnitTest({\n                    quoteServerClient: instance(quoteServerClientMock),\n                    dbUtils,\n                    cacheClient: instance(cacheClientMock),\n                    rfqMakerBalanceCacheService: instance(rfqMakerBalanceCacheServiceMock),\n                });\n\n                const { quote: res } = await service.fetchFirmQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    takerAddress,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    sellAmount,\n                    checkApproval: false,\n                });\n\n                expect(res).to.exist; // tslint:disable-line: no-unused-expression\n                expect(res?.type).to.equal(GaslessTypes.OtcOrder);\n\n                expect(res?.sellAmount).to.equal(sellAmount);\n                expect(res?.price.toNumber()).to.equal(1.01);\n                expect(res?.orderHash).to.match(/^0x[0-9a-fA-F]+/);\n            });\n\n            // TODO: we may want to reintroduce this test very soon. However, if not addressed by June 2022, remove\n            it.skip('should scale a firm quote if MM returns too much', async () => {\n                const sellAmount = new BigNumber(100);\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const quote: IndicativeQuote = {\n                    maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(202),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(200),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n\n                const cacheClientMock = mock(CacheClient);\n                when(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);\n                when(cacheClientMock.getMakersInCooldownForPairAsync(anything(), anything(), anything())).thenResolve(\n                    [],\n                );\n\n                // Mock out the dbUtils\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.writeV2QuoteAsync(anything())).thenResolve();\n                const dbUtils = instance(dbUtilsMock);\n\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    quote,\n                ]);\n                const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n                when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\n                    new BigNumber(150),\n                ]);\n\n                const service = buildRfqmServiceForUnitTest({\n                    quoteServerClient: instance(quoteServerClientMock),\n                    dbUtils,\n                    cacheClient: instance(cacheClientMock),\n                    rfqMakerBalanceCacheService: instance(rfqMakerBalanceCacheServiceMock),\n                });\n\n                const { quote: res } = await service.fetchFirmQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    takerAddress,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    sellAmount,\n                    checkApproval: false,\n                });\n\n                expect(res).to.exist; // tslint:disable-line: no-unused-expression\n                expect(res?.type).to.equal(GaslessTypes.OtcOrder);\n                expect(res?.sellAmount).to.equal(sellAmount);\n                expect(res?.buyAmount.toNumber()).to.equal(101); // result is scaled\n                expect(res?.price.toNumber()).to.equal(1.01);\n                expect(res?.orderHash).to.match(/^0x[0-9a-fA-F]+/);\n            });\n\n            it('should round price to six decimal places', async () => {\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const quote: IndicativeQuote = {\n                    maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(111),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(333),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n\n                const cacheClientMock = mock(CacheClient);\n                when(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);\n                when(cacheClientMock.getMakersInCooldownForPairAsync(anything(), anything(), anything())).thenResolve(\n                    [],\n                );\n\n                // Mock out the dbUtils\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.writeV2QuoteAsync(anything())).thenResolve();\n                const dbUtils = instance(dbUtilsMock);\n\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    quote,\n                ]);\n                const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n                when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\n                    new BigNumber(150),\n                ]);\n\n                const service = buildRfqmServiceForUnitTest({\n                    quoteServerClient: instance(quoteServerClientMock),\n                    dbUtils,\n                    cacheClient: instance(cacheClientMock),\n                    rfqMakerBalanceCacheService: instance(rfqMakerBalanceCacheServiceMock),\n                });\n\n                const { quote: res } = await service.fetchFirmQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    takerAddress,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    sellAmount: new BigNumber(333),\n                    checkApproval: false,\n                });\n\n                if (res === null) {\n                    expect.fail('res is null, but not expected to be null');\n                    return;\n                }\n\n                expect(res.price.toNumber()).to.equal(0.3333333);\n            });\n\n            it('should not call `getGaslessApprovalResponseAsync` if checkApproval is false', async () => {\n                const sellAmount = new BigNumber(100);\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const quote: IndicativeQuote = {\n                    maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(101),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(100),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n\n                const cacheClientMock = mock(CacheClient);\n                when(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);\n                when(cacheClientMock.getMakersInCooldownForPairAsync(anything(), anything(), anything())).thenResolve(\n                    [],\n                );\n\n                // Mock out the dbUtils\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.writeV2QuoteAsync(anything())).thenResolve();\n                const dbUtils = instance(dbUtilsMock);\n\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    quote,\n                ]);\n                const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n                when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\n                    new BigNumber(150),\n                ]);\n\n                const service = buildRfqmServiceForUnitTest({\n                    quoteServerClient: instance(quoteServerClientMock),\n                    dbUtils,\n                    cacheClient: instance(cacheClientMock),\n                    rfqMakerBalanceCacheService: instance(rfqMakerBalanceCacheServiceMock),\n                });\n                const spiedService = spy(service);\n                when(spiedService.getGaslessApprovalResponseAsync(anything(), anything(), anything())).thenThrow(\n                    new Error('`getGaslessApprovalResponseAsync` should not be called'),\n                );\n\n                const { quote: res } = await service.fetchFirmQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    takerAddress,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    sellAmount,\n                    checkApproval: false,\n                });\n\n                expect(res).to.exist; // tslint:disable-line: no-unused-expression\n                expect(res?.type).to.equal(GaslessTypes.OtcOrder);\n\n                expect(res?.sellAmount).to.equal(sellAmount);\n                expect(res?.price.toNumber()).to.equal(1.01);\n                expect(res?.orderHash).to.match(/^0x[0-9a-fA-F]+/);\n                expect(res?.approval).to.equal(undefined);\n            });\n\n            it('should return the correct approval if checkApproval is true', async () => {\n                const sellAmount = new BigNumber(100);\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const quote: IndicativeQuote = {\n                    maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(101),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(100),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n\n                const cacheClientMock = mock(CacheClient);\n                when(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);\n                when(cacheClientMock.getMakersInCooldownForPairAsync(anything(), anything(), anything())).thenResolve(\n                    [],\n                );\n\n                // Mock out the dbUtils\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.writeV2QuoteAsync(anything())).thenResolve();\n                const dbUtils = instance(dbUtilsMock);\n\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    quote,\n                ]);\n                const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n                when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\n                    new BigNumber(150),\n                ]);\n\n                const service = buildRfqmServiceForUnitTest({\n                    quoteServerClient: instance(quoteServerClientMock),\n                    dbUtils,\n                    cacheClient: instance(cacheClientMock),\n                    rfqMakerBalanceCacheService: instance(rfqMakerBalanceCacheServiceMock),\n                });\n                const approval: ApprovalResponse = {\n                    isRequired: true,\n                    isGaslessAvailable: true,\n                    type: MOCK_EXECUTE_META_TRANSACTION_APPROVAL.kind,\n                    eip712: MOCK_EXECUTE_META_TRANSACTION_APPROVAL.eip712,\n                };\n                const spiedService = spy(service);\n                when(spiedService.getGaslessApprovalResponseAsync(anything(), anything(), anything())).thenResolve(\n                    approval,\n                );\n\n                const { quote: res } = await service.fetchFirmQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    takerAddress,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    sellAmount,\n                    checkApproval: true,\n                });\n\n                expect(res).to.exist; // tslint:disable-line: no-unused-expression\n                expect(res?.type).to.equal(GaslessTypes.OtcOrder);\n\n                expect(res?.sellAmount).to.equal(sellAmount);\n                expect(res?.price.toNumber()).to.equal(1.01);\n                expect(res?.orderHash).to.match(/^0x[0-9a-fA-F]+/);\n                expect(res?.approval).to.eql(approval);\n            });\n        });\n\n        describe('buys', () => {\n            it('should fetch a firm quote', async () => {\n                const buyAmount = new BigNumber(100);\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const quote: IndicativeQuote = {\n                    maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(100),\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(80),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n\n                const cacheClientMock = mock(CacheClient);\n                when(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);\n                when(cacheClientMock.getMakersInCooldownForPairAsync(anything(), anything(), anything())).thenResolve(\n                    [],\n                );\n\n                // Mock out the dbUtils\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.writeV2QuoteAsync(anything())).thenResolve();\n                const dbUtils = instance(dbUtilsMock);\n\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    quote,\n                ]);\n                const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n                when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\n                    new BigNumber(150),\n                ]);\n\n                const service = buildRfqmServiceForUnitTest({\n                    quoteServerClient: instance(quoteServerClientMock),\n                    dbUtils,\n                    cacheClient: instance(cacheClientMock),\n                    rfqMakerBalanceCacheService: instance(rfqMakerBalanceCacheServiceMock),\n                });\n\n                const { quote: res } = await service.fetchFirmQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    takerAddress,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    buyAmount: new BigNumber(100),\n                    checkApproval: false,\n                });\n\n                expect(res).to.exist; // tslint:disable-line: no-unused-expression\n                expect(res?.type).to.equal(GaslessTypes.OtcOrder);\n                expect(res?.buyAmount.toNumber()).to.equal(buyAmount.toNumber());\n                expect(res?.price.toNumber()).to.equal(0.8);\n                expect(res?.orderHash).to.match(/^0x[0-9a-fA-F]+/);\n            });\n\n            // TODO: we may want to reintroduce this test very soon. However, if not addressed by June 2022, remove\n            it.skip('should scale a firm quote to desired buyAmount if MM returns too much', async () => {\n                const buyAmount = new BigNumber(100);\n                const contractAddresses = getContractAddressesForChainOrThrow(1);\n                const quote: IndicativeQuote = {\n                    maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',\n                    makerToken: contractAddresses.zrxToken,\n                    makerAmount: new BigNumber(125), // more than buyAmount\n                    takerToken: contractAddresses.etherToken,\n                    takerAmount: new BigNumber(100),\n                    expiry: NEVER_EXPIRES,\n                    makerUri: MOCK_MM_URI,\n                };\n\n                const cacheClientMock = mock(CacheClient);\n                when(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);\n                when(cacheClientMock.getMakersInCooldownForPairAsync(anything(), anything(), anything())).thenResolve(\n                    [],\n                );\n\n                // Mock out the dbUtils\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.writeV2QuoteAsync(anything())).thenResolve();\n                const dbUtils = instance(dbUtilsMock);\n\n                const quoteServerClientMock = mock(QuoteServerClient);\n                when(quoteServerClientMock.batchGetPriceV2Async(anything(), anything(), anything())).thenResolve([\n                    quote,\n                ]);\n                const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n                when(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\n                    new BigNumber(150),\n                ]);\n\n                const service = buildRfqmServiceForUnitTest({\n                    quoteServerClient: instance(quoteServerClientMock),\n                    dbUtils,\n                    cacheClient: instance(cacheClientMock),\n                    rfqMakerBalanceCacheService: instance(rfqMakerBalanceCacheServiceMock),\n                });\n\n                const { quote: res } = await service.fetchFirmQuoteAsync({\n                    integrator: MOCK_INTEGRATOR,\n                    takerAddress,\n                    buyToken: contractAddresses.zrxToken,\n                    sellToken: contractAddresses.etherToken,\n                    buyTokenDecimals: 18,\n                    sellTokenDecimals: 18,\n                    buyAmount: new BigNumber(100),\n                    checkApproval: false,\n                });\n\n                expect(res).to.exist; // tslint:disable-line: no-unused-expression\n                expect(res?.type).to.equal(GaslessTypes.OtcOrder);\n                expect(res?.buyAmount.toNumber()).to.equal(buyAmount.toNumber());\n                expect(res?.sellAmount.toNumber()).to.equal(80); // result is scaled\n                expect(res?.price.toNumber()).to.equal(0.8);\n                expect(res?.orderHash).to.match(/^0x[0-9a-fA-F]+/);\n            });\n        });\n    });\n\n    describe('getGaslessApprovalResponseAsync', () => {\n        it('returns correct approval field', async () => {\n            const service = buildRfqmServiceForUnitTest();\n\n            let approval = await service.getGaslessApprovalResponseAsync(\n                MOCK_WORKER_REGISTRY_ADDRESS,\n                MOCK_TOKEN,\n                new BigNumber(100),\n            );\n            expect(approval).to.eql({ isRequired: false });\n\n            approval = await service.getGaslessApprovalResponseAsync(\n                MOCK_WORKER_REGISTRY_ADDRESS,\n                MOCK_TOKEN,\n                new BigNumber(100),\n            );\n            expect(approval).to.eql({ isRequired: true, isGaslessAvailable: false });\n\n            approval = await service.getGaslessApprovalResponseAsync(\n                MOCK_WORKER_REGISTRY_ADDRESS,\n                MOCK_TOKEN,\n                new BigNumber(100),\n            );\n            expect(approval).to.eql({\n                isRequired: true,\n                isGaslessAvailable: true,\n                type: MOCK_EXECUTE_META_TRANSACTION_APPROVAL.kind,\n                eip712: MOCK_EXECUTE_META_TRANSACTION_APPROVAL.eip712,\n            });\n        });\n    });\n\n    describe('runHealthCheckAsync', () => {\n        it('returns active pairs', async () => {\n            const dbUtilsMock = mock(RfqmDbUtils);\n            when(dbUtilsMock.findRfqmWorkerHeartbeatsAsync(1337)).thenResolve([]);\n\n            const rfqMakerManagerMock = mock(RfqMakerManager);\n            when(rfqMakerManagerMock.getRfqmV2MakerOfferings()).thenReturn({\n                'https://mock-rfqm1.club': [\n                    ['0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c', '0x0b1ba0af832d7c05fd64161e0db78e85978e8082'],\n                ],\n            });\n\n            const service = buildRfqmServiceForUnitTest({\n                dbUtils: instance(dbUtilsMock),\n                rfqMakerManager: instance(rfqMakerManagerMock),\n            });\n\n            const result = await service.runHealthCheckAsync();\n\n            expect(result.pairs).to.have.key(\n                '0x0b1ba0af832d7c05fd64161e0db78e85978e8082-0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c',\n            );\n            expect(\n                result.pairs['0x0b1ba0af832d7c05fd64161e0db78e85978e8082-0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c'],\n            ).to.equal(HealthCheckStatus.Operational);\n        });\n    });\n\n    describe('status', () => {\n        describe('v2', () => {\n            const expiry = new BigNumber(Date.now() + 1_000_000).dividedBy(ONE_SECOND_MS).decimalPlaces(0);\n            const chainId = 1337;\n            const otcOrder = new OtcOrder({\n                txOrigin: '0x0000000000000000000000000000000000000000',\n                taker: '0x1111111111111111111111111111111111111111',\n                maker: '0x2222222222222222222222222222222222222222',\n                makerToken: '0x3333333333333333333333333333333333333333',\n                takerToken: '0x4444444444444444444444444444444444444444',\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(expiry, ZERO, expiry),\n                chainId,\n                verifyingContract: '0x0000000000000000000000000000000000000000',\n            });\n            const BASE_JOB = new RfqmV2JobEntity({\n                chainId,\n                expiry,\n                makerUri: '',\n                orderHash: '0x00',\n                fee: {\n                    token: '0xToken',\n                    amount: '100',\n                    type: 'fixed',\n                },\n                order: otcOrderToStoredOtcOrder(otcOrder),\n            });\n            it('should return failed for jobs that have sat in queue past expiry', async () => {\n                const expired = new BigNumber(Date.now() - 10000).dividedBy(ONE_SECOND_MS).decimalPlaces(0);\n                const oldJob = new RfqmV2JobEntity({ ...BASE_JOB, expiry: expired });\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(oldJob);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                const jobStatus = await service.getStatusAsync('0x00');\n\n                if (jobStatus === null) {\n                    expect.fail('Status should exist');\n                    throw new Error();\n                }\n                expect(jobStatus.status).to.equal('failed');\n\n                if (jobStatus.status !== 'failed') {\n                    expect.fail('Status should be failed');\n                    throw new Error();\n                }\n                expect(jobStatus.transactions).to.have.length(0); // tslint:disable-line no-unused-expression\n            });\n\n            it('should return pending for unexpired enqueued jobs', async () => {\n                const newJob = BASE_JOB; // BASE_JOB has a valid expiry\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(newJob);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                const jobStatus = await service.getStatusAsync('0x00');\n\n                if (jobStatus === null) {\n                    expect.fail('Status should exist');\n                    throw new Error();\n                }\n                expect(jobStatus.status).to.equal('pending');\n            });\n\n            it('should return pending for jobs in processing', async () => {\n                const job = new RfqmV2JobEntity({ ...BASE_JOB, status: RfqmJobStatus.PendingProcessing });\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                const jobStatus = await service.getStatusAsync('0x00');\n\n                if (jobStatus === null) {\n                    expect.fail('Status should exist');\n                    throw new Error();\n                }\n                expect(jobStatus.status).to.equal('pending');\n            });\n\n            it('should return submitted with transaction submissions for submitted jobs', async () => {\n                const now = Date.now();\n                const transaction1Time = now + 10;\n                const transaction2Time = now + 20;\n\n                const job = new RfqmV2JobEntity({\n                    ...BASE_JOB,\n                    status: RfqmJobStatus.PendingSubmitted,\n                });\n\n                const submission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(transaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x01',\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 0,\n                });\n                const submission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(transaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x02',\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 1,\n                });\n\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Trade,\n                    ),\n                ).thenResolve([submission1, submission2]);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                const jobStatus = await service.getStatusAsync('0x00');\n\n                if (jobStatus === null) {\n                    expect.fail('Status should exist');\n                    throw new Error();\n                }\n\n                if (jobStatus.status !== 'submitted') {\n                    expect.fail('Status should be submitted');\n                    throw new Error();\n                }\n                expect(jobStatus.transactions).to.have.length(2);\n                expect(jobStatus.transactions).to.deep.include({\n                    hash: '0x01',\n                    timestamp: +transaction1Time.valueOf(),\n                });\n                expect(jobStatus.transactions).to.deep.include({\n                    hash: '0x02',\n                    timestamp: +transaction2Time.valueOf(),\n                });\n            });\n\n            it('should return succeeded for a successful job, with the succeeded job', async () => {\n                const now = Date.now();\n                const transaction1Time = now + 10;\n                const transaction2Time = now + 20;\n\n                const job = new RfqmV2JobEntity({\n                    ...BASE_JOB,\n                    status: RfqmJobStatus.SucceededUnconfirmed,\n                });\n\n                const submission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(transaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x01',\n                    status: RfqmTransactionSubmissionStatus.DroppedAndReplaced,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 0,\n                });\n                const submission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(transaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x02',\n                    status: RfqmTransactionSubmissionStatus.SucceededUnconfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 1,\n                });\n\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Trade,\n                    ),\n                ).thenResolve([submission1, submission2]);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                const jobStatus = await service.getStatusAsync('0x00');\n\n                if (jobStatus === null) {\n                    expect.fail('Status should exist');\n                    throw new Error();\n                }\n\n                if (jobStatus.status !== 'succeeded') {\n                    expect.fail('Status should be succeeded');\n                    throw new Error();\n                }\n                expect(jobStatus.transactions[0]).to.contain({ hash: '0x02', timestamp: +transaction2Time.valueOf() });\n            });\n\n            it('should return confirmed for a successful confirmed job', async () => {\n                const now = Date.now();\n                const transaction1Time = now + 10;\n                const transaction2Time = now + 20;\n\n                const job = new RfqmV2JobEntity({\n                    ...BASE_JOB,\n                    status: RfqmJobStatus.SucceededConfirmed,\n                });\n\n                const submission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(transaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x01',\n                    status: RfqmTransactionSubmissionStatus.DroppedAndReplaced,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 0,\n                });\n                const submission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(transaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x02',\n                    status: RfqmTransactionSubmissionStatus.SucceededConfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 1,\n                });\n\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Trade,\n                    ),\n                ).thenResolve([submission1, submission2]);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                const jobStatus = await service.getStatusAsync('0x00');\n\n                if (jobStatus === null) {\n                    expect.fail('Status should exist');\n                    throw new Error();\n                }\n\n                if (jobStatus.status !== 'confirmed') {\n                    expect.fail('Status should be confirmed');\n                    throw new Error();\n                }\n                expect(jobStatus.transactions[0]).to.contain({ hash: '0x02', timestamp: +transaction2Time.valueOf() });\n            });\n\n            it('should throw if the job is successful but there are no successful transactions', async () => {\n                const now = Date.now();\n                const transaction1Time = now + 10;\n                const transaction2Time = now + 20;\n\n                const job = new RfqmV2JobEntity({\n                    ...BASE_JOB,\n                    status: RfqmJobStatus.SucceededUnconfirmed,\n                });\n\n                const submission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(transaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x01',\n                    status: RfqmTransactionSubmissionStatus.DroppedAndReplaced,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 0,\n                });\n                const submission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(transaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x02',\n                    status: RfqmTransactionSubmissionStatus.RevertedUnconfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 1,\n                });\n\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Trade,\n                    ),\n                ).thenResolve([submission1, submission2]);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                try {\n                    await service.getStatusAsync('0x00');\n                    expect.fail();\n                } catch (e) {\n                    expect(e.message).to.contain('Expected exactly one successful transaction submission');\n                }\n            });\n\n            it('should throw if the job is successful but there are multiple successful transactions', async () => {\n                const now = Date.now();\n                const transaction1Time = now + 10;\n                const transaction2Time = now + 20;\n\n                const job = new RfqmV2JobEntity({\n                    ...BASE_JOB,\n                    status: RfqmJobStatus.SucceededUnconfirmed,\n                });\n\n                const submission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(transaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x01',\n                    status: RfqmTransactionSubmissionStatus.SucceededUnconfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 0,\n                });\n                const submission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(transaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x02',\n                    status: RfqmTransactionSubmissionStatus.SucceededUnconfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 1,\n                });\n\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Trade,\n                    ),\n                ).thenResolve([submission1, submission2]);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                try {\n                    await service.getStatusAsync('0x00');\n                    expect.fail();\n                } catch (e) {\n                    expect(e.message).to.contain('Expected exactly one successful transaction submission');\n                }\n            });\n\n            it('should return submitted with approval and trade transaction submissions for submitted jobs', async () => {\n                const now = Date.now();\n                const approvalTransaction1Time = now + 3;\n                const approvalTransaction2Time = now + 7;\n                const tradeTransaction1Time = now + 10;\n                const tradeTransaction2Time = now + 20;\n\n                const job = new RfqmV2JobEntity({\n                    ...BASE_JOB,\n                    approval: MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\n                    status: RfqmJobStatus.PendingSubmitted,\n                });\n\n                const approvalSubmission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(approvalTransaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x01',\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Approval,\n                    nonce: 0,\n                });\n                const approvalSubmission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(approvalTransaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x02',\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Approval,\n                    nonce: 1,\n                });\n                const tradeSubmission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(tradeTransaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x03',\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 2,\n                });\n                const tradeSubmission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(tradeTransaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x04',\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 3,\n                });\n\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Approval,\n                    ),\n                ).thenResolve([approvalSubmission1, approvalSubmission2]);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Trade,\n                    ),\n                ).thenResolve([tradeSubmission1, tradeSubmission2]);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                const orderStatus = await service.getStatusAsync('0x00');\n\n                if (orderStatus === null) {\n                    expect.fail('Status should exist');\n                    throw new Error();\n                }\n\n                if (orderStatus.status !== 'submitted') {\n                    expect.fail('Status should be submitted');\n                    throw new Error();\n                }\n                expect(orderStatus.approvalTransactions).to.have.length(2);\n                expect(orderStatus.approvalTransactions).to.deep.include({\n                    hash: '0x01',\n                    timestamp: +approvalTransaction1Time.valueOf(),\n                });\n                expect(orderStatus.approvalTransactions).to.deep.include({\n                    hash: '0x02',\n                    timestamp: +approvalTransaction2Time.valueOf(),\n                });\n                expect(orderStatus.transactions).to.have.length(2);\n                expect(orderStatus.transactions).to.deep.include({\n                    hash: '0x03',\n                    timestamp: +tradeTransaction1Time.valueOf(),\n                });\n                expect(orderStatus.transactions).to.deep.include({\n                    hash: '0x04',\n                    timestamp: +tradeTransaction2Time.valueOf(),\n                });\n            });\n\n            it('should return failed with approval and trade transaction submissions for failed jobs', async () => {\n                const now = Date.now();\n                const approvalTransaction1Time = now + 3;\n                const approvalTransaction2Time = now + 7;\n                const tradeTransaction1Time = now + 10;\n                const tradeTransaction2Time = now + 20;\n\n                const job = new RfqmV2JobEntity({\n                    ...BASE_JOB,\n                    approval: MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\n                    status: RfqmJobStatus.FailedExpired,\n                });\n\n                const approvalSubmission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(approvalTransaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x01',\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Approval,\n                    nonce: 0,\n                });\n                const approvalSubmission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(approvalTransaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x02',\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Approval,\n                    nonce: 1,\n                });\n                const tradeSubmission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(tradeTransaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x03',\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 2,\n                });\n                const tradeSubmission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(tradeTransaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x04',\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 3,\n                });\n\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Approval,\n                    ),\n                ).thenResolve([approvalSubmission1, approvalSubmission2]);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Trade,\n                    ),\n                ).thenResolve([tradeSubmission1, tradeSubmission2]);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                const orderStatus = await service.getStatusAsync('0x00');\n\n                if (orderStatus === null) {\n                    expect.fail('Status should exist');\n                    throw new Error();\n                }\n\n                if (orderStatus.status !== 'failed') {\n                    expect.fail('Status should be failed');\n                    throw new Error();\n                }\n                expect(orderStatus.approvalTransactions).to.have.length(2);\n                expect(orderStatus.approvalTransactions).to.deep.include({\n                    hash: '0x01',\n                    timestamp: +approvalTransaction1Time.valueOf(),\n                });\n                expect(orderStatus.approvalTransactions).to.deep.include({\n                    hash: '0x02',\n                    timestamp: +approvalTransaction2Time.valueOf(),\n                });\n                expect(orderStatus.transactions).to.have.length(2);\n                expect(orderStatus.transactions).to.deep.include({\n                    hash: '0x03',\n                    timestamp: +tradeTransaction1Time.valueOf(),\n                });\n                expect(orderStatus.transactions).to.deep.include({\n                    hash: '0x04',\n                    timestamp: +tradeTransaction2Time.valueOf(),\n                });\n            });\n\n            it('should return declined for a job that was declined on the last look', async () => {\n                const job = new RfqmV2JobEntity({\n                    ...BASE_JOB,\n                    status: RfqmJobStatus.FailedLastLookDeclined,\n                });\n\n                const dbUtilsMock = mock(RfqmDbUtils);\n                //what is this dummy first attempt?\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve();\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Trade,\n                    ),\n                ).thenResolve([]);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                const jobStatus = await service.getStatusAsync('0x00');\n\n                if (jobStatus === null) {\n                    expect.fail('Status should exist');\n                    throw new Error();\n                }\n\n                expect(jobStatus.status).to.eq('failed');\n                if (jobStatus.status == 'failed') {\n                    expect(jobStatus.reason).to.eq('last_look_declined');\n                }\n            });\n\n            it('should return succeeded for a successful job, with the succeeded job and include correct `transactions` and `approvalTransactions`', async () => {\n                const now = Date.now();\n                const approvalTransaction1Time = now + 3;\n                const approvalTransaction2Time = now + 7;\n                const tradeTransaction1Time = now + 10;\n                const tradeTransaction2Time = now + 20;\n\n                const job = new RfqmV2JobEntity({\n                    ...BASE_JOB,\n                    approval: MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\n                    status: RfqmJobStatus.SucceededUnconfirmed,\n                });\n\n                const approvalSubmission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(approvalTransaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x01',\n                    status: RfqmTransactionSubmissionStatus.DroppedAndReplaced,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Approval,\n                    nonce: 0,\n                });\n                const approvalSubmission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(approvalTransaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x02',\n                    status: RfqmTransactionSubmissionStatus.SucceededUnconfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Approval,\n                    nonce: 1,\n                });\n                const tradeSubmission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(tradeTransaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x03',\n                    status: RfqmTransactionSubmissionStatus.DroppedAndReplaced,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 2,\n                });\n                const tradeSubmission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(tradeTransaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x04',\n                    status: RfqmTransactionSubmissionStatus.SucceededUnconfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 3,\n                });\n\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Approval,\n                    ),\n                ).thenResolve([approvalSubmission1, approvalSubmission2]);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Trade,\n                    ),\n                ).thenResolve([tradeSubmission1, tradeSubmission2]);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                const orderStatus = await service.getStatusAsync('0x00');\n\n                if (orderStatus === null) {\n                    expect.fail('Status should exist');\n                    throw new Error();\n                }\n\n                if (orderStatus.status !== 'succeeded') {\n                    expect.fail('Status should be succeeded');\n                    throw new Error();\n                }\n\n                if (!orderStatus.approvalTransactions) {\n                    expect.fail('Approval transactions not present');\n                    throw new Error();\n                }\n\n                expect(orderStatus.approvalTransactions[0]).to.contain({\n                    hash: '0x02',\n                    timestamp: +approvalTransaction2Time.valueOf(),\n                });\n                expect(orderStatus.transactions[0]).to.contain({\n                    hash: '0x04',\n                    timestamp: +tradeTransaction2Time.valueOf(),\n                });\n            });\n\n            it('should return confirmed for a successful confirmed job and include correct `transactions` and `approvalTransactions`', async () => {\n                const now = Date.now();\n                const approvalTransaction1Time = now + 3;\n                const approvalTransaction2Time = now + 7;\n                const tradeTransaction1Time = now + 10;\n                const tradeTransaction2Time = now + 20;\n\n                const job = new RfqmV2JobEntity({\n                    ...BASE_JOB,\n                    approval: MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\n                    status: RfqmJobStatus.SucceededConfirmed,\n                });\n\n                const approvalSubmission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(approvalTransaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x01',\n                    status: RfqmTransactionSubmissionStatus.DroppedAndReplaced,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Approval,\n                    nonce: 0,\n                });\n                const approvalSubmission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(approvalTransaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x02',\n                    status: RfqmTransactionSubmissionStatus.SucceededConfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Approval,\n                    nonce: 1,\n                });\n                const tradeSubmission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(tradeTransaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x03',\n                    status: RfqmTransactionSubmissionStatus.DroppedAndReplaced,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 2,\n                });\n                const tradeSubmission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(tradeTransaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x04',\n                    status: RfqmTransactionSubmissionStatus.SucceededConfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 3,\n                });\n\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Approval,\n                    ),\n                ).thenResolve([approvalSubmission1, approvalSubmission2]);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Trade,\n                    ),\n                ).thenResolve([tradeSubmission1, tradeSubmission2]);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                const orderStatus = await service.getStatusAsync('0x00');\n\n                if (orderStatus === null) {\n                    expect.fail('Status should exist');\n                    throw new Error();\n                }\n\n                if (orderStatus.status !== 'confirmed') {\n                    expect.fail('Status should be confirmed');\n                    throw new Error();\n                }\n\n                if (!orderStatus.approvalTransactions) {\n                    expect.fail('Approval transactions not present');\n                    throw new Error();\n                }\n\n                expect(orderStatus.approvalTransactions[0]).to.contain({\n                    hash: '0x02',\n                    timestamp: +approvalTransaction2Time.valueOf(),\n                });\n                expect(orderStatus.transactions[0]).to.contain({\n                    hash: '0x04',\n                    timestamp: +tradeTransaction2Time.valueOf(),\n                });\n            });\n\n            it('should throw if the job is successful but there are no successful transactions for approval', async () => {\n                const now = Date.now();\n                const approvalTransaction1Time = now + 3;\n                const approvalTransaction2Time = now + 7;\n                const tradeTransaction1Time = now + 10;\n                const tradeTransaction2Time = now + 20;\n\n                const job = new RfqmV2JobEntity({\n                    ...BASE_JOB,\n                    approval: MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\n                    status: RfqmJobStatus.SucceededUnconfirmed,\n                });\n\n                const approvalSubmission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(approvalTransaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x01',\n                    status: RfqmTransactionSubmissionStatus.DroppedAndReplaced,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Approval,\n                    nonce: 0,\n                });\n                const approvalSubmission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(approvalTransaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x02',\n                    status: RfqmTransactionSubmissionStatus.RevertedUnconfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Approval,\n                    nonce: 1,\n                });\n                const tradeSubmission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(tradeTransaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x03',\n                    status: RfqmTransactionSubmissionStatus.DroppedAndReplaced,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 2,\n                });\n                const tradeSubmission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(tradeTransaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x04',\n                    status: RfqmTransactionSubmissionStatus.SucceededUnconfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 3,\n                });\n\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Approval,\n                    ),\n                ).thenResolve([approvalSubmission1, approvalSubmission2]);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Trade,\n                    ),\n                ).thenResolve([tradeSubmission1, tradeSubmission2]);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                try {\n                    await service.getStatusAsync('0x00');\n                    expect.fail();\n                } catch (e) {\n                    expect(e.message).to.contain('Expected exactly one successful transaction submission');\n                }\n            });\n\n            it('should throw if the job is successful but there are multiple successful transactions for approval', async () => {\n                const now = Date.now();\n                const approvalTransaction1Time = now + 3;\n                const approvalTransaction2Time = now + 7;\n                const tradeTransaction1Time = now + 10;\n                const tradeTransaction2Time = now + 20;\n\n                const job = new RfqmV2JobEntity({\n                    ...BASE_JOB,\n                    approval: MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\n                    status: RfqmJobStatus.SucceededUnconfirmed,\n                });\n\n                const approvalSubmission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(approvalTransaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x01',\n                    status: RfqmTransactionSubmissionStatus.SucceededUnconfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Approval,\n                    nonce: 0,\n                });\n                const approvalSubmission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(approvalTransaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x02',\n                    status: RfqmTransactionSubmissionStatus.SucceededConfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Approval,\n                    nonce: 1,\n                });\n                const tradeSubmission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(tradeTransaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x03',\n                    status: RfqmTransactionSubmissionStatus.DroppedAndReplaced,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 2,\n                });\n                const tradeSubmission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(tradeTransaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x04',\n                    status: RfqmTransactionSubmissionStatus.SucceededUnconfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 3,\n                });\n\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Approval,\n                    ),\n                ).thenResolve([approvalSubmission1, approvalSubmission2]);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Trade,\n                    ),\n                ).thenResolve([tradeSubmission1, tradeSubmission2]);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                try {\n                    await service.getStatusAsync('0x00');\n                    expect.fail();\n                } catch (e) {\n                    expect(e.message).to.contain('Expected exactly one successful transaction submission');\n                }\n            });\n\n            it('should throw if the job is successful but the successful transaciton has no hash for approval', async () => {\n                const now = Date.now();\n                const approvalTransaction1Time = now + 3;\n                const approvalTransaction2Time = now + 7;\n                const tradeTransaction1Time = now + 10;\n                const tradeTransaction2Time = now + 20;\n\n                const job = new RfqmV2JobEntity({\n                    ...BASE_JOB,\n                    approval: MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\n                    status: RfqmJobStatus.SucceededUnconfirmed,\n                });\n\n                const approvalSubmission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(approvalTransaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x01',\n                    status: RfqmTransactionSubmissionStatus.DroppedAndReplaced,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Approval,\n                    nonce: 0,\n                });\n                const approvalSubmission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(approvalTransaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '',\n                    status: RfqmTransactionSubmissionStatus.SucceededConfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Approval,\n                    nonce: 1,\n                });\n                const tradeSubmission1 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(tradeTransaction1Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x03',\n                    status: RfqmTransactionSubmissionStatus.DroppedAndReplaced,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 2,\n                });\n                const tradeSubmission2 = new RfqmV2TransactionSubmissionEntity({\n                    createdAt: new Date(tradeTransaction2Time),\n                    orderHash: job.orderHash,\n                    transactionHash: '0x04',\n                    status: RfqmTransactionSubmissionStatus.SucceededUnconfirmed,\n                    from: job.order.order.txOrigin,\n                    to: job.order.order.verifyingContract,\n                    type: RfqmTransactionSubmissionType.Trade,\n                    nonce: 3,\n                });\n\n                const dbUtilsMock = mock(RfqmDbUtils);\n                when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Approval,\n                    ),\n                ).thenResolve([approvalSubmission1, approvalSubmission2]);\n                when(\n                    dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(\n                        job.orderHash,\n                        RfqmTransactionSubmissionType.Trade,\n                    ),\n                ).thenResolve([tradeSubmission1, tradeSubmission2]);\n                const service = buildRfqmServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\n\n                try {\n                    await service.getStatusAsync('0x00');\n                    expect.fail();\n                } catch (e) {\n                    expect(e.message).to.contain('does not have a hash');\n                }\n            });\n        });\n    });\n});\n"],"version":3}