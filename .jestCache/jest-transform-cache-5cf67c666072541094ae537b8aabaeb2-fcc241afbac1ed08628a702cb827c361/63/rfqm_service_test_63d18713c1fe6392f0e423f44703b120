b5fd35780184f493f36bdbf254eb69f1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:custom-no-magic-numbers
// tslint:disable:no-empty
// tslint:disable:max-file-line-count
const api_utils_1 = require("@0x/api-utils");
const contract_addresses_1 = require("@0x/contract-addresses");
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const chai_1 = require("chai");
const ethers_1 = require("ethers");
const sqs_producer_1 = require("sqs-producer");
const ts_mockito_1 = require("ts-mockito");
const constants_1 = require("../../src/core/constants");
const entities_1 = require("../../src/entities");
const types_1 = require("../../src/entities/types");
const fee_service_1 = require("../../src/services/fee_service");
const rfqm_service_1 = require("../../src/services/rfqm_service");
const rfq_maker_balance_cache_service_1 = require("../../src/services/rfq_maker_balance_cache_service");
const types_2 = require("../../src/core/types");
const cache_client_1 = require("../../src/utils/cache_client");
const quote_server_client_1 = require("../../src/utils/quote_server_client");
const rfqm_db_utils_1 = require("../../src/utils/rfqm_db_utils");
const rfqm_health_check_1 = require("../../src/utils/rfqm_health_check");
const rfq_blockchain_utils_1 = require("../../src/utils/rfq_blockchain_utils");
const rfq_maker_manager_1 = require("../../src/utils/rfq_maker_manager");
const TokenMetadataManager_1 = require("../../src/utils/TokenMetadataManager");
const constants_2 = require("../constants");
// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
// eslint-disable-next-line @typescript-eslint/no-loss-of-precision
const NEVER_EXPIRES = new utils_1.BigNumber(9999999999999999);
const MOCK_WORKER_REGISTRY_ADDRESS = '0x1023331a469c6391730ff1E2749422CE8873EC38';
const MOCK_TOKEN = '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48';
const MOCK_GAS_PRICE = new utils_1.BigNumber(100000000000);
const MOCK_MM_URI = 'https://mm-address';
const WORKER_FULL_BALANCE_WEI = new utils_1.BigNumber(1).shiftedBy(constants_1.ETH_DECIMALS);
const MOCK_INTEGRATOR = {
    apiKeys: ['an-integrator-id'],
    integratorId: 'an-integrator-id',
    allowedChainIds: [1337],
    label: 'Test',
    plp: false,
    rfqm: true,
    rfqt: true,
};
const buildRfqmServiceForUnitTest = (overrides = {}) => {
    const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
    const feeServiceMock = (0, ts_mockito_1.mock)(fee_service_1.FeeService);
    (0, ts_mockito_1.when)(feeServiceMock.getGasPriceEstimationAsync()).thenResolve(MOCK_GAS_PRICE);
    (0, ts_mockito_1.when)(feeServiceMock.calculateFeeAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve({
        feeWithDetails: {
            token: '0xToken',
            amount: new utils_1.BigNumber(300),
            type: 'fixed',
            details: {
                feeModelVersion: 1,
                kind: 'default',
                gasFeeAmount: new utils_1.BigNumber(100),
                gasPrice: MOCK_GAS_PRICE,
                zeroExFeeAmount: new utils_1.BigNumber(200),
                tradeSizeBps: 4,
                feeTokenBaseUnitPriceUsd: new utils_1.BigNumber(30),
                takerTokenBaseUnitPriceUsd: null,
                makerTokenBaseUnitPriceUsd: new utils_1.BigNumber(20),
            },
            breakdown: {
                gas: {
                    amount: new utils_1.BigNumber(100),
                    details: {
                        gasPrice: MOCK_GAS_PRICE,
                        estimatedGas: new utils_1.BigNumber(1),
                    },
                },
                zeroEx: {
                    amount: new utils_1.BigNumber(200),
                    details: {
                        kind: 'volume',
                        tradeSizeBps: 4,
                    },
                },
            },
            conversionRates: {
                nativeTokenBaseUnitPriceUsd: new utils_1.BigNumber(30),
                feeTokenBaseUnitPriceUsd: new utils_1.BigNumber(30),
                takerTokenBaseUnitPriceUsd: null,
                makerTokenBaseUnitPriceUsd: new utils_1.BigNumber(20),
            },
        },
    });
    const feeServiceInstance = (0, ts_mockito_1.instance)(feeServiceMock);
    const rfqBlockchainUtilsMock = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
    (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.getAccountBalanceAsync(MOCK_WORKER_REGISTRY_ADDRESS)).thenResolve(WORKER_FULL_BALANCE_WEI);
    (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.getAllowanceAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(new utils_1.BigNumber(ethers_1.constants.MaxUint256.toString()), new utils_1.BigNumber(0), new utils_1.BigNumber(0));
    (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.getGaslessApprovalAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(null, constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL);
    const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
    const sqsMock = (0, ts_mockito_1.mock)(sqs_producer_1.Producer);
    (0, ts_mockito_1.when)(sqsMock.queueSize()).thenResolve(0);
    const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
    const cacheClientMock = (0, ts_mockito_1.mock)(cache_client_1.CacheClient);
    (0, ts_mockito_1.when)(cacheClientMock.getMakersInCooldownForPairAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([]);
    const rfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
    const rfqMakerManagerMock = (0, ts_mockito_1.mock)(rfq_maker_manager_1.RfqMakerManager);
    const tokenMetadataManagerMock = (0, ts_mockito_1.mock)(TokenMetadataManager_1.TokenMetadataManager);
    (0, ts_mockito_1.when)(tokenMetadataManagerMock.getTokenDecimalsAsync((0, ts_mockito_1.anything)())).thenResolve(18);
    const tokenMetadataManager = (0, ts_mockito_1.instance)(tokenMetadataManagerMock);
    return new rfqm_service_1.RfqmService(overrides.chainId || 1337, overrides.feeService || feeServiceInstance, overrides.feeModelVersion || 0, contractAddresses, MOCK_WORKER_REGISTRY_ADDRESS, overrides.rfqBlockchainUtils || (0, ts_mockito_1.instance)(rfqBlockchainUtilsMock), overrides.dbUtils || dbUtilsMock, overrides.producer || sqsMock, overrides.quoteServerClient || quoteServerClientMock, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, overrides.cacheClient || (0, ts_mockito_1.instance)(cacheClientMock), overrides.rfqMakerBalanceCacheService || rfqMakerBalanceCacheService, overrides.rfqMakerManager || rfqMakerManagerMock, overrides.tokenMetadataManager || tokenMetadataManager);
};
describe('RfqmService HTTP Logic', () => {
    describe('submitTakerSignedOtcOrderAsync', () => {
        it('should fail if there is already a pending trade for the taker and taker token', async () => {
            const expiry = new utils_1.BigNumber(Date.now() + 1000000).dividedBy(constants_1.ONE_SECOND_MS).decimalPlaces(0);
            const otcOrder = new protocol_utils_1.OtcOrder({
                txOrigin: '0x0000000000000000000000000000000000000000',
                taker: '0x1111111111111111111111111111111111111111',
                maker: '0x2222222222222222222222222222222222222222',
                makerToken: '0x3333333333333333333333333333333333333333',
                takerToken: '0x4444444444444444444444444444444444444444',
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(expiry, constants_1.ZERO, expiry),
                chainId: 1337,
                verifyingContract: '0x0000000000000000000000000000000000000000',
            });
            const existingJob = new entities_1.RfqmV2JobEntity({
                chainId: 1337,
                expiry,
                makerUri: '',
                orderHash: '0x00',
                fee: {
                    token: '0xToken',
                    amount: '100',
                    type: 'fixed',
                },
                order: (0, rfqm_db_utils_1.otcOrderToStoredOtcOrder)(otcOrder),
            });
            const quote = new entities_1.RfqmV2QuoteEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                makerUri: 'http://foo.bar',
                order: {
                    order: existingJob.order.order,
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '',
                isUnwrap: false,
            });
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2JobsWithStatusesAsync((0, ts_mockito_1.anything)())).thenResolve([existingJob]);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2QuoteByOrderHashAsync(otcOrder.getHash())).thenResolve(quote);
            const params = {
                type: types_2.GaslessTypes.OtcOrder,
                order: otcOrder,
                signature: {
                    r: '',
                    s: '',
                    signatureType: protocol_utils_1.SignatureType.EthSign,
                    v: 1,
                },
            };
            const metatransactionMock = (0, ts_mockito_1.mock)(protocol_utils_1.MetaTransaction);
            (0, ts_mockito_1.when)(metatransactionMock.getHash()).thenReturn('0xmetatransactionhash');
            (0, ts_mockito_1.when)(metatransactionMock.expirationTimeSeconds).thenReturn(NEVER_EXPIRES);
            const service = buildRfqmServiceForUnitTest({
                chainId: 1,
                dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock),
                feeModelVersion: 0,
            });
            (0, chai_1.expect)(service.submitTakerSignedOtcOrderAsync(params)).to.be.rejectedWith(api_utils_1.TooManyRequestsError, 'a pending trade for this taker and takertoken already exists'); // tslint:disable-line no-unused-expression
        });
        it('should allow two trades by the same taker with different taker tokens', async () => {
            const takerPrivateKey = '0xe13ae9fa0166b501a2ab50e7b6fbb65819add7376da9b4fbb3bf3ae48cd9dcd3';
            const takerAddress = '0x4e2145eDC29f27E126154B9c716Df70c429C291B';
            const expiry = new utils_1.BigNumber(Date.now() + 1000000).dividedBy(constants_1.ONE_SECOND_MS).decimalPlaces(0);
            const existingOtcOrder = new protocol_utils_1.OtcOrder({
                txOrigin: '0x0000000000000000000000000000000000000000',
                taker: takerAddress,
                maker: '0x2222222222222222222222222222222222222222',
                makerToken: '0x3333333333333333333333333333333333333333',
                takerToken: '0x4444444444444444444444444444444444444444',
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(expiry, constants_1.ZERO, expiry),
                chainId: 1337,
                verifyingContract: '0x0000000000000000000000000000000000000000',
            });
            const newOtcOrder = new protocol_utils_1.OtcOrder({
                txOrigin: '0x0000000000000000000000000000000000000000',
                taker: takerAddress,
                maker: '0x2222222222222222222222222222222222222222',
                makerToken: '0x3333333333333333333333333333333333333333',
                takerToken: '0x9999999999999999999999999999999999999999',
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(expiry, constants_1.ZERO, expiry),
                chainId: 1337,
                verifyingContract: '0x0000000000000000000000000000000000000000',
            });
            const existingJob = new entities_1.RfqmV2JobEntity({
                chainId: 1337,
                expiry,
                makerUri: '',
                orderHash: '0x00',
                fee: {
                    token: '0xToken',
                    amount: '100',
                    type: 'fixed',
                },
                order: (0, rfqm_db_utils_1.otcOrderToStoredOtcOrder)(existingOtcOrder),
            });
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2JobsWithStatusesAsync((0, ts_mockito_1.anything)())).thenResolve([existingJob]);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2QuoteByOrderHashAsync(newOtcOrder.getHash())).thenResolve({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                makerUri: 'http://foo.bar',
                order: (0, rfqm_db_utils_1.otcOrderToStoredOtcOrder)(newOtcOrder),
                orderHash: '',
                isUnwrap: false,
                takerSpecifiedSide: null,
            });
            const metatransactionMock = (0, ts_mockito_1.mock)(protocol_utils_1.MetaTransaction);
            (0, ts_mockito_1.when)(metatransactionMock.getHash()).thenReturn('0xmetatransactionhash');
            (0, ts_mockito_1.when)(metatransactionMock.expirationTimeSeconds).thenReturn(NEVER_EXPIRES);
            const blockchainUtilsMock = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(blockchainUtilsMock.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(10000),
            ]);
            const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(10000),
            ]);
            const service = buildRfqmServiceForUnitTest({
                chainId: 1,
                dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(blockchainUtilsMock),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock),
                feeModelVersion: 0,
            });
            const submitParams = {
                type: types_2.GaslessTypes.OtcOrder,
                order: newOtcOrder,
                signature: (0, protocol_utils_1.ethSignHashWithKey)(newOtcOrder.getHash(), takerPrivateKey),
            };
            const result = await service.submitTakerSignedOtcOrderAsync(submitParams);
            (0, chai_1.expect)(result.type).to.equal('otc');
        });
    });
    describe('submitTakerSignedOtcOrderWithApprovalAsync', () => {
        it('should fail if approval params generate an invalid calldata', async () => {
            const takerAddress = '0x4e2145eDC29f27E126154B9c716Df70c429C291B';
            const expiry = new utils_1.BigNumber(Date.now() + 1000000).dividedBy(constants_1.ONE_SECOND_MS).decimalPlaces(0);
            const otcOrder = new protocol_utils_1.OtcOrder({
                txOrigin: '0x0000000000000000000000000000000000000000',
                taker: '0x1111111111111111111111111111111111111111',
                maker: '0x2222222222222222222222222222222222222222',
                makerToken: '0x3333333333333333333333333333333333333333',
                takerToken: '0x4444444444444444444444444444444444444444',
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(expiry, constants_1.ZERO, expiry),
                chainId: 1,
                verifyingContract: '0x0000000000000000000000000000000000000000',
            });
            const eip712Context = {
                types: {
                    EIP712Domain: [
                        { name: 'name', type: 'string' },
                        { name: 'version', type: 'string' },
                        { name: 'verifyingContract', type: 'address' },
                        { name: 'salt', type: 'bytes32' },
                    ],
                    MetaTransaction: [
                        { name: 'nonce', type: 'uint256' },
                        { name: 'from', type: 'address' },
                        { name: 'functionSignature', type: 'bytes' },
                    ],
                },
                primaryType: 'MetaTransaction',
                domain: {},
                message: {
                    nonce: expiry.toNumber(),
                    from: takerAddress,
                    functionSignature: '',
                },
            };
            const submitParams = {
                approval: {
                    type: types_2.GaslessApprovalTypes.ExecuteMetaTransaction,
                    eip712: eip712Context,
                    signature: {
                        r: '',
                        s: '',
                        v: 28,
                        signatureType: protocol_utils_1.SignatureType.EIP712,
                    },
                },
                trade: {
                    type: types_2.GaslessTypes.OtcOrder,
                    order: otcOrder,
                    signature: {
                        r: '',
                        s: '',
                        v: 28,
                        signatureType: protocol_utils_1.SignatureType.EthSign,
                    },
                },
                kind: types_2.GaslessTypes.OtcOrder,
            };
            const blockchainUtilsMock = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(blockchainUtilsMock.generateApprovalCalldataAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve('0xinvalidcalldata');
            (0, ts_mockito_1.when)(blockchainUtilsMock.estimateGasForAsync((0, ts_mockito_1.anything)())).thenReject();
            const service = buildRfqmServiceForUnitTest({
                chainId: 1,
                feeModelVersion: 0,
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(blockchainUtilsMock),
            });
            try {
                await service.submitTakerSignedOtcOrderWithApprovalAsync(submitParams);
                chai_1.expect.fail('should fail eth call approval validation');
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Eth call approval validation failed');
                (0, ts_mockito_1.verify)(blockchainUtilsMock.generateApprovalCalldataAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).once();
                (0, ts_mockito_1.verify)(blockchainUtilsMock.estimateGasForAsync((0, ts_mockito_1.anything)())).thrice();
            }
        });
        it('should proceed with trade submission if approval is empty', async () => {
            const takerPrivateKey = '0xe13ae9fa0166b501a2ab50e7b6fbb65819add7376da9b4fbb3bf3ae48cd9dcd3';
            const takerAddress = '0x4e2145eDC29f27E126154B9c716Df70c429C291B';
            const expiry = new utils_1.BigNumber(Date.now() + 1000000).dividedBy(constants_1.ONE_SECOND_MS).decimalPlaces(0);
            const otcOrder = new protocol_utils_1.OtcOrder({
                txOrigin: '0x0000000000000000000000000000000000000000',
                taker: takerAddress,
                maker: '0x2222222222222222222222222222222222222222',
                makerToken: '0x3333333333333333333333333333333333333333',
                takerToken: '0x4444444444444444444444444444444444444444',
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(expiry, constants_1.ZERO, expiry),
                chainId: 1,
                verifyingContract: '0x0000000000000000000000000000000000000000',
            });
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2JobsWithStatusesAsync((0, ts_mockito_1.anything)())).thenResolve([]);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2QuoteByOrderHashAsync(otcOrder.getHash())).thenResolve({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                makerUri: 'http://foo.bar',
                order: (0, rfqm_db_utils_1.otcOrderToStoredOtcOrder)(otcOrder),
                orderHash: '',
                isUnwrap: false,
                takerSpecifiedSide: null,
            });
            const blockchainUtilsMock = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(blockchainUtilsMock.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(10000),
            ]);
            const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(10000),
            ]);
            const service = buildRfqmServiceForUnitTest({
                chainId: 1,
                feeModelVersion: 0,
                dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(blockchainUtilsMock),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock),
            });
            const submitParams = {
                kind: types_2.GaslessTypes.OtcOrder,
                trade: {
                    type: types_2.GaslessTypes.OtcOrder,
                    order: otcOrder,
                    signature: (0, protocol_utils_1.ethSignHashWithKey)(otcOrder.getHash(), takerPrivateKey),
                },
            };
            const result = await service.submitTakerSignedOtcOrderWithApprovalAsync(submitParams);
            (0, chai_1.expect)(result.type).to.equal('otc');
            (0, ts_mockito_1.verify)(dbUtilsMock.writeV2JobAsync((0, ts_mockito_1.anything)())).once();
        });
        it('should save job with executeMetaTransaction params to DB', async () => {
            const takerPrivateKey = '0xe13ae9fa0166b501a2ab50e7b6fbb65819add7376da9b4fbb3bf3ae48cd9dcd3';
            const takerAddress = '0x4e2145eDC29f27E126154B9c716Df70c429C291B';
            const expiry = new utils_1.BigNumber(Date.now() + 1000000).dividedBy(constants_1.ONE_SECOND_MS).decimalPlaces(0);
            const otcOrder = new protocol_utils_1.OtcOrder({
                txOrigin: '0x0000000000000000000000000000000000000000',
                taker: takerAddress,
                maker: '0x2222222222222222222222222222222222222222',
                makerToken: '0x3333333333333333333333333333333333333333',
                takerToken: '0x4444444444444444444444444444444444444444',
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(expiry, constants_1.ZERO, expiry),
                chainId: 1,
                verifyingContract: '0x0000000000000000000000000000000000000000',
            });
            const eip712Context = {
                types: {
                    EIP712Domain: [
                        { name: 'name', type: 'string' },
                        { name: 'version', type: 'string' },
                        { name: 'verifyingContract', type: 'address' },
                        { name: 'salt', type: 'bytes32' },
                    ],
                    MetaTransaction: [
                        { name: 'nonce', type: 'uint256' },
                        { name: 'from', type: 'address' },
                        { name: 'functionSignature', type: 'bytes' },
                    ],
                },
                primaryType: 'MetaTransaction',
                domain: {},
                message: {
                    from: takerAddress,
                    functionSignature: '',
                    nonce: expiry.toNumber(),
                },
            };
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2JobsWithStatusesAsync((0, ts_mockito_1.anything)())).thenResolve([]);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2QuoteByOrderHashAsync(otcOrder.getHash())).thenResolve({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                makerUri: 'http://foo.bar',
                order: (0, rfqm_db_utils_1.otcOrderToStoredOtcOrder)(otcOrder),
                orderHash: '',
                isUnwrap: false,
                takerSpecifiedSide: null,
            });
            const blockchainUtilsMock = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(blockchainUtilsMock.getTokenBalancesAsync((0, ts_mockito_1.anything)())).thenResolve([new utils_1.BigNumber(10000)]);
            (0, ts_mockito_1.when)(blockchainUtilsMock.generateApprovalCalldataAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve('0xvalidcalldata');
            (0, ts_mockito_1.when)(blockchainUtilsMock.simulateTransactionAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve();
            const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(10000),
            ]);
            const service = buildRfqmServiceForUnitTest({
                chainId: 1,
                feeModelVersion: 0,
                dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(blockchainUtilsMock),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock),
            });
            const submitParams = {
                trade: {
                    type: types_2.GaslessTypes.OtcOrder,
                    order: otcOrder,
                    signature: (0, protocol_utils_1.ethSignHashWithKey)(otcOrder.getHash(), takerPrivateKey),
                },
                approval: {
                    type: types_2.GaslessApprovalTypes.ExecuteMetaTransaction,
                    eip712: eip712Context,
                    signature: (0, protocol_utils_1.eip712SignHashWithKey)(otcOrder.getHash(), takerPrivateKey),
                },
                kind: types_2.GaslessTypes.OtcOrder,
            };
            const result = await service.submitTakerSignedOtcOrderWithApprovalAsync(submitParams);
            (0, chai_1.expect)(result.type).to.equal('otc');
            (0, ts_mockito_1.verify)(blockchainUtilsMock.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(dbUtilsMock.writeV2JobAsync((0, ts_mockito_1.anything)())).once();
        });
        it('should save job with permit params to DB', async () => {
            const takerPrivateKey = '0xe13ae9fa0166b501a2ab50e7b6fbb65819add7376da9b4fbb3bf3ae48cd9dcd3';
            const takerAddress = '0x4e2145eDC29f27E126154B9c716Df70c429C291B';
            const expiry = new utils_1.BigNumber(Date.now() + 1000000).dividedBy(constants_1.ONE_SECOND_MS).decimalPlaces(0);
            const otcOrder = new protocol_utils_1.OtcOrder({
                txOrigin: '0x0000000000000000000000000000000000000000',
                taker: takerAddress,
                maker: '0x2222222222222222222222222222222222222222',
                makerToken: '0x3333333333333333333333333333333333333333',
                takerToken: '0x4444444444444444444444444444444444444444',
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(expiry, constants_1.ZERO, expiry),
                chainId: 1,
                verifyingContract: '0x0000000000000000000000000000000000000000',
            });
            const eip712Context = {
                types: {
                    EIP712Domain: [
                        { name: 'name', type: 'string' },
                        { name: 'version', type: 'string' },
                        { name: 'verifyingContract', type: 'address' },
                        { name: 'salt', type: 'bytes32' },
                    ],
                    Permit: [
                        { name: 'owner', type: 'address' },
                        { name: 'spender', type: 'address' },
                        { name: 'value', type: 'uint256' },
                        { name: 'nonce', type: 'uint256' },
                        { name: 'deadline', type: 'uint256' },
                    ],
                },
                primaryType: 'Permit',
                domain: {},
                message: {
                    deadline: '12345',
                    owner: takerAddress,
                    spender: '0x0000000000000000000000000000000000000000',
                    value: '0xffffffffffffffffffffffffffffffffffffffff',
                    nonce: expiry.toNumber(),
                },
            };
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2JobsWithStatusesAsync((0, ts_mockito_1.anything)())).thenResolve([]);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2QuoteByOrderHashAsync(otcOrder.getHash())).thenResolve({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                makerUri: 'http://foo.bar',
                order: (0, rfqm_db_utils_1.otcOrderToStoredOtcOrder)(otcOrder),
                orderHash: '',
                isUnwrap: false,
                takerSpecifiedSide: null,
            });
            const blockchainUtilsMock = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(blockchainUtilsMock.getTokenBalancesAsync((0, ts_mockito_1.anything)())).thenResolve([new utils_1.BigNumber(10000)]);
            (0, ts_mockito_1.when)(blockchainUtilsMock.generateApprovalCalldataAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve('0xvalidcalldata');
            (0, ts_mockito_1.when)(blockchainUtilsMock.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(10);
            const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(10000),
            ]);
            const service = buildRfqmServiceForUnitTest({
                chainId: 1,
                feeModelVersion: 0,
                dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(blockchainUtilsMock),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock),
            });
            const submitParams = {
                trade: {
                    type: types_2.GaslessTypes.OtcOrder,
                    order: otcOrder,
                    signature: (0, protocol_utils_1.ethSignHashWithKey)(otcOrder.getHash(), takerPrivateKey),
                },
                approval: {
                    type: types_2.GaslessApprovalTypes.Permit,
                    eip712: eip712Context,
                    signature: (0, protocol_utils_1.eip712SignHashWithKey)(otcOrder.getHash(), takerPrivateKey),
                },
                kind: types_2.GaslessTypes.OtcOrder,
            };
            const result = await service.submitTakerSignedOtcOrderWithApprovalAsync(submitParams);
            (0, chai_1.expect)(result.type).to.equal('otc');
            (0, ts_mockito_1.verify)(blockchainUtilsMock.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(dbUtilsMock.writeV2JobAsync((0, ts_mockito_1.anything)())).once();
        });
    });
    describe('fetchIndicativeQuoteAsync', () => {
        describe('sells', () => {
            it('should fetch indicative quote', async () => {
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const quote = {
                    maker: '0xmaker',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(101),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(100),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    quote,
                ]);
                const service = buildRfqmServiceForUnitTest({
                    quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock),
                    feeModelVersion: 0,
                });
                const res = await service.fetchIndicativeQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    sellAmount: new utils_1.BigNumber(100),
                });
                if (res === null) {
                    chai_1.expect.fail('res is null, but not expected to be null');
                    return;
                }
                (0, chai_1.expect)(res.sellAmount.toNumber()).to.be.at.least(100);
                (0, chai_1.expect)(res.price.toNumber()).to.equal(1.01);
            });
            it('should round price to six decimal places', async () => {
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const quote = {
                    maker: '0xmaker',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(111),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(333),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    quote,
                ]);
                const service = buildRfqmServiceForUnitTest({
                    quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock),
                    feeModelVersion: 0,
                });
                const res = await service.fetchIndicativeQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    sellAmount: new utils_1.BigNumber(333),
                });
                if (res === null) {
                    chai_1.expect.fail('res is null, but not expected to be null');
                    return;
                }
                (0, chai_1.expect)(res.price.toNumber()).to.equal(0.3333333);
            });
            it('should only return an indicative quote that is 100% filled when selling', async () => {
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const quote1 = {
                    maker: '0xmaker',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(55),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(50),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const quote2 = {
                    maker: '0xmaker',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(105),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(100),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    quote1,
                    quote2,
                ]);
                const service = buildRfqmServiceForUnitTest({ quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock) });
                const res = await service.fetchIndicativeQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    sellAmount: new utils_1.BigNumber(100),
                });
                if (res === null) {
                    chai_1.expect.fail('res is null, but not expected to be null');
                    return;
                }
                (0, chai_1.expect)(res.sellAmount.toNumber()).to.equal(100);
                (0, chai_1.expect)(res.price.toNumber()).to.equal(1.05);
            });
            it('should return null if no quotes are valid', async () => {
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const partialFillQuote = {
                    maker: '0xmaker',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(55),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(50),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    partialFillQuote,
                ]);
                const service = buildRfqmServiceForUnitTest({ quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock) });
                const res = await service.fetchIndicativeQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    sellAmount: new utils_1.BigNumber(100),
                });
                (0, chai_1.expect)(res).to.equal(null);
            });
            // TODO: we may want to reintroduce this test very soon. However, if not addressed by June 2022, remove
            it.skip('should return an indicative quote that can fill more than 100%', async () => {
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const worseQuote = {
                    maker: '0xmaker',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(101),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(100),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const betterQuote = {
                    maker: '0xmaker2',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(222),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(200),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    worseQuote,
                    betterQuote,
                ]);
                const service = buildRfqmServiceForUnitTest({ quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock) });
                const res = await service.fetchIndicativeQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    sellAmount: new utils_1.BigNumber(100),
                });
                if (res === null) {
                    chai_1.expect.fail('res is null, but not expected to be null');
                    return;
                }
                (0, chai_1.expect)(res.sellAmount.toNumber()).to.equal(200);
                (0, chai_1.expect)(res.price.toNumber()).to.equal(1.11);
            });
            it('should ignore quotes that are for the wrong pair', async () => {
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const worseQuote = {
                    maker: '0xmaker',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(101),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(100),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const betterQuote = {
                    maker: '0xmaker2',
                    makerToken: '0x1111111111111111111111111111111111111111',
                    makerAmount: new utils_1.BigNumber(111),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(100),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    worseQuote,
                    betterQuote,
                ]);
                const service = buildRfqmServiceForUnitTest({ quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock) });
                const res = await service.fetchIndicativeQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    sellAmount: new utils_1.BigNumber(100),
                });
                if (res === null) {
                    chai_1.expect.fail('res is null, but not expected to be null');
                    return;
                }
                (0, chai_1.expect)(res.sellAmount.toNumber()).to.equal(100);
                (0, chai_1.expect)(res.price.toNumber()).to.equal(1.01); // Worse pricing wins because better pricing is for wrong pair
            });
            it('should ignore quotes that expire within 3 minutes', async () => {
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const inOneMinute = (Date.now() + constants_1.ONE_MINUTE_MS) / constants_1.ONE_SECOND_MS;
                const expiresSoon = {
                    maker: '0xmaker',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(111),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(100),
                    expiry: new utils_1.BigNumber(inOneMinute),
                    makerUri: MOCK_MM_URI,
                };
                const neverExpires = {
                    maker: '0xmaker2',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(101),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(100),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    expiresSoon,
                    neverExpires,
                ]);
                const service = buildRfqmServiceForUnitTest({ quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock) });
                const res = await service.fetchIndicativeQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    sellAmount: new utils_1.BigNumber(100),
                });
                if (res === null) {
                    chai_1.expect.fail('res is null, but not expected to be null');
                    return;
                }
                (0, chai_1.expect)(res.sellAmount.toNumber()).to.equal(100);
                (0, chai_1.expect)(res.price.toNumber()).to.equal(1.01); // Worse pricing wins because better pricing expires too soon
            });
        });
        describe('buys', () => {
            it('should fetch indicative quote when buying', async () => {
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const quote = {
                    maker: '0xmaker',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(100),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(80),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    quote,
                ]);
                const service = buildRfqmServiceForUnitTest({ quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock) });
                const res = await service.fetchIndicativeQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    buyAmount: new utils_1.BigNumber(100),
                });
                if (res === null) {
                    chai_1.expect.fail('res is null, but not expected to be null');
                    return;
                }
                (0, chai_1.expect)(res.buyAmount.toNumber()).to.be.at.least(100);
                (0, chai_1.expect)(res.price.toNumber()).to.equal(0.8);
            });
            it('should only return an indicative quote that is 100% filled when buying', async () => {
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const overFillQuoteGoodPricing = {
                    maker: '0xmaker',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(160),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(80),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const partialFillQuoteGoodPricing = {
                    maker: '0xmaker2',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(80),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(40),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const fullQuote = {
                    maker: '0xmaker3',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(100),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(80),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    overFillQuoteGoodPricing,
                    partialFillQuoteGoodPricing,
                    fullQuote,
                ]);
                const service = buildRfqmServiceForUnitTest({ quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock) });
                const res = await service.fetchIndicativeQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    buyAmount: new utils_1.BigNumber(100),
                });
                if (res === null) {
                    chai_1.expect.fail('res is null, but not expected to be null');
                    return;
                }
                (0, chai_1.expect)(res.buyAmount.toNumber()).to.equal(100);
                (0, chai_1.expect)(res.price.toNumber()).to.equal(0.8);
            });
        });
    });
    describe('fetchFirmQuoteAsync', () => {
        const takerAddress = '0xf003A9418DE2620f935181259C0Fa1595E871234';
        it('should use an affiliate address provided in the quote request even if one is present in configuration', async () => {
            const sellAmount = new utils_1.BigNumber(100);
            const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
            const quote = {
                maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',
                makerToken: contractAddresses.zrxToken,
                makerAmount: new utils_1.BigNumber(101),
                takerToken: contractAddresses.etherToken,
                takerAmount: new utils_1.BigNumber(100),
                expiry: NEVER_EXPIRES,
                makerUri: MOCK_MM_URI,
            };
            const cacheClientMock = (0, ts_mockito_1.mock)(cache_client_1.CacheClient);
            (0, ts_mockito_1.when)(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);
            (0, ts_mockito_1.when)(cacheClientMock.getMakersInCooldownForPairAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([]);
            // Mock out the dbUtils
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.writeV2QuoteAsync((0, ts_mockito_1.anything)())).thenResolve();
            const dbUtils = (0, ts_mockito_1.instance)(dbUtilsMock);
            const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([quote]);
            const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(150),
            ]);
            const service = buildRfqmServiceForUnitTest({
                quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock),
                dbUtils,
                cacheClient: (0, ts_mockito_1.instance)(cacheClientMock),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock),
            });
            await service.fetchFirmQuoteAsync({
                affiliateAddress: '0xaffiliateAddress',
                buyToken: contractAddresses.zrxToken,
                buyTokenDecimals: 18,
                checkApproval: false,
                integrator: { ...MOCK_INTEGRATOR, affiliateAddress: '0xaffiliateAddressNotThisOne' },
                sellAmount,
                sellToken: contractAddresses.etherToken,
                sellTokenDecimals: 18,
                takerAddress,
            });
            const writeV2QuoteArgs = (0, ts_mockito_1.capture)(dbUtilsMock.writeV2QuoteAsync).last();
            (0, chai_1.expect)(writeV2QuoteArgs[0]['affiliateAddress']).to.equal('0xaffiliateAddress');
        });
        it('should use a configured affiliate address when none is provide in the quote request', async () => {
            const sellAmount = new utils_1.BigNumber(100);
            const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
            const quote = {
                maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',
                makerToken: contractAddresses.zrxToken,
                makerAmount: new utils_1.BigNumber(101),
                takerToken: contractAddresses.etherToken,
                takerAmount: new utils_1.BigNumber(100),
                expiry: NEVER_EXPIRES,
                makerUri: MOCK_MM_URI,
            };
            const cacheClientMock = (0, ts_mockito_1.mock)(cache_client_1.CacheClient);
            (0, ts_mockito_1.when)(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);
            (0, ts_mockito_1.when)(cacheClientMock.getMakersInCooldownForPairAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([]);
            // Mock out the dbUtils
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.writeV2QuoteAsync((0, ts_mockito_1.anything)())).thenResolve();
            const dbUtils = (0, ts_mockito_1.instance)(dbUtilsMock);
            const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([quote]);
            const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(150),
            ]);
            const service = buildRfqmServiceForUnitTest({
                quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock),
                dbUtils,
                cacheClient: (0, ts_mockito_1.instance)(cacheClientMock),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock),
            });
            await service.fetchFirmQuoteAsync({
                buyToken: contractAddresses.zrxToken,
                buyTokenDecimals: 18,
                checkApproval: false,
                integrator: { ...MOCK_INTEGRATOR, affiliateAddress: '0xaffiliateAddress' },
                sellAmount,
                sellToken: contractAddresses.etherToken,
                sellTokenDecimals: 18,
                takerAddress,
            });
            const writeV2QuoteArgs = (0, ts_mockito_1.capture)(dbUtilsMock.writeV2QuoteAsync).last();
            (0, chai_1.expect)(writeV2QuoteArgs[0]['affiliateAddress']).to.equal('0xaffiliateAddress');
        });
        describe('sells', () => {
            it('should fetch a firm quote', async () => {
                const sellAmount = new utils_1.BigNumber(100);
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const quote = {
                    maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(101),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(100),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const cacheClientMock = (0, ts_mockito_1.mock)(cache_client_1.CacheClient);
                (0, ts_mockito_1.when)(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);
                (0, ts_mockito_1.when)(cacheClientMock.getMakersInCooldownForPairAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([]);
                // Mock out the dbUtils
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.writeV2QuoteAsync((0, ts_mockito_1.anything)())).thenResolve();
                const dbUtils = (0, ts_mockito_1.instance)(dbUtilsMock);
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    quote,
                ]);
                const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
                (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    new utils_1.BigNumber(150),
                ]);
                const service = buildRfqmServiceForUnitTest({
                    quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock),
                    dbUtils,
                    cacheClient: (0, ts_mockito_1.instance)(cacheClientMock),
                    rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock),
                });
                const { quote: res } = await service.fetchFirmQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    takerAddress,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    sellAmount,
                    checkApproval: false,
                });
                (0, chai_1.expect)(res).to.exist; // tslint:disable-line: no-unused-expression
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.type).to.equal(types_2.GaslessTypes.OtcOrder);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.sellAmount).to.equal(sellAmount);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.price.toNumber()).to.equal(1.01);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.orderHash).to.match(/^0x[0-9a-fA-F]+/);
            });
            // TODO: we may want to reintroduce this test very soon. However, if not addressed by June 2022, remove
            it.skip('should scale a firm quote if MM returns too much', async () => {
                const sellAmount = new utils_1.BigNumber(100);
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const quote = {
                    maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(202),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(200),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const cacheClientMock = (0, ts_mockito_1.mock)(cache_client_1.CacheClient);
                (0, ts_mockito_1.when)(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);
                (0, ts_mockito_1.when)(cacheClientMock.getMakersInCooldownForPairAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([]);
                // Mock out the dbUtils
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.writeV2QuoteAsync((0, ts_mockito_1.anything)())).thenResolve();
                const dbUtils = (0, ts_mockito_1.instance)(dbUtilsMock);
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    quote,
                ]);
                const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
                (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    new utils_1.BigNumber(150),
                ]);
                const service = buildRfqmServiceForUnitTest({
                    quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock),
                    dbUtils,
                    cacheClient: (0, ts_mockito_1.instance)(cacheClientMock),
                    rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock),
                });
                const { quote: res } = await service.fetchFirmQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    takerAddress,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    sellAmount,
                    checkApproval: false,
                });
                (0, chai_1.expect)(res).to.exist; // tslint:disable-line: no-unused-expression
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.type).to.equal(types_2.GaslessTypes.OtcOrder);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.sellAmount).to.equal(sellAmount);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.buyAmount.toNumber()).to.equal(101); // result is scaled
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.price.toNumber()).to.equal(1.01);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.orderHash).to.match(/^0x[0-9a-fA-F]+/);
            });
            it('should round price to six decimal places', async () => {
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const quote = {
                    maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(111),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(333),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const cacheClientMock = (0, ts_mockito_1.mock)(cache_client_1.CacheClient);
                (0, ts_mockito_1.when)(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);
                (0, ts_mockito_1.when)(cacheClientMock.getMakersInCooldownForPairAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([]);
                // Mock out the dbUtils
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.writeV2QuoteAsync((0, ts_mockito_1.anything)())).thenResolve();
                const dbUtils = (0, ts_mockito_1.instance)(dbUtilsMock);
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    quote,
                ]);
                const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
                (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    new utils_1.BigNumber(150),
                ]);
                const service = buildRfqmServiceForUnitTest({
                    quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock),
                    dbUtils,
                    cacheClient: (0, ts_mockito_1.instance)(cacheClientMock),
                    rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock),
                });
                const { quote: res } = await service.fetchFirmQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    takerAddress,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    sellAmount: new utils_1.BigNumber(333),
                    checkApproval: false,
                });
                if (res === null) {
                    chai_1.expect.fail('res is null, but not expected to be null');
                    return;
                }
                (0, chai_1.expect)(res.price.toNumber()).to.equal(0.3333333);
            });
            it('should not call `getGaslessApprovalResponseAsync` if checkApproval is false', async () => {
                const sellAmount = new utils_1.BigNumber(100);
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const quote = {
                    maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(101),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(100),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const cacheClientMock = (0, ts_mockito_1.mock)(cache_client_1.CacheClient);
                (0, ts_mockito_1.when)(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);
                (0, ts_mockito_1.when)(cacheClientMock.getMakersInCooldownForPairAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([]);
                // Mock out the dbUtils
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.writeV2QuoteAsync((0, ts_mockito_1.anything)())).thenResolve();
                const dbUtils = (0, ts_mockito_1.instance)(dbUtilsMock);
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    quote,
                ]);
                const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
                (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    new utils_1.BigNumber(150),
                ]);
                const service = buildRfqmServiceForUnitTest({
                    quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock),
                    dbUtils,
                    cacheClient: (0, ts_mockito_1.instance)(cacheClientMock),
                    rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock),
                });
                const spiedService = (0, ts_mockito_1.spy)(service);
                (0, ts_mockito_1.when)(spiedService.getGaslessApprovalResponseAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenThrow(new Error('`getGaslessApprovalResponseAsync` should not be called'));
                const { quote: res } = await service.fetchFirmQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    takerAddress,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    sellAmount,
                    checkApproval: false,
                });
                (0, chai_1.expect)(res).to.exist; // tslint:disable-line: no-unused-expression
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.type).to.equal(types_2.GaslessTypes.OtcOrder);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.sellAmount).to.equal(sellAmount);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.price.toNumber()).to.equal(1.01);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.orderHash).to.match(/^0x[0-9a-fA-F]+/);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.approval).to.equal(undefined);
            });
            it('should return the correct approval if checkApproval is true', async () => {
                const sellAmount = new utils_1.BigNumber(100);
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const quote = {
                    maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(101),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(100),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const cacheClientMock = (0, ts_mockito_1.mock)(cache_client_1.CacheClient);
                (0, ts_mockito_1.when)(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);
                (0, ts_mockito_1.when)(cacheClientMock.getMakersInCooldownForPairAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([]);
                // Mock out the dbUtils
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.writeV2QuoteAsync((0, ts_mockito_1.anything)())).thenResolve();
                const dbUtils = (0, ts_mockito_1.instance)(dbUtilsMock);
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    quote,
                ]);
                const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
                (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    new utils_1.BigNumber(150),
                ]);
                const service = buildRfqmServiceForUnitTest({
                    quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock),
                    dbUtils,
                    cacheClient: (0, ts_mockito_1.instance)(cacheClientMock),
                    rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock),
                });
                const approval = {
                    isRequired: true,
                    isGaslessAvailable: true,
                    type: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL.kind,
                    eip712: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL.eip712,
                };
                const spiedService = (0, ts_mockito_1.spy)(service);
                (0, ts_mockito_1.when)(spiedService.getGaslessApprovalResponseAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(approval);
                const { quote: res } = await service.fetchFirmQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    takerAddress,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    sellAmount,
                    checkApproval: true,
                });
                (0, chai_1.expect)(res).to.exist; // tslint:disable-line: no-unused-expression
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.type).to.equal(types_2.GaslessTypes.OtcOrder);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.sellAmount).to.equal(sellAmount);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.price.toNumber()).to.equal(1.01);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.orderHash).to.match(/^0x[0-9a-fA-F]+/);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.approval).to.eql(approval);
            });
        });
        describe('buys', () => {
            it('should fetch a firm quote', async () => {
                const buyAmount = new utils_1.BigNumber(100);
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const quote = {
                    maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(100),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(80),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const cacheClientMock = (0, ts_mockito_1.mock)(cache_client_1.CacheClient);
                (0, ts_mockito_1.when)(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);
                (0, ts_mockito_1.when)(cacheClientMock.getMakersInCooldownForPairAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([]);
                // Mock out the dbUtils
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.writeV2QuoteAsync((0, ts_mockito_1.anything)())).thenResolve();
                const dbUtils = (0, ts_mockito_1.instance)(dbUtilsMock);
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    quote,
                ]);
                const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
                (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    new utils_1.BigNumber(150),
                ]);
                const service = buildRfqmServiceForUnitTest({
                    quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock),
                    dbUtils,
                    cacheClient: (0, ts_mockito_1.instance)(cacheClientMock),
                    rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock),
                });
                const { quote: res } = await service.fetchFirmQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    takerAddress,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    buyAmount: new utils_1.BigNumber(100),
                    checkApproval: false,
                });
                (0, chai_1.expect)(res).to.exist; // tslint:disable-line: no-unused-expression
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.type).to.equal(types_2.GaslessTypes.OtcOrder);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.buyAmount.toNumber()).to.equal(buyAmount.toNumber());
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.price.toNumber()).to.equal(0.8);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.orderHash).to.match(/^0x[0-9a-fA-F]+/);
            });
            // TODO: we may want to reintroduce this test very soon. However, if not addressed by June 2022, remove
            it.skip('should scale a firm quote to desired buyAmount if MM returns too much', async () => {
                const buyAmount = new utils_1.BigNumber(100);
                const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
                const quote = {
                    maker: '0x64B92f5d9E5b5f20603de8498385c3a3d3048E22',
                    makerToken: contractAddresses.zrxToken,
                    makerAmount: new utils_1.BigNumber(125),
                    takerToken: contractAddresses.etherToken,
                    takerAmount: new utils_1.BigNumber(100),
                    expiry: NEVER_EXPIRES,
                    makerUri: MOCK_MM_URI,
                };
                const cacheClientMock = (0, ts_mockito_1.mock)(cache_client_1.CacheClient);
                (0, ts_mockito_1.when)(cacheClientMock.getNextOtcOrderBucketAsync(1337)).thenResolve(420);
                (0, ts_mockito_1.when)(cacheClientMock.getMakersInCooldownForPairAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([]);
                // Mock out the dbUtils
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.writeV2QuoteAsync((0, ts_mockito_1.anything)())).thenResolve();
                const dbUtils = (0, ts_mockito_1.instance)(dbUtilsMock);
                const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
                (0, ts_mockito_1.when)(quoteServerClientMock.batchGetPriceV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    quote,
                ]);
                const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
                (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                    new utils_1.BigNumber(150),
                ]);
                const service = buildRfqmServiceForUnitTest({
                    quoteServerClient: (0, ts_mockito_1.instance)(quoteServerClientMock),
                    dbUtils,
                    cacheClient: (0, ts_mockito_1.instance)(cacheClientMock),
                    rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock),
                });
                const { quote: res } = await service.fetchFirmQuoteAsync({
                    integrator: MOCK_INTEGRATOR,
                    takerAddress,
                    buyToken: contractAddresses.zrxToken,
                    sellToken: contractAddresses.etherToken,
                    buyTokenDecimals: 18,
                    sellTokenDecimals: 18,
                    buyAmount: new utils_1.BigNumber(100),
                    checkApproval: false,
                });
                (0, chai_1.expect)(res).to.exist; // tslint:disable-line: no-unused-expression
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.type).to.equal(types_2.GaslessTypes.OtcOrder);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.buyAmount.toNumber()).to.equal(buyAmount.toNumber());
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.sellAmount.toNumber()).to.equal(80); // result is scaled
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.price.toNumber()).to.equal(0.8);
                (0, chai_1.expect)(res === null || res === void 0 ? void 0 : res.orderHash).to.match(/^0x[0-9a-fA-F]+/);
            });
        });
    });
    describe('getGaslessApprovalResponseAsync', () => {
        it('returns correct approval field', async () => {
            const service = buildRfqmServiceForUnitTest();
            let approval = await service.getGaslessApprovalResponseAsync(MOCK_WORKER_REGISTRY_ADDRESS, MOCK_TOKEN, new utils_1.BigNumber(100));
            (0, chai_1.expect)(approval).to.eql({ isRequired: false });
            approval = await service.getGaslessApprovalResponseAsync(MOCK_WORKER_REGISTRY_ADDRESS, MOCK_TOKEN, new utils_1.BigNumber(100));
            (0, chai_1.expect)(approval).to.eql({ isRequired: true, isGaslessAvailable: false });
            approval = await service.getGaslessApprovalResponseAsync(MOCK_WORKER_REGISTRY_ADDRESS, MOCK_TOKEN, new utils_1.BigNumber(100));
            (0, chai_1.expect)(approval).to.eql({
                isRequired: true,
                isGaslessAvailable: true,
                type: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL.kind,
                eip712: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL.eip712,
            });
        });
    });
    describe('runHealthCheckAsync', () => {
        it('returns active pairs', async () => {
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.findRfqmWorkerHeartbeatsAsync(1337)).thenResolve([]);
            const rfqMakerManagerMock = (0, ts_mockito_1.mock)(rfq_maker_manager_1.RfqMakerManager);
            (0, ts_mockito_1.when)(rfqMakerManagerMock.getRfqmV2MakerOfferings()).thenReturn({
                'https://mock-rfqm1.club': [
                    ['0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c', '0x0b1ba0af832d7c05fd64161e0db78e85978e8082'],
                ],
            });
            const service = buildRfqmServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock),
                rfqMakerManager: (0, ts_mockito_1.instance)(rfqMakerManagerMock),
            });
            const result = await service.runHealthCheckAsync();
            (0, chai_1.expect)(result.pairs).to.have.key('0x0b1ba0af832d7c05fd64161e0db78e85978e8082-0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c');
            (0, chai_1.expect)(result.pairs['0x0b1ba0af832d7c05fd64161e0db78e85978e8082-0x871dd7c2b4b25e1aa18728e9d5f2af4c4e431f5c']).to.equal(rfqm_health_check_1.HealthCheckStatus.Operational);
        });
    });
    describe('status', () => {
        describe('v2', () => {
            const expiry = new utils_1.BigNumber(Date.now() + 1000000).dividedBy(constants_1.ONE_SECOND_MS).decimalPlaces(0);
            const chainId = 1337;
            const otcOrder = new protocol_utils_1.OtcOrder({
                txOrigin: '0x0000000000000000000000000000000000000000',
                taker: '0x1111111111111111111111111111111111111111',
                maker: '0x2222222222222222222222222222222222222222',
                makerToken: '0x3333333333333333333333333333333333333333',
                takerToken: '0x4444444444444444444444444444444444444444',
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(expiry, constants_1.ZERO, expiry),
                chainId,
                verifyingContract: '0x0000000000000000000000000000000000000000',
            });
            const BASE_JOB = new entities_1.RfqmV2JobEntity({
                chainId,
                expiry,
                makerUri: '',
                orderHash: '0x00',
                fee: {
                    token: '0xToken',
                    amount: '100',
                    type: 'fixed',
                },
                order: (0, rfqm_db_utils_1.otcOrderToStoredOtcOrder)(otcOrder),
            });
            it('should return failed for jobs that have sat in queue past expiry', async () => {
                const expired = new utils_1.BigNumber(Date.now() - 10000).dividedBy(constants_1.ONE_SECOND_MS).decimalPlaces(0);
                const oldJob = new entities_1.RfqmV2JobEntity({ ...BASE_JOB, expiry: expired });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(oldJob);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                const jobStatus = await service.getStatusAsync('0x00');
                if (jobStatus === null) {
                    chai_1.expect.fail('Status should exist');
                    throw new Error();
                }
                (0, chai_1.expect)(jobStatus.status).to.equal('failed');
                if (jobStatus.status !== 'failed') {
                    chai_1.expect.fail('Status should be failed');
                    throw new Error();
                }
                (0, chai_1.expect)(jobStatus.transactions).to.have.length(0); // tslint:disable-line no-unused-expression
            });
            it('should return pending for unexpired enqueued jobs', async () => {
                const newJob = BASE_JOB; // BASE_JOB has a valid expiry
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(newJob);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                const jobStatus = await service.getStatusAsync('0x00');
                if (jobStatus === null) {
                    chai_1.expect.fail('Status should exist');
                    throw new Error();
                }
                (0, chai_1.expect)(jobStatus.status).to.equal('pending');
            });
            it('should return pending for jobs in processing', async () => {
                const job = new entities_1.RfqmV2JobEntity({ ...BASE_JOB, status: types_1.RfqmJobStatus.PendingProcessing });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                const jobStatus = await service.getStatusAsync('0x00');
                if (jobStatus === null) {
                    chai_1.expect.fail('Status should exist');
                    throw new Error();
                }
                (0, chai_1.expect)(jobStatus.status).to.equal('pending');
            });
            it('should return submitted with transaction submissions for submitted jobs', async () => {
                const now = Date.now();
                const transaction1Time = now + 10;
                const transaction2Time = now + 20;
                const job = new entities_1.RfqmV2JobEntity({
                    ...BASE_JOB,
                    status: types_1.RfqmJobStatus.PendingSubmitted,
                });
                const submission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(transaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x01',
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 0,
                });
                const submission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(transaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x02',
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 1,
                });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([submission1, submission2]);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                const jobStatus = await service.getStatusAsync('0x00');
                if (jobStatus === null) {
                    chai_1.expect.fail('Status should exist');
                    throw new Error();
                }
                if (jobStatus.status !== 'submitted') {
                    chai_1.expect.fail('Status should be submitted');
                    throw new Error();
                }
                (0, chai_1.expect)(jobStatus.transactions).to.have.length(2);
                (0, chai_1.expect)(jobStatus.transactions).to.deep.include({
                    hash: '0x01',
                    timestamp: +transaction1Time.valueOf(),
                });
                (0, chai_1.expect)(jobStatus.transactions).to.deep.include({
                    hash: '0x02',
                    timestamp: +transaction2Time.valueOf(),
                });
            });
            it('should return succeeded for a successful job, with the succeeded job', async () => {
                const now = Date.now();
                const transaction1Time = now + 10;
                const transaction2Time = now + 20;
                const job = new entities_1.RfqmV2JobEntity({
                    ...BASE_JOB,
                    status: types_1.RfqmJobStatus.SucceededUnconfirmed,
                });
                const submission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(transaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x01',
                    status: types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 0,
                });
                const submission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(transaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x02',
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 1,
                });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([submission1, submission2]);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                const jobStatus = await service.getStatusAsync('0x00');
                if (jobStatus === null) {
                    chai_1.expect.fail('Status should exist');
                    throw new Error();
                }
                if (jobStatus.status !== 'succeeded') {
                    chai_1.expect.fail('Status should be succeeded');
                    throw new Error();
                }
                (0, chai_1.expect)(jobStatus.transactions[0]).to.contain({ hash: '0x02', timestamp: +transaction2Time.valueOf() });
            });
            it('should return confirmed for a successful confirmed job', async () => {
                const now = Date.now();
                const transaction1Time = now + 10;
                const transaction2Time = now + 20;
                const job = new entities_1.RfqmV2JobEntity({
                    ...BASE_JOB,
                    status: types_1.RfqmJobStatus.SucceededConfirmed,
                });
                const submission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(transaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x01',
                    status: types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 0,
                });
                const submission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(transaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x02',
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 1,
                });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([submission1, submission2]);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                const jobStatus = await service.getStatusAsync('0x00');
                if (jobStatus === null) {
                    chai_1.expect.fail('Status should exist');
                    throw new Error();
                }
                if (jobStatus.status !== 'confirmed') {
                    chai_1.expect.fail('Status should be confirmed');
                    throw new Error();
                }
                (0, chai_1.expect)(jobStatus.transactions[0]).to.contain({ hash: '0x02', timestamp: +transaction2Time.valueOf() });
            });
            it('should throw if the job is successful but there are no successful transactions', async () => {
                const now = Date.now();
                const transaction1Time = now + 10;
                const transaction2Time = now + 20;
                const job = new entities_1.RfqmV2JobEntity({
                    ...BASE_JOB,
                    status: types_1.RfqmJobStatus.SucceededUnconfirmed,
                });
                const submission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(transaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x01',
                    status: types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 0,
                });
                const submission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(transaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x02',
                    status: types_1.RfqmTransactionSubmissionStatus.RevertedUnconfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 1,
                });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([submission1, submission2]);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                try {
                    await service.getStatusAsync('0x00');
                    chai_1.expect.fail();
                }
                catch (e) {
                    (0, chai_1.expect)(e.message).to.contain('Expected exactly one successful transaction submission');
                }
            });
            it('should throw if the job is successful but there are multiple successful transactions', async () => {
                const now = Date.now();
                const transaction1Time = now + 10;
                const transaction2Time = now + 20;
                const job = new entities_1.RfqmV2JobEntity({
                    ...BASE_JOB,
                    status: types_1.RfqmJobStatus.SucceededUnconfirmed,
                });
                const submission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(transaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x01',
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 0,
                });
                const submission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(transaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x02',
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 1,
                });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([submission1, submission2]);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                try {
                    await service.getStatusAsync('0x00');
                    chai_1.expect.fail();
                }
                catch (e) {
                    (0, chai_1.expect)(e.message).to.contain('Expected exactly one successful transaction submission');
                }
            });
            it('should return submitted with approval and trade transaction submissions for submitted jobs', async () => {
                const now = Date.now();
                const approvalTransaction1Time = now + 3;
                const approvalTransaction2Time = now + 7;
                const tradeTransaction1Time = now + 10;
                const tradeTransaction2Time = now + 20;
                const job = new entities_1.RfqmV2JobEntity({
                    ...BASE_JOB,
                    approval: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL,
                    status: types_1.RfqmJobStatus.PendingSubmitted,
                });
                const approvalSubmission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(approvalTransaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x01',
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Approval,
                    nonce: 0,
                });
                const approvalSubmission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(approvalTransaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x02',
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Approval,
                    nonce: 1,
                });
                const tradeSubmission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(tradeTransaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x03',
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 2,
                });
                const tradeSubmission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(tradeTransaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x04',
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 3,
                });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([approvalSubmission1, approvalSubmission2]);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([tradeSubmission1, tradeSubmission2]);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                const orderStatus = await service.getStatusAsync('0x00');
                if (orderStatus === null) {
                    chai_1.expect.fail('Status should exist');
                    throw new Error();
                }
                if (orderStatus.status !== 'submitted') {
                    chai_1.expect.fail('Status should be submitted');
                    throw new Error();
                }
                (0, chai_1.expect)(orderStatus.approvalTransactions).to.have.length(2);
                (0, chai_1.expect)(orderStatus.approvalTransactions).to.deep.include({
                    hash: '0x01',
                    timestamp: +approvalTransaction1Time.valueOf(),
                });
                (0, chai_1.expect)(orderStatus.approvalTransactions).to.deep.include({
                    hash: '0x02',
                    timestamp: +approvalTransaction2Time.valueOf(),
                });
                (0, chai_1.expect)(orderStatus.transactions).to.have.length(2);
                (0, chai_1.expect)(orderStatus.transactions).to.deep.include({
                    hash: '0x03',
                    timestamp: +tradeTransaction1Time.valueOf(),
                });
                (0, chai_1.expect)(orderStatus.transactions).to.deep.include({
                    hash: '0x04',
                    timestamp: +tradeTransaction2Time.valueOf(),
                });
            });
            it('should return failed with approval and trade transaction submissions for failed jobs', async () => {
                const now = Date.now();
                const approvalTransaction1Time = now + 3;
                const approvalTransaction2Time = now + 7;
                const tradeTransaction1Time = now + 10;
                const tradeTransaction2Time = now + 20;
                const job = new entities_1.RfqmV2JobEntity({
                    ...BASE_JOB,
                    approval: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL,
                    status: types_1.RfqmJobStatus.FailedExpired,
                });
                const approvalSubmission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(approvalTransaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x01',
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Approval,
                    nonce: 0,
                });
                const approvalSubmission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(approvalTransaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x02',
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Approval,
                    nonce: 1,
                });
                const tradeSubmission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(tradeTransaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x03',
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 2,
                });
                const tradeSubmission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(tradeTransaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x04',
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 3,
                });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([approvalSubmission1, approvalSubmission2]);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([tradeSubmission1, tradeSubmission2]);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                const orderStatus = await service.getStatusAsync('0x00');
                if (orderStatus === null) {
                    chai_1.expect.fail('Status should exist');
                    throw new Error();
                }
                if (orderStatus.status !== 'failed') {
                    chai_1.expect.fail('Status should be failed');
                    throw new Error();
                }
                (0, chai_1.expect)(orderStatus.approvalTransactions).to.have.length(2);
                (0, chai_1.expect)(orderStatus.approvalTransactions).to.deep.include({
                    hash: '0x01',
                    timestamp: +approvalTransaction1Time.valueOf(),
                });
                (0, chai_1.expect)(orderStatus.approvalTransactions).to.deep.include({
                    hash: '0x02',
                    timestamp: +approvalTransaction2Time.valueOf(),
                });
                (0, chai_1.expect)(orderStatus.transactions).to.have.length(2);
                (0, chai_1.expect)(orderStatus.transactions).to.deep.include({
                    hash: '0x03',
                    timestamp: +tradeTransaction1Time.valueOf(),
                });
                (0, chai_1.expect)(orderStatus.transactions).to.deep.include({
                    hash: '0x04',
                    timestamp: +tradeTransaction2Time.valueOf(),
                });
            });
            it('should return declined for a job that was declined on the last look', async () => {
                const job = new entities_1.RfqmV2JobEntity({
                    ...BASE_JOB,
                    status: types_1.RfqmJobStatus.FailedLastLookDeclined,
                });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                //what is this dummy first attempt?
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve();
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([]);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                const jobStatus = await service.getStatusAsync('0x00');
                if (jobStatus === null) {
                    chai_1.expect.fail('Status should exist');
                    throw new Error();
                }
                (0, chai_1.expect)(jobStatus.status).to.eq('failed');
                if (jobStatus.status == 'failed') {
                    (0, chai_1.expect)(jobStatus.reason).to.eq('last_look_declined');
                }
            });
            it('should return succeeded for a successful job, with the succeeded job and include correct `transactions` and `approvalTransactions`', async () => {
                const now = Date.now();
                const approvalTransaction1Time = now + 3;
                const approvalTransaction2Time = now + 7;
                const tradeTransaction1Time = now + 10;
                const tradeTransaction2Time = now + 20;
                const job = new entities_1.RfqmV2JobEntity({
                    ...BASE_JOB,
                    approval: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL,
                    status: types_1.RfqmJobStatus.SucceededUnconfirmed,
                });
                const approvalSubmission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(approvalTransaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x01',
                    status: types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Approval,
                    nonce: 0,
                });
                const approvalSubmission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(approvalTransaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x02',
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Approval,
                    nonce: 1,
                });
                const tradeSubmission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(tradeTransaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x03',
                    status: types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 2,
                });
                const tradeSubmission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(tradeTransaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x04',
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 3,
                });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([approvalSubmission1, approvalSubmission2]);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([tradeSubmission1, tradeSubmission2]);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                const orderStatus = await service.getStatusAsync('0x00');
                if (orderStatus === null) {
                    chai_1.expect.fail('Status should exist');
                    throw new Error();
                }
                if (orderStatus.status !== 'succeeded') {
                    chai_1.expect.fail('Status should be succeeded');
                    throw new Error();
                }
                if (!orderStatus.approvalTransactions) {
                    chai_1.expect.fail('Approval transactions not present');
                    throw new Error();
                }
                (0, chai_1.expect)(orderStatus.approvalTransactions[0]).to.contain({
                    hash: '0x02',
                    timestamp: +approvalTransaction2Time.valueOf(),
                });
                (0, chai_1.expect)(orderStatus.transactions[0]).to.contain({
                    hash: '0x04',
                    timestamp: +tradeTransaction2Time.valueOf(),
                });
            });
            it('should return confirmed for a successful confirmed job and include correct `transactions` and `approvalTransactions`', async () => {
                const now = Date.now();
                const approvalTransaction1Time = now + 3;
                const approvalTransaction2Time = now + 7;
                const tradeTransaction1Time = now + 10;
                const tradeTransaction2Time = now + 20;
                const job = new entities_1.RfqmV2JobEntity({
                    ...BASE_JOB,
                    approval: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL,
                    status: types_1.RfqmJobStatus.SucceededConfirmed,
                });
                const approvalSubmission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(approvalTransaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x01',
                    status: types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Approval,
                    nonce: 0,
                });
                const approvalSubmission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(approvalTransaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x02',
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Approval,
                    nonce: 1,
                });
                const tradeSubmission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(tradeTransaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x03',
                    status: types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 2,
                });
                const tradeSubmission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(tradeTransaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x04',
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 3,
                });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([approvalSubmission1, approvalSubmission2]);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([tradeSubmission1, tradeSubmission2]);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                const orderStatus = await service.getStatusAsync('0x00');
                if (orderStatus === null) {
                    chai_1.expect.fail('Status should exist');
                    throw new Error();
                }
                if (orderStatus.status !== 'confirmed') {
                    chai_1.expect.fail('Status should be confirmed');
                    throw new Error();
                }
                if (!orderStatus.approvalTransactions) {
                    chai_1.expect.fail('Approval transactions not present');
                    throw new Error();
                }
                (0, chai_1.expect)(orderStatus.approvalTransactions[0]).to.contain({
                    hash: '0x02',
                    timestamp: +approvalTransaction2Time.valueOf(),
                });
                (0, chai_1.expect)(orderStatus.transactions[0]).to.contain({
                    hash: '0x04',
                    timestamp: +tradeTransaction2Time.valueOf(),
                });
            });
            it('should throw if the job is successful but there are no successful transactions for approval', async () => {
                const now = Date.now();
                const approvalTransaction1Time = now + 3;
                const approvalTransaction2Time = now + 7;
                const tradeTransaction1Time = now + 10;
                const tradeTransaction2Time = now + 20;
                const job = new entities_1.RfqmV2JobEntity({
                    ...BASE_JOB,
                    approval: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL,
                    status: types_1.RfqmJobStatus.SucceededUnconfirmed,
                });
                const approvalSubmission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(approvalTransaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x01',
                    status: types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Approval,
                    nonce: 0,
                });
                const approvalSubmission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(approvalTransaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x02',
                    status: types_1.RfqmTransactionSubmissionStatus.RevertedUnconfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Approval,
                    nonce: 1,
                });
                const tradeSubmission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(tradeTransaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x03',
                    status: types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 2,
                });
                const tradeSubmission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(tradeTransaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x04',
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 3,
                });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([approvalSubmission1, approvalSubmission2]);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([tradeSubmission1, tradeSubmission2]);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                try {
                    await service.getStatusAsync('0x00');
                    chai_1.expect.fail();
                }
                catch (e) {
                    (0, chai_1.expect)(e.message).to.contain('Expected exactly one successful transaction submission');
                }
            });
            it('should throw if the job is successful but there are multiple successful transactions for approval', async () => {
                const now = Date.now();
                const approvalTransaction1Time = now + 3;
                const approvalTransaction2Time = now + 7;
                const tradeTransaction1Time = now + 10;
                const tradeTransaction2Time = now + 20;
                const job = new entities_1.RfqmV2JobEntity({
                    ...BASE_JOB,
                    approval: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL,
                    status: types_1.RfqmJobStatus.SucceededUnconfirmed,
                });
                const approvalSubmission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(approvalTransaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x01',
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Approval,
                    nonce: 0,
                });
                const approvalSubmission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(approvalTransaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x02',
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Approval,
                    nonce: 1,
                });
                const tradeSubmission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(tradeTransaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x03',
                    status: types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 2,
                });
                const tradeSubmission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(tradeTransaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x04',
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 3,
                });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([approvalSubmission1, approvalSubmission2]);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([tradeSubmission1, tradeSubmission2]);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                try {
                    await service.getStatusAsync('0x00');
                    chai_1.expect.fail();
                }
                catch (e) {
                    (0, chai_1.expect)(e.message).to.contain('Expected exactly one successful transaction submission');
                }
            });
            it('should throw if the job is successful but the successful transaciton has no hash for approval', async () => {
                const now = Date.now();
                const approvalTransaction1Time = now + 3;
                const approvalTransaction2Time = now + 7;
                const tradeTransaction1Time = now + 10;
                const tradeTransaction2Time = now + 20;
                const job = new entities_1.RfqmV2JobEntity({
                    ...BASE_JOB,
                    approval: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL,
                    status: types_1.RfqmJobStatus.SucceededUnconfirmed,
                });
                const approvalSubmission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(approvalTransaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x01',
                    status: types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Approval,
                    nonce: 0,
                });
                const approvalSubmission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(approvalTransaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '',
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Approval,
                    nonce: 1,
                });
                const tradeSubmission1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(tradeTransaction1Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x03',
                    status: types_1.RfqmTransactionSubmissionStatus.DroppedAndReplaced,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 2,
                });
                const tradeSubmission2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(tradeTransaction2Time),
                    orderHash: job.orderHash,
                    transactionHash: '0x04',
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed,
                    from: job.order.order.txOrigin,
                    to: job.order.order.verifyingContract,
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    nonce: 3,
                });
                const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([approvalSubmission1, approvalSubmission2]);
                (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([tradeSubmission1, tradeSubmission2]);
                const service = buildRfqmServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
                try {
                    await service.getStatusAsync('0x00');
                    chai_1.expect.fail();
                }
                catch (e) {
                    (0, chai_1.expect)(e.message).to.contain('does not have a hash');
                }
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,