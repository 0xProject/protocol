77845623805aaac16037720093d03580
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeeTransformer = exports.MetaTransactionTransformer = exports.BigNumberTransformer = exports.BigIntTransformer = void 0;
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const fee_utils_1 = require("../core/fee_utils");
exports.BigIntTransformer = {
    from: (value) => {
        if (value === null) {
            return null;
        }
        const num = Number(value);
        if (!Number.isSafeInteger(num)) {
            throw new Error('unsafe integer precision when transforming value');
        }
        return value === null ? null : Number(value);
    },
    to: (value) => {
        if (value === null || value === undefined) {
            return null;
        }
        if (!Number.isSafeInteger(value)) {
            throw new Error('unsafe integer precision when transforming value');
        }
        return value.toString();
    },
};
exports.BigNumberTransformer = {
    from: (value) => {
        return value === null ? null : new utils_1.BigNumber(value);
    },
    to: (value) => {
        return value === null || value === undefined ? null : value.toString();
    },
};
exports.MetaTransactionTransformer = {
    /**
     * Used to marshal `MetaTransaction` when writing to the database.
     */
    to: (metaTransaction) => {
        const { minGasPrice, maxGasPrice, expirationTimeSeconds, salt, value, feeAmount, chainId } = metaTransaction;
        return {
            ...metaTransaction,
            minGasPrice: minGasPrice.toString(),
            maxGasPrice: maxGasPrice.toString(),
            expirationTimeSeconds: expirationTimeSeconds.toString(),
            salt: salt.toString(),
            value: value.toString(),
            feeAmount: feeAmount.toString(),
            chainId: chainId.toString(),
        };
    },
    /**
     * Used to unmarshal `MetaTransaction` when reading from the database.
     */
    from: (storedValue) => {
        const { minGasPrice, maxGasPrice, expirationTimeSeconds, salt, value, feeAmount, chainId } = storedValue;
        return new protocol_utils_1.MetaTransaction({
            ...storedValue,
            minGasPrice: new utils_1.BigNumber(minGasPrice),
            maxGasPrice: new utils_1.BigNumber(maxGasPrice),
            expirationTimeSeconds: new utils_1.BigNumber(expirationTimeSeconds),
            salt: new utils_1.BigNumber(salt),
            value: new utils_1.BigNumber(value),
            feeAmount: new utils_1.BigNumber(feeAmount),
            chainId: Number(chainId),
        });
    },
};
exports.FeeTransformer = {
    /**
     * Used to marshal `Fee` when writing to the database.
     */
    to: (value) => {
        return (0, fee_utils_1.feeToStoredFee)(value);
    },
    /**
     * Used to unmarshal `Fee` when reading from the database.
     */
    from: (storedFee) => {
        return (0, fee_utils_1.storedFeeToFee)(storedFee);
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9lbnRpdGllcy90cmFuc2Zvcm1lcnMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdURBQTRFO0FBQzVFLHFDQUFzQztBQUl0QyxpREFBbUU7QUFFdEQsUUFBQSxpQkFBaUIsR0FBcUI7SUFDL0MsSUFBSSxFQUFFLENBQUMsS0FBb0IsRUFBaUIsRUFBRTtRQUMxQyxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7U0FDdkU7UUFDRCxPQUFPLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFDRCxFQUFFLEVBQUUsQ0FBQyxLQUFnQyxFQUFpQixFQUFFO1FBQ3BELElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3ZDLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7U0FDdkU7UUFDRCxPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1QixDQUFDO0NBQ0osQ0FBQztBQUVXLFFBQUEsb0JBQW9CLEdBQXFCO0lBQ2xELElBQUksRUFBRSxDQUFDLEtBQW9CLEVBQW9CLEVBQUU7UUFDN0MsT0FBTyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksaUJBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBQ0QsRUFBRSxFQUFFLENBQUMsS0FBbUMsRUFBaUIsRUFBRTtRQUN2RCxPQUFPLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0UsQ0FBQztDQUNKLENBQUM7QUFFVyxRQUFBLDBCQUEwQixHQUFxQjtJQUN4RDs7T0FFRztJQUNILEVBQUUsRUFBRSxDQUFDLGVBQWdDLEVBQStDLEVBQUU7UUFDbEYsTUFBTSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLEdBQUcsZUFBZSxDQUFDO1FBQzdHLE9BQU87WUFDSCxHQUFHLGVBQWU7WUFDbEIsV0FBVyxFQUFFLFdBQVcsQ0FBQyxRQUFRLEVBQUU7WUFDbkMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxRQUFRLEVBQUU7WUFDbkMscUJBQXFCLEVBQUUscUJBQXFCLENBQUMsUUFBUSxFQUFFO1lBQ3ZELElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3JCLEtBQUssRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQ3ZCLFNBQVMsRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFFO1lBQy9CLE9BQU8sRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFO1NBQzlCLENBQUM7SUFDTixDQUFDO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUUsQ0FBQyxXQUF3RCxFQUFtQixFQUFFO1FBQ2hGLE1BQU0sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxHQUFHLFdBQVcsQ0FBQztRQUN6RyxPQUFPLElBQUksZ0NBQWUsQ0FBQztZQUN2QixHQUFHLFdBQVc7WUFDZCxXQUFXLEVBQUUsSUFBSSxpQkFBUyxDQUFDLFdBQVcsQ0FBQztZQUN2QyxXQUFXLEVBQUUsSUFBSSxpQkFBUyxDQUFDLFdBQVcsQ0FBQztZQUN2QyxxQkFBcUIsRUFBRSxJQUFJLGlCQUFTLENBQUMscUJBQXFCLENBQUM7WUFDM0QsSUFBSSxFQUFFLElBQUksaUJBQVMsQ0FBQyxJQUFJLENBQUM7WUFDekIsS0FBSyxFQUFFLElBQUksaUJBQVMsQ0FBQyxLQUFLLENBQUM7WUFDM0IsU0FBUyxFQUFFLElBQUksaUJBQVMsQ0FBQyxTQUFTLENBQUM7WUFDbkMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDM0IsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKLENBQUM7QUFFVyxRQUFBLGNBQWMsR0FBcUI7SUFDNUM7O09BRUc7SUFDSCxFQUFFLEVBQUUsQ0FBQyxLQUFVLEVBQWEsRUFBRTtRQUMxQixPQUFPLElBQUEsMEJBQWMsRUFBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUUsQ0FBQyxTQUFvQixFQUFPLEVBQUU7UUFDaEMsT0FBTyxJQUFBLDBCQUFjLEVBQUMsU0FBUyxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNKLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9lbnRpdGllcy90cmFuc2Zvcm1lcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWV0YVRyYW5zYWN0aW9uLCBNZXRhVHJhbnNhY3Rpb25GaWVsZHMgfSBmcm9tICdAMHgvcHJvdG9jb2wtdXRpbHMnO1xuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnQDB4L3V0aWxzJztcbmltcG9ydCB7IFZhbHVlVHJhbnNmb3JtZXIgfSBmcm9tICd0eXBlb3JtJztcblxuaW1wb3J0IHsgRmVlLCBTdG9yZWRGZWUgfSBmcm9tICcuLi9jb3JlL3R5cGVzJztcbmltcG9ydCB7IGZlZVRvU3RvcmVkRmVlLCBzdG9yZWRGZWVUb0ZlZSB9IGZyb20gJy4uL2NvcmUvZmVlX3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IEJpZ0ludFRyYW5zZm9ybWVyOiBWYWx1ZVRyYW5zZm9ybWVyID0ge1xuICAgIGZyb206ICh2YWx1ZTogc3RyaW5nIHwgbnVsbCk6IG51bWJlciB8IG51bGwgPT4ge1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG51bSA9IE51bWJlcih2YWx1ZSk7XG4gICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIobnVtKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnNhZmUgaW50ZWdlciBwcmVjaXNpb24gd2hlbiB0cmFuc2Zvcm1pbmcgdmFsdWUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBudWxsIDogTnVtYmVyKHZhbHVlKTtcbiAgICB9LFxuICAgIHRvOiAodmFsdWU6IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQpOiBzdHJpbmcgfCBudWxsID0+IHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIodmFsdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc2FmZSBpbnRlZ2VyIHByZWNpc2lvbiB3aGVuIHRyYW5zZm9ybWluZyB2YWx1ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgIH0sXG59O1xuXG5leHBvcnQgY29uc3QgQmlnTnVtYmVyVHJhbnNmb3JtZXI6IFZhbHVlVHJhbnNmb3JtZXIgPSB7XG4gICAgZnJvbTogKHZhbHVlOiBzdHJpbmcgfCBudWxsKTogQmlnTnVtYmVyIHwgbnVsbCA9PiB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IG51bGwgOiBuZXcgQmlnTnVtYmVyKHZhbHVlKTtcbiAgICB9LFxuICAgIHRvOiAodmFsdWU6IEJpZ051bWJlciB8IG51bGwgfCB1bmRlZmluZWQpOiBzdHJpbmcgfCBudWxsID0+IHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBudWxsIDogdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IE1ldGFUcmFuc2FjdGlvblRyYW5zZm9ybWVyOiBWYWx1ZVRyYW5zZm9ybWVyID0ge1xuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gbWFyc2hhbCBgTWV0YVRyYW5zYWN0aW9uYCB3aGVuIHdyaXRpbmcgdG8gdGhlIGRhdGFiYXNlLlxuICAgICAqL1xuICAgIHRvOiAobWV0YVRyYW5zYWN0aW9uOiBNZXRhVHJhbnNhY3Rpb24pOiBSZWNvcmQ8a2V5b2YgTWV0YVRyYW5zYWN0aW9uRmllbGRzLCBzdHJpbmc+ID0+IHtcbiAgICAgICAgY29uc3QgeyBtaW5HYXNQcmljZSwgbWF4R2FzUHJpY2UsIGV4cGlyYXRpb25UaW1lU2Vjb25kcywgc2FsdCwgdmFsdWUsIGZlZUFtb3VudCwgY2hhaW5JZCB9ID0gbWV0YVRyYW5zYWN0aW9uO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ubWV0YVRyYW5zYWN0aW9uLFxuICAgICAgICAgICAgbWluR2FzUHJpY2U6IG1pbkdhc1ByaWNlLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBtYXhHYXNQcmljZTogbWF4R2FzUHJpY2UudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGV4cGlyYXRpb25UaW1lU2Vjb25kczogZXhwaXJhdGlvblRpbWVTZWNvbmRzLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBzYWx0OiBzYWx0LnRvU3RyaW5nKCksXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGZlZUFtb3VudDogZmVlQW1vdW50LnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjaGFpbklkOiBjaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVubWFyc2hhbCBgTWV0YVRyYW5zYWN0aW9uYCB3aGVuIHJlYWRpbmcgZnJvbSB0aGUgZGF0YWJhc2UuXG4gICAgICovXG4gICAgZnJvbTogKHN0b3JlZFZhbHVlOiBSZWNvcmQ8a2V5b2YgTWV0YVRyYW5zYWN0aW9uRmllbGRzLCBzdHJpbmc+KTogTWV0YVRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgY29uc3QgeyBtaW5HYXNQcmljZSwgbWF4R2FzUHJpY2UsIGV4cGlyYXRpb25UaW1lU2Vjb25kcywgc2FsdCwgdmFsdWUsIGZlZUFtb3VudCwgY2hhaW5JZCB9ID0gc3RvcmVkVmFsdWU7XG4gICAgICAgIHJldHVybiBuZXcgTWV0YVRyYW5zYWN0aW9uKHtcbiAgICAgICAgICAgIC4uLnN0b3JlZFZhbHVlLFxuICAgICAgICAgICAgbWluR2FzUHJpY2U6IG5ldyBCaWdOdW1iZXIobWluR2FzUHJpY2UpLFxuICAgICAgICAgICAgbWF4R2FzUHJpY2U6IG5ldyBCaWdOdW1iZXIobWF4R2FzUHJpY2UpLFxuICAgICAgICAgICAgZXhwaXJhdGlvblRpbWVTZWNvbmRzOiBuZXcgQmlnTnVtYmVyKGV4cGlyYXRpb25UaW1lU2Vjb25kcyksXG4gICAgICAgICAgICBzYWx0OiBuZXcgQmlnTnVtYmVyKHNhbHQpLFxuICAgICAgICAgICAgdmFsdWU6IG5ldyBCaWdOdW1iZXIodmFsdWUpLFxuICAgICAgICAgICAgZmVlQW1vdW50OiBuZXcgQmlnTnVtYmVyKGZlZUFtb3VudCksXG4gICAgICAgICAgICBjaGFpbklkOiBOdW1iZXIoY2hhaW5JZCksXG4gICAgICAgIH0pO1xuICAgIH0sXG59O1xuXG5leHBvcnQgY29uc3QgRmVlVHJhbnNmb3JtZXI6IFZhbHVlVHJhbnNmb3JtZXIgPSB7XG4gICAgLyoqXG4gICAgICogVXNlZCB0byBtYXJzaGFsIGBGZWVgIHdoZW4gd3JpdGluZyB0byB0aGUgZGF0YWJhc2UuXG4gICAgICovXG4gICAgdG86ICh2YWx1ZTogRmVlKTogU3RvcmVkRmVlID0+IHtcbiAgICAgICAgcmV0dXJuIGZlZVRvU3RvcmVkRmVlKHZhbHVlKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdW5tYXJzaGFsIGBGZWVgIHdoZW4gcmVhZGluZyBmcm9tIHRoZSBkYXRhYmFzZS5cbiAgICAgKi9cbiAgICBmcm9tOiAoc3RvcmVkRmVlOiBTdG9yZWRGZWUpOiBGZWUgPT4ge1xuICAgICAgICByZXR1cm4gc3RvcmVkRmVlVG9GZWUoc3RvcmVkRmVlKTtcbiAgICB9LFxufTtcbiJdLCJ2ZXJzaW9uIjozfQ==