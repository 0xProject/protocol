{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/ProtoUtils.ts","mappings":";;;AAAA,qCAAsC;AAGtC;;;GAGG;AACH,SAAgB,gBAAgB,CAAC,KAAkB;;IAC/C,gFAAgF;IAChF,+EAA+E;IAC/E,6BAA6B;IAC7B,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,MAAM,MAAM,GAAG,IAAI,iBAAS,CAAC;QACzB,CAAC;QACD,CAAC,EAAE,MAAA,KAAK,CAAC,CAAC,mCAAI,IAAI;QAClB,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;QAC9C,YAAY,EAAE,IAAI;KACrB,CAAC,CAAC;IACH,IAAI,CAAC,iBAAS,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;QAChC,MAAM,IAAI,KAAK,CAAC,0CAA0C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;KACtF;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AAfD,4CAeC;AAED;;;GAGG;AACH,SAAgB,gBAAgB,CAAC,CAAY;;IACzC,MAAM,CAAC,GAAG,MAAA,MAAA,CAAC,CAAC,CAAC,0CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,mCAAI,EAAE,CAAC;IAC3C,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IACvD,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACd,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACvB,CAAC;AALD,4CAKC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/ProtoUtils.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { BigNumberJs } from '../proto-ts/big_number_js.pb';\n\n/**\n * Converts a BigNumberJs proto to an instance of bignumber.js `BigNumber`.\n * See: https://mikemcl.github.io/bignumber.js/#instance-properties\n */\nexport function protoToBigNumber(proto: BigNumberJs): BigNumber {\n    // Proto uses an `int64` which is generated to a `bigint`, but bignumber.js uses\n    // `number`. This probably masks some big problems with bignumber.js, but we'll\n    // let that sleeping dog lie.\n    const c = proto.c.map((x) => Number(x));\n    const result = new BigNumber({\n        c,\n        e: proto.e ?? null,\n        s: proto.s ? 1 : proto.s === false ? -1 : null,\n        _isBigNumber: true,\n    });\n    if (!BigNumber.isBigNumber(result)) {\n        throw new Error(`Unable to create BigNumber from proto: ${JSON.stringify(proto)}`);\n    }\n    return result;\n}\n\n/**\n * Converts a bignumber.js to its proto representation.\n * See: https://mikemcl.github.io/bignumber.js/#instance-properties\n */\nexport function bigNumberToProto(n: BigNumber): BigNumberJs {\n    const c = n.c?.map((n) => BigInt(n)) ?? [];\n    const s = n.s === 1 ? true : n.s === -1 ? false : null;\n    const e = n.e;\n    return { c, e, s };\n}\n"],"version":3}