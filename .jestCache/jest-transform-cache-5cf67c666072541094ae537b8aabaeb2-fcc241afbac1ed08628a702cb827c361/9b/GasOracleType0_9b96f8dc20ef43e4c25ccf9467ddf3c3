7864db2253f2cb21b3ddaa9dc8b6b727
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GasOracleType0 = void 0;
const utils_1 = require("@0x/utils");
const http_status_codes_1 = require("http-status-codes");
const TIMEOUT_MS = 250;
/**
 * A client to wrap the functionality of the 0x Gas Price Oracle
 * (https://github.com/0xProject/gas-price-oracle) non-"v2" endpoints
 * which return type 0 gas data
 */
class GasOracleType0 {
    /**
     * Constructor is marked `private` to force users to use the static
     * creator functions, which validate the URL.
     */
    constructor(url, axiosInstance) {
        this._axiosInstance = axiosInstance;
        this._url = url;
    }
    /**
     * Creates an instance of `GasOracleType0`.
     *
     * Verifies that the URL is of the format
     * "http://gas-price-oracle-svc.gas-price-oracle/source/median", that way
     * we don't accidentally put in a v2 (EIP1559) URL.
     */
    static create(url, axiosInstance) {
        const domainRegex = /^https?:\/\/[^/]*\/source\/median$/;
        if (!domainRegex.test(url)) {
            throw new Error(`Error creating GasOracleType0: URL ${url} is not of the expected format.
                Make sure you aren't trying to use a "v2" URL with GasOracleType0`);
        }
        return new GasOracleType0(url, axiosInstance);
    }
    /**
     * Fetch the current "fast" gas price being reported by the oracle, in WEI
     */
    async getGasWeiAsync(speed) {
        const response = await this._axiosInstance.get(this._url, {
            timeout: TIMEOUT_MS,
        });
        if (response.status !== http_status_codes_1.OK) {
            throw new Error('Failed to request base fee from gas price oracle');
        }
        try {
            const gasFee = response.data.result[speed];
            return new utils_1.BigNumber(gasFee);
        }
        catch (e) {
            throw new Error(`Response from gas price oracle did not include the expected values:
                ${e.message} ${JSON.stringify(response.data)}`);
        }
    }
}
exports.GasOracleType0 = GasOracleType0;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9HYXNPcmFjbGVUeXBlMC50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBc0M7QUFFdEMseURBQXVDO0FBZ0J2QyxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUM7QUFFdkI7Ozs7R0FJRztBQUNILE1BQWEsY0FBYztJQTJDdkI7OztPQUdHO0lBQ0gsWUFBb0IsR0FBVyxFQUFFLGFBQTRCO1FBQ3pELElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ3BCLENBQUM7SUE5Q0Q7Ozs7OztPQU1HO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFXLEVBQUUsYUFBNEI7UUFDMUQsTUFBTSxXQUFXLEdBQUcsb0NBQW9DLENBQUM7UUFDekQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FDWCxzQ0FBc0MsR0FBRztrRkFDeUIsQ0FDckUsQ0FBQztTQUNMO1FBQ0QsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUE4QztRQUN0RSxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFrQixJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3ZFLE9BQU8sRUFBRSxVQUFVO1NBQ3RCLENBQUMsQ0FBQztRQUNILElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxzQkFBRSxFQUFFO1lBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztTQUN2RTtRQUNELElBQUk7WUFDQSxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMzQyxPQUFPLElBQUksaUJBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNoQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1IsTUFBTSxJQUFJLEtBQUssQ0FDWDtrQkFDRSxDQUFDLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQ2pELENBQUM7U0FDTDtJQUNMLENBQUM7Q0FVSjtBQW5ERCx3Q0FtREMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9HYXNPcmFjbGVUeXBlMC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tICdAMHgvdXRpbHMnO1xuaW1wb3J0IHsgQXhpb3NJbnN0YW5jZSB9IGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IE9LIH0gZnJvbSAnaHR0cC1zdGF0dXMtY29kZXMnO1xuXG4vKipcbiAqIFJlc3BvbnNlIGZvcm1hdCBmcm9tIGUuZy4gaHR0cHM6Ly9nYXMucG9seWdvbi5hcGkuMHgub3JnL3NvdXJjZS9tZWRpYW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUTWVkaWFuUmVzcG9uc2Uge1xuICAgIHJlc3VsdDoge1xuICAgICAgICBzb3VyY2U6ICdNRURJQU4nO1xuICAgICAgICB0aW1lc3RhbXA6IG51bWJlcjsgLy8gVW5peCBTRUNPTkRTXG4gICAgICAgIGluc3RhbnQ6IG51bWJlcjsgLy8gd2VpXG4gICAgICAgIGZhc3Q6IG51bWJlcjsgLy8gd2VpXG4gICAgICAgIHN0YW5kYXJkOiBudW1iZXI7IC8vIHdlaVxuICAgICAgICBsb3c6IG51bWJlcjsgLy8gd2VpXG4gICAgfTtcbn1cblxuY29uc3QgVElNRU9VVF9NUyA9IDI1MDtcblxuLyoqXG4gKiBBIGNsaWVudCB0byB3cmFwIHRoZSBmdW5jdGlvbmFsaXR5IG9mIHRoZSAweCBHYXMgUHJpY2UgT3JhY2xlXG4gKiAoaHR0cHM6Ly9naXRodWIuY29tLzB4UHJvamVjdC9nYXMtcHJpY2Utb3JhY2xlKSBub24tXCJ2MlwiIGVuZHBvaW50c1xuICogd2hpY2ggcmV0dXJuIHR5cGUgMCBnYXMgZGF0YVxuICovXG5leHBvcnQgY2xhc3MgR2FzT3JhY2xlVHlwZTAge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX3VybDogc3RyaW5nO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2F4aW9zSW5zdGFuY2U6IEF4aW9zSW5zdGFuY2U7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGBHYXNPcmFjbGVUeXBlMGAuXG4gICAgICpcbiAgICAgKiBWZXJpZmllcyB0aGF0IHRoZSBVUkwgaXMgb2YgdGhlIGZvcm1hdFxuICAgICAqIFwiaHR0cDovL2dhcy1wcmljZS1vcmFjbGUtc3ZjLmdhcy1wcmljZS1vcmFjbGUvc291cmNlL21lZGlhblwiLCB0aGF0IHdheVxuICAgICAqIHdlIGRvbid0IGFjY2lkZW50YWxseSBwdXQgaW4gYSB2MiAoRUlQMTU1OSkgVVJMLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHVybDogc3RyaW5nLCBheGlvc0luc3RhbmNlOiBBeGlvc0luc3RhbmNlKTogR2FzT3JhY2xlVHlwZTAge1xuICAgICAgICBjb25zdCBkb21haW5SZWdleCA9IC9eaHR0cHM/OlxcL1xcL1teL10qXFwvc291cmNlXFwvbWVkaWFuJC87XG4gICAgICAgIGlmICghZG9tYWluUmVnZXgudGVzdCh1cmwpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgYEVycm9yIGNyZWF0aW5nIEdhc09yYWNsZVR5cGUwOiBVUkwgJHt1cmx9IGlzIG5vdCBvZiB0aGUgZXhwZWN0ZWQgZm9ybWF0LlxuICAgICAgICAgICAgICAgIE1ha2Ugc3VyZSB5b3UgYXJlbid0IHRyeWluZyB0byB1c2UgYSBcInYyXCIgVVJMIHdpdGggR2FzT3JhY2xlVHlwZTBgLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEdhc09yYWNsZVR5cGUwKHVybCwgYXhpb3NJbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmV0Y2ggdGhlIGN1cnJlbnQgXCJmYXN0XCIgZ2FzIHByaWNlIGJlaW5nIHJlcG9ydGVkIGJ5IHRoZSBvcmFjbGUsIGluIFdFSVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRHYXNXZWlBc3luYyhzcGVlZDogJ2luc3RhbnQnIHwgJ2Zhc3QnIHwgJ3N0YW5kYXJkJyB8ICdsb3cnKTogUHJvbWlzZTxCaWdOdW1iZXI+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldDxUTWVkaWFuUmVzcG9uc2U+KHRoaXMuX3VybCwge1xuICAgICAgICAgICAgdGltZW91dDogVElNRU9VVF9NUyxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IE9LKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byByZXF1ZXN0IGJhc2UgZmVlIGZyb20gZ2FzIHByaWNlIG9yYWNsZScpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBnYXNGZWUgPSByZXNwb25zZS5kYXRhLnJlc3VsdFtzcGVlZF07XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihnYXNGZWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgYFJlc3BvbnNlIGZyb20gZ2FzIHByaWNlIG9yYWNsZSBkaWQgbm90IGluY2x1ZGUgdGhlIGV4cGVjdGVkIHZhbHVlczpcbiAgICAgICAgICAgICAgICAke2UubWVzc2FnZX0gJHtKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKX1gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yIGlzIG1hcmtlZCBgcHJpdmF0ZWAgdG8gZm9yY2UgdXNlcnMgdG8gdXNlIHRoZSBzdGF0aWNcbiAgICAgKiBjcmVhdG9yIGZ1bmN0aW9ucywgd2hpY2ggdmFsaWRhdGUgdGhlIFVSTC5cbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKHVybDogc3RyaW5nLCBheGlvc0luc3RhbmNlOiBBeGlvc0luc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuX2F4aW9zSW5zdGFuY2UgPSBheGlvc0luc3RhbmNlO1xuICAgICAgICB0aGlzLl91cmwgPSB1cmw7XG4gICAgfVxufVxuIl0sInZlcnNpb24iOjN9