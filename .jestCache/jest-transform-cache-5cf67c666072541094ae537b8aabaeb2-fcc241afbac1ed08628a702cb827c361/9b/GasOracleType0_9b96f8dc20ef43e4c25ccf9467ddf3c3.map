{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasOracleType0.ts","mappings":";;;AAAA,qCAAsC;AAEtC,yDAAuC;AAgBvC,MAAM,UAAU,GAAG,GAAG,CAAC;AAEvB;;;;GAIG;AACH,MAAa,cAAc;IA2CvB;;;OAGG;IACH,YAAoB,GAAW,EAAE,aAA4B;QACzD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;IACpB,CAAC;IA9CD;;;;;;OAMG;IACI,MAAM,CAAC,MAAM,CAAC,GAAW,EAAE,aAA4B;QAC1D,MAAM,WAAW,GAAG,oCAAoC,CAAC;QACzD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACxB,MAAM,IAAI,KAAK,CACX,sCAAsC,GAAG;kFACyB,CACrE,CAAC;SACL;QACD,OAAO,IAAI,cAAc,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,cAAc,CAAC,KAA8C;QACtE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAkB,IAAI,CAAC,IAAI,EAAE;YACvE,OAAO,EAAE,UAAU;SACtB,CAAC,CAAC;QACH,IAAI,QAAQ,CAAC,MAAM,KAAK,sBAAE,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACvE;QACD,IAAI;YACA,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC3C,OAAO,IAAI,iBAAS,CAAC,MAAM,CAAC,CAAC;SAChC;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,KAAK,CACX;kBACE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CACjD,CAAC;SACL;IACL,CAAC;CAUJ;AAnDD,wCAmDC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasOracleType0.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { AxiosInstance } from 'axios';\nimport { OK } from 'http-status-codes';\n\n/**\n * Response format from e.g. https://gas.polygon.api.0x.org/source/median\n */\nexport interface TMedianResponse {\n    result: {\n        source: 'MEDIAN';\n        timestamp: number; // Unix SECONDS\n        instant: number; // wei\n        fast: number; // wei\n        standard: number; // wei\n        low: number; // wei\n    };\n}\n\nconst TIMEOUT_MS = 250;\n\n/**\n * A client to wrap the functionality of the 0x Gas Price Oracle\n * (https://github.com/0xProject/gas-price-oracle) non-\"v2\" endpoints\n * which return type 0 gas data\n */\nexport class GasOracleType0 {\n    private readonly _url: string;\n    private readonly _axiosInstance: AxiosInstance;\n\n    /**\n     * Creates an instance of `GasOracleType0`.\n     *\n     * Verifies that the URL is of the format\n     * \"http://gas-price-oracle-svc.gas-price-oracle/source/median\", that way\n     * we don't accidentally put in a v2 (EIP1559) URL.\n     */\n    public static create(url: string, axiosInstance: AxiosInstance): GasOracleType0 {\n        const domainRegex = /^https?:\\/\\/[^/]*\\/source\\/median$/;\n        if (!domainRegex.test(url)) {\n            throw new Error(\n                `Error creating GasOracleType0: URL ${url} is not of the expected format.\n                Make sure you aren't trying to use a \"v2\" URL with GasOracleType0`,\n            );\n        }\n        return new GasOracleType0(url, axiosInstance);\n    }\n\n    /**\n     * Fetch the current \"fast\" gas price being reported by the oracle, in WEI\n     */\n    public async getGasWeiAsync(speed: 'instant' | 'fast' | 'standard' | 'low'): Promise<BigNumber> {\n        const response = await this._axiosInstance.get<TMedianResponse>(this._url, {\n            timeout: TIMEOUT_MS,\n        });\n        if (response.status !== OK) {\n            throw new Error('Failed to request base fee from gas price oracle');\n        }\n        try {\n            const gasFee = response.data.result[speed];\n            return new BigNumber(gasFee);\n        } catch (e) {\n            throw new Error(\n                `Response from gas price oracle did not include the expected values:\n                ${e.message} ${JSON.stringify(response.data)}`,\n            );\n        }\n    }\n\n    /**\n     * Constructor is marked `private` to force users to use the static\n     * creator functions, which validate the URL.\n     */\n    private constructor(url: string, axiosInstance: AxiosInstance) {\n        this._axiosInstance = axiosInstance;\n        this._url = url;\n    }\n}\n"],"version":3}