05ca235d79780ab0109ce093547205ce
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:custom-no-magic-numbers
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const constants_1 = require("../../src/core/constants");
const fee_utils_1 = require("../../src/core/fee_utils");
const rfqm_db_utils_1 = require("../../src/utils/rfqm_db_utils");
describe('RFQM DB utils', () => {
    describe('storedOtcOrderToOtcOrder and otcOrderToStoredOtcOrder', () => {
        it('should map there and back without data corruption', () => {
            // it's expired if it's over 9000
            const expiry = new utils_1.BigNumber(9000);
            const nonce = new utils_1.BigNumber(1637085289);
            const chainId = 1;
            const order = new protocol_utils_1.OtcOrder({
                txOrigin: '0x0000000000000000000000000000000000000000',
                taker: '0x1111111111111111111111111111111111111111',
                maker: '0x2222222222222222222222222222222222222222',
                makerToken: '0x3333333333333333333333333333333333333333',
                takerToken: '0x4444444444444444444444444444444444444444',
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(expiry, constants_1.ZERO, nonce),
                chainId,
                verifyingContract: '0x0000000000000000000000000000000000000000',
            });
            const processedOrder = (0, rfqm_db_utils_1.storedOtcOrderToOtcOrder)((0, rfqm_db_utils_1.otcOrderToStoredOtcOrder)(order));
            expect(processedOrder).toEqual(order);
        });
    });
    describe('feeToStoredFee', () => {
        it('should convert Fee without details correctly', () => {
            // Given
            const fee = {
                token: '0xatoken',
                amount: new utils_1.BigNumber(5),
                type: 'fixed',
            };
            // When
            const storedFee = (0, fee_utils_1.feeToStoredFee)(fee);
            // Expect
            expect(storedFee.type).toEqual(fee.type);
            expect(storedFee.token).toEqual(fee.token);
            expect(storedFee.amount).toEqual(fee.amount.toString());
            expect(storedFee.details).toEqual(undefined);
            expect(storedFee.breakdown).toEqual(undefined);
            expect(storedFee.conversionRates).toEqual(undefined);
        });
        it('should convert Fee with gasOnly details correctly', () => {
            var _a, _b, _c;
            // Given
            const fee = {
                token: '0xatoken',
                amount: new utils_1.BigNumber(5),
                type: 'fixed',
                details: {
                    kind: 'gasOnly',
                    feeModelVersion: 0,
                    gasFeeAmount: new utils_1.BigNumber(5),
                    gasPrice: new utils_1.BigNumber(50),
                },
                breakdown: {
                    gas: {
                        amount: new utils_1.BigNumber(100),
                        details: {
                            gasPrice: new utils_1.BigNumber(50),
                            estimatedGas: new utils_1.BigNumber(1),
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: null,
                    feeTokenBaseUnitPriceUsd: null,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            // When
            const storedFee = (0, fee_utils_1.feeToStoredFee)(fee);
            // Expect
            expect(storedFee.type).toEqual(fee.type);
            expect(storedFee.token).toEqual(fee.token);
            expect(storedFee.amount).toEqual(fee.amount.toString());
            expect(storedFee.details.kind).toEqual(fee.details.kind);
            expect(storedFee.details.feeModelVersion).toEqual(fee.details.feeModelVersion);
            expect(storedFee.details.gasFeeAmount).toEqual(fee.details.gasFeeAmount.toString());
            expect(storedFee.details.gasPrice).toEqual(fee.details.gasPrice.toString());
            expect(storedFee.breakdown.gas.amount).toEqual((_a = fee.breakdown.gas) === null || _a === void 0 ? void 0 : _a.amount.toString());
            expect(storedFee.breakdown.gas.details.gasPrice).toEqual((_b = fee.breakdown.gas) === null || _b === void 0 ? void 0 : _b.details.gasPrice.toString());
            expect(storedFee.breakdown.gas.details.estimatedGas).toEqual((_c = fee.breakdown.gas) === null || _c === void 0 ? void 0 : _c.details.estimatedGas.toString());
            expect(storedFee.breakdown.zeroEx).toEqual(undefined);
            expect(storedFee.conversionRates.nativeTokenBaseUnitPriceUsd).toEqual(undefined);
            expect(storedFee.conversionRates.feeTokenBaseUnitPriceUsd).toEqual(undefined);
            expect(storedFee.conversionRates.takerTokenBaseUnitPriceUsd).toEqual(undefined);
            expect(storedFee.conversionRates.makerTokenBaseUnitPriceUsd).toEqual(undefined);
        });
        it('should convert Fee with default details correctly', () => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            // Given
            const fee = {
                token: '0xatoken',
                amount: new utils_1.BigNumber(5),
                type: 'fixed',
                details: {
                    kind: 'default',
                    feeModelVersion: 1,
                    gasFeeAmount: new utils_1.BigNumber(5),
                    gasPrice: new utils_1.BigNumber(50),
                    tradeSizeBps: 4,
                    zeroExFeeAmount: new utils_1.BigNumber(10),
                    feeTokenBaseUnitPriceUsd: new utils_1.BigNumber(3e-15),
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: new utils_1.BigNumber(1e-18),
                },
                breakdown: {
                    gas: {
                        amount: new utils_1.BigNumber(5),
                        details: {
                            gasPrice: new utils_1.BigNumber(50),
                            estimatedGas: new utils_1.BigNumber(1),
                        },
                    },
                    zeroEx: {
                        amount: new utils_1.BigNumber(10),
                        details: {
                            kind: 'volume',
                            tradeSizeBps: 4,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: new utils_1.BigNumber(3e-15),
                    feeTokenBaseUnitPriceUsd: new utils_1.BigNumber(3e-15),
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: new utils_1.BigNumber(1e-18),
                },
            };
            // When
            const storedFee = (0, fee_utils_1.feeToStoredFee)(fee);
            // Expect
            expect(storedFee.type).toEqual(fee.type);
            expect(storedFee.token).toEqual(fee.token);
            expect(storedFee.amount).toEqual(fee.amount.toString());
            expect(storedFee.details.kind).toEqual(fee.details.kind);
            expect(storedFee.details.feeModelVersion).toEqual(fee.details.feeModelVersion);
            expect(storedFee.details.gasFeeAmount).toEqual(fee.details.gasFeeAmount.toString());
            expect(storedFee.details.gasPrice).toEqual(fee.details.gasPrice.toString());
            expect(storedFee.details.tradeSizeBps).toEqual(fee.details.tradeSizeBps);
            expect(storedFee.details.zeroExFeeAmount).toEqual(fee.details.zeroExFeeAmount.toString());
            expect(storedFee.details.feeTokenBaseUnitPriceUsd).toEqual((_a = fee.details.feeTokenBaseUnitPriceUsd) === null || _a === void 0 ? void 0 : _a.toString());
            expect(storedFee.details.takerTokenBaseUnitPriceUsd).toEqual(undefined);
            expect(storedFee.details.makerTokenBaseUnitPriceUsd).toEqual((_b = fee.details.makerTokenBaseUnitPriceUsd) === null || _b === void 0 ? void 0 : _b.toString());
            expect(storedFee.breakdown.gas.amount).toEqual((_c = fee.breakdown.gas) === null || _c === void 0 ? void 0 : _c.amount.toString());
            expect(storedFee.breakdown.gas.details.gasPrice).toEqual((_d = fee.breakdown.gas) === null || _d === void 0 ? void 0 : _d.details.gasPrice.toString());
            expect(storedFee.breakdown.gas.details.estimatedGas).toEqual((_e = fee.breakdown.gas) === null || _e === void 0 ? void 0 : _e.details.estimatedGas.toString());
            expect(storedFee.breakdown.zeroEx.amount).toEqual((_f = fee.breakdown.zeroEx) === null || _f === void 0 ? void 0 : _f.amount.toString());
            expect(storedFee.breakdown.zeroEx.details.kind).toEqual((_g = fee.breakdown.zeroEx) === null || _g === void 0 ? void 0 : _g.details.kind);
            expect(storedFee.breakdown.zeroEx.details.tradeSizeBps).toEqual(4);
            expect(storedFee.conversionRates.nativeTokenBaseUnitPriceUsd).toEqual((_h = fee.conversionRates.nativeTokenBaseUnitPriceUsd) === null || _h === void 0 ? void 0 : _h.toString());
            expect(storedFee.conversionRates.feeTokenBaseUnitPriceUsd).toEqual((_j = fee.conversionRates.feeTokenBaseUnitPriceUsd) === null || _j === void 0 ? void 0 : _j.toString());
            expect(storedFee.conversionRates.takerTokenBaseUnitPriceUsd).toEqual(undefined);
            expect(storedFee.conversionRates.makerTokenBaseUnitPriceUsd).toEqual((_k = fee.conversionRates.makerTokenBaseUnitPriceUsd) === null || _k === void 0 ? void 0 : _k.toString());
        });
        it('should convert Fee with margin based details correctly', () => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            // Given
            const fee = {
                token: '0xatoken',
                amount: new utils_1.BigNumber(5),
                type: 'fixed',
                details: {
                    kind: 'margin',
                    feeModelVersion: 1,
                    gasFeeAmount: new utils_1.BigNumber(5),
                    gasPrice: new utils_1.BigNumber(50),
                    margin: new utils_1.BigNumber(4570),
                    marginRakeRatio: 0.35,
                    zeroExFeeAmount: new utils_1.BigNumber(10),
                    feeTokenBaseUnitPriceUsd: new utils_1.BigNumber(3e-15),
                    takerTokenBaseUnitPriceUsd: new utils_1.BigNumber(1e-18),
                    makerTokenBaseUnitPriceUsd: null,
                },
                breakdown: {
                    gas: {
                        amount: new utils_1.BigNumber(5),
                        details: {
                            gasPrice: new utils_1.BigNumber(50),
                            estimatedGas: new utils_1.BigNumber(1),
                        },
                    },
                    zeroEx: {
                        amount: new utils_1.BigNumber(10),
                        details: {
                            kind: 'price_improvement',
                            priceImprovement: new utils_1.BigNumber(4570),
                            rakeRatio: 0.35,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: new utils_1.BigNumber(3e-15),
                    feeTokenBaseUnitPriceUsd: new utils_1.BigNumber(3e-15),
                    takerTokenBaseUnitPriceUsd: new utils_1.BigNumber(1e-18),
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            // When
            const storedFee = (0, fee_utils_1.feeToStoredFee)(fee);
            // Expect
            expect(storedFee.type).toEqual(fee.type);
            expect(storedFee.token).toEqual(fee.token);
            expect(storedFee.amount).toEqual(fee.amount.toString());
            expect(storedFee.details.kind).toEqual(fee.details.kind);
            expect(storedFee.details.feeModelVersion).toEqual(fee.details.feeModelVersion);
            expect(storedFee.details.gasFeeAmount).toEqual(fee.details.gasFeeAmount.toString());
            expect(storedFee.details.gasPrice).toEqual(fee.details.gasPrice.toString());
            expect(storedFee.details.margin).toEqual(fee.details.margin.toString());
            expect(storedFee.details.marginRakeRatio).toEqual(fee.details.marginRakeRatio);
            expect(storedFee.details.zeroExFeeAmount).toEqual(fee.details.zeroExFeeAmount.toString());
            expect(storedFee.details.feeTokenBaseUnitPriceUsd).toEqual((_a = fee.details.feeTokenBaseUnitPriceUsd) === null || _a === void 0 ? void 0 : _a.toString());
            expect(storedFee.details.takerTokenBaseUnitPriceUsd).toEqual((_b = fee.details.takerTokenBaseUnitPriceUsd) === null || _b === void 0 ? void 0 : _b.toString());
            expect(storedFee.details.makerTokenBaseUnitPriceUsd).toEqual(undefined);
            expect(storedFee.breakdown.gas.amount).toEqual((_c = fee.breakdown.gas) === null || _c === void 0 ? void 0 : _c.amount.toString());
            expect(storedFee.breakdown.gas.details.gasPrice).toEqual((_d = fee.breakdown.gas) === null || _d === void 0 ? void 0 : _d.details.gasPrice.toString());
            expect(storedFee.breakdown.gas.details.estimatedGas).toEqual((_e = fee.breakdown.gas) === null || _e === void 0 ? void 0 : _e.details.estimatedGas.toString());
            expect(storedFee.breakdown.zeroEx.amount).toEqual((_f = fee.breakdown.zeroEx) === null || _f === void 0 ? void 0 : _f.amount.toString());
            expect(storedFee.breakdown.zeroEx.details.kind).toEqual((_g = fee.breakdown.zeroEx) === null || _g === void 0 ? void 0 : _g.details.kind);
            expect(storedFee.breakdown.zeroEx.details.priceImprovement).toEqual('4570');
            expect(storedFee.breakdown.zeroEx.details.rakeRatio).toEqual(0.35);
            expect(storedFee.conversionRates.nativeTokenBaseUnitPriceUsd).toEqual((_h = fee.conversionRates.nativeTokenBaseUnitPriceUsd) === null || _h === void 0 ? void 0 : _h.toString());
            expect(storedFee.conversionRates.feeTokenBaseUnitPriceUsd).toEqual((_j = fee.conversionRates.feeTokenBaseUnitPriceUsd) === null || _j === void 0 ? void 0 : _j.toString());
            expect(storedFee.conversionRates.takerTokenBaseUnitPriceUsd).toEqual((_k = fee.conversionRates.takerTokenBaseUnitPriceUsd) === null || _k === void 0 ? void 0 : _k.toString());
            expect(storedFee.conversionRates.makerTokenBaseUnitPriceUsd).toEqual(undefined);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,