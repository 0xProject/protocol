68d71ca40c867aa79c7fc2ff54401280
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqtHandlers = void 0;
const types_1 = require("@0x/types");
const utils_1 = require("@0x/utils");
const HttpStatus = require("http-status-codes");
const prom_client_1 = require("prom-client");
const logger_1 = require("../logger");
const RFQT_V1_PRICE_REQUEST_SUCCEEDED = new prom_client_1.Counter({
    name: 'rfqt_v1_price_request_succeeded_total',
    help: 'Request made to fetch rfqt v1 price succeeded',
});
const RFQT_V1_PRICE_REQUEST_FAILED = new prom_client_1.Counter({
    name: 'rfqt_v1_price_request_failed_total',
    help: 'Request made to fetch rfqt v1 price failed',
});
const RFQT_V1_QUOTE_REQUEST_SUCCEEDED = new prom_client_1.Counter({
    name: 'rfqt_v1_quote_request_succeeded_total',
    help: 'Request to fetch rfqt v1 quote succeeded',
});
const RFQT_V1_QUOTE_REQUEST_FAILED = new prom_client_1.Counter({
    name: 'rfqt_v1_quote_request_failed_total',
    help: 'Request to fetch rfqt v1 quote failed',
});
const RFQT_V2_PRICE_REQUEST_SUCCEEDED = new prom_client_1.Counter({
    name: 'rfqt_v2_price_request_succeeded_total',
    help: 'Request made to fetch rfqt v2 price succeeded',
});
const RFQT_V2_PRICE_REQUEST_FAILED = new prom_client_1.Counter({
    name: 'rfqt_v2_price_request_failed_total',
    help: 'Request made to fetch rfqt v2 price failed',
});
const RFQT_V2_QUOTE_REQUEST_SUCCEEDED = new prom_client_1.Counter({
    name: 'rfqt_v2_quote_request_succeeded_total',
    help: 'Request to fetch rfqt v2 quote succeeded',
});
const RFQT_V2_QUOTE_REQUEST_FAILED = new prom_client_1.Counter({
    name: 'rfqt_v2_quote_request_failed_total',
    help: 'Request to fetch rfqt v2 quote failed',
});
/**
 * Handles parsing the request from RFQt routes, meters calls with prometheus counters,
 * calls the appropriate service method and returns the result.
 *
 * Error boundary for http calls; all errors should be caught and returned to the
 * caller as part of the response.
 */
class RfqtHandlers {
    constructor(_rfqtServices, _configManager) {
        this._rfqtServices = _rfqtServices;
        this._configManager = _configManager;
    }
    /**
     * Gets prices ("indicative quotes") for the given asset pair from market makers
     * operating on the `RfqOrder` RFQt platform
     */
    async getV1PricesAsync(req, 
    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    res) {
        let parsedParameters;
        let service;
        try {
            parsedParameters = this._parseV1RequestParameters(req);
            service = this._getServiceForChain(parsedParameters.chainId);
        }
        catch (error) {
            RFQT_V1_PRICE_REQUEST_FAILED.inc();
            logger_1.logger.error({ error: error.message }, 'Rfqt V1 price request failed');
            res.status(HttpStatus.BAD_REQUEST).json({ error: error.message });
            return;
        }
        try {
            const prices = await service.getV1PricesAsync(parsedParameters);
            RFQT_V1_PRICE_REQUEST_SUCCEEDED.inc();
            logger_1.logger.info('Rfqt V1 price request succeeded');
            res.status(HttpStatus.OK).json({
                prices,
            });
        }
        catch (error) {
            RFQT_V1_PRICE_REQUEST_FAILED.inc();
            logger_1.logger.error({ error: error.message }, 'Rfqt V1 price request failed');
            res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({ error: error.message });
        }
    }
    /**
     * Gets prices ("firm quotes") for the given asset pair from market makers
     * operating on the `RfqOrder` RFQt platform
     */
    async getV1QuotesAsync(req, 
    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    res) {
        let parsedParameters;
        let service;
        let txOrigin;
        try {
            parsedParameters = this._parseV1RequestParameters(req);
            if (parsedParameters.txOrigin === undefined) {
                throw new Error('Received request with missing parameter txOrigin');
            }
            txOrigin = parsedParameters.txOrigin;
            service = this._getServiceForChain(parsedParameters.chainId);
        }
        catch (error) {
            RFQT_V1_QUOTE_REQUEST_FAILED.inc();
            logger_1.logger.error({ error }, 'Rfqt V1 quote request failed');
            res.status(HttpStatus.BAD_REQUEST).json({ error });
            return;
        }
        try {
            const quotes = await service.getV1QuotesAsync({
                ...parsedParameters,
                txOrigin,
            });
            RFQT_V1_QUOTE_REQUEST_SUCCEEDED.inc();
            logger_1.logger.info('Rfqt V1 quote request succeeded');
            res.status(HttpStatus.OK).json({
                quotes,
            });
        }
        catch (error) {
            RFQT_V1_QUOTE_REQUEST_FAILED.inc();
            logger_1.logger.error({ error }, 'Rfqt V1 quote request failed');
            res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({ error: error.message });
        }
    }
    /**
     * Gets prices ("indicative quotes") for the given asset pair from market makers
     * operating on the `OtcOrder` RFQt platform
     */
    async getV2PricesAsync(req, 
    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    res) {
        let quoteContext;
        let service;
        try {
            const chainId = this._extractChainId(req);
            service = this._getServiceForChain(chainId);
            quoteContext = await this._extractQuoteContextAsync(req, chainId, false, service);
        }
        catch (error) {
            RFQT_V2_PRICE_REQUEST_FAILED.inc();
            logger_1.logger.error({ error: error.message }, 'Rfqt V2 price request failed');
            res.status(HttpStatus.BAD_REQUEST).json({ error: error.message });
            return;
        }
        try {
            const prices = await service.getV2PricesAsync(quoteContext);
            RFQT_V2_PRICE_REQUEST_SUCCEEDED.inc();
            logger_1.logger.info('Rfqt V2 price request succeeded');
            res.status(HttpStatus.OK).json({
                prices,
            });
        }
        catch (error) {
            RFQT_V2_PRICE_REQUEST_FAILED.inc();
            logger_1.logger.error({ error: error.message }, 'Rfqt V2 price request failed');
            res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({ error: error.message });
        }
    }
    /**
     * Gets quotes ("firm quotes") for the given asset pair from market makers
     * operating on the `OtcOrder` RFQt platform
     */
    async getV2QuotesAsync(req, 
    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    res) {
        let quoteContext;
        let service;
        try {
            const chainId = this._extractChainId(req);
            service = this._getServiceForChain(chainId);
            quoteContext = (await this._extractQuoteContextAsync(req, chainId, true, service));
        }
        catch (error) {
            RFQT_V2_QUOTE_REQUEST_FAILED.inc();
            logger_1.logger.error({ error }, 'Rfqt V2 quote request failed');
            res.status(HttpStatus.BAD_REQUEST).json({ error });
            return;
        }
        try {
            const quotes = await service.getV2QuotesAsync(quoteContext);
            RFQT_V2_QUOTE_REQUEST_SUCCEEDED.inc();
            logger_1.logger.info('Rfqt V2 quote request succeeded');
            res.status(HttpStatus.OK).json({
                quotes,
            });
        }
        catch (error) {
            RFQT_V2_QUOTE_REQUEST_FAILED.inc();
            logger_1.logger.error({ error }, 'Rfqt V2 quote request failed');
            res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({ error: error.message });
        }
    }
    /**
     * Parses and runtime-checks request parameters. After running the method, the parameters
     * should match their TypeScript types.
     */
    _parseV1RequestParameters(request) {
        const { body } = request;
        // Doing this before destructuring the body, otherwise the error
        // thrown will be something like:
        // 'Cannot destructure property 'altRfqAssetOfferings' of 'request.body' as it is undefined.'
        if (!body.altRfqAssetOfferings ||
            !body.assetFillAmount ||
            !body.makerToken ||
            !body.marketOperation ||
            !body.takerToken ||
            !body.takerAddress ||
            typeof body.intentOnFilling !== 'boolean' ||
            !body.integratorId) {
            throw new Error('Received request with missing parameters');
        }
        const { assetFillAmount, comparisonPrice, marketOperation, integratorId } = request.body;
        const parsedChainId = this._extractChainId(request);
        if (Number.isNaN(parsedChainId)) {
            throw new Error('Chain ID is invalid');
        }
        if (marketOperation !== types_1.MarketOperation.Buy.toString() &&
            marketOperation !== types_1.MarketOperation.Sell.toString()) {
            throw new Error('Received request with invalid market operation');
        }
        let integrator;
        try {
            integrator = this._configManager.getIntegratorByIdOrThrow(integratorId);
        }
        catch (error) {
            throw new Error('No integrator found for integrator ID');
        }
        return {
            ...request.body,
            assetFillAmount: new utils_1.BigNumber(assetFillAmount),
            chainId: parsedChainId,
            comparisonPrice: comparisonPrice ? new utils_1.BigNumber(comparisonPrice) : undefined,
            integrator,
        };
    }
    /**
     * Extract chainId from request parameters.
     */
    _extractChainId(request) {
        const chainIdFromHeader = request.header('0x-chain-id');
        if (chainIdFromHeader === undefined) {
            throw new Error('Chain ID is not provided');
        }
        else {
            const parsedChainId = parseInt(chainIdFromHeader, 10);
            if (Number.isNaN(parsedChainId)) {
                throw new Error('Chain ID is invalid');
            }
            return parsedChainId;
        }
    }
    /**
     * Extract quote context from request parameters. After running the method, the parameters
     * should match their TypeScript types.
     */
    async _extractQuoteContextAsync(request, chainId, isFirm, service) {
        const { body } = request;
        // Doing this before destructuring the body, otherwise the error
        // thrown will be something like:
        // 'Cannot destructure property 'assetFillAmount' of 'request.body' as it is undefined.'
        if (!body.assetFillAmount ||
            !body.makerToken ||
            !body.marketOperation ||
            !body.takerToken ||
            !body.takerAddress ||
            // TODO: add body.trader to these checks once we've rolled out completely
            typeof body.intentOnFilling !== 'boolean' ||
            !body.integratorId) {
            throw new Error('Received request with missing parameters');
        }
        const { takerToken, makerToken, trader, gasless, takerAddress, txOrigin, assetFillAmount: assetFillAmountStr, marketOperation, integratorId, } = request.body;
        if (marketOperation !== types_1.MarketOperation.Buy.toString() &&
            marketOperation !== types_1.MarketOperation.Sell.toString()) {
            throw new Error('Received request with invalid market operation');
        }
        let integrator;
        try {
            integrator = this._configManager.getIntegratorByIdOrThrow(integratorId);
        }
        catch (error) {
            throw new Error('No integrator found for integrator ID');
        }
        if (isFirm && txOrigin === undefined) {
            throw new Error('Received request with missing parameter txOrigin');
        }
        const isSelling = marketOperation === types_1.MarketOperation.Sell.toString();
        const assetFillAmount = new utils_1.BigNumber(assetFillAmountStr);
        let takerAmount, makerAmount;
        if (isSelling) {
            takerAmount = assetFillAmount;
        }
        else {
            makerAmount = assetFillAmount;
        }
        const takerTokenDecimals = await service.getTokenDecimalsAsync(takerToken);
        const makerTokenDecimals = await service.getTokenDecimalsAsync(makerToken);
        return {
            workflow: gasless ? 'gasless-rfqt' : 'rfqt',
            chainId,
            isFirm,
            takerToken,
            makerToken,
            originalMakerToken: makerToken,
            trader,
            takerAddress,
            txOrigin,
            takerAmount,
            makerAmount,
            takerTokenDecimals,
            makerTokenDecimals,
            integrator,
            isUnwrap: false,
            isSelling,
            assetFillAmount,
            feeModelVersion: service.feeModelVersion,
        };
    }
    /**
     * Gets the appropriate `RfqtService` instance from the
     * Chain ID -> Rfqt Service Map. Throws if no service is found
     * for `chainId`.
     */
    _getServiceForChain(chainId) {
        const service = this._rfqtServices.get(chainId);
        if (!service) {
            throw new Error('No configuration exists for chain');
        }
        return service;
    }
}
exports.RfqtHandlers = RfqtHandlers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,