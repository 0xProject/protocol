{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/services/rfq_maker_balance_cache_service_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/services/rfq_maker_balance_cache_service_test.ts"],"sourcesContent":["import { ChainId } from '@0x/contract-addresses';\nimport { BigNumber } from '@0x/utils';\nimport { expect } from 'chai';\nimport { anything, instance, mock, verify, when } from 'ts-mockito';\n\nimport { RfqMakerBalanceCacheService } from '../../src/services/rfq_maker_balance_cache_service';\nimport { ERC20Owner } from '../../src/core/types';\nimport { CacheClient } from '../../src/utils/cache_client';\nimport { RfqBalanceCheckUtils } from '../../src/utils/rfq_blockchain_utils';\n\ndescribe('RfqMakerBalanceCacheService', () => {\n    const chainId = ChainId.Ganache;\n\n    const makerA = '0x1111111111111111111111111111111111111111';\n    const makerB = '0x2222222222222222222222222222222222222222';\n    const makerC = '0x3333333333333333333333333333333333333333';\n\n    const tokenA = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';\n    const tokenB = '0x6B175474E89094C44Da98b954EedeAC495271d0F';\n    const tokenC = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\n\n    describe('getERC20OwnerBalancesAsync', () => {\n        it('should get maker balances from the cache', async () => {\n            const addresses = [\n                { owner: makerA, token: tokenA },\n                { owner: makerB, token: tokenB },\n                { owner: makerC, token: tokenC },\n            ];\n\n            const cacheClientMock = mock(CacheClient);\n            when(cacheClientMock.getERC20OwnerBalancesAsync(chainId, addresses)).thenResolve([\n                new BigNumber(1),\n                new BigNumber(2),\n                new BigNumber(3),\n            ]);\n            const balanceCheckUtilsMock = mock(RfqBalanceCheckUtils);\n            const makerBalanceCacheService = new RfqMakerBalanceCacheService(\n                instance(cacheClientMock),\n                instance(balanceCheckUtilsMock),\n            );\n\n            expect(await makerBalanceCacheService.getERC20OwnerBalancesAsync(chainId, addresses)).to.deep.eq([\n                new BigNumber(1),\n                new BigNumber(2),\n                new BigNumber(3),\n            ]);\n            verify(balanceCheckUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).never();\n        });\n\n        it('should fetch balances through balance check for addresses not found in the cache', async () => {\n            const addresses = [\n                { owner: makerA, token: tokenA },\n                { owner: makerB, token: tokenB },\n                { owner: makerC, token: tokenC },\n            ];\n\n            const cacheClientMock = mock(CacheClient);\n            when(cacheClientMock.getERC20OwnerBalancesAsync(chainId, addresses)).thenResolve([\n                null,\n                new BigNumber(2),\n                null,\n            ]);\n            when(cacheClientMock.addERC20OwnerAsync(chainId, anything())).thenResolve();\n            const balanceCheckUtilsMock = mock(RfqBalanceCheckUtils);\n            when(balanceCheckUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\n                new BigNumber(1),\n                new BigNumber(3),\n            ]);\n            const makerBalanceCacheService = new RfqMakerBalanceCacheService(\n                instance(cacheClientMock),\n                instance(balanceCheckUtilsMock),\n            );\n\n            expect(await makerBalanceCacheService.getERC20OwnerBalancesAsync(chainId, addresses)).to.deep.eq([\n                new BigNumber(1),\n                new BigNumber(2),\n                new BigNumber(3),\n            ]);\n            verify(balanceCheckUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).once();\n        });\n\n        it('should get zero addresses if balance check returns malformed results', async () => {\n            const addresses = [\n                { owner: makerA, token: tokenA },\n                { owner: makerB, token: tokenB },\n                { owner: makerC, token: tokenC },\n            ];\n\n            const cacheClientMock = mock(CacheClient);\n            when(cacheClientMock.getERC20OwnerBalancesAsync(chainId, addresses)).thenResolve([\n                null,\n                new BigNumber(2),\n                null,\n            ]);\n            when(cacheClientMock.addERC20OwnerAsync(chainId, anything())).thenResolve();\n            const balanceCheckUtilsMock = mock(RfqBalanceCheckUtils);\n            when(balanceCheckUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([]);\n            const makerBalanceCacheService = new RfqMakerBalanceCacheService(\n                instance(cacheClientMock),\n                instance(balanceCheckUtilsMock),\n            );\n\n            expect(await makerBalanceCacheService.getERC20OwnerBalancesAsync(chainId, addresses)).to.deep.eq([\n                new BigNumber(0),\n                new BigNumber(2),\n                new BigNumber(0),\n            ]);\n            verify(balanceCheckUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).once();\n        });\n\n        it('should throw an error if reading entries from the cache fails', async () => {\n            const addresses = [\n                { owner: makerA, token: tokenA },\n                { owner: makerB, token: tokenB },\n                { owner: makerC, token: '0xbadaddress' },\n            ];\n\n            const cacheClientMock = mock(CacheClient);\n            when(cacheClientMock.getERC20OwnerBalancesAsync(anything(), addresses)).thenReject(\n                new Error('Failed to read entries from maker balance cache'),\n            );\n            const balanceCheckUtilsMock = mock(RfqBalanceCheckUtils);\n            const makerBalanceCacheService = new RfqMakerBalanceCacheService(\n                instance(cacheClientMock),\n                instance(balanceCheckUtilsMock),\n            );\n\n            try {\n                await makerBalanceCacheService.getERC20OwnerBalancesAsync(chainId, addresses);\n                expect.fail();\n            } catch (error) {\n                expect(error.message).to.contain('maker balance cache');\n                verify(balanceCheckUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).never();\n            }\n        });\n\n        it('should get empty array when addresses are empty', async () => {\n            const emptyAddresses: ERC20Owner[] = [];\n\n            const cacheClientMock = mock(CacheClient);\n            when(cacheClientMock.getERC20OwnerBalancesAsync(chainId, emptyAddresses)).thenResolve([]);\n            const balanceCheckUtilsMock = mock(RfqBalanceCheckUtils);\n            const makerBalanceCacheService = new RfqMakerBalanceCacheService(\n                instance(cacheClientMock),\n                instance(balanceCheckUtilsMock),\n            );\n\n            expect(await makerBalanceCacheService.getERC20OwnerBalancesAsync(chainId, emptyAddresses)).to.deep.eq([]);\n            verify(balanceCheckUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).never();\n        });\n    });\n\n    describe('updateERC20OwnerBalancesAsync', () => {\n        it('should update the cache with given maker balances', async () => {\n            const addresses = [\n                { owner: makerA, token: tokenA },\n                { owner: makerB, token: tokenB },\n                { owner: makerC, token: tokenC },\n            ];\n            const cacheClientMock = mock(CacheClient);\n            when(cacheClientMock.getERC20OwnersAsync(chainId)).thenResolve(addresses);\n            when(cacheClientMock.setERC20OwnerBalancesAsync(chainId, addresses, anything())).thenResolve();\n            const balanceCheckUtilsMock = mock(RfqBalanceCheckUtils);\n            when(balanceCheckUtilsMock.getMinOfBalancesAndAllowancesAsync(addresses)).thenResolve([\n                new BigNumber(1),\n                new BigNumber(2),\n                new BigNumber(3),\n            ]);\n            const makerBalanceCacheService = new RfqMakerBalanceCacheService(\n                instance(cacheClientMock),\n                instance(balanceCheckUtilsMock),\n            );\n\n            try {\n                await makerBalanceCacheService.updateERC20OwnerBalancesAsync(chainId);\n                verify(balanceCheckUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).once();\n            } catch (error) {\n                expect.fail();\n            }\n        });\n    });\n\n    it('should throw an error if writing entries to the cache fails', async () => {\n        const addresses = [\n            { owner: makerA, token: tokenA },\n            { owner: makerB, token: tokenB },\n            { owner: makerC, token: tokenC },\n        ];\n        const cacheClientMock = mock(CacheClient);\n        when(cacheClientMock.getERC20OwnersAsync(chainId)).thenResolve(addresses);\n        when(cacheClientMock.setERC20OwnerBalancesAsync(chainId, addresses, anything())).thenReject(\n            new Error('Failed to update entries for maker balance cache'),\n        );\n        const balanceCheckUtilsMock = mock(RfqBalanceCheckUtils);\n        when(balanceCheckUtilsMock.getMinOfBalancesAndAllowancesAsync(addresses)).thenResolve([\n            new BigNumber(1),\n            new BigNumber(2),\n            new BigNumber(3),\n        ]);\n        const makerBalanceCacheService = new RfqMakerBalanceCacheService(\n            instance(cacheClientMock),\n            instance(balanceCheckUtilsMock),\n        );\n\n        try {\n            await makerBalanceCacheService.updateERC20OwnerBalancesAsync(chainId);\n            expect.fail();\n        } catch (error) {\n            expect(error.message).to.contain('maker balance cache');\n            verify(balanceCheckUtilsMock.getMinOfBalancesAndAllowancesAsync(anything())).once();\n        }\n    });\n\n    describe('evictZeroBalancesAsync', () => {\n        it('should evict entries from the cache', async () => {\n            const cacheClientMock = mock(CacheClient);\n            when(cacheClientMock.evictZeroBalancesAsync(chainId)).thenResolve(1);\n            const balanceCheckUtilsMock = mock(RfqBalanceCheckUtils);\n            const makerBalanceCacheService = new RfqMakerBalanceCacheService(\n                instance(cacheClientMock),\n                instance(balanceCheckUtilsMock),\n            );\n\n            try {\n                const numEvicted = await makerBalanceCacheService.evictZeroBalancesAsync(chainId);\n                expect(numEvicted).to.eq(1);\n                verify(cacheClientMock.evictZeroBalancesAsync(chainId)).once();\n            } catch (error) {\n                expect.fail();\n            }\n        });\n    });\n});\n"],"version":3}