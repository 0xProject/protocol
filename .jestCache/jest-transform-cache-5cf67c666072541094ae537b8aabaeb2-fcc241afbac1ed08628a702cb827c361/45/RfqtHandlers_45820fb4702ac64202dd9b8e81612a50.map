{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/RfqtHandlers.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/RfqtHandlers.ts"],"sourcesContent":["// tslint:disable:max-file-line-count\r\nimport { AltRfqMakerAssetOfferings, SignedNativeOrder } from '@0x/asset-swapper/lib/src/types';\r\nimport { MarketOperation } from '@0x/types';\r\nimport { BigNumber } from '@0x/utils';\r\nimport * as express from 'express';\r\nimport * as HttpStatus from 'http-status-codes';\r\nimport { Counter } from 'prom-client';\r\n\r\nimport { Integrator } from '../config';\r\nimport { logger } from '../logger';\r\nimport { V4RFQIndicativeQuoteMM } from '../quoteRequestor/QuoteRequestor';\r\nimport { RfqtService } from '../services/RfqtService';\r\nimport { FirmQuoteContext, QuoteContext } from '../services/types';\r\nimport { RfqtV2Price, RfqtV2Quote, RfqtV2Request } from '../core/types';\r\nimport { ConfigManager } from '../utils/config_manager';\r\nimport { RfqtServices } from '../utils/rfqtServiceBuilder';\r\n\r\nconst RFQT_V1_PRICE_REQUEST_SUCCEEDED = new Counter({\r\n    name: 'rfqt_v1_price_request_succeeded_total',\r\n    help: 'Request made to fetch rfqt v1 price succeeded',\r\n});\r\n\r\nconst RFQT_V1_PRICE_REQUEST_FAILED = new Counter({\r\n    name: 'rfqt_v1_price_request_failed_total',\r\n    help: 'Request made to fetch rfqt v1 price failed',\r\n});\r\n\r\nconst RFQT_V1_QUOTE_REQUEST_SUCCEEDED = new Counter({\r\n    name: 'rfqt_v1_quote_request_succeeded_total',\r\n    help: 'Request to fetch rfqt v1 quote succeeded',\r\n});\r\n\r\nconst RFQT_V1_QUOTE_REQUEST_FAILED = new Counter({\r\n    name: 'rfqt_v1_quote_request_failed_total',\r\n    help: 'Request to fetch rfqt v1 quote failed',\r\n});\r\n\r\nconst RFQT_V2_PRICE_REQUEST_SUCCEEDED = new Counter({\r\n    name: 'rfqt_v2_price_request_succeeded_total',\r\n    help: 'Request made to fetch rfqt v2 price succeeded',\r\n});\r\n\r\nconst RFQT_V2_PRICE_REQUEST_FAILED = new Counter({\r\n    name: 'rfqt_v2_price_request_failed_total',\r\n    help: 'Request made to fetch rfqt v2 price failed',\r\n});\r\n\r\nconst RFQT_V2_QUOTE_REQUEST_SUCCEEDED = new Counter({\r\n    name: 'rfqt_v2_quote_request_succeeded_total',\r\n    help: 'Request to fetch rfqt v2 quote succeeded',\r\n});\r\n\r\nconst RFQT_V2_QUOTE_REQUEST_FAILED = new Counter({\r\n    name: 'rfqt_v2_quote_request_failed_total',\r\n    help: 'Request to fetch rfqt v2 quote failed',\r\n});\r\n\r\n/**\r\n * Typed parameters for both the V1 prices endpoint\r\n * and the V1 quotes endpoint\r\n */\r\ninterface V1RequestParameters {\r\n    altRfqAssetOfferings: AltRfqMakerAssetOfferings;\r\n    assetFillAmount: BigNumber;\r\n    chainId: number;\r\n    comparisonPrice: BigNumber | undefined;\r\n    makerToken: string;\r\n    marketOperation: MarketOperation;\r\n    takerAddress: string; // expect this to be NULL_ADDRESS\r\n    takerToken: string;\r\n    txOrigin?: string; // expect this to be the taker address, can be missing for /price but not /quote\r\n    intentOnFilling: boolean;\r\n    integratorId: string;\r\n}\r\n\r\ninterface TypedRequest<TBody> extends express.Request {\r\n    body: TBody;\r\n}\r\n\r\n/**\r\n * Handles parsing the request from RFQt routes, meters calls with prometheus counters,\r\n * calls the appropriate service method and returns the result.\r\n *\r\n * Error boundary for http calls; all errors should be caught and returned to the\r\n * caller as part of the response.\r\n */\r\nexport class RfqtHandlers {\r\n    constructor(private readonly _rfqtServices: RfqtServices, private readonly _configManager: ConfigManager) {}\r\n\r\n    /**\r\n     * Gets prices (\"indicative quotes\") for the given asset pair from market makers\r\n     * operating on the `RfqOrder` RFQt platform\r\n     */\r\n    public async getV1PricesAsync(\r\n        req: TypedRequest<V1RequestParameters>,\r\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        res: express.Response<{ prices: V4RFQIndicativeQuoteMM[] } | { error: any }>,\r\n    ): Promise<void> {\r\n        let parsedParameters: Omit<V1RequestParameters, 'integratorId'> & { integrator: Integrator };\r\n        let service: RfqtService;\r\n        try {\r\n            parsedParameters = this._parseV1RequestParameters(req);\r\n            service = this._getServiceForChain(parsedParameters.chainId);\r\n        } catch (error) {\r\n            RFQT_V1_PRICE_REQUEST_FAILED.inc();\r\n            logger.error({ error: error.message }, 'Rfqt V1 price request failed');\r\n            res.status(HttpStatus.BAD_REQUEST).json({ error: error.message });\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const prices = await service.getV1PricesAsync(parsedParameters);\r\n            RFQT_V1_PRICE_REQUEST_SUCCEEDED.inc();\r\n            logger.info('Rfqt V1 price request succeeded');\r\n            res.status(HttpStatus.OK).json({\r\n                prices,\r\n            });\r\n        } catch (error) {\r\n            RFQT_V1_PRICE_REQUEST_FAILED.inc();\r\n            logger.error({ error: error.message }, 'Rfqt V1 price request failed');\r\n            res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({ error: error.message });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets prices (\"firm quotes\") for the given asset pair from market makers\r\n     * operating on the `RfqOrder` RFQt platform\r\n     */\r\n    public async getV1QuotesAsync(\r\n        req: TypedRequest<V1RequestParameters>,\r\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        res: express.Response<{ quotes: SignedNativeOrder[] } | { error: any }>,\r\n    ): Promise<void> {\r\n        let parsedParameters: Omit<V1RequestParameters, 'integratorId'> & { integrator: Integrator };\r\n        let service: RfqtService;\r\n        let txOrigin: string;\r\n        try {\r\n            parsedParameters = this._parseV1RequestParameters(req);\r\n            if (parsedParameters.txOrigin === undefined) {\r\n                throw new Error('Received request with missing parameter txOrigin');\r\n            }\r\n            txOrigin = parsedParameters.txOrigin;\r\n            service = this._getServiceForChain(parsedParameters.chainId);\r\n        } catch (error) {\r\n            RFQT_V1_QUOTE_REQUEST_FAILED.inc();\r\n            logger.error({ error }, 'Rfqt V1 quote request failed');\r\n            res.status(HttpStatus.BAD_REQUEST).json({ error });\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const quotes = await service.getV1QuotesAsync({\r\n                ...parsedParameters,\r\n                txOrigin,\r\n            });\r\n            RFQT_V1_QUOTE_REQUEST_SUCCEEDED.inc();\r\n            logger.info('Rfqt V1 quote request succeeded');\r\n            res.status(HttpStatus.OK).json({\r\n                quotes,\r\n            });\r\n        } catch (error) {\r\n            RFQT_V1_QUOTE_REQUEST_FAILED.inc();\r\n            logger.error({ error }, 'Rfqt V1 quote request failed');\r\n            res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({ error: error.message });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets prices (\"indicative quotes\") for the given asset pair from market makers\r\n     * operating on the `OtcOrder` RFQt platform\r\n     */\r\n    public async getV2PricesAsync(\r\n        req: TypedRequest<RfqtV2Request>,\r\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        res: express.Response<{ prices: RfqtV2Price[] } | { error: any }>,\r\n    ): Promise<void> {\r\n        let quoteContext: QuoteContext;\r\n        let service: RfqtService;\r\n        try {\r\n            const chainId = this._extractChainId(req);\r\n            service = this._getServiceForChain(chainId);\r\n            quoteContext = await this._extractQuoteContextAsync(req, chainId, false, service);\r\n        } catch (error) {\r\n            RFQT_V2_PRICE_REQUEST_FAILED.inc();\r\n            logger.error({ error: error.message }, 'Rfqt V2 price request failed');\r\n            res.status(HttpStatus.BAD_REQUEST).json({ error: error.message });\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const prices = await service.getV2PricesAsync(quoteContext);\r\n            RFQT_V2_PRICE_REQUEST_SUCCEEDED.inc();\r\n            logger.info('Rfqt V2 price request succeeded');\r\n            res.status(HttpStatus.OK).json({\r\n                prices,\r\n            });\r\n        } catch (error) {\r\n            RFQT_V2_PRICE_REQUEST_FAILED.inc();\r\n            logger.error({ error: error.message }, 'Rfqt V2 price request failed');\r\n            res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({ error: error.message });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets quotes (\"firm quotes\") for the given asset pair from market makers\r\n     * operating on the `OtcOrder` RFQt platform\r\n     */\r\n    public async getV2QuotesAsync(\r\n        req: TypedRequest<RfqtV2Request>,\r\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        res: express.Response<{ quotes: RfqtV2Quote[] } | { error: any }>,\r\n    ): Promise<void> {\r\n        let quoteContext: FirmQuoteContext;\r\n        let service: RfqtService;\r\n        try {\r\n            const chainId = this._extractChainId(req);\r\n            service = this._getServiceForChain(chainId);\r\n            quoteContext = (await this._extractQuoteContextAsync(req, chainId, true, service)) as FirmQuoteContext;\r\n        } catch (error) {\r\n            RFQT_V2_QUOTE_REQUEST_FAILED.inc();\r\n            logger.error({ error }, 'Rfqt V2 quote request failed');\r\n            res.status(HttpStatus.BAD_REQUEST).json({ error });\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const quotes = await service.getV2QuotesAsync(quoteContext);\r\n            RFQT_V2_QUOTE_REQUEST_SUCCEEDED.inc();\r\n            logger.info('Rfqt V2 quote request succeeded');\r\n            res.status(HttpStatus.OK).json({\r\n                quotes,\r\n            });\r\n        } catch (error) {\r\n            RFQT_V2_QUOTE_REQUEST_FAILED.inc();\r\n            logger.error({ error }, 'Rfqt V2 quote request failed');\r\n            res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({ error: error.message });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses and runtime-checks request parameters. After running the method, the parameters\r\n     * should match their TypeScript types.\r\n     */\r\n    private _parseV1RequestParameters<TRequest extends TypedRequest<V1RequestParameters>>(\r\n        request: TRequest,\r\n    ): V1RequestParameters & { integrator: Integrator } {\r\n        const { body } = request;\r\n\r\n        // Doing this before destructuring the body, otherwise the error\r\n        // thrown will be something like:\r\n        // 'Cannot destructure property 'altRfqAssetOfferings' of 'request.body' as it is undefined.'\r\n        if (\r\n            !body.altRfqAssetOfferings ||\r\n            !body.assetFillAmount ||\r\n            !body.makerToken ||\r\n            !body.marketOperation ||\r\n            !body.takerToken ||\r\n            !body.takerAddress ||\r\n            typeof body.intentOnFilling !== 'boolean' ||\r\n            !body.integratorId\r\n        ) {\r\n            throw new Error('Received request with missing parameters');\r\n        }\r\n\r\n        const { assetFillAmount, comparisonPrice, marketOperation, integratorId } = request.body;\r\n\r\n        const parsedChainId = this._extractChainId(request);\r\n        if (Number.isNaN(parsedChainId)) {\r\n            throw new Error('Chain ID is invalid');\r\n        }\r\n\r\n        if (\r\n            (marketOperation as string) !== MarketOperation.Buy.toString() &&\r\n            (marketOperation as string) !== MarketOperation.Sell.toString()\r\n        ) {\r\n            throw new Error('Received request with invalid market operation');\r\n        }\r\n\r\n        let integrator: Integrator;\r\n        try {\r\n            integrator = this._configManager.getIntegratorByIdOrThrow(integratorId);\r\n        } catch (error) {\r\n            throw new Error('No integrator found for integrator ID');\r\n        }\r\n\r\n        return {\r\n            ...request.body,\r\n            assetFillAmount: new BigNumber(assetFillAmount),\r\n            chainId: parsedChainId,\r\n            comparisonPrice: comparisonPrice ? new BigNumber(comparisonPrice) : undefined,\r\n            integrator,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Extract chainId from request parameters.\r\n     */\r\n    private _extractChainId<TRequest extends TypedRequest<RfqtV2Request>>(request: TRequest): number {\r\n        const chainIdFromHeader = request.header('0x-chain-id');\r\n        if (chainIdFromHeader === undefined) {\r\n            throw new Error('Chain ID is not provided');\r\n        } else {\r\n            const parsedChainId = parseInt(chainIdFromHeader, 10);\r\n            if (Number.isNaN(parsedChainId)) {\r\n                throw new Error('Chain ID is invalid');\r\n            }\r\n            return parsedChainId;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extract quote context from request parameters. After running the method, the parameters\r\n     * should match their TypeScript types.\r\n     */\r\n    private async _extractQuoteContextAsync<TRequest extends TypedRequest<RfqtV2Request>>(\r\n        request: TRequest,\r\n        chainId: number,\r\n        isFirm: boolean,\r\n        service: RfqtService,\r\n    ): Promise<QuoteContext> {\r\n        const { body } = request;\r\n\r\n        // Doing this before destructuring the body, otherwise the error\r\n        // thrown will be something like:\r\n        // 'Cannot destructure property 'assetFillAmount' of 'request.body' as it is undefined.'\r\n        if (\r\n            !body.assetFillAmount ||\r\n            !body.makerToken ||\r\n            !body.marketOperation ||\r\n            !body.takerToken ||\r\n            !body.takerAddress ||\r\n            // TODO: add body.trader to these checks once we've rolled out completely\r\n            typeof body.intentOnFilling !== 'boolean' ||\r\n            !body.integratorId\r\n        ) {\r\n            throw new Error('Received request with missing parameters');\r\n        }\r\n\r\n        const {\r\n            takerToken,\r\n            makerToken,\r\n            trader,\r\n            gasless,\r\n            takerAddress,\r\n            txOrigin,\r\n            assetFillAmount: assetFillAmountStr,\r\n            marketOperation,\r\n            integratorId,\r\n        } = request.body;\r\n\r\n        if (\r\n            (marketOperation as string) !== MarketOperation.Buy.toString() &&\r\n            (marketOperation as string) !== MarketOperation.Sell.toString()\r\n        ) {\r\n            throw new Error('Received request with invalid market operation');\r\n        }\r\n\r\n        let integrator: Integrator;\r\n        try {\r\n            integrator = this._configManager.getIntegratorByIdOrThrow(integratorId);\r\n        } catch (error) {\r\n            throw new Error('No integrator found for integrator ID');\r\n        }\r\n\r\n        if (isFirm && txOrigin === undefined) {\r\n            throw new Error('Received request with missing parameter txOrigin');\r\n        }\r\n\r\n        const isSelling = (marketOperation as string) === MarketOperation.Sell.toString();\r\n        const assetFillAmount = new BigNumber(assetFillAmountStr);\r\n        let takerAmount, makerAmount;\r\n        if (isSelling) {\r\n            takerAmount = assetFillAmount;\r\n        } else {\r\n            makerAmount = assetFillAmount;\r\n        }\r\n        const takerTokenDecimals = await service.getTokenDecimalsAsync(takerToken);\r\n        const makerTokenDecimals = await service.getTokenDecimalsAsync(makerToken);\r\n\r\n        return {\r\n            workflow: gasless ? 'gasless-rfqt' : 'rfqt',\r\n            chainId,\r\n            isFirm,\r\n            takerToken,\r\n            makerToken,\r\n            originalMakerToken: makerToken,\r\n            trader,\r\n            takerAddress,\r\n            txOrigin,\r\n            takerAmount,\r\n            makerAmount,\r\n            takerTokenDecimals,\r\n            makerTokenDecimals,\r\n            integrator,\r\n            isUnwrap: false,\r\n            isSelling,\r\n            assetFillAmount,\r\n            feeModelVersion: service.feeModelVersion,\r\n        } as QuoteContext;\r\n    }\r\n\r\n    /**\r\n     * Gets the appropriate `RfqtService` instance from the\r\n     * Chain ID -> Rfqt Service Map. Throws if no service is found\r\n     * for `chainId`.\r\n     */\r\n    private _getServiceForChain(chainId: number): RfqtService {\r\n        const service = this._rfqtServices.get(chainId);\r\n\r\n        if (!service) {\r\n            throw new Error('No configuration exists for chain');\r\n        }\r\n        return service;\r\n    }\r\n}\r\n"],"version":3}