{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/MetaTransactionClient.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/MetaTransactionClient.ts"],"sourcesContent":["import { pino, ValidationError, ValidationErrorCodes, ValidationErrorItem } from '@0x/api-utils';\r\nimport { SwapQuoterError } from '@0x/asset-swapper';\r\nimport { MetaTransaction } from '@0x/protocol-utils';\r\nimport { ExchangeProxyMetaTransaction } from '@0x/types';\r\nimport { BigNumber } from '@0x/utils';\r\nimport { AxiosError, AxiosInstance, AxiosResponse } from 'axios';\r\nimport { BAD_REQUEST } from 'http-status-codes';\r\nimport { Summary } from 'prom-client';\r\nimport { TwirpError } from 'twirpscript';\r\nimport { META_TRANSACTION_SERVICE_RPC_URL } from '../config';\r\nimport { ZERO } from '../core/constants';\r\nimport { APIErrorCodes } from '../core/errors';\r\nimport { rawFeesToFees } from '../core/meta_transaction_fee_utils';\r\nimport { FeeConfigs, Fees, RawFees } from '../core/types/meta_transaction_fees';\r\nimport { GetQuote, GetQuoteResponse } from '../proto-ts/meta_transaction.pb';\r\n\r\nimport { FetchIndicativeQuoteResponse, LiquiditySource, MetaTransactionV2 } from '../services/types';\r\nimport { bigNumberToProto, protoToBigNumber } from './ProtoUtils';\r\nimport { stringsToMetaTransactionFields } from './rfqm_request_utils';\r\n\r\ninterface QuoteParams {\r\n    affiliateAddress?: string;\r\n    chainId: number;\r\n    buyAmount?: BigNumber;\r\n    buyToken: string;\r\n    integratorId: string;\r\n    sellAmount?: BigNumber;\r\n    sellToken: string;\r\n    slippagePercentage?: BigNumber;\r\n    takerAddress: string;\r\n    quoteUniqueId?: string; // ID to use for the quote report `decodedUniqueId`\r\n    feeConfigs?: FeeConfigs;\r\n}\r\n\r\n// Types\r\n//\r\n// NOTE: These types are copied here from 0x API. Once we have\r\n// a solution for a real service architecture, these types should\r\n// become part of the RPC interface published by a future\r\n// MetaTransactionService. Also we will make it MetatransactionService.\r\n\r\ninterface QuoteBase {\r\n    chainId: number;\r\n    price: BigNumber;\r\n    buyAmount: BigNumber;\r\n    sellAmount: BigNumber;\r\n    sources: LiquiditySource[];\r\n    gasPrice: BigNumber;\r\n    estimatedGas: BigNumber;\r\n    sellTokenToEthRate: BigNumber;\r\n    buyTokenToEthRate: BigNumber;\r\n    protocolFee: BigNumber;\r\n    minimumProtocolFee: BigNumber;\r\n    allowanceTarget?: string;\r\n    // Our calculated price impact or null if we were unable to\r\n    // to calculate any price impact\r\n    estimatedPriceImpact: BigNumber | null;\r\n}\r\n\r\nexport interface BasePriceResponse extends QuoteBase {\r\n    sellTokenAddress: string;\r\n    buyTokenAddress: string;\r\n    value: BigNumber;\r\n    gas: BigNumber;\r\n}\r\n\r\ninterface GetMetaTransactionQuoteResponse extends BasePriceResponse {\r\n    metaTransactionHash: string;\r\n    metaTransaction: ExchangeProxyMetaTransaction;\r\n}\r\n\r\n// Raw type of `QuoteBase` as the quote response sent by meta-transaction endpoints is serialized.\r\ninterface RawQuoteBase {\r\n    chainId: number;\r\n    price: string;\r\n    buyAmount: string;\r\n    sellAmount: string;\r\n    sources: {\r\n        name: string;\r\n        proportion: string;\r\n        intermediateToken?: string;\r\n        hops?: string[];\r\n    }[];\r\n    gasPrice: string;\r\n    estimatedGas: string;\r\n    sellTokenToEthRate: string;\r\n    buyTokenToEthRate: string;\r\n    protocolFee: string;\r\n    minimumProtocolFee: string;\r\n    allowanceTarget?: string;\r\n    // Our calculated price impact or null if we were unable to\r\n    // to calculate any price impact\r\n    estimatedPriceImpact: string | null;\r\n}\r\n\r\n// Raw type of `BasePriceResponse` as the quote response sent by meta-transaction endpoints is serialized.\r\ninterface RawBasePriceResponse extends RawQuoteBase {\r\n    sellTokenAddress: string;\r\n    buyTokenAddress: string;\r\n    value: string;\r\n    gas: string;\r\n}\r\n\r\n// Quote response sent by meta-transaction v2 /quote endpoint\r\ninterface GetMetaTransactionV2QuoteResponse extends RawBasePriceResponse {\r\n    metaTransactionHash: string;\r\n    // TODO: This needs to be updated when the smart contract change is finished and the new type is published\r\n    metaTransaction: Record<keyof Omit<ExchangeProxyMetaTransaction, 'domain'>, string> & {\r\n        domain: { chainId: number; verifyingContract: string };\r\n    };\r\n    fees?: RawFees;\r\n}\r\n\r\n/**\r\n * Queries the MetaTransaction v1 service for an AMM quote wrapped in a\r\n * MetaTransaction.\r\n * If no AMM liquidity is available, returns `null`.\r\n *\r\n * If a prometheus 'Summary' is provided to the `requestDurationSummary`\r\n * parameter, the function will call its `observe` method with the request\r\n * duration in ms.\r\n *\r\n * @throws `AxiosError`\r\n */\r\nexport async function getV1QuoteAsync(\r\n    axiosInstance: AxiosInstance,\r\n    url: URL,\r\n    params: QuoteParams,\r\n    meter?: { requestDurationSummary: Summary<'chainId' | 'success'>; chainId: number },\r\n    noLiquidityLogger?: pino.LogFn,\r\n): Promise<{ metaTransaction: MetaTransaction; price: FetchIndicativeQuoteResponse } | null> {\r\n    const stopTimer = meter?.requestDurationSummary.startTimer({ chainId: meter.chainId });\r\n\r\n    let response: AxiosResponse<GetMetaTransactionQuoteResponse>;\r\n    try {\r\n        response = await axiosInstance.get<GetMetaTransactionQuoteResponse>(url.toString(), {\r\n            params,\r\n            // TODO (rhinodavid): Formalize this value once we have a good idea of the\r\n            // actual numbers\r\n            timeout: 10000,\r\n            paramsSerializer: (data: typeof params) => {\r\n                const result = new URLSearchParams({\r\n                    buyToken: data.buyToken,\r\n                    sellToken: data.sellToken,\r\n                    takerAddress: data.takerAddress,\r\n                    integratorId: data.integratorId,\r\n                    chainId: data.chainId.toString(),\r\n                });\r\n                const {\r\n                    affiliateAddress,\r\n                    buyAmount: buyAmountData,\r\n                    sellAmount: sellAmountData,\r\n                    slippagePercentage,\r\n                    quoteUniqueId,\r\n                } = data;\r\n\r\n                affiliateAddress && result.append('affiliateAddress', affiliateAddress);\r\n                buyAmountData && result.append('buyAmount', buyAmountData.toString());\r\n                sellAmountData && result.append('sellAmount', sellAmountData.toString());\r\n                slippagePercentage && result.append('slippagePercentage', slippagePercentage.toString());\r\n                quoteUniqueId && result.append('quoteUniqueId', quoteUniqueId);\r\n\r\n                return result.toString();\r\n            },\r\n        });\r\n    } catch (e) {\r\n        stopTimer && stopTimer({ success: 'false' });\r\n        return handleQuoteError(e, params, noLiquidityLogger);\r\n    }\r\n\r\n    stopTimer && stopTimer({ success: 'true' });\r\n\r\n    const { buyAmount, buyTokenAddress, gas, price, sellAmount, sellTokenAddress } = response.data;\r\n\r\n    // A fun thing here is that the return from the API, @0x/types:ExchangeProxyMetaTransaction\r\n    // does not match @0x/protocol-utils:MetaTransaction. So, we pull the domain information out\r\n    // and put it at the top level of the constructor parameters\r\n    return {\r\n        metaTransaction: new MetaTransaction({\r\n            ...response.data.metaTransaction,\r\n            chainId: response.data.metaTransaction.domain.chainId,\r\n            verifyingContract: response.data.metaTransaction.domain.verifyingContract,\r\n        }),\r\n        price: { buyAmount, buyTokenAddress, gas, price, sellAmount, sellTokenAddress },\r\n    };\r\n}\r\n\r\n/**\r\n * Queries the meta-transaction v2 service for a meta-transaction quote wrapped in a\r\n * meta-transaction.\r\n *\r\n * If no liquidity is available, returns `null`.\r\n *\r\n * If a prometheus 'Summary' is provided to the `requestDurationSummary`\r\n * parameter, the function will call its `observe` method with the request\r\n * duration in ms.\r\n *\r\n * @throws `AxiosError`\r\n */\r\nexport async function getV2QuoteAsync(\r\n    axiosInstance: AxiosInstance,\r\n    url: URL,\r\n    params: QuoteParams,\r\n    meter?: { requestDurationSummary: Summary<'chainId' | 'success'>; chainId: number },\r\n    noLiquidityLogger?: pino.LogFn,\r\n): Promise<{\r\n    metaTransaction: MetaTransactionV2;\r\n    price: FetchIndicativeQuoteResponse;\r\n    sources: LiquiditySource[];\r\n    fees?: Fees;\r\n} | null> {\r\n    const stopTimer = meter?.requestDurationSummary.startTimer({ chainId: meter.chainId });\r\n\r\n    let response: AxiosResponse<GetMetaTransactionV2QuoteResponse>;\r\n    try {\r\n        response = await axiosInstance.post<GetMetaTransactionV2QuoteResponse>(url.toString(), params);\r\n    } catch (e) {\r\n        stopTimer && stopTimer({ success: 'false' });\r\n        return handleQuoteError(e, params, noLiquidityLogger);\r\n    }\r\n\r\n    stopTimer && stopTimer({ success: 'true' });\r\n\r\n    const { buyAmount, buyTokenAddress, gas, price, sellAmount, sellTokenAddress } = response.data;\r\n\r\n    return {\r\n        // TODO: This needs to be updated to the new meta-transaction type when smart contract changes are finished and corresponding types are published in packages\r\n        metaTransaction: new MetaTransactionV2(\r\n            stringsToMetaTransactionFields({\r\n                ...response.data.metaTransaction,\r\n                chainId: response.data.metaTransaction.domain.chainId,\r\n                verifyingContract: response.data.metaTransaction.domain.verifyingContract,\r\n            }),\r\n        ),\r\n        price: {\r\n            buyAmount: new BigNumber(buyAmount),\r\n            buyTokenAddress,\r\n            gas: new BigNumber(gas),\r\n            price: new BigNumber(price),\r\n            sellAmount: new BigNumber(sellAmount),\r\n            sellTokenAddress,\r\n        },\r\n        sources: response.data.sources\r\n            .map((source) => {\r\n                return {\r\n                    ...source,\r\n                    proportion: new BigNumber(source.proportion),\r\n                };\r\n            })\r\n            .filter((source) => source.proportion.gt(ZERO)),\r\n        fees: rawFeesToFees(response.data.fees),\r\n    };\r\n}\r\n\r\n/**\r\n * Internal function to handle meta-transaction quote responses.\r\n *\r\n * @returns Null if it's no liquidty error.\r\n */\r\nfunction handleQuoteError(\r\n    e: any, // eslint-disable-line @typescript-eslint/no-explicit-any\r\n    params: QuoteParams,\r\n    noLiquidityLogger?: pino.LogFn,\r\n): null {\r\n    if (e.response?.data) {\r\n        const axiosError = e as AxiosError<{\r\n            code: number;\r\n            reason: string;\r\n            validationErrors?: ValidationErrorItem[];\r\n        }>;\r\n        //  The response for no liquidity is a 400 status with a body like:\r\n        //  {\r\n        //     \"code\": 100,\r\n        //     \"reason\": \"Validation Failed\",\r\n        //     \"validationErrors\": [\r\n        //       {\r\n        //         \"field\": \"sellAmount\",\r\n        //         \"code\": 1004,\r\n        //         \"reason\": \"INSUFFICIENT_ASSET_LIQUIDITY\"\r\n        //       }\r\n        //     ]\r\n        //   }\r\n        if (\r\n            axiosError.response?.status === BAD_REQUEST &&\r\n            axiosError.response?.data?.validationErrors?.length === 1 &&\r\n            axiosError.response?.data?.validationErrors\r\n                ?.map((v) => v.reason)\r\n                .includes(SwapQuoterError.InsufficientAssetLiquidity)\r\n        ) {\r\n            // Looks like there is no liquidity for the quote...\r\n            noLiquidityLogger &&\r\n                noLiquidityLogger(\r\n                    { ammQuoteRequestParams: params },\r\n                    `[MetaTransactionClient] No liquidity returned for pair`,\r\n                );\r\n            return null;\r\n        }\r\n\r\n        // The response for insufficient fund error (primarily caused by trading amount is less than the fee)\r\n        // is a 400 status and with a body like:\r\n        // {\r\n        //      \"code\": 109,\r\n        //      \"reason\": \"Insufficient funds for transaction\"\r\n        // }\r\n        if (\r\n            axiosError.response?.status === BAD_REQUEST &&\r\n            axiosError.response?.data?.code === APIErrorCodes.InsufficientFundsError\r\n        ) {\r\n            if (params.sellAmount) {\r\n                throw new ValidationError([\r\n                    {\r\n                        field: 'sellAmount',\r\n                        code: ValidationErrorCodes.FieldInvalid,\r\n                        reason: 'sellAmount too small',\r\n                    },\r\n                ]);\r\n            }\r\n\r\n            throw new ValidationError([\r\n                {\r\n                    field: 'buyAmount',\r\n                    code: ValidationErrorCodes.FieldInvalid,\r\n                    reason: 'buyAmount too small',\r\n                },\r\n            ]);\r\n        }\r\n    }\r\n    // This error is neither the standard no liquidity error nor the insufficient fund error\r\n    throw e;\r\n}\r\n\r\n/**\r\n * Queries the MetaTransaction RPC service for an AMM quote wrapped in a\r\n * MetaTransaction.\r\n * If no AMM liquidity is available, returns `null`.\r\n *\r\n * If a prometheus 'Summary' is provided to the `requestDurationSummary`\r\n * parameter, the function will call its `observe` method with the request\r\n * duration in ms.\r\n */\r\nexport async function getQuoteRpc(\r\n    params: {\r\n        affiliateAddress?: string;\r\n        chainId: number;\r\n        buyAmount?: BigNumber;\r\n        buyToken: string;\r\n        integratorId: string;\r\n        sellAmount?: BigNumber;\r\n        sellToken: string;\r\n        slippagePercentage?: BigNumber;\r\n        takerAddress: string;\r\n        quoteUniqueId?: string; // ID to use for the quote report `decodedUniqueId`\r\n    },\r\n    meter?: { requestDurationSummary: Summary<'chainId' | 'success'>; chainId: number },\r\n    noLiquidityLogger?: pino.LogFn,\r\n): Promise<{ metaTransaction: MetaTransaction; price: FetchIndicativeQuoteResponse } | null> {\r\n    const stopTimer = meter?.requestDurationSummary.startTimer({ chainId: meter.chainId });\r\n\r\n    let response: GetQuoteResponse;\r\n    try {\r\n        // TODO (rhinodavid): Figure out how to set a timeout\r\n        response = await GetQuote(\r\n            {\r\n                affiliateAddress: params.affiliateAddress,\r\n                buyAmount: params.buyAmount ? bigNumberToProto(params.buyAmount) : undefined,\r\n                buyTokenAddress: params.buyToken,\r\n                chainId: params.chainId,\r\n                integratorId: params.integratorId,\r\n                quoteUniqueId: params.quoteUniqueId,\r\n                sellAmount: params.sellAmount ? bigNumberToProto(params.sellAmount) : undefined,\r\n                sellTokenAddress: params.sellToken,\r\n                slippagePercentage: params.slippagePercentage ? bigNumberToProto(params.slippagePercentage) : undefined,\r\n                takerAddress: params.takerAddress,\r\n            },\r\n            { baseURL: META_TRANSACTION_SERVICE_RPC_URL },\r\n        );\r\n    } catch (_e) {\r\n        stopTimer && stopTimer({ success: 'false' });\r\n\r\n        /**\r\n         * Error handling:\r\n         *\r\n         * Twirp throws an error of the following type:\r\n         * export interface TwirpError {\r\n         *   code: ErrorCode;\r\n         *   msg: string;\r\n         *   meta?: Record<string, string>;\r\n         * }\r\n         *\r\n         * To support the current error codes, we type `meta` as:\r\n         *  meta: {\r\n         *     zeroexErrorCode?: APIErrorCodes,\r\n         *     validationErrors: JSON.stringify(ValidationErrorItem[])\r\n         *  }\r\n         */\r\n\r\n        const e = _e as TwirpError;\r\n        const zeroexErrorCode = Number.isNaN(parseInt(e.meta?.zeroexErrorCode ?? ''))\r\n            ? null\r\n            : parseInt(e.meta?.zeroexErrorCode ?? '');\r\n        const validationErrors: ValidationErrorItem[] = JSON.parse(e.meta?.validationErrors ?? '[]');\r\n\r\n        if (\r\n            validationErrors?.length === 1 &&\r\n            validationErrors?.map((v) => v.reason).includes(SwapQuoterError.InsufficientAssetLiquidity)\r\n        ) {\r\n            // Looks like there is no liquidity for the quote...\r\n            noLiquidityLogger &&\r\n                noLiquidityLogger(\r\n                    { ammQuoteRequestParams: params },\r\n                    `[MetaTransactionClient] No liquidity returned for pair`,\r\n                );\r\n            return null;\r\n        }\r\n\r\n        // The response for insufficient fund error (primarily caused by trading amount is less than the fee)\r\n        // is a zeroexGeneralErrorCode `InsufficientFundsError`\r\n\r\n        if (zeroexErrorCode === APIErrorCodes.InsufficientFundsError) {\r\n            if (params.sellAmount) {\r\n                throw new ValidationError([\r\n                    {\r\n                        field: 'sellAmount',\r\n                        code: ValidationErrorCodes.FieldInvalid,\r\n                        reason: 'sellAmount too small',\r\n                    },\r\n                ]);\r\n            }\r\n\r\n            throw new ValidationError([\r\n                {\r\n                    field: 'buyAmount',\r\n                    code: ValidationErrorCodes.FieldInvalid,\r\n                    reason: 'buyAmount too small',\r\n                },\r\n            ]);\r\n        }\r\n        // This error is neither the standard no liquidity error nor the insufficient fund error\r\n        throw e;\r\n    }\r\n\r\n    stopTimer && stopTimer({ success: 'true' });\r\n\r\n    return {\r\n        metaTransaction: new MetaTransaction({\r\n            signer: response.metaTransaction.signerAddress,\r\n            sender: response.metaTransaction.senderAddress,\r\n            minGasPrice: protoToBigNumber(response.metaTransaction.minGasPrice),\r\n            maxGasPrice: protoToBigNumber(response.metaTransaction.maxGasPrice),\r\n            expirationTimeSeconds: protoToBigNumber(response.metaTransaction.expirationTimeSeconds),\r\n            salt: protoToBigNumber(response.metaTransaction.salt),\r\n            callData: response.metaTransaction.callData,\r\n            value: protoToBigNumber(response.metaTransaction.value),\r\n            feeToken: response.metaTransaction.feeTokenAddress,\r\n            feeAmount: protoToBigNumber(response.metaTransaction.feeAmount),\r\n            chainId: response.metaTransaction.chainId,\r\n            verifyingContract: response.metaTransaction.verifyingContract,\r\n        }),\r\n        price: {\r\n            buyAmount: protoToBigNumber(response.quote.buyAmount),\r\n            buyTokenAddress: response.quote.buyTokenAddress,\r\n            gas: protoToBigNumber(response.quote.gas),\r\n            price: protoToBigNumber(response.quote.price),\r\n            sellAmount: protoToBigNumber(response.quote.sellAmount),\r\n            sellTokenAddress: response.quote.sellTokenAddress,\r\n        },\r\n    };\r\n}\r\n"],"version":3}