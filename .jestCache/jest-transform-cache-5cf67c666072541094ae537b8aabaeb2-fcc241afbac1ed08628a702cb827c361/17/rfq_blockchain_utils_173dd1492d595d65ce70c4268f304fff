add9d720779bb104bad360a7e82be5db
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqBalanceCheckUtils = exports.RfqBlockchainUtils = void 0;
// tslint:disable:max-file-line-count
const contract_addresses_1 = require("@0x/contract-addresses");
const contracts_zero_ex_1 = require("@0x/contracts-zero-ex");
const protocol_utils_1 = require("@0x/protocol-utils");
const subproviders_1 = require("@0x/subproviders");
const utils_1 = require("@0x/utils");
const hdnode_1 = require("@ethersproject/hdnode");
const ethers_1 = require("ethers");
const utils_2 = require("ethers/lib/utils");
const abis_1 = require("../abis");
const constants_1 = require("../core/constants");
const eip712registry_1 = require("../eip712registry");
const logger_1 = require("../logger");
const types_1 = require("../core/types");
const address_utils_1 = require("./address_utils");
const Eip712Utils_1 = require("./Eip712Utils");
const rfqm_worker_balance_utils_1 = require("./rfqm_worker_balance_utils");
const service_utils_1 = require("./service_utils");
const subprovider_adapter_1 = require("./subprovider_adapter");
// allow a wide range for gas price for flexibility
const MIN_GAS_PRICE = new utils_1.BigNumber(0);
// 10K Gwei
const MAX_GAS_PRICE = new utils_1.BigNumber(1e13);
const RFQ_ORDER_FILLED_EVENT_TOPIC0 = '0x829fa99d94dc4636925b38632e625736a614c154d55006b7ab6bea979c210c32';
const OTC_ORDER_FILLED_EVENT_TOPIC0 = '0xac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f';
const ZERO_EX_FILL_EVENT_ABI = [
    {
        anonymous: false,
        inputs: [
            { indexed: false, internalType: 'bytes32', name: 'orderHash', type: 'bytes32' },
            { indexed: false, internalType: 'address', name: 'maker', type: 'address' },
            { indexed: false, internalType: 'address', name: 'taker', type: 'address' },
            { indexed: false, internalType: 'address', name: 'makerToken', type: 'address' },
            { indexed: false, internalType: 'address', name: 'takerToken', type: 'address' },
            { indexed: false, internalType: 'uint128', name: 'takerTokenFilledAmount', type: 'uint128' },
            { indexed: false, internalType: 'uint128', name: 'makerTokenFilledAmount', type: 'uint128' },
            { indexed: false, internalType: 'bytes32', name: 'pool', type: 'bytes32' },
        ],
        name: 'RfqOrderFilled',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            { indexed: false, internalType: 'bytes32', name: 'orderHash', type: 'bytes32' },
            { indexed: false, internalType: 'address', name: 'maker', type: 'address' },
            { indexed: false, internalType: 'address', name: 'taker', type: 'address' },
            { indexed: false, internalType: 'address', name: 'makerToken', type: 'address' },
            { indexed: false, internalType: 'address', name: 'takerToken', type: 'address' },
            { indexed: false, internalType: 'uint128', name: 'makerTokenFilledAmount', type: 'uint128' },
            { indexed: false, internalType: 'uint128', name: 'takerTokenFilledAmount', type: 'uint128' },
        ],
        name: 'OtcOrderFilled',
        type: 'event',
    },
];
function toBigNumber(ethersBigNumber) {
    return new utils_1.BigNumber(ethersBigNumber.toString());
}
class RfqBlockchainUtils {
    constructor(provider, _exchangeProxyAddress, balanceChecker, ethersProvider, ethersWallet) {
        this._exchangeProxyAddress = _exchangeProxyAddress;
        this._abiDecoder = new utils_1.AbiDecoder([ZERO_EX_FILL_EVENT_ABI]);
        this.balanceCheckUtils = new RfqBalanceCheckUtils(balanceChecker, _exchangeProxyAddress);
        this._ethersProvider = ethersProvider;
        this._ethersWallet = ethersWallet;
        this._exchangeProxy = new contracts_zero_ex_1.IZeroExContract(this._exchangeProxyAddress, provider);
    }
    static getPrivateKeyFromIndexAndPhrase(mnemonic, index) {
        const hdNode = hdnode_1.HDNode.fromMnemonic(mnemonic).derivePath(this._getPathByIndex(index));
        // take '0x' off
        return hdNode.privateKey.substring(2);
    }
    static getAddressFromIndexAndPhrase(mnemonic, index) {
        const hdNode = hdnode_1.HDNode.fromMnemonic(mnemonic).derivePath(this._getPathByIndex(index));
        return hdNode.address;
    }
    static createPrivateKeyProvider(rpcProvider, privateWalletSubprovider) {
        const providerEngine = new subproviders_1.Web3ProviderEngine();
        providerEngine.addProvider(privateWalletSubprovider);
        providerEngine.addProvider(new subprovider_adapter_1.SubproviderAdapter(rpcProvider));
        utils_1.providerUtils.startProviderEngine(providerEngine);
        return providerEngine;
    }
    // tslint:disable-next-line:prefer-function-over-method
    static _getPathByIndex(index) {
        // ensure index is a 0+ integer
        if (index < 0 || index !== Math.floor(index)) {
            throw new Error(`invalid index`);
        }
        return `m/44'/60'/0'/0/`.concat(String(index));
    }
    /**
     * Fetches min value between balance for a list of addresses against the specified tokens. The index of
     * an address in `addresses` must correspond with the index of a token in `tokens`.
     */
    async getMinOfBalancesAndAllowancesAsync(erc20Owners) {
        return this.balanceCheckUtils.getMinOfBalancesAndAllowancesAsync(erc20Owners);
    }
    /**
     * Fetches the balances for a list of addresses against the specified tokens. The index of
     * an address in `addresses` must correspond with the index of a token in `tokens`.
     */
    async getTokenBalancesAsync(erc20Owners) {
        return this.balanceCheckUtils.getTokenBalancesAsync(erc20Owners);
    }
    // for use when 0x API operator submits an order on-chain on behalf of taker
    generateMetaTransaction(rfqOrder, signature, taker, takerAmount, chainId) {
        // generate call data for fillRfqOrder
        const callData = this._exchangeProxy
            .fillRfqOrder(rfqOrder, signature, takerAmount)
            .getABIEncodedTransactionData();
        return new protocol_utils_1.MetaTransaction({
            signer: taker,
            sender: constants_1.NULL_ADDRESS,
            minGasPrice: MIN_GAS_PRICE,
            maxGasPrice: MAX_GAS_PRICE,
            expirationTimeSeconds: rfqOrder.expiry,
            salt: new utils_1.BigNumber(Date.now()),
            callData,
            value: constants_1.ZERO,
            feeToken: constants_1.NULL_ADDRESS,
            feeAmount: constants_1.ZERO,
            chainId,
            verifyingContract: this._exchangeProxy.address,
        });
    }
    async decodeMetaTransactionCallDataAndValidateAsync(calldata, sender, txOptions) {
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const metaTxInput = this._exchangeProxy.getABIDecodedTransactionData('executeMetaTransaction', calldata);
        return this.validateMetaTransactionOrThrowAsync(metaTxInput[0], metaTxInput[1], sender, txOptions);
    }
    /**
     * Validates a metatransaction and its signature for a given sender
     *
     * @returns a Promise of [takerTokenFilledAmount, makerTokenFilledAmount]
     * @throws an error if the metatransaction is not valid
     */
    async validateMetaTransactionOrThrowAsync(metaTx, metaTxSig, sender, txOptions) {
        try {
            const results = await this._exchangeProxy
                .executeMetaTransaction(metaTx, metaTxSig)
                .callAsync({ from: sender, ...txOptions });
            const takerTokenFillAmount = // $eslint-fix-me github.com/rhinodavid/eslint-fix-me
             
            /* eslint-disable @typescript-eslint/no-explicit-any */
            this._exchangeProxy.getABIDecodedTransactionData('fillRfqOrder', metaTx.callData) /* eslint-enable @typescript-eslint/no-explicit-any */[2];
            const decodedResults = this._exchangeProxy.getABIDecodedReturnData('fillRfqOrder', results);
            if (decodedResults[0].isLessThan(takerTokenFillAmount)) {
                logger_1.logger.error('validation failed because filled amount is less than requested fill amount');
                throw new Error(`filled amount is less than requested fill amount`);
            }
            return decodedResults;
        }
        catch (err) {
            logger_1.logger.error({ errorMessage: err === null || err === void 0 ? void 0 : err.message }, 'eth_call validation failed for executeMetaTransaction');
            throw new Error(err);
        }
    }
    /**
     * Simulate the transaction with calldata.
     *
     * NOTE: In ethers.js, provider.call and provider.send('eth_call', ...) might not throw exception.
     *       The behavior might be dependent on providers. Revisit this later.
     */
    async simulateTransactionAsync(to, calldata) {
        try {
            await this._ethersProvider.call({
                to,
                data: calldata,
            });
        }
        catch (e) {
            if (e instanceof Error) {
                e.message = `simulateTransactionAsync: ${e.message}`;
            }
            throw e;
        }
    }
    /**
     * Estimate the gas for fillTakerSignedOtcOrder and fillTakerSignedOtcOrderForEth
     * NOTE: can also be used for validation
     *
     * @returns a Promise of the gas estimate
     * @throws an error if transaction will revert
     */
    async estimateGasForFillTakerSignedOtcOrderAsync(order, makerSignature, takerSignature, sender, isUnwrap) {
        try {
            if (isUnwrap) {
                return await this._exchangeProxy
                    .fillTakerSignedOtcOrderForEth(order, makerSignature, takerSignature)
                    .estimateGasAsync({ from: sender });
            }
            else {
                return await this._exchangeProxy
                    .fillTakerSignedOtcOrder(order, makerSignature, takerSignature)
                    .estimateGasAsync({ from: sender });
            }
        }
        catch (err) {
            logger_1.logger.error({
                orderHash: order.getHash(),
                maker: order.maker,
                taker: order.taker,
                isUnwrap,
                errorMessage: err === null || err === void 0 ? void 0 : err.message,
            }, 'validation failed for taker signed OtcOrder');
            throw err;
        }
    }
    /**
     * Generates calldata for Taker Signed OtcOrder settlement
     */
    generateTakerSignedOtcOrderCallData(order, makerSignature, takerSignature, isUnwrap, affiliateAddress) {
        const callData = isUnwrap
            ? this._exchangeProxy
                .fillTakerSignedOtcOrderForEth(order, makerSignature, takerSignature)
                .getABIEncodedTransactionData()
            : this._exchangeProxy
                .fillTakerSignedOtcOrder(order, makerSignature, takerSignature)
                .getABIEncodedTransactionData();
        return service_utils_1.serviceUtils.attributeCallData(callData, affiliateAddress).affiliatedData;
    }
    generateMetaTransactionCallData(metaTx, metaTxSig, affiliateAddress) {
        const callData = this._exchangeProxy.executeMetaTransaction(metaTx, metaTxSig).getABIEncodedTransactionData();
        return service_utils_1.serviceUtils.attributeCallData(callData, affiliateAddress).affiliatedData;
    }
    async getNonceAsync(workerAddress) {
        return this._ethersProvider.getTransactionCount(workerAddress);
    }
    getExchangeProxyAddress() {
        return this._exchangeProxyAddress;
    }
    /**
     * Returns the transaction receipts for the given transaction hashes.
     * If a receipt does not exist, returns `undefined`.
     */
    async getReceiptsAsync(transactionHashes) {
        return Promise.all(transactionHashes.map(async (transactionHash) => this._ethersProvider.getTransactionReceipt(transactionHash)));
    }
    async getCurrentBlockAsync() {
        return this._ethersProvider.getBlockNumber();
    }
    // Fetches a block from the block number or block hash
    async getBlockAsync(blockHash) {
        return this._ethersProvider.getBlock(blockHash);
    }
    /**
     * Passthrough to the ethers `getTransaction` function
     * https://docs.ethers.io/v5/api/providers/provider/#Provider-getTransaction:
     *
     * Returns the transaction with hash or null if the transaction is unknown.
     * If a transaction has not been mined, this method will search the transaction pool.
     * Various backends may have more restrictive transaction pool access
     * (e.g. if the gas price is too low or the transaction was only recently sent and not yet indexed)
     * in which case this method may also return null.
     */
    async getTransactionAsync(transactionHash) {
        return this._ethersProvider.getTransaction(transactionHash);
    }
    /**
     * Estimate gas (in wei) given a transaction request using `eth_estimateGas` JSON RPC method.
     * The transaction request contains information related to the transaction (from, to, data, etc.).
     *
     * @param transactionRequest Transaction request object which contains information about the transaction.
     * @returns The gas estimate for the transaction in wei.
     */
    async estimateGasForAsync(transactionRequest) {
        try {
            const gasEstimate = await this._ethersProvider.estimateGas(transactionRequest);
            return gasEstimate.toNumber();
        }
        catch (e) {
            if (e instanceof Error) {
                e.message = `estimateGasForAsync: ${e.message}`;
            }
            throw e;
        }
    }
    /**
     * Get the access list and the gas estimation given a transaction request. Uses the provider
     * to call the `eth_createAccessList` JSON RPC method.
     *
     * The transaction request contains information related to the transaction (from, to, data, etc.).
     * Note that the implementation is similar to the one in @0x/web3-wrapper. This repo is
     * migrating away from web3-wrapper in favor of ethers. The original implementation in
     * web3-wrapper:
     * https://github.com/0xProject/tools/blob/development/web3-wrapper/src/web3_wrapper.ts#L591
     *
     * @param transactionRequest Transaction request object which contains information about the transaction.
     * @returns A TxAccessListWithGas object which contains access list and gas estimation for the transaction.
     */
    async createAccessListForAsync(transactionRequest) {
        try {
            const rawResult = await this._ethersProvider.send('eth_createAccessList', [transactionRequest]);
            const accessList = rawResult.accessList;
            const gasUsed = rawResult.gasUsed;
            return {
                // The type for `accessList` is `AccessList` (Array<{ address: string, storageKeys: Array<string> }>).
                // The reduce operation is used to transform the array into type `TxAccessList` ([address: string]: string[]) whose keys
                // are addresses and values are corresponding storage keys. This is useful if we need to remove an address from the object.
                accessList: accessList.reduce((o, v) => {
                    o[v.address] = o[v.address] || [];
                    o[v.address].push(...(v.storageKeys || []));
                    return o;
                }, {}),
                gasEstimate: new utils_1.BigNumber(gasUsed).toNumber(),
            };
        }
        catch (e) {
            if (e instanceof Error) {
                e.message = `createAccessListForAsync: ${e.message}`;
            }
            throw e;
        }
    }
    getDecodedRfqOrderFillEventLogFromLogs(logs) {
        for (const log of logs) {
            if (log.topics[0] === RFQ_ORDER_FILLED_EVENT_TOPIC0) {
                return this._abiDecoder.tryToDecodeLogOrNoop(log);
            }
        }
        throw new Error(`no RfqOrderFilledEvent logs among the logs passed into getDecodedRfqOrderFillEventLogFromLogs`);
    }
    /**
     * Decode the OtcOrder Filled Event
     */
    getDecodedOtcOrderFillEventLogFromLogs(logs) {
        for (const log of logs) {
            if (log.topics[0] === OTC_ORDER_FILLED_EVENT_TOPIC0) {
                return this._abiDecoder.tryToDecodeLogOrNoop(log);
            }
        }
        throw new Error(`no OtcOrderFilledEvent logs among the logs passed into getDecodedOtcOrderFillEventLogFromLogs`);
    }
    /**
     * Broadcasts a raw transaction via the `eth_sendRawTransaction` JSON RPC method.
     * The transaction must be signed by this point, otherwise submission will fail.
     *
     * @returns The transaction hash returned by the RPC provider.
     */
    async submitSignedTransactionAsync(signedTransaction) {
        const response = await this._ethersProvider.sendTransaction(signedTransaction);
        return response.hash;
    }
    async getAccountBalanceAsync(accountAddress) {
        return this._ethersProvider.getBalance(accountAddress).then((r) => toBigNumber(r));
    }
    /**
     * Check if a worker is ready to pick up a new job:
     * - the worker has enough balance
     * - the worker has no pending transactions
     *
     * @param chainId Id of the chain.
     * @param workerAddress Address of the worker to check.
     * @param balance Balance of the worker to check.
     * @param gasPrice Current gas price.
     * @returns True if a worker is ready to pick up a new job and false otherwise.
     */
    async isWorkerReadyAsync(chainId, workerAddress, balance, gasPrice) {
        let gasEstimate;
        switch (chainId) {
            case contract_addresses_1.ChainId.Polygon:
                gasEstimate = constants_1.ZEROG_METATX_GAS_ESTIMATE;
                break;
            default:
                gasEstimate = constants_1.RFQM_TX_GAS_ESTIMATE;
                break;
        }
        return (0, rfqm_worker_balance_utils_1.isWorkerReadyAndAbleAsync)(this._ethersProvider, workerAddress, balance, gasPrice, gasEstimate);
    }
    /**
     * Converts a @0x/web3-wrapper `TxData` object into an Ethers `TransactionRequest`.
     *
     * If the `from` address is not present in the `TxData`, the function uses the address
     * of the Ethers Wallet passed to `rfqBlockchainUtils`
     *
     * If the `to` address is not present, the function uses the exchange proxy address.
     */
    transformTxDataToTransactionRequest(txOptions, chainId, callData) {
        const baseRequest = {
            chainId,
            data: callData,
            from: txOptions.from,
            // web3wrappers "gas" field -> ethers "gasLimit" field
            gasLimit: txOptions.gas instanceof utils_1.BigNumber ? BigInt(txOptions.gas.toString()) : txOptions.gas,
            nonce: txOptions.nonce,
            to: txOptions.to || this._exchangeProxy.address,
            value: txOptions.value instanceof utils_1.BigNumber ? txOptions.value.toString() : txOptions.value,
        };
        // Handle Type 0 (Legacy) Tx
        if (txOptions.gasPrice) {
            return {
                ...baseRequest,
                type: 0,
                gasPrice: txOptions.gasPrice instanceof utils_1.BigNumber ? txOptions.gasPrice.toString() : txOptions.gasPrice,
            };
        }
        // Handle Type 2 (EIP-1559) Tx
        return {
            ...baseRequest,
            type: 2,
            maxFeePerGas: txOptions.maxFeePerGas instanceof utils_1.BigNumber
                ? BigInt(txOptions.maxFeePerGas.toString())
                : txOptions.maxFeePerGas,
            maxPriorityFeePerGas: txOptions.maxPriorityFeePerGas instanceof utils_1.BigNumber
                ? BigInt(txOptions.maxPriorityFeePerGas.toString())
                : txOptions.maxPriorityFeePerGas,
        };
    }
    /**
     * Uses the Ethers Wallet to sign a transaction. Returns both the signed transaction and its hash.
     *
     * If the containing class has been initialized without a wallet, the function throws.
     */
    async signTransactionAsync(transaction) {
        if (!this._ethersWallet) {
            throw new Error('RFQ Blockchain Utils must be initialized with an Ethers Wallet in order to get transaction hashes before submitting');
        }
        const checkedRequest = await (0, utils_2.resolveProperties)(this._ethersWallet.checkTransaction(transaction));
        const signedTransaction = await this._ethersWallet.signTransaction(checkedRequest);
        const hash = ethers_1.utils.keccak256(signedTransaction);
        return { signedTransaction, transactionHash: hash };
    }
    async getTokenDecimalsAsync(tokenAddress) {
        const erc20AbiDecimals = `[{
            "constant": true,
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "name": "",
                    "type": "uint8"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }]`;
        const tokenContract = new ethers_1.Contract(tokenAddress, erc20AbiDecimals, this._ethersProvider);
        const decimals = await tokenContract.decimals();
        if (typeof decimals !== 'number') {
            throw new Error('Decimals was not a number');
        }
        return decimals;
    }
    /**
     * Calls the 0x Exchange Proxy to add an address to the list of allowed order signers for the msg's sender.
     */
    async registerAllowedOrderSignerAsync(from, signerAddress, isAllowed) {
        // tslint:disable-next-line: await-promise
        await this._exchangeProxy
            .registerAllowedOrderSigner(signerAddress, isAllowed)
            .awaitTransactionSuccessAsync({ from });
    }
    /**
     * Returns whether the signer address is an allowed order signer of the maker.
     */
    async isValidOrderSignerAsync(makerAddress, signerAddress) {
        return this._exchangeProxy.isValidOrderSigner(makerAddress, signerAddress).callAsync();
    }
    /**
     * Get the gasless approval object which encapsulates the EIP-712 context that would be signed by the `takerAddress`
     * for gasless approval. The two main schemes for gasless approvals are `executeMetaTransaction` and `permit`.
     *
     * @param chainId Id of the chain.
     * @param token The address of the token.
     * @param takerAddress The address of the taker.
     * @param nowMs optional - the current timestamp in milliseconds
     * @returns The corresponding gasless approval oject or null if the token does not support gasless approval (does not exist in our EIP-712 token registry).
     */
    async getGaslessApprovalAsync(chainId, token, takerAddress, nowMs = Date.now()) {
        // If the token does not exist in the token registry, return null
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line no-prototype-builtins
        if (!eip712registry_1.EIP_712_REGISTRY.hasOwnProperty(chainId) || !eip712registry_1.EIP_712_REGISTRY[chainId].hasOwnProperty(token)) {
            return null;
        }
        const tokenEIP712 = eip712registry_1.EIP_712_REGISTRY[chainId][token];
        const eip712DomainType = (0, Eip712Utils_1.extractEIP712DomainType)(tokenEIP712.domain);
        switch (tokenEIP712.kind) {
            case types_1.GaslessApprovalTypes.ExecuteMetaTransaction: {
                const nonce = await this.getMetaTransactionNonceAsync(token, takerAddress);
                // generate calldata for approve with max number of uint256 as amount
                const erc20 = new ethers_1.Contract(token, abis_1.abis.polygonBridgedERC20, this._ethersProvider);
                const { data: approveCalldata } = await erc20.populateTransaction.approve(this._exchangeProxyAddress, ethers_1.constants.MaxUint256);
                const executeMetaTransactionApproval = {
                    kind: types_1.GaslessApprovalTypes.ExecuteMetaTransaction,
                    eip712: {
                        types: {
                            ...eip712DomainType,
                            ...constants_1.EXECUTE_META_TRANSACTION_EIP_712_TYPES,
                        },
                        primaryType: 'MetaTransaction',
                        domain: tokenEIP712.domain,
                        message: {
                            nonce: nonce.toNumber(),
                            from: takerAddress,
                            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                            functionSignature: approveCalldata,
                        },
                    },
                };
                return executeMetaTransactionApproval;
            }
            case types_1.GaslessApprovalTypes.Permit: {
                const nonce = await this.getPermitNonceAsync(token, takerAddress);
                const tenMinutesAfterNowS = new utils_1.BigNumber(nowMs + constants_1.ONE_MINUTE_MS * 10).div(constants_1.ONE_SECOND_MS).integerValue();
                const permitApproval = {
                    kind: types_1.GaslessApprovalTypes.Permit,
                    eip712: {
                        types: {
                            ...eip712DomainType,
                            ...constants_1.PERMIT_EIP_712_TYPES,
                        },
                        primaryType: 'Permit',
                        domain: tokenEIP712.domain,
                        message: {
                            owner: takerAddress,
                            spender: this._exchangeProxyAddress,
                            value: ethers_1.constants.MaxUint256.toString(),
                            nonce: nonce.toNumber(),
                            deadline: tenMinutesAfterNowS.toString(),
                        },
                    },
                };
                return permitApproval;
            }
            default:
                throw new Error(`Gasless approval kind ${tokenEIP712.kind} is not implemented yet`);
        }
    }
    /**
     * Get the amount (in base unit) of `token` `spender` will be allowed to spend on behalf on `owner` (the allowance). Note that
     * base unit means 10 ** decimals (decimals of the token).
     *
     * @param token The address of the token.
     * @param owner The address that owns certain amount of `token`.
     * @param spender The address that would like to spend token on behalf of `owner`.
     * @returns The amount (in base unit) of tokens spender is allowed to spend.
     */
    async getAllowanceAsync(token, owner, spender) {
        const erc20 = new ethers_1.Contract(token, abis_1.abis.polygonBridgedERC20, this._ethersProvider);
        const allowance = await erc20.allowance(owner, spender);
        return new utils_1.BigNumber(allowance.toString());
    }
    /**
     * Get nonce for meta transaction. This is used by contracts that support Biconomy's `executeMetaTransaction` which includes bridged tokens on Polygon.
     *
     * @param token The address of the token.
     * @param takerAddress The address of the taker.
     * @returns Nonce.
     */
    async getMetaTransactionNonceAsync(token, takerAddress) {
        const erc20 = new ethers_1.Contract(token, abis_1.abis.polygonBridgedERC20, this._ethersProvider);
        const nonce = await erc20.getNonce(takerAddress);
        return new utils_1.BigNumber(nonce.toString());
    }
    /**
     * Get permit nonce, which is used by contracts that support EIP-2612 standards.
     *
     * @param token The address of the token.
     * @param takerAddress The address of the taker.
     * @returns Nonce.
     */
    async getPermitNonceAsync(token, takerAddress) {
        const erc20 = new ethers_1.Contract(token, abis_1.abis.permitERC20, this._ethersProvider);
        const nonce = await erc20.nonces(takerAddress);
        return new utils_1.BigNumber(nonce.toString());
    }
    /**
     * Generates calldata for gasless approval submission.
     *
     * @param token The address of the token.
     * @param approval The Approval object, which consists of 'kind' and eip712 object.
     * @param signature The gasless approval transaction signed by taker.
     * @returns Generated calldata.
     */
    async generateApprovalCalldataAsync(token, approval, signature) {
        const { kind, eip712 } = approval;
        switch (kind) {
            case types_1.GaslessApprovalTypes.ExecuteMetaTransaction: {
                const erc20 = new ethers_1.Contract(token, abis_1.abis.polygonBridgedERC20, this._ethersProvider);
                const { data } = await erc20.populateTransaction.executeMetaTransaction(eip712.message.from, eip712.message.functionSignature, signature.r, signature.s, signature.v);
                if (!data) {
                    throw new Error(`Cannot generate approval submission calldata for ${kind}`);
                }
                return data;
            }
            case types_1.GaslessApprovalTypes.Permit: {
                const erc20 = new ethers_1.Contract(token, abis_1.abis.permitERC20, this._ethersProvider);
                const { data } = await erc20.populateTransaction.permit(eip712.message.owner, eip712.message.spender, eip712.message.value, eip712.message.deadline, signature.v, signature.r, signature.s);
                if (!data) {
                    throw new Error(`Cannot generate approval submission calldata for ${kind}`);
                }
                return data;
            }
            default:
                throw new Error(`Gasless approval kind ${kind} is not implemented yet`);
        }
    }
}
exports.RfqBlockchainUtils = RfqBlockchainUtils;
class RfqBalanceCheckUtils {
    constructor(_balanceChecker, _exchangeProxyAddress) {
        this._balanceChecker = _balanceChecker;
        this._exchangeProxyAddress = _exchangeProxyAddress;
    }
    /**
     * Fetches min value between balance for a list of addresses against the specified tokens. The index of
     * an address in `addresses` must correspond with the index of a token in `tokens`.
     */
    async getMinOfBalancesAndAllowancesAsync(erc20Owners) {
        const { owners, tokens } = (0, address_utils_1.splitAddresses)(erc20Owners);
        return this._balanceChecker.getMinOfBalancesAndAllowancesAsync(owners, tokens, this._exchangeProxyAddress);
    }
    /**
     * Fetches the balances for a list of addresses against the specified tokens. The index of
     * an address in `addresses` must correspond with the index of a token in `tokens`.
     */
    async getTokenBalancesAsync(erc20Owners) {
        const { owners, tokens } = (0, address_utils_1.splitAddresses)(erc20Owners);
        return this._balanceChecker.getTokenBalancesAsync(owners, tokens);
    }
}
exports.RfqBalanceCheckUtils = RfqBalanceCheckUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,