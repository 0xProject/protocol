3f0c8545ad6626b4ef588b98f2462f63
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GasStationAttendantEthereum = void 0;
const utils_1 = require("@0x/utils");
const logger_1 = require("../logger");
const rfqm_gas_estimate_utils_1 = require("./rfqm_gas_estimate_utils");
/**
 * An implementation of `GasStationAttendant` designed for Ethereum Mainnet.
 */
class GasStationAttendantEthereum {
    constructor(gasOracle) {
        this._gasOracle = gasOracle;
    }
    /**
     * The Safe Balance For Trade is based on historical data as outlined here:
     * https://0xproject.quip.com/qZdFAHLpT7JI/RFQm-healthz-System-Health-Endpoint#temp:C:cXH5851e0f15e8c4828bffc1339d
     */
    // tslint:disable-next-line: prefer-function-over-method
    async getSafeBalanceForTradeAsync() {
        return new utils_1.BigNumber(82500000000000000);
    }
    /**
     * Uses an estimate of the current base fee with 6
     * 10% increases plus the "instant" maxPriorityFeePerGas
     * as reported by the oracle.
     *
     * Gas amount is estimated for an unwrap of the AAVE-USDC pair.
     */
    async getWorkerBalanceForTradeAsync() {
        const baseFee = await this._gasOracle.getBaseFeePerGasWeiAsync();
        const instantTip = await this._gasOracle.getMaxPriorityFeePerGasWeiAsync('instant');
        logger_1.logger.info({ baseFee: baseFee.toString(), instantTip: instantTip.toString() }, 'Base fee and instant tip for gas rate');
        // Pad the baseFee for 6 10% increases
        const baseFeePad = Math.pow(1.1, 6); // tslint:disable-line: custom-no-magic-numbers
        const paddedBaseFee = baseFee.times(baseFeePad);
        const gasRate = paddedBaseFee.plus(instantTip);
        // Use a gas estimate of a pretty high-cost pair
        const gasEstimate = (0, rfqm_gas_estimate_utils_1.calculateGasEstimate)('0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9', // AAVE
        '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', // USDC
        'otc', true);
        return gasRate.times(gasEstimate);
    }
    /**
     * Calculated by looking at historical data and seeing we average 1.5 transactions
     * per job. This means we expect to pay 2.75 GWEI priority fee plus the base fee.
     */
    async getExpectedTransactionGasRateAsync() {
        const baseFee = await this._gasOracle.getBaseFeePerGasWeiAsync();
        logger_1.logger.info({ baseFee: baseFee.toString() }, 'Base fee for gas rate calculation');
        // Currently we submit a 2 GWEI tip then multiply it by 1.5 per submission
        // Trades take ~1.5 submissions on average, so that's 2.75 GWEI
        const avgMaxPriorityFeePerGasRate = 2750000000;
        return baseFee.plus(avgMaxPriorityFeePerGasRate).integerValue(utils_1.BigNumber.ROUND_CEIL);
    }
}
exports.GasStationAttendantEthereum = GasStationAttendantEthereum;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9HYXNTdGF0aW9uQXR0ZW5kYW50RXRoZXJldW0udHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQXNDO0FBQ3RDLHNDQUFtQztBQUluQyx1RUFBaUU7QUFFakU7O0dBRUc7QUFDSCxNQUFhLDJCQUEyQjtJQUdwQyxZQUFZLFNBQXlCO1FBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7O09BR0c7SUFDSCx3REFBd0Q7SUFDakQsS0FBSyxDQUFDLDJCQUEyQjtRQUNwQyxPQUFPLElBQUksaUJBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxLQUFLLENBQUMsNkJBQTZCO1FBQ3RDLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ2pFLE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQywrQkFBK0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRixlQUFNLENBQUMsSUFBSSxDQUNQLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQ2xFLHVDQUF1QyxDQUMxQyxDQUFDO1FBRUYsc0NBQXNDO1FBQ3RDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsK0NBQStDO1FBQ3BGLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEQsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUvQyxnREFBZ0Q7UUFDaEQsTUFBTSxXQUFXLEdBQUcsSUFBQSw4Q0FBb0IsRUFDcEMsNENBQTRDLEVBQUUsT0FBTztRQUNyRCw0Q0FBNEMsRUFBRSxPQUFPO1FBQ3JELEtBQUssRUFDTCxJQUFJLENBQ1AsQ0FBQztRQUVGLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksS0FBSyxDQUFDLGtDQUFrQztRQUMzQyxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUNqRSxlQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLG1DQUFtQyxDQUFDLENBQUM7UUFDbEYsMEVBQTBFO1FBQzFFLCtEQUErRDtRQUMvRCxNQUFNLDJCQUEyQixHQUFHLFVBQVUsQ0FBQztRQUMvQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxZQUFZLENBQUMsaUJBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4RixDQUFDO0NBQ0o7QUEzREQsa0VBMkRDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZHdhbHNoL2NvZGUtbG9jYWwvMHgtcmZxLWFwaS9zcmMvdXRpbHMvR2FzU3RhdGlvbkF0dGVuZGFudEV0aGVyZXVtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gJ0AweC91dGlscyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi9sb2dnZXInO1xuXG5pbXBvcnQgeyBHYXNPcmFjbGVUeXBlMiB9IGZyb20gJy4vR2FzT3JhY2xlVHlwZTInO1xuaW1wb3J0IHsgR2FzU3RhdGlvbkF0dGVuZGFudCwgV2VpLCBXZWlQZXJHYXMgfSBmcm9tICcuL0dhc1N0YXRpb25BdHRlbmRhbnQnO1xuaW1wb3J0IHsgY2FsY3VsYXRlR2FzRXN0aW1hdGUgfSBmcm9tICcuL3JmcW1fZ2FzX2VzdGltYXRlX3V0aWxzJztcblxuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBgR2FzU3RhdGlvbkF0dGVuZGFudGAgZGVzaWduZWQgZm9yIEV0aGVyZXVtIE1haW5uZXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBHYXNTdGF0aW9uQXR0ZW5kYW50RXRoZXJldW0gaW1wbGVtZW50cyBHYXNTdGF0aW9uQXR0ZW5kYW50IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9nYXNPcmFjbGU6IEdhc09yYWNsZVR5cGUyO1xuXG4gICAgY29uc3RydWN0b3IoZ2FzT3JhY2xlOiBHYXNPcmFjbGVUeXBlMikge1xuICAgICAgICB0aGlzLl9nYXNPcmFjbGUgPSBnYXNPcmFjbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIFNhZmUgQmFsYW5jZSBGb3IgVHJhZGUgaXMgYmFzZWQgb24gaGlzdG9yaWNhbCBkYXRhIGFzIG91dGxpbmVkIGhlcmU6XG4gICAgICogaHR0cHM6Ly8weHByb2plY3QucXVpcC5jb20vcVpkRkFITHBUN0pJL1JGUW0taGVhbHRoei1TeXN0ZW0tSGVhbHRoLUVuZHBvaW50I3RlbXA6QzpjWEg1ODUxZTBmMTVlOGM0ODI4YmZmYzEzMzlkXG4gICAgICovXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBwcmVmZXItZnVuY3Rpb24tb3Zlci1tZXRob2RcbiAgICBwdWJsaWMgYXN5bmMgZ2V0U2FmZUJhbGFuY2VGb3JUcmFkZUFzeW5jKCk6IFByb21pc2U8V2VpPiB7XG4gICAgICAgIHJldHVybiBuZXcgQmlnTnVtYmVyKDgyNTAwMDAwMDAwMDAwMDAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGFuIGVzdGltYXRlIG9mIHRoZSBjdXJyZW50IGJhc2UgZmVlIHdpdGggNlxuICAgICAqIDEwJSBpbmNyZWFzZXMgcGx1cyB0aGUgXCJpbnN0YW50XCIgbWF4UHJpb3JpdHlGZWVQZXJHYXNcbiAgICAgKiBhcyByZXBvcnRlZCBieSB0aGUgb3JhY2xlLlxuICAgICAqXG4gICAgICogR2FzIGFtb3VudCBpcyBlc3RpbWF0ZWQgZm9yIGFuIHVud3JhcCBvZiB0aGUgQUFWRS1VU0RDIHBhaXIuXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGdldFdvcmtlckJhbGFuY2VGb3JUcmFkZUFzeW5jKCk6IFByb21pc2U8V2VpUGVyR2FzPiB7XG4gICAgICAgIGNvbnN0IGJhc2VGZWUgPSBhd2FpdCB0aGlzLl9nYXNPcmFjbGUuZ2V0QmFzZUZlZVBlckdhc1dlaUFzeW5jKCk7XG4gICAgICAgIGNvbnN0IGluc3RhbnRUaXAgPSBhd2FpdCB0aGlzLl9nYXNPcmFjbGUuZ2V0TWF4UHJpb3JpdHlGZWVQZXJHYXNXZWlBc3luYygnaW5zdGFudCcpO1xuICAgICAgICBsb2dnZXIuaW5mbyhcbiAgICAgICAgICAgIHsgYmFzZUZlZTogYmFzZUZlZS50b1N0cmluZygpLCBpbnN0YW50VGlwOiBpbnN0YW50VGlwLnRvU3RyaW5nKCkgfSxcbiAgICAgICAgICAgICdCYXNlIGZlZSBhbmQgaW5zdGFudCB0aXAgZm9yIGdhcyByYXRlJyxcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBQYWQgdGhlIGJhc2VGZWUgZm9yIDYgMTAlIGluY3JlYXNlc1xuICAgICAgICBjb25zdCBiYXNlRmVlUGFkID0gTWF0aC5wb3coMS4xLCA2KTsgLy8gdHNsaW50OmRpc2FibGUtbGluZTogY3VzdG9tLW5vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgY29uc3QgcGFkZGVkQmFzZUZlZSA9IGJhc2VGZWUudGltZXMoYmFzZUZlZVBhZCk7XG4gICAgICAgIGNvbnN0IGdhc1JhdGUgPSBwYWRkZWRCYXNlRmVlLnBsdXMoaW5zdGFudFRpcCk7XG5cbiAgICAgICAgLy8gVXNlIGEgZ2FzIGVzdGltYXRlIG9mIGEgcHJldHR5IGhpZ2gtY29zdCBwYWlyXG4gICAgICAgIGNvbnN0IGdhc0VzdGltYXRlID0gY2FsY3VsYXRlR2FzRXN0aW1hdGUoXG4gICAgICAgICAgICAnMHg3ZmM2NjUwMGM4NGE3NmFkN2U5YzkzNDM3YmZjNWFjMzNlMmRkYWU5JywgLy8gQUFWRVxuICAgICAgICAgICAgJzB4YTBiODY5OTFjNjIxOGIzNmMxZDE5ZDRhMmU5ZWIwY2UzNjA2ZWI0OCcsIC8vIFVTRENcbiAgICAgICAgICAgICdvdGMnLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gZ2FzUmF0ZS50aW1lcyhnYXNFc3RpbWF0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlZCBieSBsb29raW5nIGF0IGhpc3RvcmljYWwgZGF0YSBhbmQgc2VlaW5nIHdlIGF2ZXJhZ2UgMS41IHRyYW5zYWN0aW9uc1xuICAgICAqIHBlciBqb2IuIFRoaXMgbWVhbnMgd2UgZXhwZWN0IHRvIHBheSAyLjc1IEdXRUkgcHJpb3JpdHkgZmVlIHBsdXMgdGhlIGJhc2UgZmVlLlxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRFeHBlY3RlZFRyYW5zYWN0aW9uR2FzUmF0ZUFzeW5jKCk6IFByb21pc2U8V2VpUGVyR2FzPiB7XG4gICAgICAgIGNvbnN0IGJhc2VGZWUgPSBhd2FpdCB0aGlzLl9nYXNPcmFjbGUuZ2V0QmFzZUZlZVBlckdhc1dlaUFzeW5jKCk7XG4gICAgICAgIGxvZ2dlci5pbmZvKHsgYmFzZUZlZTogYmFzZUZlZS50b1N0cmluZygpIH0sICdCYXNlIGZlZSBmb3IgZ2FzIHJhdGUgY2FsY3VsYXRpb24nKTtcbiAgICAgICAgLy8gQ3VycmVudGx5IHdlIHN1Ym1pdCBhIDIgR1dFSSB0aXAgdGhlbiBtdWx0aXBseSBpdCBieSAxLjUgcGVyIHN1Ym1pc3Npb25cbiAgICAgICAgLy8gVHJhZGVzIHRha2UgfjEuNSBzdWJtaXNzaW9ucyBvbiBhdmVyYWdlLCBzbyB0aGF0J3MgMi43NSBHV0VJXG4gICAgICAgIGNvbnN0IGF2Z01heFByaW9yaXR5RmVlUGVyR2FzUmF0ZSA9IDI3NTAwMDAwMDA7XG4gICAgICAgIHJldHVybiBiYXNlRmVlLnBsdXMoYXZnTWF4UHJpb3JpdHlGZWVQZXJHYXNSYXRlKS5pbnRlZ2VyVmFsdWUoQmlnTnVtYmVyLlJPVU5EX0NFSUwpO1xuICAgIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==