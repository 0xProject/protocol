afcc3754ff229325a9e5e3fcc2c69d48
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@0x/utils");
const logger_1 = require("../src/logger");
describe('logger', () => {
    describe('createSwapId', () => {
        it('creates a swap id', () => {
            const swapParms = {
                buyAmount: new utils_1.BigNumber(10000),
                buyToken: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',
                sellToken: '0x9a71012B13CA4d3D0Cdc72A177DF3ef03b0E76A3',
                takerAddress: '0x4Ea754349AcE5303c82f0d1D491041e042f2ad22',
            };
            const swapId = (0, logger_1.createSwapId)(swapParms);
            expect(swapId).not.toBeNull();
            if (!swapId) {
                throw new Error();
            }
            // tslint:disable-next-line: custom-no-magic-numbers
            expect(swapId).toHaveLength(16);
            expect(/[0-9A-Fa-f]{16}/.test(swapId)).toBeTruthy();
        });
        it('returns null if no taker address is present', () => {
            const swapParms = {
                buyAmount: new utils_1.BigNumber(10000),
                buyToken: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',
                sellToken: '0x9a71012B13CA4d3D0Cdc72A177DF3ef03b0E76A3',
            };
            const swapId = (0, logger_1.createSwapId)(swapParms);
            expect(swapId).toBeNull();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvbG9nZ2VyLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBc0M7QUFFdEMsMENBQTZDO0FBRTdDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO0lBQ3BCLFFBQVEsQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFO1FBQzFCLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7WUFDekIsTUFBTSxTQUFTLEdBQUc7Z0JBQ2QsU0FBUyxFQUFFLElBQUksaUJBQVMsQ0FBQyxLQUFLLENBQUM7Z0JBQy9CLFFBQVEsRUFBRSw0Q0FBNEM7Z0JBQ3RELFNBQVMsRUFBRSw0Q0FBNEM7Z0JBQ3ZELFlBQVksRUFBRSw0Q0FBNEM7YUFDN0QsQ0FBQztZQUVGLE1BQU0sTUFBTSxHQUFHLElBQUEscUJBQVksRUFBQyxTQUFTLENBQUMsQ0FBQztZQUV2QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzlCLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ1QsTUFBTSxJQUFJLEtBQUssRUFBRSxDQUFDO2FBQ3JCO1lBQ0Qsb0RBQW9EO1lBQ3BELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLEdBQUcsRUFBRTtZQUNuRCxNQUFNLFNBQVMsR0FBRztnQkFDZCxTQUFTLEVBQUUsSUFBSSxpQkFBUyxDQUFDLEtBQUssQ0FBQztnQkFDL0IsUUFBUSxFQUFFLDRDQUE0QztnQkFDdEQsU0FBUyxFQUFFLDRDQUE0QzthQUMxRCxDQUFDO1lBRUYsTUFBTSxNQUFNLEdBQUcsSUFBQSxxQkFBWSxFQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRXZDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvbG9nZ2VyLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnQDB4L3V0aWxzJztcblxuaW1wb3J0IHsgY3JlYXRlU3dhcElkIH0gZnJvbSAnLi4vc3JjL2xvZ2dlcic7XG5cbmRlc2NyaWJlKCdsb2dnZXInLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJ2NyZWF0ZVN3YXBJZCcsICgpID0+IHtcbiAgICAgICAgaXQoJ2NyZWF0ZXMgYSBzd2FwIGlkJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3dhcFBhcm1zID0ge1xuICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogbmV3IEJpZ051bWJlcigxMDAwMCksXG4gICAgICAgICAgICAgICAgYnV5VG9rZW46ICcweDBkNTAwQjFkOEU4ZUYzMUUyMUM5OWQxRGI5QTY0NDRkM0FEZjEyNzAnLFxuICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4OWE3MTAxMkIxM0NBNGQzRDBDZGM3MkExNzdERjNlZjAzYjBFNzZBMycsXG4gICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzOiAnMHg0RWE3NTQzNDlBY0U1MzAzYzgyZjBkMUQ0OTEwNDFlMDQyZjJhZDIyJyxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IHN3YXBJZCA9IGNyZWF0ZVN3YXBJZChzd2FwUGFybXMpO1xuXG4gICAgICAgICAgICBleHBlY3Qoc3dhcElkKS5ub3QudG9CZU51bGwoKTtcbiAgICAgICAgICAgIGlmICghc3dhcElkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGN1c3RvbS1uby1tYWdpYy1udW1iZXJzXG4gICAgICAgICAgICBleHBlY3Qoc3dhcElkKS50b0hhdmVMZW5ndGgoMTYpO1xuICAgICAgICAgICAgZXhwZWN0KC9bMC05QS1GYS1mXXsxNn0vLnRlc3Qoc3dhcElkKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgncmV0dXJucyBudWxsIGlmIG5vIHRha2VyIGFkZHJlc3MgaXMgcHJlc2VudCcsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN3YXBQYXJtcyA9IHtcbiAgICAgICAgICAgICAgICBidXlBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMTAwMDApLFxuICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHgwZDUwMEIxZDhFOGVGMzFFMjFDOTlkMURiOUE2NDQ0ZDNBRGYxMjcwJyxcbiAgICAgICAgICAgICAgICBzZWxsVG9rZW46ICcweDlhNzEwMTJCMTNDQTRkM0QwQ2RjNzJBMTc3REYzZWYwM2IwRTc2QTMnLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3Qgc3dhcElkID0gY3JlYXRlU3dhcElkKHN3YXBQYXJtcyk7XG5cbiAgICAgICAgICAgIGV4cGVjdChzd2FwSWQpLnRvQmVOdWxsKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=