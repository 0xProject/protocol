{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasStationAttendantEthereum.ts","mappings":";;;AAAA,qCAAsC;AACtC,sCAAmC;AAInC,uEAAiE;AAEjE;;GAEG;AACH,MAAa,2BAA2B;IAGpC,YAAY,SAAyB;QACjC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,wDAAwD;IACjD,KAAK,CAAC,2BAA2B;QACpC,OAAO,IAAI,iBAAS,CAAC,iBAAiB,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,6BAA6B;QACtC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,wBAAwB,EAAE,CAAC;QACjE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC;QACpF,eAAM,CAAC,IAAI,CACP,EAAE,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,EAClE,uCAAuC,CAC1C,CAAC;QAEF,sCAAsC;QACtC,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,+CAA+C;QACpF,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAChD,MAAM,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE/C,gDAAgD;QAChD,MAAM,WAAW,GAAG,IAAA,8CAAoB,EACpC,4CAA4C,EAAE,OAAO;QACrD,4CAA4C,EAAE,OAAO;QACrD,KAAK,EACL,IAAI,CACP,CAAC;QAEF,OAAO,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,kCAAkC;QAC3C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,wBAAwB,EAAE,CAAC;QACjE,eAAM,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,EAAE,mCAAmC,CAAC,CAAC;QAClF,0EAA0E;QAC1E,+DAA+D;QAC/D,MAAM,2BAA2B,GAAG,UAAU,CAAC;QAC/C,OAAO,OAAO,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC,YAAY,CAAC,iBAAS,CAAC,UAAU,CAAC,CAAC;IACxF,CAAC;CACJ;AA3DD,kEA2DC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasStationAttendantEthereum.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { logger } from '../logger';\n\nimport { GasOracleType2 } from './GasOracleType2';\nimport { GasStationAttendant, Wei, WeiPerGas } from './GasStationAttendant';\nimport { calculateGasEstimate } from './rfqm_gas_estimate_utils';\n\n/**\n * An implementation of `GasStationAttendant` designed for Ethereum Mainnet.\n */\nexport class GasStationAttendantEthereum implements GasStationAttendant {\n    private readonly _gasOracle: GasOracleType2;\n\n    constructor(gasOracle: GasOracleType2) {\n        this._gasOracle = gasOracle;\n    }\n\n    /**\n     * The Safe Balance For Trade is based on historical data as outlined here:\n     * https://0xproject.quip.com/qZdFAHLpT7JI/RFQm-healthz-System-Health-Endpoint#temp:C:cXH5851e0f15e8c4828bffc1339d\n     */\n    // tslint:disable-next-line: prefer-function-over-method\n    public async getSafeBalanceForTradeAsync(): Promise<Wei> {\n        return new BigNumber(82500000000000000);\n    }\n\n    /**\n     * Uses an estimate of the current base fee with 6\n     * 10% increases plus the \"instant\" maxPriorityFeePerGas\n     * as reported by the oracle.\n     *\n     * Gas amount is estimated for an unwrap of the AAVE-USDC pair.\n     */\n    public async getWorkerBalanceForTradeAsync(): Promise<WeiPerGas> {\n        const baseFee = await this._gasOracle.getBaseFeePerGasWeiAsync();\n        const instantTip = await this._gasOracle.getMaxPriorityFeePerGasWeiAsync('instant');\n        logger.info(\n            { baseFee: baseFee.toString(), instantTip: instantTip.toString() },\n            'Base fee and instant tip for gas rate',\n        );\n\n        // Pad the baseFee for 6 10% increases\n        const baseFeePad = Math.pow(1.1, 6); // tslint:disable-line: custom-no-magic-numbers\n        const paddedBaseFee = baseFee.times(baseFeePad);\n        const gasRate = paddedBaseFee.plus(instantTip);\n\n        // Use a gas estimate of a pretty high-cost pair\n        const gasEstimate = calculateGasEstimate(\n            '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9', // AAVE\n            '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', // USDC\n            'otc',\n            true,\n        );\n\n        return gasRate.times(gasEstimate);\n    }\n\n    /**\n     * Calculated by looking at historical data and seeing we average 1.5 transactions\n     * per job. This means we expect to pay 2.75 GWEI priority fee plus the base fee.\n     */\n    public async getExpectedTransactionGasRateAsync(): Promise<WeiPerGas> {\n        const baseFee = await this._gasOracle.getBaseFeePerGasWeiAsync();\n        logger.info({ baseFee: baseFee.toString() }, 'Base fee for gas rate calculation');\n        // Currently we submit a 2 GWEI tip then multiply it by 1.5 per submission\n        // Trades take ~1.5 submissions on average, so that's 2.75 GWEI\n        const avgMaxPriorityFeePerGasRate = 2750000000;\n        return baseFee.plus(avgMaxPriorityFeePerGasRate).integerValue(BigNumber.ROUND_CEIL);\n    }\n}\n"],"version":3}