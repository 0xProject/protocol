bd752b6dc9a921ce03e2291f71b8c09a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const prom_client_1 = require("prom-client");
const constants_1 = require("../core/constants");
const logger_1 = require("../logger");
const QUEUE_NAME = 'no-op';
const REMOVE_ON_COMPLETE_OPS = {
    count: 100,
};
const REMOVE_ON_FAILURE_OPS = {
    count: 100,
};
const NO_OP_SCHEDULE = '*/5 * * * *'; // job will be scheduled at every 5 minutes
const DESCRIPTION = 'A no-op background job that would sleep and increase the counter. This job is used for testing';
const backgroundJobNoOp = {
    queueName: QUEUE_NAME,
    schedule: NO_OP_SCHEDULE,
    description: DESCRIPTION,
    createAsync,
    processAsync,
};
// tslint:disable-next-line: no-default-export
exports.default = backgroundJobNoOp;
const NO_OP_PROCESS_COUNT = new prom_client_1.Counter({
    name: 'rfq_background_job_no_op_process_total',
    help: 'Number of times the processor method of the no-op background job is triggered',
});
/**
 * Create a no-op background job by pushing a message to the correponding queue with associated data.
 *
 * @param queue Queue to push the message.
 * @param data Necessary data for processor to execute the no-op background job.
 * @returns Promise of the no-op background job.
 */
async function createAsync(queue, data) {
    logger_1.logger.info({ queue: QUEUE_NAME, data }, 'Creating the no-op background job on queue');
    return queue.add(`${QUEUE_NAME}.${data.timestamp}`, data, {
        removeOnComplete: REMOVE_ON_COMPLETE_OPS,
        removeOnFail: REMOVE_ON_FAILURE_OPS,
    });
}
/**
 * Processor method for the no-op background job. Print log, sleep and increase the counter.
 *
 * @param job The no-op background job to process.
 * @returns Result of the no-op background job.
 */
async function processAsync(job) {
    await job.updateProgress(0);
    logger_1.logger.info({ jobName: job.name, queue: job.queueName, data: job.data, timestamp: Date.now() }, 'Processing the no-op background job on queue');
    // tslint:disable:custom-no-magic-numbers
    // sleep for 5 seconds
    await new Promise((resolve) => setTimeout(resolve, constants_1.ONE_SECOND_MS * 5));
    await job.updateProgress(50);
    // sleep for 5 seconds
    await new Promise((resolve) => setTimeout(resolve, constants_1.ONE_SECOND_MS * 5));
    NO_OP_PROCESS_COUNT.inc();
    await job.updateProgress(100);
    return {
        jobName: job.name,
        timestamp: Date.now(),
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9iYWNrZ3JvdW5kLWpvYnMvbm9fb3AudHMiLCJtYXBwaW5ncyI6Ijs7QUFDQSw2Q0FBc0M7QUFFdEMsaURBQWtEO0FBQ2xELHNDQUFtQztBQUluQyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUM7QUFDM0IsTUFBTSxzQkFBc0IsR0FBRztJQUMzQixLQUFLLEVBQUUsR0FBRztDQUNiLENBQUM7QUFDRixNQUFNLHFCQUFxQixHQUFHO0lBQzFCLEtBQUssRUFBRSxHQUFHO0NBQ2IsQ0FBQztBQUNGLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxDQUFDLDJDQUEyQztBQUNqRixNQUFNLFdBQVcsR0FBRyxnR0FBZ0csQ0FBQztBQVdySCxNQUFNLGlCQUFpQixHQUEyRTtJQUM5RixTQUFTLEVBQUUsVUFBVTtJQUNyQixRQUFRLEVBQUUsY0FBYztJQUN4QixXQUFXLEVBQUUsV0FBVztJQUN4QixXQUFXO0lBQ1gsWUFBWTtDQUNmLENBQUM7QUFDRiw4Q0FBOEM7QUFDOUMsa0JBQWUsaUJBQWlCLENBQUM7QUFFakMsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLHFCQUFPLENBQUM7SUFDcEMsSUFBSSxFQUFFLHdDQUF3QztJQUM5QyxJQUFJLEVBQUUsK0VBQStFO0NBQ3hGLENBQUMsQ0FBQztBQUVIOzs7Ozs7R0FNRztBQUNILEtBQUssVUFBVSxXQUFXLENBQ3RCLEtBQVksRUFDWixJQUEyQjtJQUUzQixlQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRSw0Q0FBNEMsQ0FBQyxDQUFDO0lBQ3ZGLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFO1FBQ3RELGdCQUFnQixFQUFFLHNCQUFzQjtRQUN4QyxZQUFZLEVBQUUscUJBQXFCO0tBQ3RDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILEtBQUssVUFBVSxZQUFZLENBQ3ZCLEdBQXdEO0lBRXhELE1BQU0sR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QixlQUFNLENBQUMsSUFBSSxDQUNQLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUNsRiw4Q0FBOEMsQ0FDakQsQ0FBQztJQUNGLHlDQUF5QztJQUN6QyxzQkFBc0I7SUFDdEIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSx5QkFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkUsTUFBTSxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLHNCQUFzQjtJQUN0QixNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLHlCQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RSxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMxQixNQUFNLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsT0FBTztRQUNILE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSTtRQUNqQixTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtLQUN4QixDQUFDO0FBQ04sQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvc3JjL2JhY2tncm91bmQtam9icy9ub19vcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKb2IsIFF1ZXVlIH0gZnJvbSAnYnVsbG1xJztcclxuaW1wb3J0IHsgQ291bnRlciB9IGZyb20gJ3Byb20tY2xpZW50JztcclxuXHJcbmltcG9ydCB7IE9ORV9TRUNPTkRfTVMgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cyc7XHJcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4uL2xvZ2dlcic7XHJcblxyXG5pbXBvcnQgeyBCYWNrZ3JvdW5kSm9iQmx1ZXByaW50IH0gZnJvbSAnLi9ibHVlcHJpbnQnO1xyXG5cclxuY29uc3QgUVVFVUVfTkFNRSA9ICduby1vcCc7XHJcbmNvbnN0IFJFTU9WRV9PTl9DT01QTEVURV9PUFMgPSB7XHJcbiAgICBjb3VudDogMTAwLFxyXG59O1xyXG5jb25zdCBSRU1PVkVfT05fRkFJTFVSRV9PUFMgPSB7XHJcbiAgICBjb3VudDogMTAwLFxyXG59O1xyXG5jb25zdCBOT19PUF9TQ0hFRFVMRSA9ICcqLzUgKiAqICogKic7IC8vIGpvYiB3aWxsIGJlIHNjaGVkdWxlZCBhdCBldmVyeSA1IG1pbnV0ZXNcclxuY29uc3QgREVTQ1JJUFRJT04gPSAnQSBuby1vcCBiYWNrZ3JvdW5kIGpvYiB0aGF0IHdvdWxkIHNsZWVwIGFuZCBpbmNyZWFzZSB0aGUgY291bnRlci4gVGhpcyBqb2IgaXMgdXNlZCBmb3IgdGVzdGluZyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJhY2tncm91bmRKb2JOb09wRGF0YSB7XHJcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCYWNrZ3JvdW5kSm9iTm9PcFJlc3VsdCB7XHJcbiAgICBqb2JOYW1lOiBzdHJpbmc7XHJcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcclxufVxyXG5cclxuY29uc3QgYmFja2dyb3VuZEpvYk5vT3A6IEJhY2tncm91bmRKb2JCbHVlcHJpbnQ8QmFja2dyb3VuZEpvYk5vT3BEYXRhLCBCYWNrZ3JvdW5kSm9iTm9PcFJlc3VsdD4gPSB7XHJcbiAgICBxdWV1ZU5hbWU6IFFVRVVFX05BTUUsXHJcbiAgICBzY2hlZHVsZTogTk9fT1BfU0NIRURVTEUsXHJcbiAgICBkZXNjcmlwdGlvbjogREVTQ1JJUFRJT04sXHJcbiAgICBjcmVhdGVBc3luYyxcclxuICAgIHByb2Nlc3NBc3luYyxcclxufTtcclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1kZWZhdWx0LWV4cG9ydFxyXG5leHBvcnQgZGVmYXVsdCBiYWNrZ3JvdW5kSm9iTm9PcDtcclxuXHJcbmNvbnN0IE5PX09QX1BST0NFU1NfQ09VTlQgPSBuZXcgQ291bnRlcih7XHJcbiAgICBuYW1lOiAncmZxX2JhY2tncm91bmRfam9iX25vX29wX3Byb2Nlc3NfdG90YWwnLFxyXG4gICAgaGVscDogJ051bWJlciBvZiB0aW1lcyB0aGUgcHJvY2Vzc29yIG1ldGhvZCBvZiB0aGUgbm8tb3AgYmFja2dyb3VuZCBqb2IgaXMgdHJpZ2dlcmVkJyxcclxufSk7XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGEgbm8tb3AgYmFja2dyb3VuZCBqb2IgYnkgcHVzaGluZyBhIG1lc3NhZ2UgdG8gdGhlIGNvcnJlcG9uZGluZyBxdWV1ZSB3aXRoIGFzc29jaWF0ZWQgZGF0YS5cclxuICpcclxuICogQHBhcmFtIHF1ZXVlIFF1ZXVlIHRvIHB1c2ggdGhlIG1lc3NhZ2UuXHJcbiAqIEBwYXJhbSBkYXRhIE5lY2Vzc2FyeSBkYXRhIGZvciBwcm9jZXNzb3IgdG8gZXhlY3V0ZSB0aGUgbm8tb3AgYmFja2dyb3VuZCBqb2IuXHJcbiAqIEByZXR1cm5zIFByb21pc2Ugb2YgdGhlIG5vLW9wIGJhY2tncm91bmQgam9iLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlQXN5bmMoXHJcbiAgICBxdWV1ZTogUXVldWUsXHJcbiAgICBkYXRhOiBCYWNrZ3JvdW5kSm9iTm9PcERhdGEsXHJcbik6IFByb21pc2U8Sm9iPEJhY2tncm91bmRKb2JOb09wRGF0YSwgQmFja2dyb3VuZEpvYk5vT3BSZXN1bHQ+PiB7XHJcbiAgICBsb2dnZXIuaW5mbyh7IHF1ZXVlOiBRVUVVRV9OQU1FLCBkYXRhIH0sICdDcmVhdGluZyB0aGUgbm8tb3AgYmFja2dyb3VuZCBqb2Igb24gcXVldWUnKTtcclxuICAgIHJldHVybiBxdWV1ZS5hZGQoYCR7UVVFVUVfTkFNRX0uJHtkYXRhLnRpbWVzdGFtcH1gLCBkYXRhLCB7XHJcbiAgICAgICAgcmVtb3ZlT25Db21wbGV0ZTogUkVNT1ZFX09OX0NPTVBMRVRFX09QUyxcclxuICAgICAgICByZW1vdmVPbkZhaWw6IFJFTU9WRV9PTl9GQUlMVVJFX09QUyxcclxuICAgIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogUHJvY2Vzc29yIG1ldGhvZCBmb3IgdGhlIG5vLW9wIGJhY2tncm91bmQgam9iLiBQcmludCBsb2csIHNsZWVwIGFuZCBpbmNyZWFzZSB0aGUgY291bnRlci5cclxuICpcclxuICogQHBhcmFtIGpvYiBUaGUgbm8tb3AgYmFja2dyb3VuZCBqb2IgdG8gcHJvY2Vzcy5cclxuICogQHJldHVybnMgUmVzdWx0IG9mIHRoZSBuby1vcCBiYWNrZ3JvdW5kIGpvYi5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NBc3luYyhcclxuICAgIGpvYjogSm9iPEJhY2tncm91bmRKb2JOb09wRGF0YSwgQmFja2dyb3VuZEpvYk5vT3BSZXN1bHQ+LFxyXG4pOiBQcm9taXNlPEJhY2tncm91bmRKb2JOb09wUmVzdWx0PiB7XHJcbiAgICBhd2FpdCBqb2IudXBkYXRlUHJvZ3Jlc3MoMCk7XHJcbiAgICBsb2dnZXIuaW5mbyhcclxuICAgICAgICB7IGpvYk5hbWU6IGpvYi5uYW1lLCBxdWV1ZTogam9iLnF1ZXVlTmFtZSwgZGF0YTogam9iLmRhdGEsIHRpbWVzdGFtcDogRGF0ZS5ub3coKSB9LFxyXG4gICAgICAgICdQcm9jZXNzaW5nIHRoZSBuby1vcCBiYWNrZ3JvdW5kIGpvYiBvbiBxdWV1ZScsXHJcbiAgICApO1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGU6Y3VzdG9tLW5vLW1hZ2ljLW51bWJlcnNcclxuICAgIC8vIHNsZWVwIGZvciA1IHNlY29uZHNcclxuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIE9ORV9TRUNPTkRfTVMgKiA1KSk7XHJcbiAgICBhd2FpdCBqb2IudXBkYXRlUHJvZ3Jlc3MoNTApO1xyXG4gICAgLy8gc2xlZXAgZm9yIDUgc2Vjb25kc1xyXG4gICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgT05FX1NFQ09ORF9NUyAqIDUpKTtcclxuICAgIE5PX09QX1BST0NFU1NfQ09VTlQuaW5jKCk7XHJcbiAgICBhd2FpdCBqb2IudXBkYXRlUHJvZ3Jlc3MoMTAwKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgam9iTmFtZTogam9iLm5hbWUsXHJcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgfTtcclxufVxyXG4iXSwidmVyc2lvbiI6M30=