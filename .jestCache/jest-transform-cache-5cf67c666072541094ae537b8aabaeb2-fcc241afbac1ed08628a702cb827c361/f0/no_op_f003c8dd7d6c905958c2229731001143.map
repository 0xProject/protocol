{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/background-jobs/no_op.ts","mappings":";;AACA,6CAAsC;AAEtC,iDAAkD;AAClD,sCAAmC;AAInC,MAAM,UAAU,GAAG,OAAO,CAAC;AAC3B,MAAM,sBAAsB,GAAG;IAC3B,KAAK,EAAE,GAAG;CACb,CAAC;AACF,MAAM,qBAAqB,GAAG;IAC1B,KAAK,EAAE,GAAG;CACb,CAAC;AACF,MAAM,cAAc,GAAG,aAAa,CAAC,CAAC,2CAA2C;AACjF,MAAM,WAAW,GAAG,gGAAgG,CAAC;AAWrH,MAAM,iBAAiB,GAA2E;IAC9F,SAAS,EAAE,UAAU;IACrB,QAAQ,EAAE,cAAc;IACxB,WAAW,EAAE,WAAW;IACxB,WAAW;IACX,YAAY;CACf,CAAC;AACF,8CAA8C;AAC9C,kBAAe,iBAAiB,CAAC;AAEjC,MAAM,mBAAmB,GAAG,IAAI,qBAAO,CAAC;IACpC,IAAI,EAAE,wCAAwC;IAC9C,IAAI,EAAE,+EAA+E;CACxF,CAAC,CAAC;AAEH;;;;;;GAMG;AACH,KAAK,UAAU,WAAW,CACtB,KAAY,EACZ,IAA2B;IAE3B,eAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,4CAA4C,CAAC,CAAC;IACvF,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,UAAU,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE;QACtD,gBAAgB,EAAE,sBAAsB;QACxC,YAAY,EAAE,qBAAqB;KACtC,CAAC,CAAC;AACP,CAAC;AAED;;;;;GAKG;AACH,KAAK,UAAU,YAAY,CACvB,GAAwD;IAExD,MAAM,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;IAC5B,eAAM,CAAC,IAAI,CACP,EAAE,OAAO,EAAE,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,EAClF,8CAA8C,CACjD,CAAC;IACF,yCAAyC;IACzC,sBAAsB;IACtB,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,yBAAa,GAAG,CAAC,CAAC,CAAC,CAAC;IACvE,MAAM,GAAG,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IAC7B,sBAAsB;IACtB,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,yBAAa,GAAG,CAAC,CAAC,CAAC,CAAC;IACvE,mBAAmB,CAAC,GAAG,EAAE,CAAC;IAC1B,MAAM,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;IAC9B,OAAO;QACH,OAAO,EAAE,GAAG,CAAC,IAAI;QACjB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;KACxB,CAAC;AACN,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/background-jobs/no_op.ts"],"sourcesContent":["import { Job, Queue } from 'bullmq';\r\nimport { Counter } from 'prom-client';\r\n\r\nimport { ONE_SECOND_MS } from '../core/constants';\r\nimport { logger } from '../logger';\r\n\r\nimport { BackgroundJobBlueprint } from './blueprint';\r\n\r\nconst QUEUE_NAME = 'no-op';\r\nconst REMOVE_ON_COMPLETE_OPS = {\r\n    count: 100,\r\n};\r\nconst REMOVE_ON_FAILURE_OPS = {\r\n    count: 100,\r\n};\r\nconst NO_OP_SCHEDULE = '*/5 * * * *'; // job will be scheduled at every 5 minutes\r\nconst DESCRIPTION = 'A no-op background job that would sleep and increase the counter. This job is used for testing';\r\n\r\nexport interface BackgroundJobNoOpData {\r\n    timestamp: number;\r\n}\r\n\r\nexport interface BackgroundJobNoOpResult {\r\n    jobName: string;\r\n    timestamp: number;\r\n}\r\n\r\nconst backgroundJobNoOp: BackgroundJobBlueprint<BackgroundJobNoOpData, BackgroundJobNoOpResult> = {\r\n    queueName: QUEUE_NAME,\r\n    schedule: NO_OP_SCHEDULE,\r\n    description: DESCRIPTION,\r\n    createAsync,\r\n    processAsync,\r\n};\r\n// tslint:disable-next-line: no-default-export\r\nexport default backgroundJobNoOp;\r\n\r\nconst NO_OP_PROCESS_COUNT = new Counter({\r\n    name: 'rfq_background_job_no_op_process_total',\r\n    help: 'Number of times the processor method of the no-op background job is triggered',\r\n});\r\n\r\n/**\r\n * Create a no-op background job by pushing a message to the correponding queue with associated data.\r\n *\r\n * @param queue Queue to push the message.\r\n * @param data Necessary data for processor to execute the no-op background job.\r\n * @returns Promise of the no-op background job.\r\n */\r\nasync function createAsync(\r\n    queue: Queue,\r\n    data: BackgroundJobNoOpData,\r\n): Promise<Job<BackgroundJobNoOpData, BackgroundJobNoOpResult>> {\r\n    logger.info({ queue: QUEUE_NAME, data }, 'Creating the no-op background job on queue');\r\n    return queue.add(`${QUEUE_NAME}.${data.timestamp}`, data, {\r\n        removeOnComplete: REMOVE_ON_COMPLETE_OPS,\r\n        removeOnFail: REMOVE_ON_FAILURE_OPS,\r\n    });\r\n}\r\n\r\n/**\r\n * Processor method for the no-op background job. Print log, sleep and increase the counter.\r\n *\r\n * @param job The no-op background job to process.\r\n * @returns Result of the no-op background job.\r\n */\r\nasync function processAsync(\r\n    job: Job<BackgroundJobNoOpData, BackgroundJobNoOpResult>,\r\n): Promise<BackgroundJobNoOpResult> {\r\n    await job.updateProgress(0);\r\n    logger.info(\r\n        { jobName: job.name, queue: job.queueName, data: job.data, timestamp: Date.now() },\r\n        'Processing the no-op background job on queue',\r\n    );\r\n    // tslint:disable:custom-no-magic-numbers\r\n    // sleep for 5 seconds\r\n    await new Promise((resolve) => setTimeout(resolve, ONE_SECOND_MS * 5));\r\n    await job.updateProgress(50);\r\n    // sleep for 5 seconds\r\n    await new Promise((resolve) => setTimeout(resolve, ONE_SECOND_MS * 5));\r\n    NO_OP_PROCESS_COUNT.inc();\r\n    await job.updateProgress(100);\r\n    return {\r\n        jobName: job.name,\r\n        timestamp: Date.now(),\r\n    };\r\n}\r\n"],"version":3}