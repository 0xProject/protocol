{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfq_blockchain_utils_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfq_blockchain_utils_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers no-unused-expression\r\nimport { SupportedProvider } from '@0x/subproviders';\r\nimport { BigNumber } from '@0x/utils';\r\nimport { providers, Wallet } from 'ethers';\r\nimport { anything, instance, mock, spy, when } from 'ts-mockito';\r\n\r\nimport { EXECUTE_META_TRANSACTION_EIP_712_TYPES, PERMIT_EIP_712_TYPES } from '../../src/core/constants';\r\nimport { EIP_712_REGISTRY } from '../../src/eip712registry';\r\nimport { GaslessApprovalTypes } from '../../src/core/types';\r\nimport { BalanceChecker } from '../../src/utils/balance_checker';\r\nimport { extractEIP712DomainType } from '../../src/utils/Eip712Utils';\r\nimport { RfqBlockchainUtils } from '../../src/utils/rfq_blockchain_utils';\r\n\r\nlet supportedProvider: SupportedProvider;\r\nlet balancerChecker: BalanceChecker;\r\nlet ethersProvider: providers.JsonRpcProvider;\r\nlet ethersWallet: Wallet;\r\nlet rfqBlockchainUtils: RfqBlockchainUtils;\r\n\r\nconst ACCESS_LIST_ADDR_1 = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';\r\nconst STORAGE_KEY_1 = '0x0000000000000000000000000000000000000000000000000000000000000000';\r\nconst ACCESS_LIST_ADDR_2 = '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48';\r\nconst STORAGE_KEY_2 = '0x3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff';\r\nconst CALLDATA = '0xd0e30db0';\r\nconst PROXY_ADDR = '0xdef1c0ded9bec7f1a1670819833240f027b25eff';\r\nconst FROM = '0xdef1c0ded9bec7f1a1670819833240f027b25ef1';\r\n\r\ndescribe('RfqBlockchainUtils', () => {\r\n    beforeEach(() => {\r\n        supportedProvider = mock<SupportedProvider>();\r\n        balancerChecker = mock(BalanceChecker);\r\n        ethersProvider = mock(providers.JsonRpcProvider);\r\n        ethersWallet = mock(Wallet);\r\n        rfqBlockchainUtils = new RfqBlockchainUtils(\r\n            instance(supportedProvider),\r\n            PROXY_ADDR,\r\n            instance(balancerChecker),\r\n            instance(ethersProvider),\r\n            instance(ethersWallet),\r\n        );\r\n    });\r\n\r\n    describe('createAccessListForAsync', () => {\r\n        it('returns correct TxAccessListWithGas object', async () => {\r\n            when(ethersProvider.send(anything(), anything())).thenResolve({\r\n                accessList: [\r\n                    {\r\n                        address: ACCESS_LIST_ADDR_1,\r\n                        storageKeys: [STORAGE_KEY_1],\r\n                    },\r\n                    {\r\n                        address: ACCESS_LIST_ADDR_2,\r\n                        storageKeys: [STORAGE_KEY_2],\r\n                    },\r\n                ],\r\n                gasUsed: '0x651a',\r\n            });\r\n\r\n            expect(await rfqBlockchainUtils.createAccessListForAsync({ data: CALLDATA, from: FROM })).toEqual({\r\n                accessList: {\r\n                    [ACCESS_LIST_ADDR_1]: [STORAGE_KEY_1],\r\n                    [ACCESS_LIST_ADDR_2]: [STORAGE_KEY_2],\r\n                },\r\n                gasEstimate: 25882,\r\n            });\r\n        });\r\n\r\n        it('throws exception on failed eth_createAccessList RPC call', async () => {\r\n            when(ethersProvider.send(anything(), anything())).thenReject(new Error('RPC error'));\r\n\r\n            await expect(async () => {\r\n                await rfqBlockchainUtils.createAccessListForAsync({ data: CALLDATA, from: FROM });\r\n            }).rejects.toThrow('createAccessListForAsync');\r\n        });\r\n\r\n        it('throws exception on malformed RPC response', async () => {\r\n            when(ethersProvider.send(anything(), anything())).thenResolve(1);\r\n\r\n            await expect(async () => {\r\n                await rfqBlockchainUtils.createAccessListForAsync({ data: CALLDATA, from: FROM });\r\n            }).rejects.toThrow('createAccessListForAsync');\r\n        });\r\n    });\r\n\r\n    describe('getGaslessApprovalAsync', () => {\r\n        it('returns null if a token does not exist in EIP-712 registry', async () => {\r\n            expect(await rfqBlockchainUtils.getGaslessApprovalAsync(12345, 'random', '0x1234')).toBeNull();\r\n            expect(await rfqBlockchainUtils.getGaslessApprovalAsync(137, 'random', '0x1234')).toBeNull();\r\n        });\r\n\r\n        it('returns the correct approval object for executeMetaTransaction::approve', async () => {\r\n            // Given\r\n            const executeMetaTxToken = '0x9a71012b13ca4d3d0cdc72a177df3ef03b0e76a3'; // BAL\r\n            const { domain } = EIP_712_REGISTRY[137][executeMetaTxToken];\r\n            when(ethersProvider._isProvider).thenReturn(true);\r\n            const spiedBlockchainUtils = spy(rfqBlockchainUtils);\r\n            when(spiedBlockchainUtils.getMetaTransactionNonceAsync(anything(), anything())).thenResolve(\r\n                new BigNumber('0x1'),\r\n            );\r\n\r\n            // When\r\n            const approval = await rfqBlockchainUtils.getGaslessApprovalAsync(137, executeMetaTxToken, FROM);\r\n\r\n            // Then\r\n            expect(approval).toEqual({\r\n                kind: GaslessApprovalTypes.ExecuteMetaTransaction,\r\n                eip712: {\r\n                    types: {\r\n                        ...extractEIP712DomainType(domain),\r\n                        ...EXECUTE_META_TRANSACTION_EIP_712_TYPES,\r\n                    },\r\n                    primaryType: 'MetaTransaction',\r\n                    domain,\r\n                    message: {\r\n                        nonce: 1,\r\n                        from: FROM,\r\n                        functionSignature:\r\n                            '0x095ea7b3000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\r\n                    },\r\n                },\r\n            });\r\n        });\r\n\r\n        it('returns the correct approval object for permit', async () => {\r\n            // Given\r\n            const permitToken = '0x2791bca1f2de4661ed88a30c99a7a9449aa84174'; // USDC\r\n            const { domain } = EIP_712_REGISTRY[137][permitToken];\r\n            when(ethersProvider._isProvider).thenReturn(true);\r\n            const spiedBlockchainUtils = spy(rfqBlockchainUtils);\r\n            when(spiedBlockchainUtils.getPermitNonceAsync(anything(), anything())).thenResolve(new BigNumber('0x1'));\r\n\r\n            // When\r\n            const approval = await rfqBlockchainUtils.getGaslessApprovalAsync(137, permitToken, FROM, 0);\r\n\r\n            // Then\r\n            expect(approval).toEqual({\r\n                kind: GaslessApprovalTypes.Permit,\r\n                eip712: {\r\n                    types: {\r\n                        ...extractEIP712DomainType(domain),\r\n                        ...PERMIT_EIP_712_TYPES,\r\n                    },\r\n                    primaryType: 'Permit',\r\n                    domain,\r\n                    message: {\r\n                        owner: FROM,\r\n                        spender: PROXY_ADDR,\r\n                        value: '115792089237316195423570985008687907853269984665640564039457584007913129639935', // infinite approval\r\n                        nonce: 1,\r\n                        deadline: '600', // 10 minutes from 0\r\n                    },\r\n                },\r\n            });\r\n        });\r\n    });\r\n});\r\n"],"version":3}