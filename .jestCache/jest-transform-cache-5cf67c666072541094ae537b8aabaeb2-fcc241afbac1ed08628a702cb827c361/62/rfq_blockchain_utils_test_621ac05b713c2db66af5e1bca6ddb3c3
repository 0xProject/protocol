aa7ed01a114797ba686d4eafbbe6479a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@0x/utils");
const ethers_1 = require("ethers");
const ts_mockito_1 = require("ts-mockito");
const constants_1 = require("../../src/core/constants");
const eip712registry_1 = require("../../src/eip712registry");
const types_1 = require("../../src/core/types");
const balance_checker_1 = require("../../src/utils/balance_checker");
const Eip712Utils_1 = require("../../src/utils/Eip712Utils");
const rfq_blockchain_utils_1 = require("../../src/utils/rfq_blockchain_utils");
let supportedProvider;
let balancerChecker;
let ethersProvider;
let ethersWallet;
let rfqBlockchainUtils;
const ACCESS_LIST_ADDR_1 = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';
const STORAGE_KEY_1 = '0x0000000000000000000000000000000000000000000000000000000000000000';
const ACCESS_LIST_ADDR_2 = '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48';
const STORAGE_KEY_2 = '0x3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff';
const CALLDATA = '0xd0e30db0';
const PROXY_ADDR = '0xdef1c0ded9bec7f1a1670819833240f027b25eff';
const FROM = '0xdef1c0ded9bec7f1a1670819833240f027b25ef1';
describe('RfqBlockchainUtils', () => {
    beforeEach(() => {
        supportedProvider = (0, ts_mockito_1.mock)();
        balancerChecker = (0, ts_mockito_1.mock)(balance_checker_1.BalanceChecker);
        ethersProvider = (0, ts_mockito_1.mock)(ethers_1.providers.JsonRpcProvider);
        ethersWallet = (0, ts_mockito_1.mock)(ethers_1.Wallet);
        rfqBlockchainUtils = new rfq_blockchain_utils_1.RfqBlockchainUtils((0, ts_mockito_1.instance)(supportedProvider), PROXY_ADDR, (0, ts_mockito_1.instance)(balancerChecker), (0, ts_mockito_1.instance)(ethersProvider), (0, ts_mockito_1.instance)(ethersWallet));
    });
    describe('createAccessListForAsync', () => {
        it('returns correct TxAccessListWithGas object', async () => {
            (0, ts_mockito_1.when)(ethersProvider.send((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve({
                accessList: [
                    {
                        address: ACCESS_LIST_ADDR_1,
                        storageKeys: [STORAGE_KEY_1],
                    },
                    {
                        address: ACCESS_LIST_ADDR_2,
                        storageKeys: [STORAGE_KEY_2],
                    },
                ],
                gasUsed: '0x651a',
            });
            expect(await rfqBlockchainUtils.createAccessListForAsync({ data: CALLDATA, from: FROM })).toEqual({
                accessList: {
                    [ACCESS_LIST_ADDR_1]: [STORAGE_KEY_1],
                    [ACCESS_LIST_ADDR_2]: [STORAGE_KEY_2],
                },
                gasEstimate: 25882,
            });
        });
        it('throws exception on failed eth_createAccessList RPC call', async () => {
            (0, ts_mockito_1.when)(ethersProvider.send((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReject(new Error('RPC error'));
            await expect(async () => {
                await rfqBlockchainUtils.createAccessListForAsync({ data: CALLDATA, from: FROM });
            }).rejects.toThrow('createAccessListForAsync');
        });
        it('throws exception on malformed RPC response', async () => {
            (0, ts_mockito_1.when)(ethersProvider.send((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(1);
            await expect(async () => {
                await rfqBlockchainUtils.createAccessListForAsync({ data: CALLDATA, from: FROM });
            }).rejects.toThrow('createAccessListForAsync');
        });
    });
    describe('getGaslessApprovalAsync', () => {
        it('returns null if a token does not exist in EIP-712 registry', async () => {
            expect(await rfqBlockchainUtils.getGaslessApprovalAsync(12345, 'random', '0x1234')).toBeNull();
            expect(await rfqBlockchainUtils.getGaslessApprovalAsync(137, 'random', '0x1234')).toBeNull();
        });
        it('returns the correct approval object for executeMetaTransaction::approve', async () => {
            // Given
            const executeMetaTxToken = '0x9a71012b13ca4d3d0cdc72a177df3ef03b0e76a3'; // BAL
            const { domain } = eip712registry_1.EIP_712_REGISTRY[137][executeMetaTxToken];
            (0, ts_mockito_1.when)(ethersProvider._isProvider).thenReturn(true);
            const spiedBlockchainUtils = (0, ts_mockito_1.spy)(rfqBlockchainUtils);
            (0, ts_mockito_1.when)(spiedBlockchainUtils.getMetaTransactionNonceAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(new utils_1.BigNumber('0x1'));
            // When
            const approval = await rfqBlockchainUtils.getGaslessApprovalAsync(137, executeMetaTxToken, FROM);
            // Then
            expect(approval).toEqual({
                kind: types_1.GaslessApprovalTypes.ExecuteMetaTransaction,
                eip712: {
                    types: {
                        ...(0, Eip712Utils_1.extractEIP712DomainType)(domain),
                        ...constants_1.EXECUTE_META_TRANSACTION_EIP_712_TYPES,
                    },
                    primaryType: 'MetaTransaction',
                    domain,
                    message: {
                        nonce: 1,
                        from: FROM,
                        functionSignature: '0x095ea7b3000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
                    },
                },
            });
        });
        it('returns the correct approval object for permit', async () => {
            // Given
            const permitToken = '0x2791bca1f2de4661ed88a30c99a7a9449aa84174'; // USDC
            const { domain } = eip712registry_1.EIP_712_REGISTRY[137][permitToken];
            (0, ts_mockito_1.when)(ethersProvider._isProvider).thenReturn(true);
            const spiedBlockchainUtils = (0, ts_mockito_1.spy)(rfqBlockchainUtils);
            (0, ts_mockito_1.when)(spiedBlockchainUtils.getPermitNonceAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(new utils_1.BigNumber('0x1'));
            // When
            const approval = await rfqBlockchainUtils.getGaslessApprovalAsync(137, permitToken, FROM, 0);
            // Then
            expect(approval).toEqual({
                kind: types_1.GaslessApprovalTypes.Permit,
                eip712: {
                    types: {
                        ...(0, Eip712Utils_1.extractEIP712DomainType)(domain),
                        ...constants_1.PERMIT_EIP_712_TYPES,
                    },
                    primaryType: 'Permit',
                    domain,
                    message: {
                        owner: FROM,
                        spender: PROXY_ADDR,
                        value: '115792089237316195423570985008687907853269984665640564039457584007913129639935',
                        nonce: 1,
                        deadline: '600', // 10 minutes from 0
                    },
                },
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,