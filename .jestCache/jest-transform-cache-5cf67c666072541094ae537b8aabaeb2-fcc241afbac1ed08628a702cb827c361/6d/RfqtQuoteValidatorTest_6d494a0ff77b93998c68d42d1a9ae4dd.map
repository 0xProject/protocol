{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/RfqtQuoteValidatorTest.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/RfqtQuoteValidatorTest.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { Integrator } from '../../src/config';\nimport { ONE_MINUTE_MS, ONE_SECOND_MS } from '../../src/core/constants';\nimport { QuoteContext } from '../../src/services/types';\n\nimport { RfqtV2Price } from '../../src/core/types';\nimport { getRfqtV2FillableAmounts, validateV2Prices } from '../../src/utils/RfqtQuoteValidator';\n\ndescribe('Rfqt Quote Validator', () => {\n    const chainId = 1337;\n    const integrator: Integrator = {\n        allowedChainIds: [chainId],\n        apiKeys: [],\n        integratorId: 'integrator-id',\n        label: 'test integrator',\n        plp: false,\n        rfqm: false,\n        rfqt: true,\n    };\n    const quoteContext: QuoteContext = {\n        isFirm: false,\n        workflow: 'rfqt',\n        isUnwrap: false,\n        originalMakerToken: '0x1',\n        takerTokenDecimals: 18,\n        makerTokenDecimals: 18,\n        feeModelVersion: 1,\n        assetFillAmount: new BigNumber(111),\n        chainId,\n        integrator,\n        makerToken: '0x1',\n        isSelling: false,\n        takerAddress: '0x0',\n        takerToken: '0x2',\n        txOrigin: '0xtakeraddress',\n    };\n    const nowTimeS = new BigNumber(Date.now()).div(ONE_SECOND_MS);\n    const validPrices: RfqtV2Price[] = [\n        {\n            expiry: nowTimeS.plus(75),\n            makerAddress: '0xmaker1',\n            makerAmount: new BigNumber(111),\n            makerId: 'uuid-maker1',\n            makerToken: '0x1',\n            makerUri: 'maker1.xyz',\n            takerAmount: new BigNumber(111),\n            takerToken: '0x2',\n        },\n        {\n            expiry: nowTimeS.plus(75),\n            makerAddress: '0xmaker2',\n            makerAmount: new BigNumber(111),\n            makerId: 'uuid-maker2',\n            makerToken: '0x1',\n            makerUri: 'maker2.xyz',\n            takerAmount: new BigNumber(111),\n            takerToken: '0x2',\n        },\n    ];\n    const validityWindowMs = ONE_MINUTE_MS;\n\n    describe('validateV2Prices', () => {\n        it('filters fetched prices for the wrong pair', () => {\n            const prices: RfqtV2Price[] = [\n                ...validPrices,\n                {\n                    expiry: nowTimeS.plus(75),\n                    makerAddress: '0xmaker3',\n                    makerAmount: new BigNumber(111),\n                    makerId: 'uuid-maker3',\n                    makerToken: '0x1',\n                    makerUri: 'maker3.xyz',\n                    takerAmount: new BigNumber(111),\n                    takerToken: '0x3',\n                },\n            ];\n            const validatedPrices = validateV2Prices(prices, quoteContext, validityWindowMs);\n            expect(validatedPrices).toEqual(validPrices);\n        });\n\n        it('filters fetched prices with tight expiration windows', () => {\n            const prices: RfqtV2Price[] = [\n                ...validPrices,\n                {\n                    expiry: nowTimeS.plus(59),\n                    makerAddress: '0xmaker3',\n                    makerAmount: new BigNumber(111),\n                    makerId: 'uuid-maker3',\n                    makerToken: '0x1',\n                    makerUri: 'maker3.xyz',\n                    takerAmount: new BigNumber(111),\n                    takerToken: '0x2',\n                },\n            ];\n            const validatedPrices = validateV2Prices(prices, quoteContext, validityWindowMs);\n            expect(validatedPrices).toEqual(validPrices);\n        });\n\n        it('returns an empty array from empty prices', () => {\n            const emptyPrices = validateV2Prices([], quoteContext, validityWindowMs);\n            expect(emptyPrices).toEqual([]);\n        });\n    });\n\n    describe('getRfqtV2FillableAmounts', () => {\n        it('returns full amounts for fully fillable orders', () => {\n            const quotedMakerBalances = [new BigNumber(1000), new BigNumber(1000)];\n            const fillableAmounts = getRfqtV2FillableAmounts(validPrices, chainId, quotedMakerBalances);\n            expect(fillableAmounts).toEqual([\n                { fillableMakerAmount: new BigNumber(111), fillableTakerAmount: new BigNumber(111) },\n                { fillableMakerAmount: new BigNumber(111), fillableTakerAmount: new BigNumber(111) },\n            ]);\n        });\n\n        it('returns full amounts if maker balances are not present', () => {\n            const fillableAmounts = getRfqtV2FillableAmounts(validPrices, chainId);\n            expect(fillableAmounts).toEqual([\n                { fillableMakerAmount: new BigNumber(111), fillableTakerAmount: new BigNumber(111) },\n                { fillableMakerAmount: new BigNumber(111), fillableTakerAmount: new BigNumber(111) },\n            ]);\n        });\n\n        it('returns partial amounts if a maker does not have enough balance', () => {\n            const quotedMakerBalances = [new BigNumber(1000), new BigNumber(10)];\n            const fillableAmounts = getRfqtV2FillableAmounts(validPrices, chainId, quotedMakerBalances);\n            expect(fillableAmounts).toEqual([\n                { fillableMakerAmount: new BigNumber(111), fillableTakerAmount: new BigNumber(111) },\n                { fillableMakerAmount: new BigNumber(10), fillableTakerAmount: new BigNumber(10) },\n            ]);\n        });\n\n        it('returns zero amounts if a maker has zero balance', () => {\n            const quotedMakerBalances = [new BigNumber(1000), new BigNumber(0)];\n            const fillableAmounts = getRfqtV2FillableAmounts(validPrices, chainId, quotedMakerBalances);\n            expect(fillableAmounts).toEqual([\n                { fillableMakerAmount: new BigNumber(111), fillableTakerAmount: new BigNumber(111) },\n                { fillableMakerAmount: new BigNumber(0), fillableTakerAmount: new BigNumber(0) },\n            ]);\n        });\n\n        it('returns zero amounts if supplied maker amount is zero', () => {\n            const prices = [\n                {\n                    expiry: nowTimeS.plus(75),\n                    makerAddress: '0xmaker3',\n                    makerAmount: new BigNumber(0),\n                    makerId: 'uuid-maker3',\n                    makerToken: '0x1',\n                    makerUri: 'maker3.xyz',\n                    takerAmount: new BigNumber(111),\n                    takerToken: '0x2',\n                },\n            ];\n            const quotedMakerBalances = [new BigNumber(1000)];\n            const fillableAmounts = getRfqtV2FillableAmounts(prices, chainId, quotedMakerBalances);\n            expect(fillableAmounts).toEqual([\n                { fillableMakerAmount: new BigNumber(0), fillableTakerAmount: new BigNumber(0) },\n            ]);\n        });\n    });\n});\n"],"version":3}