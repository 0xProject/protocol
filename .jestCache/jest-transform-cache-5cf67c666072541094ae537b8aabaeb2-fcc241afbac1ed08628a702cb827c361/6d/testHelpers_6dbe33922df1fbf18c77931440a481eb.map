{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/quoteRequestor/__tests__/testHelpers.ts","mappings":";;;AAAA,iCAA6C;AAC7C,2DAAkD;AAClD,4BAA4B;AAG5B,IAAY,gBAGX;AAHD,WAAY,gBAAgB;IACxB,wCAAoB,CAAA;IACpB,kCAAc,CAAA;AAClB,CAAC,EAHW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAG3B;AAEY,QAAA,WAAW,GAAG;IACvB;;;OAGG;IACH,mBAAmB,EAAE,KAAK,EACtB,uBAAiD,EACjD,kBAA+C,EAC/C,SAA2B,EAC3B,qBAA0C,EAC1C,cAA6B,eAAK,EACrB,EAAE;QACf,6DAA6D;QAC7D,8DAA8D;QAC9D,MAAM,WAAW,GAAG,IAAI,4BAAgB,CAAC,WAAW,EAAE,EAAE,SAAS,EAAE,gBAAgB,EAAS,CAAC,CAAC;QAC9F,IAAI;YACA,sCAAsC;YACtC,KAAK,MAAM,cAAc,IAAI,uBAAuB,EAAE;gBAClD,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,cAAc,CAAC;gBAC9F,MAAM,cAAc,GAAG;oBACnB,MAAM,EAAE,mCAAmC;oBAC3C,YAAY,EAAE,aAAa;oBAC3B,kBAAkB,EAAE,aAAa;iBACpC,CAAC;gBACF,IAAI,cAAc,CAAC,QAAQ,KAAK,SAAS,EAAE;oBACvC,WAAW;yBACN,KAAK,CAAC,GAAG,QAAQ,IAAI,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,EAAE,cAAc,CAAC;wBAC7E,8DAA8D;yBAC7D,KAAK,CAAC,cAAc,CAAC,QAAe,CAAC,CAAC;iBAC9C;qBAAM;oBACH,WAAW;yBACN,KAAK,CAAC,GAAG,QAAQ,IAAI,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,EAAE,cAAc,CAAC;yBAC5E,SAAS,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;iBAC9C;aACJ;YACD,iCAAiC;YACjC,KAAK,MAAM,cAAc,IAAI,kBAAkB,EAAE;gBAC7C,MAAM,EAAE,QAAQ,EAAE,eAAe,CAAC,WAAW,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,cAAc,CAAC;gBAC7F,kCAAkC;gBAClC,2BAA2B;gBAC3B,mDAAmD;gBACnD,wDAAwD;gBACxD,2CAA2C;gBAC3C,KAAK;gBACL,WAAW;qBACN,MAAM,CACH,GAAG,QAAQ,SAAS;gBACpB,sDAAsD;gBACtD,yCAAyC;gBACzC;oBACI,6DAA6D;oBAC7D,8DAA8D;oBAC9D,eAAe,EAAE,CAAC,CAAM,EAAE,EAAE;wBACxB,OAAO,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;oBACrC,CAAC;iBACJ,CAGJ;qBACA,SAAS,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;aAC9C;YACD,wDAAwD;YACxD,MAAM,qBAAqB,EAAE,CAAC;SACjC;gBAAS;YACN,4CAA4C;YAC5C,WAAW,CAAC,OAAO,EAAE,CAAC;SACzB;IACL,CAAC;CACJ,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/quoteRequestor/__tests__/testHelpers.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport AxiosMockAdapter from 'axios-mock-adapter';\nimport * as _ from 'lodash';\nimport { AltMockedRfqQuoteResponse, MockedRfqQuoteResponse } from '../altMmTypes';\n\nexport enum RfqQuoteEndpoint {\n    Indicative = 'price',\n    Firm = 'quote',\n}\n\nexport const testHelpers = {\n    /**\n     * A helper utility for testing which mocks out\n     * requests to RFQ-T/M providers\n     */\n    withMockedRfqQuotes: async (\n        standardMockedResponses: MockedRfqQuoteResponse[],\n        altMockedResponses: AltMockedRfqQuoteResponse[],\n        quoteType: RfqQuoteEndpoint,\n        afterResponseCallback: () => Promise<void>,\n        axiosClient: AxiosInstance = axios,\n    ): Promise<void> => {\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const mockedAxios = new AxiosMockAdapter(axiosClient, { onNoMatch: 'throwException' } as any);\n        try {\n            // Mock out Standard RFQ-T/M responses\n            for (const mockedResponse of standardMockedResponses) {\n                const { endpoint, requestApiKey, requestParams, responseData, responseCode } = mockedResponse;\n                const requestHeaders = {\n                    Accept: 'application/json, text/plain, */*',\n                    '0x-api-key': requestApiKey,\n                    '0x-integrator-id': requestApiKey,\n                };\n                if (mockedResponse.callback !== undefined) {\n                    mockedAxios\n                        .onGet(`${endpoint}/${quoteType}`, { params: requestParams }, requestHeaders)\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        .reply(mockedResponse.callback as any);\n                } else {\n                    mockedAxios\n                        .onGet(`${endpoint}/${quoteType}`, { params: requestParams }, requestHeaders)\n                        .replyOnce(responseCode, responseData);\n                }\n            }\n            // Mock out Alt RFQ-T/M responses\n            for (const mockedResponse of altMockedResponses) {\n                const { endpoint, /* mmApiKey, */ requestData, responseData, responseCode } = mockedResponse;\n                // Commented out during copy-paste\n                // const requestHeaders = {\n                //     Accept: 'application/json, text/plain, */*',\n                //     'Content-Type': 'application/json;charset=utf-8',\n                //     Authorization: `Bearer ${mmApiKey}`,\n                // };\n                mockedAxios\n                    .onPost(\n                        `${endpoint}/quotes`,\n                        // hack to get AxiosMockAdapter to recognize the match\n                        // b/t the mock data and the request data\n                        {\n                            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            asymmetricMatch: (x: any) => {\n                                return _.isEqual(requestData, x);\n                            },\n                        },\n                        // commented out to avoid over-specifying what the mock will match on.\n                        // requestHeaders,\n                    )\n                    .replyOnce(responseCode, responseData);\n            }\n            // Perform the callback function, e.g. a test validation\n            await afterResponseCallback();\n        } finally {\n            // Ensure we always restore axios afterwards\n            mockedAxios.restore();\n        }\n    },\n};\n"],"version":3}