{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfq_maker_manager.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfq_maker_manager.ts"],"sourcesContent":["import { RfqMakerAssetOfferings } from '@0x/asset-swapper';\r\nimport * as EventEmitter from 'events';\r\nimport { Counter, Summary } from 'prom-client';\r\n\r\nimport { MakerIdSet, RfqWorkFlowType, RFQ_MAKER_REFRESH_INTERVAL_MS } from '../config';\r\nimport { RfqMaker } from '../entities';\r\nimport { logger } from '../logger';\r\n\r\nimport { ConfigManager } from './config_manager';\r\nimport { toPairString } from '../core/pair_utils';\r\nimport { RfqMakerDbUtils } from './rfq_maker_db_utils';\r\n\r\nconst RFQ_MAKER_REFRESH_FAILED = new Counter({\r\n    name: 'rfq_maker_refresh_failed',\r\n    help: 'A maker refreshing job failed.',\r\n    labelNames: ['chainId'],\r\n});\r\nconst RFQ_MAKER_REFRESH_SUCCEEDED = new Counter({\r\n    name: 'rfq_maker_refresh_succeeded',\r\n    help: 'A maker refreshing job succeeded.',\r\n    labelNames: ['chainId'],\r\n});\r\nconst RFQ_MAKER_REFRESH_LATENCY = new Summary({\r\n    name: 'rfq_maker_refresh_latency',\r\n    help: 'Latency for the maker maker refreshing job.',\r\n    labelNames: ['chainId'],\r\n});\r\n\r\n/**\r\n * Filters an array of makers (fetched from the database) to remove\r\n * those (1) not in the set `ids`, and (2) who have no URI set for the\r\n * given `workflow`\r\n */\r\nfunction filterMakers(makers: RfqMaker[], workflow: RfqWorkFlowType, ids: MakerIdSet): RfqMaker[] {\r\n    return makers.filter(\r\n        (maker: RfqMaker) =>\r\n            ids.has(maker.makerId) &&\r\n            ((workflow === 'rfqm' && maker.rfqmUri !== null) || (workflow === 'rfqt' && maker.rfqtUri !== null)),\r\n    );\r\n}\r\n\r\n/**\r\n * Transforms an array of makers into their asset offerings for a given workflow\r\n */\r\nfunction makersToAssetOfferings(makers: RfqMaker[], workflow: RfqWorkFlowType): RfqMakerAssetOfferings {\r\n    return makers.reduce((result: RfqMakerAssetOfferings, m) => {\r\n        const uri: string | null = workflow === 'rfqm' ? m.rfqmUri : m.rfqtUri;\r\n\r\n        if (!uri) {\r\n            throw new Error();\r\n        }\r\n        result[uri] = m.pairs;\r\n        return result;\r\n    }, {});\r\n}\r\n\r\n/**\r\n * Filters the given `makers` to only those trading on the given `pair`\r\n */\r\nfunction makersForPair(makers: RfqMaker[], pair: string): RfqMaker[] {\r\n    return makers.filter((m: RfqMaker) => {\r\n        return m.pairs.map((p) => toPairString(...p)).includes(pair);\r\n    });\r\n}\r\n\r\n/**\r\n * Unifies the maker configuration collected from environment variables\r\n * and the `rfq_maker_pairs` database. Once initialized, refreshes itself\r\n * per the `RFQ_MAKER_REFRESH_INTERVAL_MS` configuration variable.\r\n *\r\n * Usage:\r\n * // Instantiate instance\r\n * const rfqMakerManager = new RfqMakerManager(configManager, dbUtils, chainId);\r\n * // Initialize\r\n * await rfqMakerManager.initializeAsync();\r\n */\r\nexport class RfqMakerManager extends EventEmitter {\r\n    public static REFRESHED_EVENT = 'refreshed';\r\n\r\n    private _rfqmMakers: RfqMaker[];\r\n    private _rfqtV1Makers: RfqMaker[];\r\n    private _rfqtV2Makers: RfqMaker[];\r\n\r\n    private _rfqMakerListUpdateHash: string | null;\r\n\r\n    constructor(\r\n        private readonly _configManager: ConfigManager,\r\n        private readonly _dbUtils: RfqMakerDbUtils,\r\n        private readonly _chainId: number,\r\n    ) {\r\n        super();\r\n\r\n        this._rfqmMakers = [];\r\n        this._rfqtV1Makers = [];\r\n        this._rfqtV2Makers = [];\r\n\r\n        this._rfqMakerListUpdateHash = null;\r\n    }\r\n\r\n    /**\r\n     * Initialize RfqMaker entities and set up periodical refreshing\r\n     */\r\n    public async initializeAsync(): Promise<void> {\r\n        await this._refreshAsync();\r\n\r\n        setInterval(async () => {\r\n            await this._refreshAsync();\r\n        }, RFQ_MAKER_REFRESH_INTERVAL_MS);\r\n    }\r\n\r\n    /**\r\n     * Get the RfqMakerAssetOfferings for rfqt orders with rfq order type\r\n     */\r\n    public getRfqtV1MakerOfferings(): RfqMakerAssetOfferings {\r\n        return makersToAssetOfferings(this._rfqtV1Makers, 'rfqt');\r\n    }\r\n\r\n    /**\r\n     * Get the Rfqt MakerAssetOfferings for Otc Order\r\n     */\r\n    public getRfqtV2MakerOfferings(): RfqMakerAssetOfferings {\r\n        return makersToAssetOfferings(this._rfqtV2Makers, 'rfqt');\r\n    }\r\n\r\n    /**\r\n     * Returns the `RfqMaker` entities trading the given token pair\r\n     * on RFQt V2\r\n     */\r\n    public getRfqtV2MakersForPair(tokenAAddress: string, tokenBAddress: string): RfqMaker[] {\r\n        return makersForPair(this._rfqtV2Makers, toPairString(tokenAAddress, tokenBAddress)) || [];\r\n    }\r\n\r\n    /**\r\n     * Get the RfqMakerAssetOfferings for RFQm orders.\r\n     * As of Q1 2022, the RFQ order type has been deprecated\r\n     * and only OTC orders are used on RFQm.\r\n     */\r\n    public getRfqmV2MakerOfferings(): RfqMakerAssetOfferings {\r\n        return makersToAssetOfferings(this._rfqmMakers, 'rfqm');\r\n    }\r\n\r\n    /**\r\n     * Get a list of RFQm Maker Uris that support this pair on OtcOrder\r\n     */\r\n    public getRfqmV2MakerUrisForPair(\r\n        makerToken: string,\r\n        takerToken: string,\r\n        whitelistMakerIds: string[] | null = null,\r\n        blacklistMakerIds: string[] | null = null,\r\n    ): string[] {\r\n        let makers = makersForPair(this._rfqmMakers, toPairString(makerToken, takerToken)) || [];\r\n\r\n        if (whitelistMakerIds !== null) {\r\n            makers = makers.filter((maker) => whitelistMakerIds.includes(maker.makerId));\r\n        }\r\n        if (blacklistMakerIds !== null) {\r\n            makers = makers.filter((maker) => !blacklistMakerIds.includes(maker.makerId));\r\n        }\r\n\r\n        return makers.map((m) => m.rfqmUri).filter((uri: string | null): uri is string => uri !== null);\r\n    }\r\n\r\n    /**\r\n     * Find maker ID from its RFQm URI\r\n     */\r\n    public findMakerIdWithRfqmUri(makerRfqmUri: string): string | null {\r\n        const maker = this._rfqmMakers.find((m) => m.rfqmUri === makerRfqmUri);\r\n        return maker?.makerId || null;\r\n    }\r\n\r\n    /**\r\n     * Refresh RfqMaker entities by querying database.\r\n     * Emit an 'refreshed' event for subscribers to refresh if the operation is successful.\r\n     */\r\n    private async _refreshAsync(): Promise<void> {\r\n        const chainId = this._chainId;\r\n        const refreshTime = new Date();\r\n        const timerStopFunction = RFQ_MAKER_REFRESH_LATENCY.labels(chainId.toString()).startTimer();\r\n\r\n        try {\r\n            const rfqMakerListUpdateHash = await this._dbUtils.getRfqMakersUpdateTimeHashAsync(chainId);\r\n            if (rfqMakerListUpdateHash === this._rfqMakerListUpdateHash) {\r\n                return;\r\n            }\r\n            this._rfqMakerListUpdateHash = rfqMakerListUpdateHash;\r\n\r\n            const rfqMakerList = await this._dbUtils.getRfqMakersAsync(chainId);\r\n\r\n            this._rfqtV1Makers = filterMakers(rfqMakerList, 'rfqt', this._configManager.getRfqtMakerIdSetForRfqOrder());\r\n            this._rfqtV2Makers = filterMakers(rfqMakerList, 'rfqt', this._configManager.getRfqtMakerIdSetForOtcOrder());\r\n            this._rfqmMakers = filterMakers(rfqMakerList, 'rfqm', this._configManager.getRfqmMakerIdSetForOtcOrder());\r\n\r\n            this.emit(RfqMakerManager.REFRESHED_EVENT);\r\n\r\n            logger.info({ chainId, refreshTime }, `Successfully refreshed makers.`);\r\n            RFQ_MAKER_REFRESH_SUCCEEDED.labels(chainId.toString()).inc();\r\n        } catch (error) {\r\n            logger.error({ chainId, refreshTime, errorMessage: error.message }, `Failed to refresh makers.`);\r\n            RFQ_MAKER_REFRESH_FAILED.labels(chainId.toString()).inc();\r\n        } finally {\r\n            timerStopFunction();\r\n        }\r\n    }\r\n}\r\n"],"version":3}