db8199c8e46ae79dbe5a9ddec216d608
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asset_swapper_1 = require("@0x/asset-swapper");
const utils_1 = require("@0x/utils");
const chai_1 = require("chai");
const ts_mockito_1 = require("ts-mockito");
const constants_1 = require("../../src/core/constants");
const RfqmV2TransactionSubmissionEntity_1 = require("../../src/entities/RfqmV2TransactionSubmissionEntity");
const types_1 = require("../../src/entities/types");
const GasStationAttendantPolygon_1 = require("../../src/utils/GasStationAttendantPolygon");
const rfq_blockchain_utils_1 = require("../../src/utils/rfq_blockchain_utils");
const SubmissionContext_1 = require("../../src/utils/SubmissionContext");
let protocolFeeUtilsMock;
describe('GasStationAttendantPolygon', () => {
    beforeAll(() => {
        protocolFeeUtilsMock = (0, ts_mockito_1.mock)(asset_swapper_1.ProtocolFeeUtils);
    });
    describe('getWorkerBalanceForTradeAsync', () => {
        it('gets the balance to trade', async () => {
            (0, ts_mockito_1.when)(protocolFeeUtilsMock.getGasPriceEstimationOrThrowAsync()).thenResolve(new utils_1.BigNumber(1000).shiftedBy(constants_1.GWEI_DECIMALS));
            const attendant = new GasStationAttendantPolygon_1.GasStationAttendantPolygon((0, ts_mockito_1.instance)(protocolFeeUtilsMock));
            const workerGasToTrade = await attendant.getWorkerBalanceForTradeAsync();
            // 1000 GWEI * (1.1^3) = 1331
            // Gas estimate = 100,000 * 1.1 = 110,000
            // Totol = 1331 * 110,000 = 146,410,000 GWEI
            (0, chai_1.expect)(workerGasToTrade.toPrecision(2).toString()).to.equal(
            // tslint:disable-next-line: custom-no-magic-numbers
            new utils_1.BigNumber(146410000).times(Math.pow(10, constants_1.GWEI_DECIMALS)).toPrecision(2).toString());
        });
    });
    describe('getExpectedTransactionGasRateAsync', () => {
        it('estimates the transaction gas rate', async () => {
            (0, ts_mockito_1.when)(protocolFeeUtilsMock.getGasPriceEstimationOrThrowAsync()).thenResolve(new utils_1.BigNumber(666).shiftedBy(constants_1.GWEI_DECIMALS));
            const attendant = new GasStationAttendantPolygon_1.GasStationAttendantPolygon((0, ts_mockito_1.instance)(protocolFeeUtilsMock));
            const gasRate = await attendant.getExpectedTransactionGasRateAsync();
            // 666 * 1.1^1.5 = 768.35736217 GWEI
            (0, chai_1.expect)(gasRate.toString()).to.equal(
            // tslint:disable-next-line: custom-no-magic-numbers
            new utils_1.BigNumber(768.35736217)
                .times(Math.pow(10, constants_1.GWEI_DECIMALS))
                .integerValue(utils_1.BigNumber.ROUND_CEIL)
                .toString());
        });
    });
    describe('getNextBidAsync', () => {
        it('gets an initial minimum bid (30 GWEi)', async () => {
            var _a, _b;
            (0, ts_mockito_1.when)(protocolFeeUtilsMock.getGasPriceEstimationOrThrowAsync()).thenResolve(new utils_1.BigNumber(0));
            const attendant = new GasStationAttendantPolygon_1.GasStationAttendantPolygon((0, ts_mockito_1.instance)(protocolFeeUtilsMock));
            const gasRate = await attendant.getNextBidAsync(null);
            (0, chai_1.expect)((_a = gasRate === null || gasRate === void 0 ? void 0 : gasRate.maxPriorityFeePerGas) === null || _a === void 0 ? void 0 : _a.toString()).to.equal(new utils_1.BigNumber(0).toString());
            (0, chai_1.expect)((_b = gasRate === null || gasRate === void 0 ? void 0 : gasRate.maxFeePerGas) === null || _b === void 0 ? void 0 : _b.toString()).to.equal(new utils_1.BigNumber(30).times(Math.pow(10, constants_1.GWEI_DECIMALS)).toString());
        });
        it('gets an initial bid when there are no existing transactions', async () => {
            var _a, _b;
            (0, ts_mockito_1.when)(protocolFeeUtilsMock.getGasPriceEstimationOrThrowAsync()).thenResolve(new utils_1.BigNumber(212).shiftedBy(constants_1.GWEI_DECIMALS));
            const attendant = new GasStationAttendantPolygon_1.GasStationAttendantPolygon((0, ts_mockito_1.instance)(protocolFeeUtilsMock));
            const gasRate = await attendant.getNextBidAsync(null);
            const initialMaxPriorityFeePerGasWei = new utils_1.BigNumber(212).times(Math.pow(10, constants_1.GWEI_DECIMALS));
            const initialMaxFeePerGasWei = new utils_1.BigNumber(/* base fee */ 1)
                .times(Math.pow(10, constants_1.GWEI_DECIMALS))
                .plus(initialMaxPriorityFeePerGasWei);
            (0, chai_1.expect)((_a = gasRate === null || gasRate === void 0 ? void 0 : gasRate.maxPriorityFeePerGas) === null || _a === void 0 ? void 0 : _a.toString()).to.equal(initialMaxPriorityFeePerGasWei.toString());
            (0, chai_1.expect)((_b = gasRate === null || gasRate === void 0 ? void 0 : gasRate.maxFeePerGas) === null || _b === void 0 ? void 0 : _b.toString()).to.equal(initialMaxFeePerGasWei.toString());
        });
        it('calculates a resubmit bid when the fast gas rises', async () => {
            var _a, _b;
            (0, ts_mockito_1.when)(protocolFeeUtilsMock.getGasPriceEstimationOrThrowAsync()).thenResolve(new utils_1.BigNumber(212).shiftedBy(constants_1.GWEI_DECIMALS));
            const transaction1 = new RfqmV2TransactionSubmissionEntity_1.RfqmV2TransactionSubmissionEntity({
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(3),
                maxPriorityFeePerGas: new utils_1.BigNumber(2),
                type: types_1.RfqmTransactionSubmissionType.Trade,
            });
            const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils)), [transaction1]);
            const attendant = new GasStationAttendantPolygon_1.GasStationAttendantPolygon((0, ts_mockito_1.instance)(protocolFeeUtilsMock));
            const gasRate = await attendant.getNextBidAsync(submissionContext);
            // Previous submission gas prices were 2 tip, 3 max
            // new tip = 212 GWEI
            // base fee = 1 GWEI
            // total = 213 GWEI
            (0, chai_1.expect)((_a = gasRate === null || gasRate === void 0 ? void 0 : gasRate.maxPriorityFeePerGas) === null || _a === void 0 ? void 0 : _a.toString()).to.equal(new utils_1.BigNumber(212).times(Math.pow(10, constants_1.GWEI_DECIMALS)).toString());
            (0, chai_1.expect)((_b = gasRate === null || gasRate === void 0 ? void 0 : gasRate.maxFeePerGas) === null || _b === void 0 ? void 0 : _b.toString()).to.equal(new utils_1.BigNumber(213).times(Math.pow(10, constants_1.GWEI_DECIMALS)).toString());
        });
        it('calculates a resubmit bid with the minimum max fee per gas increase', async () => {
            var _a, _b;
            (0, ts_mockito_1.when)(protocolFeeUtilsMock.getGasPriceEstimationOrThrowAsync()).thenResolve(new utils_1.BigNumber(0));
            const transaction1 = new RfqmV2TransactionSubmissionEntity_1.RfqmV2TransactionSubmissionEntity({
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(101).times(Math.pow(10, constants_1.GWEI_DECIMALS)),
                maxPriorityFeePerGas: new utils_1.BigNumber(100).times(Math.pow(10, constants_1.GWEI_DECIMALS)),
                type: types_1.RfqmTransactionSubmissionType.Trade,
            });
            const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils)), [transaction1]);
            const attendant = new GasStationAttendantPolygon_1.GasStationAttendantPolygon((0, ts_mockito_1.instance)(protocolFeeUtilsMock));
            const gasRate = await attendant.getNextBidAsync(submissionContext);
            // Previous submission gas prices were 100 tip, 101 toatl (GWEI)
            // new tip = 100 * 1.1 = 110 GWEI
            // Base Fee is always 1 GWEI
            // Max fee per gas = 110 + 1 = 111 GWEI
            //
            // BUT needs at least a 10% increase so 111.1
            (0, chai_1.expect)((_a = gasRate === null || gasRate === void 0 ? void 0 : gasRate.maxPriorityFeePerGas) === null || _a === void 0 ? void 0 : _a.toString()).to.equal(new utils_1.BigNumber(110).times(Math.pow(10, constants_1.GWEI_DECIMALS)).toString());
            (0, chai_1.expect)((_b = gasRate === null || gasRate === void 0 ? void 0 : gasRate.maxFeePerGas) === null || _b === void 0 ? void 0 : _b.toString()).to.equal(new utils_1.BigNumber(111.1).times(Math.pow(10, constants_1.GWEI_DECIMALS)).toString());
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,