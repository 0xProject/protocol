{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/GasStationAttendantPolygonTest.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/GasStationAttendantPolygonTest.ts"],"sourcesContent":["import { ProtocolFeeUtils } from '@0x/asset-swapper';\r\nimport { BigNumber } from '@0x/utils';\r\nimport { expect } from 'chai';\r\nimport { instance, mock, when } from 'ts-mockito';\r\n\r\nimport { GWEI_DECIMALS } from '../../src/core/constants';\r\nimport { RfqmV2TransactionSubmissionEntity } from '../../src/entities/RfqmV2TransactionSubmissionEntity';\r\nimport { RfqmTransactionSubmissionType } from '../../src/entities/types';\r\nimport { GasStationAttendantPolygon } from '../../src/utils/GasStationAttendantPolygon';\r\nimport { RfqBlockchainUtils } from '../../src/utils/rfq_blockchain_utils';\r\nimport { SubmissionContext } from '../../src/utils/SubmissionContext';\r\n\r\nlet protocolFeeUtilsMock: ProtocolFeeUtils;\r\n\r\ndescribe('GasStationAttendantPolygon', () => {\r\n    beforeAll(() => {\r\n        protocolFeeUtilsMock = mock(ProtocolFeeUtils);\r\n    });\r\n\r\n    describe('getWorkerBalanceForTradeAsync', () => {\r\n        it('gets the balance to trade', async () => {\r\n            when(protocolFeeUtilsMock.getGasPriceEstimationOrThrowAsync()).thenResolve(\r\n                new BigNumber(1000).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n\r\n            const attendant = new GasStationAttendantPolygon(instance(protocolFeeUtilsMock));\r\n\r\n            const workerGasToTrade = await attendant.getWorkerBalanceForTradeAsync();\r\n\r\n            // 1000 GWEI * (1.1^3) = 1331\r\n            // Gas estimate = 100,000 * 1.1 = 110,000\r\n            // Totol = 1331 * 110,000 = 146,410,000 GWEI\r\n\r\n            expect(workerGasToTrade.toPrecision(2).toString()).to.equal(\r\n                // tslint:disable-next-line: custom-no-magic-numbers\r\n                new BigNumber(146_410_000).times(Math.pow(10, GWEI_DECIMALS)).toPrecision(2).toString(),\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('getExpectedTransactionGasRateAsync', () => {\r\n        it('estimates the transaction gas rate', async () => {\r\n            when(protocolFeeUtilsMock.getGasPriceEstimationOrThrowAsync()).thenResolve(\r\n                new BigNumber(666).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n\r\n            const attendant = new GasStationAttendantPolygon(instance(protocolFeeUtilsMock));\r\n\r\n            const gasRate = await attendant.getExpectedTransactionGasRateAsync();\r\n\r\n            // 666 * 1.1^1.5 = 768.35736217 GWEI\r\n            expect(gasRate.toString()).to.equal(\r\n                // tslint:disable-next-line: custom-no-magic-numbers\r\n                new BigNumber(768.35736217)\r\n                    .times(Math.pow(10, GWEI_DECIMALS))\r\n                    .integerValue(BigNumber.ROUND_CEIL)\r\n                    .toString(),\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('getNextBidAsync', () => {\r\n        it('gets an initial minimum bid (30 GWEi)', async () => {\r\n            when(protocolFeeUtilsMock.getGasPriceEstimationOrThrowAsync()).thenResolve(new BigNumber(0));\r\n\r\n            const attendant = new GasStationAttendantPolygon(instance(protocolFeeUtilsMock));\r\n            const gasRate = await attendant.getNextBidAsync(null);\r\n\r\n            expect(gasRate?.maxPriorityFeePerGas?.toString()).to.equal(new BigNumber(0).toString());\r\n            expect(gasRate?.maxFeePerGas?.toString()).to.equal(\r\n                new BigNumber(30).times(Math.pow(10, GWEI_DECIMALS)).toString(),\r\n            );\r\n        });\r\n\r\n        it('gets an initial bid when there are no existing transactions', async () => {\r\n            when(protocolFeeUtilsMock.getGasPriceEstimationOrThrowAsync()).thenResolve(\r\n                new BigNumber(212).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n\r\n            const attendant = new GasStationAttendantPolygon(instance(protocolFeeUtilsMock));\r\n            const gasRate = await attendant.getNextBidAsync(null);\r\n\r\n            const initialMaxPriorityFeePerGasWei = new BigNumber(212).times(Math.pow(10, GWEI_DECIMALS));\r\n            const initialMaxFeePerGasWei = new BigNumber(/* base fee */ 1)\r\n                .times(Math.pow(10, GWEI_DECIMALS))\r\n                .plus(initialMaxPriorityFeePerGasWei);\r\n\r\n            expect(gasRate?.maxPriorityFeePerGas?.toString()).to.equal(initialMaxPriorityFeePerGasWei.toString());\r\n            expect(gasRate?.maxFeePerGas?.toString()).to.equal(initialMaxFeePerGasWei.toString());\r\n        });\r\n\r\n        it('calculates a resubmit bid when the fast gas rises', async () => {\r\n            when(protocolFeeUtilsMock.getGasPriceEstimationOrThrowAsync()).thenResolve(\r\n                new BigNumber(212).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n            const transaction1 = new RfqmV2TransactionSubmissionEntity({\r\n                transactionHash: '0x1',\r\n                from: '0xfrom',\r\n                to: '0xto',\r\n                orderHash: '0xOrderhash',\r\n                nonce: 0,\r\n                maxFeePerGas: new BigNumber(3),\r\n                maxPriorityFeePerGas: new BigNumber(2),\r\n                type: RfqmTransactionSubmissionType.Trade,\r\n            });\r\n\r\n            const submissionContext = new SubmissionContext(instance(mock(RfqBlockchainUtils)), [transaction1]);\r\n            const attendant = new GasStationAttendantPolygon(instance(protocolFeeUtilsMock));\r\n            const gasRate = await attendant.getNextBidAsync(submissionContext);\r\n\r\n            // Previous submission gas prices were 2 tip, 3 max\r\n            // new tip = 212 GWEI\r\n            // base fee = 1 GWEI\r\n            // total = 213 GWEI\r\n            expect(gasRate?.maxPriorityFeePerGas?.toString()).to.equal(\r\n                new BigNumber(212).times(Math.pow(10, GWEI_DECIMALS)).toString(),\r\n            );\r\n            expect(gasRate?.maxFeePerGas?.toString()).to.equal(\r\n                new BigNumber(213).times(Math.pow(10, GWEI_DECIMALS)).toString(),\r\n            );\r\n        });\r\n\r\n        it('calculates a resubmit bid with the minimum max fee per gas increase', async () => {\r\n            when(protocolFeeUtilsMock.getGasPriceEstimationOrThrowAsync()).thenResolve(new BigNumber(0));\r\n            const transaction1 = new RfqmV2TransactionSubmissionEntity({\r\n                transactionHash: '0x1',\r\n                from: '0xfrom',\r\n                to: '0xto',\r\n                orderHash: '0xOrderhash',\r\n                nonce: 0,\r\n                maxFeePerGas: new BigNumber(101).times(Math.pow(10, GWEI_DECIMALS)),\r\n                maxPriorityFeePerGas: new BigNumber(100).times(Math.pow(10, GWEI_DECIMALS)),\r\n                type: RfqmTransactionSubmissionType.Trade,\r\n            });\r\n\r\n            const submissionContext = new SubmissionContext(instance(mock(RfqBlockchainUtils)), [transaction1]);\r\n            const attendant = new GasStationAttendantPolygon(instance(protocolFeeUtilsMock));\r\n            const gasRate = await attendant.getNextBidAsync(submissionContext);\r\n\r\n            // Previous submission gas prices were 100 tip, 101 toatl (GWEI)\r\n            // new tip = 100 * 1.1 = 110 GWEI\r\n            // Base Fee is always 1 GWEI\r\n            // Max fee per gas = 110 + 1 = 111 GWEI\r\n            //\r\n            // BUT needs at least a 10% increase so 111.1\r\n            expect(gasRate?.maxPriorityFeePerGas?.toString()).to.equal(\r\n                new BigNumber(110).times(Math.pow(10, GWEI_DECIMALS)).toString(),\r\n            );\r\n            expect(gasRate?.maxFeePerGas?.toString()).to.equal(\r\n                new BigNumber(111.1).times(Math.pow(10, GWEI_DECIMALS)).toString(),\r\n            );\r\n        });\r\n    });\r\n});\r\n"],"version":3}