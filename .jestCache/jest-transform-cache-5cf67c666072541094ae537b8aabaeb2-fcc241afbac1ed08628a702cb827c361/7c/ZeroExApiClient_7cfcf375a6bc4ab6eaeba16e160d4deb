1b6c652523daae460ffbdc9785ced1c7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZeroExApiClient = void 0;
const utils_1 = require("@0x/utils");
const prom_client_1 = require("prom-client");
const logger_1 = require("../logger");
/**
 * With this summary metric, some of the things you can do are:
 * - Get the rate of failed requests
 * - Get the rate of success requests
 * - Get the p99 of request duration of success/failed requests (with the sliding window of 1 minute)
 */
const RFQ_AMM_QUOTE_FETCH_REQUEST_DURATION_SECONDS = new prom_client_1.Summary({
    name: 'rfq_amm_quote_fetch_request_duration_seconds',
    help: 'Histogram of request duration of AMM Quote fetch request',
    percentiles: [0.5, 0.9, 0.95, 0.99, 0.999],
    labelNames: ['chainId', 'success', 'errorType'],
    // Set sliding window to 1 minutes
    maxAgeSeconds: 60,
    // The more number of age buckets, the smoother the time window is moved
    // but it also consumes more memory & CPU for maintaining the bucket.
    ageBuckets: 5,
});
var FailedFetchErrorType;
(function (FailedFetchErrorType) {
    FailedFetchErrorType["InvalidBody"] = "invalid_body";
    FailedFetchErrorType["Other"] = "other";
})(FailedFetchErrorType || (FailedFetchErrorType = {}));
class ZeroExApiClient {
    constructor(_axiosInstance, _zeroExApiKey, _chainConfiguration) {
        this._axiosInstance = _axiosInstance;
        this._zeroExApiKey = _zeroExApiKey;
        this._chainConfiguration = _chainConfiguration;
    }
    /**
     * Fetch AMM Quote from 0x API. The quoteContext provided in the params will be transformed to match with 0x API definition:
     * - takerAmount -> sellAmount
     * - makerAmount -> buyAmount
     *
     * The response from 0x API will also be transformed (in reverse) to match with AmmQuote interface.
     *
     * @returns a promise resolved to AMM Quote if the fetch was successful. Otherwise, returns a promise resolved to null.
     */
    async fetchAmmQuoteAsync(quoteContext) {
        var _a, _b, _c;
        const stopTimer = RFQ_AMM_QUOTE_FETCH_REQUEST_DURATION_SECONDS.startTimer({
            chainId: this._chainConfiguration.chainId.toString(),
        });
        // Transform QuoteContext to 0xAPI Get Quote Params
        const zeroExApiGetQuoteParams = {
            buyAmount: (_a = quoteContext.makerAmount) === null || _a === void 0 ? void 0 : _a.toString(),
            buyToken: quoteContext.makerToken,
            sellAmount: (_b = quoteContext.takerAmount) === null || _b === void 0 ? void 0 : _b.toString(),
            sellToken: quoteContext.takerToken,
            takerAddress: quoteContext.takerAddress,
            affiliateAddress: quoteContext.affiliateAddress,
            excludedSources: '0x', // Exclude 0x source to get quote from AMM only
        };
        try {
            const { data } = await this._axiosInstance.get('/swap/v1/quote', {
                baseURL: this._chainConfiguration.zeroExClientBaseUrl,
                params: zeroExApiGetQuoteParams,
                headers: {
                    '0x-api-key': this._zeroExApiKey,
                },
            });
            // Parsing and validating 0xAPI response
            const makerAmount = new utils_1.BigNumber(data.buyAmount);
            const takerAmount = new utils_1.BigNumber(data.sellAmount);
            const estimatedGas = new utils_1.BigNumber(data.estimatedGas);
            const gasPrice = new utils_1.BigNumber(data.gasPrice);
            const expectedSlippage = new utils_1.BigNumber(data.expectedSlippage !== null ? data.expectedSlippage : 0);
            const { decodedUniqueId } = data;
            if (makerAmount.isNaN() ||
                takerAmount.isNaN() ||
                estimatedGas.isNaN() ||
                gasPrice.isNaN() ||
                expectedSlippage.isNaN()) {
                throw new Error(`Unexpected body returned from 0xAPI: ${JSON.stringify(data)}`);
            }
            if (!decodedUniqueId) {
                logger_1.logger.warn(`Missing decodedUniqueId from 0xAPI`);
            }
            // Mapping 0x API's response to AmmQuote
            const ammQuote = {
                makerAmount,
                takerAmount,
                estimatedGasFeeWei: estimatedGas.times(gasPrice),
                expectedSlippage,
                decodedUniqueId,
            };
            stopTimer({ success: 'true' });
            return ammQuote;
        }
        catch (error) {
            if (error.message.includes('Unexpected body returned from 0xAPI')) {
                stopTimer({ success: 'false', errorType: FailedFetchErrorType.InvalidBody });
            }
            else {
                stopTimer({ success: 'false', errorType: FailedFetchErrorType.Other });
            }
            logger_1.logger.error({
                chainId: this._chainConfiguration.chainId,
                zeroExApiGetQuoteParams,
                message: error.message,
                body: ((_c = error.response) === null || _c === void 0 ? void 0 : _c.data) || null,
            }, 'Failed to fetch AMM Quote from 0x API');
            return null;
        }
    }
}
exports.ZeroExApiClient = ZeroExApiClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,