01170b7812716ada383a9e5430cab105
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeeTransformer = exports.MetaTransactionTransformer = exports.BigNumberTransformer = exports.BigIntTransformer = void 0;
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const fee_utils_1 = require("../core/fee_utils");
exports.BigIntTransformer = {
    from: (value) => {
        if (value === null) {
            return null;
        }
        const num = Number(value);
        if (!Number.isSafeInteger(num)) {
            throw new Error('unsafe integer precision when transforming value');
        }
        return value === null ? null : Number(value);
    },
    to: (value) => {
        if (value === null || value === undefined) {
            return null;
        }
        if (!Number.isSafeInteger(value)) {
            throw new Error('unsafe integer precision when transforming value');
        }
        return value.toString();
    },
};
exports.BigNumberTransformer = {
    from: (value) => {
        return value === null ? null : new utils_1.BigNumber(value);
    },
    to: (value) => {
        return value === null || value === undefined ? null : value.toString();
    },
};
exports.MetaTransactionTransformer = {
    /**
     * Used to marshal `MetaTransaction` when writing to the database.
     */
    to: (metaTransaction) => {
        const { minGasPrice, maxGasPrice, expirationTimeSeconds, salt, value, feeAmount, chainId } = metaTransaction;
        return {
            ...metaTransaction,
            minGasPrice: minGasPrice.toString(),
            maxGasPrice: maxGasPrice.toString(),
            expirationTimeSeconds: expirationTimeSeconds.toString(),
            salt: salt.toString(),
            value: value.toString(),
            feeAmount: feeAmount.toString(),
            chainId: chainId.toString(),
        };
    },
    /**
     * Used to unmarshal `MetaTransaction` when reading from the database.
     */
    from: (storedValue) => {
        const { minGasPrice, maxGasPrice, expirationTimeSeconds, salt, value, feeAmount, chainId } = storedValue;
        return new protocol_utils_1.MetaTransaction({
            ...storedValue,
            minGasPrice: new utils_1.BigNumber(minGasPrice),
            maxGasPrice: new utils_1.BigNumber(maxGasPrice),
            expirationTimeSeconds: new utils_1.BigNumber(expirationTimeSeconds),
            salt: new utils_1.BigNumber(salt),
            value: new utils_1.BigNumber(value),
            feeAmount: new utils_1.BigNumber(feeAmount),
            chainId: Number(chainId),
        });
    },
};
exports.FeeTransformer = {
    /**
     * Used to marshal `Fee` when writing to the database.
     */
    to: (value) => {
        return (0, fee_utils_1.feeToStoredFee)(value);
    },
    /**
     * Used to unmarshal `Fee` when reading from the database.
     */
    from: (storedFee) => {
        return (0, fee_utils_1.storedFeeToFee)(storedFee);
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9lbnRpdGllcy90cmFuc2Zvcm1lcnMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdURBQTRFO0FBQzVFLHFDQUFzQztBQUl0QyxpREFBbUU7QUFFdEQsUUFBQSxpQkFBaUIsR0FBcUI7SUFDL0MsSUFBSSxFQUFFLENBQUMsS0FBb0IsRUFBaUIsRUFBRTtRQUMxQyxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7U0FDdkU7UUFDRCxPQUFPLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFDRCxFQUFFLEVBQUUsQ0FBQyxLQUFnQyxFQUFpQixFQUFFO1FBQ3BELElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3ZDLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7U0FDdkU7UUFDRCxPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1QixDQUFDO0NBQ0osQ0FBQztBQUVXLFFBQUEsb0JBQW9CLEdBQXFCO0lBQ2xELElBQUksRUFBRSxDQUFDLEtBQW9CLEVBQW9CLEVBQUU7UUFDN0MsT0FBTyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksaUJBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBQ0QsRUFBRSxFQUFFLENBQUMsS0FBbUMsRUFBaUIsRUFBRTtRQUN2RCxPQUFPLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0UsQ0FBQztDQUNKLENBQUM7QUFFVyxRQUFBLDBCQUEwQixHQUFxQjtJQUN4RDs7T0FFRztJQUNILEVBQUUsRUFBRSxDQUFDLGVBQWdDLEVBQStDLEVBQUU7UUFDbEYsTUFBTSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLEdBQUcsZUFBZSxDQUFDO1FBQzdHLE9BQU87WUFDSCxHQUFHLGVBQWU7WUFDbEIsV0FBVyxFQUFFLFdBQVcsQ0FBQyxRQUFRLEVBQUU7WUFDbkMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxRQUFRLEVBQUU7WUFDbkMscUJBQXFCLEVBQUUscUJBQXFCLENBQUMsUUFBUSxFQUFFO1lBQ3ZELElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3JCLEtBQUssRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQ3ZCLFNBQVMsRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFFO1lBQy9CLE9BQU8sRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFO1NBQzlCLENBQUM7SUFDTixDQUFDO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUUsQ0FBQyxXQUF3RCxFQUFtQixFQUFFO1FBQ2hGLE1BQU0sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxHQUFHLFdBQVcsQ0FBQztRQUN6RyxPQUFPLElBQUksZ0NBQWUsQ0FBQztZQUN2QixHQUFHLFdBQVc7WUFDZCxXQUFXLEVBQUUsSUFBSSxpQkFBUyxDQUFDLFdBQVcsQ0FBQztZQUN2QyxXQUFXLEVBQUUsSUFBSSxpQkFBUyxDQUFDLFdBQVcsQ0FBQztZQUN2QyxxQkFBcUIsRUFBRSxJQUFJLGlCQUFTLENBQUMscUJBQXFCLENBQUM7WUFDM0QsSUFBSSxFQUFFLElBQUksaUJBQVMsQ0FBQyxJQUFJLENBQUM7WUFDekIsS0FBSyxFQUFFLElBQUksaUJBQVMsQ0FBQyxLQUFLLENBQUM7WUFDM0IsU0FBUyxFQUFFLElBQUksaUJBQVMsQ0FBQyxTQUFTLENBQUM7WUFDbkMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDM0IsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKLENBQUM7QUFFVyxRQUFBLGNBQWMsR0FBcUI7SUFDNUM7O09BRUc7SUFDSCxFQUFFLEVBQUUsQ0FBQyxLQUFVLEVBQWEsRUFBRTtRQUMxQixPQUFPLElBQUEsMEJBQWMsRUFBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxJQUFJLEVBQUUsQ0FBQyxTQUFvQixFQUFPLEVBQUU7UUFDaEMsT0FBTyxJQUFBLDBCQUFjLEVBQUMsU0FBUyxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNKLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9lbnRpdGllcy90cmFuc2Zvcm1lcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWV0YVRyYW5zYWN0aW9uLCBNZXRhVHJhbnNhY3Rpb25GaWVsZHMgfSBmcm9tICdAMHgvcHJvdG9jb2wtdXRpbHMnO1xyXG5pbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tICdAMHgvdXRpbHMnO1xyXG5pbXBvcnQgeyBWYWx1ZVRyYW5zZm9ybWVyIH0gZnJvbSAndHlwZW9ybSc7XHJcblxyXG5pbXBvcnQgeyBGZWUsIFN0b3JlZEZlZSB9IGZyb20gJy4uL2NvcmUvdHlwZXMnO1xyXG5pbXBvcnQgeyBmZWVUb1N0b3JlZEZlZSwgc3RvcmVkRmVlVG9GZWUgfSBmcm9tICcuLi9jb3JlL2ZlZV91dGlscyc7XHJcblxyXG5leHBvcnQgY29uc3QgQmlnSW50VHJhbnNmb3JtZXI6IFZhbHVlVHJhbnNmb3JtZXIgPSB7XHJcbiAgICBmcm9tOiAodmFsdWU6IHN0cmluZyB8IG51bGwpOiBudW1iZXIgfCBudWxsID0+IHtcclxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG51bSA9IE51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihudW0pKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5zYWZlIGludGVnZXIgcHJlY2lzaW9uIHdoZW4gdHJhbnNmb3JtaW5nIHZhbHVlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IG51bGwgOiBOdW1iZXIodmFsdWUpO1xyXG4gICAgfSxcclxuICAgIHRvOiAodmFsdWU6IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQpOiBzdHJpbmcgfCBudWxsID0+IHtcclxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnNhZmUgaW50ZWdlciBwcmVjaXNpb24gd2hlbiB0cmFuc2Zvcm1pbmcgdmFsdWUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IEJpZ051bWJlclRyYW5zZm9ybWVyOiBWYWx1ZVRyYW5zZm9ybWVyID0ge1xyXG4gICAgZnJvbTogKHZhbHVlOiBzdHJpbmcgfCBudWxsKTogQmlnTnVtYmVyIHwgbnVsbCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gbnVsbCA6IG5ldyBCaWdOdW1iZXIodmFsdWUpO1xyXG4gICAgfSxcclxuICAgIHRvOiAodmFsdWU6IEJpZ051bWJlciB8IG51bGwgfCB1bmRlZmluZWQpOiBzdHJpbmcgfCBudWxsID0+IHtcclxuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiB2YWx1ZS50b1N0cmluZygpO1xyXG4gICAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBNZXRhVHJhbnNhY3Rpb25UcmFuc2Zvcm1lcjogVmFsdWVUcmFuc2Zvcm1lciA9IHtcclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byBtYXJzaGFsIGBNZXRhVHJhbnNhY3Rpb25gIHdoZW4gd3JpdGluZyB0byB0aGUgZGF0YWJhc2UuXHJcbiAgICAgKi9cclxuICAgIHRvOiAobWV0YVRyYW5zYWN0aW9uOiBNZXRhVHJhbnNhY3Rpb24pOiBSZWNvcmQ8a2V5b2YgTWV0YVRyYW5zYWN0aW9uRmllbGRzLCBzdHJpbmc+ID0+IHtcclxuICAgICAgICBjb25zdCB7IG1pbkdhc1ByaWNlLCBtYXhHYXNQcmljZSwgZXhwaXJhdGlvblRpbWVTZWNvbmRzLCBzYWx0LCB2YWx1ZSwgZmVlQW1vdW50LCBjaGFpbklkIH0gPSBtZXRhVHJhbnNhY3Rpb247XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4ubWV0YVRyYW5zYWN0aW9uLFxyXG4gICAgICAgICAgICBtaW5HYXNQcmljZTogbWluR2FzUHJpY2UudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgbWF4R2FzUHJpY2U6IG1heEdhc1ByaWNlLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgIGV4cGlyYXRpb25UaW1lU2Vjb25kczogZXhwaXJhdGlvblRpbWVTZWNvbmRzLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgIHNhbHQ6IHNhbHQudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgIGZlZUFtb3VudDogZmVlQW1vdW50LnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgIGNoYWluSWQ6IGNoYWluSWQudG9TdHJpbmcoKSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1bm1hcnNoYWwgYE1ldGFUcmFuc2FjdGlvbmAgd2hlbiByZWFkaW5nIGZyb20gdGhlIGRhdGFiYXNlLlxyXG4gICAgICovXHJcbiAgICBmcm9tOiAoc3RvcmVkVmFsdWU6IFJlY29yZDxrZXlvZiBNZXRhVHJhbnNhY3Rpb25GaWVsZHMsIHN0cmluZz4pOiBNZXRhVHJhbnNhY3Rpb24gPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgbWluR2FzUHJpY2UsIG1heEdhc1ByaWNlLCBleHBpcmF0aW9uVGltZVNlY29uZHMsIHNhbHQsIHZhbHVlLCBmZWVBbW91bnQsIGNoYWluSWQgfSA9IHN0b3JlZFZhbHVlO1xyXG4gICAgICAgIHJldHVybiBuZXcgTWV0YVRyYW5zYWN0aW9uKHtcclxuICAgICAgICAgICAgLi4uc3RvcmVkVmFsdWUsXHJcbiAgICAgICAgICAgIG1pbkdhc1ByaWNlOiBuZXcgQmlnTnVtYmVyKG1pbkdhc1ByaWNlKSxcclxuICAgICAgICAgICAgbWF4R2FzUHJpY2U6IG5ldyBCaWdOdW1iZXIobWF4R2FzUHJpY2UpLFxyXG4gICAgICAgICAgICBleHBpcmF0aW9uVGltZVNlY29uZHM6IG5ldyBCaWdOdW1iZXIoZXhwaXJhdGlvblRpbWVTZWNvbmRzKSxcclxuICAgICAgICAgICAgc2FsdDogbmV3IEJpZ051bWJlcihzYWx0KSxcclxuICAgICAgICAgICAgdmFsdWU6IG5ldyBCaWdOdW1iZXIodmFsdWUpLFxyXG4gICAgICAgICAgICBmZWVBbW91bnQ6IG5ldyBCaWdOdW1iZXIoZmVlQW1vdW50KSxcclxuICAgICAgICAgICAgY2hhaW5JZDogTnVtYmVyKGNoYWluSWQpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBGZWVUcmFuc2Zvcm1lcjogVmFsdWVUcmFuc2Zvcm1lciA9IHtcclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byBtYXJzaGFsIGBGZWVgIHdoZW4gd3JpdGluZyB0byB0aGUgZGF0YWJhc2UuXHJcbiAgICAgKi9cclxuICAgIHRvOiAodmFsdWU6IEZlZSk6IFN0b3JlZEZlZSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGZlZVRvU3RvcmVkRmVlKHZhbHVlKTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdW5tYXJzaGFsIGBGZWVgIHdoZW4gcmVhZGluZyBmcm9tIHRoZSBkYXRhYmFzZS5cclxuICAgICAqL1xyXG4gICAgZnJvbTogKHN0b3JlZEZlZTogU3RvcmVkRmVlKTogRmVlID0+IHtcclxuICAgICAgICByZXR1cm4gc3RvcmVkRmVlVG9GZWUoc3RvcmVkRmVlKTtcclxuICAgIH0sXHJcbn07XHJcbiJdLCJ2ZXJzaW9uIjozfQ==