91c502573025eabf1b3b86ff15b57ee7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheClient = void 0;
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const constants_1 = require("../core/constants");
const address_utils_1 = require("./address_utils");
const pair_utils_1 = require("../core/pair_utils");
const OTC_ORDER_NONCE_BUCKET_COUNTER_KEY = (chainId) => `otcorder.nonce.bucket.counter.chain.${chainId}`;
// The value stored at this key is a set. The members of this set are each an ERC20_OWNER_BALANCE_KEY.
const ERC20_OWNERS_KEY = (chainId) => `erc20.owners.chain.${chainId}`;
const ERC20_OWNER_BALANCE_KEY = (chainId, ownerAddress, tokenAddress) => `erc20.owner.balance.chain.${chainId}.${ownerAddress}.${tokenAddress}`;
// Use `chainId` and pair keys as Redis keys for sorted set entries, used for cooling down makers after bad last look rejection.
const LLR_COOLDOWN_SET_KEY = (chainId, tokenA, tokenB) => `coolingdown.makers.chain.${chainId}.pair.${(0, pair_utils_1.toPairString)(tokenA, tokenB)}`;
class CacheClient {
    constructor(_redis) {
        this._redis = _redis;
    }
    // Shut down the CacheClient safely
    async closeAsync() {
        return this._redis.quit();
    }
    // Get the next OtcOrder Bucket
    // NOTE: unliklely to ever hit this, but the node library we use tries to cast the response from Redis as a number.
    // However, MAX_INT for js is lower than MAX_INT for Redis. We also need to be aware of if Redis' MAX_INT ever gets hit (error)
    async getNextOtcOrderBucketAsync(chainId) {
        return this._redis.incr(OTC_ORDER_NONCE_BUCKET_COUNTER_KEY(chainId));
    }
    // Advance the current OtcOrder bucket by N buckets
    // NOTE: unliklely to ever hit this, but the node library we use tries to cast the response from Redis as a number.
    // However, MAX_INT for js is lower than MAX_INT for Redis. We also need to be aware of if Redis' MAX_INT ever gets hit (error)
    async getNextNOtcOrderBucketsAsync(chainId, n) {
        return this._redis.incrby(OTC_ORDER_NONCE_BUCKET_COUNTER_KEY(chainId), n);
    }
    /**
     * Fetches all maker token addresses to be updated.
     * Token addresses set stores unique erc20Owners as balance cache keys.
     */
    async getERC20OwnersAsync(chainId) {
        const cacheKeys = await this._redis.smembers(ERC20_OWNERS_KEY(chainId));
        // parse cache keys into ERC20Owner objects
        // cache key follows the format of `prefix.${chainId}.${owner}.${token}`
        return cacheKeys.map((cacheKey) => {
            const addresses = cacheKey.split('.');
            return {
                owner: addresses[addresses.length - 2],
                token: addresses[addresses.length - 1],
            };
        });
    }
    /**
     * Adds a newly observed erc20Owner to the set of known maker tokens.
     * The values in this set are keys used to retrieve the maker's balance.
     * They are iterated upon in the next maker balance cache update.
     */
    async addERC20OwnerAsync(chainId, erc20Owner) {
        const { owners, tokens } = (0, address_utils_1.splitAddresses)(erc20Owner);
        await this._redis.sadd(ERC20_OWNERS_KEY(chainId), ERC20_OWNER_BALANCE_KEY(chainId, owners[0], tokens[0]));
    }
    /**
     * Evicts maker token addresses with zero balances from the cache.
     * We assume that market makers no longer supply liquidity for tokens with zero balances.
     */
    async evictZeroBalancesAsync(chainId) {
        const setKey = ERC20_OWNERS_KEY(chainId);
        const cacheKeys = await this._redis.smembers(setKey);
        if (cacheKeys.length === 0) {
            return 0;
        }
        const balances = await this._redis.mget(cacheKeys);
        const evictedKeys = cacheKeys.filter((_, idx) => {
            const balance = balances[idx];
            return balance != null && protocol_utils_1.ZERO.eq(new utils_1.BigNumber(balance));
        });
        if (evictedKeys.length === 0) {
            return 0;
        }
        return this._redis.srem(setKey, evictedKeys);
    }
    /**
     * Gets maker balances for provided erc20Owners from the cache.
     * A cache miss will result in a null value, and otherwise a valid BigNumber.
     * Throws an error if invalid addresses are passed.
     * Each GET is a fast O(1) read request to the cache.
     */
    async getERC20OwnerBalancesAsync(chainId, erc20Owners) {
        const cacheKeys = this._validateAndGetBalanceCacheKeys(chainId, erc20Owners);
        // Redis mGet only accepts non-empty arrays
        // if erc20Owners is empty, balances should be empty as well
        if (cacheKeys.length === 0) {
            return [];
        }
        const balances = await this._redis.mget(cacheKeys);
        return balances.map((balance) => (balance ? new utils_1.BigNumber(balance) : null));
    }
    /**
     * Sets and/or updates maker balances for provided maker and token addresses.
     * Refreshes cache entry expiries to two minutes from now.
     * Throws an error if invalid addresses or balances are passed.
     * Each SET is a fast O(1) write request to the cache.
     */
    async setERC20OwnerBalancesAsync(chainId, erc20Owners, balances) {
        const cacheKeys = this._validateAndGetBalanceCacheKeys(chainId, erc20Owners, balances);
        await Promise.all(cacheKeys.map(async (cacheKey, i) => this._redis.set(cacheKey, balances[i].toString(), 'EX', constants_1.MAKER_TOKEN_BALANCE_EXPIRY_SECONDS)));
    }
    /**
     * Add maker to cooldown sorted set of given pair. Maker Ids in the sorted set are sorted by
     * cooldown period endTime, so as to allow quickly filter out these with expired cooldown period.
     *
     * @param makerId ID of maker to be added or updated
     * @param endTime time stamp to end the cooldown period, in millisecond
     * @param chainId chainId of the pair
     * @param tokenA address of one trading token
     * @param tokenB address of the other trading token
     * @returns whether the sorted set get updated
     */
    async addMakerToCooldownAsync(makerId, endTime, chainId, tokenA, tokenB) {
        const changedMemberCount = await this._redis.zadd(LLR_COOLDOWN_SET_KEY(chainId, tokenA, tokenB), 'GT', // only update if setting a higher score
        'CH', // return number of set members get changed (added and updated)
        endTime, // score to be sorted by
        makerId);
        return changedMemberCount > 0;
    }
    /**
     * Get a list of makers that are cooling down for given pair. Only includes unexpired entries.
     *
     * @param chainId chainId of the pair
     * @param tokenA address of one trading token
     * @param tokenB address of the other trading token
     * @param now current timestamp (for testing)
     * @returns array of maker IDs
     */
    async getMakersInCooldownForPairAsync(chainId, tokenA, tokenB, now = Date.now()) {
        // Sorted set members use cooldown expiration time as scores, so selecting members with scores larger than `Date.now()`
        // will give a complete list of makers in cooldown.
        const minScore = now;
        const maxScore = '+inf';
        return this._redis.zrangebyscore(LLR_COOLDOWN_SET_KEY(chainId, tokenA, tokenB), minScore, maxScore);
    }
    /**
     * Validates maker and token addresses.
     * If balances are passed, validates that every cache key has a corresponding value.
     * Generates a cache key for every pair through string concatenation.
     */
    // tslint:disable-next-line: prefer-function-over-method
    _validateAndGetBalanceCacheKeys(chainId, erc20Owners, balances) {
        if (balances && erc20Owners.length !== balances.length) {
            throw new Error('Maker addresses do not match balances');
        }
        const { owners, tokens } = (0, address_utils_1.splitAddresses)(erc20Owners);
        return owners.map((owner, i) => {
            return ERC20_OWNER_BALANCE_KEY(chainId, owner, tokens[i]);
        });
    }
}
exports.CacheClient = CacheClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,