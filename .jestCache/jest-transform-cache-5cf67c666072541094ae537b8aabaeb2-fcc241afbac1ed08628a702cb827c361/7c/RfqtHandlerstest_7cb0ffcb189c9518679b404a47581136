4f7a6955da859a408c6795a924ae77b9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../../services/RfqtService', () => {
    return {
        RfqtService: jest.fn().mockImplementation(() => {
            return {
                getV1PricesAsync: jest.fn(),
                getV1QuotesAsync: jest.fn(),
                getV2PricesAsync: jest.fn(),
                getV2QuotesAsync: jest.fn(),
            };
        }),
    };
});
jest.mock('../../utils/config_manager', () => {
    return {
        ConfigManager: jest.fn().mockImplementation(() => {
            return {
                getIntegratorByIdOrThrow: jest.fn(),
            };
        }),
    };
});
const protocol_utils_1 = require("@0x/protocol-utils");
const signature_utils_1 = require("@0x/protocol-utils/lib/src/signature_utils");
const transformer_utils_1 = require("@0x/protocol-utils/lib/src/transformer_utils");
const utils_1 = require("@0x/utils");
const express = require("express");
const asyncHandler = require("express-async-handler");
const HttpStatus = require("http-status-codes");
const lodash_1 = require("lodash");
const supertest = require("supertest");
const RfqtService_1 = require("../../services/RfqtService");
const config_manager_1 = require("../../utils/config_manager");
const RfqtHandlers_1 = require("../RfqtHandlers");
const constants_1 = require("../../core/constants");
// tslint:disable: no-object-literal-type-assertion
const mockRfqtService = jest.mocked(new RfqtService_1.RfqtService(0, {}, {}, {}, constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, {}, {}, {}, {}, 1, {}));
// Jest workaround for getter
mockRfqtService.feeModelVersion = 1;
mockRfqtService.getTokenDecimalsAsync = jest.fn().mockResolvedValue(18);
const mockConfigManager = jest.mocked(new config_manager_1.ConfigManager());
// tslint:enable: no-object-literal-type-assertion
// tslint:disable-next-line: custom-no-magic-numbers
const rfqtHandlers = new RfqtHandlers_1.RfqtHandlers(new Map([[1337, mockRfqtService]]), mockConfigManager);
/**
 * Verifies the proper response to a request using a mocked `RfqtService`.
 *
 * Each case sets up its own little Express app to avoid coupiling this
 * test to the upstream router.
 */
describe('RfqtHandlers', () => {
    describe('parameter verification with _parseV1RequestParameters', () => {
        it('throws if a required parameter is missing', async () => {
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set('Content-type', 'application/json')
                .send({ makerToken: '0xmakertoken' });
            expect(response.body.error).toContain('missing parameters');
            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
        });
        it('throws if the chain ID is invalid', async () => {
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 'liger' })
                .send({
                altRfqAssetOfferings: {},
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 'liger',
                makerToken: '0xmakertoken',
                marketOperation: 'Trade',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-integrator-id',
            });
            expect(response.body.error).toContain('Chain ID is invalid');
            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
        });
        it('throws with an invalid market operation', async () => {
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                altRfqAssetOfferings: {},
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Trade',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-integrator-id',
            });
            expect(response.body.error).toContain('invalid market operation');
            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
        });
        it('throws when the integrator does not exist', async () => {
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                throw new Error("explodes because the integrator doesn't exist");
            });
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                altRfqAssetOfferings: {},
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-ghost-integrator-id',
            });
            expect(response.body.error).toContain('No integrator found for integrator ID');
            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
        });
        it('throws if there is no RFQt service for the chain id', async () => {
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                const integrator = {
                    apiKeys: [],
                    integratorId: 'uuid-integrator-id',
                    // tslint:disable-next-line: custom-no-magic-numbers
                    allowedChainIds: [1337],
                    label: 'Polygon Swap Machine',
                    plp: false,
                    rfqm: false,
                    rfqt: true,
                };
                return integrator;
            });
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 21 })
                .send({
                altRfqAssetOfferings: {},
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 21,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-polygon-swap-machine',
            });
            expect(response.body.error).toContain('No configuration exists for chain');
            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
        });
    });
    describe('getV1PriceAsync', () => {
        it('responds with an error if the underlying service call fails', async () => {
            mockRfqtService.getV1PricesAsync.mockRejectedValueOnce(new Error('The service blew up'));
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                const integrator = {
                    apiKeys: [],
                    integratorId: 'uuid-integrator-id',
                    // tslint:disable-next-line: custom-no-magic-numbers
                    allowedChainIds: [1337],
                    label: 'Polygon Swap Machine',
                    plp: false,
                    rfqm: false,
                    rfqt: true,
                };
                return integrator;
            });
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                altRfqAssetOfferings: {},
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-polygon-swap-machine',
            });
            expect(response.body.error).toContain('blew up');
            expect(response.statusCode).toEqual(HttpStatus.INTERNAL_SERVER_ERROR);
        });
        it('passes calls on to RfqtService', async () => {
            mockRfqtService.getV1PricesAsync.mockResolvedValue([]);
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                const integrator = {
                    apiKeys: [],
                    integratorId: 'uuid-integrator-id',
                    // tslint:disable-next-line: custom-no-magic-numbers
                    allowedChainIds: [1337],
                    label: 'Polygon Swap Machine',
                    plp: false,
                    rfqm: false,
                    rfqt: true,
                };
                return integrator;
            });
            await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                altRfqAssetOfferings: {},
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-polygon-swap-machine',
            });
            expect(mockRfqtService.getV1PricesAsync.mock.calls[0]).toMatchInlineSnapshot(`
                Array [
                  Object {
                    "altRfqAssetOfferings": Object {},
                    "assetFillAmount": "100",
                    "chainId": 1337,
                    "comparisonPrice": undefined,
                    "integrator": Object {
                      "allowedChainIds": Array [
                        1337,
                      ],
                      "apiKeys": Array [],
                      "integratorId": "uuid-integrator-id",
                      "label": "Polygon Swap Machine",
                      "plp": false,
                      "rfqm": false,
                      "rfqt": true,
                    },
                    "integratorId": "uuid-polygon-swap-machine",
                    "intentOnFilling": false,
                    "makerToken": "0xmakertoken",
                    "marketOperation": "Buy",
                    "takerAddress": "0xtakeraddress",
                    "takerToken": "0xtakertoken",
                    "txOrigin": "0xtxorigin",
                  },
                ]
            `);
        });
        it('returns prices from RFQt Service', async () => {
            const price = {
                makerUri: 'http://maker-uri',
                makerToken: '0xmakertoken',
                makerAmount: new utils_1.BigNumber(1234),
                takerToken: '0xtakertoken',
                takerAmount: new utils_1.BigNumber(9876),
                expiry: new utils_1.BigNumber(6969642069),
            };
            mockRfqtService.getV1PricesAsync.mockResolvedValue([price]);
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                const integrator = {
                    apiKeys: [],
                    integratorId: 'uuid-integrator-id',
                    // tslint:disable-next-line: custom-no-magic-numbers
                    allowedChainIds: [1337],
                    label: 'Polygon Swap Machine',
                    plp: false,
                    rfqm: false,
                    rfqt: true,
                };
                return integrator;
            });
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                altRfqAssetOfferings: {},
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-polygon-swap-machine',
            });
            expect(response.body.prices[0]).toStrictEqual(convertBigNumbersToJson(price));
            expect(response.statusCode).toEqual(HttpStatus.OK);
        });
    });
    describe('getV1QuotesAsync', () => {
        it('responds with an error if the underlying service call fails', async () => {
            mockRfqtService.getV1QuotesAsync.mockRejectedValueOnce(new Error('The service blew up'));
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                const integrator = {
                    apiKeys: [],
                    integratorId: 'uuid-integrator-id',
                    // tslint:disable-next-line: custom-no-magic-numbers
                    allowedChainIds: [1337],
                    label: 'Polygon Swap Machine',
                    plp: false,
                    rfqm: false,
                    rfqt: true,
                };
                return integrator;
            });
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV1QuotesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                altRfqAssetOfferings: {},
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: true,
                integratorId: 'uuid-polygon-swap-machine',
            });
            expect(response.body.error).toContain('blew up');
            expect(response.statusCode).toEqual(HttpStatus.INTERNAL_SERVER_ERROR);
        });
        it('passes calls on to RfqtService', async () => {
            mockRfqtService.getV1QuotesAsync.mockResolvedValue([]);
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                const integrator = {
                    apiKeys: [],
                    integratorId: 'uuid-integrator-id',
                    // tslint:disable-next-line: custom-no-magic-numbers
                    allowedChainIds: [1337],
                    label: 'Polygon Swap Machine',
                    plp: false,
                    rfqm: false,
                    rfqt: true,
                };
                return integrator;
            });
            await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV1QuotesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                altRfqAssetOfferings: {},
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: true,
                integratorId: 'uuid-polygon-swap-machine',
            });
            expect(mockRfqtService.getV1QuotesAsync.mock.calls[0]).toMatchInlineSnapshot(`
                Array [
                  Object {
                    "altRfqAssetOfferings": Object {},
                    "assetFillAmount": "100",
                    "chainId": 1337,
                    "comparisonPrice": undefined,
                    "integrator": Object {
                      "allowedChainIds": Array [
                        1337,
                      ],
                      "apiKeys": Array [],
                      "integratorId": "uuid-integrator-id",
                      "label": "Polygon Swap Machine",
                      "plp": false,
                      "rfqm": false,
                      "rfqt": true,
                    },
                    "integratorId": "uuid-polygon-swap-machine",
                    "intentOnFilling": true,
                    "makerToken": "0xmakertoken",
                    "marketOperation": "Buy",
                    "takerAddress": "0xtakeraddress",
                    "takerToken": "0xtakertoken",
                    "txOrigin": "0xtxorigin",
                  },
                ]
            `);
        });
        it('returns quotes from RFQt Service', async () => {
            const quote = {
                order: {
                    txOrigin: '0xtxorigin',
                    pool: '0xswimmingpool',
                    salt: new utils_1.BigNumber(21),
                    makerToken: '0xmakertoken',
                    makerAmount: new utils_1.BigNumber(1234),
                    takerToken: '0xtakertoken',
                    takerAmount: new utils_1.BigNumber(9876),
                    expiry: new utils_1.BigNumber(6969642069),
                    maker: '0xmakeraddress',
                    taker: '0xtakeraddress',
                    chainId: 1337,
                    verifyingContract: '0xdef1',
                },
                type: transformer_utils_1.FillQuoteTransformerOrderType.Rfq,
                signature: {
                    v: 1,
                    r: '',
                    s: '',
                    signatureType: signature_utils_1.SignatureType.EthSign,
                },
            };
            mockRfqtService.getV1QuotesAsync.mockResolvedValue([quote]);
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                const integrator = {
                    apiKeys: [],
                    integratorId: 'uuid-integrator-id',
                    // tslint:disable-next-line: custom-no-magic-numbers
                    allowedChainIds: [1337],
                    label: 'Polygon Swap Machine',
                    plp: false,
                    rfqm: false,
                    rfqt: true,
                };
                return integrator;
            });
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV1QuotesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                altRfqAssetOfferings: {},
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-polygon-swap-machine',
            });
            expect(response.body.quotes[0]).toStrictEqual(convertBigNumbersToJson(quote));
            expect(response.statusCode).toEqual(HttpStatus.OK);
        });
    });
    describe('parameter verification with _retrieveQuoteContext', () => {
        it('throws if a required parameter is missing', async () => {
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({ makerToken: '0xmakertoken' });
            expect(response.body.error).toContain('missing parameter');
            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
        });
        it('throws if the chain ID is invalid', async () => {
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 'liger' })
                .send({
                altRfqAssetOfferings: {},
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 'liger',
                makerToken: '0xmakertoken',
                marketOperation: 'Trade',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-integrator-id',
            });
            expect(response.body.error).toContain('Chain ID is invalid');
            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
        });
        it('throws with an invalid market operation', async () => {
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                altRfqAssetOfferings: {},
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Trade',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-integrator-id',
            });
            expect(response.body.error).toContain('invalid market operation');
            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
        });
        it('throws when the integrator does not exist', async () => {
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                throw new Error("explodes because the integrator doesn't exist");
            });
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                altRfqAssetOfferings: {},
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-ghost-integrator-id',
            });
            expect(response.body.error).toContain('No integrator found for integrator ID');
            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
        });
        it('throws if there is no RFQt service for the chain id', async () => {
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                const integrator = {
                    apiKeys: [],
                    integratorId: 'uuid-integrator-id',
                    // tslint:disable-next-line: custom-no-magic-numbers
                    allowedChainIds: [1337],
                    label: 'Polygon Swap Machine',
                    plp: false,
                    rfqm: false,
                    rfqt: true,
                };
                return integrator;
            });
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 21 })
                .send({
                altRfqAssetOfferings: {},
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 21,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-polygon-swap-machine',
            });
            expect(response.body.error).toContain('No configuration exists for chain');
            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
        });
    });
    describe('getV2PriceAsync', () => {
        it('responds with an error if the underlying service call fails', async () => {
            mockRfqtService.getV2PricesAsync.mockRejectedValueOnce(new Error('The service blew up'));
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                const integrator = {
                    apiKeys: [],
                    integratorId: 'uuid-integrator-id',
                    // tslint:disable-next-line: custom-no-magic-numbers
                    allowedChainIds: [1337],
                    label: 'Polygon Swap Machine',
                    plp: false,
                    rfqm: false,
                    rfqt: true,
                };
                return integrator;
            });
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-polygon-swap-machine',
            });
            expect(response.body.error).toContain('blew up');
            expect(response.statusCode).toEqual(HttpStatus.INTERNAL_SERVER_ERROR);
        });
        it('passes calls on to RfqtService', async () => {
            mockRfqtService.getV2PricesAsync.mockResolvedValue([]);
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                const integrator = {
                    apiKeys: [],
                    integratorId: 'uuid-integrator-id',
                    // tslint:disable-next-line: custom-no-magic-numbers
                    allowedChainIds: [1337],
                    label: 'Polygon Swap Machine',
                    plp: false,
                    rfqm: false,
                    rfqt: true,
                };
                return integrator;
            });
            await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-polygon-swap-machine',
            });
            expect(mockRfqtService.getV2PricesAsync.mock.calls[0]).toMatchInlineSnapshot(`
                Array [
                  Object {
                    "assetFillAmount": "100",
                    "chainId": 1337,
                    "feeModelVersion": 1,
                    "integrator": Object {
                      "allowedChainIds": Array [
                        1337,
                      ],
                      "apiKeys": Array [],
                      "integratorId": "uuid-integrator-id",
                      "label": "Polygon Swap Machine",
                      "plp": false,
                      "rfqm": false,
                      "rfqt": true,
                    },
                    "isFirm": false,
                    "isSelling": false,
                    "isUnwrap": false,
                    "makerAmount": "100",
                    "makerToken": "0xmakertoken",
                    "makerTokenDecimals": 18,
                    "originalMakerToken": "0xmakertoken",
                    "takerAddress": "0xtakeraddress",
                    "takerAmount": undefined,
                    "takerToken": "0xtakertoken",
                    "takerTokenDecimals": 18,
                    "trader": undefined,
                    "txOrigin": "0xtxorigin",
                    "workflow": "rfqt",
                  },
                ]
            `);
        });
        it('returns prices from RFQt Service', async () => {
            const prices = [
                {
                    makerId: 'maker1',
                    makerUri: 'http://maker-uri',
                    makerAddress: 'maker-address',
                    makerToken: '0xmakertoken',
                    makerAmount: new utils_1.BigNumber(1234),
                    takerToken: '0xtakertoken',
                    takerAmount: new utils_1.BigNumber(9876),
                    expiry: new utils_1.BigNumber(6969642069),
                },
            ];
            mockRfqtService.getV2PricesAsync.mockResolvedValue(prices);
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                const integrator = {
                    apiKeys: [],
                    integratorId: 'uuid-integrator-id',
                    // tslint:disable-next-line: custom-no-magic-numbers
                    allowedChainIds: [1337],
                    label: 'Polygon Swap Machine',
                    plp: false,
                    rfqm: false,
                    rfqt: true,
                };
                return integrator;
            });
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-polygon-swap-machine',
            });
            expect(response.body.prices[0]).toStrictEqual(convertBigNumbersToJson(prices[0]));
            expect(response.statusCode).toEqual(HttpStatus.OK);
        });
    });
    describe('getV2QuotesAsync', () => {
        it('responds with an error if the underlying service call fails', async () => {
            mockRfqtService.getV2QuotesAsync.mockRejectedValueOnce(new Error('The service blew up'));
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                const integrator = {
                    apiKeys: [],
                    integratorId: 'uuid-integrator-id',
                    // tslint:disable-next-line: custom-no-magic-numbers
                    allowedChainIds: [1337],
                    label: 'Polygon Swap Machine',
                    plp: false,
                    rfqm: false,
                    rfqt: true,
                };
                return integrator;
            });
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV2QuotesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: true,
                integratorId: 'uuid-polygon-swap-machine',
            });
            expect(response.body.error).toContain('blew up');
            expect(response.statusCode).toEqual(HttpStatus.INTERNAL_SERVER_ERROR);
        });
        it('passes calls on to RfqtService', async () => {
            mockRfqtService.getV2QuotesAsync.mockResolvedValue([]);
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                const integrator = {
                    apiKeys: [],
                    integratorId: 'uuid-integrator-id',
                    // tslint:disable-next-line: custom-no-magic-numbers
                    allowedChainIds: [1337],
                    label: 'Polygon Swap Machine',
                    plp: false,
                    rfqm: false,
                    rfqt: true,
                };
                return integrator;
            });
            await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV2QuotesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: true,
                integratorId: 'uuid-polygon-swap-machine',
            });
            expect(mockRfqtService.getV2QuotesAsync.mock.calls[0]).toMatchInlineSnapshot(`
                Array [
                  Object {
                    "assetFillAmount": "100",
                    "chainId": 1337,
                    "feeModelVersion": 1,
                    "integrator": Object {
                      "allowedChainIds": Array [
                        1337,
                      ],
                      "apiKeys": Array [],
                      "integratorId": "uuid-integrator-id",
                      "label": "Polygon Swap Machine",
                      "plp": false,
                      "rfqm": false,
                      "rfqt": true,
                    },
                    "isFirm": true,
                    "isSelling": false,
                    "isUnwrap": false,
                    "makerAmount": "100",
                    "makerToken": "0xmakertoken",
                    "makerTokenDecimals": 18,
                    "originalMakerToken": "0xmakertoken",
                    "takerAddress": "0xtakeraddress",
                    "takerAmount": undefined,
                    "takerToken": "0xtakertoken",
                    "takerTokenDecimals": 18,
                    "trader": undefined,
                    "txOrigin": "0xtxorigin",
                    "workflow": "rfqt",
                  },
                ]
            `);
        });
        it('returns quotes from RFQt Service', async () => {
            const quotes = [
                {
                    fillableMakerAmount: new utils_1.BigNumber(1234),
                    fillableTakerAmount: new utils_1.BigNumber(9876),
                    fillableTakerFeeAmount: new utils_1.BigNumber(0),
                    makerId: 'maker1',
                    makerUri: 'https://maker-uri',
                    order: new protocol_utils_1.OtcOrder({
                        txOrigin: '0xtxorigin',
                        makerToken: '0xmakertoken',
                        makerAmount: new utils_1.BigNumber(1234),
                        takerToken: '0xtakertoken',
                        takerAmount: new utils_1.BigNumber(9876),
                        expiryAndNonce: new utils_1.BigNumber(6969642069),
                        maker: '0xmakeraddress',
                        taker: '0xtakeraddress',
                        chainId: 1337,
                        verifyingContract: '0xdef1',
                    }),
                    signature: {
                        v: 1,
                        r: '',
                        s: '',
                        signatureType: signature_utils_1.SignatureType.EthSign,
                    },
                },
            ];
            mockRfqtService.getV2QuotesAsync.mockResolvedValue(quotes);
            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {
                const integrator = {
                    apiKeys: [],
                    integratorId: 'uuid-integrator-id',
                    // tslint:disable-next-line: custom-no-magic-numbers
                    allowedChainIds: [1337],
                    label: 'Polygon Swap Machine',
                    plp: false,
                    rfqm: false,
                    rfqt: true,
                };
                return integrator;
            });
            const response = await supertest(express()
                .use(express.json())
                .post('/', asyncHandler(rfqtHandlers.getV2QuotesAsync.bind(rfqtHandlers))))
                .post('/')
                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })
                .send({
                assetFillAmount: new utils_1.BigNumber(100),
                chainId: 1337,
                makerToken: '0xmakertoken',
                marketOperation: 'Buy',
                takerToken: '0xtakertoken',
                takerAddress: '0xtakeraddress',
                txOrigin: '0xtxorigin',
                intentOnFilling: false,
                integratorId: 'uuid-polygon-swap-machine',
            });
            expect(response.body.quotes[0]).toStrictEqual(convertBigNumbersToJson(quotes[0]));
            expect(response.statusCode).toEqual(HttpStatus.OK);
        });
    });
});
/**
 * Deeply transforms object keys from BigNumber to JSON
 */
// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function convertBigNumbersToJson(x) {
    return (0, lodash_1.mapValues)(x, (v) => {
        if (v instanceof utils_1.BigNumber) {
            return v.toJSON();
        }
        if (v instanceof Object) {
            return convertBigNumbersToJson(v);
        }
        return v;
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,