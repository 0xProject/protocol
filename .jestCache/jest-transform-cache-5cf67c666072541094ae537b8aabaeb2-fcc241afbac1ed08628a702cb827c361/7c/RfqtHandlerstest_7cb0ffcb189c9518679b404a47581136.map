{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/__tests__/RfqtHandlers.test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/__tests__/RfqtHandlers.test.ts"],"sourcesContent":["// tslint:disable: max-file-line-count\r\nimport { SignedNativeOrder } from '@0x/asset-swapper/lib/src/types';\r\nimport { ContractAddresses } from '@0x/contract-addresses';\r\nimport { OtcOrder } from '@0x/protocol-utils';\r\nimport { SignatureType } from '@0x/protocol-utils/lib/src/signature_utils';\r\nimport { FillQuoteTransformerOrderType } from '@0x/protocol-utils/lib/src/transformer_utils';\r\nimport { BigNumber } from '@0x/utils';\r\nimport * as express from 'express';\r\nimport * as asyncHandler from 'express-async-handler';\r\nimport * as HttpStatus from 'http-status-codes';\r\nimport { mapValues } from 'lodash';\r\nimport * as supertest from 'supertest';\r\n\r\nimport { Integrator } from '../../config';\r\nimport { QuoteRequestor, V4RFQIndicativeQuoteMM } from '../../quoteRequestor/QuoteRequestor';\r\nimport { FeeService } from '../../services/fee_service';\r\nimport { RfqtService } from '../../services/RfqtService';\r\nimport { RfqMakerBalanceCacheService } from '../../services/rfq_maker_balance_cache_service';\r\nimport { RfqtV2Price, RfqtV2Quote } from '../../core/types';\r\nimport { ConfigManager } from '../../utils/config_manager';\r\nimport { QuoteServerClient } from '../../utils/quote_server_client';\r\nimport { RfqMakerManager } from '../../utils/rfq_maker_manager';\r\nimport { TokenMetadataManager } from '../../utils/TokenMetadataManager';\r\nimport { RfqtHandlers } from '../RfqtHandlers';\r\nimport { RfqBlockchainUtils } from '../../utils/rfq_blockchain_utils';\r\nimport { DEFAULT_MIN_EXPIRY_DURATION_MS } from '../../core/constants';\r\n\r\njest.mock('../../services/RfqtService', () => {\r\n    return {\r\n        RfqtService: jest.fn().mockImplementation(() => {\r\n            return {\r\n                getV1PricesAsync: jest.fn(),\r\n                getV1QuotesAsync: jest.fn(),\r\n                getV2PricesAsync: jest.fn(),\r\n                getV2QuotesAsync: jest.fn(),\r\n            };\r\n        }),\r\n    };\r\n});\r\n\r\njest.mock('../../utils/config_manager', () => {\r\n    return {\r\n        ConfigManager: jest.fn().mockImplementation(() => {\r\n            return {\r\n                getIntegratorByIdOrThrow: jest.fn(),\r\n            };\r\n        }),\r\n    };\r\n});\r\n\r\n// tslint:disable: no-object-literal-type-assertion\r\nconst mockRfqtService = jest.mocked(\r\n    new RfqtService(\r\n        0,\r\n        {} as RfqMakerManager,\r\n        {} as QuoteRequestor,\r\n        {} as QuoteServerClient,\r\n        DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n        {} as RfqBlockchainUtils,\r\n        {} as TokenMetadataManager,\r\n        {} as ContractAddresses,\r\n        {} as FeeService,\r\n        1,\r\n        {} as RfqMakerBalanceCacheService,\r\n    ),\r\n);\r\n// Jest workaround for getter\r\nmockRfqtService.feeModelVersion = 1;\r\nmockRfqtService.getTokenDecimalsAsync = jest.fn().mockResolvedValue(18);\r\n\r\nconst mockConfigManager = jest.mocked(new ConfigManager());\r\n// tslint:enable: no-object-literal-type-assertion\r\n\r\n// tslint:disable-next-line: custom-no-magic-numbers\r\nconst rfqtHandlers = new RfqtHandlers(new Map([[1337, mockRfqtService]]), mockConfigManager);\r\n\r\n/**\r\n * Verifies the proper response to a request using a mocked `RfqtService`.\r\n *\r\n * Each case sets up its own little Express app to avoid coupiling this\r\n * test to the upstream router.\r\n */\r\ndescribe('RfqtHandlers', () => {\r\n    describe('parameter verification with _parseV1RequestParameters', () => {\r\n        it('throws if a required parameter is missing', async () => {\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set('Content-type', 'application/json')\r\n                .send({ makerToken: '0xmakertoken' });\r\n\r\n            expect(response.body.error).toContain('missing parameters');\r\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n        });\r\n\r\n        it('throws if the chain ID is invalid', async () => {\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 'liger' })\r\n                .send({\r\n                    altRfqAssetOfferings: {},\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 'liger',\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Trade', // Invalid\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-integrator-id',\r\n                });\r\n\r\n            expect(response.body.error).toContain('Chain ID is invalid');\r\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n        });\r\n\r\n        it('throws with an invalid market operation', async () => {\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    altRfqAssetOfferings: {},\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Trade', // Invalid\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-integrator-id',\r\n                });\r\n\r\n            expect(response.body.error).toContain('invalid market operation');\r\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n        });\r\n\r\n        it('throws when the integrator does not exist', async () => {\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                throw new Error(\"explodes because the integrator doesn't exist\");\r\n            });\r\n\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    altRfqAssetOfferings: {},\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-ghost-integrator-id',\r\n                });\r\n\r\n            expect(response.body.error).toContain('No integrator found for integrator ID');\r\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n        });\r\n\r\n        it('throws if there is no RFQt service for the chain id', async () => {\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                const integrator: Integrator = {\r\n                    apiKeys: [],\r\n                    integratorId: 'uuid-integrator-id',\r\n                    // tslint:disable-next-line: custom-no-magic-numbers\r\n                    allowedChainIds: [1337],\r\n                    label: 'Polygon Swap Machine',\r\n                    plp: false,\r\n                    rfqm: false,\r\n                    rfqt: true,\r\n                };\r\n                return integrator;\r\n            });\r\n\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 21 })\r\n                .send({\r\n                    altRfqAssetOfferings: {},\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 21, // No RFQt service exists for 21\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-polygon-swap-machine',\r\n                });\r\n\r\n            expect(response.body.error).toContain('No configuration exists for chain');\r\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n        });\r\n    });\r\n\r\n    describe('getV1PriceAsync', () => {\r\n        it('responds with an error if the underlying service call fails', async () => {\r\n            mockRfqtService.getV1PricesAsync.mockRejectedValueOnce(new Error('The service blew up'));\r\n\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                const integrator: Integrator = {\r\n                    apiKeys: [],\r\n                    integratorId: 'uuid-integrator-id',\r\n                    // tslint:disable-next-line: custom-no-magic-numbers\r\n                    allowedChainIds: [1337],\r\n                    label: 'Polygon Swap Machine',\r\n                    plp: false,\r\n                    rfqm: false,\r\n                    rfqt: true,\r\n                };\r\n                return integrator;\r\n            });\r\n\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    altRfqAssetOfferings: {},\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-polygon-swap-machine',\r\n                });\r\n            expect(response.body.error).toContain('blew up');\r\n            expect(response.statusCode).toEqual(HttpStatus.INTERNAL_SERVER_ERROR);\r\n        });\r\n\r\n        it('passes calls on to RfqtService', async () => {\r\n            mockRfqtService.getV1PricesAsync.mockResolvedValue([]);\r\n\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                const integrator: Integrator = {\r\n                    apiKeys: [],\r\n                    integratorId: 'uuid-integrator-id',\r\n                    // tslint:disable-next-line: custom-no-magic-numbers\r\n                    allowedChainIds: [1337],\r\n                    label: 'Polygon Swap Machine',\r\n                    plp: false,\r\n                    rfqm: false,\r\n                    rfqt: true,\r\n                };\r\n                return integrator;\r\n            });\r\n\r\n            await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    altRfqAssetOfferings: {},\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-polygon-swap-machine',\r\n                });\r\n\r\n            expect(mockRfqtService.getV1PricesAsync.mock.calls[0]).toMatchInlineSnapshot(`\r\n                Array [\r\n                  Object {\r\n                    \"altRfqAssetOfferings\": Object {},\r\n                    \"assetFillAmount\": \"100\",\r\n                    \"chainId\": 1337,\r\n                    \"comparisonPrice\": undefined,\r\n                    \"integrator\": Object {\r\n                      \"allowedChainIds\": Array [\r\n                        1337,\r\n                      ],\r\n                      \"apiKeys\": Array [],\r\n                      \"integratorId\": \"uuid-integrator-id\",\r\n                      \"label\": \"Polygon Swap Machine\",\r\n                      \"plp\": false,\r\n                      \"rfqm\": false,\r\n                      \"rfqt\": true,\r\n                    },\r\n                    \"integratorId\": \"uuid-polygon-swap-machine\",\r\n                    \"intentOnFilling\": false,\r\n                    \"makerToken\": \"0xmakertoken\",\r\n                    \"marketOperation\": \"Buy\",\r\n                    \"takerAddress\": \"0xtakeraddress\",\r\n                    \"takerToken\": \"0xtakertoken\",\r\n                    \"txOrigin\": \"0xtxorigin\",\r\n                  },\r\n                ]\r\n            `);\r\n        });\r\n\r\n        it('returns prices from RFQt Service', async () => {\r\n            const price: V4RFQIndicativeQuoteMM = {\r\n                makerUri: 'http://maker-uri',\r\n                makerToken: '0xmakertoken',\r\n                makerAmount: new BigNumber(1234),\r\n                takerToken: '0xtakertoken',\r\n                takerAmount: new BigNumber(9876),\r\n                expiry: new BigNumber(6969642069),\r\n            };\r\n\r\n            mockRfqtService.getV1PricesAsync.mockResolvedValue([price]);\r\n\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                const integrator: Integrator = {\r\n                    apiKeys: [],\r\n                    integratorId: 'uuid-integrator-id',\r\n                    // tslint:disable-next-line: custom-no-magic-numbers\r\n                    allowedChainIds: [1337],\r\n                    label: 'Polygon Swap Machine',\r\n                    plp: false,\r\n                    rfqm: false,\r\n                    rfqt: true,\r\n                };\r\n                return integrator;\r\n            });\r\n\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV1PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    altRfqAssetOfferings: {},\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-polygon-swap-machine',\r\n                });\r\n\r\n            expect(response.body.prices[0]).toStrictEqual(convertBigNumbersToJson(price));\r\n            expect(response.statusCode).toEqual(HttpStatus.OK);\r\n        });\r\n    });\r\n\r\n    describe('getV1QuotesAsync', () => {\r\n        it('responds with an error if the underlying service call fails', async () => {\r\n            mockRfqtService.getV1QuotesAsync.mockRejectedValueOnce(new Error('The service blew up'));\r\n\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                const integrator: Integrator = {\r\n                    apiKeys: [],\r\n                    integratorId: 'uuid-integrator-id',\r\n                    // tslint:disable-next-line: custom-no-magic-numbers\r\n                    allowedChainIds: [1337],\r\n                    label: 'Polygon Swap Machine',\r\n                    plp: false,\r\n                    rfqm: false,\r\n                    rfqt: true,\r\n                };\r\n                return integrator;\r\n            });\r\n\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV1QuotesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    altRfqAssetOfferings: {},\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: true,\r\n                    integratorId: 'uuid-polygon-swap-machine',\r\n                });\r\n            expect(response.body.error).toContain('blew up');\r\n            expect(response.statusCode).toEqual(HttpStatus.INTERNAL_SERVER_ERROR);\r\n        });\r\n\r\n        it('passes calls on to RfqtService', async () => {\r\n            mockRfqtService.getV1QuotesAsync.mockResolvedValue([]);\r\n\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                const integrator: Integrator = {\r\n                    apiKeys: [],\r\n                    integratorId: 'uuid-integrator-id',\r\n                    // tslint:disable-next-line: custom-no-magic-numbers\r\n                    allowedChainIds: [1337],\r\n                    label: 'Polygon Swap Machine',\r\n                    plp: false,\r\n                    rfqm: false,\r\n                    rfqt: true,\r\n                };\r\n                return integrator;\r\n            });\r\n\r\n            await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV1QuotesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    altRfqAssetOfferings: {},\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: true,\r\n                    integratorId: 'uuid-polygon-swap-machine',\r\n                });\r\n\r\n            expect(mockRfqtService.getV1QuotesAsync.mock.calls[0]).toMatchInlineSnapshot(`\r\n                Array [\r\n                  Object {\r\n                    \"altRfqAssetOfferings\": Object {},\r\n                    \"assetFillAmount\": \"100\",\r\n                    \"chainId\": 1337,\r\n                    \"comparisonPrice\": undefined,\r\n                    \"integrator\": Object {\r\n                      \"allowedChainIds\": Array [\r\n                        1337,\r\n                      ],\r\n                      \"apiKeys\": Array [],\r\n                      \"integratorId\": \"uuid-integrator-id\",\r\n                      \"label\": \"Polygon Swap Machine\",\r\n                      \"plp\": false,\r\n                      \"rfqm\": false,\r\n                      \"rfqt\": true,\r\n                    },\r\n                    \"integratorId\": \"uuid-polygon-swap-machine\",\r\n                    \"intentOnFilling\": true,\r\n                    \"makerToken\": \"0xmakertoken\",\r\n                    \"marketOperation\": \"Buy\",\r\n                    \"takerAddress\": \"0xtakeraddress\",\r\n                    \"takerToken\": \"0xtakertoken\",\r\n                    \"txOrigin\": \"0xtxorigin\",\r\n                  },\r\n                ]\r\n            `);\r\n        });\r\n\r\n        it('returns quotes from RFQt Service', async () => {\r\n            const quote: SignedNativeOrder = {\r\n                order: {\r\n                    txOrigin: '0xtxorigin',\r\n                    pool: '0xswimmingpool',\r\n                    salt: new BigNumber(21),\r\n                    makerToken: '0xmakertoken',\r\n                    makerAmount: new BigNumber(1234),\r\n                    takerToken: '0xtakertoken',\r\n                    takerAmount: new BigNumber(9876),\r\n                    expiry: new BigNumber(6969642069),\r\n                    maker: '0xmakeraddress',\r\n                    taker: '0xtakeraddress',\r\n                    chainId: 1337,\r\n                    verifyingContract: '0xdef1',\r\n                },\r\n                type: FillQuoteTransformerOrderType.Rfq,\r\n                signature: {\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                    signatureType: SignatureType.EthSign,\r\n                },\r\n            };\r\n\r\n            mockRfqtService.getV1QuotesAsync.mockResolvedValue([quote]);\r\n\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                const integrator: Integrator = {\r\n                    apiKeys: [],\r\n                    integratorId: 'uuid-integrator-id',\r\n                    // tslint:disable-next-line: custom-no-magic-numbers\r\n                    allowedChainIds: [1337],\r\n                    label: 'Polygon Swap Machine',\r\n                    plp: false,\r\n                    rfqm: false,\r\n                    rfqt: true,\r\n                };\r\n                return integrator;\r\n            });\r\n\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV1QuotesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    altRfqAssetOfferings: {},\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-polygon-swap-machine',\r\n                });\r\n\r\n            expect(response.body.quotes[0]).toStrictEqual(convertBigNumbersToJson(quote));\r\n            expect(response.statusCode).toEqual(HttpStatus.OK);\r\n        });\r\n    });\r\n\r\n    describe('parameter verification with _retrieveQuoteContext', () => {\r\n        it('throws if a required parameter is missing', async () => {\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({ makerToken: '0xmakertoken' });\r\n\r\n            expect(response.body.error).toContain('missing parameter');\r\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n        });\r\n\r\n        it('throws if the chain ID is invalid', async () => {\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 'liger' })\r\n                .send({\r\n                    altRfqAssetOfferings: {},\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 'liger',\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Trade', // Invalid\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-integrator-id',\r\n                });\r\n\r\n            expect(response.body.error).toContain('Chain ID is invalid');\r\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n        });\r\n\r\n        it('throws with an invalid market operation', async () => {\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    altRfqAssetOfferings: {},\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Trade', // Invalid\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-integrator-id',\r\n                });\r\n\r\n            expect(response.body.error).toContain('invalid market operation');\r\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n        });\r\n\r\n        it('throws when the integrator does not exist', async () => {\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                throw new Error(\"explodes because the integrator doesn't exist\");\r\n            });\r\n\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    altRfqAssetOfferings: {},\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-ghost-integrator-id',\r\n                });\r\n\r\n            expect(response.body.error).toContain('No integrator found for integrator ID');\r\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n        });\r\n\r\n        it('throws if there is no RFQt service for the chain id', async () => {\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                const integrator: Integrator = {\r\n                    apiKeys: [],\r\n                    integratorId: 'uuid-integrator-id',\r\n                    // tslint:disable-next-line: custom-no-magic-numbers\r\n                    allowedChainIds: [1337],\r\n                    label: 'Polygon Swap Machine',\r\n                    plp: false,\r\n                    rfqm: false,\r\n                    rfqt: true,\r\n                };\r\n                return integrator;\r\n            });\r\n\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 21 })\r\n                .send({\r\n                    altRfqAssetOfferings: {},\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 21, // No RFQt service exists for 21\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-polygon-swap-machine',\r\n                });\r\n\r\n            expect(response.body.error).toContain('No configuration exists for chain');\r\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\r\n        });\r\n    });\r\n\r\n    describe('getV2PriceAsync', () => {\r\n        it('responds with an error if the underlying service call fails', async () => {\r\n            mockRfqtService.getV2PricesAsync.mockRejectedValueOnce(new Error('The service blew up'));\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                const integrator: Integrator = {\r\n                    apiKeys: [],\r\n                    integratorId: 'uuid-integrator-id',\r\n                    // tslint:disable-next-line: custom-no-magic-numbers\r\n                    allowedChainIds: [1337],\r\n                    label: 'Polygon Swap Machine',\r\n                    plp: false,\r\n                    rfqm: false,\r\n                    rfqt: true,\r\n                };\r\n                return integrator;\r\n            });\r\n\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-polygon-swap-machine',\r\n                });\r\n            expect(response.body.error).toContain('blew up');\r\n            expect(response.statusCode).toEqual(HttpStatus.INTERNAL_SERVER_ERROR);\r\n        });\r\n\r\n        it('passes calls on to RfqtService', async () => {\r\n            mockRfqtService.getV2PricesAsync.mockResolvedValue([]);\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                const integrator: Integrator = {\r\n                    apiKeys: [],\r\n                    integratorId: 'uuid-integrator-id',\r\n                    // tslint:disable-next-line: custom-no-magic-numbers\r\n                    allowedChainIds: [1337],\r\n                    label: 'Polygon Swap Machine',\r\n                    plp: false,\r\n                    rfqm: false,\r\n                    rfqt: true,\r\n                };\r\n                return integrator;\r\n            });\r\n\r\n            await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-polygon-swap-machine',\r\n                });\r\n\r\n            expect(mockRfqtService.getV2PricesAsync.mock.calls[0]).toMatchInlineSnapshot(`\r\n                Array [\r\n                  Object {\r\n                    \"assetFillAmount\": \"100\",\r\n                    \"chainId\": 1337,\r\n                    \"feeModelVersion\": 1,\r\n                    \"integrator\": Object {\r\n                      \"allowedChainIds\": Array [\r\n                        1337,\r\n                      ],\r\n                      \"apiKeys\": Array [],\r\n                      \"integratorId\": \"uuid-integrator-id\",\r\n                      \"label\": \"Polygon Swap Machine\",\r\n                      \"plp\": false,\r\n                      \"rfqm\": false,\r\n                      \"rfqt\": true,\r\n                    },\r\n                    \"isFirm\": false,\r\n                    \"isSelling\": false,\r\n                    \"isUnwrap\": false,\r\n                    \"makerAmount\": \"100\",\r\n                    \"makerToken\": \"0xmakertoken\",\r\n                    \"makerTokenDecimals\": 18,\r\n                    \"originalMakerToken\": \"0xmakertoken\",\r\n                    \"takerAddress\": \"0xtakeraddress\",\r\n                    \"takerAmount\": undefined,\r\n                    \"takerToken\": \"0xtakertoken\",\r\n                    \"takerTokenDecimals\": 18,\r\n                    \"trader\": undefined,\r\n                    \"txOrigin\": \"0xtxorigin\",\r\n                    \"workflow\": \"rfqt\",\r\n                  },\r\n                ]\r\n            `);\r\n        });\r\n\r\n        it('returns prices from RFQt Service', async () => {\r\n            const prices: RfqtV2Price[] = [\r\n                {\r\n                    makerId: 'maker1',\r\n                    makerUri: 'http://maker-uri',\r\n                    makerAddress: 'maker-address',\r\n                    makerToken: '0xmakertoken',\r\n                    makerAmount: new BigNumber(1234),\r\n                    takerToken: '0xtakertoken',\r\n                    takerAmount: new BigNumber(9876),\r\n                    expiry: new BigNumber(6969642069),\r\n                },\r\n            ];\r\n\r\n            mockRfqtService.getV2PricesAsync.mockResolvedValue(prices);\r\n\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                const integrator: Integrator = {\r\n                    apiKeys: [],\r\n                    integratorId: 'uuid-integrator-id',\r\n                    // tslint:disable-next-line: custom-no-magic-numbers\r\n                    allowedChainIds: [1337],\r\n                    label: 'Polygon Swap Machine',\r\n                    plp: false,\r\n                    rfqm: false,\r\n                    rfqt: true,\r\n                };\r\n                return integrator;\r\n            });\r\n\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV2PricesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-polygon-swap-machine',\r\n                });\r\n\r\n            expect(response.body.prices[0]).toStrictEqual(convertBigNumbersToJson(prices[0]));\r\n            expect(response.statusCode).toEqual(HttpStatus.OK);\r\n        });\r\n    });\r\n\r\n    describe('getV2QuotesAsync', () => {\r\n        it('responds with an error if the underlying service call fails', async () => {\r\n            mockRfqtService.getV2QuotesAsync.mockRejectedValueOnce(new Error('The service blew up'));\r\n\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                const integrator: Integrator = {\r\n                    apiKeys: [],\r\n                    integratorId: 'uuid-integrator-id',\r\n                    // tslint:disable-next-line: custom-no-magic-numbers\r\n                    allowedChainIds: [1337],\r\n                    label: 'Polygon Swap Machine',\r\n                    plp: false,\r\n                    rfqm: false,\r\n                    rfqt: true,\r\n                };\r\n                return integrator;\r\n            });\r\n\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV2QuotesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: true,\r\n                    integratorId: 'uuid-polygon-swap-machine',\r\n                });\r\n            expect(response.body.error).toContain('blew up');\r\n            expect(response.statusCode).toEqual(HttpStatus.INTERNAL_SERVER_ERROR);\r\n        });\r\n\r\n        it('passes calls on to RfqtService', async () => {\r\n            mockRfqtService.getV2QuotesAsync.mockResolvedValue([]);\r\n\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                const integrator: Integrator = {\r\n                    apiKeys: [],\r\n                    integratorId: 'uuid-integrator-id',\r\n                    // tslint:disable-next-line: custom-no-magic-numbers\r\n                    allowedChainIds: [1337],\r\n                    label: 'Polygon Swap Machine',\r\n                    plp: false,\r\n                    rfqm: false,\r\n                    rfqt: true,\r\n                };\r\n                return integrator;\r\n            });\r\n\r\n            await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV2QuotesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: true,\r\n                    integratorId: 'uuid-polygon-swap-machine',\r\n                });\r\n\r\n            expect(mockRfqtService.getV2QuotesAsync.mock.calls[0]).toMatchInlineSnapshot(`\r\n                Array [\r\n                  Object {\r\n                    \"assetFillAmount\": \"100\",\r\n                    \"chainId\": 1337,\r\n                    \"feeModelVersion\": 1,\r\n                    \"integrator\": Object {\r\n                      \"allowedChainIds\": Array [\r\n                        1337,\r\n                      ],\r\n                      \"apiKeys\": Array [],\r\n                      \"integratorId\": \"uuid-integrator-id\",\r\n                      \"label\": \"Polygon Swap Machine\",\r\n                      \"plp\": false,\r\n                      \"rfqm\": false,\r\n                      \"rfqt\": true,\r\n                    },\r\n                    \"isFirm\": true,\r\n                    \"isSelling\": false,\r\n                    \"isUnwrap\": false,\r\n                    \"makerAmount\": \"100\",\r\n                    \"makerToken\": \"0xmakertoken\",\r\n                    \"makerTokenDecimals\": 18,\r\n                    \"originalMakerToken\": \"0xmakertoken\",\r\n                    \"takerAddress\": \"0xtakeraddress\",\r\n                    \"takerAmount\": undefined,\r\n                    \"takerToken\": \"0xtakertoken\",\r\n                    \"takerTokenDecimals\": 18,\r\n                    \"trader\": undefined,\r\n                    \"txOrigin\": \"0xtxorigin\",\r\n                    \"workflow\": \"rfqt\",\r\n                  },\r\n                ]\r\n            `);\r\n        });\r\n\r\n        it('returns quotes from RFQt Service', async () => {\r\n            const quotes: RfqtV2Quote[] = [\r\n                {\r\n                    fillableMakerAmount: new BigNumber(1234),\r\n                    fillableTakerAmount: new BigNumber(9876),\r\n                    fillableTakerFeeAmount: new BigNumber(0),\r\n                    makerId: 'maker1',\r\n                    makerUri: 'https://maker-uri',\r\n                    order: new OtcOrder({\r\n                        txOrigin: '0xtxorigin',\r\n                        makerToken: '0xmakertoken',\r\n                        makerAmount: new BigNumber(1234),\r\n                        takerToken: '0xtakertoken',\r\n                        takerAmount: new BigNumber(9876),\r\n                        expiryAndNonce: new BigNumber(6969642069),\r\n                        maker: '0xmakeraddress',\r\n                        taker: '0xtakeraddress',\r\n                        chainId: 1337,\r\n                        verifyingContract: '0xdef1',\r\n                    }),\r\n                    signature: {\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                        signatureType: SignatureType.EthSign,\r\n                    },\r\n                },\r\n            ];\r\n\r\n            mockRfqtService.getV2QuotesAsync.mockResolvedValue(quotes);\r\n\r\n            mockConfigManager.getIntegratorByIdOrThrow.mockImplementationOnce(() => {\r\n                const integrator: Integrator = {\r\n                    apiKeys: [],\r\n                    integratorId: 'uuid-integrator-id',\r\n                    // tslint:disable-next-line: custom-no-magic-numbers\r\n                    allowedChainIds: [1337],\r\n                    label: 'Polygon Swap Machine',\r\n                    plp: false,\r\n                    rfqm: false,\r\n                    rfqt: true,\r\n                };\r\n                return integrator;\r\n            });\r\n\r\n            const response = await supertest(\r\n                express()\r\n                    .use(express.json())\r\n                    .post('/', asyncHandler(rfqtHandlers.getV2QuotesAsync.bind(rfqtHandlers))),\r\n            )\r\n                .post('/')\r\n                .set({ 'Content-type': 'application/json', '0x-chain-id': 1337 })\r\n                .send({\r\n                    assetFillAmount: new BigNumber(100),\r\n                    chainId: 1337,\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: 'Buy',\r\n                    takerToken: '0xtakertoken',\r\n                    takerAddress: '0xtakeraddress',\r\n                    txOrigin: '0xtxorigin',\r\n                    intentOnFilling: false,\r\n                    integratorId: 'uuid-polygon-swap-machine',\r\n                });\r\n\r\n            expect(response.body.quotes[0]).toStrictEqual(convertBigNumbersToJson(quotes[0]));\r\n            expect(response.statusCode).toEqual(HttpStatus.OK);\r\n        });\r\n    });\r\n});\r\n\r\n/**\r\n * Deeply transforms object keys from BigNumber to JSON\r\n */\r\n// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction convertBigNumbersToJson(x: Record<string, any>): Record<string, any> {\r\n    return mapValues(x, (v) => {\r\n        if (v instanceof BigNumber) {\r\n            return v.toJSON();\r\n        }\r\n        if (v instanceof Object) {\r\n            return convertBigNumbersToJson(v);\r\n        }\r\n        return v;\r\n    });\r\n}\r\n"],"version":3}