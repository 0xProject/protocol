2e789c317e19df43060baef4a66a511d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildRfqmServicesAsync = exports.buildRfqMakerBalanceCacheServiceAsync = exports.buildWorkerServiceAsync = exports.buildRfqmServiceAsync = exports.getContractAddressesForNetworkOrThrowAsync = exports.getAxiosRequestConfigWithProxy = exports.getAxiosRequestConfig = void 0;
const asset_swapper_1 = require("@0x/asset-swapper");
const contract_addresses_1 = require("@0x/contract-addresses");
const subproviders_1 = require("@0x/subproviders");
const token_metadata_1 = require("@0x/token-metadata");
const web3_wrapper_1 = require("@0x/web3-wrapper");
const axios_1 = require("axios");
const ethers_1 = require("ethers");
const http_1 = require("http");
const https_1 = require("https");
const ioredis_1 = require("ioredis");
const kafkajs_1 = require("kafkajs");
const sqs_producer_1 = require("sqs-producer");
const config_1 = require("../config");
const constants_1 = require("../core/constants");
const logger_1 = require("../logger");
const fee_service_1 = require("../services/fee_service");
const rfqm_service_1 = require("../services/rfqm_service");
const rfq_maker_balance_cache_service_1 = require("../services/rfq_maker_balance_cache_service");
const WorkerService_1 = require("../services/WorkerService");
const balance_checker_1 = require("./balance_checker");
const cache_client_1 = require("./cache_client");
const config_manager_1 = require("./config_manager");
const GasStationAttendantUtils_1 = require("./GasStationAttendantUtils");
const provider_utils_1 = require("./provider_utils");
const quote_server_client_1 = require("./quote_server_client");
const rfq_blockchain_utils_1 = require("./rfq_blockchain_utils");
const rfq_maker_manager_1 = require("./rfq_maker_manager");
const TokenMetadataManager_1 = require("./TokenMetadataManager");
const ZeroExApiClient_1 = require("./ZeroExApiClient");
const DEFAULT_AXIOS_TIMEOUT = 600; // ms
/**
 * Initialize a kafka producer if KAFKA_BROKERS is set
 */
function getKafkaProducer() {
    let kafkaProducer;
    if (config_1.KAFKA_BROKERS !== undefined) {
        const kafka = new kafkajs_1.Kafka({
            clientId: '0x-api',
            brokers: config_1.KAFKA_BROKERS,
        });
        kafkaProducer = kafka.producer();
        // tslint:disable-next-line: no-floating-promises
        kafkaProducer.connect();
    }
    return kafkaProducer;
}
/**
 * Creates the default Axios Request Config
 */
function getAxiosRequestConfig(timeout = DEFAULT_AXIOS_TIMEOUT) {
    return {
        httpAgent: new http_1.Agent({ keepAlive: true, timeout: constants_1.KEEP_ALIVE_TTL }),
        httpsAgent: new https_1.Agent({ keepAlive: true, timeout: constants_1.KEEP_ALIVE_TTL }),
        timeout,
    };
}
exports.getAxiosRequestConfig = getAxiosRequestConfig;
/**
 * Creates the Axios Request Config with egress proxy
 */
function getAxiosRequestConfigWithProxy() {
    const axiosRequestConfig = getAxiosRequestConfig();
    if (config_1.RFQ_PROXY_ADDRESS !== undefined && config_1.RFQ_PROXY_PORT !== undefined) {
        axiosRequestConfig.proxy = {
            host: config_1.RFQ_PROXY_ADDRESS,
            port: config_1.RFQ_PROXY_PORT,
        };
    }
    return axiosRequestConfig;
}
exports.getAxiosRequestConfigWithProxy = getAxiosRequestConfigWithProxy;
async function deploySamplerContractAsync(provider, chainId) {
    const web3Wrapper = new web3_wrapper_1.Web3Wrapper(provider);
    const _chainId = await web3Wrapper.getChainIdAsync();
    if (_chainId !== chainId) {
        throw new Error(`Incorrect Chain Id: ${_chainId}`);
    }
    const [account] = await web3Wrapper.getAvailableAddressesAsync();
    try {
        const sampler = await asset_swapper_1.ERC20BridgeSamplerContract.deployFrom0xArtifactAsync(asset_swapper_1.artifacts.ERC20BridgeSampler, provider, { from: account }, {});
        logger_1.logger.info(`Deployed ERC20BridgeSamplerContract on network ${chainId}: ${sampler.address}`);
        return sampler;
    }
    catch (err) {
        logger_1.logger.error(`Failed to deploy ERC20BridgeSamplerContract on network ${chainId}: ${err}`);
        throw err;
    }
}
/**
 * Determines the contract addresses needed for the network. For testing (ganache)
 * required contracts are deployed
 * @param provider provider to the network, used for ganache deployment
 * @param chainConfiguration used for getting chainId and exchangeProxyContractAddressOverride
 */
async function getContractAddressesForNetworkOrThrowAsync(provider, chainConfiguration) {
    const { chainId, exchangeProxyContractAddressOverride } = chainConfiguration;
    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(chainId.toString());
    // In a testnet where the environment does not support overrides
    // so we deploy the latest sampler
    if (chainId === contract_addresses_1.ChainId.Ganache) {
        const sampler = await deploySamplerContractAsync(provider, chainId);
        contractAddresses = { ...contractAddresses, erc20BridgeSampler: sampler.address };
    }
    // If 0x Exchange Proxy contract address override is defined in the chain config
    // we use address instead of the one provided from `@0x/contract-addresses`
    if (exchangeProxyContractAddressOverride) {
        contractAddresses = { ...contractAddresses, exchangeProxy: exchangeProxyContractAddressOverride };
    }
    return contractAddresses;
}
exports.getContractAddressesForNetworkOrThrowAsync = getContractAddressesForNetworkOrThrowAsync;
/**
 * Builds a single instance of RfqmService
 */
async function buildRfqmServiceAsync(rfqmDbUtils, rfqMakerManager, tokenPriceOracle, configManager, chain, redis) {
    const { rfqm: rfqmConfiguration, chainId } = chain;
    if (!rfqmConfiguration) {
        throw new Error(`RFQm Service for chain ${chainId} does not exist`);
    }
    // ether.js Provider coexists with web3 provider during migration away from 0x/web3-wrapper.
    const ethersProvider = new ethers_1.providers.JsonRpcProvider(chain.rpcUrl, chainId);
    const rpcProvider = provider_utils_1.providerUtils.createWeb3Provider(chain.rpcUrl);
    const provider = rpcProvider;
    const contractAddresses = await getContractAddressesForNetworkOrThrowAsync(provider, chain);
    const axiosInstance = axios_1.default.create(getAxiosRequestConfigWithProxy());
    const protocolFeeUtils = asset_swapper_1.ProtocolFeeUtils.getInstance(constants_1.PROTOCOL_FEE_UTILS_POLLING_INTERVAL_IN_MS, chain.gasStationUrl);
    const balanceChecker = new balance_checker_1.BalanceChecker(provider);
    const rfqBlockchainUtils = new rfq_blockchain_utils_1.RfqBlockchainUtils(provider, contractAddresses.exchangeProxy, balanceChecker, ethersProvider);
    const tokenMetadataManager = new TokenMetadataManager_1.TokenMetadataManager(chainId, rfqBlockchainUtils);
    const sqsProducer = sqs_producer_1.Producer.create({
        queueUrl: chain.sqsUrl,
    });
    const quoteServerClient = new quote_server_client_1.QuoteServerClient(axiosInstance);
    const cacheClient = new cache_client_1.CacheClient(redis);
    const kafkaProducer = getKafkaProducer();
    const gasStationAttendant = (0, GasStationAttendantUtils_1.getGasStationAttendant)(chain, axiosInstance, protocolFeeUtils);
    const feeTokenMetadata = (0, token_metadata_1.getTokenMetadataIfExists)(contractAddresses.etherToken, chainId);
    if (feeTokenMetadata === undefined) {
        throw new Error(`Fee token ${contractAddresses.etherToken} on chain ${chainId} could not be found!`);
    }
    const zeroExApiClient = new ZeroExApiClient_1.ZeroExApiClient(axios_1.default.create(), config_1.ZERO_EX_API_KEY, chain);
    const feeService = new fee_service_1.FeeService(chainId, feeTokenMetadata, configManager, gasStationAttendant, tokenPriceOracle, zeroExApiClient, rfqmConfiguration.minExpiryDurationMs || constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS);
    const rfqMakerBalanceCacheService = new rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService(cacheClient, rfqBlockchainUtils.balanceCheckUtils);
    return new rfqm_service_1.RfqmService(chainId, feeService, rfqmConfiguration.feeModelVersion || 0, contractAddresses, chain.registryAddress, rfqBlockchainUtils, rfqmDbUtils, sqsProducer, quoteServerClient, rfqmConfiguration.minExpiryDurationMs || constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, cacheClient, rfqMakerBalanceCacheService, rfqMakerManager, tokenMetadataManager, kafkaProducer, rfqmConfiguration.quoteReportTopic);
}
exports.buildRfqmServiceAsync = buildRfqmServiceAsync;
/**
 * Builds a single instance of the WorkerService
 */
async function buildWorkerServiceAsync(rfqmDbUtils, rfqMakerManager, chain, redis, workerIndex) {
    const { worker: workerConfiguration, chainId } = chain;
    if (!workerConfiguration) {
        throw new Error(`Worker Service for chain ${chainId} does not exist`);
    }
    let provider;
    // ether.js Provider coexists with web3 provider during migration away from 0x/web3-wrapper.
    const ethersProvider = new ethers_1.providers.JsonRpcProvider(chain.rpcUrl, chainId);
    let ethersWallet;
    const rpcProvider = provider_utils_1.providerUtils.createWeb3Provider(chain.rpcUrl);
    if (config_1.META_TX_WORKER_MNEMONIC === undefined) {
        throw new Error(`META_TX_WORKER_MNEMONIC must be defined to run RFQM service as a worker`);
    }
    const workerPrivateKey = rfq_blockchain_utils_1.RfqBlockchainUtils.getPrivateKeyFromIndexAndPhrase(config_1.META_TX_WORKER_MNEMONIC, workerIndex);
    // TODO (rhinodavid): Remove once migration to ethers.js is complete
    const privateWalletSubprovider = new subproviders_1.PrivateKeyWalletSubprovider(workerPrivateKey);
    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
    // eslint-disable-next-line prefer-const
    provider = rfq_blockchain_utils_1.RfqBlockchainUtils.createPrivateKeyProvider(rpcProvider, privateWalletSubprovider);
    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ethersWallet = ethers_1.Wallet.fromMnemonic(config_1.META_TX_WORKER_MNEMONIC, `m/44'/60'/0'/0/${workerIndex}`);
    ethersWallet = ethersWallet.connect(ethersProvider);
    const contractAddresses = await getContractAddressesForNetworkOrThrowAsync(provider, chain);
    const axiosInstance = axios_1.default.create(getAxiosRequestConfigWithProxy());
    const protocolFeeUtils = asset_swapper_1.ProtocolFeeUtils.getInstance(constants_1.PROTOCOL_FEE_UTILS_POLLING_INTERVAL_IN_MS, chain.gasStationUrl);
    const balanceChecker = new balance_checker_1.BalanceChecker(provider);
    const rfqBlockchainUtils = new rfq_blockchain_utils_1.RfqBlockchainUtils(provider, contractAddresses.exchangeProxy, balanceChecker, ethersProvider, ethersWallet);
    const quoteServerClient = new quote_server_client_1.QuoteServerClient(axiosInstance);
    const cacheClient = new cache_client_1.CacheClient(redis);
    const gasStationAttendant = (0, GasStationAttendantUtils_1.getGasStationAttendant)(chain, axiosInstance, protocolFeeUtils);
    const feeTokenMetadata = (0, token_metadata_1.getTokenMetadataIfExists)(contractAddresses.etherToken, chainId);
    if (feeTokenMetadata === undefined) {
        throw new Error(`Fee token ${contractAddresses.etherToken} on chain ${chainId} could not be found!`);
    }
    const rfqMakerBalanceCacheService = new rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService(cacheClient, rfqBlockchainUtils.balanceCheckUtils);
    return new WorkerService_1.WorkerService(chainId, gasStationAttendant, chain.registryAddress, rfqBlockchainUtils, rfqmDbUtils, quoteServerClient, workerConfiguration.transactionWatcherSleepTimeMs || constants_1.DEFAULT_WORKER_TRANSACTION_WATCHER_SLEEP_TIME_MS, cacheClient, rfqMakerBalanceCacheService, rfqMakerManager, workerConfiguration.initialMaxPriorityFeePerGasGwei, workerConfiguration.maxFeePerGasCapGwei, workerConfiguration.enableAccessList);
}
exports.buildWorkerServiceAsync = buildWorkerServiceAsync;
/**
 * Builds an instance of maker balance cache service.
 * Intended to be used by maker balance cache background jobs.
 */
async function buildRfqMakerBalanceCacheServiceAsync(chain) {
    const provider = provider_utils_1.providerUtils.createWeb3Provider(chain.rpcUrl);
    const contractAddresses = await getContractAddressesForNetworkOrThrowAsync(provider, chain);
    const balanceChecker = new balance_checker_1.BalanceChecker(provider);
    const balanceCheckUtils = new rfq_blockchain_utils_1.RfqBalanceCheckUtils(balanceChecker, contractAddresses.exchangeProxy);
    if (!config_1.REDIS_URI) {
        throw new Error('No redis URI provided to maker balance cache service');
    }
    const redis = new ioredis_1.default(config_1.REDIS_URI);
    const cacheClient = new cache_client_1.CacheClient(redis);
    return new rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService(cacheClient, balanceCheckUtils);
}
exports.buildRfqMakerBalanceCacheServiceAsync = buildRfqMakerBalanceCacheServiceAsync;
/**
 * Creates an RFQM Service for each chain present in `ChainConfigurations`.
 *
 * Intended for use by the top-level runners.
 */
async function buildRfqmServicesAsync(asWorker, rfqmDbUtils, rfqMakerDbUtils, chainConfigurations, tokenPriceOracle, configManager = new config_manager_1.ConfigManager(), redis, 
// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
_workerIndex = 0) {
    const services = await Promise.all(chainConfigurations.map(async (chain) => {
        const rfqMakerManager = new rfq_maker_manager_1.RfqMakerManager(configManager, rfqMakerDbUtils, chain.chainId);
        await rfqMakerManager.initializeAsync();
        return buildRfqmServiceAsync(rfqmDbUtils, rfqMakerManager, tokenPriceOracle, configManager, chain, redis);
    }));
    return new Map(services.map((s, i) => [chainConfigurations[i].chainId, s]));
}
exports.buildRfqmServicesAsync = buildRfqmServicesAsync;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,