{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/core/meta_transaction_fee_utils.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/core/meta_transaction_fee_utils.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { ZeroExFeeConfiguration, ZERO_EX_FEE_CONFIGURATION_MAP } from '../config';\nimport { toPairString } from './pair_utils';\nimport {\n    FeeConfigs,\n    Fees,\n    GasFee,\n    GasFeeConfig,\n    IntegratorShareFee,\n    IntegratorShareFeeConfig,\n    RawFees,\n    TruncatedFee,\n    TruncatedFees,\n    VolumeBasedFee,\n    VolumeBasedFeeConfig,\n} from './types/meta_transaction_fees';\n\nexport function rawFeesToFees(rawFees: RawFees | undefined): Fees | undefined {\n    if (!rawFees) {\n        return undefined;\n    }\n\n    let integratorFee: VolumeBasedFee | undefined;\n    if (rawFees.integratorFee) {\n        const rawIntegratorFee = rawFees.integratorFee;\n\n        integratorFee = {\n            type: 'volume',\n            feeToken: rawIntegratorFee.feeToken,\n            feeAmount: new BigNumber(rawIntegratorFee.feeAmount),\n            billingType: rawIntegratorFee.billingType,\n            feeRecipient: rawFees.integratorFee.feeRecipient,\n            volumePercentage: new BigNumber(rawFees.integratorFee.volumePercentage),\n        };\n    }\n\n    let zeroExFee: VolumeBasedFee | IntegratorShareFee | undefined;\n    if (rawFees.zeroExFee) {\n        const rawZeroExFee = rawFees.zeroExFee;\n\n        if (rawZeroExFee.type === 'volume') {\n            zeroExFee = {\n                type: 'volume',\n                feeToken: rawZeroExFee.feeToken,\n                feeAmount: new BigNumber(rawZeroExFee.feeAmount),\n                billingType: rawZeroExFee.billingType,\n                feeRecipient: rawZeroExFee.feeRecipient,\n                volumePercentage: new BigNumber(rawZeroExFee.volumePercentage),\n            };\n        } else if (rawZeroExFee.type === 'integrator_share') {\n            zeroExFee = {\n                type: 'integrator_share',\n                feeToken: rawZeroExFee.feeToken,\n                feeAmount: new BigNumber(rawZeroExFee.feeAmount),\n                billingType: rawZeroExFee.billingType,\n                feeRecipient: rawZeroExFee.feeRecipient,\n                integratorSharePercentage: new BigNumber(rawZeroExFee.integratorSharePercentage),\n            };\n        }\n    }\n\n    let gasFee: GasFee | undefined;\n    if (rawFees.gasFee) {\n        const rawGasFee = rawFees.gasFee;\n\n        gasFee = {\n            type: 'gas',\n            feeToken: rawGasFee.feeToken,\n            feeAmount: new BigNumber(rawGasFee.feeAmount),\n            feeRecipient: rawGasFee.feeRecipient,\n            billingType: rawGasFee.billingType,\n            gasPrice: new BigNumber(rawGasFee.gasPrice),\n            estimatedGas: new BigNumber(rawGasFee.estimatedGas),\n            feeTokenAmountPerBaseUnitNativeToken: new BigNumber(rawGasFee.feeTokenAmountPerBaseUnitNativeToken),\n        };\n    }\n\n    return {\n        integratorFee,\n        zeroExFee,\n        gasFee,\n    };\n}\n\n/**\n * Convert `Fees` to `TruncatedFees` which is returned in the payload to callers.\n */\nexport function feesToTruncatedFees(fees: Fees | undefined): TruncatedFees | undefined {\n    if (!fees) {\n        return undefined;\n    }\n\n    let integratorFee: TruncatedFee | undefined;\n    let zeroExFee: TruncatedFee | undefined;\n    let gasFee: TruncatedFee | undefined;\n\n    if (fees.integratorFee) {\n        const { type, feeToken, feeAmount } = fees.integratorFee;\n        integratorFee = {\n            feeType: type,\n            feeToken,\n            feeAmount,\n        };\n    }\n    if (fees.zeroExFee) {\n        const { type, feeToken, feeAmount } = fees.zeroExFee;\n        zeroExFee = {\n            feeType: type,\n            feeToken,\n            feeAmount,\n        };\n    }\n    if (fees.gasFee) {\n        const { type, feeToken, feeAmount } = fees.gasFee;\n        gasFee = {\n            feeType: type,\n            feeToken,\n            feeAmount,\n        };\n    }\n\n    return {\n        integratorFee,\n        zeroExFee,\n        gasFee,\n    };\n}\n\nexport function getFeeConfigsFromParams(params: {\n    integratorId: string;\n    chainId: number;\n    sellToken: string;\n    buyToken: string;\n    integratorFeeConfig?: {\n        type: 'volume'; // `feeType` field in `FetchQuoteParamsBase`\n        recipient: string; // `feeRecipient` field in `FetchQuoteParamsBase`\n        billingType: 'on-chain' | 'off-chain';\n        sellTokenPercentage: BigNumber; // `feeSellTokenPercentage` field in `FetchQuoteParamsBase`\n    };\n}): FeeConfigs {\n    let integratorFee: VolumeBasedFeeConfig | undefined;\n    let zeroExFee: VolumeBasedFeeConfig | IntegratorShareFeeConfig | undefined;\n    let gasFee: GasFeeConfig | undefined;\n\n    if (params.integratorFeeConfig) {\n        integratorFee = {\n            type: params.integratorFeeConfig.type,\n            feeRecipient: params.integratorFeeConfig.recipient,\n            billingType: params.integratorFeeConfig.billingType,\n            volumePercentage: params.integratorFeeConfig.sellTokenPercentage,\n        };\n    }\n\n    // If integrator id has an entry, use integrator id as key to get fee config. Otherwise, use wildcard.\n    const feeConfigurationByChainId = ZERO_EX_FEE_CONFIGURATION_MAP.get(params.integratorId)\n        ? ZERO_EX_FEE_CONFIGURATION_MAP.get(params.integratorId)\n        : ZERO_EX_FEE_CONFIGURATION_MAP.get('*');\n    if (feeConfigurationByChainId) {\n        const feeConfiguration = feeConfigurationByChainId.get(params.chainId);\n        if (feeConfiguration) {\n            zeroExFee = getZeroExFeeConfig(feeConfiguration, params.sellToken, params.buyToken);\n            gasFee = {\n                type: 'gas',\n                feeRecipient: feeConfiguration.gas.feeRecipient,\n                billingType: feeConfiguration.gas.billingType,\n            };\n        }\n    }\n\n    return {\n        integratorFee,\n        zeroExFee,\n        gasFee,\n    };\n}\n\n/**\n * Get 0x fee config from `ZeroExFeeConfiguration` object given sell and buy tokens. The function would match sell and buy tokens based on the following precedence:\n * 1. Specific pair\n * 2. Cartesian product\n * 3. Token\n *\n * For example, if `feeConfiguration` is the following:\n * {\n *      name: 'Coinbase',\n *      feeOn: 'volume',\n *      zeroExFeeRecipient: '0x123456...',\n *      gasFeeRecipient: '0x654321...',\n *      pairsFeeEntries:  { // Map\n *          // This means for USDC <-> WETH pair 0x charge 0.5% sell token as fee\n *          '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48-0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2': 0.5,\n *          // This means for USDT <-> WETH pair 0x charge 0.5% sell token as fee\n *          '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2-0xdac17f958d2ee523a2206206994597c13d831ec7': 0.5,\n *      },\n *      cartesianProductFeeEntries: [{\n *          // Set consists of USDC, USDT and DAI\n *          setA: { '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', '0xdac17f958d2ee523a2206206994597c13d831ec7', '0x6b175474e89094c44da98b954eedeac495271d0f' }\n *          // Set consists of WETH and WBTC\n *          setB: { '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599' }\n *          // This means for any combination between `setA` and `setB`, 0x charge 0.7% sell token as fee\n *          parameter: 0.7,\n *      }], [{\n *          // Set consists of USDC, USDT and DAI\n *          setA: { '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', '0xdac17f958d2ee523a2206206994597c13d831ec7', '0x6b175474e89094c44da98b954eedeac495271d0f' }\n *          // Set consists of USDC, USDT and DAI\n *          setB: { '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', '0xdac17f958d2ee523a2206206994597c13d831ec7', '0x6b175474e89094c44da98b954eedeac495271d0f' }\n *          // This means for any combination between `setA` and `setB`, 0x charge 0.1% sell token as fee\n *          parameter: 0.1,\n *      }],\n *      tokensEntries: { // Map\n *          // This means 0x charges 1.5% as fee if sell / buy token is WBTC\n *          '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599': 1.5, // WBTC\n *          // This means 0x charges all other sell tokens 0.05% as fee\n *          '*': 0.05,\n *      }\n * }\n *\n * With this example,\n * - if `sellToken` is 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48 (USDC) and `buyToken` is 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 (WETH), there is a pair matches,\n *   the fee percentage would be 0.5\n * - if `sellToken` is 0x6b175474e89094c44da98b954eedeac495271d0f (DAI) and `buyToken` is 0x2260fac5e5542a773aa44fbcfedf7c193bc2c599 (WBTC), there is no pair matches but\n *   a cartesian product match, the fee percentage would be 0.7\n * - if `sellToken` is 0x2260fac5e5542a773aa44fbcfedf7c193bc2c599 (WBTC) and `buyToken` is 0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce (SHIB), there is no pair matches,\n *   no cartesian product match but a token match, the fee percentage would be 1.5%\n * - if `sellToken` is 0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce (SHIB) and `buyToken` is 0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9 (AAVE), there is no pair matches,\n *   no cartesian product match, no exact token match but wildcard, the fee percentage would be 0.05%\n *\n * @param feeConfiguration Correponding fee configuration for an integrator and chain id.\n * @param sellToken Address of the sell token.\n * @param buyToken Address of the buy token.\n * @returns 0x fee config\n */\nfunction getZeroExFeeConfig(\n    feeConfiguration: ZeroExFeeConfiguration,\n    sellToken: string,\n    buyToken: string,\n): VolumeBasedFeeConfig | IntegratorShareFeeConfig | undefined {\n    const [sellTokenLowerCase, buyTokenLowerCase] = [sellToken, buyToken].map((token) => token.toLowerCase());\n    const pairString = toPairString(sellTokenLowerCase, buyTokenLowerCase);\n\n    // specific pair has the highest precedence\n    const pairFeeParameter = feeConfiguration.pairsFeeEntries.get(pairString);\n    if (pairFeeParameter) {\n        // pair fee config exists\n        if (feeConfiguration.feeOn === 'volume') {\n            return {\n                type: 'volume',\n                feeRecipient: feeConfiguration.zeroEx.feeRecipient,\n                billingType: feeConfiguration.zeroEx.billingType,\n                volumePercentage: pairFeeParameter,\n            };\n        } else if (feeConfiguration.feeOn === 'integrator_share') {\n            return {\n                type: 'integrator_share',\n                feeRecipient: feeConfiguration.zeroEx.feeRecipient,\n                billingType: feeConfiguration.zeroEx.billingType,\n                integratorSharePercentage: pairFeeParameter,\n            };\n        }\n    }\n\n    // cartesian product has the second precedence\n    for (const cartesianProductFeeEntry of feeConfiguration.cartesianProductFeeEntries) {\n        if (\n            (cartesianProductFeeEntry.setA.has(sellTokenLowerCase) &&\n                cartesianProductFeeEntry.setB.has(buyTokenLowerCase)) ||\n            (cartesianProductFeeEntry.setA.has(buyTokenLowerCase) &&\n                cartesianProductFeeEntry.setB.has(sellTokenLowerCase))\n        ) {\n            // cartesian product config exists\n            if (feeConfiguration.feeOn === 'volume') {\n                return {\n                    type: 'volume',\n                    feeRecipient: feeConfiguration.zeroEx.feeRecipient,\n                    billingType: feeConfiguration.zeroEx.billingType,\n                    volumePercentage: cartesianProductFeeEntry.parameter,\n                };\n            } else if (feeConfiguration.feeOn === 'integrator_share') {\n                return {\n                    type: 'integrator_share',\n                    feeRecipient: feeConfiguration.zeroEx.feeRecipient,\n                    billingType: feeConfiguration.zeroEx.billingType,\n                    integratorSharePercentage: cartesianProductFeeEntry.parameter,\n                };\n            }\n        }\n    }\n\n    // If sell/buy token has an entry, use sell/buy token as key to get fee config. Otherwise, use wildcard.\n    let tokenFeeParameter: BigNumber | undefined;\n    if (feeConfiguration.tokensEntries.get(sellTokenLowerCase)) {\n        tokenFeeParameter = feeConfiguration.tokensEntries.get(sellTokenLowerCase);\n    } else if (feeConfiguration.tokensEntries.get(buyTokenLowerCase)) {\n        tokenFeeParameter = feeConfiguration.tokensEntries.get(buyTokenLowerCase);\n    } else {\n        tokenFeeParameter = feeConfiguration.tokensEntries.get('*');\n    }\n\n    // Tokens has the lowest precedence\n    if (tokenFeeParameter) {\n        // find a match\n        if (feeConfiguration.feeOn === 'volume') {\n            return {\n                type: 'volume',\n                feeRecipient: feeConfiguration.zeroEx.feeRecipient,\n                billingType: feeConfiguration.zeroEx.billingType,\n                volumePercentage: tokenFeeParameter,\n            };\n        } else if (feeConfiguration.feeOn === 'integrator_share') {\n            return {\n                type: 'integrator_share',\n                feeRecipient: feeConfiguration.zeroEx.feeRecipient,\n                billingType: feeConfiguration.zeroEx.billingType,\n                integratorSharePercentage: tokenFeeParameter,\n            };\n        }\n    }\n\n    return undefined;\n}\n"],"version":3}