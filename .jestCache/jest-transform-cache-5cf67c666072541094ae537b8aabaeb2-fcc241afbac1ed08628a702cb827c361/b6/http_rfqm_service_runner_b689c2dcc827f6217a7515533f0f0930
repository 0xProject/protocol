ff94c1bb8885bd1ac9fa41dcbcf80d58
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runHttpRfqmServiceAsync = exports.buildRfqMakerService = exports.buildRfqAdminService = void 0;
/**
 * This module can be used to run the RFQM HTTP service standalone
 */
const api_utils_1 = require("@0x/api-utils");
const Sentry = require("@sentry/node");
const Tracing = require("@sentry/tracing");
const axios_1 = require("axios");
const express = require("express");
const promBundle = require("express-prom-bundle");
const HttpStatus = require("http-status-codes");
const ioredis_1 = require("ioredis");
const config_1 = require("../config");
const constants_1 = require("../core/constants");
const getDbDataSourceAsync_1 = require("../getDbDataSourceAsync");
const root_handler_1 = require("../handlers/root_handler");
const logger_1 = require("../logger");
const address_normalizer_1 = require("../middleware/address_normalizer");
const error_handling_1 = require("../middleware/error_handling");
const rfqm_router_1 = require("../routers/rfqm_router");
const RfqtRouter_1 = require("../routers/RfqtRouter");
const rfq_admin_router_1 = require("../routers/rfq_admin_router");
const rfq_maker_router_1 = require("../routers/rfq_maker_router");
const rfq_admin_service_1 = require("../services/rfq_admin_service");
const rfq_maker_service_1 = require("../services/rfq_maker_service");
const config_manager_1 = require("../utils/config_manager");
const rfqm_db_utils_1 = require("../utils/rfqm_db_utils");
const rfqm_service_builder_1 = require("../utils/rfqm_service_builder");
const rfqtServiceBuilder_1 = require("../utils/rfqtServiceBuilder");
const rfq_maker_db_utils_1 = require("../utils/rfq_maker_db_utils");
const runner_utils_1 = require("../utils/runner_utils");
const TokenPriceOracle_1 = require("../utils/TokenPriceOracle");
const redisInstances = [];
process.on('uncaughtException', (err) => {
    logger_1.logger.error(err);
    process.exit(1);
});
process.on('unhandledRejection', (err) => {
    if (err) {
        logger_1.logger.error(err);
    }
});
process.on('SIGTERM', async () => {
    logger_1.logger.info('Received SIGTERM. Start to shutdown RFQ services');
    await (0, runner_utils_1.closeRedisConnectionsAsync)(redisInstances);
    process.exit(0);
});
// Used for shutting down locally
process.on('SIGINT', async () => {
    logger_1.logger.info('Received SIGINT. Start to shutdown RFQ services');
    await (0, runner_utils_1.closeRedisConnectionsAsync)(redisInstances);
    process.exit(0);
});
if (require.main === module) {
    (async () => {
        // Build dependencies
        const config = {
            ...config_1.defaultHttpServiceConfig,
        };
        const connection = await (0, getDbDataSourceAsync_1.getDbDataSourceAsync)();
        const rfqmDbUtils = new rfqm_db_utils_1.RfqmDbUtils(connection);
        const rfqMakerDbUtils = new rfq_maker_db_utils_1.RfqMakerDbUtils(connection);
        const configManager = new config_manager_1.ConfigManager();
        const axiosInstance = axios_1.default.create((0, rfqm_service_builder_1.getAxiosRequestConfig)(config_1.TOKEN_PRICE_ORACLE_TIMEOUT));
        const tokenPriceOracle = new TokenPriceOracle_1.TokenPriceOracle(axiosInstance, config_1.DEFINED_FI_API_KEY, config_1.DEFINED_FI_ENDPOINT);
        if (!config_1.REDIS_URI) {
            throw new Error('No redis URI provided to RFQ Service');
        }
        const redis = new ioredis_1.default(config_1.REDIS_URI);
        redisInstances.push(redis);
        const rfqmServices = await (0, rfqm_service_builder_1.buildRfqmServicesAsync)(
        /* asWorker = */ false, rfqmDbUtils, rfqMakerDbUtils, config_1.CHAIN_CONFIGURATIONS, tokenPriceOracle, configManager, redis);
        const rfqtServices = await (0, rfqtServiceBuilder_1.buildRfqtServicesAsync)(config_1.CHAIN_CONFIGURATIONS, rfqMakerDbUtils, redis);
        const rfqAdminService = buildRfqAdminService(rfqmDbUtils);
        const rfqMakerService = buildRfqMakerService(rfqMakerDbUtils, configManager);
        await runHttpRfqmServiceAsync(rfqmServices, rfqtServices, rfqAdminService, rfqMakerService, configManager, config, connection);
    })().catch((error) => logger_1.logger.error(error.stack));
}
/**
 * Builds an instance of RfqAdminService
 */
function buildRfqAdminService(dbUtils) {
    return new rfq_admin_service_1.RfqAdminService(dbUtils);
}
exports.buildRfqAdminService = buildRfqAdminService;
/**
 * Builds an instance of RfqMakerService
 */
function buildRfqMakerService(dbUtils, configManager) {
    return new rfq_maker_service_1.RfqMakerService(dbUtils, configManager);
}
exports.buildRfqMakerService = buildRfqMakerService;
/**
 * Runs the Rfqm Service in isolation
 */
async function runHttpRfqmServiceAsync(rfqmServices, rfqtServices, rfqAdminService, rfqMakerService, configManager, config, connection, 
// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
useMetricsMiddleware = true, _app) {
    const app = _app || express();
    if (config_1.SENTRY_DSN) {
        Sentry.init({
            dsn: config_1.SENTRY_DSN,
            integrations: [
                // enable HTTP calls tracing
                new Sentry.Integrations.Http({ tracing: true }),
                // enable Express.js middleware tracing
                new Tracing.Integrations.Express({ app }),
            ],
            environment: config_1.SENTRY_ENVIRONMENT,
            // Set tracesSampleRate to 1.0 to capture 100%
            // of transactions for performance monitoring.
            // We recommend adjusting this value in production
            tracesSampleRate: config_1.SENTRY_TRACES_SAMPLE_RATE,
        });
        // RequestHandler creates a separate execution context using domains, so that every
        // transaction/span/breadcrumb is attached to its own Hub instance
        app.use(Sentry.Handlers.requestHandler());
        // TracingHandler creates a trace for every incoming request
        app.use(Sentry.Handlers.tracingHandler());
    }
    if (useMetricsMiddleware) {
        /**
         * express-prom-bundle will create a histogram metric called "http_request_duration_seconds"
         * The official prometheus docs describe how to use this exact histogram metric: https://prometheus.io/docs/practices/histograms/
         * We use the following labels: statusCode, path
         */
        const metricsMiddleware = promBundle({
            autoregister: false,
            includeStatusCode: true,
            includePath: true,
            customLabels: { chainId: undefined },
            normalizePath: [
                ['/status/.*', '/status/#orderHash'],
                ['/api-docs.*', '/api-docs'], // converts all /api-docs/favicon... => /api-docs
            ],
            transformLabels: (labels, req, _res) => {
                Object.assign(labels, { chainId: req.header('0x-chain-id') || 1 });
            },
            // buckets used for the http_request_duration_seconds histogram. All numbers (in seconds) represents boundaries of buckets.
            // tslint:disable-next-line: custom-no-magic-numbers
            buckets: [0.01, 0.04, 0.1, 0.3, 0.6, 1, 1.5, 2, 2.5, 3, 4, 6, 9],
        });
        app.use(metricsMiddleware);
    }
    app.use(address_normalizer_1.addressNormalizer);
    app.get('/', root_handler_1.rootHandler);
    const server = (0, api_utils_1.createDefaultServer)(config, app, logger_1.logger, async () => {
        await connection.close();
    });
    app.use(constants_1.RFQM_PATH, (0, rfqm_router_1.createRfqmRouter)(rfqmServices, configManager));
    app.use(constants_1.RFQT_V1_PATH, (0, RfqtRouter_1.createRfqtV1Router)(rfqtServices, configManager));
    app.use(constants_1.RFQT_V2_PATH, (0, RfqtRouter_1.createRfqtV2Router)(rfqtServices, configManager));
    app.use(constants_1.RFQ_MAKER_PATH, (0, rfq_maker_router_1.createRfqMakerRouter)(rfqMakerService));
    app.use(constants_1.ADMIN_PATH, (0, rfq_admin_router_1.createRfqAdminRouter)(rfqAdminService, configManager));
    if (config_1.SENTRY_DSN) {
        // The error handler must be before any other error middleware and after all controllers
        app.use(Sentry.Handlers.errorHandler({
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            shouldHandleError(error) {
                if (error.status === undefined || error.status >= HttpStatus.BAD_REQUEST) {
                    return true;
                }
                return false;
            },
        }));
    }
    app.use(error_handling_1.errorHandler);
    server.listen(config.httpPort);
    return { app, server };
}
exports.runHttpRfqmServiceAsync = runHttpRfqmServiceAsync;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,