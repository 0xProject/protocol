7ef8572cff7ecdaf8cda273512210cda
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqmDbUtils = exports.otcOrderToStoredOtcOrder = exports.storedOtcOrderToOtcOrder = void 0;
// tslint:disable:max-file-line-count
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const typeorm_1 = require("typeorm");
const pair_utils_1 = require("../core/pair_utils");
const entities_1 = require("../entities");
const RfqmWorkerHeartbeatEntity_1 = require("../entities/RfqmWorkerHeartbeatEntity");
const types_1 = require("../entities/types");
/**
 * Map a StoredOtcOrder to an OtcOrder
 */
function storedOtcOrderToOtcOrder(storedOrder) {
    return new protocol_utils_1.OtcOrder({
        txOrigin: storedOrder.order.txOrigin,
        maker: storedOrder.order.maker,
        taker: storedOrder.order.taker,
        makerToken: storedOrder.order.makerToken,
        takerToken: storedOrder.order.takerToken,
        makerAmount: new utils_1.BigNumber(storedOrder.order.makerAmount),
        takerAmount: new utils_1.BigNumber(storedOrder.order.takerAmount),
        expiryAndNonce: new utils_1.BigNumber(storedOrder.order.expiryAndNonce),
        verifyingContract: storedOrder.order.verifyingContract,
        chainId: Number(storedOrder.order.chainId),
    });
}
exports.storedOtcOrderToOtcOrder = storedOtcOrderToOtcOrder;
/**
 * Map an OtcOrder to a StoredOtcOrder
 */
function otcOrderToStoredOtcOrder(order) {
    return {
        type: types_1.RfqmOrderTypes.Otc,
        order: {
            txOrigin: order.txOrigin,
            maker: order.maker,
            taker: order.taker,
            makerToken: order.makerToken,
            takerToken: order.takerToken,
            makerAmount: order.makerAmount.toString(),
            takerAmount: order.takerAmount.toString(),
            expiryAndNonce: order.expiryAndNonce.toString(),
            verifyingContract: order.verifyingContract,
            chainId: String(order.chainId),
        },
    };
}
exports.otcOrderToStoredOtcOrder = otcOrderToStoredOtcOrder;
/**
 * RfqmDbUtils provides tools for interacting with the database
 */
class RfqmDbUtils {
    constructor(_connection) {
        this._connection = _connection;
    }
    /**
     * Fetches all the worker heartbeats for the provided chain ID.
     */
    async findRfqmWorkerHeartbeatsAsync(chainId) {
        return this._connection.getRepository(RfqmWorkerHeartbeatEntity_1.RfqmWorkerHeartbeatEntity).find({ where: { chainId } });
    }
    /**
     * Updates an existing RFQM job.
     */
    async updateRfqmJobAsync(job) {
        const kind = job.kind;
        switch (kind) {
            case 'rfqm_v2_job':
                await this._connection.getRepository(entities_1.RfqmV2JobEntity).save(job);
                return;
            case 'meta_transaction_job':
                await this._connection.getRepository(entities_1.MetaTransactionJobEntity).save(job);
                return;
            default:
                ((_x) => {
                    throw new Error('unreachable');
                })(kind);
        }
    }
    async upsertRfqmWorkerHeartbeatToDbAsync(address, index, balance, chainId) {
        if (!Number.isInteger(index)) {
            throw new Error(`Index ${index} is not an integer`);
        }
        const repository = this._connection.getRepository(RfqmWorkerHeartbeatEntity_1.RfqmWorkerHeartbeatEntity);
        // Why I did not use `.save`:
        // The `rfqm_worker_heartbeat` table has a trigger to automatically update the timestamp on UPDATE
        // but the `.save` functionality is smart enough to not actually execute the update if none of the
        // data has changed. Since this only happens when a worker balance changes, the timestamp won't
        // update unless `.update` is explicitly called.
        const updatedEntity = await repository.preload({ address, index, balance, chainId });
        if (updatedEntity !== undefined) {
            const findConditions = {
                address,
                chainId,
            };
            await this._connection.getRepository(RfqmWorkerHeartbeatEntity_1.RfqmWorkerHeartbeatEntity).update(findConditions, updatedEntity);
            return updatedEntity;
        }
        const newEntity = new RfqmWorkerHeartbeatEntity_1.RfqmWorkerHeartbeatEntity({ address, index, balance, chainId });
        await this._connection.getRepository(RfqmWorkerHeartbeatEntity_1.RfqmWorkerHeartbeatEntity).insert(newEntity);
        return newEntity;
    }
    /**
     * Updates transactions in the `rfqm_v2_transaction_submission` or the `meta_transaction_submission` tables as appropriate.
     */
    async updateRfqmTransactionSubmissionsAsync(entities) {
        if (entities.length === 0) {
            return;
        }
        const kind = entities[0].kind;
        switch (kind) {
            case 'rfqm_v2_transaction_submission':
                await this._connection
                    .getRepository(entities_1.RfqmV2TransactionSubmissionEntity)
                    .save(entities);
                return;
            case 'meta_transaction_submission':
                await this._connection
                    .getRepository(entities_1.MetaTransactionSubmissionEntity)
                    .save(entities);
                return;
            default:
                ((_x) => {
                    throw new Error('unreachable');
                })(kind);
        }
    }
    /**
     * [RFQm v2] Queries the rfqm_job table with the given orderHash
     */
    async findV2JobByOrderHashAsync(orderHash) {
        return this._connection.getRepository(entities_1.RfqmV2JobEntity).findOne({
            where: { orderHash },
        });
    }
    /**
     * [RFQm v2] Queries the rfqm_quote table with the given orderHash
     */
    async findV2QuoteByOrderHashAsync(orderHash) {
        return this._connection.getRepository(entities_1.RfqmV2QuoteEntity).findOne({
            where: { orderHash },
        });
    }
    /**
     * [RFQm v2] Queries the `rfqm_v2_jobs` table for all jobs with the specified statuses
     */
    async findV2JobsWithStatusesAsync(statuses) {
        return this._connection.getRepository(entities_1.RfqmV2JobEntity).find({
            where: {
                status: (0, typeorm_1.In)(statuses),
            },
        });
    }
    /**
     * [RFQm v2] Queries the rfqm_v2_transaction_submission table with the given transactionHash
     */
    async findV2TransactionSubmissionByTransactionHashAsync(transactionHash) {
        return this._connection.getRepository(entities_1.RfqmV2TransactionSubmissionEntity).findOne({
            where: { transactionHash },
        });
    }
    /**
     * [RFQm v2] Queries the last_look_rejection_cooldowns table with primary key
     */
    async findV2LastLookRejectionCooldownAsync(makerId, chainId, tokenA, tokenB, startTime) {
        return this._connection.getRepository(entities_1.LastLookRejectionCooldownEntity).findOne({
            where: {
                makerId,
                chainId,
                pairKey: (0, pair_utils_1.toPairString)(tokenA, tokenB),
                startTime,
            },
        });
    }
    /**
     * [RFQm v2] Queries the rfqm_v2_transaction_submission table with the given orderHash
     */
    async findV2TransactionSubmissionsByOrderHashAsync(orderHash, type = types_1.RfqmTransactionSubmissionType.Trade) {
        return this._connection.getRepository(entities_1.RfqmV2TransactionSubmissionEntity).find({
            where: { orderHash, type },
        });
    }
    /**
     * [RFQm v2] Updates an RfqmV2Job at the given orderHash
     */
    async updateV2JobAsync(orderHash, isCompleted, rfqmJobOpts) {
        await this._connection.getRepository(entities_1.RfqmV2JobEntity).save({ ...rfqmJobOpts, isCompleted, orderHash });
    }
    /**
     * [RFQm v2] writes to the rfqm_v2_transaction_submission table
     */
    async writeV2RfqmTransactionSubmissionToDbAsync(partialV2RfqmTransactionSubmissionEntity) {
        const entity = new entities_1.RfqmV2TransactionSubmissionEntity(partialV2RfqmTransactionSubmissionEntity);
        await this._connection.getRepository(entities_1.RfqmV2TransactionSubmissionEntity).insert(entity);
        return entity;
    }
    /**
     * [RFQm v2] bulk update to the rfqm_v2_transaction_submission table
     */
    async updateV2TransactionSubmissionsAsync(entities) {
        return this._connection.getRepository(entities_1.RfqmV2TransactionSubmissionEntity).save(entities);
    }
    /**
     * [RFQm v2] writes to the rfqm_v2_quote table
     */
    async writeV2QuoteAsync(rfqmV2QuoteOpts) {
        await this._connection.getRepository(entities_1.RfqmV2QuoteEntity).insert(new entities_1.RfqmV2QuoteEntity(rfqmV2QuoteOpts));
    }
    /**
     * [RFQm v2] writes to the rfqm_v2_job table
     */
    async writeV2JobAsync(rfqmV2JobOpts) {
        await this._connection.getRepository(entities_1.RfqmV2JobEntity).insert(new entities_1.RfqmV2JobEntity(rfqmV2JobOpts));
    }
    /**
     * [RFQm v2] writes to the rfqm_v2_transaction_submission table. Should not error on duplicate
     * primary key (PK), since the PK is essentially a hash of the contents of the table, minus status
     */
    async writeV2TransactionSubmissionAsync(constructorOpts) {
        const entity = new entities_1.RfqmV2TransactionSubmissionEntity(constructorOpts);
        await this._connection.getRepository(entities_1.RfqmV2TransactionSubmissionEntity).save(entity);
        return entity;
    }
    /**
     * [RFQm v2] writes to the last_look_rejection_cooldowns table
     */
    async writeV2LastLookRejectionCooldownAsync(makerId, chainId, tokenA, tokenB, startTime, endTime, orderHash) {
        await this._connection.getRepository(entities_1.LastLookRejectionCooldownEntity).insert(new entities_1.LastLookRejectionCooldownEntity({
            makerId,
            chainId,
            pairKey: (0, pair_utils_1.toPairString)(tokenA, tokenB),
            startTime,
            endTime,
            orderHash,
        }));
    }
    /**
     * [RFQm v2] find unresolved jobs from the rfqm_v2_jobs table
     * for a given worker address and chain ID.
     */
    async findV2UnresolvedJobsAsync(workerAddress, chainId) {
        return this._connection.getRepository(entities_1.RfqmV2JobEntity).find({
            where: {
                chainId,
                status: (0, typeorm_1.In)(types_1.UnresolvedRfqmJobStatuses),
                workerAddress,
            },
        });
    }
    /**
     * [meta transaction] Queries the `meta_transaction_jobs` table with the given id.
     */
    async findMetaTransactionJobByIdAsync(id) {
        return this._connection.getRepository(entities_1.MetaTransactionJobEntity).findOne({
            where: { id },
        });
    }
    /**
     * [meta transaction] Queries the `meta_transaction_jobs` table with the given meta transaction hash.
     */
    async findMetaTransactionJobByMetaTransactionHashAsync(metaTransactionHash) {
        return this._connection.getRepository(entities_1.MetaTransactionJobEntity).findOne({
            where: { metaTransactionHash },
        });
    }
    /**
     * [meta transaction] Queries the `meta_transaction_jobs` table for all jobs with the specified statuss.
     */
    async findMetaTransactionJobsWithStatusesAsync(statuses) {
        return this._connection.getRepository(entities_1.MetaTransactionJobEntity).find({
            where: {
                status: (0, typeorm_1.In)(statuses),
            },
        });
    }
    /**
     * [meta transaction] Writes to the `meta_transaction_jobs` tabe.
     */
    async writeMetaTransactionJobAsync(metaTransactionJobOpts) {
        return this._connection
            .getRepository(entities_1.MetaTransactionJobEntity)
            .save(new entities_1.MetaTransactionJobEntity(metaTransactionJobOpts));
    }
    /**
     * [meta transaction] find unresolved jobs from the `meta_transaction_jobs` table for
     * a given worker address and chain ID.
     */
    async findUnresolvedMetaTransactionJobsAsync(workerAddress, chainId) {
        return this._connection.getRepository(entities_1.MetaTransactionJobEntity).find({
            where: {
                chainId,
                status: (0, typeorm_1.In)(types_1.UnresolvedRfqmJobStatuses),
                workerAddress,
            },
        });
    }
    /**
     * [meta transaction] Queries the `meta_transaction_submissions` table with the given submission id.
     */
    async findMetaTransactionSubmissionByIdAsync(id) {
        return this._connection.getRepository(entities_1.MetaTransactionSubmissionEntity).findOne({
            where: { id },
        });
    }
    /**
     * [meta transaction] Queries the `meta_transaction_submissions` table with the given transaction hash and type.
     */
    async findMetaTransactionSubmissionsByTransactionHashAsync(transactionHash, type) {
        return this._connection.getRepository(entities_1.MetaTransactionSubmissionEntity).find({
            where: { transactionHash, type },
        });
    }
    /**
     * [meta transaction] Queries the `meta_transaction_submissions` table with the given meta transaction job id and type.
     */
    async findMetaTransactionSubmissionsByJobIdAsync(metaTransactionJobId, type = types_1.RfqmTransactionSubmissionType.Trade) {
        return this._connection.getRepository(entities_1.MetaTransactionSubmissionEntity).find({
            where: { metaTransactionJobId, type },
        });
    }
    /**
     * [meta transaction] writes to the `meta_transaction_submissions` table.
     */
    async writeMetaTransactionSubmissionAsync(constructorOpts) {
        return this._connection
            .getRepository(entities_1.MetaTransactionSubmissionEntity)
            .save(new entities_1.MetaTransactionSubmissionEntity(constructorOpts));
    }
}
exports.RfqmDbUtils = RfqmDbUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,