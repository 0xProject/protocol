a5561b487209cf4486a5eee7f4e37bda
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toUniqueArray = exports.toPairString = void 0;
/**
 * Transforms a "pair string" of format "0x1-0x2" into
 * a two-element array ["0x1", "0x2"]. Ensures the result
 * array is sorted and converted to lower case.
 */
function fromPairString(k) {
    const a = k.split('-');
    if (a.length !== 2) {
        throw new Error();
    }
    // type coercion is there because TypeScript thinks
    // `sort` might change the array length
    return [a[0].toLowerCase(), a[1].toLowerCase()].sort();
}
/**
 * Transforms two token addresses into a "pair string" of the format
 * "0x1-0x2".
 */
function toPairString(tokenA, tokenB) {
    return [tokenA, tokenB]
        .map((str) => str.toLowerCase())
        .sort()
        .join('-');
}
exports.toPairString = toPairString;
/**
 * Transforms an array of "0x1-0x2" pair strings into an array
 * of two-element arrays. Removes duplicate pairs.
 *
 * Example:
 * const pairs = [
 *  "0x1-0x2",
 *  "0x2-0x1",
 *  "0x3-0x4",
 * ];
 * toUniqueArray(pairs); // [["0x1", "0x2"], ["0x3", "0x4"]]
 */
function toUniqueArray(pairs) {
    return Array.from(pairs.reduce((result, pair) => {
        result.add(fromPairString(pair).sort());
        return result;
    }, new Set()));
}
exports.toUniqueArray = toUniqueArray;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9jb3JlL3BhaXJfdXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7R0FJRztBQUNILFNBQVMsY0FBYyxDQUFDLENBQVM7SUFDN0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QixJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLEVBQUUsQ0FBQztLQUNyQjtJQUNELG1EQUFtRDtJQUNuRCx1Q0FBdUM7SUFDdkMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQXNCLENBQUM7QUFDL0UsQ0FBQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLFlBQVksQ0FBQyxNQUFjLEVBQUUsTUFBYztJQUN2RCxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztTQUNsQixHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUMvQixJQUFJLEVBQUU7U0FDTixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkIsQ0FBQztBQUxELG9DQUtDO0FBRUQ7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxTQUFnQixhQUFhLENBQUMsS0FBZTtJQUN6QyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQ2IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRTtRQUMxQixNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUMsRUFBRSxJQUFJLEdBQUcsRUFBb0IsQ0FBQyxDQUNsQyxDQUFDO0FBQ04sQ0FBQztBQVBELHNDQU9DIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZHdhbHNoL2NvZGUtbG9jYWwvMHgtcmZxLWFwaS9zcmMvY29yZS9wYWlyX3V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBUcmFuc2Zvcm1zIGEgXCJwYWlyIHN0cmluZ1wiIG9mIGZvcm1hdCBcIjB4MS0weDJcIiBpbnRvXHJcbiAqIGEgdHdvLWVsZW1lbnQgYXJyYXkgW1wiMHgxXCIsIFwiMHgyXCJdLiBFbnN1cmVzIHRoZSByZXN1bHRcclxuICogYXJyYXkgaXMgc29ydGVkIGFuZCBjb252ZXJ0ZWQgdG8gbG93ZXIgY2FzZS5cclxuICovXHJcbmZ1bmN0aW9uIGZyb21QYWlyU3RyaW5nKGs6IHN0cmluZyk6IFtzdHJpbmcsIHN0cmluZ10ge1xyXG4gICAgY29uc3QgYSA9IGsuc3BsaXQoJy0nKTtcclxuICAgIGlmIChhLmxlbmd0aCAhPT0gMikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xyXG4gICAgfVxyXG4gICAgLy8gdHlwZSBjb2VyY2lvbiBpcyB0aGVyZSBiZWNhdXNlIFR5cGVTY3JpcHQgdGhpbmtzXHJcbiAgICAvLyBgc29ydGAgbWlnaHQgY2hhbmdlIHRoZSBhcnJheSBsZW5ndGhcclxuICAgIHJldHVybiBbYVswXS50b0xvd2VyQ2FzZSgpLCBhWzFdLnRvTG93ZXJDYXNlKCldLnNvcnQoKSBhcyBbc3RyaW5nLCBzdHJpbmddO1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNmb3JtcyB0d28gdG9rZW4gYWRkcmVzc2VzIGludG8gYSBcInBhaXIgc3RyaW5nXCIgb2YgdGhlIGZvcm1hdFxyXG4gKiBcIjB4MS0weDJcIi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0b1BhaXJTdHJpbmcodG9rZW5BOiBzdHJpbmcsIHRva2VuQjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBbdG9rZW5BLCB0b2tlbkJdXHJcbiAgICAgICAgLm1hcCgoc3RyKSA9PiBzdHIudG9Mb3dlckNhc2UoKSlcclxuICAgICAgICAuc29ydCgpXHJcbiAgICAgICAgLmpvaW4oJy0nKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgYW4gYXJyYXkgb2YgXCIweDEtMHgyXCIgcGFpciBzdHJpbmdzIGludG8gYW4gYXJyYXlcclxuICogb2YgdHdvLWVsZW1lbnQgYXJyYXlzLiBSZW1vdmVzIGR1cGxpY2F0ZSBwYWlycy5cclxuICpcclxuICogRXhhbXBsZTpcclxuICogY29uc3QgcGFpcnMgPSBbXHJcbiAqICBcIjB4MS0weDJcIixcclxuICogIFwiMHgyLTB4MVwiLFxyXG4gKiAgXCIweDMtMHg0XCIsXHJcbiAqIF07XHJcbiAqIHRvVW5pcXVlQXJyYXkocGFpcnMpOyAvLyBbW1wiMHgxXCIsIFwiMHgyXCJdLCBbXCIweDNcIiwgXCIweDRcIl1dXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdG9VbmlxdWVBcnJheShwYWlyczogc3RyaW5nW10pOiBbc3RyaW5nLCBzdHJpbmddW10ge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20oXHJcbiAgICAgICAgcGFpcnMucmVkdWNlKChyZXN1bHQsIHBhaXIpID0+IHtcclxuICAgICAgICAgICAgcmVzdWx0LmFkZChmcm9tUGFpclN0cmluZyhwYWlyKS5zb3J0KCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0sIG5ldyBTZXQ8W3N0cmluZywgc3RyaW5nXT4oKSksXHJcbiAgICApO1xyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==