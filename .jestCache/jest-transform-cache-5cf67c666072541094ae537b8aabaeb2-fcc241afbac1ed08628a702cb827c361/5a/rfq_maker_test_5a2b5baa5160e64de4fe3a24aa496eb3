1145aa01b0900c025386d6d584bd6a77
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:custom-no-magic-numbers
// tslint:disable:no-empty
// tslint:disable:max-file-line-count
const chai_1 = require("chai");
const HttpStatus = require("http-status-codes");
const request = require("supertest");
const ts_mockito_1 = require("ts-mockito");
const typeorm_1 = require("typeorm");
const config = require("../src/config");
const constants_1 = require("../src/core/constants");
const entities_1 = require("../src/entities");
const http_rfqm_service_runner_1 = require("../src/runners/http_rfqm_service_runner");
const rfqm_service_1 = require("../src/services/rfqm_service");
const rfq_admin_service_1 = require("../src/services/rfq_admin_service");
const rfq_maker_service_1 = require("../src/services/rfq_maker_service");
const config_manager_1 = require("../src/utils/config_manager");
describe('RFQ maker API tests', () => {
    const makerApiKey = '111222333';
    const unknownMakerApiKey = '111222334';
    const makerId = '11';
    const chainId = 56;
    const invalidChainId = 57;
    const pairs = [
        ['0x374a16f5e686c09b0cc9e8bc3466b3b645c74aa7', '0xf84830b73b2ed3c7267e7638f500110ea47fdf30'],
    ];
    const invalidPairs = [['0x374a16f5e686c09b0cc9e8bc3466b3b645c74aa7', '123']];
    const rfqMaker = new entities_1.RfqMaker({ makerId, chainId, updatedAt: null, pairs, rfqtUri: null, rfqmUri: null });
    let app;
    let server;
    let mockRfqMakerService;
    beforeAll(async () => {
        const connection = (0, ts_mockito_1.mock)(typeorm_1.Connection);
        const configManagerMock = (0, ts_mockito_1.mock)(config_manager_1.ConfigManager);
        const mockRfqmService = (0, ts_mockito_1.mock)(rfqm_service_1.RfqmService);
        const mockRfqAdminService = (0, ts_mockito_1.mock)(rfq_admin_service_1.RfqAdminService);
        mockRfqMakerService = (0, ts_mockito_1.mock)(rfq_maker_service_1.RfqMakerService);
        (0, ts_mockito_1.when)(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).thenReturn(makerId);
        (0, ts_mockito_1.when)(mockRfqMakerService.getRfqMakerAsync(makerId, chainId)).thenResolve(rfqMaker);
        (0, ts_mockito_1.when)(mockRfqMakerService.createOrUpdateRfqMakerAsync(makerId, chainId, (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(rfqMaker);
        const mockRfqmServices = new Map([[chainId, mockRfqmService]]);
        // Start the server
        const res = await (0, http_rfqm_service_runner_1.runHttpRfqmServiceAsync)(mockRfqmServices, new Map(), mockRfqAdminService, (0, ts_mockito_1.instance)(mockRfqMakerService), configManagerMock, config.defaultHttpServiceConfig, connection, false);
        app = res.app;
        server = res.server;
    });
    beforeEach(() => {
        (0, ts_mockito_1.resetCalls)(mockRfqMakerService);
    });
    afterAll(async () => {
        await new Promise((resolve, reject) => {
            server.close((err) => {
                if (err) {
                    reject(err);
                }
                resolve();
            });
        });
    });
    describe('GET /maker/v1/chain-id/:chainId', () => {
        it('should return a 401 UNAUTHORIZED without maker api key', async () => {
            const response = await request(app)
                .get(`${constants_1.RFQ_MAKER_PATH}/chain-id/${chainId}`)
                .expect(HttpStatus.UNAUTHORIZED)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.error).to.be.eq('Invalid api key.');
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(undefined)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('should return a 401 UNAUTHORIZED with an unknown maker api key', async () => {
            const response = await request(app)
                .get(`${constants_1.RFQ_MAKER_PATH}/chain-id/${chainId}`)
                .set(constants_1.RFQ_MAKER_API_KEY_HEADER, unknownMakerApiKey)
                .expect(HttpStatus.UNAUTHORIZED)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.error).to.be.eq('Invalid api key.');
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(unknownMakerApiKey)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('should return a 400 BAD_REQUEST with an invalid chainId', async () => {
            const response = await request(app)
                .get(`${constants_1.RFQ_MAKER_PATH}/chain-id/${invalidChainId}`)
                .set(constants_1.RFQ_MAKER_API_KEY_HEADER, makerApiKey)
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.error).to.be.eq('Invalid chainId.');
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('should return a 200 OK with active pairs', async () => {
            const response = await request(app)
                .get(`${constants_1.RFQ_MAKER_PATH}/chain-id/${chainId}`)
                .set(constants_1.RFQ_MAKER_API_KEY_HEADER, makerApiKey)
                .expect(HttpStatus.OK)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.makerId).to.be.eq(makerId);
            (0, chai_1.expect)(response.body.chainId).to.be.eq(chainId);
            (0, chai_1.expect)(response.body.pairs).to.deep.equal(pairs);
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync(makerId, chainId)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
    });
    describe('PUT /maker/v1/chain-id/:chainId', () => {
        it('should return a 401 UNAUTHORIZED without maker api key', async () => {
            const response = await request(app)
                .put(`${constants_1.RFQ_MAKER_PATH}/chain-id/${chainId}`)
                .send({ pairs, rfqtUri: null, rfqmUri: null })
                .expect(HttpStatus.UNAUTHORIZED)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.error).to.be.eq('Invalid api key.');
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(undefined)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('should return a 401 UNAUTHORIZED with an unknown maker api key', async () => {
            const response = await request(app)
                .put(`${constants_1.RFQ_MAKER_PATH}/chain-id/${chainId}`)
                .send({ pairs, rfqtUri: null, rfqmUri: null })
                .set(constants_1.RFQ_MAKER_API_KEY_HEADER, unknownMakerApiKey)
                .expect(HttpStatus.UNAUTHORIZED)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.error).to.be.eq('Invalid api key.');
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(unknownMakerApiKey)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('should return a 400 BAD_REQUEST with an invalid chainId', async () => {
            const response = await request(app)
                .put(`${constants_1.RFQ_MAKER_PATH}/chain-id/${invalidChainId}`)
                .send({ pairs, rfqtUri: null, rfqmUri: null })
                .set(constants_1.RFQ_MAKER_API_KEY_HEADER, makerApiKey)
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.error).to.be.eq('Invalid chainId.');
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('should return a 400 BAD_REQUEST with an invalid pairs payload', async () => {
            const response = await request(app)
                .put(`${constants_1.RFQ_MAKER_PATH}/chain-id/${chainId}`)
                .send({ pairs: invalidPairs, rfqtUri: null, rfqmUri: null })
                .set(constants_1.RFQ_MAKER_API_KEY_HEADER, makerApiKey)
                .expect(HttpStatus.BAD_REQUEST)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.error).to.be.eq('address of second token for pair 0 is invalid.');
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('should return a 201 CREATED on a valid PUT', async () => {
            const response = await request(app)
                .put(`${constants_1.RFQ_MAKER_PATH}/chain-id/${chainId}`)
                .send({ pairs, rfqtUri: null, rfqmUri: null })
                .set(constants_1.RFQ_MAKER_API_KEY_HEADER, makerApiKey)
                .expect(HttpStatus.CREATED)
                .expect('Content-Type', /json/);
            (0, chai_1.expect)(response.body.makerId).to.be.eq(makerId);
            (0, chai_1.expect)(response.body.chainId).to.be.eq(chainId);
            (0, chai_1.expect)(response.body.pairs).to.deep.equal(pairs);
            (0, ts_mockito_1.verify)(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();
            (0, ts_mockito_1.verify)(mockRfqMakerService.getRfqMakerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(mockRfqMakerService.createOrUpdateRfqMakerAsync(makerId, chainId, (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).once();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvcmZxX21ha2VyX3Rlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBeUM7QUFDekMsMEJBQTBCO0FBQzFCLHFDQUFxQztBQUVyQywrQkFBOEI7QUFFOUIsZ0RBQWdEO0FBQ2hELHFDQUFxQztBQUNyQywyQ0FBZ0Y7QUFDaEYscUNBQXFDO0FBRXJDLHdDQUF3QztBQUN4QyxxREFBaUY7QUFDakYsOENBQTJDO0FBQzNDLHNGQUFrRjtBQUNsRiwrREFBMkQ7QUFDM0QseUVBQW9FO0FBQ3BFLHlFQUFvRTtBQUNwRSxnRUFBNEQ7QUFFNUQsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUM7SUFDaEMsTUFBTSxrQkFBa0IsR0FBRyxXQUFXLENBQUM7SUFDdkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUNuQixNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUM7SUFDMUIsTUFBTSxLQUFLLEdBQXVCO1FBQzlCLENBQUMsNENBQTRDLEVBQUUsNENBQTRDLENBQUM7S0FDL0YsQ0FBQztJQUNGLE1BQU0sWUFBWSxHQUF1QixDQUFDLENBQUMsNENBQTRDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNqRyxNQUFNLFFBQVEsR0FBRyxJQUFJLG1CQUFRLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFFMUcsSUFBSSxHQUF3QixDQUFDO0lBQzdCLElBQUksTUFBYyxDQUFDO0lBQ25CLElBQUksbUJBQW9DLENBQUM7SUFFekMsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2pCLE1BQU0sVUFBVSxHQUFHLElBQUEsaUJBQUksRUFBQyxvQkFB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LENBQUM7aUJBQzFCLE1BQU0sQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFcEMsSUFBQSxhQUFNLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRCxJQUFBLGFBQU0sRUFBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hELElBQUEsYUFBTSxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakQsSUFBQSxtQkFBTSxFQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbkUsSUFBQSxtQkFBTSxFQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLElBQUEscUJBQVEsR0FBRSxFQUFFLElBQUEscUJBQVEsR0FBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUM3RSxJQUFBLG1CQUFNLEVBQ0YsbUJBQW1CLENBQUMsMkJBQTJCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFBLHFCQUFRLEdBQUUsRUFBRSxJQUFBLHFCQUFRLEdBQUUsRUFBRSxJQUFBLHFCQUFRLEdBQUUsQ0FBQyxDQUN4RyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2IsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZHdhbHNoL2NvZGUtbG9jYWwvMHgtcmZxLWFwaS90ZXN0L3JmcV9tYWtlcl90ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOmN1c3RvbS1uby1tYWdpYy1udW1iZXJzXG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eVxuLy8gdHNsaW50OmRpc2FibGU6bWF4LWZpbGUtbGluZS1jb3VudFxuXG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICdjaGFpJztcbmltcG9ydCB7IFNlcnZlciB9IGZyb20gJ2h0dHAnO1xuaW1wb3J0ICogYXMgSHR0cFN0YXR1cyBmcm9tICdodHRwLXN0YXR1cy1jb2Rlcyc7XG5pbXBvcnQgKiBhcyByZXF1ZXN0IGZyb20gJ3N1cGVydGVzdCc7XG5pbXBvcnQgeyBhbnl0aGluZywgaW5zdGFuY2UsIG1vY2ssIHJlc2V0Q2FsbHMsIHZlcmlmeSwgd2hlbiB9IGZyb20gJ3RzLW1vY2tpdG8nO1xuaW1wb3J0IHsgQ29ubmVjdGlvbiB9IGZyb20gJ3R5cGVvcm0nO1xuXG5pbXBvcnQgKiBhcyBjb25maWcgZnJvbSAnLi4vc3JjL2NvbmZpZyc7XG5pbXBvcnQgeyBSRlFfTUFLRVJfQVBJX0tFWV9IRUFERVIsIFJGUV9NQUtFUl9QQVRIIH0gZnJvbSAnLi4vc3JjL2NvcmUvY29uc3RhbnRzJztcbmltcG9ydCB7IFJmcU1ha2VyIH0gZnJvbSAnLi4vc3JjL2VudGl0aWVzJztcbmltcG9ydCB7IHJ1bkh0dHBSZnFtU2VydmljZUFzeW5jIH0gZnJvbSAnLi4vc3JjL3J1bm5lcnMvaHR0cF9yZnFtX3NlcnZpY2VfcnVubmVyJztcbmltcG9ydCB7IFJmcW1TZXJ2aWNlIH0gZnJvbSAnLi4vc3JjL3NlcnZpY2VzL3JmcW1fc2VydmljZSc7XG5pbXBvcnQgeyBSZnFBZG1pblNlcnZpY2UgfSBmcm9tICcuLi9zcmMvc2VydmljZXMvcmZxX2FkbWluX3NlcnZpY2UnO1xuaW1wb3J0IHsgUmZxTWFrZXJTZXJ2aWNlIH0gZnJvbSAnLi4vc3JjL3NlcnZpY2VzL3JmcV9tYWtlcl9zZXJ2aWNlJztcbmltcG9ydCB7IENvbmZpZ01hbmFnZXIgfSBmcm9tICcuLi9zcmMvdXRpbHMvY29uZmlnX21hbmFnZXInO1xuXG5kZXNjcmliZSgnUkZRIG1ha2VyIEFQSSB0ZXN0cycsICgpID0+IHtcbiAgICBjb25zdCBtYWtlckFwaUtleSA9ICcxMTEyMjIzMzMnO1xuICAgIGNvbnN0IHVua25vd25NYWtlckFwaUtleSA9ICcxMTEyMjIzMzQnO1xuICAgIGNvbnN0IG1ha2VySWQgPSAnMTEnO1xuICAgIGNvbnN0IGNoYWluSWQgPSA1NjtcbiAgICBjb25zdCBpbnZhbGlkQ2hhaW5JZCA9IDU3O1xuICAgIGNvbnN0IHBhaXJzOiBbc3RyaW5nLCBzdHJpbmddW10gPSBbXG4gICAgICAgIFsnMHgzNzRhMTZmNWU2ODZjMDliMGNjOWU4YmMzNDY2YjNiNjQ1Yzc0YWE3JywgJzB4Zjg0ODMwYjczYjJlZDNjNzI2N2U3NjM4ZjUwMDExMGVhNDdmZGYzMCddLFxuICAgIF07XG4gICAgY29uc3QgaW52YWxpZFBhaXJzOiBbc3RyaW5nLCBzdHJpbmddW10gPSBbWycweDM3NGExNmY1ZTY4NmMwOWIwY2M5ZThiYzM0NjZiM2I2NDVjNzRhYTcnLCAnMTIzJ11dO1xuICAgIGNvbnN0IHJmcU1ha2VyID0gbmV3IFJmcU1ha2VyKHsgbWFrZXJJZCwgY2hhaW5JZCwgdXBkYXRlZEF0OiBudWxsLCBwYWlycywgcmZxdFVyaTogbnVsbCwgcmZxbVVyaTogbnVsbCB9KTtcblxuICAgIGxldCBhcHA6IEV4cHJlc3MuQXBwbGljYXRpb247XG4gICAgbGV0IHNlcnZlcjogU2VydmVyO1xuICAgIGxldCBtb2NrUmZxTWFrZXJTZXJ2aWNlOiBSZnFNYWtlclNlcnZpY2U7XG5cbiAgICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gbW9jayhDb25uZWN0aW9uKTtcbiAgICAgICAgY29uc3QgY29uZmlnTWFuYWdlck1vY2sgPSBtb2NrKENvbmZpZ01hbmFnZXIpO1xuICAgICAgICBjb25zdCBtb2NrUmZxbVNlcnZpY2UgPSBtb2NrKFJmcW1TZXJ2aWNlKTtcbiAgICAgICAgY29uc3QgbW9ja1JmcUFkbWluU2VydmljZSA9IG1vY2soUmZxQWRtaW5TZXJ2aWNlKTtcblxuICAgICAgICBtb2NrUmZxTWFrZXJTZXJ2aWNlID0gbW9jayhSZnFNYWtlclNlcnZpY2UpO1xuICAgICAgICB3aGVuKG1vY2tSZnFNYWtlclNlcnZpY2UubWFwTWFrZXJBcGlLZXlUb0lkKG1ha2VyQXBpS2V5KSkudGhlblJldHVybihtYWtlcklkKTtcbiAgICAgICAgd2hlbihtb2NrUmZxTWFrZXJTZXJ2aWNlLmdldFJmcU1ha2VyQXN5bmMobWFrZXJJZCwgY2hhaW5JZCkpLnRoZW5SZXNvbHZlKHJmcU1ha2VyKTtcbiAgICAgICAgd2hlbihcbiAgICAgICAgICAgIG1vY2tSZnFNYWtlclNlcnZpY2UuY3JlYXRlT3JVcGRhdGVSZnFNYWtlckFzeW5jKG1ha2VySWQsIGNoYWluSWQsIGFueXRoaW5nKCksIGFueXRoaW5nKCksIGFueXRoaW5nKCkpLFxuICAgICAgICApLnRoZW5SZXNvbHZlKHJmcU1ha2VyKTtcblxuICAgICAgICBjb25zdCBtb2NrUmZxbVNlcnZpY2VzID0gbmV3IE1hcDxudW1iZXIsIFJmcW1TZXJ2aWNlPihbW2NoYWluSWQsIG1vY2tSZnFtU2VydmljZV1dKTtcblxuICAgICAgICAvLyBTdGFydCB0aGUgc2VydmVyXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJ1bkh0dHBSZnFtU2VydmljZUFzeW5jKFxuICAgICAgICAgICAgbW9ja1JmcW1TZXJ2aWNlcyxcbiAgICAgICAgICAgIG5ldyBNYXAoKSxcbiAgICAgICAgICAgIG1vY2tSZnFBZG1pblNlcnZpY2UsXG4gICAgICAgICAgICBpbnN0YW5jZShtb2NrUmZxTWFrZXJTZXJ2aWNlKSxcbiAgICAgICAgICAgIGNvbmZpZ01hbmFnZXJNb2NrLFxuICAgICAgICAgICAgY29uZmlnLmRlZmF1bHRIdHRwU2VydmljZUNvbmZpZyxcbiAgICAgICAgICAgIGNvbm5lY3Rpb24sXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgKTtcbiAgICAgICAgYXBwID0gcmVzLmFwcDtcbiAgICAgICAgc2VydmVyID0gcmVzLnNlcnZlcjtcbiAgICB9KTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICByZXNldENhbGxzKG1vY2tSZnFNYWtlclNlcnZpY2UpO1xuICAgIH0pO1xuXG4gICAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBzZXJ2ZXIuY2xvc2UoKGVycj86IEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ0dFVCAvbWFrZXIvdjEvY2hhaW4taWQvOmNoYWluSWQnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgNDAxIFVOQVVUSE9SSVpFRCB3aXRob3V0IG1ha2VyIGFwaSBrZXknLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAgICAgICAgIC5nZXQoYCR7UkZRX01BS0VSX1BBVEh9L2NoYWluLWlkLyR7Y2hhaW5JZH1gKVxuICAgICAgICAgICAgICAgIC5leHBlY3QoSHR0cFN0YXR1cy5VTkFVVEhPUklaRUQpXG4gICAgICAgICAgICAgICAgLmV4cGVjdCgnQ29udGVudC1UeXBlJywgL2pzb24vKTtcblxuICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IpLnRvLmJlLmVxKCdJbnZhbGlkIGFwaSBrZXkuJyk7XG4gICAgICAgICAgICB2ZXJpZnkobW9ja1JmcU1ha2VyU2VydmljZS5tYXBNYWtlckFwaUtleVRvSWQodW5kZWZpbmVkKSkub25jZSgpO1xuICAgICAgICAgICAgdmVyaWZ5KG1vY2tSZnFNYWtlclNlcnZpY2UuZ2V0UmZxTWFrZXJBc3luYyhhbnl0aGluZygpLCBhbnl0aGluZygpKSkubmV2ZXIoKTtcbiAgICAgICAgICAgIHZlcmlmeShcbiAgICAgICAgICAgICAgICBtb2NrUmZxTWFrZXJTZXJ2aWNlLmNyZWF0ZU9yVXBkYXRlUmZxTWFrZXJBc3luYyhcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKS5uZXZlcigpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhIDQwMSBVTkFVVEhPUklaRUQgd2l0aCBhbiB1bmtub3duIG1ha2VyIGFwaSBrZXknLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAgICAgICAgIC5nZXQoYCR7UkZRX01BS0VSX1BBVEh9L2NoYWluLWlkLyR7Y2hhaW5JZH1gKVxuICAgICAgICAgICAgICAgIC5zZXQoUkZRX01BS0VSX0FQSV9LRVlfSEVBREVSLCB1bmtub3duTWFrZXJBcGlLZXkpXG4gICAgICAgICAgICAgICAgLmV4cGVjdChIdHRwU3RhdHVzLlVOQVVUSE9SSVpFRClcbiAgICAgICAgICAgICAgICAuZXhwZWN0KCdDb250ZW50LVR5cGUnLCAvanNvbi8pO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvcikudG8uYmUuZXEoJ0ludmFsaWQgYXBpIGtleS4nKTtcbiAgICAgICAgICAgIHZlcmlmeShtb2NrUmZxTWFrZXJTZXJ2aWNlLm1hcE1ha2VyQXBpS2V5VG9JZCh1bmtub3duTWFrZXJBcGlLZXkpKS5vbmNlKCk7XG4gICAgICAgICAgICB2ZXJpZnkobW9ja1JmcU1ha2VyU2VydmljZS5nZXRSZnFNYWtlckFzeW5jKGFueXRoaW5nKCksIGFueXRoaW5nKCkpKS5uZXZlcigpO1xuICAgICAgICAgICAgdmVyaWZ5KFxuICAgICAgICAgICAgICAgIG1vY2tSZnFNYWtlclNlcnZpY2UuY3JlYXRlT3JVcGRhdGVSZnFNYWtlckFzeW5jKFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICApLm5ldmVyKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgNDAwIEJBRF9SRVFVRVNUIHdpdGggYW4gaW52YWxpZCBjaGFpbklkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgICAgICAgICAuZ2V0KGAke1JGUV9NQUtFUl9QQVRIfS9jaGFpbi1pZC8ke2ludmFsaWRDaGFpbklkfWApXG4gICAgICAgICAgICAgICAgLnNldChSRlFfTUFLRVJfQVBJX0tFWV9IRUFERVIsIG1ha2VyQXBpS2V5KVxuICAgICAgICAgICAgICAgIC5leHBlY3QoSHR0cFN0YXR1cy5CQURfUkVRVUVTVClcbiAgICAgICAgICAgICAgICAuZXhwZWN0KCdDb250ZW50LVR5cGUnLCAvanNvbi8pO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvcikudG8uYmUuZXEoJ0ludmFsaWQgY2hhaW5JZC4nKTtcbiAgICAgICAgICAgIHZlcmlmeShtb2NrUmZxTWFrZXJTZXJ2aWNlLm1hcE1ha2VyQXBpS2V5VG9JZChtYWtlckFwaUtleSkpLm9uY2UoKTtcbiAgICAgICAgICAgIHZlcmlmeShtb2NrUmZxTWFrZXJTZXJ2aWNlLmdldFJmcU1ha2VyQXN5bmMoYW55dGhpbmcoKSwgYW55dGhpbmcoKSkpLm5ldmVyKCk7XG4gICAgICAgICAgICB2ZXJpZnkoXG4gICAgICAgICAgICAgICAgbW9ja1JmcU1ha2VyU2VydmljZS5jcmVhdGVPclVwZGF0ZVJmcU1ha2VyQXN5bmMoXG4gICAgICAgICAgICAgICAgICAgIGFueXRoaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGFueXRoaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGFueXRoaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGFueXRoaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGFueXRoaW5nKCksXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICkubmV2ZXIoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYSAyMDAgT0sgd2l0aCBhY3RpdmUgcGFpcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAgICAgICAgIC5nZXQoYCR7UkZRX01BS0VSX1BBVEh9L2NoYWluLWlkLyR7Y2hhaW5JZH1gKVxuICAgICAgICAgICAgICAgIC5zZXQoUkZRX01BS0VSX0FQSV9LRVlfSEVBREVSLCBtYWtlckFwaUtleSlcbiAgICAgICAgICAgICAgICAuZXhwZWN0KEh0dHBTdGF0dXMuT0spXG4gICAgICAgICAgICAgICAgLmV4cGVjdCgnQ29udGVudC1UeXBlJywgL2pzb24vKTtcblxuICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWFrZXJJZCkudG8uYmUuZXEobWFrZXJJZCk7XG4gICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5jaGFpbklkKS50by5iZS5lcShjaGFpbklkKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnBhaXJzKS50by5kZWVwLmVxdWFsKHBhaXJzKTtcbiAgICAgICAgICAgIHZlcmlmeShtb2NrUmZxTWFrZXJTZXJ2aWNlLm1hcE1ha2VyQXBpS2V5VG9JZChtYWtlckFwaUtleSkpLm9uY2UoKTtcbiAgICAgICAgICAgIHZlcmlmeShtb2NrUmZxTWFrZXJTZXJ2aWNlLmdldFJmcU1ha2VyQXN5bmMobWFrZXJJZCwgY2hhaW5JZCkpLm9uY2UoKTtcbiAgICAgICAgICAgIHZlcmlmeShcbiAgICAgICAgICAgICAgICBtb2NrUmZxTWFrZXJTZXJ2aWNlLmNyZWF0ZU9yVXBkYXRlUmZxTWFrZXJBc3luYyhcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKS5uZXZlcigpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdQVVQgL21ha2VyL3YxL2NoYWluLWlkLzpjaGFpbklkJywgKCkgPT4ge1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhIDQwMSBVTkFVVEhPUklaRUQgd2l0aG91dCBtYWtlciBhcGkga2V5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgICAgICAgICAucHV0KGAke1JGUV9NQUtFUl9QQVRIfS9jaGFpbi1pZC8ke2NoYWluSWR9YClcbiAgICAgICAgICAgICAgICAuc2VuZCh7IHBhaXJzLCByZnF0VXJpOiBudWxsLCByZnFtVXJpOiBudWxsIH0pXG4gICAgICAgICAgICAgICAgLmV4cGVjdChIdHRwU3RhdHVzLlVOQVVUSE9SSVpFRClcbiAgICAgICAgICAgICAgICAuZXhwZWN0KCdDb250ZW50LVR5cGUnLCAvanNvbi8pO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvcikudG8uYmUuZXEoJ0ludmFsaWQgYXBpIGtleS4nKTtcbiAgICAgICAgICAgIHZlcmlmeShtb2NrUmZxTWFrZXJTZXJ2aWNlLm1hcE1ha2VyQXBpS2V5VG9JZCh1bmRlZmluZWQpKS5vbmNlKCk7XG4gICAgICAgICAgICB2ZXJpZnkobW9ja1JmcU1ha2VyU2VydmljZS5nZXRSZnFNYWtlckFzeW5jKGFueXRoaW5nKCksIGFueXRoaW5nKCkpKS5uZXZlcigpO1xuICAgICAgICAgICAgdmVyaWZ5KFxuICAgICAgICAgICAgICAgIG1vY2tSZnFNYWtlclNlcnZpY2UuY3JlYXRlT3JVcGRhdGVSZnFNYWtlckFzeW5jKFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICApLm5ldmVyKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgNDAxIFVOQVVUSE9SSVpFRCB3aXRoIGFuIHVua25vd24gbWFrZXIgYXBpIGtleScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgICAgICAgICAgLnB1dChgJHtSRlFfTUFLRVJfUEFUSH0vY2hhaW4taWQvJHtjaGFpbklkfWApXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBwYWlycywgcmZxdFVyaTogbnVsbCwgcmZxbVVyaTogbnVsbCB9KVxuICAgICAgICAgICAgICAgIC5zZXQoUkZRX01BS0VSX0FQSV9LRVlfSEVBREVSLCB1bmtub3duTWFrZXJBcGlLZXkpXG4gICAgICAgICAgICAgICAgLmV4cGVjdChIdHRwU3RhdHVzLlVOQVVUSE9SSVpFRClcbiAgICAgICAgICAgICAgICAuZXhwZWN0KCdDb250ZW50LVR5cGUnLCAvanNvbi8pO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvcikudG8uYmUuZXEoJ0ludmFsaWQgYXBpIGtleS4nKTtcbiAgICAgICAgICAgIHZlcmlmeShtb2NrUmZxTWFrZXJTZXJ2aWNlLm1hcE1ha2VyQXBpS2V5VG9JZCh1bmtub3duTWFrZXJBcGlLZXkpKS5vbmNlKCk7XG4gICAgICAgICAgICB2ZXJpZnkobW9ja1JmcU1ha2VyU2VydmljZS5nZXRSZnFNYWtlckFzeW5jKGFueXRoaW5nKCksIGFueXRoaW5nKCkpKS5uZXZlcigpO1xuICAgICAgICAgICAgdmVyaWZ5KFxuICAgICAgICAgICAgICAgIG1vY2tSZnFNYWtlclNlcnZpY2UuY3JlYXRlT3JVcGRhdGVSZnFNYWtlckFzeW5jKFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICApLm5ldmVyKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgNDAwIEJBRF9SRVFVRVNUIHdpdGggYW4gaW52YWxpZCBjaGFpbklkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgICAgICAgICAucHV0KGAke1JGUV9NQUtFUl9QQVRIfS9jaGFpbi1pZC8ke2ludmFsaWRDaGFpbklkfWApXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBwYWlycywgcmZxdFVyaTogbnVsbCwgcmZxbVVyaTogbnVsbCB9KVxuICAgICAgICAgICAgICAgIC5zZXQoUkZRX01BS0VSX0FQSV9LRVlfSEVBREVSLCBtYWtlckFwaUtleSlcbiAgICAgICAgICAgICAgICAuZXhwZWN0KEh0dHBTdGF0dXMuQkFEX1JFUVVFU1QpXG4gICAgICAgICAgICAgICAgLmV4cGVjdCgnQ29udGVudC1UeXBlJywgL2pzb24vKTtcblxuICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IpLnRvLmJlLmVxKCdJbnZhbGlkIGNoYWluSWQuJyk7XG4gICAgICAgICAgICB2ZXJpZnkobW9ja1JmcU1ha2VyU2VydmljZS5tYXBNYWtlckFwaUtleVRvSWQobWFrZXJBcGlLZXkpKS5vbmNlKCk7XG4gICAgICAgICAgICB2ZXJpZnkobW9ja1JmcU1ha2VyU2VydmljZS5nZXRSZnFNYWtlckFzeW5jKGFueXRoaW5nKCksIGFueXRoaW5nKCkpKS5uZXZlcigpO1xuICAgICAgICAgICAgdmVyaWZ5KFxuICAgICAgICAgICAgICAgIG1vY2tSZnFNYWtlclNlcnZpY2UuY3JlYXRlT3JVcGRhdGVSZnFNYWtlckFzeW5jKFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICAgICBhbnl0aGluZygpLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICApLm5ldmVyKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgNDAwIEJBRF9SRVFVRVNUIHdpdGggYW4gaW52YWxpZCBwYWlycyBwYXlsb2FkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgICAgICAgICAucHV0KGAke1JGUV9NQUtFUl9QQVRIfS9jaGFpbi1pZC8ke2NoYWluSWR9YClcbiAgICAgICAgICAgICAgICAuc2VuZCh7IHBhaXJzOiBpbnZhbGlkUGFpcnMsIHJmcXRVcmk6IG51bGwsIHJmcW1Vcmk6IG51bGwgfSlcbiAgICAgICAgICAgICAgICAuc2V0KFJGUV9NQUtFUl9BUElfS0VZX0hFQURFUiwgbWFrZXJBcGlLZXkpXG4gICAgICAgICAgICAgICAgLmV4cGVjdChIdHRwU3RhdHVzLkJBRF9SRVFVRVNUKVxuICAgICAgICAgICAgICAgIC5leHBlY3QoJ0NvbnRlbnQtVHlwZScsIC9qc29uLyk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVycm9yKS50by5iZS5lcSgnYWRkcmVzcyBvZiBzZWNvbmQgdG9rZW4gZm9yIHBhaXIgMCBpcyBpbnZhbGlkLicpO1xuICAgICAgICAgICAgdmVyaWZ5KG1vY2tSZnFNYWtlclNlcnZpY2UubWFwTWFrZXJBcGlLZXlUb0lkKG1ha2VyQXBpS2V5KSkub25jZSgpO1xuICAgICAgICAgICAgdmVyaWZ5KG1vY2tSZnFNYWtlclNlcnZpY2UuZ2V0UmZxTWFrZXJBc3luYyhhbnl0aGluZygpLCBhbnl0aGluZygpKSkubmV2ZXIoKTtcbiAgICAgICAgICAgIHZlcmlmeShcbiAgICAgICAgICAgICAgICBtb2NrUmZxTWFrZXJTZXJ2aWNlLmNyZWF0ZU9yVXBkYXRlUmZxTWFrZXJBc3luYyhcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcoKSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKS5uZXZlcigpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhIDIwMSBDUkVBVEVEIG9uIGEgdmFsaWQgUFVUJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgICAgICAgICAucHV0KGAke1JGUV9NQUtFUl9QQVRIfS9jaGFpbi1pZC8ke2NoYWluSWR9YClcbiAgICAgICAgICAgICAgICAuc2VuZCh7IHBhaXJzLCByZnF0VXJpOiBudWxsLCByZnFtVXJpOiBudWxsIH0pXG4gICAgICAgICAgICAgICAgLnNldChSRlFfTUFLRVJfQVBJX0tFWV9IRUFERVIsIG1ha2VyQXBpS2V5KVxuICAgICAgICAgICAgICAgIC5leHBlY3QoSHR0cFN0YXR1cy5DUkVBVEVEKVxuICAgICAgICAgICAgICAgIC5leHBlY3QoJ0NvbnRlbnQtVHlwZScsIC9qc29uLyk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1ha2VySWQpLnRvLmJlLmVxKG1ha2VySWQpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuY2hhaW5JZCkudG8uYmUuZXEoY2hhaW5JZCk7XG4gICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5wYWlycykudG8uZGVlcC5lcXVhbChwYWlycyk7XG4gICAgICAgICAgICB2ZXJpZnkobW9ja1JmcU1ha2VyU2VydmljZS5tYXBNYWtlckFwaUtleVRvSWQobWFrZXJBcGlLZXkpKS5vbmNlKCk7XG4gICAgICAgICAgICB2ZXJpZnkobW9ja1JmcU1ha2VyU2VydmljZS5nZXRSZnFNYWtlckFzeW5jKGFueXRoaW5nKCksIGFueXRoaW5nKCkpKS5uZXZlcigpO1xuICAgICAgICAgICAgdmVyaWZ5KFxuICAgICAgICAgICAgICAgIG1vY2tSZnFNYWtlclNlcnZpY2UuY3JlYXRlT3JVcGRhdGVSZnFNYWtlckFzeW5jKG1ha2VySWQsIGNoYWluSWQsIGFueXRoaW5nKCksIGFueXRoaW5nKCksIGFueXRoaW5nKCkpLFxuICAgICAgICAgICAgKS5vbmNlKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=