{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/rfq_maker_test.ts","mappings":";;AAAA,yCAAyC;AACzC,0BAA0B;AAC1B,qCAAqC;AAErC,+BAA8B;AAE9B,gDAAgD;AAChD,qCAAqC;AACrC,2CAAgF;AAChF,qCAAqC;AAErC,wCAAwC;AACxC,qDAAiF;AACjF,8CAA2C;AAC3C,sFAAkF;AAClF,+DAA2D;AAC3D,yEAAoE;AACpE,yEAAoE;AACpE,gEAA4D;AAE5D,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACjC,MAAM,WAAW,GAAG,WAAW,CAAC;IAChC,MAAM,kBAAkB,GAAG,WAAW,CAAC;IACvC,MAAM,OAAO,GAAG,IAAI,CAAC;IACrB,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,MAAM,cAAc,GAAG,EAAE,CAAC;IAC1B,MAAM,KAAK,GAAuB;QAC9B,CAAC,4CAA4C,EAAE,4CAA4C,CAAC;KAC/F,CAAC;IACF,MAAM,YAAY,GAAuB,CAAC,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC,CAAC;IACjG,MAAM,QAAQ,GAAG,IAAI,mBAAQ,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IAE1G,IAAI,GAAwB,CAAC;IAC7B,IAAI,MAAc,CAAC;IACnB,IAAI,mBAAoC,CAAC;IAEzC,SAAS,CAAC,KAAK,IAAI,EAAE;QACjB,MAAM,UAAU,GAAG,IAAA,iBAAI,EAAC,oBAAU,CAAC,CAAC;QACpC,MAAM,iBAAiB,GAAG,IAAA,iBAAI,EAAC,8BAAa,CAAC,CAAC;QAC9C,MAAM,eAAe,GAAG,IAAA,iBAAI,EAAC,0BAAW,CAAC,CAAC;QAC1C,MAAM,mBAAmB,GAAG,IAAA,iBAAI,EAAC,mCAAe,CAAC,CAAC;QAElD,mBAAmB,GAAG,IAAA,iBAAI,EAAC,mCAAe,CAAC,CAAC;QAC5C,IAAA,iBAAI,EAAC,mBAAmB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC9E,IAAA,iBAAI,EAAC,mBAAmB,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACnF,IAAA,iBAAI,EACA,mBAAmB,CAAC,2BAA2B,CAAC,OAAO,EAAE,OAAO,EAAE,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CACxG,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAExB,MAAM,gBAAgB,GAAG,IAAI,GAAG,CAAsB,CAAC,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC;QAEpF,mBAAmB;QACnB,MAAM,GAAG,GAAG,MAAM,IAAA,kDAAuB,EACrC,gBAAgB,EAChB,IAAI,GAAG,EAAE,EACT,mBAAmB,EACnB,IAAA,qBAAQ,EAAC,mBAAmB,CAAC,EAC7B,iBAAiB,EACjB,MAAM,CAAC,wBAAwB,EAC/B,UAAU,EACV,KAAK,CACR,CAAC;QACF,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QACd,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,GAAG,EAAE;QACZ,IAAA,uBAAU,EAAC,mBAAmB,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAChB,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAW,EAAE,EAAE;gBACzB,IAAI,GAAG,EAAE;oBACL,MAAM,CAAC,GAAG,CAAC,CAAC;iBACf;gBACD,OAAO,EAAE,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC7C,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC9B,GAAG,CAAC,GAAG,0BAAc,aAAa,OAAO,EAAE,CAAC;iBAC5C,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC;iBAC/B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;YACzD,IAAA,mBAAM,EAAC,mBAAmB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACjE,IAAA,mBAAM,EAAC,mBAAmB,CAAC,gBAAgB,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;YAC7E,IAAA,mBAAM,EACF,mBAAmB,CAAC,2BAA2B,CAC3C,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,CACb,CACJ,CAAC,KAAK,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YAC5E,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC9B,GAAG,CAAC,GAAG,0BAAc,aAAa,OAAO,EAAE,CAAC;iBAC5C,GAAG,CAAC,oCAAwB,EAAE,kBAAkB,CAAC;iBACjD,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC;iBAC/B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;YACzD,IAAA,mBAAM,EAAC,mBAAmB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAC1E,IAAA,mBAAM,EAAC,mBAAmB,CAAC,gBAAgB,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;YAC7E,IAAA,mBAAM,EACF,mBAAmB,CAAC,2BAA2B,CAC3C,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,CACb,CACJ,CAAC,KAAK,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC9B,GAAG,CAAC,GAAG,0BAAc,aAAa,cAAc,EAAE,CAAC;iBACnD,GAAG,CAAC,oCAAwB,EAAE,WAAW,CAAC;iBAC1C,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;YACzD,IAAA,mBAAM,EAAC,mBAAmB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACnE,IAAA,mBAAM,EAAC,mBAAmB,CAAC,gBAAgB,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;YAC7E,IAAA,mBAAM,EACF,mBAAmB,CAAC,2BAA2B,CAC3C,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,CACb,CACJ,CAAC,KAAK,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC9B,GAAG,CAAC,GAAG,0BAAc,aAAa,OAAO,EAAE,CAAC;iBAC5C,GAAG,CAAC,oCAAwB,EAAE,WAAW,CAAC;iBAC1C,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;iBACrB,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;YAChD,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;YAChD,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjD,IAAA,mBAAM,EAAC,mBAAmB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACnE,IAAA,mBAAM,EAAC,mBAAmB,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACtE,IAAA,mBAAM,EACF,mBAAmB,CAAC,2BAA2B,CAC3C,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,CACb,CACJ,CAAC,KAAK,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC7C,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC9B,GAAG,CAAC,GAAG,0BAAc,aAAa,OAAO,EAAE,CAAC;iBAC5C,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;iBAC7C,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC;iBAC/B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;YACzD,IAAA,mBAAM,EAAC,mBAAmB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACjE,IAAA,mBAAM,EAAC,mBAAmB,CAAC,gBAAgB,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;YAC7E,IAAA,mBAAM,EACF,mBAAmB,CAAC,2BAA2B,CAC3C,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,CACb,CACJ,CAAC,KAAK,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YAC5E,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC9B,GAAG,CAAC,GAAG,0BAAc,aAAa,OAAO,EAAE,CAAC;iBAC5C,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;iBAC7C,GAAG,CAAC,oCAAwB,EAAE,kBAAkB,CAAC;iBACjD,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC;iBAC/B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;YACzD,IAAA,mBAAM,EAAC,mBAAmB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAC1E,IAAA,mBAAM,EAAC,mBAAmB,CAAC,gBAAgB,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;YAC7E,IAAA,mBAAM,EACF,mBAAmB,CAAC,2BAA2B,CAC3C,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,CACb,CACJ,CAAC,KAAK,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC9B,GAAG,CAAC,GAAG,0BAAc,aAAa,cAAc,EAAE,CAAC;iBACnD,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;iBAC7C,GAAG,CAAC,oCAAwB,EAAE,WAAW,CAAC;iBAC1C,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;YACzD,IAAA,mBAAM,EAAC,mBAAmB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACnE,IAAA,mBAAM,EAAC,mBAAmB,CAAC,gBAAgB,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;YAC7E,IAAA,mBAAM,EACF,mBAAmB,CAAC,2BAA2B,CAC3C,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,CACb,CACJ,CAAC,KAAK,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC9B,GAAG,CAAC,GAAG,0BAAc,aAAa,OAAO,EAAE,CAAC;iBAC5C,IAAI,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;iBAC3D,GAAG,CAAC,oCAAwB,EAAE,WAAW,CAAC;iBAC1C,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,gDAAgD,CAAC,CAAC;YACvF,IAAA,mBAAM,EAAC,mBAAmB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACnE,IAAA,mBAAM,EAAC,mBAAmB,CAAC,gBAAgB,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;YAC7E,IAAA,mBAAM,EACF,mBAAmB,CAAC,2BAA2B,CAC3C,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,EACV,IAAA,qBAAQ,GAAE,CACb,CACJ,CAAC,KAAK,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;iBAC9B,GAAG,CAAC,GAAG,0BAAc,aAAa,OAAO,EAAE,CAAC;iBAC5C,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;iBAC7C,GAAG,CAAC,oCAAwB,EAAE,WAAW,CAAC;iBAC1C,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC;iBAC1B,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;YAChD,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;YAChD,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjD,IAAA,mBAAM,EAAC,mBAAmB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACnE,IAAA,mBAAM,EAAC,mBAAmB,CAAC,gBAAgB,CAAC,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;YAC7E,IAAA,mBAAM,EACF,mBAAmB,CAAC,2BAA2B,CAAC,OAAO,EAAE,OAAO,EAAE,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,EAAE,IAAA,qBAAQ,GAAE,CAAC,CACxG,CAAC,IAAI,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/rfq_maker_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\n// tslint:disable:no-empty\n// tslint:disable:max-file-line-count\n\nimport { expect } from 'chai';\nimport { Server } from 'http';\nimport * as HttpStatus from 'http-status-codes';\nimport * as request from 'supertest';\nimport { anything, instance, mock, resetCalls, verify, when } from 'ts-mockito';\nimport { Connection } from 'typeorm';\n\nimport * as config from '../src/config';\nimport { RFQ_MAKER_API_KEY_HEADER, RFQ_MAKER_PATH } from '../src/core/constants';\nimport { RfqMaker } from '../src/entities';\nimport { runHttpRfqmServiceAsync } from '../src/runners/http_rfqm_service_runner';\nimport { RfqmService } from '../src/services/rfqm_service';\nimport { RfqAdminService } from '../src/services/rfq_admin_service';\nimport { RfqMakerService } from '../src/services/rfq_maker_service';\nimport { ConfigManager } from '../src/utils/config_manager';\n\ndescribe('RFQ maker API tests', () => {\n    const makerApiKey = '111222333';\n    const unknownMakerApiKey = '111222334';\n    const makerId = '11';\n    const chainId = 56;\n    const invalidChainId = 57;\n    const pairs: [string, string][] = [\n        ['0x374a16f5e686c09b0cc9e8bc3466b3b645c74aa7', '0xf84830b73b2ed3c7267e7638f500110ea47fdf30'],\n    ];\n    const invalidPairs: [string, string][] = [['0x374a16f5e686c09b0cc9e8bc3466b3b645c74aa7', '123']];\n    const rfqMaker = new RfqMaker({ makerId, chainId, updatedAt: null, pairs, rfqtUri: null, rfqmUri: null });\n\n    let app: Express.Application;\n    let server: Server;\n    let mockRfqMakerService: RfqMakerService;\n\n    beforeAll(async () => {\n        const connection = mock(Connection);\n        const configManagerMock = mock(ConfigManager);\n        const mockRfqmService = mock(RfqmService);\n        const mockRfqAdminService = mock(RfqAdminService);\n\n        mockRfqMakerService = mock(RfqMakerService);\n        when(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).thenReturn(makerId);\n        when(mockRfqMakerService.getRfqMakerAsync(makerId, chainId)).thenResolve(rfqMaker);\n        when(\n            mockRfqMakerService.createOrUpdateRfqMakerAsync(makerId, chainId, anything(), anything(), anything()),\n        ).thenResolve(rfqMaker);\n\n        const mockRfqmServices = new Map<number, RfqmService>([[chainId, mockRfqmService]]);\n\n        // Start the server\n        const res = await runHttpRfqmServiceAsync(\n            mockRfqmServices,\n            new Map(),\n            mockRfqAdminService,\n            instance(mockRfqMakerService),\n            configManagerMock,\n            config.defaultHttpServiceConfig,\n            connection,\n            false,\n        );\n        app = res.app;\n        server = res.server;\n    });\n\n    beforeEach(() => {\n        resetCalls(mockRfqMakerService);\n    });\n\n    afterAll(async () => {\n        await new Promise<void>((resolve, reject) => {\n            server.close((err?: Error) => {\n                if (err) {\n                    reject(err);\n                }\n                resolve();\n            });\n        });\n    });\n\n    describe('GET /maker/v1/chain-id/:chainId', () => {\n        it('should return a 401 UNAUTHORIZED without maker api key', async () => {\n            const response = await request(app)\n                .get(`${RFQ_MAKER_PATH}/chain-id/${chainId}`)\n                .expect(HttpStatus.UNAUTHORIZED)\n                .expect('Content-Type', /json/);\n\n            expect(response.body.error).to.be.eq('Invalid api key.');\n            verify(mockRfqMakerService.mapMakerApiKeyToId(undefined)).once();\n            verify(mockRfqMakerService.getRfqMakerAsync(anything(), anything())).never();\n            verify(\n                mockRfqMakerService.createOrUpdateRfqMakerAsync(\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                ),\n            ).never();\n        });\n\n        it('should return a 401 UNAUTHORIZED with an unknown maker api key', async () => {\n            const response = await request(app)\n                .get(`${RFQ_MAKER_PATH}/chain-id/${chainId}`)\n                .set(RFQ_MAKER_API_KEY_HEADER, unknownMakerApiKey)\n                .expect(HttpStatus.UNAUTHORIZED)\n                .expect('Content-Type', /json/);\n\n            expect(response.body.error).to.be.eq('Invalid api key.');\n            verify(mockRfqMakerService.mapMakerApiKeyToId(unknownMakerApiKey)).once();\n            verify(mockRfqMakerService.getRfqMakerAsync(anything(), anything())).never();\n            verify(\n                mockRfqMakerService.createOrUpdateRfqMakerAsync(\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                ),\n            ).never();\n        });\n\n        it('should return a 400 BAD_REQUEST with an invalid chainId', async () => {\n            const response = await request(app)\n                .get(`${RFQ_MAKER_PATH}/chain-id/${invalidChainId}`)\n                .set(RFQ_MAKER_API_KEY_HEADER, makerApiKey)\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(response.body.error).to.be.eq('Invalid chainId.');\n            verify(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();\n            verify(mockRfqMakerService.getRfqMakerAsync(anything(), anything())).never();\n            verify(\n                mockRfqMakerService.createOrUpdateRfqMakerAsync(\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                ),\n            ).never();\n        });\n\n        it('should return a 200 OK with active pairs', async () => {\n            const response = await request(app)\n                .get(`${RFQ_MAKER_PATH}/chain-id/${chainId}`)\n                .set(RFQ_MAKER_API_KEY_HEADER, makerApiKey)\n                .expect(HttpStatus.OK)\n                .expect('Content-Type', /json/);\n\n            expect(response.body.makerId).to.be.eq(makerId);\n            expect(response.body.chainId).to.be.eq(chainId);\n            expect(response.body.pairs).to.deep.equal(pairs);\n            verify(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();\n            verify(mockRfqMakerService.getRfqMakerAsync(makerId, chainId)).once();\n            verify(\n                mockRfqMakerService.createOrUpdateRfqMakerAsync(\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                ),\n            ).never();\n        });\n    });\n\n    describe('PUT /maker/v1/chain-id/:chainId', () => {\n        it('should return a 401 UNAUTHORIZED without maker api key', async () => {\n            const response = await request(app)\n                .put(`${RFQ_MAKER_PATH}/chain-id/${chainId}`)\n                .send({ pairs, rfqtUri: null, rfqmUri: null })\n                .expect(HttpStatus.UNAUTHORIZED)\n                .expect('Content-Type', /json/);\n\n            expect(response.body.error).to.be.eq('Invalid api key.');\n            verify(mockRfqMakerService.mapMakerApiKeyToId(undefined)).once();\n            verify(mockRfqMakerService.getRfqMakerAsync(anything(), anything())).never();\n            verify(\n                mockRfqMakerService.createOrUpdateRfqMakerAsync(\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                ),\n            ).never();\n        });\n\n        it('should return a 401 UNAUTHORIZED with an unknown maker api key', async () => {\n            const response = await request(app)\n                .put(`${RFQ_MAKER_PATH}/chain-id/${chainId}`)\n                .send({ pairs, rfqtUri: null, rfqmUri: null })\n                .set(RFQ_MAKER_API_KEY_HEADER, unknownMakerApiKey)\n                .expect(HttpStatus.UNAUTHORIZED)\n                .expect('Content-Type', /json/);\n\n            expect(response.body.error).to.be.eq('Invalid api key.');\n            verify(mockRfqMakerService.mapMakerApiKeyToId(unknownMakerApiKey)).once();\n            verify(mockRfqMakerService.getRfqMakerAsync(anything(), anything())).never();\n            verify(\n                mockRfqMakerService.createOrUpdateRfqMakerAsync(\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                ),\n            ).never();\n        });\n\n        it('should return a 400 BAD_REQUEST with an invalid chainId', async () => {\n            const response = await request(app)\n                .put(`${RFQ_MAKER_PATH}/chain-id/${invalidChainId}`)\n                .send({ pairs, rfqtUri: null, rfqmUri: null })\n                .set(RFQ_MAKER_API_KEY_HEADER, makerApiKey)\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(response.body.error).to.be.eq('Invalid chainId.');\n            verify(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();\n            verify(mockRfqMakerService.getRfqMakerAsync(anything(), anything())).never();\n            verify(\n                mockRfqMakerService.createOrUpdateRfqMakerAsync(\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                ),\n            ).never();\n        });\n\n        it('should return a 400 BAD_REQUEST with an invalid pairs payload', async () => {\n            const response = await request(app)\n                .put(`${RFQ_MAKER_PATH}/chain-id/${chainId}`)\n                .send({ pairs: invalidPairs, rfqtUri: null, rfqmUri: null })\n                .set(RFQ_MAKER_API_KEY_HEADER, makerApiKey)\n                .expect(HttpStatus.BAD_REQUEST)\n                .expect('Content-Type', /json/);\n\n            expect(response.body.error).to.be.eq('address of second token for pair 0 is invalid.');\n            verify(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();\n            verify(mockRfqMakerService.getRfqMakerAsync(anything(), anything())).never();\n            verify(\n                mockRfqMakerService.createOrUpdateRfqMakerAsync(\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                    anything(),\n                ),\n            ).never();\n        });\n\n        it('should return a 201 CREATED on a valid PUT', async () => {\n            const response = await request(app)\n                .put(`${RFQ_MAKER_PATH}/chain-id/${chainId}`)\n                .send({ pairs, rfqtUri: null, rfqmUri: null })\n                .set(RFQ_MAKER_API_KEY_HEADER, makerApiKey)\n                .expect(HttpStatus.CREATED)\n                .expect('Content-Type', /json/);\n\n            expect(response.body.makerId).to.be.eq(makerId);\n            expect(response.body.chainId).to.be.eq(chainId);\n            expect(response.body.pairs).to.deep.equal(pairs);\n            verify(mockRfqMakerService.mapMakerApiKeyToId(makerApiKey)).once();\n            verify(mockRfqMakerService.getRfqMakerAsync(anything(), anything())).never();\n            verify(\n                mockRfqMakerService.createOrUpdateRfqMakerAsync(makerId, chainId, anything(), anything(), anything()),\n            ).once();\n        });\n    });\n});\n"],"version":3}