ae32075c7ddf0447a0c2abf95b2e8455
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqMakerService = void 0;
const contract_addresses_1 = require("@0x/contract-addresses");
const utils_1 = require("@0x/utils");
const lodash_1 = require("lodash");
const entities_1 = require("../entities");
/**
 * RfqMakerService is the coordination layer for HTTP maker services.
 */
class RfqMakerService {
    constructor(_dbUtils, _configManager) {
        this._dbUtils = _dbUtils;
        this._configManager = _configManager;
    }
    /**
     * Validates that the chainId specified by client is a valid (and known) chain ID.
     */
    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static isValidChainId(chainId) {
        return Object.values(contract_addresses_1.ChainId).includes(Number(chainId));
    }
    /**
     * Validates that the URIs (either rfqtUri or rfqmUri) specified by client is a valid URI or null.
     */
    static validateUriOrThrow(fieldName, uri) {
        if (uri === null) {
            return;
        }
        if (uri === undefined || !uri.startsWith('http')) {
            throw new Error(`Invalid value of ${fieldName}: ${uri}`);
        }
    }
    /**
     * Validates that a payload of market maker pairs is well-formed
     * and contains valid contract addresses.
     *
     * @throws if the payload is invalid
     */
    static validatePairsPayloadOrThrow(pairs) {
        if (!(0, lodash_1.isArray)(pairs)) {
            throw new Error('pairs is not an array.');
        }
        pairs.forEach((pair, i) => {
            if (!(0, lodash_1.isArray)(pair)) {
                throw new Error(`pair ${i} is not an array.`);
            }
            if (pair.length !== 2) {
                throw new Error(`pair ${i} array does not consist of exactly two elements.`);
            }
            if (!utils_1.addressUtils.isAddress(pair[0])) {
                throw new Error(`address of first token for pair ${i} is invalid.`);
            }
            if (!utils_1.addressUtils.isAddress(pair[1])) {
                throw new Error(`address of second token for pair ${i} is invalid.`);
            }
            if (pair[0] === pair[1]) {
                throw new Error(`pair array ${i} has identical assets.`);
            }
        });
    }
    /**
     * Get the config of a maker on a given blockchain from DB.
     * Return a `RfqMaker` which specifies makerId, chainId, update time, the pairs array, rfqtUri and rfqmUir.
     * If not found in DB, return the default entity for the makerId and chainId with empty pairs array, and `null` URIs.
     */
    async getRfqMakerAsync(makerId, chainId) {
        const result = await this._dbUtils.getRfqMakerAsync(makerId, chainId);
        return result !== null && result !== void 0 ? result : new entities_1.RfqMaker({ makerId, chainId, updatedAt: null, pairs: [], rfqtUri: null, rfqmUri: null });
    }
    /**
     * Create or update a record in the `rfq_maker_pairs` DB table for the maker on a given blockchain.
     * Return the `RfqMaker` entity which represents the new record.
     */
    async createOrUpdateRfqMakerAsync(makerId, chainId, pairs, rfqtUri, rfqmUri) {
        return this._dbUtils.createOrUpdateRfqMakerAsync(makerId, chainId, pairs, rfqtUri, rfqmUri);
    }
    /**
     * Update one or more fields of a record in the `rfq_maker_pairs` DB table for the maker on a given blockchain.
     * Return the `RfqMaker` entity which represents the new record.
     */
    async patchRfqMakerAsync(makerId, chainId, pairs, rfqtUri, rfqmUri) {
        const oldRfqMaker = await this.getRfqMakerAsync(makerId, chainId);
        return this.createOrUpdateRfqMakerAsync(makerId, chainId, pairs !== undefined ? pairs : oldRfqMaker.pairs, rfqtUri !== undefined ? rfqtUri : oldRfqMaker.rfqtUri, rfqmUri !== undefined ? rfqmUri : oldRfqMaker.rfqmUri);
    }
    /**
     * Maps the given maker API key to makerId.
     * Returns null is the input key is `undefined` or unknown.
     */
    mapMakerApiKeyToId(apiKey) {
        if (apiKey === undefined) {
            return null;
        }
        return this._configManager.getRfqMakerIdForApiKey(apiKey) || null;
    }
}
exports.RfqMakerService = RfqMakerService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,