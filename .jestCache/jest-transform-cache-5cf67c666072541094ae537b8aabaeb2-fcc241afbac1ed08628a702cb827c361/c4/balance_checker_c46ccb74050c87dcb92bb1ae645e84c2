189060359c616e2eb39b5157b803d20e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BalanceChecker = void 0;
const asset_swapper_1 = require("@0x/asset-swapper");
const artifacts_1 = require("@0x/asset-swapper/lib/src/artifacts");
const dev_utils_1 = require("@0x/dev-utils");
// The eth_call will run out of gas if there are too many balance calls at once
const BALANCE_CHECKER_GAS_LIMIT = 5500000;
// We use this random address on which to override the bytecode (unlikely to conflict with another address)
const RANDOM_ADDRESS = '0xffffffffffffffffffffffffffffffffffffffff';
/**
 * BalanceChecker makes it easy and efficient to look up a large number of token balances at once
 */
class BalanceChecker {
    constructor(provider, balanceCheckerContract) {
        this._balanceCheckerContract =
            balanceCheckerContract ||
                new asset_swapper_1.BalanceCheckerContract(RANDOM_ADDRESS, provider, { gas: BALANCE_CHECKER_GAS_LIMIT });
        this._balanceCheckerBytecode = artifacts_1.artifacts.BalanceChecker.compilerOutput.evm.deployedBytecode.object;
    }
    /**
     * Fetches the tradeable balance for a list of addresses against the specified tokens.
     * Tradeable means the minimum of the balance and allowance.
     *
     * The index of an address in `addresses` must correspond with the index of a token in `tokens`
     *
     * @param addresses - an array of addresses
     * @param tokens - an array of tokens
     * @param allowanceTarget - Target address to check for allowance.
     * @returns - an array of BigNumbers
     */
    async getMinOfBalancesAndAllowancesAsync(addresses, tokens, allowanceTarget) {
        if (addresses.length !== tokens.length) {
            throw new Error(`expected length of addresses and tokens must be the same, actual: ${addresses.length} and ${tokens.length}`);
        }
        // HACK: this checks to see if we're using a real implementation of the balanceCheckerContract or using an override
        // We do this because ganache doesn't allow for overrides. In all other environments, we should use overrides
        const shouldUseOverrides = this._balanceCheckerContract.address.toLowerCase() === RANDOM_ADDRESS;
        const txOpts = shouldUseOverrides
            ? {
                overrides: {
                    [RANDOM_ADDRESS]: {
                        code: this._balanceCheckerBytecode,
                    },
                },
            }
            : {};
        return this._balanceCheckerContract
            .getMinOfBalancesOrAllowances(addresses, tokens, allowanceTarget)
            .callAsync(txOpts, dev_utils_1.BlockParamLiteral.Latest);
    }
    /**
     * Fetches the balances for a list of addresses against the specified tokens.
     *
     * The index of an address in `addresses` must correspond with the index of a token in `tokens`.
     */
    async getTokenBalancesAsync(addresses, tokens) {
        if (addresses.length !== tokens.length) {
            throw new Error(`expected length of addresses and tokens must be the same, actual: ${addresses.length} and ${tokens.length}`);
        }
        // HACK: this checks to see if we're using a real implementation of the balanceCheckerContract or using an override
        // We do this because ganache doesn't allow for overrides. In all other environments, we should use overrides
        const shouldUseOverrides = this._balanceCheckerContract.address.toLowerCase() === RANDOM_ADDRESS;
        const txOpts = shouldUseOverrides
            ? {
                overrides: {
                    [RANDOM_ADDRESS]: {
                        code: this._balanceCheckerBytecode,
                    },
                },
            }
            : {};
        return this._balanceCheckerContract.balances(addresses, tokens).callAsync(txOpts, dev_utils_1.BlockParamLiteral.Latest);
    }
}
exports.BalanceChecker = BalanceChecker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,