75e6f06710b2e4bbfd9b0c5547ee1077
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const contract_addresses_1 = require("@0x/contract-addresses");
const utils_1 = require("@0x/utils");
const chai_1 = require("chai");
const ioredis_1 = require("ioredis");
const constants_1 = require("../../src/core/constants");
const cache_client_1 = require("../../src/utils/cache_client");
const deployment_1 = require("../test_utils/deployment");
jest.setTimeout(constants_1.ONE_MINUTE_MS * 2);
let teardownDependencies;
describe('CacheClient', () => {
    let redis;
    let cacheClient;
    const chainId = contract_addresses_1.ChainId.Ganache;
    const makerA = '0x1111111111111111111111111111111111111111';
    const makerB = '0x2222222222222222222222222222222222222222';
    const makerC = '0x3333333333333333333333333333333333333333';
    const tokenA = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';
    const tokenB = '0x6B175474E89094C44Da98b954EedeAC495271d0F';
    const tokenC = '0xdAC17F958D2ee523a2206206994597C13D831ec7';
    // compareFn is used to determine the order of ERC20Owner elements
    const compareFn = (a, b) => a.owner.localeCompare(b.owner);
    beforeAll(async () => {
        teardownDependencies = await (0, deployment_1.setupDependenciesAsync)(['redis']);
        redis = new ioredis_1.default();
        cacheClient = new cache_client_1.CacheClient(redis);
    });
    afterAll(async () => {
        await cacheClient.closeAsync();
        if (!teardownDependencies()) {
            throw new Error('Failed to tear down dependencies');
        }
    });
    afterEach(async () => {
        await redis.flushdb();
    });
    describe('addERC20OwnerAsync', () => {
        it('adds pending address to observed addresses without error', async () => {
            (0, chai_1.expect)(cacheClient.addERC20OwnerAsync(chainId, { owner: makerA, token: tokenA })).to.eventually.be.equal(void 0);
        });
    });
    describe('getERC20OwnersAsync', () => {
        const addresses = [
            { owner: makerA, token: tokenA },
            { owner: makerB, token: tokenB },
            { owner: makerC, token: tokenC },
        ];
        it('fetches maker token addresses in correct format', async () => {
            addresses.forEach(async (address) => {
                await cacheClient.addERC20OwnerAsync(chainId, address);
            });
            const cachedAddresses = await cacheClient.getERC20OwnersAsync(chainId);
            (0, chai_1.expect)(cachedAddresses.sort(compareFn)).to.deep.eq(addresses.sort(compareFn));
        });
        it('fetches empty arrays if no addresses are found in the set', async () => {
            (0, chai_1.expect)(await cacheClient.getERC20OwnersAsync(chainId)).to.deep.eq([]);
        });
    });
    describe('setERC20OwnerBalancesAsync', () => {
        const addresses = [
            { owner: makerA, token: tokenA },
            { owner: makerB, token: tokenB },
            { owner: makerC, token: tokenC },
        ];
        const balances = [new utils_1.BigNumber(1), new utils_1.BigNumber(2), new utils_1.BigNumber(3)];
        it('sets balances in the cache without error', async () => {
            (0, chai_1.expect)(cacheClient.setERC20OwnerBalancesAsync(chainId, addresses, balances)).to.eventually.be.equal(void 0);
        });
        it('should fail when addresses do not match balances', async () => {
            (0, chai_1.expect)(cacheClient.setERC20OwnerBalancesAsync(chainId, addresses, balances.slice(0, -1))).to.be.rejectedWith('balances');
        });
        it('should not fail when addresses are empty', async () => {
            (0, chai_1.expect)(cacheClient.setERC20OwnerBalancesAsync(chainId, [], [])).to.eventually.be.equal(void 0);
        });
    });
    describe('getERC20OwnerBalancesAsync', () => {
        const addresses = [
            { owner: makerA, token: tokenA },
            { owner: makerB, token: tokenB },
            { owner: makerC, token: tokenC },
        ];
        const balances = [new utils_1.BigNumber(1), new utils_1.BigNumber(2), new utils_1.BigNumber(3)];
        beforeEach(async () => {
            await cacheClient.setERC20OwnerBalancesAsync(chainId, addresses, balances);
        });
        it('fetches correct balances from the cache', async () => {
            (0, chai_1.expect)(await cacheClient.getERC20OwnerBalancesAsync(chainId, addresses)).to.deep.eq([
                new utils_1.BigNumber(1),
                new utils_1.BigNumber(2),
                new utils_1.BigNumber(3),
            ]);
        });
        it('returns null balances if addresses are not in the cache', async () => {
            const badAddresses = [
                { owner: makerA, token: tokenA },
                { owner: makerB, token: tokenB },
                { owner: '0x0000000000000000000000000000000000000000', token: tokenC },
            ];
            (0, chai_1.expect)(await cacheClient.getERC20OwnerBalancesAsync(chainId, badAddresses)).to.deep.eq([
                new utils_1.BigNumber(1),
                new utils_1.BigNumber(2),
                null,
            ]);
        });
        it('returns null balances if addresses from a different chain are supplied', async () => {
            (0, chai_1.expect)(await cacheClient.getERC20OwnerBalancesAsync(contract_addresses_1.ChainId.PolygonMumbai, addresses)).to.deep.eq([
                null,
                null,
                null,
            ]);
        });
        it('returns an empty array if addresses are empty', async () => {
            (0, chai_1.expect)(await cacheClient.getERC20OwnerBalancesAsync(chainId, [])).to.deep.eq([]);
        });
    });
    describe('evictZeroBalancesAsync', () => {
        const addresses = [
            { owner: makerA, token: tokenA },
            { owner: makerB, token: tokenB },
            { owner: makerC, token: tokenC },
        ];
        it('evicts zeroed entries from the cache', async () => {
            addresses.forEach(async (address) => {
                await cacheClient.addERC20OwnerAsync(chainId, address);
            });
            let cachedAddresses = await cacheClient.getERC20OwnersAsync(chainId);
            (0, chai_1.expect)(cachedAddresses.sort(compareFn)).to.deep.eq(addresses.sort(compareFn));
            const balances = [new utils_1.BigNumber(1), new utils_1.BigNumber(2), new utils_1.BigNumber(0)];
            await cacheClient.setERC20OwnerBalancesAsync(chainId, addresses, balances);
            const numEvicted = await cacheClient.evictZeroBalancesAsync(chainId);
            (0, chai_1.expect)(numEvicted).to.eq(1);
            cachedAddresses = await cacheClient.getERC20OwnersAsync(chainId);
            (0, chai_1.expect)(cachedAddresses.sort(compareFn)).to.deep.eq(addresses.slice(0, 2).sort(compareFn));
        });
        it('does not evict any entries if there are no stale balances', async () => {
            addresses.forEach(async (address) => {
                await cacheClient.addERC20OwnerAsync(chainId, address);
            });
            let cachedAddresses = await cacheClient.getERC20OwnersAsync(chainId);
            (0, chai_1.expect)(cachedAddresses.sort(compareFn)).to.deep.eq(addresses.sort(compareFn));
            const balances = [new utils_1.BigNumber(1), new utils_1.BigNumber(2), new utils_1.BigNumber(3)];
            await cacheClient.setERC20OwnerBalancesAsync(chainId, addresses, balances);
            const numEvicted = await cacheClient.evictZeroBalancesAsync(chainId);
            (0, chai_1.expect)(numEvicted).to.eq(0);
            cachedAddresses = await cacheClient.getERC20OwnersAsync(chainId);
            (0, chai_1.expect)(cachedAddresses.sort(compareFn)).to.deep.eq(addresses.sort(compareFn));
        });
        it('does not error if the address set is empty', async () => {
            (0, chai_1.expect)(await cacheClient.getERC20OwnersAsync(chainId)).to.have.length(0);
            const numEvicted = await cacheClient.evictZeroBalancesAsync(chainId);
            (0, chai_1.expect)(numEvicted).to.eq(0);
        });
    });
    describe('coolDownMakerForPair', () => {
        const makerId1 = 'makerId1';
        const takerToken = 'takerToken';
        const makerToken = 'makerToken';
        it('should add new makers to the cooling down set for a pair', async () => {
            const isUpdated = await cacheClient.addMakerToCooldownAsync(makerId1, Date.now(), chainId, takerToken, makerToken);
            (0, chai_1.expect)(isUpdated).to.eq(true);
        });
        it('should update endTime to a time later than existing endTime', async () => {
            const now = Date.now();
            const oneMinuteLater = now + constants_1.ONE_MINUTE_MS;
            await cacheClient.addMakerToCooldownAsync(makerId1, now, chainId, takerToken, makerToken);
            const isUpdated = await cacheClient.addMakerToCooldownAsync(makerId1, oneMinuteLater, chainId, makerToken, takerToken);
            (0, chai_1.expect)(isUpdated).to.eq(true);
        });
        it('should not update endTime to a time earlier than existing endTime', async () => {
            const now = Date.now();
            const oneMinuteEarlier = now - constants_1.ONE_MINUTE_MS;
            await cacheClient.addMakerToCooldownAsync(makerId1, now, chainId, takerToken, makerToken);
            const isUpdated = await cacheClient.addMakerToCooldownAsync(makerId1, oneMinuteEarlier, chainId, takerToken, makerToken);
            (0, chai_1.expect)(isUpdated).to.eq(false);
        });
    });
    describe('getCoolingDownMakersForPair', () => {
        const makerId1 = 'makerId1';
        const makerId2 = 'makerId2';
        const takerToken = 'takerToken';
        const otherTakerToken = 'otherTakerToken';
        const makerToken = 'makerToken';
        it('should get all makers that are cooling down', async () => {
            const now = Date.now();
            const oneMinuteLater = now + constants_1.ONE_MINUTE_MS;
            await cacheClient.addMakerToCooldownAsync(makerId1, oneMinuteLater, chainId, takerToken, makerToken);
            await cacheClient.addMakerToCooldownAsync(makerId2, oneMinuteLater, chainId, takerToken, makerToken);
            const result = await cacheClient.getMakersInCooldownForPairAsync(chainId, takerToken, makerToken, now);
            (0, chai_1.expect)(result).to.deep.eq([makerId1, makerId2]);
        });
        it('should not include makers whose cooling down periods already ended', async () => {
            const now = Date.now();
            const oneMinuteEarlier = now - constants_1.ONE_MINUTE_MS;
            const oneMinuteLater = now + constants_1.ONE_MINUTE_MS;
            await cacheClient.addMakerToCooldownAsync(makerId1, oneMinuteEarlier, chainId, takerToken, makerToken);
            await cacheClient.addMakerToCooldownAsync(makerId2, oneMinuteLater, chainId, takerToken, makerToken);
            const result = await cacheClient.getMakersInCooldownForPairAsync(chainId, takerToken, makerToken, now);
            (0, chai_1.expect)(result).to.deep.eq([makerId2]);
        });
        it('should only include makers that are cooling down for this pair', async () => {
            const now = Date.now();
            const oneMinuteLater = now + constants_1.ONE_MINUTE_MS;
            await cacheClient.addMakerToCooldownAsync(makerId1, oneMinuteLater, chainId, takerToken, makerToken);
            await cacheClient.addMakerToCooldownAsync(makerId2, oneMinuteLater, chainId, otherTakerToken, makerToken);
            const result = await cacheClient.getMakersInCooldownForPairAsync(chainId, takerToken, makerToken, now);
            (0, chai_1.expect)(result).to.deep.eq([makerId1]);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvY2FjaGVfc2VydmljZV90ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsK0RBQWlEO0FBQ2pELHFDQUFzQztBQUN0QywrQkFBOEI7QUFDOUIscUNBQTRCO0FBRTVCLHdEQUF5RDtBQUV6RCwrREFBMkQ7QUFDM0QseURBQXNHO0FBRXRHLElBQUksQ0FBQyxVQUFVLENBQUMseUJBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNuQyxJQUFJLG9CQUF3RCxDQUFDO0FBRTdELFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO0lBQ3pCLElBQUksS0FBWSxDQUFDO0lBQ2pCLElBQUksV0FBd0IsQ0FBQztJQUU3QixNQUFNLE9BQU8sR0FBRyw0QkFBTyxDQUFDLE9BQU8sQ0FBQztJQUVoQyxNQUFNLE1BQU0sR0FBRyw0Q0FBNEMsQ0FBQztJQUM1RCxNQUFNLE1BQU0sR0FBRyw0Q0FBNEMsQ0FBQztJQUM1RCxNQUFNLE1BQU0sR0FBRyw0Q0FBNEMsQ0FBQztJQUU1RCxNQUFNLE1BQU0sR0FBRyw0Q0FBNEMsQ0FBQztJQUM1RCxNQUFNLE1BQU0sR0FBRyw0Q0FBNEMsQ0FBQztJQUM1RCxNQUFNLE1BQU0sR0FBRyw0Q0FBNEMsQ0FBQztJQUU1RCxrRUFBa0U7SUFDbEUsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFhLEVBQUUsQ0FBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFbkYsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2pCLG9CQUFvQixHQUFHLE1BQU0sSUFBQSxtQ0FBc0IsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDL0QsS0FBSyxHQUFHLElBQUksaUJBQUssRUFBRSxDQUFDO1FBQ3BCLFdBQVcsR0FBRyxJQUFJLDBCQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQyxDQUFD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LGNBQWMsR0FBRyxHQUFHLEdBQUcseUJBQWEsQ0FBQztZQUMzQyxNQUFNLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLEVBQUUsY0FBYyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDckcsTUFBTSxXQUFXLENBQUMsdUJBQXVCLENBQUMsUUFBUSxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzFHLE1BQU0sTUFBTSxHQUFHLE1BQU0sV0FBVyxDQUFDLCtCQUErQixDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZHLElBQUEsYUFBTSxFQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvY2FjaGVfc2VydmljZV90ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYWluSWQgfSBmcm9tICdAMHgvY29udHJhY3QtYWRkcmVzc2VzJztcclxuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnQDB4L3V0aWxzJztcclxuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XHJcbmltcG9ydCBSZWRpcyBmcm9tICdpb3JlZGlzJztcclxuXHJcbmltcG9ydCB7IE9ORV9NSU5VVEVfTVMgfSBmcm9tICcuLi8uLi9zcmMvY29yZS9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBFUkMyME93bmVyIH0gZnJvbSAnLi4vLi4vc3JjL2NvcmUvdHlwZXMnO1xyXG5pbXBvcnQgeyBDYWNoZUNsaWVudCB9IGZyb20gJy4uLy4uL3NyYy91dGlscy9jYWNoZV9jbGllbnQnO1xyXG5pbXBvcnQgeyBzZXR1cERlcGVuZGVuY2llc0FzeW5jLCBUZWFyZG93bkRlcGVuZGVuY2llc0Z1bmN0aW9uSGFuZGxlIH0gZnJvbSAnLi4vdGVzdF91dGlscy9kZXBsb3ltZW50JztcclxuXHJcbmplc3Quc2V0VGltZW91dChPTkVfTUlOVVRFX01TICogMik7XHJcbmxldCB0ZWFyZG93bkRlcGVuZGVuY2llczogVGVhcmRvd25EZXBlbmRlbmNpZXNGdW5jdGlvbkhhbmRsZTtcclxuXHJcbmRlc2NyaWJlKCdDYWNoZUNsaWVudCcsICgpID0+IHtcclxuICAgIGxldCByZWRpczogUmVkaXM7XHJcbiAgICBsZXQgY2FjaGVDbGllbnQ6IENhY2hlQ2xpZW50O1xyXG5cclxuICAgIGNvbnN0IGNoYWluSWQgPSBDaGFpbklkLkdhbmFjaGU7XHJcblxyXG4gICAgY29uc3QgbWFrZXJBID0gJzB4MTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMSc7XHJcbiAgICBjb25zdCBtYWtlckIgPSAnMHgyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyJztcclxuICAgIGNvbnN0IG1ha2VyQyA9ICcweDMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMnO1xyXG5cclxuICAgIGNvbnN0IHRva2VuQSA9ICcweEMwMmFhQTM5YjIyM0ZFOEQwQTBlNUM0RjI3ZUFEOTA4M0M3NTZDYzInO1xyXG4gICAgY29uc3QgdG9rZW5CID0gJzB4NkIxNzU0NzRFODkwOTRDNDREYTk4Yjk1NEVlZGVBQzQ5NTI3MWQwRic7XHJcbiAgICBjb25zdCB0b2tlbkMgPSAnMHhkQUMxN0Y5NThEMmVlNTIzYTIyMDYyMDY5OTQ1OTdDMTNEODMxZWM3JztcclxuXHJcbiAgICAvLyBjb21wYXJlRm4gaXMgdXNlZCB0byBkZXRlcm1pbmUgdGhlIG9yZGVyIG9mIEVSQzIwT3duZXIgZWxlbWVudHNcclxuICAgIGNvbnN0IGNvbXBhcmVGbiA9IChhOiBFUkMyME93bmVyLCBiOiBFUkMyME93bmVyKSA9PiBhLm93bmVyLmxvY2FsZUNvbXBhcmUoYi5vd25lcik7XHJcblxyXG4gICAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcclxuICAgICAgICB0ZWFyZG93bkRlcGVuZGVuY2llcyA9IGF3YWl0IHNldHVwRGVwZW5kZW5jaWVzQXN5bmMoWydyZWRpcyddKTtcclxuICAgICAgICByZWRpcyA9IG5ldyBSZWRpcygpO1xyXG4gICAgICAgIGNhY2hlQ2xpZW50ID0gbmV3IENhY2hlQ2xpZW50KHJlZGlzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGFmdGVyQWxsKGFzeW5jICgpID0+IHtcclxuICAgICAgICBhd2FpdCBjYWNoZUNsaWVudC5jbG9zZUFzeW5jKCk7XHJcbiAgICAgICAgaWYgKCF0ZWFyZG93bkRlcGVuZGVuY2llcygpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHRlYXIgZG93biBkZXBlbmRlbmNpZXMnKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBhZnRlckVhY2goYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IHJlZGlzLmZsdXNoZGIoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRlc2NyaWJlKCdhZGRFUkMyME93bmVyQXN5bmMnLCAoKSA9PiB7XHJcbiAgICAgICAgaXQoJ2FkZHMgcGVuZGluZyBhZGRyZXNzIHRvIG9ic2VydmVkIGFkZHJlc3NlcyB3aXRob3V0IGVycm9yJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBleHBlY3QoY2FjaGVDbGllbnQuYWRkRVJDMjBPd25lckFzeW5jKGNoYWluSWQsIHsgb3duZXI6IG1ha2VyQSwgdG9rZW46IHRva2VuQSB9KSkudG8uZXZlbnR1YWxseS5iZS5lcXVhbChcclxuICAgICAgICAgICAgICAgIHZvaWQgMCxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRlc2NyaWJlKCdnZXRFUkMyME93bmVyc0FzeW5jJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFkZHJlc3NlcyA9IFtcclxuICAgICAgICAgICAgeyBvd25lcjogbWFrZXJBLCB0b2tlbjogdG9rZW5BIH0sXHJcbiAgICAgICAgICAgIHsgb3duZXI6IG1ha2VyQiwgdG9rZW46IHRva2VuQiB9LFxyXG4gICAgICAgICAgICB7IG93bmVyOiBtYWtlckMsIHRva2VuOiB0b2tlbkMgfSxcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBpdCgnZmV0Y2hlcyBtYWtlciB0b2tlbiBhZGRyZXNzZXMgaW4gY29ycmVjdCBmb3JtYXQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGFkZHJlc3Nlcy5mb3JFYWNoKGFzeW5jIChhZGRyZXNzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBjYWNoZUNsaWVudC5hZGRFUkMyME93bmVyQXN5bmMoY2hhaW5JZCwgYWRkcmVzcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBjYWNoZWRBZGRyZXNzZXMgPSBhd2FpdCBjYWNoZUNsaWVudC5nZXRFUkMyME93bmVyc0FzeW5jKGNoYWluSWQpO1xyXG4gICAgICAgICAgICBleHBlY3QoY2FjaGVkQWRkcmVzc2VzLnNvcnQoY29tcGFyZUZuKSkudG8uZGVlcC5lcShhZGRyZXNzZXMuc29ydChjb21wYXJlRm4pKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ2ZldGNoZXMgZW1wdHkgYXJyYXlzIGlmIG5vIGFkZHJlc3NlcyBhcmUgZm91bmQgaW4gdGhlIHNldCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgZXhwZWN0KGF3YWl0IGNhY2hlQ2xpZW50LmdldEVSQzIwT3duZXJzQXN5bmMoY2hhaW5JZCkpLnRvLmRlZXAuZXEoW10pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZGVzY3JpYmUoJ3NldEVSQzIwT3duZXJCYWxhbmNlc0FzeW5jJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFkZHJlc3NlcyA9IFtcclxuICAgICAgICAgICAgeyBvd25lcjogbWFrZXJBLCB0b2tlbjogdG9rZW5BIH0sXHJcbiAgICAgICAgICAgIHsgb3duZXI6IG1ha2VyQiwgdG9rZW46IHRva2VuQiB9LFxyXG4gICAgICAgICAgICB7IG93bmVyOiBtYWtlckMsIHRva2VuOiB0b2tlbkMgfSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGJhbGFuY2VzID0gW25ldyBCaWdOdW1iZXIoMSksIG5ldyBCaWdOdW1iZXIoMiksIG5ldyBCaWdOdW1iZXIoMyldO1xyXG5cclxuICAgICAgICBpdCgnc2V0cyBiYWxhbmNlcyBpbiB0aGUgY2FjaGUgd2l0aG91dCBlcnJvcicsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgZXhwZWN0KGNhY2hlQ2xpZW50LnNldEVSQzIwT3duZXJCYWxhbmNlc0FzeW5jKGNoYWluSWQsIGFkZHJlc3NlcywgYmFsYW5jZXMpKS50by5ldmVudHVhbGx5LmJlLmVxdWFsKHZvaWQgMCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdzaG91bGQgZmFpbCB3aGVuIGFkZHJlc3NlcyBkbyBub3QgbWF0Y2ggYmFsYW5jZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGV4cGVjdChcclxuICAgICAgICAgICAgICAgIGNhY2hlQ2xpZW50LnNldEVSQzIwT3duZXJCYWxhbmNlc0FzeW5jKGNoYWluSWQsIGFkZHJlc3NlcywgYmFsYW5jZXMuc2xpY2UoMCwgLTEpKSxcclxuICAgICAgICAgICAgKS50by5iZS5yZWplY3RlZFdpdGgoJ2JhbGFuY2VzJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdzaG91bGQgbm90IGZhaWwgd2hlbiBhZGRyZXNzZXMgYXJlIGVtcHR5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBleHBlY3QoY2FjaGVDbGllbnQuc2V0RVJDMjBPd25lckJhbGFuY2VzQXN5bmMoY2hhaW5JZCwgW10sIFtdKSkudG8uZXZlbnR1YWxseS5iZS5lcXVhbCh2b2lkIDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZGVzY3JpYmUoJ2dldEVSQzIwT3duZXJCYWxhbmNlc0FzeW5jJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFkZHJlc3NlcyA9IFtcclxuICAgICAgICAgICAgeyBvd25lcjogbWFrZXJBLCB0b2tlbjogdG9rZW5BIH0sXHJcbiAgICAgICAgICAgIHsgb3duZXI6IG1ha2VyQiwgdG9rZW46IHRva2VuQiB9LFxyXG4gICAgICAgICAgICB7IG93bmVyOiBtYWtlckMsIHRva2VuOiB0b2tlbkMgfSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGJhbGFuY2VzID0gW25ldyBCaWdOdW1iZXIoMSksIG5ldyBCaWdOdW1iZXIoMiksIG5ldyBCaWdOdW1iZXIoMyldO1xyXG5cclxuICAgICAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgYXdhaXQgY2FjaGVDbGllbnQuc2V0RVJDMjBPd25lckJhbGFuY2VzQXN5bmMoY2hhaW5JZCwgYWRkcmVzc2VzLCBiYWxhbmNlcyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdmZXRjaGVzIGNvcnJlY3QgYmFsYW5jZXMgZnJvbSB0aGUgY2FjaGUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGV4cGVjdChhd2FpdCBjYWNoZUNsaWVudC5nZXRFUkMyME93bmVyQmFsYW5jZXNBc3luYyhjaGFpbklkLCBhZGRyZXNzZXMpKS50by5kZWVwLmVxKFtcclxuICAgICAgICAgICAgICAgIG5ldyBCaWdOdW1iZXIoMSksXHJcbiAgICAgICAgICAgICAgICBuZXcgQmlnTnVtYmVyKDIpLFxyXG4gICAgICAgICAgICAgICAgbmV3IEJpZ051bWJlcigzKSxcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdyZXR1cm5zIG51bGwgYmFsYW5jZXMgaWYgYWRkcmVzc2VzIGFyZSBub3QgaW4gdGhlIGNhY2hlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBiYWRBZGRyZXNzZXMgPSBbXHJcbiAgICAgICAgICAgICAgICB7IG93bmVyOiBtYWtlckEsIHRva2VuOiB0b2tlbkEgfSxcclxuICAgICAgICAgICAgICAgIHsgb3duZXI6IG1ha2VyQiwgdG9rZW46IHRva2VuQiB9LFxyXG4gICAgICAgICAgICAgICAgeyBvd25lcjogJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsIHRva2VuOiB0b2tlbkMgfSxcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgZXhwZWN0KGF3YWl0IGNhY2hlQ2xpZW50LmdldEVSQzIwT3duZXJCYWxhbmNlc0FzeW5jKGNoYWluSWQsIGJhZEFkZHJlc3NlcykpLnRvLmRlZXAuZXEoW1xyXG4gICAgICAgICAgICAgICAgbmV3IEJpZ051bWJlcigxKSxcclxuICAgICAgICAgICAgICAgIG5ldyBCaWdOdW1iZXIoMiksXHJcbiAgICAgICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3JldHVybnMgbnVsbCBiYWxhbmNlcyBpZiBhZGRyZXNzZXMgZnJvbSBhIGRpZmZlcmVudCBjaGFpbiBhcmUgc3VwcGxpZWQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGV4cGVjdChhd2FpdCBjYWNoZUNsaWVudC5nZXRFUkMyME93bmVyQmFsYW5jZXNBc3luYyhDaGFpbklkLlBvbHlnb25NdW1iYWksIGFkZHJlc3NlcykpLnRvLmRlZXAuZXEoW1xyXG4gICAgICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3JldHVybnMgYW4gZW1wdHkgYXJyYXkgaWYgYWRkcmVzc2VzIGFyZSBlbXB0eScsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgZXhwZWN0KGF3YWl0IGNhY2hlQ2xpZW50LmdldEVSQzIwT3duZXJCYWxhbmNlc0FzeW5jKGNoYWluSWQsIFtdKSkudG8uZGVlcC5lcShbXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZXNjcmliZSgnZXZpY3RaZXJvQmFsYW5jZXNBc3luYycsICgpID0+IHtcclxuICAgICAgICBjb25zdCBhZGRyZXNzZXMgPSBbXHJcbiAgICAgICAgICAgIHsgb3duZXI6IG1ha2VyQSwgdG9rZW46IHRva2VuQSB9LFxyXG4gICAgICAgICAgICB7IG93bmVyOiBtYWtlckIsIHRva2VuOiB0b2tlbkIgfSxcclxuICAgICAgICAgICAgeyBvd25lcjogbWFrZXJDLCB0b2tlbjogdG9rZW5DIH0sXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgaXQoJ2V2aWN0cyB6ZXJvZWQgZW50cmllcyBmcm9tIHRoZSBjYWNoZScsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgYWRkcmVzc2VzLmZvckVhY2goYXN5bmMgKGFkZHJlc3MpID0+IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGNhY2hlQ2xpZW50LmFkZEVSQzIwT3duZXJBc3luYyhjaGFpbklkLCBhZGRyZXNzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxldCBjYWNoZWRBZGRyZXNzZXMgPSBhd2FpdCBjYWNoZUNsaWVudC5nZXRFUkMyME93bmVyc0FzeW5jKGNoYWluSWQpO1xyXG4gICAgICAgICAgICBleHBlY3QoY2FjaGVkQWRkcmVzc2VzLnNvcnQoY29tcGFyZUZuKSkudG8uZGVlcC5lcShhZGRyZXNzZXMuc29ydChjb21wYXJlRm4pKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGJhbGFuY2VzID0gW25ldyBCaWdOdW1iZXIoMSksIG5ldyBCaWdOdW1iZXIoMiksIG5ldyBCaWdOdW1iZXIoMCldO1xyXG4gICAgICAgICAgICBhd2FpdCBjYWNoZUNsaWVudC5zZXRFUkMyME93bmVyQmFsYW5jZXNBc3luYyhjaGFpbklkLCBhZGRyZXNzZXMsIGJhbGFuY2VzKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG51bUV2aWN0ZWQgPSBhd2FpdCBjYWNoZUNsaWVudC5ldmljdFplcm9CYWxhbmNlc0FzeW5jKGNoYWluSWQpO1xyXG4gICAgICAgICAgICBleHBlY3QobnVtRXZpY3RlZCkudG8uZXEoMSk7XHJcbiAgICAgICAgICAgIGNhY2hlZEFkZHJlc3NlcyA9IGF3YWl0IGNhY2hlQ2xpZW50LmdldEVSQzIwT3duZXJzQXN5bmMoY2hhaW5JZCk7XHJcbiAgICAgICAgICAgIGV4cGVjdChjYWNoZWRBZGRyZXNzZXMuc29ydChjb21wYXJlRm4pKS50by5kZWVwLmVxKGFkZHJlc3Nlcy5zbGljZSgwLCAyKS5zb3J0KGNvbXBhcmVGbikpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnZG9lcyBub3QgZXZpY3QgYW55IGVudHJpZXMgaWYgdGhlcmUgYXJlIG5vIHN0YWxlIGJhbGFuY2VzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBhZGRyZXNzZXMuZm9yRWFjaChhc3luYyAoYWRkcmVzcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgY2FjaGVDbGllbnQuYWRkRVJDMjBPd25lckFzeW5jKGNoYWluSWQsIGFkZHJlc3MpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbGV0IGNhY2hlZEFkZHJlc3NlcyA9IGF3YWl0IGNhY2hlQ2xpZW50LmdldEVSQzIwT3duZXJzQXN5bmMoY2hhaW5JZCk7XHJcbiAgICAgICAgICAgIGV4cGVjdChjYWNoZWRBZGRyZXNzZXMuc29ydChjb21wYXJlRm4pKS50by5kZWVwLmVxKGFkZHJlc3Nlcy5zb3J0KGNvbXBhcmVGbikpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYmFsYW5jZXMgPSBbbmV3IEJpZ051bWJlcigxKSwgbmV3IEJpZ051bWJlcigyKSwgbmV3IEJpZ051bWJlcigzKV07XHJcbiAgICAgICAgICAgIGF3YWl0IGNhY2hlQ2xpZW50LnNldEVSQzIwT3duZXJCYWxhbmNlc0FzeW5jKGNoYWluSWQsIGFkZHJlc3NlcywgYmFsYW5jZXMpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbnVtRXZpY3RlZCA9IGF3YWl0IGNhY2hlQ2xpZW50LmV2aWN0WmVyb0JhbGFuY2VzQXN5bmMoY2hhaW5JZCk7XHJcbiAgICAgICAgICAgIGV4cGVjdChudW1FdmljdGVkKS50by5lcSgwKTtcclxuICAgICAgICAgICAgY2FjaGVkQWRkcmVzc2VzID0gYXdhaXQgY2FjaGVDbGllbnQuZ2V0RVJDMjBPd25lcnNBc3luYyhjaGFpbklkKTtcclxuICAgICAgICAgICAgZXhwZWN0KGNhY2hlZEFkZHJlc3Nlcy5zb3J0KGNvbXBhcmVGbikpLnRvLmRlZXAuZXEoYWRkcmVzc2VzLnNvcnQoY29tcGFyZUZuKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdkb2VzIG5vdCBlcnJvciBpZiB0aGUgYWRkcmVzcyBzZXQgaXMgZW1wdHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGV4cGVjdChhd2FpdCBjYWNoZUNsaWVudC5nZXRFUkMyME93bmVyc0FzeW5jKGNoYWluSWQpKS50by5oYXZlLmxlbmd0aCgwKTtcclxuICAgICAgICAgICAgY29uc3QgbnVtRXZpY3RlZCA9IGF3YWl0IGNhY2hlQ2xpZW50LmV2aWN0WmVyb0JhbGFuY2VzQXN5bmMoY2hhaW5JZCk7XHJcbiAgICAgICAgICAgIGV4cGVjdChudW1FdmljdGVkKS50by5lcSgwKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRlc2NyaWJlKCdjb29sRG93bk1ha2VyRm9yUGFpcicsICgpID0+IHtcclxuICAgICAgICBjb25zdCBtYWtlcklkMSA9ICdtYWtlcklkMSc7XHJcbiAgICAgICAgY29uc3QgdGFrZXJUb2tlbiA9ICd0YWtlclRva2VuJztcclxuICAgICAgICBjb25zdCBtYWtlclRva2VuID0gJ21ha2VyVG9rZW4nO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIGFkZCBuZXcgbWFrZXJzIHRvIHRoZSBjb29saW5nIGRvd24gc2V0IGZvciBhIHBhaXInLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzVXBkYXRlZCA9IGF3YWl0IGNhY2hlQ2xpZW50LmFkZE1ha2VyVG9Db29sZG93bkFzeW5jKFxyXG4gICAgICAgICAgICAgICAgbWFrZXJJZDEsXHJcbiAgICAgICAgICAgICAgICBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgY2hhaW5JZCxcclxuICAgICAgICAgICAgICAgIHRha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBleHBlY3QoaXNVcGRhdGVkKS50by5lcSh0cnVlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgZW5kVGltZSB0byBhIHRpbWUgbGF0ZXIgdGhhbiBleGlzdGluZyBlbmRUaW1lJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICBjb25zdCBvbmVNaW51dGVMYXRlciA9IG5vdyArIE9ORV9NSU5VVEVfTVM7XHJcbiAgICAgICAgICAgIGF3YWl0IGNhY2hlQ2xpZW50LmFkZE1ha2VyVG9Db29sZG93bkFzeW5jKG1ha2VySWQxLCBub3csIGNoYWluSWQsIHRha2VyVG9rZW4sIG1ha2VyVG9rZW4pO1xyXG4gICAgICAgICAgICBjb25zdCBpc1VwZGF0ZWQgPSBhd2FpdCBjYWNoZUNsaWVudC5hZGRNYWtlclRvQ29vbGRvd25Bc3luYyhcclxuICAgICAgICAgICAgICAgIG1ha2VySWQxLFxyXG4gICAgICAgICAgICAgICAgb25lTWludXRlTGF0ZXIsXHJcbiAgICAgICAgICAgICAgICBjaGFpbklkLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgIHRha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGV4cGVjdChpc1VwZGF0ZWQpLnRvLmVxKHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIG5vdCB1cGRhdGUgZW5kVGltZSB0byBhIHRpbWUgZWFybGllciB0aGFuIGV4aXN0aW5nIGVuZFRpbWUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9uZU1pbnV0ZUVhcmxpZXIgPSBub3cgLSBPTkVfTUlOVVRFX01TO1xyXG4gICAgICAgICAgICBhd2FpdCBjYWNoZUNsaWVudC5hZGRNYWtlclRvQ29vbGRvd25Bc3luYyhtYWtlcklkMSwgbm93LCBjaGFpbklkLCB0YWtlclRva2VuLCBtYWtlclRva2VuKTtcclxuICAgICAgICAgICAgY29uc3QgaXNVcGRhdGVkID0gYXdhaXQgY2FjaGVDbGllbnQuYWRkTWFrZXJUb0Nvb2xkb3duQXN5bmMoXHJcbiAgICAgICAgICAgICAgICBtYWtlcklkMSxcclxuICAgICAgICAgICAgICAgIG9uZU1pbnV0ZUVhcmxpZXIsXHJcbiAgICAgICAgICAgICAgICBjaGFpbklkLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGV4cGVjdChpc1VwZGF0ZWQpLnRvLmVxKGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRlc2NyaWJlKCdnZXRDb29saW5nRG93bk1ha2Vyc0ZvclBhaXInLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWFrZXJJZDEgPSAnbWFrZXJJZDEnO1xyXG4gICAgICAgIGNvbnN0IG1ha2VySWQyID0gJ21ha2VySWQyJztcclxuICAgICAgICBjb25zdCB0YWtlclRva2VuID0gJ3Rha2VyVG9rZW4nO1xyXG4gICAgICAgIGNvbnN0IG90aGVyVGFrZXJUb2tlbiA9ICdvdGhlclRha2VyVG9rZW4nO1xyXG4gICAgICAgIGNvbnN0IG1ha2VyVG9rZW4gPSAnbWFrZXJUb2tlbic7XHJcblxyXG4gICAgICAgIGl0KCdzaG91bGQgZ2V0IGFsbCBtYWtlcnMgdGhhdCBhcmUgY29vbGluZyBkb3duJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICBjb25zdCBvbmVNaW51dGVMYXRlciA9IG5vdyArIE9ORV9NSU5VVEVfTVM7XHJcbiAgICAgICAgICAgIGF3YWl0IGNhY2hlQ2xpZW50LmFkZE1ha2VyVG9Db29sZG93bkFzeW5jKG1ha2VySWQxLCBvbmVNaW51dGVMYXRlciwgY2hhaW5JZCwgdGFrZXJUb2tlbiwgbWFrZXJUb2tlbik7XHJcbiAgICAgICAgICAgIGF3YWl0IGNhY2hlQ2xpZW50LmFkZE1ha2VyVG9Db29sZG93bkFzeW5jKG1ha2VySWQyLCBvbmVNaW51dGVMYXRlciwgY2hhaW5JZCwgdGFrZXJUb2tlbiwgbWFrZXJUb2tlbik7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhY2hlQ2xpZW50LmdldE1ha2Vyc0luQ29vbGRvd25Gb3JQYWlyQXN5bmMoY2hhaW5JZCwgdGFrZXJUb2tlbiwgbWFrZXJUb2tlbiwgbm93KTtcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8uZGVlcC5lcShbbWFrZXJJZDEsIG1ha2VySWQyXSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdzaG91bGQgbm90IGluY2x1ZGUgbWFrZXJzIHdob3NlIGNvb2xpbmcgZG93biBwZXJpb2RzIGFscmVhZHkgZW5kZWQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9uZU1pbnV0ZUVhcmxpZXIgPSBub3cgLSBPTkVfTUlOVVRFX01TO1xyXG4gICAgICAgICAgICBjb25zdCBvbmVNaW51dGVMYXRlciA9IG5vdyArIE9ORV9NSU5VVEVfTVM7XHJcbiAgICAgICAgICAgIGF3YWl0IGNhY2hlQ2xpZW50LmFkZE1ha2VyVG9Db29sZG93bkFzeW5jKG1ha2VySWQxLCBvbmVNaW51dGVFYXJsaWVyLCBjaGFpbklkLCB0YWtlclRva2VuLCBtYWtlclRva2VuKTtcclxuICAgICAgICAgICAgYXdhaXQgY2FjaGVDbGllbnQuYWRkTWFrZXJUb0Nvb2xkb3duQXN5bmMobWFrZXJJZDIsIG9uZU1pbnV0ZUxhdGVyLCBjaGFpbklkLCB0YWtlclRva2VuLCBtYWtlclRva2VuKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FjaGVDbGllbnQuZ2V0TWFrZXJzSW5Db29sZG93bkZvclBhaXJBc3luYyhjaGFpbklkLCB0YWtlclRva2VuLCBtYWtlclRva2VuLCBub3cpO1xyXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0KS50by5kZWVwLmVxKFttYWtlcklkMl0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIG9ubHkgaW5jbHVkZSBtYWtlcnMgdGhhdCBhcmUgY29vbGluZyBkb3duIGZvciB0aGlzIHBhaXInLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9uZU1pbnV0ZUxhdGVyID0gbm93ICsgT05FX01JTlVURV9NUztcclxuICAgICAgICAgICAgYXdhaXQgY2FjaGVDbGllbnQuYWRkTWFrZXJUb0Nvb2xkb3duQXN5bmMobWFrZXJJZDEsIG9uZU1pbnV0ZUxhdGVyLCBjaGFpbklkLCB0YWtlclRva2VuLCBtYWtlclRva2VuKTtcclxuICAgICAgICAgICAgYXdhaXQgY2FjaGVDbGllbnQuYWRkTWFrZXJUb0Nvb2xkb3duQXN5bmMobWFrZXJJZDIsIG9uZU1pbnV0ZUxhdGVyLCBjaGFpbklkLCBvdGhlclRha2VyVG9rZW4sIG1ha2VyVG9rZW4pO1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWNoZUNsaWVudC5nZXRNYWtlcnNJbkNvb2xkb3duRm9yUGFpckFzeW5jKGNoYWluSWQsIHRha2VyVG9rZW4sIG1ha2VyVG9rZW4sIG5vdyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmRlZXAuZXEoW21ha2VySWQxXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==