{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/cache_service_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/cache_service_test.ts"],"sourcesContent":["import { ChainId } from '@0x/contract-addresses';\r\nimport { BigNumber } from '@0x/utils';\r\nimport { expect } from 'chai';\r\nimport Redis from 'ioredis';\r\n\r\nimport { ONE_MINUTE_MS } from '../../src/core/constants';\r\nimport { ERC20Owner } from '../../src/core/types';\r\nimport { CacheClient } from '../../src/utils/cache_client';\r\nimport { setupDependenciesAsync, TeardownDependenciesFunctionHandle } from '../test_utils/deployment';\r\n\r\njest.setTimeout(ONE_MINUTE_MS * 2);\r\nlet teardownDependencies: TeardownDependenciesFunctionHandle;\r\n\r\ndescribe('CacheClient', () => {\r\n    let redis: Redis;\r\n    let cacheClient: CacheClient;\r\n\r\n    const chainId = ChainId.Ganache;\r\n\r\n    const makerA = '0x1111111111111111111111111111111111111111';\r\n    const makerB = '0x2222222222222222222222222222222222222222';\r\n    const makerC = '0x3333333333333333333333333333333333333333';\r\n\r\n    const tokenA = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';\r\n    const tokenB = '0x6B175474E89094C44Da98b954EedeAC495271d0F';\r\n    const tokenC = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\r\n\r\n    // compareFn is used to determine the order of ERC20Owner elements\r\n    const compareFn = (a: ERC20Owner, b: ERC20Owner) => a.owner.localeCompare(b.owner);\r\n\r\n    beforeAll(async () => {\r\n        teardownDependencies = await setupDependenciesAsync(['redis']);\r\n        redis = new Redis();\r\n        cacheClient = new CacheClient(redis);\r\n    });\r\n\r\n    afterAll(async () => {\r\n        await cacheClient.closeAsync();\r\n        if (!teardownDependencies()) {\r\n            throw new Error('Failed to tear down dependencies');\r\n        }\r\n    });\r\n\r\n    afterEach(async () => {\r\n        await redis.flushdb();\r\n    });\r\n\r\n    describe('addERC20OwnerAsync', () => {\r\n        it('adds pending address to observed addresses without error', async () => {\r\n            expect(cacheClient.addERC20OwnerAsync(chainId, { owner: makerA, token: tokenA })).to.eventually.be.equal(\r\n                void 0,\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('getERC20OwnersAsync', () => {\r\n        const addresses = [\r\n            { owner: makerA, token: tokenA },\r\n            { owner: makerB, token: tokenB },\r\n            { owner: makerC, token: tokenC },\r\n        ];\r\n\r\n        it('fetches maker token addresses in correct format', async () => {\r\n            addresses.forEach(async (address) => {\r\n                await cacheClient.addERC20OwnerAsync(chainId, address);\r\n            });\r\n            const cachedAddresses = await cacheClient.getERC20OwnersAsync(chainId);\r\n            expect(cachedAddresses.sort(compareFn)).to.deep.eq(addresses.sort(compareFn));\r\n        });\r\n\r\n        it('fetches empty arrays if no addresses are found in the set', async () => {\r\n            expect(await cacheClient.getERC20OwnersAsync(chainId)).to.deep.eq([]);\r\n        });\r\n    });\r\n\r\n    describe('setERC20OwnerBalancesAsync', () => {\r\n        const addresses = [\r\n            { owner: makerA, token: tokenA },\r\n            { owner: makerB, token: tokenB },\r\n            { owner: makerC, token: tokenC },\r\n        ];\r\n        const balances = [new BigNumber(1), new BigNumber(2), new BigNumber(3)];\r\n\r\n        it('sets balances in the cache without error', async () => {\r\n            expect(cacheClient.setERC20OwnerBalancesAsync(chainId, addresses, balances)).to.eventually.be.equal(void 0);\r\n        });\r\n\r\n        it('should fail when addresses do not match balances', async () => {\r\n            expect(\r\n                cacheClient.setERC20OwnerBalancesAsync(chainId, addresses, balances.slice(0, -1)),\r\n            ).to.be.rejectedWith('balances');\r\n        });\r\n\r\n        it('should not fail when addresses are empty', async () => {\r\n            expect(cacheClient.setERC20OwnerBalancesAsync(chainId, [], [])).to.eventually.be.equal(void 0);\r\n        });\r\n    });\r\n\r\n    describe('getERC20OwnerBalancesAsync', () => {\r\n        const addresses = [\r\n            { owner: makerA, token: tokenA },\r\n            { owner: makerB, token: tokenB },\r\n            { owner: makerC, token: tokenC },\r\n        ];\r\n        const balances = [new BigNumber(1), new BigNumber(2), new BigNumber(3)];\r\n\r\n        beforeEach(async () => {\r\n            await cacheClient.setERC20OwnerBalancesAsync(chainId, addresses, balances);\r\n        });\r\n\r\n        it('fetches correct balances from the cache', async () => {\r\n            expect(await cacheClient.getERC20OwnerBalancesAsync(chainId, addresses)).to.deep.eq([\r\n                new BigNumber(1),\r\n                new BigNumber(2),\r\n                new BigNumber(3),\r\n            ]);\r\n        });\r\n\r\n        it('returns null balances if addresses are not in the cache', async () => {\r\n            const badAddresses = [\r\n                { owner: makerA, token: tokenA },\r\n                { owner: makerB, token: tokenB },\r\n                { owner: '0x0000000000000000000000000000000000000000', token: tokenC },\r\n            ];\r\n            expect(await cacheClient.getERC20OwnerBalancesAsync(chainId, badAddresses)).to.deep.eq([\r\n                new BigNumber(1),\r\n                new BigNumber(2),\r\n                null,\r\n            ]);\r\n        });\r\n\r\n        it('returns null balances if addresses from a different chain are supplied', async () => {\r\n            expect(await cacheClient.getERC20OwnerBalancesAsync(ChainId.PolygonMumbai, addresses)).to.deep.eq([\r\n                null,\r\n                null,\r\n                null,\r\n            ]);\r\n        });\r\n\r\n        it('returns an empty array if addresses are empty', async () => {\r\n            expect(await cacheClient.getERC20OwnerBalancesAsync(chainId, [])).to.deep.eq([]);\r\n        });\r\n    });\r\n\r\n    describe('evictZeroBalancesAsync', () => {\r\n        const addresses = [\r\n            { owner: makerA, token: tokenA },\r\n            { owner: makerB, token: tokenB },\r\n            { owner: makerC, token: tokenC },\r\n        ];\r\n\r\n        it('evicts zeroed entries from the cache', async () => {\r\n            addresses.forEach(async (address) => {\r\n                await cacheClient.addERC20OwnerAsync(chainId, address);\r\n            });\r\n            let cachedAddresses = await cacheClient.getERC20OwnersAsync(chainId);\r\n            expect(cachedAddresses.sort(compareFn)).to.deep.eq(addresses.sort(compareFn));\r\n\r\n            const balances = [new BigNumber(1), new BigNumber(2), new BigNumber(0)];\r\n            await cacheClient.setERC20OwnerBalancesAsync(chainId, addresses, balances);\r\n\r\n            const numEvicted = await cacheClient.evictZeroBalancesAsync(chainId);\r\n            expect(numEvicted).to.eq(1);\r\n            cachedAddresses = await cacheClient.getERC20OwnersAsync(chainId);\r\n            expect(cachedAddresses.sort(compareFn)).to.deep.eq(addresses.slice(0, 2).sort(compareFn));\r\n        });\r\n\r\n        it('does not evict any entries if there are no stale balances', async () => {\r\n            addresses.forEach(async (address) => {\r\n                await cacheClient.addERC20OwnerAsync(chainId, address);\r\n            });\r\n            let cachedAddresses = await cacheClient.getERC20OwnersAsync(chainId);\r\n            expect(cachedAddresses.sort(compareFn)).to.deep.eq(addresses.sort(compareFn));\r\n\r\n            const balances = [new BigNumber(1), new BigNumber(2), new BigNumber(3)];\r\n            await cacheClient.setERC20OwnerBalancesAsync(chainId, addresses, balances);\r\n\r\n            const numEvicted = await cacheClient.evictZeroBalancesAsync(chainId);\r\n            expect(numEvicted).to.eq(0);\r\n            cachedAddresses = await cacheClient.getERC20OwnersAsync(chainId);\r\n            expect(cachedAddresses.sort(compareFn)).to.deep.eq(addresses.sort(compareFn));\r\n        });\r\n\r\n        it('does not error if the address set is empty', async () => {\r\n            expect(await cacheClient.getERC20OwnersAsync(chainId)).to.have.length(0);\r\n            const numEvicted = await cacheClient.evictZeroBalancesAsync(chainId);\r\n            expect(numEvicted).to.eq(0);\r\n        });\r\n    });\r\n\r\n    describe('coolDownMakerForPair', () => {\r\n        const makerId1 = 'makerId1';\r\n        const takerToken = 'takerToken';\r\n        const makerToken = 'makerToken';\r\n\r\n        it('should add new makers to the cooling down set for a pair', async () => {\r\n            const isUpdated = await cacheClient.addMakerToCooldownAsync(\r\n                makerId1,\r\n                Date.now(),\r\n                chainId,\r\n                takerToken,\r\n                makerToken,\r\n            );\r\n            expect(isUpdated).to.eq(true);\r\n        });\r\n\r\n        it('should update endTime to a time later than existing endTime', async () => {\r\n            const now = Date.now();\r\n            const oneMinuteLater = now + ONE_MINUTE_MS;\r\n            await cacheClient.addMakerToCooldownAsync(makerId1, now, chainId, takerToken, makerToken);\r\n            const isUpdated = await cacheClient.addMakerToCooldownAsync(\r\n                makerId1,\r\n                oneMinuteLater,\r\n                chainId,\r\n                makerToken,\r\n                takerToken,\r\n            );\r\n            expect(isUpdated).to.eq(true);\r\n        });\r\n\r\n        it('should not update endTime to a time earlier than existing endTime', async () => {\r\n            const now = Date.now();\r\n            const oneMinuteEarlier = now - ONE_MINUTE_MS;\r\n            await cacheClient.addMakerToCooldownAsync(makerId1, now, chainId, takerToken, makerToken);\r\n            const isUpdated = await cacheClient.addMakerToCooldownAsync(\r\n                makerId1,\r\n                oneMinuteEarlier,\r\n                chainId,\r\n                takerToken,\r\n                makerToken,\r\n            );\r\n            expect(isUpdated).to.eq(false);\r\n        });\r\n    });\r\n\r\n    describe('getCoolingDownMakersForPair', () => {\r\n        const makerId1 = 'makerId1';\r\n        const makerId2 = 'makerId2';\r\n        const takerToken = 'takerToken';\r\n        const otherTakerToken = 'otherTakerToken';\r\n        const makerToken = 'makerToken';\r\n\r\n        it('should get all makers that are cooling down', async () => {\r\n            const now = Date.now();\r\n            const oneMinuteLater = now + ONE_MINUTE_MS;\r\n            await cacheClient.addMakerToCooldownAsync(makerId1, oneMinuteLater, chainId, takerToken, makerToken);\r\n            await cacheClient.addMakerToCooldownAsync(makerId2, oneMinuteLater, chainId, takerToken, makerToken);\r\n            const result = await cacheClient.getMakersInCooldownForPairAsync(chainId, takerToken, makerToken, now);\r\n            expect(result).to.deep.eq([makerId1, makerId2]);\r\n        });\r\n\r\n        it('should not include makers whose cooling down periods already ended', async () => {\r\n            const now = Date.now();\r\n            const oneMinuteEarlier = now - ONE_MINUTE_MS;\r\n            const oneMinuteLater = now + ONE_MINUTE_MS;\r\n            await cacheClient.addMakerToCooldownAsync(makerId1, oneMinuteEarlier, chainId, takerToken, makerToken);\r\n            await cacheClient.addMakerToCooldownAsync(makerId2, oneMinuteLater, chainId, takerToken, makerToken);\r\n            const result = await cacheClient.getMakersInCooldownForPairAsync(chainId, takerToken, makerToken, now);\r\n            expect(result).to.deep.eq([makerId2]);\r\n        });\r\n\r\n        it('should only include makers that are cooling down for this pair', async () => {\r\n            const now = Date.now();\r\n            const oneMinuteLater = now + ONE_MINUTE_MS;\r\n            await cacheClient.addMakerToCooldownAsync(makerId1, oneMinuteLater, chainId, takerToken, makerToken);\r\n            await cacheClient.addMakerToCooldownAsync(makerId2, oneMinuteLater, chainId, otherTakerToken, makerToken);\r\n            const result = await cacheClient.getMakersInCooldownForPairAsync(chainId, takerToken, makerToken, now);\r\n            expect(result).to.deep.eq([makerId1]);\r\n        });\r\n    });\r\n});\r\n"],"version":3}