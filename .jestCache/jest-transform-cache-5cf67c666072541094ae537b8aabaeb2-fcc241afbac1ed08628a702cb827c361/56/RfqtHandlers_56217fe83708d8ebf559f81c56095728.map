{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/RfqtHandlers.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/RfqtHandlers.ts"],"sourcesContent":["// tslint:disable:max-file-line-count\nimport { MarketOperation } from '@0x/types';\nimport { BigNumber } from '@0x/utils';\nimport * as express from 'express';\nimport * as HttpStatus from 'http-status-codes';\nimport { Counter } from 'prom-client';\n\nimport { Integrator } from '../config';\nimport { logger } from '../logger';\nimport { V4RFQIndicativeQuoteMM } from '../quoteRequestor/QuoteRequestor';\nimport { RfqtService } from '../services/RfqtService';\nimport { FirmQuoteContext, QuoteContext } from '../services/types';\nimport type { RfqtV2Price, RfqtV2Quote, RfqtV2Request, SignedNativeOrder } from '../core/types';\nimport { ConfigManager } from '../utils/config_manager';\nimport { RfqtServices } from '../utils/rfqtServiceBuilder';\nimport type { AltRfqMakerAssetOfferings } from '../quoteRequestor/altMmTypes';\n\nconst RFQT_V1_PRICE_REQUEST_SUCCEEDED = new Counter({\n    name: 'rfqt_v1_price_request_succeeded_total',\n    help: 'Request made to fetch rfqt v1 price succeeded',\n});\n\nconst RFQT_V1_PRICE_REQUEST_FAILED = new Counter({\n    name: 'rfqt_v1_price_request_failed_total',\n    help: 'Request made to fetch rfqt v1 price failed',\n});\n\nconst RFQT_V1_QUOTE_REQUEST_SUCCEEDED = new Counter({\n    name: 'rfqt_v1_quote_request_succeeded_total',\n    help: 'Request to fetch rfqt v1 quote succeeded',\n});\n\nconst RFQT_V1_QUOTE_REQUEST_FAILED = new Counter({\n    name: 'rfqt_v1_quote_request_failed_total',\n    help: 'Request to fetch rfqt v1 quote failed',\n});\n\nconst RFQT_V2_PRICE_REQUEST_SUCCEEDED = new Counter({\n    name: 'rfqt_v2_price_request_succeeded_total',\n    help: 'Request made to fetch rfqt v2 price succeeded',\n});\n\nconst RFQT_V2_PRICE_REQUEST_FAILED = new Counter({\n    name: 'rfqt_v2_price_request_failed_total',\n    help: 'Request made to fetch rfqt v2 price failed',\n});\n\nconst RFQT_V2_QUOTE_REQUEST_SUCCEEDED = new Counter({\n    name: 'rfqt_v2_quote_request_succeeded_total',\n    help: 'Request to fetch rfqt v2 quote succeeded',\n});\n\nconst RFQT_V2_QUOTE_REQUEST_FAILED = new Counter({\n    name: 'rfqt_v2_quote_request_failed_total',\n    help: 'Request to fetch rfqt v2 quote failed',\n});\n\n/**\n * Typed parameters for both the V1 prices endpoint\n * and the V1 quotes endpoint\n */\ninterface V1RequestParameters {\n    altRfqAssetOfferings: AltRfqMakerAssetOfferings;\n    assetFillAmount: BigNumber;\n    chainId: number;\n    comparisonPrice: BigNumber | undefined;\n    makerToken: string;\n    marketOperation: MarketOperation;\n    takerAddress: string; // expect this to be NULL_ADDRESS\n    takerToken: string;\n    txOrigin?: string; // expect this to be the taker address, can be missing for /price but not /quote\n    intentOnFilling: boolean;\n    integratorId: string;\n}\n\ninterface TypedRequest<TBody> extends express.Request {\n    body: TBody;\n}\n\n/**\n * Handles parsing the request from RFQt routes, meters calls with prometheus counters,\n * calls the appropriate service method and returns the result.\n *\n * Error boundary for http calls; all errors should be caught and returned to the\n * caller as part of the response.\n */\nexport class RfqtHandlers {\n    constructor(private readonly _rfqtServices: RfqtServices, private readonly _configManager: ConfigManager) {}\n\n    /**\n     * Gets prices (\"indicative quotes\") for the given asset pair from market makers\n     * operating on the `RfqOrder` RFQt platform\n     */\n    public async getV1PricesAsync(\n        req: TypedRequest<V1RequestParameters>,\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        res: express.Response<{ prices: V4RFQIndicativeQuoteMM[] } | { error: any }>,\n    ): Promise<void> {\n        let parsedParameters: Omit<V1RequestParameters, 'integratorId'> & { integrator: Integrator };\n        let service: RfqtService;\n        try {\n            parsedParameters = this._parseV1RequestParameters(req);\n            service = this._getServiceForChain(parsedParameters.chainId);\n        } catch (error) {\n            RFQT_V1_PRICE_REQUEST_FAILED.inc();\n            logger.error({ error: error.message }, 'Rfqt V1 price request failed');\n            res.status(HttpStatus.BAD_REQUEST).json({ error: error.message });\n            return;\n        }\n\n        try {\n            const prices = await service.getV1PricesAsync(parsedParameters);\n            RFQT_V1_PRICE_REQUEST_SUCCEEDED.inc();\n            logger.info('Rfqt V1 price request succeeded');\n            res.status(HttpStatus.OK).json({\n                prices,\n            });\n        } catch (error) {\n            RFQT_V1_PRICE_REQUEST_FAILED.inc();\n            logger.error({ error: error.message }, 'Rfqt V1 price request failed');\n            res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({ error: error.message });\n        }\n    }\n\n    /**\n     * Gets prices (\"firm quotes\") for the given asset pair from market makers\n     * operating on the `RfqOrder` RFQt platform\n     */\n    public async getV1QuotesAsync(\n        req: TypedRequest<V1RequestParameters>,\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        res: express.Response<{ quotes: SignedNativeOrder[] } | { error: any }>,\n    ): Promise<void> {\n        let parsedParameters: Omit<V1RequestParameters, 'integratorId'> & { integrator: Integrator };\n        let service: RfqtService;\n        let txOrigin: string;\n        try {\n            parsedParameters = this._parseV1RequestParameters(req);\n            if (parsedParameters.txOrigin === undefined) {\n                throw new Error('Received request with missing parameter txOrigin');\n            }\n            txOrigin = parsedParameters.txOrigin;\n            service = this._getServiceForChain(parsedParameters.chainId);\n        } catch (error) {\n            RFQT_V1_QUOTE_REQUEST_FAILED.inc();\n            logger.error({ error }, 'Rfqt V1 quote request failed');\n            res.status(HttpStatus.BAD_REQUEST).json({ error });\n            return;\n        }\n\n        try {\n            const quotes = await service.getV1QuotesAsync({\n                ...parsedParameters,\n                txOrigin,\n            });\n            RFQT_V1_QUOTE_REQUEST_SUCCEEDED.inc();\n            logger.info('Rfqt V1 quote request succeeded');\n            res.status(HttpStatus.OK).json({\n                quotes,\n            });\n        } catch (error) {\n            RFQT_V1_QUOTE_REQUEST_FAILED.inc();\n            logger.error({ error }, 'Rfqt V1 quote request failed');\n            res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({ error: error.message });\n        }\n    }\n\n    /**\n     * Gets prices (\"indicative quotes\") for the given asset pair from market makers\n     * operating on the `OtcOrder` RFQt platform\n     */\n    public async getV2PricesAsync(\n        req: TypedRequest<RfqtV2Request>,\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        res: express.Response<{ prices: RfqtV2Price[] } | { error: any }>,\n    ): Promise<void> {\n        let quoteContext: QuoteContext;\n        let service: RfqtService;\n        try {\n            const chainId = this._extractChainId(req);\n            service = this._getServiceForChain(chainId);\n            quoteContext = await this._extractQuoteContextAsync(req, chainId, false, service);\n        } catch (error) {\n            RFQT_V2_PRICE_REQUEST_FAILED.inc();\n            logger.error({ error: error.message }, 'Rfqt V2 price request failed');\n            res.status(HttpStatus.BAD_REQUEST).json({ error: error.message });\n            return;\n        }\n\n        try {\n            const prices = await service.getV2PricesAsync(quoteContext);\n            RFQT_V2_PRICE_REQUEST_SUCCEEDED.inc();\n            logger.info('Rfqt V2 price request succeeded');\n            res.status(HttpStatus.OK).json({\n                prices,\n            });\n        } catch (error) {\n            RFQT_V2_PRICE_REQUEST_FAILED.inc();\n            logger.error({ error: error.message }, 'Rfqt V2 price request failed');\n            res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({ error: error.message });\n        }\n    }\n\n    /**\n     * Gets quotes (\"firm quotes\") for the given asset pair from market makers\n     * operating on the `OtcOrder` RFQt platform\n     */\n    public async getV2QuotesAsync(\n        req: TypedRequest<RfqtV2Request>,\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        res: express.Response<{ quotes: RfqtV2Quote[] } | { error: any }>,\n    ): Promise<void> {\n        let quoteContext: FirmQuoteContext;\n        let service: RfqtService;\n        try {\n            const chainId = this._extractChainId(req);\n            service = this._getServiceForChain(chainId);\n            quoteContext = (await this._extractQuoteContextAsync(req, chainId, true, service)) as FirmQuoteContext;\n        } catch (error) {\n            RFQT_V2_QUOTE_REQUEST_FAILED.inc();\n            logger.error({ error }, 'Rfqt V2 quote request failed');\n            res.status(HttpStatus.BAD_REQUEST).json({ error });\n            return;\n        }\n\n        try {\n            const quotes = await service.getV2QuotesAsync(quoteContext);\n            RFQT_V2_QUOTE_REQUEST_SUCCEEDED.inc();\n            logger.info('Rfqt V2 quote request succeeded');\n            res.status(HttpStatus.OK).json({\n                quotes,\n            });\n        } catch (error) {\n            RFQT_V2_QUOTE_REQUEST_FAILED.inc();\n            logger.error({ error }, 'Rfqt V2 quote request failed');\n            res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({ error: error.message });\n        }\n    }\n\n    /**\n     * Parses and runtime-checks request parameters. After running the method, the parameters\n     * should match their TypeScript types.\n     */\n    private _parseV1RequestParameters<TRequest extends TypedRequest<V1RequestParameters>>(\n        request: TRequest,\n    ): V1RequestParameters & { integrator: Integrator } {\n        const { body } = request;\n\n        // Doing this before destructuring the body, otherwise the error\n        // thrown will be something like:\n        // 'Cannot destructure property 'altRfqAssetOfferings' of 'request.body' as it is undefined.'\n        if (\n            !body.altRfqAssetOfferings ||\n            !body.assetFillAmount ||\n            !body.makerToken ||\n            !body.marketOperation ||\n            !body.takerToken ||\n            !body.takerAddress ||\n            typeof body.intentOnFilling !== 'boolean' ||\n            !body.integratorId\n        ) {\n            throw new Error('Received request with missing parameters');\n        }\n\n        const { assetFillAmount, comparisonPrice, marketOperation, integratorId } = request.body;\n\n        const parsedChainId = this._extractChainId(request);\n        if (Number.isNaN(parsedChainId)) {\n            throw new Error('Chain ID is invalid');\n        }\n\n        if (\n            (marketOperation as string) !== MarketOperation.Buy.toString() &&\n            (marketOperation as string) !== MarketOperation.Sell.toString()\n        ) {\n            throw new Error('Received request with invalid market operation');\n        }\n\n        let integrator: Integrator;\n        try {\n            integrator = this._configManager.getIntegratorByIdOrThrow(integratorId);\n        } catch (error) {\n            throw new Error('No integrator found for integrator ID');\n        }\n\n        return {\n            ...request.body,\n            assetFillAmount: new BigNumber(assetFillAmount),\n            chainId: parsedChainId,\n            comparisonPrice: comparisonPrice ? new BigNumber(comparisonPrice) : undefined,\n            integrator,\n        };\n    }\n\n    /**\n     * Extract chainId from request parameters.\n     */\n    private _extractChainId<TRequest extends TypedRequest<RfqtV2Request>>(request: TRequest): number {\n        const chainIdFromHeader = request.header('0x-chain-id');\n        if (chainIdFromHeader === undefined) {\n            throw new Error('Chain ID is not provided');\n        } else {\n            const parsedChainId = parseInt(chainIdFromHeader, 10);\n            if (Number.isNaN(parsedChainId)) {\n                throw new Error('Chain ID is invalid');\n            }\n            return parsedChainId;\n        }\n    }\n\n    /**\n     * Extract quote context from request parameters. After running the method, the parameters\n     * should match their TypeScript types.\n     */\n    private async _extractQuoteContextAsync<TRequest extends TypedRequest<RfqtV2Request>>(\n        request: TRequest,\n        chainId: number,\n        isFirm: boolean,\n        service: RfqtService,\n    ): Promise<QuoteContext> {\n        const { body } = request;\n\n        // Doing this before destructuring the body, otherwise the error\n        // thrown will be something like:\n        // 'Cannot destructure property 'assetFillAmount' of 'request.body' as it is undefined.'\n        if (\n            !body.assetFillAmount ||\n            !body.makerToken ||\n            !body.marketOperation ||\n            !body.takerToken ||\n            !body.takerAddress ||\n            // TODO: add body.trader to these checks once we've rolled out completely\n            typeof body.intentOnFilling !== 'boolean' ||\n            !body.integratorId\n        ) {\n            throw new Error('Received request with missing parameters');\n        }\n\n        const {\n            takerToken,\n            makerToken,\n            trader,\n            gasless,\n            takerAddress,\n            txOrigin,\n            assetFillAmount: assetFillAmountStr,\n            marketOperation,\n            integratorId,\n            bucket,\n        } = request.body;\n\n        if (\n            (marketOperation as string) !== MarketOperation.Buy.toString() &&\n            (marketOperation as string) !== MarketOperation.Sell.toString()\n        ) {\n            throw new Error('Received request with invalid market operation');\n        }\n\n        let integrator: Integrator;\n        try {\n            integrator = this._configManager.getIntegratorByIdOrThrow(integratorId);\n        } catch (error) {\n            throw new Error('No integrator found for integrator ID');\n        }\n\n        if (isFirm && txOrigin === undefined) {\n            throw new Error('Received request with missing parameter txOrigin');\n        }\n\n        const isSelling = (marketOperation as string) === MarketOperation.Sell.toString();\n        const assetFillAmount = new BigNumber(assetFillAmountStr);\n        let takerAmount, makerAmount;\n        if (isSelling) {\n            takerAmount = assetFillAmount;\n        } else {\n            makerAmount = assetFillAmount;\n        }\n        const takerTokenDecimals = await service.getTokenDecimalsAsync(takerToken);\n        const makerTokenDecimals = await service.getTokenDecimalsAsync(makerToken);\n\n        return {\n            workflow: gasless ? 'gasless-rfqt' : 'rfqt',\n            chainId,\n            isFirm,\n            takerToken,\n            makerToken,\n            originalMakerToken: makerToken,\n            trader: trader || takerAddress, // TODO: remove the takerAddress fallback once we've rolled out completely\n            takerAddress,\n            txOrigin,\n            takerAmount,\n            makerAmount,\n            takerTokenDecimals,\n            makerTokenDecimals,\n            integrator,\n            isUnwrap: false,\n            isSelling,\n            assetFillAmount,\n            feeModelVersion: service.feeModelVersion,\n            bucket,\n        } as QuoteContext;\n    }\n\n    /**\n     * Gets the appropriate `RfqtService` instance from the\n     * Chain ID -> Rfqt Service Map. Throws if no service is found\n     * for `chainId`.\n     */\n    private _getServiceForChain(chainId: number): RfqtService {\n        const service = this._rfqtServices.get(chainId);\n\n        if (!service) {\n            throw new Error('No configuration exists for chain');\n        }\n        return service;\n    }\n}\n"],"version":3}