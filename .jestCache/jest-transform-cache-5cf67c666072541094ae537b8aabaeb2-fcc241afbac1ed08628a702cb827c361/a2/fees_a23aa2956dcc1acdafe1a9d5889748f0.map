{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/core/types/fees.ts","mappings":"","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/core/types/fees.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\n\nexport type FeeModelVersion = /* no 0x fee */ 0 | /* fixed rate */ 1 | /* margin rake */ 2;\n\nexport interface Fee {\n    token: string;\n    amount: BigNumber;\n    type: 'fixed' | 'bps';\n}\n\n/**\n * (Deprecated) base interface for FeeDetails type.\n */\ninterface FeeDetailsBaseDeprecated {\n    /**\n     * `kind` is used to mark the type of FeeDetails.\n     */\n    kind: 'gasOnly' | 'default' | 'margin';\n    /**\n     * Version number of fee model which determines the fee amount to charge MMs.\n     *   * Version 0 includes estimated gas cost only.\n     *   * Version 1 charge an additional bps as 0x fee, based on trade size, on top of gas.\n     *   * Version 2 charge 0x fee based on detected margin of RFQm with AMMs.\n     * While Verion 0 will use `gasOnly` FeeDetails, and Version 1 will use `default`, Version 2\n     * will use all three of them: `gasOnly` for margin detection, `margin` if margin detection\n     * succeeded, and `default` if margin detection failed.\n     */\n    feeModelVersion: FeeModelVersion;\n    gasFeeAmount: BigNumber;\n    gasPrice: BigNumber;\n}\n\n/**\n * (Deprecated) interface for `margin` FeeDetails type. In this case the Fee is\n * calculated using margin based method\n */\nexport interface MarginBasedFeeDetailsDeprecated extends FeeDetailsBaseDeprecated {\n    kind: 'margin';\n    margin: BigNumber;\n    marginRakeRatio: number;\n    zeroExFeeAmount: BigNumber;\n    /**\n     * All token prices are from TokenPriceOracle. `null` value means the oracle\n     * failed to provide price, or we don't need to query it. For example, the token\n     * is not involved in fee calculation, or bps for given pair is 0.\n     */\n    feeTokenBaseUnitPriceUsd: BigNumber | null;\n    takerTokenBaseUnitPriceUsd: BigNumber | null;\n    makerTokenBaseUnitPriceUsd: BigNumber | null;\n}\n\n/**\n * (Deprecated) interface for `default` FeeDetails type. In this case the Fee is\n * calculated using default method, based on trade size and bps of underlying\n * pairs.\n */\nexport interface DefaultFeeDetailsDeprecated extends FeeDetailsBaseDeprecated {\n    kind: 'default';\n    tradeSizeBps: number;\n    zeroExFeeAmount: BigNumber;\n    feeTokenBaseUnitPriceUsd: BigNumber | null;\n    takerTokenBaseUnitPriceUsd: BigNumber | null;\n    makerTokenBaseUnitPriceUsd: BigNumber | null;\n}\n\n/**\n * (Deprecated) interface for `gasOnly` FeeDetails type. Only gas related information\n * is included.\n */\nexport interface GasOnlyFeeDetailsDeprecated extends FeeDetailsBaseDeprecated {\n    kind: 'gasOnly';\n}\n\ninterface GasFeeBreakdownDetails {\n    gasPrice: BigNumber;\n    estimatedGas: BigNumber;\n}\n\ninterface VolumeBasedFeeBreakdownDetails {\n    kind: 'volume';\n    tradeSizeBps: number;\n}\n\ninterface PriceImprovementBasedFeeBreakdownDetails {\n    kind: 'price_improvement';\n    priceImprovement: BigNumber;\n    rakeRatio: number;\n}\n\nexport interface FeeBreakdown {\n    gas?: {\n        amount: BigNumber;\n        details: GasFeeBreakdownDetails;\n    };\n    zeroEx?: {\n        amount: BigNumber;\n        details: VolumeBasedFeeBreakdownDetails | PriceImprovementBasedFeeBreakdownDetails;\n    };\n}\n\nexport interface ConversionRates {\n    nativeTokenBaseUnitPriceUsd: BigNumber | null;\n    feeTokenBaseUnitPriceUsd: BigNumber | null;\n    takerTokenBaseUnitPriceUsd: BigNumber | null;\n    makerTokenBaseUnitPriceUsd: BigNumber | null;\n}\n\n/**\n * Extends Fee data schema to include a details session, which could be one\n * of `gasOnly`, `default` or `margin` type, depending on the approach used\n * to calculate the Fee.\n */\nexport interface FeeWithDetails extends Fee {\n    details: GasOnlyFeeDetailsDeprecated | DefaultFeeDetailsDeprecated | MarginBasedFeeDetailsDeprecated;\n    breakdown: FeeBreakdown;\n    conversionRates: ConversionRates;\n}\n\nexport interface StoredFee {\n    token: string;\n    amount: string;\n    type: 'fixed' | 'bps';\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    details?: any;\n    breakdown?: any;\n    conversionRates?: any;\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n}\n"],"version":3}