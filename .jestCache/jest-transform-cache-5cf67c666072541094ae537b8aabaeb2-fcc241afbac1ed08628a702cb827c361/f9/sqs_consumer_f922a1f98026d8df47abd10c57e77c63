53d99c99af36c1db1cf64dd23d8b9a03
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqsConsumer = exports.SqsRetryableError = void 0;
// tslint:disable: max-classes-per-file
const Sentry = require("@sentry/node");
const delay_1 = require("delay");
const config_1 = require("../config");
const constants_1 = require("../core/constants");
const logger_1 = require("../logger");
class SqsRetryableError extends Error {
}
exports.SqsRetryableError = SqsRetryableError;
class SqsConsumer {
    constructor(params) {
        this._workerIndex = params.workerIndex;
        this._workerAddress = params.workerAddress;
        this._sqsClient = params.sqsClient;
        this._beforeHandle = params.beforeHandle;
        this._handleMessage = params.handleMessage;
        this._afterHandle = params.afterHandle;
        this._isConsuming = false;
    }
    get workerIndex() {
        return this._workerIndex;
    }
    get workerAddress() {
        return this._workerAddress;
    }
    stop() {
        this._isConsuming = false;
    }
    async consumeAsync() {
        if (this._isConsuming) {
            return;
        }
        this._isConsuming = true;
        while (this._isConsuming) {
            await this.consumeOnceAsync();
        }
    }
    /**
     * Decorates _consumeOnceInternalAsync with Sentry observability
     */
    async consumeOnceAsync() {
        let transaction;
        if (config_1.SENTRY_DSN) {
            transaction = Sentry.startTransaction({
                name: 'Worker Transaction',
            });
        }
        try {
            await this._consumeOnceInternalAsync();
        }
        catch (e) {
            if (config_1.SENTRY_DSN) {
                Sentry.captureException(e);
            }
            logger_1.logger.error({ id: this._workerAddress, workerIndex: this._workerIndex, errorMessage: e.message }, `Encountered error when consuming from the queue`);
        }
        finally {
            if (config_1.SENTRY_DSN) {
                transaction === null || transaction === void 0 ? void 0 : transaction.finish();
            }
        }
    }
    async _consumeOnceInternalAsync() {
        // Run the before hook
        if (this._beforeHandle) {
            let beforeCheck;
            try {
                beforeCheck = await this._beforeHandle();
            }
            catch (e) {
                logger_1.logger.error({ id: this._workerAddress, workerIndex: this._workerIndex, errorMessage: e.message }, 'Error encountered in the preHandle check');
                throw e;
            }
            if (!beforeCheck) {
                const errorMessage = 'Before validation failed';
                logger_1.logger.warn({ id: this._workerAddress, workerIndex: this._workerIndex }, errorMessage);
                await (0, delay_1.default)(constants_1.ONE_SECOND_MS);
                return;
            }
        }
        // Receive message
        const message = await this._sqsClient.receiveMessageAsync();
        // No message
        if (message === null) {
            return;
        }
        // Handle message
        let error;
        try {
            await this._handleMessage(message);
        }
        catch (err) {
            error = err;
            logger_1.logger.error({ errorMessage: err.message, message, id: this._workerAddress, workerIndex: this._workerIndex }, 'Encountered error while handling message');
            if (err instanceof SqsRetryableError) {
                logger_1.logger.info({ message, id: this._workerAddress, workerIndex: this._workerIndex }, 'Retrying message');
                // Retry message
                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                await this._sqsClient.changeMessageVisibilityAsync(message.ReceiptHandle, 0);
                await (0, delay_1.default)(constants_1.ONE_SECOND_MS);
                throw err;
            }
        }
        // Delete message
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        await this._sqsClient.deleteMessageAsync(message.ReceiptHandle);
        // Run the after hook
        if (this._afterHandle) {
            await this._afterHandle(message, error);
        }
        if (error) {
            throw error;
        }
    }
}
exports.SqsConsumer = SqsConsumer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,