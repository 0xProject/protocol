{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/background_jobs_integration_test.ts","mappings":";;AAAA,yCAAyC;AACzC,mCAAuC;AACvC,qCAA4B;AAE5B,wDAA6D;AAC7D,0CAAyD;AACzD,qDAAsD;AACtD,gDAAqE;AACrE,4DAA0F;AAE1F,wDAAqG;AAErG,IAAI,CAAC,UAAU,CAAC,yBAAa,GAAG,EAAE,CAAC,CAAC;AACpC,IAAI,oBAAwD,CAAC;AAC7D,IAAI,gBAAgB,GAAY,EAAE,CAAC;AACnC,IAAI,OAAO,GAAa,EAAE,CAAC;AAC3B,IAAI,SAAoB,CAAC;AAEzB,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;IAC/C,UAAU,CAAC,KAAK,IAAI,EAAE;QAClB,oBAAoB,GAAG,MAAM,IAAA,mCAAsB,EAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK,IAAI,EAAE;QACjB,6DAA6D;QAC7D,oEAAoE;QACpE,MAAM,UAAU,GAAG,IAAI,iBAAK,CAAC,iCAAyB,CAAC,CAAC;QACxD,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7C,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAC9B;QACD,MAAM,IAAA,gCAAiB,EAAC,OAAO,CAAC,CAAC;QACjC,MAAM,IAAA,yCAA0B,EAAC,gBAAgB,CAAC,CAAC;QACnD,gBAAgB,GAAG,EAAE,CAAC;QACtB,OAAO,GAAG,EAAE,CAAC;QACb,MAAM,qBAAS,CAAC,aAAa,EAAE,CAAC;QAChC,IAAI,CAAC,oBAAoB,EAAE,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACvD;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YACzD,6DAA6D;YAC7D,oEAAoE;YACpE,MAAM,UAAU,GAAG,IAAI,iBAAK,CAAC,iCAAyB,EAAE;gBACpD,oBAAoB,EAAE,IAAI;gBAC1B,gBAAgB,EAAE,KAAK;aAC1B,CAAC,CAAC;YACH,kCAAkC;YAClC,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7C,IAAI,IAAI,CAAC,MAAM,EAAE;gBACb,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;aAC9B;YAED,MAAM,sBAAsB,GAAG,IAAI,cAAK,CAAC,eAAiB,CAAC,SAAS,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;YAEtF,MAAM,QAAQ,GAA6B;gBACvC;oBACI,QAAQ,EAAE,eAAiB,CAAC,QAAQ;oBACpC,IAAI,EAAE,KAAK,IAAI,EAAE;wBACb,MAAM,eAAiB,CAAC,WAAW,CAAC,sBAAsB,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;oBAC3F,CAAC;iBACJ;aACJ,CAAC;YAEF,SAAS,GAAG,IAAI,qBAAS,CAAC,QAAQ,CAAC,CAAC;YACpC,SAAS,CAAC,KAAK,EAAE,CAAC;YAClB,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,eAAiB,CAAC;YACtD,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,SAAS,EAAE,YAAY,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;YAEnE,gBAAgB,GAAG,CAAC,UAAU,CAAC,CAAC;YAChC,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC;YAEnB,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,yBAAa,GAAG,EAAE,CAAC,CAAC,CAAC;YACxE,MAAM,CAAC,MAAM,sBAAsB,CAAC,iBAAiB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/background_jobs_integration_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\nimport { Queue, Worker } from 'bullmq';\nimport Redis from 'ioredis';\n\nimport backgroundJobNoOp from '../src/background-jobs/no_op';\nimport { REDIS_BACKGROUND_JOB_URI } from '../src/config';\nimport { ONE_SECOND_MS } from '../src/core/constants';\nimport { ScheduledBackgroundJob, Scheduler } from '../src/scheduler';\nimport { closeRedisConnectionsAsync, closeWorkersAsync } from '../src/utils/runner_utils';\n\nimport { setupDependenciesAsync, TeardownDependenciesFunctionHandle } from './test_utils/deployment';\n\njest.setTimeout(ONE_SECOND_MS * 60);\nlet teardownDependencies: TeardownDependenciesFunctionHandle;\nlet redisConnections: Redis[] = [];\nlet workers: Worker[] = [];\nlet scheduler: Scheduler;\n\ndescribe('Background jobs integration tests', () => {\n    beforeEach(async () => {\n        teardownDependencies = await setupDependenciesAsync(['redis']);\n    });\n\n    afterEach(async () => {\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const connection = new Redis(REDIS_BACKGROUND_JOB_URI!);\n        const keys = await connection.keys('bull:*');\n        if (keys.length) {\n            await connection.del(keys);\n        }\n        await closeWorkersAsync(workers);\n        await closeRedisConnectionsAsync(redisConnections);\n        redisConnections = [];\n        workers = [];\n        await Scheduler.shutdownAsync();\n        if (!teardownDependencies()) {\n            throw new Error('Failed to tear down dependencies');\n        }\n    });\n\n    describe('no-op job', () => {\n        it('no-op job should be scheduled and processed', async () => {\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const connection = new Redis(REDIS_BACKGROUND_JOB_URI!, {\n                maxRetriesPerRequest: null,\n                enableReadyCheck: false,\n            });\n            // clean up keys related to bullmq\n            const keys = await connection.keys('bull:*');\n            if (keys.length) {\n                await connection.del(keys);\n            }\n\n            const noOpBackgroundJobQueue = new Queue(backgroundJobNoOp.queueName, { connection });\n\n            const schedule: ScheduledBackgroundJob[] = [\n                {\n                    schedule: backgroundJobNoOp.schedule,\n                    func: async () => {\n                        await backgroundJobNoOp.createAsync(noOpBackgroundJobQueue, { timestamp: Date.now() });\n                    },\n                },\n            ];\n\n            scheduler = new Scheduler(schedule);\n            scheduler.start();\n            const { queueName, processAsync } = backgroundJobNoOp;\n            const worker = new Worker(queueName, processAsync, { connection });\n\n            redisConnections = [connection];\n            workers = [worker];\n\n            await new Promise((resolve) => setTimeout(resolve, ONE_SECOND_MS * 15));\n            expect(await noOpBackgroundJobQueue.getCompletedCount()).toEqual(1);\n        });\n    });\n});\n"],"version":3}