{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/quote_server_client_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/quote_server_client_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\r\n// tslint:disable:no-empty\r\n// tslint:disable:max-file-line-count\r\n\r\nimport { MarketOperation } from '@0x/asset-swapper/lib/src/types';\r\nimport { ethSignHashWithKey, OtcOrder } from '@0x/protocol-utils';\r\nimport { BigNumber, NULL_ADDRESS } from '@0x/utils';\r\nimport Axios from 'axios';\r\nimport AxiosMockAdapter from 'axios-mock-adapter';\r\nimport * as HttpStatus from 'http-status-codes';\r\n\r\nimport { Integrator } from '../../src/config';\r\nimport { SignRequest } from '../../src/quote-server/types';\r\nimport { Fee, QuoteServerPriceParams } from '../../src/core/types';\r\nimport { QuoteServerClient } from '../../src/utils/quote_server_client';\r\nimport { CHAIN_ID, CONTRACT_ADDRESSES } from '../constants';\r\n\r\nconst makerUri = 'https://some-market-maker.xyz';\r\nconst integrator: Integrator = {\r\n    integratorId: 'some-integrator-id',\r\n    apiKeys: [],\r\n    allowedChainIds: [],\r\n    label: 'integrator',\r\n    plp: false,\r\n    rfqm: true,\r\n    rfqt: true,\r\n};\r\n\r\n// Maker\r\nconst makerAddress = '0xFDbEf5C1Ad7d173D191D565c14E28eBd5b50470e';\r\nconst makerPrivateKey = '0xf4559ca5152145f5e0b9762f12213c2e74020a4481953fb940413273051a89d3';\r\n\r\n// Taker\r\nconst takerAddress = '0xdA9AC423442169588DE6b4305f4E820D708d0cE5';\r\nconst takerPrivateKey = '0x653fa328df81be180b58e42737bc4cef037a19a3b9673b15d20ee2eebb2e509d';\r\n\r\n// Some tokens and amounts\r\nconst takerToken = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2';\r\nconst makerToken = '0x6b175474e89094c44da98b954eedeac495271d0f';\r\nconst takerAmount = new BigNumber(100);\r\nconst makerAmount = new BigNumber(100_000);\r\n\r\n// An OtcOrder\r\nconst order = new OtcOrder({\r\n    maker: makerAddress,\r\n    taker: takerAddress,\r\n    makerAmount,\r\n    takerAmount,\r\n    makerToken,\r\n    takerToken,\r\n    expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n        new BigNumber(2634330177),\r\n        new BigNumber(1),\r\n        new BigNumber(1634330177),\r\n    ),\r\n});\r\nconst orderHash = order.getHash();\r\n\r\n// Signatures\r\nconst takerSignature = ethSignHashWithKey(orderHash, takerPrivateKey);\r\nconst makerSignature = ethSignHashWithKey(orderHash, makerPrivateKey);\r\n\r\ndescribe('QuoteServerClient', () => {\r\n    const axiosInstance = Axios.create();\r\n    const axiosMock = new AxiosMockAdapter(axiosInstance);\r\n\r\n    afterEach(() => {\r\n        axiosMock.reset();\r\n    });\r\n\r\n    describe('makeQueryParameters', () => {\r\n        it('should make RFQt request parameters', () => {\r\n            // Given\r\n            const marketOperation = MarketOperation.Sell;\r\n            const input = {\r\n                txOrigin: takerAddress,\r\n                takerAddress: NULL_ADDRESS,\r\n                marketOperation,\r\n                buyTokenAddress: makerToken,\r\n                sellTokenAddress: takerToken,\r\n                comparisonPrice: new BigNumber('42'),\r\n                assetFillAmount: new BigNumber('100000'),\r\n            };\r\n\r\n            // When\r\n            const params = QuoteServerClient.makeQueryParameters(input);\r\n\r\n            // Then\r\n            expect(params).toEqual({\r\n                buyTokenAddress: '0x6b175474e89094c44da98b954eedeac495271d0f',\r\n                protocolVersion: '4',\r\n                sellAmountBaseUnits: '100000',\r\n                sellTokenAddress: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\r\n                takerAddress: '0x0000000000000000000000000000000000000000',\r\n                txOrigin: '0xdA9AC423442169588DE6b4305f4E820D708d0cE5',\r\n                comparisonPrice: '42',\r\n            });\r\n        });\r\n\r\n        it('should make RFQm request parameters', () => {\r\n            // Given\r\n            const txOrigin = '0x335e51687677C4f1389f3dEcA259af983529e82D';\r\n            const feeAmount = '100';\r\n            const otcOrderFee: Fee = {\r\n                amount: new BigNumber(feeAmount),\r\n                token: CONTRACT_ADDRESSES.etherToken,\r\n                type: 'fixed',\r\n            };\r\n            const marketOperation = MarketOperation.Sell;\r\n\r\n            // When\r\n            const params = QuoteServerClient.makeQueryParameters({\r\n                txOrigin,\r\n                takerAddress,\r\n                marketOperation,\r\n                buyTokenAddress: makerToken,\r\n                sellTokenAddress: takerToken,\r\n                assetFillAmount: new BigNumber('100000'),\r\n                isLastLook: true,\r\n                fee: otcOrderFee,\r\n            });\r\n\r\n            // Then\r\n            expect(params).toEqual({\r\n                buyTokenAddress: '0x6b175474e89094c44da98b954eedeac495271d0f',\r\n                feeAmount: '100',\r\n                feeToken: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',\r\n                feeType: 'fixed',\r\n                isLastLook: 'true',\r\n                protocolVersion: '4',\r\n                sellAmountBaseUnits: '100000',\r\n                sellTokenAddress: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\r\n                takerAddress: '0xdA9AC423442169588DE6b4305f4E820D708d0cE5',\r\n                txOrigin: '0x335e51687677C4f1389f3dEcA259af983529e82D',\r\n            });\r\n        });\r\n\r\n        it('should make RFQm request parameters with chain id', () => {\r\n            // Given\r\n            const txOrigin = '0x335e51687677C4f1389f3dEcA259af983529e82D';\r\n            const feeAmount = '100';\r\n            const otcOrderFee: Fee = {\r\n                amount: new BigNumber(feeAmount),\r\n                token: CONTRACT_ADDRESSES.etherToken,\r\n                type: 'fixed',\r\n            };\r\n            const marketOperation = MarketOperation.Sell;\r\n\r\n            // When\r\n            const params = QuoteServerClient.makeQueryParameters({\r\n                chainId: 10,\r\n                txOrigin,\r\n                takerAddress,\r\n                marketOperation,\r\n                buyTokenAddress: makerToken,\r\n                sellTokenAddress: takerToken,\r\n                assetFillAmount: new BigNumber('100000'),\r\n                isLastLook: true,\r\n                fee: otcOrderFee,\r\n            });\r\n\r\n            // Then\r\n            expect(params).toEqual({\r\n                chainId: '10',\r\n                buyTokenAddress: '0x6b175474e89094c44da98b954eedeac495271d0f',\r\n                feeAmount: '100',\r\n                feeToken: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',\r\n                feeType: 'fixed',\r\n                isLastLook: 'true',\r\n                protocolVersion: '4',\r\n                sellAmountBaseUnits: '100000',\r\n                sellTokenAddress: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\r\n                takerAddress: '0xdA9AC423442169588DE6b4305f4E820D708d0cE5',\r\n                txOrigin: '0x335e51687677C4f1389f3dEcA259af983529e82D',\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('OtcOrder', () => {\r\n        describe('getPriceV2Async', () => {\r\n            it('should return a valid indicative quote', async () => {\r\n                // Given\r\n                const client = new QuoteServerClient(axiosInstance);\r\n                const request: QuoteServerPriceParams = {\r\n                    chainId: CHAIN_ID.toString(),\r\n                    sellTokenAddress: takerToken,\r\n                    buyTokenAddress: makerToken,\r\n                    takerAddress,\r\n                    sellAmountBaseUnits: takerAmount.toString(),\r\n                    protocolVersion: '4',\r\n                    txOrigin: takerAddress,\r\n                    isLastLook: 'true',\r\n                    feeAmount: '100',\r\n                    feeType: 'fixed',\r\n                    feeToken: CONTRACT_ADDRESSES.etherToken,\r\n                    nonce: '1634322835',\r\n                    nonceBucket: '1',\r\n                };\r\n\r\n                const response = {\r\n                    maker: makerAddress,\r\n                    makerAmount,\r\n                    takerAmount,\r\n                    makerToken,\r\n                    takerToken,\r\n                    expiry: new BigNumber(9934322972),\r\n                };\r\n\r\n                axiosMock.onGet(`${makerUri}/rfqm/v2/price`).replyOnce(HttpStatus.OK, response);\r\n\r\n                // When\r\n                const indicativeQuote = await client.getPriceV2Async(\r\n                    makerUri,\r\n                    integrator,\r\n                    request,\r\n                    (uri) => `${uri}/rfqm/v2/price`,\r\n                );\r\n\r\n                // Then\r\n                const expectedResponse = {\r\n                    ...response,\r\n                    makerUri,\r\n                };\r\n                expect(indicativeQuote).toEqual(expectedResponse);\r\n            });\r\n\r\n            it('should return undefined for empty responses (not quoting)', async () => {\r\n                // Given\r\n                const client = new QuoteServerClient(axiosInstance);\r\n                const request: QuoteServerPriceParams = {\r\n                    chainId: CHAIN_ID.toString(),\r\n                    sellTokenAddress: takerToken,\r\n                    buyTokenAddress: makerToken,\r\n                    takerAddress,\r\n                    sellAmountBaseUnits: takerAmount.toString(),\r\n                    protocolVersion: '4',\r\n                    txOrigin: takerAddress,\r\n                    isLastLook: 'true',\r\n                    feeAmount: '100',\r\n                    feeType: 'fixed',\r\n                    feeToken: CONTRACT_ADDRESSES.etherToken,\r\n                    nonce: '1634322835',\r\n                    nonceBucket: '1',\r\n                };\r\n\r\n                const response = {}; // empty response\r\n\r\n                // When\r\n                axiosMock.onGet(`${makerUri}/rfqm/v2/price`).replyOnce(HttpStatus.OK, response);\r\n                const result = await client.getPriceV2Async(\r\n                    makerUri,\r\n                    integrator,\r\n                    request,\r\n                    (uri) => `${uri}/rfqm/v2/price`,\r\n                );\r\n\r\n                // Then\r\n                expect(result).toBe(undefined);\r\n            });\r\n\r\n            it('should return undefined when returning a 400 from axios', async () => {\r\n                // Given\r\n                const client = new QuoteServerClient(axiosInstance);\r\n                const request: QuoteServerPriceParams = {\r\n                    chainId: CHAIN_ID.toString(),\r\n                    sellTokenAddress: takerToken,\r\n                    buyTokenAddress: makerToken,\r\n                    takerAddress,\r\n                    sellAmountBaseUnits: takerAmount.toString(),\r\n                    protocolVersion: '4',\r\n                    txOrigin: takerAddress,\r\n                    isLastLook: 'true',\r\n                    feeAmount: '100',\r\n                    feeType: 'fixed',\r\n                    feeToken: CONTRACT_ADDRESSES.etherToken,\r\n                    nonce: '1634322835',\r\n                    nonceBucket: '1',\r\n                };\r\n\r\n                const response = {}; // empty response\r\n\r\n                axiosMock.onGet(`${makerUri}/rfqm/v2/price`).replyOnce(HttpStatus.BAD_REQUEST, response);\r\n\r\n                // When\r\n                const result = await client.getPriceV2Async(\r\n                    makerUri,\r\n                    integrator,\r\n                    request,\r\n                    (uri) => `${uri}/rfqm/v2/price`,\r\n                );\r\n\r\n                // Then\r\n                expect(result).toBe(undefined);\r\n            });\r\n\r\n            it('should throw an error for a malformed response', async () => {\r\n                // Given\r\n                const client = new QuoteServerClient(axiosInstance);\r\n                const request: QuoteServerPriceParams = {\r\n                    chainId: CHAIN_ID.toString(),\r\n                    sellTokenAddress: takerToken,\r\n                    buyTokenAddress: makerToken,\r\n                    takerAddress,\r\n                    sellAmountBaseUnits: takerAmount.toString(),\r\n                    protocolVersion: '4',\r\n                    txOrigin: takerAddress,\r\n                    isLastLook: 'true',\r\n                    feeAmount: '100',\r\n                    feeType: 'fixed',\r\n                    feeToken: CONTRACT_ADDRESSES.etherToken,\r\n                    nonce: '1634322835',\r\n                    nonceBucket: '1',\r\n                };\r\n\r\n                const response = {\r\n                    asdf: 'malformed response',\r\n                };\r\n\r\n                axiosMock.onGet(`${makerUri}/rfqm/v2/price`).replyOnce(HttpStatus.OK, response);\r\n\r\n                // When\r\n                await expect(async () => {\r\n                    await client.getPriceV2Async(makerUri, integrator, request, (uri) => `${uri}/rfqm/v2/price`);\r\n                }).rejects.toThrow();\r\n            });\r\n        });\r\n\r\n        describe('batchGetPriceV2Async', () => {\r\n            it('should return the valid indicative qutoes and filter out errors', async () => {\r\n                // Given\r\n                const makerUri1 = 'https://some-market-maker1.xyz';\r\n                const makerUri2 = 'https://some-market-maker2.xyz';\r\n                const makerUri3 = 'https://some-market-maker3.xyz';\r\n                const client = new QuoteServerClient(axiosInstance);\r\n                const request: QuoteServerPriceParams = {\r\n                    chainId: CHAIN_ID.toString(),\r\n                    sellTokenAddress: takerToken,\r\n                    buyTokenAddress: makerToken,\r\n                    takerAddress,\r\n                    sellAmountBaseUnits: takerAmount.toString(),\r\n                    protocolVersion: '4',\r\n                    txOrigin: takerAddress,\r\n                    isLastLook: 'true',\r\n                    feeAmount: '100',\r\n                    feeType: 'fixed',\r\n                    feeToken: CONTRACT_ADDRESSES.etherToken,\r\n                    nonce: '1634322835',\r\n                    nonceBucket: '1',\r\n                };\r\n\r\n                const response = {\r\n                    maker: makerAddress,\r\n                    makerAmount,\r\n                    takerAmount,\r\n                    makerToken,\r\n                    takerToken,\r\n                    expiry: new BigNumber(9934322972),\r\n                };\r\n\r\n                axiosMock.onGet(`${makerUri1}/rfqm/v2/price`).replyOnce(HttpStatus.OK, response);\r\n                axiosMock.onGet(`${makerUri2}/rfqm/v2/price`).replyOnce(HttpStatus.NO_CONTENT, {});\r\n                axiosMock.onGet(`${makerUri3}/rfqm/v2/price`).replyOnce(HttpStatus.BAD_GATEWAY, {});\r\n\r\n                // When\r\n                const indicativeQuotes = await client.batchGetPriceV2Async(\r\n                    [makerUri1, makerUri2, makerUri3],\r\n                    integrator,\r\n                    request,\r\n                );\r\n\r\n                // Then\r\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                expect(indicativeQuotes!.length).toEqual(1);\r\n                expect(indicativeQuotes[0].makerAmount.toNumber()).toEqual(response.makerAmount.toNumber());\r\n                expect(indicativeQuotes[0].maker).toEqual(makerAddress);\r\n            });\r\n        });\r\n\r\n        describe('signV2Async', () => {\r\n            it('should return a signature for valid response', async () => {\r\n                // Given\r\n                const client = new QuoteServerClient(axiosInstance);\r\n                const request: SignRequest = {\r\n                    order,\r\n                    orderHash,\r\n                    fee: {\r\n                        amount: new BigNumber('100'),\r\n                        type: 'fixed',\r\n                        token: CONTRACT_ADDRESSES.etherToken,\r\n                    },\r\n                    expiry: order.expiry,\r\n                    takerSignature,\r\n                };\r\n\r\n                const actualRequest = {\r\n                    order,\r\n                    orderHash,\r\n                    feeAmount: '100',\r\n                    feeToken: CONTRACT_ADDRESSES.etherToken,\r\n                    expiry: order.expiry,\r\n                    takerSignature,\r\n                };\r\n\r\n                const response = {\r\n                    feeAmount: '100',\r\n                    proceedWithFill: true,\r\n                    makerSignature,\r\n                };\r\n\r\n                axiosMock\r\n                    .onPost(`${makerUri}/rfqm/v2/sign`, JSON.parse(JSON.stringify(actualRequest)))\r\n                    .replyOnce(HttpStatus.OK, response);\r\n\r\n                // When\r\n                const signature = await client.signV2Async(makerUri, 'dummy-integrator-id', request);\r\n\r\n                // Then\r\n                expect(signature).toEqual(makerSignature);\r\n            });\r\n\r\n            it('should send takerSpecifiedSide when enabled and present in request', async () => {\r\n                // Given\r\n                const client = new QuoteServerClient(axiosInstance);\r\n                const request: SignRequest = {\r\n                    order,\r\n                    orderHash,\r\n                    fee: {\r\n                        amount: new BigNumber('100'),\r\n                        type: 'fixed',\r\n                        token: CONTRACT_ADDRESSES.etherToken,\r\n                    },\r\n                    expiry: order.expiry,\r\n                    takerSpecifiedSide: 'makerToken',\r\n                    takerSignature,\r\n                };\r\n\r\n                const actualRequest = {\r\n                    order,\r\n                    orderHash,\r\n                    feeAmount: '100',\r\n                    feeToken: CONTRACT_ADDRESSES.etherToken,\r\n                    expiry: order.expiry,\r\n                    takerSpecifiedSide: 'makerToken',\r\n                    takerSignature,\r\n                };\r\n\r\n                const response = {\r\n                    feeAmount: '100',\r\n                    proceedWithFill: true,\r\n                    makerSignature,\r\n                };\r\n\r\n                axiosMock\r\n                    .onPost(`${makerUri}/rfqm/v2/sign`, JSON.parse(JSON.stringify(actualRequest)))\r\n                    .replyOnce(HttpStatus.OK, response);\r\n\r\n                // When\r\n                const signature = await client.signV2Async(makerUri, 'dummy-integrator-id', request);\r\n\r\n                // Then\r\n                expect(signature).toEqual(makerSignature);\r\n            });\r\n\r\n            it('should return a signature for valid response even if the fee is higher than requested', async () => {\r\n                // Given\r\n                const client = new QuoteServerClient(axiosInstance);\r\n                const request: SignRequest = {\r\n                    order,\r\n                    orderHash,\r\n                    fee: {\r\n                        amount: new BigNumber('100'),\r\n                        type: 'fixed',\r\n                        token: CONTRACT_ADDRESSES.etherToken,\r\n                    },\r\n                    expiry: order.expiry,\r\n                    takerSignature,\r\n                };\r\n\r\n                const actualRequest = {\r\n                    order,\r\n                    orderHash,\r\n                    feeAmount: '100',\r\n                    feeToken: CONTRACT_ADDRESSES.etherToken,\r\n                    expiry: order.expiry,\r\n                    takerSignature,\r\n                };\r\n\r\n                const response = {\r\n                    feeAmount: '101', // higher than requested\r\n                    proceedWithFill: true,\r\n                    makerSignature,\r\n                };\r\n\r\n                axiosMock\r\n                    .onPost(`${makerUri}/rfqm/v2/sign`, JSON.parse(JSON.stringify(actualRequest)))\r\n                    .replyOnce(HttpStatus.OK, response);\r\n\r\n                // When\r\n                const signature = await client.signV2Async(makerUri, 'dummy-integrator-id', request);\r\n\r\n                // Then\r\n                expect(signature).toEqual(makerSignature);\r\n            });\r\n\r\n            it('should return a signature for valid response if the fee is 0 but no acknowledgement is returned', async () => {\r\n                // Given\r\n                const client = new QuoteServerClient(axiosInstance);\r\n                const request: SignRequest = {\r\n                    order,\r\n                    orderHash,\r\n                    fee: {\r\n                        amount: new BigNumber('0'),\r\n                        type: 'fixed',\r\n                        token: CONTRACT_ADDRESSES.etherToken,\r\n                    },\r\n                    expiry: order.expiry,\r\n                    takerSignature,\r\n                };\r\n\r\n                const actualRequest = {\r\n                    order,\r\n                    orderHash,\r\n                    feeAmount: '0',\r\n                    feeToken: CONTRACT_ADDRESSES.etherToken,\r\n                    expiry: order.expiry,\r\n                    takerSignature,\r\n                };\r\n\r\n                const response = {\r\n                    feeAmount: undefined, // no fee amount acknowledged\r\n                    proceedWithFill: true,\r\n                    makerSignature,\r\n                };\r\n\r\n                axiosMock\r\n                    .onPost(`${makerUri}/rfqm/v2/sign`, JSON.parse(JSON.stringify(actualRequest)))\r\n                    .replyOnce(HttpStatus.OK, response);\r\n\r\n                // When\r\n                const signature = await client.signV2Async(makerUri, 'dummy-integrator-id', request);\r\n\r\n                // Then\r\n                expect(signature).toEqual(makerSignature);\r\n            });\r\n\r\n            it('should throw an error for a malformed response', async () => {\r\n                // Given\r\n                const client = new QuoteServerClient(axiosInstance);\r\n                const request: SignRequest = {\r\n                    order,\r\n                    orderHash,\r\n                    fee: {\r\n                        amount: new BigNumber('100'),\r\n                        type: 'fixed',\r\n                        token: CONTRACT_ADDRESSES.etherToken,\r\n                    },\r\n                    expiry: order.expiry,\r\n                    takerSignature,\r\n                };\r\n\r\n                const response = {\r\n                    asdf: 'I am broken',\r\n                };\r\n\r\n                axiosMock\r\n                    .onPost(`${makerUri}/rfqm/v2/sign`, JSON.parse(JSON.stringify(request)))\r\n                    .replyOnce(HttpStatus.OK, response);\r\n\r\n                await expect(async () => {\r\n                    await client.signV2Async(makerUri, 'dummy-integrator-id', request);\r\n                }).rejects.toThrow();\r\n            });\r\n\r\n            it('should return undefined for an incorrect fee acknowledgement', async () => {\r\n                // Given\r\n                const client = new QuoteServerClient(axiosInstance);\r\n                const request: SignRequest = {\r\n                    order,\r\n                    orderHash,\r\n                    fee: {\r\n                        amount: new BigNumber('100'),\r\n                        type: 'fixed',\r\n                        token: CONTRACT_ADDRESSES.etherToken,\r\n                    },\r\n                    expiry: order.expiry,\r\n                    takerSignature,\r\n                };\r\n\r\n                const actualRequest = {\r\n                    order,\r\n                    orderHash,\r\n                    feeAmount: '100',\r\n                    feeToken: CONTRACT_ADDRESSES.etherToken,\r\n                    expiry: order.expiry,\r\n                    takerSignature,\r\n                };\r\n\r\n                const response = {\r\n                    feeAmount: '10', // Not the right fee\r\n                    proceedWithFill: true,\r\n                    makerSignature,\r\n                };\r\n\r\n                axiosMock\r\n                    .onPost(`${makerUri}/rfqm/v2/sign`, JSON.parse(JSON.stringify(actualRequest)))\r\n                    .replyOnce(HttpStatus.OK, response);\r\n\r\n                // When\r\n                const signature = await client.signV2Async(makerUri, 'dummy-integrator-id', request);\r\n\r\n                // Then\r\n                expect(signature).toBe(undefined);\r\n            });\r\n\r\n            it('should return undefined for explicitly rejected responses', async () => {\r\n                // Given\r\n                const client = new QuoteServerClient(axiosInstance);\r\n                const request: SignRequest = {\r\n                    order,\r\n                    orderHash,\r\n                    fee: {\r\n                        amount: new BigNumber('100'),\r\n                        type: 'fixed',\r\n                        token: CONTRACT_ADDRESSES.etherToken,\r\n                    },\r\n                    expiry: order.expiry,\r\n                    takerSignature,\r\n                };\r\n\r\n                const actualRequest = {\r\n                    order,\r\n                    orderHash,\r\n                    feeAmount: '100',\r\n                    feeToken: CONTRACT_ADDRESSES.etherToken,\r\n                    expiry: order.expiry,\r\n                    takerSignature,\r\n                };\r\n\r\n                const response = {\r\n                    proceedWithFill: false,\r\n                };\r\n\r\n                axiosMock\r\n                    .onPost(`${makerUri}/rfqm/v2/sign`, JSON.parse(JSON.stringify(actualRequest)))\r\n                    .replyOnce(HttpStatus.OK, response);\r\n\r\n                // When\r\n                const signature = await client.signV2Async(makerUri, 'dummy-integrator-id', request);\r\n\r\n                // Then\r\n                expect(signature).toBe(undefined);\r\n            });\r\n        });\r\n    });\r\n});\r\n"],"version":3}