12ea901679f9acce09809941a4667474
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:custom-no-magic-numbers
const bullmq_1 = require("bullmq");
const ioredis_1 = require("ioredis");
const no_op_1 = require("../src/background-jobs/no_op");
const config_1 = require("../src/config");
const constants_1 = require("../src/core/constants");
const scheduler_1 = require("../src/scheduler");
const runner_utils_1 = require("../src/utils/runner_utils");
const deployment_1 = require("./test_utils/deployment");
jest.setTimeout(constants_1.ONE_SECOND_MS * 60);
let teardownDependencies;
let redisConnections = [];
let workers = [];
let scheduler;
describe('Background jobs integration tests', () => {
    beforeEach(async () => {
        teardownDependencies = await (0, deployment_1.setupDependenciesAsync)(['redis']);
    });
    afterEach(async () => {
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const connection = new ioredis_1.default(config_1.REDIS_BACKGROUND_JOB_URI);
        const keys = await connection.keys('bull:*');
        if (keys.length) {
            await connection.del(keys);
        }
        await (0, runner_utils_1.closeWorkersAsync)(workers);
        await (0, runner_utils_1.closeRedisConnectionsAsync)(redisConnections);
        redisConnections = [];
        workers = [];
        await scheduler_1.Scheduler.shutdownAsync();
        if (!teardownDependencies()) {
            throw new Error('Failed to tear down dependencies');
        }
    });
    describe('no-op job', () => {
        it('no-op job should be scheduled and processed', async () => {
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const connection = new ioredis_1.default(config_1.REDIS_BACKGROUND_JOB_URI, {
                maxRetriesPerRequest: null,
                enableReadyCheck: false,
            });
            // clean up keys related to bullmq
            const keys = await connection.keys('bull:*');
            if (keys.length) {
                await connection.del(keys);
            }
            const noOpBackgroundJobQueue = new bullmq_1.Queue(no_op_1.default.queueName, { connection });
            const schedule = [
                {
                    schedule: no_op_1.default.schedule,
                    func: async () => {
                        await no_op_1.default.createAsync(noOpBackgroundJobQueue, { timestamp: Date.now() });
                    },
                },
            ];
            scheduler = new scheduler_1.Scheduler(schedule);
            scheduler.start();
            const { queueName, processAsync } = no_op_1.default;
            const worker = new bullmq_1.Worker(queueName, processAsync, { connection });
            redisConnections = [connection];
            workers = [worker];
            await new Promise((resolve) => setTimeout(resolve, constants_1.ONE_SECOND_MS * 15));
            expect(await noOpBackgroundJobQueue.getCompletedCount()).toEqual(1);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvYmFja2dyb3VuZF9qb2JzX2ludGVncmF0aW9uX3Rlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBeUM7QUFDekMsbUNBQXVDO0FBQ3ZDLHFDQUE0QjtBQUU1Qix3REFBNkQ7QUFDN0QsMENBQXlEO0FBQ3pELHFEQUFzRDtBQUN0RCxnREFBcUU7QUFDckUsNERBQTBGO0FBRTFGLHdEQUFxRztBQUVyRyxJQUFJLENBQUMsVUFBVSxDQUFDLHlCQUFhLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDcEMsSUFBSSxvQkFBd0QsQ0FBQztBQUM3RCxJQUFJLGdCQUFnQixHQUFZLEVBQUUsQ0FBQztBQUNuQyxJQUFJLE9BQU8sR0FBYSxFQUFFLENBQUM7QUFDM0IsSUFBSSxTQUFvQixDQUFDO0FBRXpCLFFBQVEsQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7SUFDL0MsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2xCLG9CQUFvQixHQUFHLE1BQU0sSUFBQSxtQ0FBc0IsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDakIsNkRBQTZEO1FBQzdELG9FQUFvRTtRQUNwRSxNQUFNLFVBQVUsR0FBRyxJQUFJLGlCQUFLLENBQUMsaUNBQXlCLENBQUMsQ0FBQztRQUN4RCxNQUFNLElBQUksR0FBRyxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0MsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2IsTUFBTSxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCO1FBQ0QsTUFBTSxJQUFBLGdDQUFpQixFQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sSUFBQSx5Q0FBMEIsRUFBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ25ELGdCQUFnQixHQUFHLEVBQUUsQ0FBQztRQUN0QixPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsTUFBTSxxQkFBUyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztTQUN2RDtJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUU7UUFDdkIsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3pELDZEQUE2RDtZQUM3RCxvRUFBb0U7WUFDcEUsTUFBTSxVQUFVLEdBQUcsSUFBSSxpQkFBSyxDQUFDLGlDQUF5QixFQUFFO2dCQUNwRCxvQkFBb0IsRUFBRSxJQUFJO2dCQUMxQixnQkFBZ0IsRUFBRSxLQUFLO2FBQzFCLENBQUMsQ0FBQztZQUNILGtDQUFrQztZQUNsQyxNQUFNLElBQUksR0FBRyxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDN0MsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNiLE1BQU0sVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM5QjtZQUVELE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxjQUFLLENBQUMsZUFBaUIsQ0FBQyxTQUFTLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1lBRXRGLE1BQU0sUUFBUSxHQUE2QjtnQkFDdkM7b0JBQ0ksUUFBUSxFQUFFLGVBQWlCLENBQUMsUUFBUTtvQkFDcEMsSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFO3dCQUNiLE1BQU0sZUFBaUIsQ0FBQyxXQUFXLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFDM0YsQ0FBQztpQkFDSjthQUNKLENBQUM7WUFFRixTQUFTLEdBQUcsSUFBSSxxQkFBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNsQixNQUFNLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxHQUFHLGVBQWlCLENBQUM7WUFDdEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFFbkUsZ0JBQWdCLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNoQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVuQixNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLHlCQUFhLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN4RSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvdGVzdC9iYWNrZ3JvdW5kX2pvYnNfaW50ZWdyYXRpb25fdGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTpjdXN0b20tbm8tbWFnaWMtbnVtYmVyc1xuaW1wb3J0IHsgUXVldWUsIFdvcmtlciB9IGZyb20gJ2J1bGxtcSc7XG5pbXBvcnQgUmVkaXMgZnJvbSAnaW9yZWRpcyc7XG5cbmltcG9ydCBiYWNrZ3JvdW5kSm9iTm9PcCBmcm9tICcuLi9zcmMvYmFja2dyb3VuZC1qb2JzL25vX29wJztcbmltcG9ydCB7IFJFRElTX0JBQ0tHUk9VTkRfSk9CX1VSSSB9IGZyb20gJy4uL3NyYy9jb25maWcnO1xuaW1wb3J0IHsgT05FX1NFQ09ORF9NUyB9IGZyb20gJy4uL3NyYy9jb3JlL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBTY2hlZHVsZWRCYWNrZ3JvdW5kSm9iLCBTY2hlZHVsZXIgfSBmcm9tICcuLi9zcmMvc2NoZWR1bGVyJztcbmltcG9ydCB7IGNsb3NlUmVkaXNDb25uZWN0aW9uc0FzeW5jLCBjbG9zZVdvcmtlcnNBc3luYyB9IGZyb20gJy4uL3NyYy91dGlscy9ydW5uZXJfdXRpbHMnO1xuXG5pbXBvcnQgeyBzZXR1cERlcGVuZGVuY2llc0FzeW5jLCBUZWFyZG93bkRlcGVuZGVuY2llc0Z1bmN0aW9uSGFuZGxlIH0gZnJvbSAnLi90ZXN0X3V0aWxzL2RlcGxveW1lbnQnO1xuXG5qZXN0LnNldFRpbWVvdXQoT05FX1NFQ09ORF9NUyAqIDYwKTtcbmxldCB0ZWFyZG93bkRlcGVuZGVuY2llczogVGVhcmRvd25EZXBlbmRlbmNpZXNGdW5jdGlvbkhhbmRsZTtcbmxldCByZWRpc0Nvbm5lY3Rpb25zOiBSZWRpc1tdID0gW107XG5sZXQgd29ya2VyczogV29ya2VyW10gPSBbXTtcbmxldCBzY2hlZHVsZXI6IFNjaGVkdWxlcjtcblxuZGVzY3JpYmUoJ0JhY2tncm91bmQgam9icyBpbnRlZ3JhdGlvbiB0ZXN0cycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgICAgdGVhcmRvd25EZXBlbmRlbmNpZXMgPSBhd2FpdCBzZXR1cERlcGVuZGVuY2llc0FzeW5jKFsncmVkaXMnXSk7XG4gICAgfSk7XG5cbiAgICBhZnRlckVhY2goYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyAkZXNsaW50LWZpeC1tZSBodHRwczovL2dpdGh1Yi5jb20vcmhpbm9kYXZpZC9lc2xpbnQtZml4LW1lXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBuZXcgUmVkaXMoUkVESVNfQkFDS0dST1VORF9KT0JfVVJJISk7XG4gICAgICAgIGNvbnN0IGtleXMgPSBhd2FpdCBjb25uZWN0aW9uLmtleXMoJ2J1bGw6KicpO1xuICAgICAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uZGVsKGtleXMpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGNsb3NlV29ya2Vyc0FzeW5jKHdvcmtlcnMpO1xuICAgICAgICBhd2FpdCBjbG9zZVJlZGlzQ29ubmVjdGlvbnNBc3luYyhyZWRpc0Nvbm5lY3Rpb25zKTtcbiAgICAgICAgcmVkaXNDb25uZWN0aW9ucyA9IFtdO1xuICAgICAgICB3b3JrZXJzID0gW107XG4gICAgICAgIGF3YWl0IFNjaGVkdWxlci5zaHV0ZG93bkFzeW5jKCk7XG4gICAgICAgIGlmICghdGVhcmRvd25EZXBlbmRlbmNpZXMoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gdGVhciBkb3duIGRlcGVuZGVuY2llcycpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnbm8tb3Agam9iJywgKCkgPT4ge1xuICAgICAgICBpdCgnbm8tb3Agam9iIHNob3VsZCBiZSBzY2hlZHVsZWQgYW5kIHByb2Nlc3NlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIC8vICRlc2xpbnQtZml4LW1lIGh0dHBzOi8vZ2l0aHViLmNvbS9yaGlub2RhdmlkL2VzbGludC1maXgtbWVcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gbmV3IFJlZGlzKFJFRElTX0JBQ0tHUk9VTkRfSk9CX1VSSSEsIHtcbiAgICAgICAgICAgICAgICBtYXhSZXRyaWVzUGVyUmVxdWVzdDogbnVsbCxcbiAgICAgICAgICAgICAgICBlbmFibGVSZWFkeUNoZWNrOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gY2xlYW4gdXAga2V5cyByZWxhdGVkIHRvIGJ1bGxtcVxuICAgICAgICAgICAgY29uc3Qga2V5cyA9IGF3YWl0IGNvbm5lY3Rpb24ua2V5cygnYnVsbDoqJyk7XG4gICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBjb25uZWN0aW9uLmRlbChrZXlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgbm9PcEJhY2tncm91bmRKb2JRdWV1ZSA9IG5ldyBRdWV1ZShiYWNrZ3JvdW5kSm9iTm9PcC5xdWV1ZU5hbWUsIHsgY29ubmVjdGlvbiB9KTtcblxuICAgICAgICAgICAgY29uc3Qgc2NoZWR1bGU6IFNjaGVkdWxlZEJhY2tncm91bmRKb2JbXSA9IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlOiBiYWNrZ3JvdW5kSm9iTm9PcC5zY2hlZHVsZSxcbiAgICAgICAgICAgICAgICAgICAgZnVuYzogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgYmFja2dyb3VuZEpvYk5vT3AuY3JlYXRlQXN5bmMobm9PcEJhY2tncm91bmRKb2JRdWV1ZSwgeyB0aW1lc3RhbXA6IERhdGUubm93KCkgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIHNjaGVkdWxlciA9IG5ldyBTY2hlZHVsZXIoc2NoZWR1bGUpO1xuICAgICAgICAgICAgc2NoZWR1bGVyLnN0YXJ0KCk7XG4gICAgICAgICAgICBjb25zdCB7IHF1ZXVlTmFtZSwgcHJvY2Vzc0FzeW5jIH0gPSBiYWNrZ3JvdW5kSm9iTm9PcDtcbiAgICAgICAgICAgIGNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIocXVldWVOYW1lLCBwcm9jZXNzQXN5bmMsIHsgY29ubmVjdGlvbiB9KTtcblxuICAgICAgICAgICAgcmVkaXNDb25uZWN0aW9ucyA9IFtjb25uZWN0aW9uXTtcbiAgICAgICAgICAgIHdvcmtlcnMgPSBbd29ya2VyXTtcblxuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgT05FX1NFQ09ORF9NUyAqIDE1KSk7XG4gICAgICAgICAgICBleHBlY3QoYXdhaXQgbm9PcEJhY2tncm91bmRKb2JRdWV1ZS5nZXRDb21wbGV0ZWRDb3VudCgpKS50b0VxdWFsKDEpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9