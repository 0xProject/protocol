feea85cdd3cc5e4cb9ea11ebc851022b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:custom-no-magic-numbers
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const chai_1 = require("chai");
const ts_mockito_1 = require("ts-mockito");
const constants_1 = require("../../src/core/constants");
const entities_1 = require("../../src/entities");
const types_1 = require("../../src/entities/types");
const rfq_admin_service_1 = require("../../src/services/rfq_admin_service");
const rfqm_db_utils_1 = require("../../src/utils/rfqm_db_utils");
describe('RFQ Admin Service Logic', () => {
    describe('cleanupJobsAsync', () => {
        const expiry = new utils_1.BigNumber(Date.now() - 1000000).dividedBy(constants_1.ONE_SECOND_MS).decimalPlaces(0);
        const otcOrder = new protocol_utils_1.OtcOrder({
            txOrigin: '0x0000000000000000000000000000000000000000',
            taker: '0x1111111111111111111111111111111111111111',
            maker: '0x2222222222222222222222222222222222222222',
            makerToken: '0x3333333333333333333333333333333333333333',
            takerToken: '0x4444444444444444444444444444444444444444',
            expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(expiry, constants_1.ZERO, expiry),
            chainId: 1337,
            verifyingContract: '0x0000000000000000000000000000000000000000',
        });
        const BASE_JOB = new entities_1.RfqmV2JobEntity({
            chainId: 1337,
            expiry,
            makerUri: '',
            orderHash: '0x00',
            fee: {
                token: '0xToken',
                amount: '100',
                type: 'fixed',
            },
            order: (0, rfqm_db_utils_1.otcOrderToStoredOtcOrder)(otcOrder),
        });
        it('should clean up stuck jobs', async () => {
            const job = new entities_1.RfqmV2JobEntity({ ...BASE_JOB, status: types_1.RfqmJobStatus.PendingProcessing });
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve([]);
            const adminService = new rfq_admin_service_1.RfqAdminService((0, ts_mockito_1.instance)(dbUtilsMock));
            const res = await adminService.cleanupJobsAsync(['0x00']);
            (0, chai_1.expect)(res.modifiedJobs[0]).to.equal(BASE_JOB.orderHash);
            (0, ts_mockito_1.verify)(dbUtilsMock.updateRfqmJobAsync((0, ts_mockito_1.deepEqual)(new entities_1.RfqmV2JobEntity({ ...BASE_JOB, status: types_1.RfqmJobStatus.FailedExpired })))).called();
        });
        it('should not modify unexpired jobs', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                ...BASE_JOB,
                status: types_1.RfqmJobStatus.PendingProcessing,
                expiry: new utils_1.BigNumber(Date.now() + 60000).dividedBy(constants_1.ONE_SECOND_MS).decimalPlaces(0),
            });
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve([]);
            const adminService = new rfq_admin_service_1.RfqAdminService((0, ts_mockito_1.instance)(dbUtilsMock));
            const res = await adminService.cleanupJobsAsync(['0x00']);
            (0, chai_1.expect)(res.unmodifiedJobs[0]).to.equal(BASE_JOB.orderHash);
            (0, ts_mockito_1.verify)(dbUtilsMock.updateRfqmJobAsync((0, ts_mockito_1.anything)())).never();
        });
        it('should not modify resolved jobs', async () => {
            const job = new entities_1.RfqmV2JobEntity({ ...BASE_JOB, status: types_1.RfqmJobStatus.FailedExpired });
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve(job);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve([]);
            const adminService = new rfq_admin_service_1.RfqAdminService((0, ts_mockito_1.instance)(dbUtilsMock));
            const res = await adminService.cleanupJobsAsync(['0x00']);
            (0, chai_1.expect)(res.unmodifiedJobs[0]).to.equal(BASE_JOB.orderHash);
            (0, ts_mockito_1.verify)(dbUtilsMock.updateRfqmJobAsync((0, ts_mockito_1.anything)())).never();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,