{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/services/rfq_admin_service_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/services/rfq_admin_service_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\n\nimport { OtcOrder } from '@0x/protocol-utils';\nimport { BigNumber } from '@0x/utils';\nimport { expect } from 'chai';\nimport { anything, deepEqual, instance, mock, verify, when } from 'ts-mockito';\n\nimport { ONE_SECOND_MS, ZERO } from '../../src/core/constants';\nimport { RfqmV2JobEntity } from '../../src/entities';\nimport { RfqmJobStatus } from '../../src/entities/types';\nimport { RfqAdminService } from '../../src/services/rfq_admin_service';\nimport { otcOrderToStoredOtcOrder, RfqmDbUtils } from '../../src/utils/rfqm_db_utils';\n\ndescribe('RFQ Admin Service Logic', () => {\n    describe('cleanupJobsAsync', () => {\n        const expiry = new BigNumber(Date.now() - 1_000_000).dividedBy(ONE_SECOND_MS).decimalPlaces(0);\n        const otcOrder = new OtcOrder({\n            txOrigin: '0x0000000000000000000000000000000000000000',\n            taker: '0x1111111111111111111111111111111111111111',\n            maker: '0x2222222222222222222222222222222222222222',\n            makerToken: '0x3333333333333333333333333333333333333333',\n            takerToken: '0x4444444444444444444444444444444444444444',\n            expiryAndNonce: OtcOrder.encodeExpiryAndNonce(expiry, ZERO, expiry),\n            chainId: 1337,\n            verifyingContract: '0x0000000000000000000000000000000000000000',\n        });\n        const BASE_JOB = new RfqmV2JobEntity({\n            chainId: 1337,\n            expiry,\n            makerUri: '',\n            orderHash: '0x00',\n            fee: {\n                token: '0xToken',\n                amount: '100',\n                type: 'fixed',\n            },\n            order: otcOrderToStoredOtcOrder(otcOrder),\n        });\n        it('should clean up stuck jobs', async () => {\n            const job = new RfqmV2JobEntity({ ...BASE_JOB, status: RfqmJobStatus.PendingProcessing });\n            const dbUtilsMock = mock(RfqmDbUtils);\n            when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n            when(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(anything())).thenResolve([]);\n            const adminService = new RfqAdminService(instance(dbUtilsMock));\n\n            const res = await adminService.cleanupJobsAsync(['0x00']);\n\n            expect(res.modifiedJobs[0]).to.equal(BASE_JOB.orderHash);\n            verify(\n                dbUtilsMock.updateRfqmJobAsync(\n                    deepEqual(new RfqmV2JobEntity({ ...BASE_JOB, status: RfqmJobStatus.FailedExpired })),\n                ),\n            ).called();\n        });\n        it('should not modify unexpired jobs', async () => {\n            const job = new RfqmV2JobEntity({\n                ...BASE_JOB,\n                status: RfqmJobStatus.PendingProcessing,\n                expiry: new BigNumber(Date.now() + 60_000).dividedBy(ONE_SECOND_MS).decimalPlaces(0),\n            });\n            const dbUtilsMock = mock(RfqmDbUtils);\n            when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n            when(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(anything())).thenResolve([]);\n            const adminService = new RfqAdminService(instance(dbUtilsMock));\n\n            const res = await adminService.cleanupJobsAsync(['0x00']);\n\n            expect(res.unmodifiedJobs[0]).to.equal(BASE_JOB.orderHash);\n            verify(dbUtilsMock.updateRfqmJobAsync(anything())).never();\n        });\n        it('should not modify resolved jobs', async () => {\n            const job = new RfqmV2JobEntity({ ...BASE_JOB, status: RfqmJobStatus.FailedExpired });\n            const dbUtilsMock = mock(RfqmDbUtils);\n            when(dbUtilsMock.findV2JobByOrderHashAsync(anything())).thenResolve(job);\n            when(dbUtilsMock.findV2TransactionSubmissionsByOrderHashAsync(anything())).thenResolve([]);\n            const adminService = new RfqAdminService(instance(dbUtilsMock));\n\n            const res = await adminService.cleanupJobsAsync(['0x00']);\n\n            expect(res.unmodifiedJobs[0]).to.equal(BASE_JOB.orderHash);\n            verify(dbUtilsMock.updateRfqmJobAsync(anything())).never();\n        });\n    });\n});\n"],"version":3}