{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/scheduler.ts","mappings":";;;AAAA,iDAA8D;AAE9D,qCAAkC;AAOlC,MAAa,SAAS;IAYlB,YAA6B,IAA8B;QAA9B,SAAI,GAAJ,IAAI,CAA0B;IAAG,CAAC;IAX/D;;OAEG;IACI,MAAM,CAAC,KAAK,CAAC,aAAa;QAC7B,IAAI;YACA,MAAM,IAAA,gCAAgB,GAAE,CAAC;SAC5B;QAAC,OAAO,KAAK,EAAE;YACZ,eAAM,CAAC,KAAK,CAAC,EAAE,YAAY,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,kCAAkC,CAAC,CAAC;YACtG,MAAM,KAAK,CAAC;SACf;IACL,CAAC;IAGD;;OAEG;IACI,KAAK;QACR,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE;YACzB,IAAI;gBACA,eAAM,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAE,2BAA2B,CAAC,CAAC;gBACrE,0CAA0C;gBAC1C,IAAA,2BAAW,EAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;aAChD;YAAC,OAAO,KAAK,EAAE;gBACZ,eAAM,CAAC,KAAK,CACR,EAAE,QAAQ,EAAE,GAAG,CAAC,QAAQ,EAAE,YAAY,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,EAC3E,iCAAiC,CACpC,CAAC;gBACF,MAAM,KAAK,CAAC;aACf;SACJ;IACL,CAAC;CACJ;AAhCD,8BAgCC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/scheduler.ts"],"sourcesContent":["import { gracefulShutdown, scheduleJob } from 'node-schedule';\n\nimport { logger } from './logger';\n\nexport interface ScheduledBackgroundJob {\n    schedule: string; // cron style string to indicate scheduling frequency\n    func: () => Promise<void>; // function to be scheduled\n}\n\nexport class Scheduler {\n    /**\n     * Shutdown the scheduler.\n     */\n    public static async shutdownAsync(): Promise<void> {\n        try {\n            await gracefulShutdown();\n        } catch (error) {\n            logger.error({ errorMessage: error.message, stack: error.stack }, 'Error shuting down job scheduler');\n            throw error;\n        }\n    }\n    constructor(private readonly jobs: ScheduledBackgroundJob[]) {}\n\n    /**\n     * Schedule all background jobs.\n     */\n    public start(): void {\n        for (const job of this.jobs) {\n            try {\n                logger.info({ schedule: job.schedule }, 'Scheduling background job');\n                // Schedule the job the invoke immediately\n                scheduleJob(job.schedule, job.func).invoke();\n            } catch (error) {\n                logger.error(\n                    { schedule: job.schedule, errorMessage: error.message, stack: error.stack },\n                    'Error scheduling background job',\n                );\n                throw error;\n            }\n        }\n    }\n}\n"],"version":3}