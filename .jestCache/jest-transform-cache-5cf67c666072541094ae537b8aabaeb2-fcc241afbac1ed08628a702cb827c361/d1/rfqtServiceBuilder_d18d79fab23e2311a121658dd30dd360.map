{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfqtServiceBuilder.ts","mappings":";;;AACA,+DAA6E;AAC7E,uDAA8D;AAC9D,iCAAkD;AAClD,mCAAmC;AACnC,+BAA0C;AAC1C,iCAA4C;AAE5C,qCAA2D;AAE3D,sCAUmB;AACnB,iDAAmF;AACnF,yFAAsF;AACtF,yDAAqD;AACrD,yDAAsD;AACtD,iGAA0F;AAE1F,uDAAmD;AACnD,iDAA6C;AAC7C,qDAAiD;AACjD,yEAAoE;AACpE,qDAAiD;AACjD,+DAA0D;AAC1D,iEAAkF;AAElF,2DAAsD;AACtD,iEAA8D;AAC9D,yDAAsD;AACtD,uDAAoD;AAIpD,MAAM,qBAAqB,GAAG,GAAG,CAAC,CAAC,KAAK;AAExC;;;;GAIG;AACI,KAAK,UAAU,sBAAsB,CACxC,mBAAwC,EACxC,eAAgC,EAChC,KAAY;IAEZ,MAAM,oBAAoB,GAAG,eAAK,CAAC,MAAM,CAAC,8BAA8B,EAAE,CAAC,CAAC;IAC5E,MAAM,aAAa,GAAG,eAAK,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,CAAC;IAC5D,MAAM,aAAa,GAAG,IAAI,8BAAa,EAAE,CAAC;IAC1C,MAAM,aAAa,GACf,2BAAkB,KAAK,SAAS,IAAI,2BAAkB,KAAK,SAAS;QAChE,CAAC,CAAC;YACI,6DAA6D;YAC7D,oEAAoE;YACpE,YAAY,EAAE,2BAAmB;YACjC,6DAA6D;YAC7D,oEAAoE;YACpE,aAAa,EAAE,2BAAmB;SACrC;QACH,CAAC,CAAC,SAAS,CAAC;IACpB,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAC9B,mBAAmB,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QACpC,MAAM,EAAE,IAAI,EAAE,iBAAiB,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;QACnD,IAAI,CAAC,iBAAiB,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,0BAA0B,OAAO,iBAAiB,CAAC,CAAC;SACvE;QAED,MAAM,eAAe,GAAG,IAAI,mCAAe,CAAC,aAAa,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;QACrF,MAAM,eAAe,CAAC,eAAe,EAAE,CAAC;QACxC,MAAM,cAAc,GAAG,IAAI,mDAAwB,CAAC,eAAe,EAAE,oBAAoB,EAAE,aAAa,CAAC,CAAC;QAC1G,MAAM,iBAAiB,GAAG,IAAI,uCAAiB,CAAC,oBAAoB,CAAC,CAAC;QACtE,MAAM,iBAAiB,GAAG,IAAA,wDAAmC,EAAC,OAAO,CAAC,CAAC;QACvE,MAAM,cAAc,GAAG,IAAI,kBAAS,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC5E,MAAM,QAAQ,GAAsB,8BAAa,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEnF,MAAM,cAAc,GAAG,IAAI,gCAAc,CAAC,QAAQ,CAAC,CAAC;QACpD,MAAM,kBAAkB,GAAG,IAAI,yCAAkB,CAC7C,QAAQ,EACR,iBAAiB,CAAC,aAAa,EAC/B,cAAc,EACd,cAAc,CACjB,CAAC;QACF,MAAM,oBAAoB,GAAG,IAAI,2CAAoB,CAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC;QAEnF,MAAM,iBAAiB,GAAG,IAAI,2CAAoB,CAAC,cAAc,EAAE,iBAAiB,CAAC,aAAa,CAAC,CAAC;QACpG,MAAM,WAAW,GAAG,IAAI,0BAAW,CAAC,KAAK,CAAC,CAAC;QAC3C,MAAM,2BAA2B,GAAG,IAAI,6DAA2B,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC;QAEpG,MAAM,aAAa,GAAG,gBAAgB,EAAE,CAAC;QAEzC,MAAM,gBAAgB,GAAG,IAAA,yCAAwB,EAAC,iBAAiB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACzF,IAAI,gBAAgB,KAAK,SAAS,EAAE;YAChC,MAAM,IAAI,KAAK,CAAC,aAAa,iBAAiB,CAAC,UAAU,aAAa,OAAO,sBAAsB,CAAC,CAAC;SACxG;QAED,MAAM,mBAAmB,GAAG,IAAA,iDAAsB,EAAC,KAAK,EAAE,aAAa,CAAC,CAAC;QACzE,MAAM,gBAAgB,GAAG,IAAI,mCAAgB,CAAC,aAAa,EAAE,2BAAkB,EAAE,4BAAmB,CAAC,CAAC;QACtG,MAAM,eAAe,GAAG,IAAI,iCAAe,CAAC,eAAK,CAAC,MAAM,EAAE,EAAE,wBAAe,EAAE,KAAK,CAAC,CAAC;QACpF,MAAM,UAAU,GAAG,IAAI,wBAAU,CAC7B,OAAO,EACP,gBAAgB,EAChB,aAAa,EACb,mBAAmB,EACnB,gBAAgB,EAChB,eAAe,EACf,iBAAiB,CAAC,mBAAmB,IAAI,0CAA8B,CAC1E,CAAC;QAEF,OAAO,IAAI,yBAAW,CAClB,OAAO,EACP,eAAe,EACf,cAAc,EACd,iBAAiB,EACjB,iBAAiB,CAAC,mBAAmB,IAAI,0CAA8B,EACvE,kBAAkB,EAClB,oBAAoB,EACpB,iBAAiB,EACjB,UAAU,EACV,iBAAiB,CAAC,eAAe,IAAI,CAAC,EACtC,2BAA2B,EAC3B,WAAW,EACX,aAAa,EACb,iBAAiB,CAAC,aAAa,CAClC,CAAC;IACN,CAAC,CAAC,CACL,CAAC;IACF,OAAO,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAChF,CAAC;AAtFD,wDAsFC;AAED;;GAEG;AACH,SAAgB,qBAAqB,CAAC,UAAkB,qBAAqB;IACzE,OAAO;QACH,SAAS,EAAE,IAAI,YAAS,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,0BAAc,EAAE,CAAC;QACtE,UAAU,EAAE,IAAI,aAAU,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,0BAAc,EAAE,CAAC;QACxE,OAAO;KACV,CAAC;AACN,CAAC;AAND,sDAMC;AAED;;GAEG;AACH,SAAgB,8BAA8B;IAC1C,MAAM,kBAAkB,GAAuB,qBAAqB,EAAE,CAAC;IACvE,IAAI,0BAAiB,KAAK,SAAS,IAAI,uBAAc,KAAK,SAAS,EAAE;QACjE,kBAAkB,CAAC,KAAK,GAAG;YACvB,IAAI,EAAE,0BAAiB;YACvB,IAAI,EAAE,uBAAc;SACvB,CAAC;KACL;IAED,OAAO,kBAAkB,CAAC;AAC9B,CAAC;AAVD,wEAUC;AAED;;GAEG;AACH,SAAS,gBAAgB;IACrB,IAAI,aAAwC,CAAC;IAC7C,IAAI,sBAAa,KAAK,SAAS,EAAE;QAC7B,MAAM,KAAK,GAAG,IAAI,eAAK,CAAC;YACpB,QAAQ,EAAE,QAAQ;YAClB,OAAO,EAAE,sBAAa;SACzB,CAAC,CAAC;QAEH,aAAa,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QACjC,iDAAiD;QACjD,aAAa,CAAC,OAAO,EAAE,CAAC;KAC3B;IACD,OAAO,aAAa,CAAC;AACzB,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfqtServiceBuilder.ts"],"sourcesContent":["import { SupportedProvider } from '@0x/asset-swapper';\nimport { getContractAddressesForChainOrThrow } from '@0x/contract-addresses';\nimport { getTokenMetadataIfExists } from '@0x/token-metadata';\nimport Axios, { AxiosRequestConfig } from 'axios';\nimport { providers } from 'ethers';\nimport { Agent as HttpAgent } from 'http';\nimport { Agent as HttpsAgent } from 'https';\nimport Redis from 'ioredis';\nimport { Kafka, Producer as KafkaProducer } from 'kafkajs';\n\nimport {\n    ALT_RFQ_MM_API_KEY,\n    ALT_RFQ_MM_PROFILE,\n    ChainConfigurations,\n    DEFINED_FI_API_KEY,\n    DEFINED_FI_ENDPOINT,\n    KAFKA_BROKERS,\n    RFQ_PROXY_ADDRESS,\n    RFQ_PROXY_PORT,\n    ZERO_EX_API_KEY,\n} from '../config';\nimport { DEFAULT_MIN_EXPIRY_DURATION_MS, KEEP_ALIVE_TTL } from '../core/constants';\nimport { RefreshingQuoteRequestor } from '../quoteRequestor/RefreshingQuoteRequestor';\nimport { FeeService } from '../services/fee_service';\nimport { RfqtService } from '../services/RfqtService';\nimport { RfqMakerBalanceCacheService } from '../services/rfq_maker_balance_cache_service';\n\nimport { BalanceChecker } from './balance_checker';\nimport { CacheClient } from './cache_client';\nimport { ConfigManager } from './config_manager';\nimport { getGasStationAttendant } from './GasStationAttendantUtils';\nimport { providerUtils } from './provider_utils';\nimport { QuoteServerClient } from './quote_server_client';\nimport { RfqBalanceCheckUtils, RfqBlockchainUtils } from './rfq_blockchain_utils';\nimport { RfqMakerDbUtils } from './rfq_maker_db_utils';\nimport { RfqMakerManager } from './rfq_maker_manager';\nimport { TokenMetadataManager } from './TokenMetadataManager';\nimport { TokenPriceOracle } from './TokenPriceOracle';\nimport { ZeroExApiClient } from './ZeroExApiClient';\n\nexport type RfqtServices = Map<number, RfqtService>;\n\nconst DEFAULT_AXIOS_TIMEOUT = 600; // ms\n\n/**\n * Creates an RFQT Service for each chain present in `ChainConfigurations`.\n *\n * Intended for use by the top-level runners.\n */\nexport async function buildRfqtServicesAsync(\n    chainConfigurations: ChainConfigurations,\n    rfqMakerDbUtils: RfqMakerDbUtils,\n    redis: Redis,\n): Promise<RfqtServices> {\n    const proxiedAxiosInstance = Axios.create(getAxiosRequestConfigWithProxy());\n    const axiosInstance = Axios.create(getAxiosRequestConfig());\n    const configManager = new ConfigManager();\n    const altRfqOptions =\n        ALT_RFQ_MM_API_KEY !== undefined && ALT_RFQ_MM_PROFILE !== undefined\n            ? {\n                  // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                  altRfqApiKey: ALT_RFQ_MM_API_KEY!,\n                  // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                  altRfqProfile: ALT_RFQ_MM_PROFILE!,\n              }\n            : undefined;\n    const services = await Promise.all(\n        chainConfigurations.map(async (chain) => {\n            const { rfqt: rfqtConfiguration, chainId } = chain;\n            if (!rfqtConfiguration) {\n                throw new Error(`RFQt Service for chain ${chainId} does not exist`);\n            }\n\n            const rfqMakerManager = new RfqMakerManager(configManager, rfqMakerDbUtils, chainId);\n            await rfqMakerManager.initializeAsync();\n            const quoteRequestor = new RefreshingQuoteRequestor(rfqMakerManager, proxiedAxiosInstance, altRfqOptions);\n            const quoteServerClient = new QuoteServerClient(proxiedAxiosInstance);\n            const contractAddresses = getContractAddressesForChainOrThrow(chainId);\n            const ethersProvider = new providers.JsonRpcProvider(chain.rpcUrl, chainId);\n            const provider: SupportedProvider = providerUtils.createWeb3Provider(chain.rpcUrl);\n\n            const balanceChecker = new BalanceChecker(provider);\n            const rfqBlockchainUtils = new RfqBlockchainUtils(\n                provider,\n                contractAddresses.exchangeProxy,\n                balanceChecker,\n                ethersProvider,\n            );\n            const tokenMetadataManager = new TokenMetadataManager(chainId, rfqBlockchainUtils);\n\n            const balanceCheckUtils = new RfqBalanceCheckUtils(balanceChecker, contractAddresses.exchangeProxy);\n            const cacheClient = new CacheClient(redis);\n            const rfqMakerBalanceCacheService = new RfqMakerBalanceCacheService(cacheClient, balanceCheckUtils);\n\n            const kafkaProducer = getKafkaProducer();\n\n            const feeTokenMetadata = getTokenMetadataIfExists(contractAddresses.etherToken, chainId);\n            if (feeTokenMetadata === undefined) {\n                throw new Error(`Fee token ${contractAddresses.etherToken} on chain ${chainId} could not be found!`);\n            }\n\n            const gasStationAttendant = getGasStationAttendant(chain, axiosInstance);\n            const tokenPriceOracle = new TokenPriceOracle(axiosInstance, DEFINED_FI_API_KEY, DEFINED_FI_ENDPOINT);\n            const zeroExApiClient = new ZeroExApiClient(Axios.create(), ZERO_EX_API_KEY, chain);\n            const feeService = new FeeService(\n                chainId,\n                feeTokenMetadata,\n                configManager,\n                gasStationAttendant,\n                tokenPriceOracle,\n                zeroExApiClient,\n                rfqtConfiguration.minExpiryDurationMs || DEFAULT_MIN_EXPIRY_DURATION_MS,\n            );\n\n            return new RfqtService(\n                chainId,\n                rfqMakerManager,\n                quoteRequestor,\n                quoteServerClient,\n                rfqtConfiguration.minExpiryDurationMs || DEFAULT_MIN_EXPIRY_DURATION_MS,\n                rfqBlockchainUtils,\n                tokenMetadataManager,\n                contractAddresses,\n                feeService,\n                rfqtConfiguration.feeModelVersion || 0,\n                rfqMakerBalanceCacheService,\n                cacheClient,\n                kafkaProducer,\n                rfqtConfiguration.feeEventTopic,\n            );\n        }),\n    );\n    return new Map(services.map((s, i) => [chainConfigurations[i].chainId, s]));\n}\n\n/**\n * Creates the default Axios Request Config\n */\nexport function getAxiosRequestConfig(timeout: number = DEFAULT_AXIOS_TIMEOUT): AxiosRequestConfig {\n    return {\n        httpAgent: new HttpAgent({ keepAlive: true, timeout: KEEP_ALIVE_TTL }),\n        httpsAgent: new HttpsAgent({ keepAlive: true, timeout: KEEP_ALIVE_TTL }),\n        timeout,\n    };\n}\n\n/**\n * Creates the Axios Request Config with egress proxy\n */\nexport function getAxiosRequestConfigWithProxy(): AxiosRequestConfig {\n    const axiosRequestConfig: AxiosRequestConfig = getAxiosRequestConfig();\n    if (RFQ_PROXY_ADDRESS !== undefined && RFQ_PROXY_PORT !== undefined) {\n        axiosRequestConfig.proxy = {\n            host: RFQ_PROXY_ADDRESS,\n            port: RFQ_PROXY_PORT,\n        };\n    }\n\n    return axiosRequestConfig;\n}\n\n/**\n * Initialize a kafka producer if KAFKA_BROKERS is set\n */\nfunction getKafkaProducer(): KafkaProducer | undefined {\n    let kafkaProducer: KafkaProducer | undefined;\n    if (KAFKA_BROKERS !== undefined) {\n        const kafka = new Kafka({\n            clientId: '0x-api',\n            brokers: KAFKA_BROKERS,\n        });\n\n        kafkaProducer = kafka.producer();\n        // tslint:disable-next-line: no-floating-promises\n        kafkaProducer.connect();\n    }\n    return kafkaProducer;\n}\n"],"version":3}