1654f398ca7a228e5d07e8267243f9e6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAxiosRequestConfigWithProxy = exports.getAxiosRequestConfig = exports.buildRfqtServicesAsync = void 0;
const contract_addresses_1 = require("@0x/contract-addresses");
const token_metadata_1 = require("@0x/token-metadata");
const axios_1 = require("axios");
const ethers_1 = require("ethers");
const http_1 = require("http");
const https_1 = require("https");
const kafkajs_1 = require("kafkajs");
const config_1 = require("../config");
const constants_1 = require("../core/constants");
const RefreshingQuoteRequestor_1 = require("../quoteRequestor/RefreshingQuoteRequestor");
const fee_service_1 = require("../services/fee_service");
const RfqtService_1 = require("../services/RfqtService");
const rfq_maker_balance_cache_service_1 = require("../services/rfq_maker_balance_cache_service");
const balance_checker_1 = require("./balance_checker");
const cache_client_1 = require("./cache_client");
const config_manager_1 = require("./config_manager");
const GasStationAttendantUtils_1 = require("./GasStationAttendantUtils");
const provider_utils_1 = require("./provider_utils");
const quote_server_client_1 = require("./quote_server_client");
const rfq_blockchain_utils_1 = require("./rfq_blockchain_utils");
const rfq_maker_manager_1 = require("./rfq_maker_manager");
const TokenMetadataManager_1 = require("./TokenMetadataManager");
const TokenPriceOracle_1 = require("./TokenPriceOracle");
const ZeroExApiClient_1 = require("./ZeroExApiClient");
const DEFAULT_AXIOS_TIMEOUT = 600; // ms
/**
 * Creates an RFQT Service for each chain present in `ChainConfigurations`.
 *
 * Intended for use by the top-level runners.
 */
async function buildRfqtServicesAsync(chainConfigurations, rfqMakerDbUtils, redis) {
    const proxiedAxiosInstance = axios_1.default.create(getAxiosRequestConfigWithProxy());
    const axiosInstance = axios_1.default.create(getAxiosRequestConfig());
    const configManager = new config_manager_1.ConfigManager();
    const altRfqOptions = config_1.ALT_RFQ_MM_API_KEY !== undefined && config_1.ALT_RFQ_MM_PROFILE !== undefined
        ? {
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            altRfqApiKey: config_1.ALT_RFQ_MM_API_KEY,
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            altRfqProfile: config_1.ALT_RFQ_MM_PROFILE,
        }
        : undefined;
    const services = await Promise.all(chainConfigurations.map(async (chain) => {
        const { rfqt: rfqtConfiguration, chainId } = chain;
        if (!rfqtConfiguration) {
            throw new Error(`RFQt Service for chain ${chainId} does not exist`);
        }
        const rfqMakerManager = new rfq_maker_manager_1.RfqMakerManager(configManager, rfqMakerDbUtils, chainId);
        await rfqMakerManager.initializeAsync();
        const quoteRequestor = new RefreshingQuoteRequestor_1.RefreshingQuoteRequestor(rfqMakerManager, proxiedAxiosInstance, altRfqOptions);
        const quoteServerClient = new quote_server_client_1.QuoteServerClient(proxiedAxiosInstance);
        const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(chainId);
        const ethersProvider = new ethers_1.providers.JsonRpcProvider(chain.rpcUrl, chainId);
        const provider = provider_utils_1.providerUtils.createWeb3Provider(chain.rpcUrl);
        const balanceChecker = new balance_checker_1.BalanceChecker(provider);
        const rfqBlockchainUtils = new rfq_blockchain_utils_1.RfqBlockchainUtils(provider, contractAddresses.exchangeProxy, balanceChecker, ethersProvider);
        const tokenMetadataManager = new TokenMetadataManager_1.TokenMetadataManager(chainId, rfqBlockchainUtils);
        const balanceCheckUtils = new rfq_blockchain_utils_1.RfqBalanceCheckUtils(balanceChecker, contractAddresses.exchangeProxy);
        const cacheClient = new cache_client_1.CacheClient(redis);
        const rfqMakerBalanceCacheService = new rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService(cacheClient, balanceCheckUtils);
        const kafkaProducer = getKafkaProducer();
        const feeTokenMetadata = (0, token_metadata_1.getTokenMetadataIfExists)(contractAddresses.etherToken, chainId);
        if (feeTokenMetadata === undefined) {
            throw new Error(`Fee token ${contractAddresses.etherToken} on chain ${chainId} could not be found!`);
        }
        const gasStationAttendant = (0, GasStationAttendantUtils_1.getGasStationAttendant)(chain, axiosInstance);
        const tokenPriceOracle = new TokenPriceOracle_1.TokenPriceOracle(axiosInstance, config_1.DEFINED_FI_API_KEY, config_1.DEFINED_FI_ENDPOINT);
        const zeroExApiClient = new ZeroExApiClient_1.ZeroExApiClient(axios_1.default.create(), config_1.ZERO_EX_API_KEY, chain);
        const feeService = new fee_service_1.FeeService(chainId, feeTokenMetadata, configManager, gasStationAttendant, tokenPriceOracle, zeroExApiClient, rfqtConfiguration.minExpiryDurationMs || constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS);
        return new RfqtService_1.RfqtService(chainId, rfqMakerManager, quoteRequestor, quoteServerClient, rfqtConfiguration.minExpiryDurationMs || constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS, rfqBlockchainUtils, tokenMetadataManager, contractAddresses, feeService, rfqtConfiguration.feeModelVersion || 0, rfqMakerBalanceCacheService, cacheClient, kafkaProducer, rfqtConfiguration.feeEventTopic);
    }));
    return new Map(services.map((s, i) => [chainConfigurations[i].chainId, s]));
}
exports.buildRfqtServicesAsync = buildRfqtServicesAsync;
/**
 * Creates the default Axios Request Config
 */
function getAxiosRequestConfig(timeout = DEFAULT_AXIOS_TIMEOUT) {
    return {
        httpAgent: new http_1.Agent({ keepAlive: true, timeout: constants_1.KEEP_ALIVE_TTL }),
        httpsAgent: new https_1.Agent({ keepAlive: true, timeout: constants_1.KEEP_ALIVE_TTL }),
        timeout,
    };
}
exports.getAxiosRequestConfig = getAxiosRequestConfig;
/**
 * Creates the Axios Request Config with egress proxy
 */
function getAxiosRequestConfigWithProxy() {
    const axiosRequestConfig = getAxiosRequestConfig();
    if (config_1.RFQ_PROXY_ADDRESS !== undefined && config_1.RFQ_PROXY_PORT !== undefined) {
        axiosRequestConfig.proxy = {
            host: config_1.RFQ_PROXY_ADDRESS,
            port: config_1.RFQ_PROXY_PORT,
        };
    }
    return axiosRequestConfig;
}
exports.getAxiosRequestConfigWithProxy = getAxiosRequestConfigWithProxy;
/**
 * Initialize a kafka producer if KAFKA_BROKERS is set
 */
function getKafkaProducer() {
    let kafkaProducer;
    if (config_1.KAFKA_BROKERS !== undefined) {
        const kafka = new kafkajs_1.Kafka({
            clientId: '0x-api',
            brokers: config_1.KAFKA_BROKERS,
        });
        kafkaProducer = kafka.producer();
        // tslint:disable-next-line: no-floating-promises
        kafkaProducer.connect();
    }
    return kafkaProducer;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,