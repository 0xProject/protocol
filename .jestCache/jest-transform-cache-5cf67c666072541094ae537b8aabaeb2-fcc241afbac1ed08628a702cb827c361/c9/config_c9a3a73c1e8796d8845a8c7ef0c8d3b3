a50b22e62b0bab55ceb09cf1e88b9413
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ENABLE_PROMETHEUS_METRICS = exports.META_TXN_RELAY_EXPECTED_MINED_SEC = exports.RFQ_SIGN_ENDPOINT_TIMEOUT_MS = exports.RFQ_PRICE_ENDPOINT_TIMEOUT_MS = exports.RFQM_MAINTENANCE_MODE = exports.RFQM_WORKER_GROUP_SIZE = exports.RFQM_WORKER_GROUP_INDEX = exports.META_TX_WORKER_MNEMONIC = exports.RFQ_API_KEY_HASH_TO_MAKER_ID = exports.RFQM_MAKER_ID_SET_FOR_OTC_ORDER = exports.RFQT_MAKER_ID_SET_FOR_OTC_ORDER = exports.RFQT_MAKER_ID_SET_FOR_RFQ_ORDER = exports.RFQM_MAKER_ID_SET = exports.TAKER_SPECIFIED_SIDE_ENABLED = exports.REASON_ON_STATUS_ERROR_RESPONSE_ENABLED = exports.ADMIN_API_KEY = exports.RFQM_API_KEY_WHITELIST = exports.ALT_RFQ_MM_PROFILE = exports.ALT_RFQ_MM_API_KEY = exports.ALT_RFQ_MM_ENDPOINT = exports.LOGGER_INCLUDE_TIMESTAMP = exports.BACKGROUND_JOB_TYPES = exports.REDIS_BACKGROUND_JOB_URI = exports.REDIS_URI = exports.SENTRY_TRACES_SAMPLE_RATE = exports.TOKEN_PRICE_ORACLE_TIMEOUT = exports.ZERO_EX_API_KEY = exports.DEFINED_FI_ENDPOINT = exports.DEFINED_FI_API_KEY = exports.SENTRY_DSN = exports.SENTRY_ENVIRONMENT = exports.POSTGRES_READ_REPLICA_URIS = exports.POSTGRES_URI = exports.FEE_RECIPIENT_ADDRESS = exports.KAFKA_BROKERS = exports.CHAIN_ID = exports.HTTP_HEADERS_TIMEOUT = exports.HTTP_KEEP_ALIVE_TIMEOUT = exports.HEALTHCHECK_HTTP_PORT = exports.HTTP_PORT = exports.LOG_LEVEL = exports.RFQ_MAKER_CONFIGS = exports.getMakerIdSetForOrderType = exports.RFQ_MAKER_REFRESH_INTERVAL_MS = exports.getIntegratorIdFromLabel = exports.getApiKeyWhitelistFromIntegratorsAcl = exports.INTEGRATORS_ACL = exports.DEFAULT_FEE_MODEL_CONFIGURATION = exports.FEE_MODEL_CONFIGURATION_MAP = exports.CHAIN_CONFIGURATIONS = void 0;
exports.META_TRANSACTION_SERVICE_RPC_URL = exports.getIntegratorIdForApiKey = exports.getIntegratorByIdOrThrow = exports.defaultHttpServiceConfig = exports.LLR_COOLDOWN_DURATION_SECONDS = exports.ENABLE_LLR_COOLDOWN = exports.RFQ_PROXY_PORT = exports.RFQ_PROXY_ADDRESS = exports.ETH_GAS_STATION_API_URL = exports.PROMETHEUS_PORT = void 0;
const assert_1 = require("@0x/assert");
const contract_addresses_1 = require("@0x/contract-addresses");
const utils_1 = require("@0x/utils");
const fs = require("fs");
const _ = require("lodash");
const validateUUID = require("uuid-validate");
const constants_1 = require("./core/constants");
const schemas_1 = require("./core/schemas");
const pair_utils_1 = require("./core/pair_utils");
const schema_utils_1 = require("./core/schema_utils");
// tslint:disable:no-bitwise
var EnvVarType;
(function (EnvVarType) {
    EnvVarType[EnvVarType["AddressList"] = 0] = "AddressList";
    EnvVarType[EnvVarType["StringList"] = 1] = "StringList";
    EnvVarType[EnvVarType["Integer"] = 2] = "Integer";
    EnvVarType[EnvVarType["Port"] = 3] = "Port";
    EnvVarType[EnvVarType["KeepAliveTimeout"] = 4] = "KeepAliveTimeout";
    EnvVarType[EnvVarType["ChainId"] = 5] = "ChainId";
    EnvVarType[EnvVarType["ETHAddressHex"] = 6] = "ETHAddressHex";
    EnvVarType[EnvVarType["UnitAmount"] = 7] = "UnitAmount";
    EnvVarType[EnvVarType["Rate"] = 8] = "Rate";
    EnvVarType[EnvVarType["Url"] = 9] = "Url";
    EnvVarType[EnvVarType["UrlList"] = 10] = "UrlList";
    EnvVarType[EnvVarType["WhitelistAllTokens"] = 11] = "WhitelistAllTokens";
    EnvVarType[EnvVarType["Boolean"] = 12] = "Boolean";
    EnvVarType[EnvVarType["NonEmptyString"] = 13] = "NonEmptyString";
    EnvVarType[EnvVarType["APIKeys"] = 14] = "APIKeys";
    EnvVarType[EnvVarType["PrivateKeys"] = 15] = "PrivateKeys";
    EnvVarType[EnvVarType["RfqMakerAssetOfferings"] = 16] = "RfqMakerAssetOfferings";
    EnvVarType[EnvVarType["LiquidityProviderRegistry"] = 17] = "LiquidityProviderRegistry";
    EnvVarType[EnvVarType["JsonStringList"] = 18] = "JsonStringList";
})(EnvVarType || (EnvVarType = {}));
/**
 * Configuration which contains information about chains and
 * related resources, like the RPC url.
 */
exports.CHAIN_CONFIGURATIONS = (() => {
    let result;
    try {
        result = resolveEnvVar('CHAIN_CONFIGURATIONS', EnvVarType.JsonStringList, []);
        schema_utils_1.schemaUtils.validateSchema(result, schemas_1.schemas.chainConfigurationsSchema);
    }
    catch (e) {
        throw new Error(`CHAIN_CONFIGURATIONS was defined but is not valid JSON per the schema: ${e}`);
    }
    return result;
})();
/**
 * A nested map providing fee model constants for each token pair.
 * Use chainId as first key and pair key as the second key.
 */
exports.FEE_MODEL_CONFIGURATION_MAP = (() => {
    try {
        const feeModelConfigurations = resolveEnvVar('FEE_MODEL_CONFIGURATIONS', EnvVarType.JsonStringList, []);
        schema_utils_1.schemaUtils.validateSchema(feeModelConfigurations, schemas_1.schemas.feeModelConfigurationsSchema);
        return feeModelConfigurations.reduce((acc, curr) => {
            const { chainId, tokenA, tokenB, marginRakeRatio, tradeSizeBps } = curr;
            if (!acc.has(chainId)) {
                acc.set(chainId, new Map());
            }
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            acc.get(chainId).set((0, pair_utils_1.toPairString)(tokenA, tokenB), { marginRakeRatio, tradeSizeBps });
            return acc;
        }, new Map());
    }
    catch (e) {
        throw new Error(`FEE_MODEL_CONFIGURATIONS was defined but is not valid JSON per the schema: ${e}`);
    }
})();
exports.DEFAULT_FEE_MODEL_CONFIGURATION = { marginRakeRatio: 0, tradeSizeBps: 0 };
/**
 * Configuration which represents taker-integrators of the 0x API. The configuration contains the label, id,
 * api keys, and allowed liquidity sources for each integrator.
 */
exports.INTEGRATORS_ACL = (() => {
    let integrators;
    try {
        integrators = resolveEnvVar('INTEGRATORS_ACL', EnvVarType.JsonStringList, []);
        schema_utils_1.schemaUtils.validateSchema(integrators, schemas_1.schemas.integratorsAclSchema);
    }
    catch (e) {
        throw new Error(`INTEGRATORS_ACL was defined but is not valid JSON per the schema: ${e}`);
    }
    return integrators;
})();
/**
 * Extracts the integrator API keys from the `INTEGRATORS_ACL` environment variable for the provided group type.
 */
const getApiKeyWhitelistFromIntegratorsAcl = (groupType) => {
    return exports.INTEGRATORS_ACL.filter((i) => i[groupType])
        .flatMap((i) => i.apiKeys)
        .sort();
};
exports.getApiKeyWhitelistFromIntegratorsAcl = getApiKeyWhitelistFromIntegratorsAcl;
/**
 * Gets the integrator ID for the provided label.
 */
const getIntegratorIdFromLabel = (label) => {
    for (const integrator of exports.INTEGRATORS_ACL) {
        if (integrator.label === label) {
            return integrator.integratorId;
        }
    }
};
exports.getIntegratorIdFromLabel = getIntegratorIdFromLabel;
exports.RFQ_MAKER_REFRESH_INTERVAL_MS = constants_1.ONE_MINUTE_MS * 1;
/**
 * Generate a set of MakerIds that support a given order type for a given workflow
 */
const getMakerIdSetForOrderType = (orderType, workflow) => {
    const typesField = workflow === 'rfqt' ? 'rfqtOrderTypes' : 'rfqmOrderTypes';
    return exports.RFQ_MAKER_CONFIGS.reduce((acc, curr) => {
        if (orderType === 'any' || curr[typesField].includes(orderType)) {
            acc.add(curr.makerId);
        }
        return acc;
    }, new Set());
};
exports.getMakerIdSetForOrderType = getMakerIdSetForOrderType;
/**
 * A list of type RfqMakerConfig, read from the RFQ_MAKER_CONFIGS env variable
 */
exports.RFQ_MAKER_CONFIGS = (() => {
    try {
        const makerConfigs = resolveEnvVar('RFQ_MAKER_CONFIGS', EnvVarType.JsonStringList, []);
        schema_utils_1.schemaUtils.validateSchema(makerConfigs, schemas_1.schemas.rfqMakerConfigListSchema);
        return makerConfigs;
    }
    catch (e) {
        throw new Error(`RFQ_MAKER_CONFIGS was defined but is not valid JSON per the schema: ${e}`);
    }
})();
// Log level for pino.js
exports.LOG_LEVEL = _.isEmpty(process.env.LOG_LEVEL)
    ? 'info'
    : assertEnvVarType('LOG_LEVEL', process.env.LOG_LEVEL, EnvVarType.NonEmptyString);
// Network port to listen on
exports.HTTP_PORT = _.isEmpty(process.env.HTTP_PORT)
    ? 3000
    : assertEnvVarType('HTTP_PORT', process.env.HTTP_PORT, EnvVarType.Port);
// Network port for the healthcheck service at /healthz, if not provided, it uses the HTTP_PORT value.
exports.HEALTHCHECK_HTTP_PORT = _.isEmpty(process.env.HEALTHCHECK_HTTP_PORT)
    ? exports.HTTP_PORT
    : assertEnvVarType('HEALTHCHECK_HTTP_PORT', process.env.HEALTHCHECK_HTTP_PORT, EnvVarType.Port);
// Number of milliseconds of inactivity the servers waits for additional
// incoming data aftere it finished writing last response before a socket will
// be destroyed.
// Ref: https://nodejs.org/api/http.html#http_server_keepalivetimeout
exports.HTTP_KEEP_ALIVE_TIMEOUT = _.isEmpty(process.env.HTTP_KEEP_ALIVE_TIMEOUT)
    ? 76 * 1000
    : assertEnvVarType('HTTP_KEEP_ALIVE_TIMEOUT', process.env.HTTP_KEEP_ALIVE_TIMEOUT, EnvVarType.KeepAliveTimeout);
// Limit the amount of time the parser will wait to receive the complete HTTP headers.
// NOTE: This value HAS to be higher than HTTP_KEEP_ALIVE_TIMEOUT.
// Ref: https://nodejs.org/api/http.html#http_server_headerstimeout
exports.HTTP_HEADERS_TIMEOUT = _.isEmpty(process.env.HTTP_HEADERS_TIMEOUT)
    ? 77 * 1000
    : assertEnvVarType('HTTP_HEADERS_TIMEOUT', process.env.HTTP_HEADERS_TIMEOUT, EnvVarType.KeepAliveTimeout);
// Default chain id to use when not specified
exports.CHAIN_ID = _.isEmpty(process.env.CHAIN_ID)
    ? contract_addresses_1.ChainId.Kovan
    : assertEnvVarType('CHAIN_ID', process.env.CHAIN_ID, EnvVarType.ChainId);
exports.KAFKA_BROKERS = _.isEmpty(process.env.KAFKA_BROKERS)
    ? undefined
    : assertEnvVarType('KAFKA_BROKERS', process.env.KAFKA_BROKERS, EnvVarType.StringList);
// The fee recipient for orders
exports.FEE_RECIPIENT_ADDRESS = _.isEmpty(process.env.FEE_RECIPIENT_ADDRESS)
    ? constants_1.NULL_ADDRESS
    : assertEnvVarType('FEE_RECIPIENT_ADDRESS', process.env.FEE_RECIPIENT_ADDRESS, EnvVarType.ETHAddressHex);
exports.POSTGRES_URI = _.isEmpty(process.env.POSTGRES_URI)
    ? constants_1.DEFAULT_LOCAL_POSTGRES_URI
    : assertEnvVarType('POSTGRES_URI', process.env.POSTGRES_URI, EnvVarType.Url);
exports.POSTGRES_READ_REPLICA_URIS = _.isEmpty(process.env.POSTGRES_READ_REPLICA_URIS)
    ? undefined
    : assertEnvVarType('POSTGRES_READ_REPLICA_URIS', process.env.POSTGRES_READ_REPLICA_URIS, EnvVarType.UrlList);
// Environment name Sentry used to categorize issues and traces.
exports.SENTRY_ENVIRONMENT = _.isEmpty(process.env.SENTRY_ENVIRONMENT)
    ? constants_1.DEFAULT_SENTRY_ENVIRONMENT
    : assertEnvVarType('SENTRY_ENVIRONMENT', process.env.SENTRY_ENVIRONMENT, EnvVarType.NonEmptyString);
// An Url with client key to access Sentry from client SDK.
exports.SENTRY_DSN = _.isEmpty(process.env.SENTRY_DSN)
    ? undefined
    : assertEnvVarType('SENTRY_DSN', process.env.SENTRY_DSN, EnvVarType.Url);
// API Key for Defined.fi's token price API
exports.DEFINED_FI_API_KEY = _.isEmpty(process.env.DEFINED_FI_API_KEY)
    ? ''
    : assertEnvVarType('DEFINED_FI_API_KEY', process.env.DEFINED_FI_API_KEY, EnvVarType.NonEmptyString);
// Endpoint for Defined.fi's token price API, default to https://api.defined.fi
exports.DEFINED_FI_ENDPOINT = _.isEmpty(process.env.DEFINED_FI_ENDPOINT)
    ? 'https://api.defined.fi'
    : assertEnvVarType('DEFINED_FI_ENDPOINT', process.env.DEFINED_FI_ENDPOINT, EnvVarType.NonEmptyString);
// API Key for 0x API (for ZeroExApiClient)
exports.ZERO_EX_API_KEY = _.isEmpty(process.env.ZERO_EX_API_KEY)
    ? ''
    : assertEnvVarType('ZERO_EX_API_KEY', process.env.ZERO_EX_API_KEY, EnvVarType.NonEmptyString);
// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
exports.TOKEN_PRICE_ORACLE_TIMEOUT = 1000;
// Sampling rate of traces reported to Sentry. Should be a number between 0.0 and 1.0 (inclusive).
exports.SENTRY_TRACES_SAMPLE_RATE = _.isEmpty(process.env.SENTRY_TRACES_SAMPLE_RATE)
    ? 0
    : assertEnvVarType('SENTRY_TRACES_SAMPLE_RATE', process.env.SENTRY_TRACES_SAMPLE_RATE, EnvVarType.Rate);
exports.REDIS_URI = _.isEmpty(process.env.REDIS_URI) ? constants_1.DEFAULT_LOCAL_REDIS_URI : process.env.REDIS_URI;
exports.REDIS_BACKGROUND_JOB_URI = _.isEmpty(process.env.REDIS_BACKGROUND_JOB_URI)
    ? constants_1.DEFAULT_LOCAL_REDIS_URI
    : process.env.REDIS_BACKGROUND_JOB_URI;
exports.BACKGROUND_JOB_TYPES = _.isEmpty(process.env.BACKGROUND_JOB_TYPES)
    ? constants_1.DEFAULT_BACKGROUND_JOB_TYPES
    : process.env.BACKGROUND_JOB_TYPES;
// Should the logger include time field in the output logs, defaults to true.
exports.LOGGER_INCLUDE_TIMESTAMP = _.isEmpty(process.env.LOGGER_INCLUDE_TIMESTAMP)
    ? constants_1.DEFAULT_LOGGER_INCLUDE_TIMESTAMP
    : assertEnvVarType('LOGGER_INCLUDE_TIMESTAMP', process.env.LOGGER_INCLUDE_TIMESTAMP, EnvVarType.Boolean);
exports.ALT_RFQ_MM_ENDPOINT = _.isEmpty(process.env.ALT_RFQ_MM_ENDPOINT)
    ? undefined
    : assertEnvVarType('ALT_RFQ_MM_ENDPOINT', process.env.ALT_RFQ_MM_ENDPOINT, EnvVarType.Url);
exports.ALT_RFQ_MM_API_KEY = _.isEmpty(process.env.ALT_RFQ_MM_API_KEY)
    ? undefined
    : assertEnvVarType('ALT_RFQ_MM_API_KEY', process.env.ALT_RFQ_MM_API_KEY, EnvVarType.NonEmptyString);
exports.ALT_RFQ_MM_PROFILE = _.isEmpty(process.env.ALT_RFQ_MM_PROFILE)
    ? undefined
    : assertEnvVarType('ALT_RFQ_MM_PROFILE', process.env.ALT_RFQ_MM_PROFILE, EnvVarType.NonEmptyString);
exports.RFQM_API_KEY_WHITELIST = new Set((0, exports.getApiKeyWhitelistFromIntegratorsAcl)('rfqm'));
exports.ADMIN_API_KEY = _.isEmpty(process.env.ADMIN_API_KEY)
    ? undefined
    : assertEnvVarType('ADMIN_API_KEY', process.env.ADMIN_API_KEY, EnvVarType.NonEmptyString);
exports.REASON_ON_STATUS_ERROR_RESPONSE_ENABLED = _.isEmpty(process.env.REASON_ON_STATUS_ERROR_RESPONSE_ENABLED)
    ? false
    : assertEnvVarType('REASON_ON_STATUS_ERROR_RESPONSE_ENABLED', process.env.REASON_ON_STATUS_ERROR_RESPONSE_ENABLED, EnvVarType.Boolean);
exports.TAKER_SPECIFIED_SIDE_ENABLED = _.isEmpty(process.env.TAKER_SPECIFIED_SIDE_ENABLED)
    ? false
    : assertEnvVarType('TAKER_SPECIFIED_SIDE_ENABLED', process.env.TAKER_SPECIFIED_SIDE_ENABLED, EnvVarType.Boolean);
exports.RFQM_MAKER_ID_SET = (0, exports.getMakerIdSetForOrderType)('any', 'rfqm');
exports.RFQT_MAKER_ID_SET_FOR_RFQ_ORDER = (0, exports.getMakerIdSetForOrderType)('rfq', 'rfqt');
exports.RFQT_MAKER_ID_SET_FOR_OTC_ORDER = (0, exports.getMakerIdSetForOrderType)('otc', 'rfqt');
exports.RFQM_MAKER_ID_SET_FOR_OTC_ORDER = (0, exports.getMakerIdSetForOrderType)('otc', 'rfqm');
/**
 * A map from RFQ maker's api key hashes to maker ids.
 * Invalid hashes, which appear more than once in the config file and might resolve to different makers, are removed from the result.
 */
exports.RFQ_API_KEY_HASH_TO_MAKER_ID = (() => {
    const hashToIdCount = exports.RFQ_MAKER_CONFIGS.reduce((result, rfqMakerConfig) => {
        rfqMakerConfig.apiKeyHashes.forEach((hash) => result.set(hash, (result.get(hash) || 0) + 1));
        return result;
    }, new Map());
    return exports.RFQ_MAKER_CONFIGS.reduce((result, mm) => {
        mm.apiKeyHashes.forEach((hash) => {
            // Ignore invalid hashes with more than one appearances
            if (hashToIdCount.get(hash) === 1) {
                result.set(hash, mm.makerId);
            }
        });
        return result;
    }, new Map());
})();
exports.META_TX_WORKER_MNEMONIC = _.isEmpty(process.env.META_TX_WORKER_MNEMONIC)
    ? undefined
    : assertEnvVarType('META_TX_WORKER_MNEMONIC', process.env.META_TX_WORKER_MNEMONIC, EnvVarType.NonEmptyString);
exports.RFQM_WORKER_GROUP_INDEX = _.isEmpty(process.env.RFQM_WORKER_GROUP_INDEX)
    ? undefined
    : assertEnvVarType('RFQM_WORKER_GROUP_INDEX', process.env.RFQM_WORKER_GROUP_INDEX, EnvVarType.Integer);
exports.RFQM_WORKER_GROUP_SIZE = _.isEmpty(process.env.RFQM_WORKER_GROUP_SIZE)
    ? undefined
    : assertEnvVarType('RFQM_WORKER_GROUP_SIZE', process.env.RFQM_WORKER_GROUP_SIZE, EnvVarType.Integer);
// If set to TRUE, system health will change to MAINTENANCE and integrators will be told to not
// send RFQM orders.
// tslint:disable-next-line boolean-naming
exports.RFQM_MAINTENANCE_MODE = _.isEmpty(process.env.RFQM_MAINTENANCE_MODE)
    ? false
    : assertEnvVarType('RFQM_MAINTENANCE_MODE', process.env.RFQM_MAINTENANCE_MODE, EnvVarType.Boolean);
exports.RFQ_PRICE_ENDPOINT_TIMEOUT_MS = _.isEmpty(process.env.RFQ_PRICE_ENDPOINT_TIMEOUT_MS)
    ? 1000
    : assertEnvVarType('RFQ_PRICE_ENDPOINT_TIMEOUT_MS', process.env.RFQ_PRICE_ENDPOINT_TIMEOUT_MS, EnvVarType.Integer);
exports.RFQ_SIGN_ENDPOINT_TIMEOUT_MS = _.isEmpty(process.env.RFQ_SIGN_ENDPOINT_TIMEOUT_MS)
    ? 2000
    : assertEnvVarType('RFQ_SIGN_ENDPOINT_TIMEOUT_MS', process.env.RFQ_SIGN_ENDPOINT_TIMEOUT_MS, EnvVarType.Integer);
// The expected time for a meta-txn to be included in a block.
exports.META_TXN_RELAY_EXPECTED_MINED_SEC = _.isEmpty(process.env.META_TXN_RELAY_EXPECTED_MINED_SEC)
    ? constants_1.DEFAULT_EXPECTED_MINED_SEC
    : assertEnvVarType('META_TXN_RELAY_EXPECTED_MINED_SEC', process.env.META_TXN_RELAY_EXPECTED_MINED_SEC, EnvVarType.Integer);
// Whether or not prometheus metrics should be enabled.
// tslint:disable-next-line:boolean-naming
exports.ENABLE_PROMETHEUS_METRICS = _.isEmpty(process.env.ENABLE_PROMETHEUS_METRICS)
    ? false
    : assertEnvVarType('ENABLE_PROMETHEUS_METRICS', process.env.ENABLE_PROMETHEUS_METRICS, EnvVarType.Boolean);
exports.PROMETHEUS_PORT = _.isEmpty(process.env.PROMETHEUS_PORT)
    ? 8080
    : assertEnvVarType('PROMETHEUS_PORT', process.env.PROMETHEUS_PORT, EnvVarType.Port);
// Eth Gas Station URL
exports.ETH_GAS_STATION_API_URL = _.isEmpty(process.env.ETH_GAS_STATION_API_URL)
    ? constants_1.DEFAULT_ETH_GAS_STATION_API_URL
    : assertEnvVarType('ETH_GAS_STATION_API_URL', process.env.ETH_GAS_STATION_API_URL, EnvVarType.Url);
exports.RFQ_PROXY_ADDRESS = _.isEmpty(process.env.RFQ_PROXY_ADDRESS)
    ? undefined
    : assertEnvVarType('RFQ_PROXY_ADDRESS', process.env.RFQ_PROXY_ADDRESS, EnvVarType.NonEmptyString);
exports.RFQ_PROXY_PORT = _.isEmpty(process.env.RFQ_PROXY_PORT)
    ? undefined
    : assertEnvVarType('RFQ_PROXY_PORT', process.env.RFQ_PROXY_PORT, EnvVarType.Port);
// tslint:disable-next-line boolean-naming
exports.ENABLE_LLR_COOLDOWN = _.isEmpty(process.env.ENABLE_LLR_COOLDOWN)
    ? false
    : assertEnvVarType('ENABLE_LLR_COOLDOWN', process.env.ENABLE_LLR_COOLDOWN, EnvVarType.Boolean);
exports.LLR_COOLDOWN_DURATION_SECONDS = _.isEmpty(process.env.LLR_COOLDOWN_DURATION_SECONDS)
    ? 60
    : assertEnvVarType('LLR_COOLDOWN_DURATION_SECONDS', process.env.LLR_COOLDOWN_DURATION_SECONDS, EnvVarType.Integer);
exports.defaultHttpServiceConfig = {
    httpPort: exports.HTTP_PORT,
    healthcheckHttpPort: exports.HEALTHCHECK_HTTP_PORT,
    healthcheckPath: constants_1.HEALTHCHECK_PATH,
    httpKeepAliveTimeout: exports.HTTP_KEEP_ALIVE_TIMEOUT,
    httpHeadersTimeout: exports.HTTP_HEADERS_TIMEOUT,
    enablePrometheusMetrics: exports.ENABLE_PROMETHEUS_METRICS,
    prometheusPort: exports.PROMETHEUS_PORT,
    prometheusPath: constants_1.METRICS_PATH,
};
exports.getIntegratorByIdOrThrow = ((integratorsMap) => (integratorId) => {
    const integrator = integratorsMap.get(integratorId);
    if (!integrator) {
        throw new Error(`Integrator ${integratorId} does not exist.`);
    }
    return integrator;
})(transformIntegratorsAcl(exports.INTEGRATORS_ACL, 'integratorId'));
/**
 * Gets the integrator ID for a given API key. If the API key is not in the configuration, returns `undefined`.
 */
exports.getIntegratorIdForApiKey = ((integratorsMap) => (apiKey) => {
    const integrator = integratorsMap.get(apiKey);
    return integrator === null || integrator === void 0 ? void 0 : integrator.integratorId;
})(transformIntegratorsAcl(exports.INTEGRATORS_ACL, 'apiKeys'));
/**
 * Utility function to transform INTEGRATORS_ACL into a map of apiKey => integrator. The result can
 * be used to optimize the lookup of the integrator when a request comes in with an api key. Lookup complexity
 * becomes O(1) with the map instead of O(# integrators * # api keys) with the array.
 *
 * @param integrators the integrators map from the environment variable
 * @param keyBy either apiKeys (creates map keyed by every API key) or 'integratorId' (integratorId => Integrator)
 */
function transformIntegratorsAcl(integrators, keyBy) {
    const result = new Map();
    integrators.forEach((integrator) => {
        let mapKeys;
        switch (keyBy) {
            case 'apiKeys':
                mapKeys = integrator.apiKeys;
                break;
            case 'integratorId':
                mapKeys = [integrator.integratorId];
                break;
            default:
                throw new Error(`Parameter "${keyBy}" is misconfigured`);
        }
        mapKeys.forEach((apiKey) => {
            result.set(apiKey, integrator);
        });
    });
    return result;
}
/**
 * RPC
 */
exports.META_TRANSACTION_SERVICE_RPC_URL = _.isEmpty(process.env.META_TRANSACTION_SERVICE_RPC_URL)
    ? ''
    : assertEnvVarType('META_TRANSACTION_SERVICE_RPC_URL', process.env.META_TRANSACTION_SERVICE_RPC_URL, EnvVarType.Url);
/**
 * Resolves a config of type T for an Enviornment Variable. Checks:
 *  - If the env variable is undefined, use the hardcoded fallback
 *  - If the env variable points to a filepath, resolve it
 *  - Otherwise, just use the env variable
 *
 * @param envVar - the name of the Environment Variable
 * @param envVarType - the type
 * @param fallback  - A hardcoded fallback value
 * @returns The config
 */
function resolveEnvVar(envVar, envVarType, fallback) {
    const rawEnvVar = process.env[envVar];
    if (rawEnvVar === undefined || _.isEmpty(rawEnvVar)) {
        return fallback;
    }
    // If the enviornment variable points to a file
    if (fs.existsSync(rawEnvVar)) {
        return JSON.parse(fs.readFileSync(rawEnvVar, 'utf8'));
    }
    return assertEnvVarType(envVar, process.env[envVar], envVarType);
}
// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function assertEnvVarType(name, value, expectedType) {
    let returnValue;
    switch (expectedType) {
        case EnvVarType.Port:
            returnValue = parseInt(value, 10);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line no-case-declarations
            const isWithinRange = returnValue >= 0 && returnValue <= 65535;
            if (isNaN(returnValue) || !isWithinRange) {
                throw new Error(`${name} must be between 0 to 65535, found ${value}.`);
            }
            return returnValue;
        case EnvVarType.ChainId:
        case EnvVarType.KeepAliveTimeout:
        case EnvVarType.Integer:
            returnValue = parseInt(value, 10);
            if (isNaN(returnValue)) {
                throw new Error(`${name} must be a valid integer, found ${value}.`);
            }
            return returnValue;
        case EnvVarType.ETHAddressHex:
            assert_1.assert.isETHAddressHex(name, value);
            return value;
        case EnvVarType.Url:
            assert_1.assert.isUri(name, value);
            return value;
        case EnvVarType.UrlList:
            assert_1.assert.isString(name, value);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line no-case-declarations
            const urlList = value.split(',');
            urlList.forEach((url, i) => assert_1.assert.isUri(`${name}[${i}]`, url));
            return urlList;
        case EnvVarType.Boolean:
            return value === 'true';
        case EnvVarType.UnitAmount:
            returnValue = new utils_1.BigNumber(parseFloat(value));
            if (returnValue.isNaN() || returnValue.isNegative()) {
                throw new Error(`${name} must be valid number greater than 0.`);
            }
            return returnValue;
        case EnvVarType.Rate:
            returnValue = parseFloat(value);
            if (returnValue < 0 || returnValue > 1) {
                throw new Error(`${name} must be valid number between 0.0 and 1.0.`);
            }
            return returnValue;
        case EnvVarType.AddressList:
            assert_1.assert.isString(name, value);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line no-case-declarations
            const addressList = value.split(',').map((a) => a.toLowerCase());
            addressList.forEach((a, i) => assert_1.assert.isETHAddressHex(`${name}[${i}]`, a));
            return addressList;
        case EnvVarType.StringList:
            assert_1.assert.isString(name, value);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line no-case-declarations
            const stringList = value.split(',');
            return stringList;
        case EnvVarType.WhitelistAllTokens:
            return '*';
        case EnvVarType.NonEmptyString:
            assert_1.assert.isString(name, value);
            if (value === '') {
                throw new Error(`${name} must be supplied`);
            }
            return value;
        case EnvVarType.APIKeys:
            assert_1.assert.isString(name, value);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line no-case-declarations
            const apiKeys = value.split(',');
            apiKeys.forEach((apiKey) => {
                const isValidUUID = validateUUID(apiKey);
                if (!isValidUUID) {
                    throw new Error(`API Key ${apiKey} isn't UUID compliant`);
                }
            });
            return apiKeys;
        case EnvVarType.JsonStringList:
            assert_1.assert.isString(name, value);
            return JSON.parse(value);
        case EnvVarType.RfqMakerAssetOfferings:
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line no-case-declarations
            const offerings = JSON.parse(value);
            // tslint:disable-next-line:forin
            for (const makerEndpoint in offerings) {
                assert_1.assert.isWebUri('market maker endpoint', makerEndpoint);
                const assetOffering = offerings[makerEndpoint];
                assert_1.assert.isArray(`value in maker endpoint mapping, for index ${makerEndpoint},`, assetOffering);
                assetOffering.forEach((assetPair, i) => {
                    assert_1.assert.isArray(`asset pair array ${i} for maker endpoint ${makerEndpoint}`, assetPair);
                    assert_1.assert.assert(assetPair.length === 2, `asset pair array ${i} for maker endpoint ${makerEndpoint} does not consist of exactly two elements.`);
                    assert_1.assert.isETHAddressHex(`first token address for asset pair ${i} for maker endpoint ${makerEndpoint}`, assetPair[0]);
                    assert_1.assert.isETHAddressHex(`second token address for asset pair ${i} for maker endpoint ${makerEndpoint}`, assetPair[1]);
                    assert_1.assert.assert(assetPair[0] !== assetPair[1], `asset pair array ${i} for maker endpoint ${makerEndpoint} has identical assets`);
                });
            }
            return offerings;
        case EnvVarType.LiquidityProviderRegistry:
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line no-case-declarations
            const registry = JSON.parse(value);
            // tslint:disable-next-line:forin
            for (const liquidityProvider in registry) {
                assert_1.assert.isETHAddressHex('liquidity provider address', liquidityProvider);
                const { tokens } = registry[liquidityProvider];
                assert_1.assert.isArray(`token list for liquidity provider ${liquidityProvider}`, tokens);
                tokens.forEach((token, i) => {
                    assert_1.assert.isETHAddressHex(`address of token ${i} for liquidity provider ${liquidityProvider}`, token);
                });
                // TODO jacob validate gas cost callback in registry
                // assert.isNumber(`gas cost for liquidity provider ${liquidityProvider}`, gasCost);
            }
            return registry;
        default:
            throw new Error(`Unrecognised EnvVarType: ${expectedType} encountered for variable ${name}.`);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,