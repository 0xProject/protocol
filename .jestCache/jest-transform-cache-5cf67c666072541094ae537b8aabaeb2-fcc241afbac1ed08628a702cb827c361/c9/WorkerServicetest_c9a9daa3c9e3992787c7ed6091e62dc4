237b0c8de01e4bf89571c951646f6294
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asset_swapper_1 = require("@0x/asset-swapper");
const contract_addresses_1 = require("@0x/contract-addresses");
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const chai_1 = require("chai");
const ethers_1 = require("ethers");
const _ = require("lodash");
const sqs_producer_1 = require("sqs-producer");
const ts_mockito_1 = require("ts-mockito");
const constants_1 = require("../../src/core/constants");
const entities_1 = require("../../src/entities");
const MetaTransactionSubmissionEntity_1 = require("../../src/entities/MetaTransactionSubmissionEntity");
const types_1 = require("../../src/entities/types");
const logger_1 = require("../../src/logger");
const rfq_maker_balance_cache_service_1 = require("../../src/services/rfq_maker_balance_cache_service");
const WorkerService_1 = require("../../src/services/WorkerService");
const cache_client_1 = require("../../src/utils/cache_client");
const GasStationAttendantEthereum_1 = require("../../src/utils/GasStationAttendantEthereum");
const quote_server_client_1 = require("../../src/utils/quote_server_client");
const rfqm_db_utils_1 = require("../../src/utils/rfqm_db_utils");
const rfq_blockchain_utils_1 = require("../../src/utils/rfq_blockchain_utils");
const rfq_maker_manager_1 = require("../../src/utils/rfq_maker_manager");
const signature_utils_1 = require("../../src/utils/signature_utils");
const SubmissionContext_1 = require("../../src/utils/SubmissionContext");
const constants_2 = require("../constants");
// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
// eslint-disable-next-line @typescript-eslint/no-loss-of-precision
const NEVER_EXPIRES = new utils_1.BigNumber(9999999999999999);
const MOCK_WORKER_REGISTRY_ADDRESS = '0x1023331a469c6391730ff1E2749422CE8873EC38';
const MOCK_GAS_PRICE = new utils_1.BigNumber(100);
const MOCK_MM_URI = 'https://mm-address';
const TEST_RFQM_TRANSACTION_WATCHER_SLEEP_TIME_MS = 50;
const WORKER_FULL_BALANCE_WEI = new utils_1.BigNumber(1).shiftedBy(constants_1.ETH_DECIMALS);
let loggerSpy;
const buildWorkerServiceForUnitTest = (overrides = {}) => {
    const contractAddresses = (0, contract_addresses_1.getContractAddressesForChainOrThrow)(1);
    const quoteRequestorMock = (0, ts_mockito_1.mock)(asset_swapper_1.QuoteRequestor);
    (0, ts_mockito_1.when)(quoteRequestorMock.requestRfqmIndicativeQuotesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
        {
            makerToken: contractAddresses.zrxToken,
            makerAmount: new utils_1.BigNumber(101),
            takerToken: contractAddresses.etherToken,
            takerAmount: new utils_1.BigNumber(100),
            expiry: NEVER_EXPIRES,
            makerUri: MOCK_MM_URI,
        },
    ]);
    const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
    (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(MOCK_GAS_PRICE);
    const gasStationAttendantInstance = (0, ts_mockito_1.instance)(gasStationAttendantMock);
    const rfqBlockchainUtilsMock = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
    (0, ts_mockito_1.when)(rfqBlockchainUtilsMock.getAccountBalanceAsync(MOCK_WORKER_REGISTRY_ADDRESS)).thenResolve(WORKER_FULL_BALANCE_WEI);
    const sqsMock = (0, ts_mockito_1.mock)(sqs_producer_1.Producer);
    (0, ts_mockito_1.when)(sqsMock.queueSize()).thenResolve(0);
    const quoteServerClientMock = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
    const cacheClientMock = (0, ts_mockito_1.mock)(cache_client_1.CacheClient);
    const defaultDbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
    const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
    const rfqMakerManagerMock = (0, ts_mockito_1.mock)(rfq_maker_manager_1.RfqMakerManager);
    return new WorkerService_1.WorkerService(1, overrides.gasStationAttendant || gasStationAttendantInstance, MOCK_WORKER_REGISTRY_ADDRESS, overrides.rfqBlockchainUtils || (0, ts_mockito_1.instance)(rfqBlockchainUtilsMock), overrides.dbUtils || (0, ts_mockito_1.instance)(defaultDbUtilsMock), overrides.quoteServerClient || quoteServerClientMock, TEST_RFQM_TRANSACTION_WATCHER_SLEEP_TIME_MS, overrides.cacheClient || cacheClientMock, overrides.rfqMakerBalanceCacheService || (0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock), overrides.rfqMakerManager || rfqMakerManagerMock, overrides.initialMaxPriorityFeePerGasGwei || 2, overrides.maxFeePerGasGwei || 128, overrides.enableAccessList);
};
const createMeaTrsanctionJobEntity = (opts, id) => {
    const job = new entities_1.MetaTransactionJobEntity(opts);
    job.id = id;
    return job;
};
const createMetaTransactionSubmissionEntity = (opts, id) => {
    const submission = new MetaTransactionSubmissionEntity_1.MetaTransactionSubmissionEntity(opts);
    submission.id = id;
    return submission;
};
const fakeClockMs = 1637722898000;
const fakeOneMinuteAgoS = fakeClockMs / constants_1.ONE_SECOND_MS - 60;
const fakeFiveMinutesLater = fakeClockMs / constants_1.ONE_SECOND_MS + 300;
const maker = '0xbb004090d26845b672f17c6da4b7d162df3bfc5e';
const orderHash = '0x112160fb0933ecde720f63b50b303ce64e52ded702bef78b9c20361f3652a462';
// This sig actually belongs to the maker above
const validEIP712Sig = {
    signatureType: asset_swapper_1.SignatureType.EIP712,
    v: 28,
    r: '0xdc158f7b53b940863bc7b001552a90282e51033f29b73d44a2701bd16faa19d2',
    s: '0x55f6c5470e41b39a5ddeb63c22f8ba1d34748f93265715b9dc4a0f10138985a6',
};
// This is a real signature that had a missing byte
const missingByteSig = {
    r: '0x568b31076e1c65954adb1bccc723718b3460f1b699ce1252f8a83bda0d521005',
    s: '0x0307cc7f4161df812f7e5a651b23dbd33981c0410df0dd820a52f61be7a5ab',
    v: 28,
    signatureType: asset_swapper_1.SignatureType.EthSign,
};
jest.setTimeout(constants_1.ONE_SECOND_MS * 120);
describe('WorkerService', () => {
    beforeEach(() => {
        loggerSpy = (0, ts_mockito_1.spy)(logger_1.logger);
    });
    describe('workerBeforeLogicAsync', () => {
        it('calls `processJobAsync` with the correct arguments', async () => {
            const workerIndex = 0;
            const workerAddress = MOCK_WORKER_REGISTRY_ADDRESS;
            const jobId = 'jobId';
            const metaTransactionJob = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: '0xinputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
            }, jobId);
            const rfqmV2Job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker,
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash,
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress,
            });
            const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
            (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
            const blockchainUtilsMock = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(blockchainUtilsMock.getAccountBalanceAsync(workerAddress)).thenResolve(WORKER_FULL_BALANCE_WEI);
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2UnresolvedJobsAsync(workerAddress, (0, ts_mockito_1.anything)())).thenResolve([rfqmV2Job]);
            (0, ts_mockito_1.when)(dbUtilsMock.findUnresolvedMetaTransactionJobsAsync(workerAddress, (0, ts_mockito_1.anything)())).thenResolve([
                metaTransactionJob,
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(blockchainUtilsMock),
                gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
            });
            const spiedRfqmService = (0, ts_mockito_1.spy)(rfqmService);
            (0, ts_mockito_1.when)(spiedRfqmService.processJobAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve();
            await rfqmService.workerBeforeLogicAsync(workerIndex, workerAddress);
            (0, ts_mockito_1.verify)(spiedRfqmService.processJobAsync(orderHash, workerAddress, 'rfqm_v2_job')).once();
            (0, ts_mockito_1.verify)(spiedRfqmService.processJobAsync(jobId, workerAddress, 'meta_transaction_job')).once();
        });
    });
    describe('processJobAsync', () => {
        it('fails if no rfqm v2 job is found', async () => {
            // Return `undefined` for v1 and v2 job for orderhash
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync('0xorderhash')).thenResolve(null);
            const rfqmService = buildWorkerServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
            await rfqmService.processJobAsync('0xorderhash', '0xworkeraddress');
            (0, chai_1.expect)((0, ts_mockito_1.capture)(loggerSpy.error).last()[0]).to.include({
                errorMessage: 'No job found for identifier',
            });
        });
        it('fails if a worker ends up with a job assigned to a different worker for a rfqm v2 job', async () => {
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.findV2JobByOrderHashAsync('0xorderhash')).thenResolve(new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeOneMinuteAgoS),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeOneMinuteAgoS.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '',
                        makerAmount: '',
                        makerToken: '',
                        taker: '',
                        takerAmount: '',
                        takerToken: '',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingEnqueued,
                updatedAt: new Date(),
                workerAddress: '0xwrongworkeraddress',
            }));
            const rfqmService = buildWorkerServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
            await rfqmService.processJobAsync('0xorderhash', '0xworkeraddress');
            (0, chai_1.expect)((0, ts_mockito_1.capture)(loggerSpy.error).last()[0]).to.include({
                errorMessage: 'Worker was sent a job claimed by a different worker',
            });
        });
        it('fails if no meta-transaction job is found', async () => {
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            const jobId = 'jobId';
            (0, ts_mockito_1.when)(dbUtilsMock.findMetaTransactionJobByIdAsync(jobId)).thenResolve(null);
            const rfqmService = buildWorkerServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
            await rfqmService.processJobAsync(jobId, '0xworkeraddress', 'meta_transaction_job');
            (0, chai_1.expect)((0, ts_mockito_1.capture)(loggerSpy.error).last()[0]).to.include({
                errorMessage: 'No job found for identifier',
            });
        });
        it('fails if a worker ends up with a job assigned to a different worker for a meta-transaction job', async () => {
            const jobId = 'jobId';
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: 'inputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xwrongworkeraddress',
                approval: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL,
                approvalSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
            }, jobId);
            const dbUtilsMock = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(dbUtilsMock.findMetaTransactionJobByIdAsync(jobId)).thenResolve(job);
            const rfqmService = buildWorkerServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(dbUtilsMock) });
            await rfqmService.processJobAsync(jobId, '0xworkeraddress', 'meta_transaction_job');
            (0, chai_1.expect)((0, ts_mockito_1.capture)(loggerSpy.error).last()[0]).to.include({
                errorMessage: 'Worker was sent a job claimed by a different worker',
            });
        });
    });
    describe('processApprovalAndTradeAsync', () => {
        it('throws if non-approval job is supplied to the method for a rfqm v2 job', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const rfqmService = buildWorkerServiceForUnitTest();
            try {
                await rfqmService.processApprovalAndTradeAsync(job, '0xworkeraddress');
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Non-approval job should not be processed by `processApprovalAndTradeAsync`');
            }
        });
        it('should not proceed to trade transaction if the status of approval transaction is not `SucceededConfirmed` for a rfqm v2 job', async () => {
            const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(nowS + 10),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(nowS + 10), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker,
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash,
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
                approval: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL,
                approvalSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
            });
            const mockPresubmitTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                createdAt: new Date(1233),
                from: '0xworkeraddress',
                maxFeePerGas: new utils_1.BigNumber(100000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100),
                nonce: 0,
                orderHash: '0xorderhash',
                status: types_1.RfqmTransactionSubmissionStatus.Submitted,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xpresubmittransactionhash',
                type: types_1.RfqmTransactionSubmissionType.Approval,
            });
            const mockTransactionReceipt = {
                blockHash: '0xblockhash',
                blockNumber: 1,
                byzantium: true,
                confirmations: 3,
                contractAddress: '0xexchangeproxyaddress',
                cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                effectiveGasPrice: ethers_1.BigNumber.from(1000),
                from: '0xworkeraddress',
                gasUsed: ethers_1.BigNumber.from(10000),
                logs: [],
                logsBloom: '',
                status: 0,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xpresubmittransactionhash',
                transactionIndex: 0,
                type: 2,
            };
            const mockMinedBlock = {
                _difficulty: ethers_1.BigNumber.from(2),
                difficulty: 2,
                extraData: '',
                gasLimit: ethers_1.BigNumber.from(1000),
                gasUsed: ethers_1.BigNumber.from(1000),
                hash: '0xblockhash',
                miner: '0xminer',
                nonce: '0x000',
                number: 21,
                parentHash: '0xparentblockhash',
                timestamp: 12345,
                transactions: ['0xpresubmittransactionhash'],
            };
            const mockNonce = 0;
            const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
            (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            // when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(anything())).thenResolve([]);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync((0, ts_mockito_1.anything)(), types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([mockPresubmitTransaction]);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            const mockQuoteServerClient = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            (0, ts_mockito_1.when)(mockQuoteServerClient.signV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(validEIP712Sig);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.isValidOrderSignerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(true);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getTokenBalancesAsync((0, ts_mockito_1.anything)())).thenResolve([new utils_1.BigNumber(1000000000)]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateApprovalCalldataAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve('0xcalldata');
            (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xpresubmittransactionhash']))).thenResolve([
                mockTransactionReceipt,
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs((0, ts_mockito_1.anything)())).thenReturn({
                event: '',
                logIndex: null,
                transactionIndex: null,
                transactionHash: '',
                blockHash: '',
                address: '',
                data: '',
                blockNumber: 0,
                topics: [],
                args: {
                    maker: '',
                    makerToken: '',
                    makerTokenFilledAmount: new utils_1.BigNumber(1234),
                    orderHash: '',
                    pool: '',
                    taker: '',
                    takerToken: '',
                    takerTokenFilledAmount: new utils_1.BigNumber(5),
                },
            });
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                quoteServerClient: (0, ts_mockito_1.instance)(mockQuoteServerClient),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            await rfqmService.processApprovalAndTradeAsync(job, '0xworkeraddress');
            (0, chai_1.expect)(updateRfqmJobCalledArgs[0].status).to.equal(types_1.RfqmJobStatus.PendingProcessing);
            (0, chai_1.expect)(updateRfqmJobCalledArgs[1].status).to.equal(types_1.RfqmJobStatus.PendingLastLookAccepted);
            (0, chai_1.expect)(updateRfqmJobCalledArgs[updateRfqmJobCalledArgs.length - 1].status).to.equal(types_1.RfqmJobStatus.FailedRevertedConfirmed);
            (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.FailedRevertedConfirmed);
        });
        it('should proceed to trade transaction if the status of approval transaction is `SucceededConfirmed` for a rfqm v2 job', async () => {
            const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(nowS + 10),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(nowS + 10), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker,
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash,
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
                approval: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL,
                approvalSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
            });
            const mockPresubmitApprovalTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                createdAt: new Date(1233),
                from: '0xworkeraddress',
                maxFeePerGas: new utils_1.BigNumber(100000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100),
                nonce: 0,
                orderHash: '0xorderhash',
                status: types_1.RfqmTransactionSubmissionStatus.Submitted,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xpresubmittransactionhash',
                type: types_1.RfqmTransactionSubmissionType.Approval,
            });
            const mockPresubmitTradeTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                createdAt: new Date(1233),
                from: '0xworkeraddress',
                maxFeePerGas: new utils_1.BigNumber(100000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100),
                nonce: 0,
                orderHash: '0xorderhash',
                status: types_1.RfqmTransactionSubmissionStatus.Submitted,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xpresubmittransactionhash',
                type: types_1.RfqmTransactionSubmissionType.Trade,
            });
            const mockTransactionReceipt = {
                blockHash: '0xblockhash',
                blockNumber: 1,
                byzantium: true,
                confirmations: 3,
                contractAddress: '0xexchangeproxyaddress',
                cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                effectiveGasPrice: ethers_1.BigNumber.from(1000),
                from: '0xworkeraddress',
                gasUsed: ethers_1.BigNumber.from(10000),
                logs: [],
                logsBloom: '',
                status: 1,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xpresubmittransactionhash',
                transactionIndex: 0,
                type: 2,
            };
            const mockMinedBlock = {
                _difficulty: ethers_1.BigNumber.from(2),
                difficulty: 2,
                extraData: '',
                gasLimit: ethers_1.BigNumber.from(1000),
                gasUsed: ethers_1.BigNumber.from(1000),
                hash: '0xblockhash',
                miner: '0xminer',
                nonce: '0x000',
                number: 21,
                parentHash: '0xparentblockhash',
                timestamp: 12345,
                transactions: ['0xpresubmittransactionhash'],
            };
            const mockNonce = 0;
            const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
            (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            // when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(anything())).thenResolve([]);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync((0, ts_mockito_1.anything)(), types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([mockPresubmitApprovalTransaction]);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync((0, ts_mockito_1.anything)(), types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([mockPresubmitTradeTransaction]);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve([
                mockPresubmitTradeTransaction,
            ]);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            const mockQuoteServerClient = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            (0, ts_mockito_1.when)(mockQuoteServerClient.signV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(validEIP712Sig);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.isValidOrderSignerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(true);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getTokenBalancesAsync((0, ts_mockito_1.anything)())).thenResolve([new utils_1.BigNumber(1000000000)]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(0);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateTakerSignedOtcOrderCallData((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn('0xcalldata');
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateApprovalCalldataAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve('0xcalldata');
            (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xpresubmittransactionhash']))).thenResolve([
                mockTransactionReceipt,
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs((0, ts_mockito_1.anything)())).thenReturn({
                event: '',
                logIndex: null,
                transactionIndex: null,
                transactionHash: '',
                blockHash: '',
                address: '',
                data: '',
                blockNumber: 0,
                topics: [],
                args: {
                    maker: '',
                    makerToken: '',
                    makerTokenFilledAmount: new utils_1.BigNumber(1234),
                    orderHash: '',
                    pool: '',
                    taker: '',
                    takerToken: '',
                    takerTokenFilledAmount: new utils_1.BigNumber(5),
                },
            });
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                quoteServerClient: (0, ts_mockito_1.instance)(mockQuoteServerClient),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            await rfqmService.processApprovalAndTradeAsync(job, '0xworkeraddress');
            (0, chai_1.expect)(updateRfqmJobCalledArgs[0].status).to.equal(types_1.RfqmJobStatus.PendingProcessing);
            (0, chai_1.expect)(updateRfqmJobCalledArgs[1].status).to.equal(types_1.RfqmJobStatus.PendingLastLookAccepted);
            (0, chai_1.expect)(updateRfqmJobCalledArgs[2].status).to.equal(types_1.RfqmJobStatus.PendingSubmitted);
            (0, chai_1.expect)(updateRfqmJobCalledArgs[updateRfqmJobCalledArgs.length - 1].status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
            (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
        });
        it('throws if non-approval job is supplied to the method for a meta-transaction job', async () => {
            const jobId = 'jobId';
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: '0xinputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
            }, jobId);
            const rfqmService = buildWorkerServiceForUnitTest();
            try {
                await rfqmService.processApprovalAndTradeAsync(job, '0xworkeraddress');
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Non-approval job should not be processed by `processApprovalAndTradeAsync`');
            }
        });
        it('should not proceed to trade transaction if the status of approval transaction is not `SucceededConfirmed` for a meta-transaction job', async () => {
            const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
            const jobId = 'jobId';
            const transactionSubmissionId = 'submissionId';
            const inputToken = '0xinputToken';
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(nowS + 600),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken,
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
                approval: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL,
                approvalSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
            }, jobId);
            const mockTransaction = createMetaTransactionSubmissionEntity({
                from: '0xworkeraddress',
                metaTransactionJobId: jobId,
                maxFeePerGas: new utils_1.BigNumber(100000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100),
                nonce: 0,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xsignedtransactionhash',
                type: types_1.RfqmTransactionSubmissionType.Approval,
                status: types_1.RfqmTransactionSubmissionStatus.Submitted,
            }, transactionSubmissionId);
            const mockTransactionReceipt = {
                blockHash: '0xblockhash',
                blockNumber: 1,
                byzantium: true,
                confirmations: 3,
                contractAddress: '0xexchangeproxyaddress',
                cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                effectiveGasPrice: ethers_1.BigNumber.from(1000),
                from: '0xworkeraddress',
                gasUsed: ethers_1.BigNumber.from(10000),
                logs: [],
                logsBloom: '',
                status: 0,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xsignedtransactionhash',
                transactionIndex: 0,
                type: 2,
            };
            const mockMinedBlock = {
                _difficulty: ethers_1.BigNumber.from(2),
                difficulty: 2,
                extraData: '',
                gasLimit: ethers_1.BigNumber.from(1000),
                gasUsed: ethers_1.BigNumber.from(1000),
                hash: '0xblockhash',
                miner: '0xminer',
                nonce: '0x000',
                number: 21,
                parentHash: '0xparentblockhash',
                timestamp: 12345,
                transactions: ['0xsignedtransactionhash'],
            };
            const mockNonce = 0;
            const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
            (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([mockTransaction]);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.isValidOrderSignerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(true);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getTokenBalancesAsync((0, ts_mockito_1.anything)())).thenResolve([new utils_1.BigNumber(1000000000)]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateApprovalCalldataAsync(inputToken, (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve('0xcalldata');
            (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xsignedtransactionhash']))).thenResolve([
                mockTransactionReceipt,
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
            });
            await rfqmService.processApprovalAndTradeAsync(job, '0xworkeraddress');
            (0, chai_1.expect)(updateRfqmJobCalledArgs[0].status).to.equal(types_1.RfqmJobStatus.PendingProcessing);
            (0, chai_1.expect)(updateRfqmJobCalledArgs[updateRfqmJobCalledArgs.length - 1].status).to.equal(types_1.RfqmJobStatus.FailedRevertedConfirmed);
            (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.FailedRevertedConfirmed);
        });
        it('should proceed to trade transaction if the status of approval transaction is `SucceededConfirmed` for a meta-transaction job', async () => {
            const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
            const jobId = 'jobId';
            const transactionSubmissionId1 = 'submissionId1';
            const transactionSubmissionId2 = 'submissionId2';
            const inputToken = '0xinputToken';
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(nowS + 600),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken,
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
                approval: constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL,
                approvalSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
            }, jobId);
            const mockApprovalTransaction = createMetaTransactionSubmissionEntity({
                from: '0xworkeraddress',
                metaTransactionJobId: jobId,
                maxFeePerGas: new utils_1.BigNumber(100000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100),
                nonce: 0,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xsignedtransactionhash1',
                type: types_1.RfqmTransactionSubmissionType.Approval,
                status: types_1.RfqmTransactionSubmissionStatus.Submitted,
            }, transactionSubmissionId1);
            const mockTradeTransaction = createMetaTransactionSubmissionEntity({
                from: '0xworkeraddress',
                metaTransactionJobId: jobId,
                maxFeePerGas: new utils_1.BigNumber(100000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100),
                nonce: 0,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xsignedtransactionhash2',
                type: types_1.RfqmTransactionSubmissionType.Trade,
                status: types_1.RfqmTransactionSubmissionStatus.Submitted,
            }, transactionSubmissionId2);
            const mockApprovalTransactionReceipt = {
                blockHash: '0xblockhash',
                blockNumber: 1,
                byzantium: true,
                confirmations: 3,
                contractAddress: '0xexchangeproxyaddress',
                cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                effectiveGasPrice: ethers_1.BigNumber.from(1000),
                from: '0xworkeraddress',
                gasUsed: ethers_1.BigNumber.from(10000),
                logs: [],
                logsBloom: '',
                status: 1,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xsignedtransactionhash1',
                transactionIndex: 0,
                type: 2,
            };
            const mockTradeTransactionReceipt = {
                blockHash: '0xblockhash',
                blockNumber: 1,
                byzantium: true,
                confirmations: 3,
                contractAddress: '0xexchangeproxyaddress',
                cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                effectiveGasPrice: ethers_1.BigNumber.from(1000),
                from: '0xworkeraddress',
                gasUsed: ethers_1.BigNumber.from(10000),
                logs: [],
                logsBloom: '',
                status: 1,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xsignedtransactionhash2',
                transactionIndex: 0,
                type: 2,
            };
            const mockMinedBlock = {
                _difficulty: ethers_1.BigNumber.from(2),
                difficulty: 2,
                extraData: '',
                gasLimit: ethers_1.BigNumber.from(1000),
                gasUsed: ethers_1.BigNumber.from(1000),
                hash: '0xblockhash',
                miner: '0xminer',
                nonce: '0x000',
                number: 21,
                parentHash: '0xparentblockhash',
                timestamp: 12345,
                transactions: ['0xsignedtransactionhash1', '0xsignedtransactionhash2'],
            };
            const mockNonce = 0;
            const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
            (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([mockApprovalTransaction]);
            (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([mockTradeTransaction]);
            (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId)).thenResolve([mockTradeTransaction]);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.isValidOrderSignerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(true);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getTokenBalancesAsync((0, ts_mockito_1.anything)())).thenResolve([new utils_1.BigNumber(1000000000)]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(0);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateMetaTransactionCallData((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn('0xcalldata');
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateApprovalCalldataAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve('0xcalldata');
            (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xsignedtransactionhash1']))).thenResolve([
                mockApprovalTransactionReceipt,
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xsignedtransactionhash2']))).thenResolve([
                mockTradeTransactionReceipt,
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
            });
            await rfqmService.processApprovalAndTradeAsync(job, '0xworkeraddress');
            (0, chai_1.expect)(updateRfqmJobCalledArgs[0].status).to.equal(types_1.RfqmJobStatus.PendingProcessing);
            (0, chai_1.expect)(updateRfqmJobCalledArgs[1].status).to.equal(types_1.RfqmJobStatus.PendingSubmitted);
            (0, chai_1.expect)(updateRfqmJobCalledArgs[updateRfqmJobCalledArgs.length - 1].status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
            (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
        });
    });
    describe('processTradeAsync', () => {
        it('should process a rfqm v2 job trade successfully', async () => {
            const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(nowS + 10),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(nowS + 10), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker,
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash,
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '0xworkeraddress',
            });
            const mockTransactionRequest = {};
            const mockTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                from: '0xworkeraddress',
                maxFeePerGas: new utils_1.BigNumber(100000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100),
                nonce: 0,
                orderHash: '0xorderhash',
                to: '0xexchangeproxyaddress',
                transactionHash: '0xsignedtransactionhash',
                type: types_1.RfqmTransactionSubmissionType.Trade,
            });
            const mockTransactionReceipt = {
                blockHash: '0xblockhash',
                blockNumber: 1,
                byzantium: true,
                confirmations: 3,
                contractAddress: '0xexchangeproxyaddress',
                cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                effectiveGasPrice: ethers_1.BigNumber.from(1000),
                from: '0xworkeraddress',
                gasUsed: ethers_1.BigNumber.from(10000),
                logs: [],
                logsBloom: '',
                status: 1,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xsignedtransactionhash',
                transactionIndex: 0,
                type: 2,
            };
            const mockMinedBlock = {
                _difficulty: ethers_1.BigNumber.from(2),
                difficulty: 2,
                extraData: '',
                gasLimit: ethers_1.BigNumber.from(1000),
                gasUsed: ethers_1.BigNumber.from(1000),
                hash: '0xblockhash',
                miner: '0xminer',
                nonce: '0x000',
                number: 21,
                parentHash: '0xparentblockhash',
                timestamp: 12345,
                transactions: ['0xpresubmittransactionhash'],
            };
            const mockNonce = 0;
            const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
            (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve([]);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync((0, ts_mockito_1.anything)(), types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([]);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionByTransactionHashAsync('0xsignedtransactionhash')).thenResolve(_.cloneDeep(mockTransaction));
            const mockQuoteServerClient = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            (0, ts_mockito_1.when)(mockQuoteServerClient.signV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(validEIP712Sig);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateTakerSignedOtcOrderCallData((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn('0xcalldata');
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(0);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(100);
            (0, ts_mockito_1.when)(mockBlockchainUtils.transformTxDataToTransactionRequest((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn(mockTransactionRequest);
            (0, ts_mockito_1.when)(mockBlockchainUtils.submitSignedTransactionAsync((0, ts_mockito_1.anything)())).thenResolve('0xsignedtransactionhash');
            (0, ts_mockito_1.when)(mockBlockchainUtils.signTransactionAsync((0, ts_mockito_1.anything)())).thenResolve({
                signedTransaction: 'signedTransaction',
                transactionHash: '0xsignedtransactionhash',
            });
            (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xsignedtransactionhash']))).thenResolve([
                mockTransactionReceipt,
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                quoteServerClient: (0, ts_mockito_1.instance)(mockQuoteServerClient),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            await rfqmService.processTradeAsync(job, '0xworkeraddress');
            (0, chai_1.expect)(updateRfqmJobCalledArgs[0].status).to.equal(types_1.RfqmJobStatus.PendingProcessing);
            (0, chai_1.expect)(updateRfqmJobCalledArgs[1].status).to.equal(types_1.RfqmJobStatus.PendingLastLookAccepted);
            (0, chai_1.expect)(updateRfqmJobCalledArgs[2].status).to.equal(types_1.RfqmJobStatus.PendingSubmitted);
            (0, chai_1.expect)(updateRfqmJobCalledArgs[updateRfqmJobCalledArgs.length - 1].status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
            (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
        });
        it('should process a meta-transaction job trade successfully', async () => {
            const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
            const jobId = 'jobId';
            const transactionSubmissionId = 'submissionId';
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(nowS + 600),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: '0xinputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
            }, jobId);
            const mockTransactionRequest = {};
            const mockTransaction = createMetaTransactionSubmissionEntity({
                from: '0xworkeraddress',
                metaTransactionJobId: jobId,
                maxFeePerGas: new utils_1.BigNumber(100000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100),
                nonce: 0,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xsignedtransactionhash',
                type: types_1.RfqmTransactionSubmissionType.Trade,
            }, transactionSubmissionId);
            const mockTransactionReceipt = {
                blockHash: '0xblockhash',
                blockNumber: 1,
                byzantium: true,
                confirmations: 3,
                contractAddress: '0xexchangeproxyaddress',
                cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                effectiveGasPrice: ethers_1.BigNumber.from(1000),
                from: '0xworkeraddress',
                gasUsed: ethers_1.BigNumber.from(10000),
                logs: [],
                logsBloom: '',
                status: 1,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xsignedtransactionhash',
                transactionIndex: 0,
                type: 2,
            };
            const mockMinedBlock = {
                _difficulty: ethers_1.BigNumber.from(2),
                difficulty: 2,
                extraData: '',
                gasLimit: ethers_1.BigNumber.from(1000),
                gasUsed: ethers_1.BigNumber.from(1000),
                hash: '0xblockhash',
                miner: '0xminer',
                nonce: '0x000',
                number: 21,
                parentHash: '0xparentblockhash',
                timestamp: 12345,
                transactions: ['0xpresubmittransactionhash'],
            };
            const mockNonce = 0;
            const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
            (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId)).thenResolve([]);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([]);
            (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByTransactionHashAsync('0xsignedtransactionhash', types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([_.cloneDeep(mockTransaction)]);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateMetaTransactionCallData((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn('0xcalldata');
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(0);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
            (0, ts_mockito_1.when)(mockBlockchainUtils.transformTxDataToTransactionRequest((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn(mockTransactionRequest);
            (0, ts_mockito_1.when)(mockBlockchainUtils.submitSignedTransactionAsync((0, ts_mockito_1.anything)())).thenResolve('0xsignedtransactionhash');
            (0, ts_mockito_1.when)(mockBlockchainUtils.signTransactionAsync((0, ts_mockito_1.anything)())).thenResolve({
                signedTransaction: 'signedTransaction',
                transactionHash: '0xsignedtransactionhash',
            });
            (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xsignedtransactionhash']))).thenResolve([
                mockTransactionReceipt,
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
            });
            await rfqmService.processTradeAsync(job, '0xworkeraddress');
            (0, chai_1.expect)(updateRfqmJobCalledArgs[0].status).to.equal(types_1.RfqmJobStatus.PendingProcessing);
            (0, chai_1.expect)(updateRfqmJobCalledArgs[1].status).to.equal(types_1.RfqmJobStatus.PendingSubmitted);
            (0, chai_1.expect)(updateRfqmJobCalledArgs[updateRfqmJobCalledArgs.length - 1].status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
            (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
        });
    });
    describe('validate job methods', () => {
        it('should return null for valid, unexpired v2 jobs', () => {
            const fakeInFiveMinutesS = fakeClockMs / constants_1.ONE_SECOND_MS + 360;
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeInFiveMinutesS),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(
                        /* expiry */ new utils_1.BigNumber(fakeInFiveMinutesS), 
                        /* nonceBucket */ new utils_1.BigNumber(21), 
                        /* nonce */ new utils_1.BigNumber(0)).toString(),
                        maker: '',
                        makerAmount: '',
                        makerToken: '',
                        taker: '',
                        takerAmount: '',
                        takerToken: '',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '',
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const result = WorkerService_1.WorkerService.validateRfqmV2Job(job, new Date(fakeClockMs));
            (0, chai_1.expect)(result).to.equal(null);
        });
        it('should return a No Taker Signature status for v2 jobs with no taker signature', () => {
            const fakeInFiveMinutesS = fakeClockMs / constants_1.ONE_SECOND_MS + 360;
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeInFiveMinutesS),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(
                        /* expiry */ new utils_1.BigNumber(fakeInFiveMinutesS), 
                        /* nonceBucket */ new utils_1.BigNumber(21), 
                        /* nonce */ new utils_1.BigNumber(0)).toString(),
                        maker: '',
                        makerAmount: '',
                        makerToken: '',
                        taker: '',
                        takerAmount: '',
                        takerToken: '',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '',
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: null,
                updatedAt: new Date(),
                workerAddress: '',
            });
            const result = WorkerService_1.WorkerService.validateRfqmV2Job(job, new Date(fakeClockMs));
            (0, chai_1.expect)(result).to.equal(types_1.RfqmJobStatus.FailedValidationNoTakerSignature);
        });
        it('should return null for a valid, unexpired meta-transaction job', () => {
            const fakeInFiveMinutesS = fakeClockMs / constants_1.ONE_SECOND_MS + 360;
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeInFiveMinutesS),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: '0xinputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
            }, 'jobId');
            const result = WorkerService_1.WorkerService.validateMetaTransactionJob(job, new Date(fakeClockMs));
            (0, chai_1.expect)(result).to.equal(null);
        });
        it('should return a failed expired status for a meta-transaction job that expires', () => {
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeClockMs / constants_1.ONE_SECOND_MS),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: '0xinputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
            }, 'jobId');
            const result = WorkerService_1.WorkerService.validateMetaTransactionJob(job, new Date(fakeClockMs + 1000000));
            (0, chai_1.expect)(result).to.equal(types_1.RfqmJobStatus.FailedExpired);
        });
    });
    describe('shouldResubmitTransaction', () => {
        it('should return false if new gas price < 10% greater than previous', async () => {
            const gasFees = { maxFeePerGas: new utils_1.BigNumber(100), maxPriorityFeePerGas: new utils_1.BigNumber(10) };
            const newGasPrice = new utils_1.BigNumber(105);
            (0, chai_1.expect)(WorkerService_1.WorkerService.shouldResubmitTransaction(gasFees, newGasPrice)).to.equal(false);
        });
        it('should return true if new gas price is 10% greater than previous', async () => {
            const gasFees = { maxFeePerGas: new utils_1.BigNumber(100), maxPriorityFeePerGas: new utils_1.BigNumber(10) };
            const newGasPrice = new utils_1.BigNumber(110);
            (0, chai_1.expect)(WorkerService_1.WorkerService.shouldResubmitTransaction(gasFees, newGasPrice)).to.equal(true);
        });
        it('should return true if new gas price > 10% greater than previous', async () => {
            const gasFees = { maxFeePerGas: new utils_1.BigNumber(100), maxPriorityFeePerGas: new utils_1.BigNumber(10) };
            const newGasPrice = new utils_1.BigNumber(120);
            (0, chai_1.expect)(WorkerService_1.WorkerService.shouldResubmitTransaction(gasFees, newGasPrice)).to.equal(true);
        });
    });
    describe('checkJobPreprocessingAsync', () => {
        it('should update job staus and throw error if job validation failed for a rfqm v2 job', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeOneMinuteAgoS),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeOneMinuteAgoS.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker,
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash,
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
            });
            try {
                await rfqmService.checkJobPreprocessingAsync(job, new Date(fakeClockMs));
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Job failed validation');
                (0, chai_1.expect)(job.status).to.deep.equal(types_1.RfqmJobStatus.FailedExpired);
            }
        });
        it('should throw error if there is no taker signature for a rfqm v2 job', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker,
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash,
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: null,
                updatedAt: new Date(),
                workerAddress: '',
            });
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
            });
            try {
                await rfqmService.checkJobPreprocessingAsync(job, new Date(fakeClockMs));
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Job failed validation');
                (0, chai_1.expect)(job.status).to.deep.equal(types_1.RfqmJobStatus.FailedValidationNoTakerSignature);
            }
        });
        it('should update job staus to `PendingProcessing` if job status is `PendingEnqueued` for a rfqm v2 job', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker,
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash,
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
            });
            await rfqmService.checkJobPreprocessingAsync(job, new Date(fakeClockMs));
            (0, chai_1.expect)(job.status).to.deep.equal(types_1.RfqmJobStatus.PendingProcessing);
        });
        it('should update job staus and throw error if job validation failed for a meta-transaction job', async () => {
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeOneMinuteAgoS),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: '0xinputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
            }, 'jobId');
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
            });
            try {
                await rfqmService.checkJobPreprocessingAsync(job, new Date(fakeClockMs));
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Job failed validation');
                (0, chai_1.expect)(job.status).to.deep.equal(types_1.RfqmJobStatus.FailedExpired);
            }
        });
        it('should update job staus to `PendingProcessing` if job status is `PendingEnqueued` for a meta-transaction job', async () => {
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: '0xinputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
            }, 'jobId');
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
            });
            await rfqmService.checkJobPreprocessingAsync(job, new Date(fakeClockMs));
            (0, chai_1.expect)(job.status).to.deep.equal(types_1.RfqmJobStatus.PendingProcessing);
        });
    });
    describe('prepareApprovalAsync', () => {
        it('should throw exception if there are submitted transactions but job maker signature is null for a rfqm v2 job', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const mockTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                createdAt: new Date(1233),
                from: '0xworkeraddress',
                maxFeePerGas: new utils_1.BigNumber(100000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100),
                nonce: 0,
                orderHash: '0xorderhash',
                status: types_1.RfqmTransactionSubmissionStatus.Submitted,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xpresubmittransactionhash',
                type: types_1.RfqmTransactionSubmissionType.Trade,
            });
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash', types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([mockTransaction]);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateApprovalCalldataAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(constants_2.MOCK_EXECUTE_META_TRANSACTION_CALLDATA);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
            });
            try {
                await rfqmService.prepareApprovalAsync(job, '0xtoken', constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL, {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                });
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Encountered a job with submissions but no maker signature');
            }
        });
        it('should return generated calldata if there are submitted transactions for a rfqm v2 job', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const mockTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                createdAt: new Date(1233),
                from: '0xworkeraddress',
                maxFeePerGas: new utils_1.BigNumber(100000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100),
                nonce: 0,
                orderHash: '0xorderhash',
                status: types_1.RfqmTransactionSubmissionStatus.Submitted,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xpresubmittransactionhash',
                type: types_1.RfqmTransactionSubmissionType.Trade,
            });
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash', types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([mockTransaction]);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateApprovalCalldataAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(constants_2.MOCK_EXECUTE_META_TRANSACTION_CALLDATA);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
            });
            const calldata = await rfqmService.prepareApprovalAsync(job, '0xtoken', constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL, {
                signatureType: asset_swapper_1.SignatureType.EthSign,
                v: 1,
                r: '',
                s: '',
            });
            (0, chai_1.expect)(calldata).to.deep.equal(constants_2.MOCK_EXECUTE_META_TRANSACTION_CALLDATA);
        });
        it('should throw exception if eth_call failed for a rfqm v2 job', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash', types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([]);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateApprovalCalldataAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(constants_2.MOCK_EXECUTE_META_TRANSACTION_CALLDATA);
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenThrow(new Error('error'));
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
            });
            try {
                await rfqmService.prepareApprovalAsync(job, '0xtoken', constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL, {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                });
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Eth call approval validation failed');
                (0, chai_1.expect)(job.status).to.deep.equal(types_1.RfqmJobStatus.FailedEthCallFailed);
            }
        });
        it('should return correct calldata if there is no submitted transaction for a rfqm v2 job', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash', types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([]);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateApprovalCalldataAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(constants_2.MOCK_EXECUTE_META_TRANSACTION_CALLDATA);
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(10);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
            });
            const calldata = await rfqmService.prepareApprovalAsync(job, '0xtoken', constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL, {
                signatureType: asset_swapper_1.SignatureType.EthSign,
                v: 1,
                r: '',
                s: '',
            });
            (0, chai_1.expect)(calldata).to.deep.equal(constants_2.MOCK_EXECUTE_META_TRANSACTION_CALLDATA);
        });
        it('should return generated calldata if there are submitted transactions for a meta-transaction job', async () => {
            const jobId = 'jobId';
            const transactionSubmissionId = 'submissionId';
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: '0xinputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
            }, jobId);
            const mockTransaction = createMetaTransactionSubmissionEntity({
                from: '0xworkeraddress',
                metaTransactionJobId: jobId,
                maxFeePerGas: new utils_1.BigNumber(100000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100),
                nonce: 0,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xsignedtransactionhash',
                type: types_1.RfqmTransactionSubmissionType.Approval,
            }, transactionSubmissionId);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([mockTransaction]);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateApprovalCalldataAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(constants_2.MOCK_EXECUTE_META_TRANSACTION_CALLDATA);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
            });
            const calldata = await rfqmService.prepareApprovalAsync(job, '0xtoken', constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL, {
                signatureType: asset_swapper_1.SignatureType.EthSign,
                v: 1,
                r: '',
                s: '',
            });
            (0, chai_1.expect)(calldata).to.deep.equal(constants_2.MOCK_EXECUTE_META_TRANSACTION_CALLDATA);
            (0, ts_mockito_1.verify)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).never();
        });
        it('should throw exception if eth_call failed for a meta-transaction job', async () => {
            const jobId = 'jobId';
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: '0xinputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
            }, jobId);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([]);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateApprovalCalldataAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(constants_2.MOCK_EXECUTE_META_TRANSACTION_CALLDATA);
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenThrow(new Error('error'));
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
            });
            try {
                await rfqmService.prepareApprovalAsync(job, '0xtoken', constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL, {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                });
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Eth call approval validation failed');
                (0, chai_1.expect)(job.status).to.deep.equal(types_1.RfqmJobStatus.FailedEthCallFailed);
            }
        });
        it('should return correct calldata if there is no submitted transaction for a meta-transaction job', async () => {
            const jobId = 'jobId';
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: '0xinputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
            }, jobId);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, types_1.RfqmTransactionSubmissionType.Approval)).thenResolve([]);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateApprovalCalldataAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(constants_2.MOCK_EXECUTE_META_TRANSACTION_CALLDATA);
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(10);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
            });
            const calldata = await rfqmService.prepareApprovalAsync(job, '0xtoken', constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL, {
                signatureType: asset_swapper_1.SignatureType.EthSign,
                v: 1,
                r: '',
                s: '',
            });
            (0, chai_1.expect)(calldata).to.deep.equal(constants_2.MOCK_EXECUTE_META_TRANSACTION_CALLDATA);
        });
    });
    describe('preparerfqmV2TradeAsync', () => {
        it('updates the job and throws upon validation failure when `shouldCheckLastLook` is true', async () => {
            const expiredJob = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeOneMinuteAgoS),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeOneMinuteAgoS.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '',
                        makerAmount: '',
                        makerToken: '',
                        taker: '',
                        takerAmount: '',
                        takerToken: '',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const _job = _.cloneDeep(expiredJob);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([]);
            const rfqmService = buildWorkerServiceForUnitTest({ dbUtils: (0, ts_mockito_1.instance)(mockDbUtils) });
            try {
                await rfqmService.preparerfqmV2TradeAsync(expiredJob, '0xworkeraddress', true, new Date(fakeClockMs));
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Job failed validation');
                (0, chai_1.expect)(expiredJob).to.deep.equal({ ..._job, status: types_1.RfqmJobStatus.FailedExpired });
            }
        });
        it('handles a balance check failure', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const _job = _.cloneDeep(job);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([]);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([new utils_1.BigNumber(100)]);
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(5),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            try {
                await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Order failed pre-sign validation');
                (0, chai_1.expect)(updateRfqmJobCalledArgs[0]).to.deep.equal({
                    ..._job,
                    status: types_1.RfqmJobStatus.PendingProcessing,
                });
                (0, chai_1.expect)(updateRfqmJobCalledArgs[1]).to.deep.equal({
                    ..._job,
                    status: types_1.RfqmJobStatus.FailedPresignValidationFailed,
                });
                (0, chai_1.expect)(job).to.deep.equal({
                    ..._job,
                    status: types_1.RfqmJobStatus.FailedPresignValidationFailed,
                });
            }
        });
        it('handles a decline to sign', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const _job = _.cloneDeep(job);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([]);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            const mockQuoteServerClient = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            (0, ts_mockito_1.when)(mockQuoteServerClient.signV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(undefined);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                quoteServerClient: (0, ts_mockito_1.instance)(mockQuoteServerClient),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            try {
                await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Market Maker declined to sign');
                (0, chai_1.expect)(job).to.deep.equal({
                    ..._job,
                    lastLookResult: false,
                    status: types_1.RfqmJobStatus.FailedLastLookDeclined,
                });
            }
        });
        it('handles a signature failure', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const _job = _.cloneDeep(job);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([]);
            const mockQuoteServerClient = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            (0, ts_mockito_1.when)(mockQuoteServerClient.signV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReject(new Error('fake timeout'));
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                quoteServerClient: (0, ts_mockito_1.instance)(mockQuoteServerClient),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            try {
                await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Job failed during market maker sign attempt');
                (0, chai_1.expect)(job).to.deep.equal({
                    ..._job,
                    status: types_1.RfqmJobStatus.FailedSignFailed,
                });
            }
        });
        it('handles signer is not the maker', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker,
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash,
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(orderHash)).thenResolve([]);
            const mockQuoteServerClient = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            const invalidEIP712Sig = _.cloneDeep(validEIP712Sig);
            invalidEIP712Sig.r = '0xdc158f7b53b940863bc7b001552a90282e51033f29b73d44a2701bd16faa19d3';
            (0, ts_mockito_1.when)(mockQuoteServerClient.signV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(invalidEIP712Sig);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                quoteServerClient: (0, ts_mockito_1.instance)(mockQuoteServerClient),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            try {
                await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Invalid order signer address');
                (0, chai_1.expect)(job.status).to.deep.equal(types_1.RfqmJobStatus.FailedSignFailed);
            }
        });
        it('handles an eth_call failure', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker,
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash,
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const _job = _.cloneDeep(job);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(orderHash)).thenResolve([]);
            const mockQuoteServerClient = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            (0, ts_mockito_1.when)(mockQuoteServerClient.signV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(validEIP712Sig);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReject(new Error('fake eth call failure'));
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                quoteServerClient: (0, ts_mockito_1.instance)(mockQuoteServerClient),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            try {
                await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Eth call validation failed');
                (0, chai_1.expect)(job).to.deep.equal({
                    ..._job,
                    lastLookResult: true,
                    makerSignature: validEIP712Sig,
                    status: types_1.RfqmJobStatus.FailedEthCallFailed,
                });
            }
        });
        it('updates market maker signatures missing bytes', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker,
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash,
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const _job = _.cloneDeep(job);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve([]);
            const mockQuoteServerClient = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            (0, ts_mockito_1.when)(mockQuoteServerClient.signV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(missingByteSig);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.isValidOrderSignerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(true);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(0);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateTakerSignedOtcOrderCallData((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn('0xvalidcalldata');
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                quoteServerClient: (0, ts_mockito_1.instance)(mockQuoteServerClient),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));
            (0, chai_1.expect)(job).to.deep.equal({
                ..._job,
                lastLookResult: true,
                makerSignature: (0, signature_utils_1.padSignature)(missingByteSig),
                status: types_1.RfqmJobStatus.PendingLastLookAccepted,
            });
        });
        it('skips the eth_call for jobs with existing submissions', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: true,
                makerUri: 'http://foo.bar',
                makerSignature: validEIP712Sig,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingLastLookAccepted,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const transaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                orderHash,
                to: '0xexchangeproxyaddress',
                from: '0xworkeraddress',
                transactionHash: '0xsignedtransactionhash',
                maxFeePerGas: new utils_1.BigNumber(100000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100),
                nonce: 21,
                type: types_1.RfqmTransactionSubmissionType.Trade,
            });
            const _job = _.cloneDeep(job);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([transaction]);
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            const mockQuoteServerClient = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            (0, ts_mockito_1.when)(mockQuoteServerClient.signV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(validEIP712Sig);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateTakerSignedOtcOrderCallData((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn('0xvalidcalldata');
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                quoteServerClient: (0, ts_mockito_1.instance)(mockQuoteServerClient),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            const calldata = await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));
            (0, chai_1.expect)(job).to.deep.equal({
                ..._job,
                lastLookResult: true,
                makerSignature: validEIP712Sig,
                status: types_1.RfqmJobStatus.PendingLastLookAccepted,
            });
            (0, chai_1.expect)(calldata).to.equal('0xvalidcalldata');
            (0, ts_mockito_1.verify)(mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
        it('lets expired jobs with existing submissions fall through', async () => {
            // If the job isn't in a terminal status but there are existing submissions,
            // `prepareTradeAsync` will let the job continue to the submission step which
            // will allow the worker to check receipts for those submissions.
            const expiredJob = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeOneMinuteAgoS),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: true,
                makerUri: 'http://foo.bar',
                makerSignature: {
                    r: '',
                    s: '',
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                },
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeOneMinuteAgoS.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingSubmitted,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const transaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                orderHash: '0xorderhash',
                to: '0xexchangeproxyaddress',
                from: '0xworkeraddress',
                transactionHash: '0xsignedtransactionhash',
                maxFeePerGas: new utils_1.BigNumber(100000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100),
                nonce: 21,
                type: types_1.RfqmTransactionSubmissionType.Trade,
            });
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([transaction]);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateTakerSignedOtcOrderCallData((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn('0xvalidcalldata');
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
            });
            await rfqmService.preparerfqmV2TradeAsync(expiredJob, '0xworkeraddress', true, new Date(fakeClockMs));
            (0, chai_1.expect)(expiredJob.status).to.equal(types_1.RfqmJobStatus.PendingSubmitted);
        });
        it('successfully prepares a job when checking last look', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker,
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash,
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '0xworkeraddress',
            });
            const _job = _.cloneDeep(job);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(orderHash)).thenResolve([]);
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            const mockQuoteServerClient = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            (0, ts_mockito_1.when)(mockQuoteServerClient.signV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(validEIP712Sig);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(0);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateTakerSignedOtcOrderCallData((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn('0xvalidcalldata');
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                quoteServerClient: (0, ts_mockito_1.instance)(mockQuoteServerClient),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            const calldata = await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));
            (0, chai_1.expect)(job).to.deep.equal({
                ..._job,
                lastLookResult: true,
                makerSignature: validEIP712Sig,
                status: types_1.RfqmJobStatus.PendingLastLookAccepted,
            });
            (0, chai_1.expect)(calldata).to.equal('0xvalidcalldata');
            (0, chai_1.expect)(updateRfqmJobCalledArgs[0]).to.deep.equal({
                ..._job,
                status: types_1.RfqmJobStatus.PendingProcessing,
            });
            (0, chai_1.expect)(updateRfqmJobCalledArgs[1]).to.deep.equal({
                ..._job,
                lastLookResult: true,
                makerSignature: validEIP712Sig,
                status: types_1.RfqmJobStatus.PendingLastLookAccepted,
            });
        });
        it('successfully prepares a job if no last look is necessary', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: true,
                makerUri: 'http://foo.bar',
                makerSignature: validEIP712Sig,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker,
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash,
                status: types_1.RfqmJobStatus.PendingLastLookAccepted,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '0xworkeraddress',
            });
            const _job = _.cloneDeep(job);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(orderHash)).thenResolve([]);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(0);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateTakerSignedOtcOrderCallData((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn('0xvalidcalldata');
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            const spiedRfqmService = (0, ts_mockito_1.spy)(rfqmService);
            const calldata = await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', false, new Date(fakeClockMs));
            (0, chai_1.expect)(job).to.deep.equal(_job);
            (0, chai_1.expect)(calldata).to.equal('0xvalidcalldata');
            (0, ts_mockito_1.verify)(spiedRfqmService.checkJobPreprocessingAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(spiedRfqmService.checkLastLookAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).never();
        });
    });
    describe('prepareMetaTransactionTradeAsync', () => {
        it('updates the job and throws upon validation failure if `shouldValidateJob` is true', async () => {
            const jobId = 'jobId';
            const expiredJob = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeOneMinuteAgoS),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: '0xinputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
            }, jobId);
            const _job = _.cloneDeep(expiredJob);
            const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
            (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId)).thenResolve([]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
            });
            try {
                await rfqmService.prepareMetaTransactionTradeAsync(expiredJob, '0xworkeraddress', true, new Date(fakeClockMs));
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Job failed validation');
                (0, chai_1.expect)(expiredJob).to.deep.equal({ ..._job, status: types_1.RfqmJobStatus.FailedExpired });
            }
        });
        it('handles an eth_call failure', async () => {
            const jobId = 'jobId';
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: '0xinputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
            }, jobId);
            const _job = _.cloneDeep(job);
            const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
            (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId)).thenResolve([]);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenReject(new Error('fake eth call failure'));
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
            });
            try {
                await rfqmService.prepareMetaTransactionTradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Eth call validation failed');
                (0, chai_1.expect)(job).to.deep.equal({
                    ..._job,
                    status: types_1.RfqmJobStatus.FailedEthCallFailed,
                });
            }
        });
        it('skips the eth_call for jobs with existing submissions', async () => {
            const jobId = 'jobId';
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: '0xinputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingProcessing,
                workerAddress: '0xworkeraddress',
            }, jobId);
            const transaction = createMetaTransactionSubmissionEntity({
                from: '0xworkeraddress',
                metaTransactionJobId: jobId,
                maxFeePerGas: new utils_1.BigNumber(100000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100),
                nonce: 0,
                to: '0xexchangeproxyaddress',
                transactionHash: '0xsignedtransactionhash',
                type: types_1.RfqmTransactionSubmissionType.Trade,
            }, 'submissionId');
            const _job = _.cloneDeep(job);
            const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
            (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId)).thenResolve([transaction]);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateMetaTransactionCallData((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn('0xvalidcalldata');
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
            });
            const calldata = await rfqmService.prepareMetaTransactionTradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));
            (0, chai_1.expect)(job).to.deep.equal(_job);
            (0, chai_1.expect)(calldata).to.equal('0xvalidcalldata');
            (0, ts_mockito_1.verify)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).never();
        });
        it('successfully prepares a job if `shouldValidateJob` is true', async () => {
            const jobId = 'jobId';
            const job = createMeaTrsanctionJobEntity({
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: new utils_1.BigNumber(0),
                    token: '',
                    type: 'fixed',
                },
                inputToken: '0xinputToken',
                inputTokenAmount: new utils_1.BigNumber(10),
                integratorId: '0xintegrator',
                metaTransaction: constants_2.MOCK_META_TRANSACTION,
                metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                minOutputTokenAmount: new utils_1.BigNumber(10),
                outputToken: '0xoutputToken',
                takerAddress: '0xtakerAddress',
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                status: types_1.RfqmJobStatus.PendingEnqueued,
                workerAddress: '0xworkeraddress',
            }, jobId);
            const _job = _.cloneDeep(job);
            const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
            (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId)).thenResolve([]);
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(0);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateMetaTransactionCallData((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn('0xvalidcalldata');
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
            });
            const calldata = await rfqmService.prepareMetaTransactionTradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));
            (0, chai_1.expect)(job).to.deep.equal({
                ..._job,
                status: types_1.RfqmJobStatus.PendingProcessing,
            });
            (0, chai_1.expect)(calldata).to.equal('0xvalidcalldata');
            (0, chai_1.expect)(updateRfqmJobCalledArgs[0]).to.deep.equal({
                ..._job,
                status: types_1.RfqmJobStatus.PendingProcessing,
            });
        });
    });
    describe('checkLastLookAsync', () => {
        it('should call `getMinOfBalancesAndAllowancesAsync` when `shouldCheckAllowance` is true and throws when balance check fails', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingProcessing,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const _job = _.cloneDeep(job);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([new utils_1.BigNumber(100)]);
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(5),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            try {
                await rfqmService.checkLastLookAsync(job, '0xworkeraddress', true);
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Order failed pre-sign validation');
                (0, chai_1.expect)(updateRfqmJobCalledArgs[0]).to.deep.equal({
                    ..._job,
                    status: types_1.RfqmJobStatus.FailedPresignValidationFailed,
                });
                (0, chai_1.expect)(job).to.deep.equal({
                    ..._job,
                    status: types_1.RfqmJobStatus.FailedPresignValidationFailed,
                });
                (0, ts_mockito_1.verify)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).once();
                (0, ts_mockito_1.verify)(mockBlockchainUtils.getTokenBalancesAsync((0, ts_mockito_1.anything)())).never();
            }
        });
        it('should call `getTokenBalancesAsync` when `shouldCheckAllowance` is false and throws when balance check fails', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingProcessing,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const _job = _.cloneDeep(job);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getTokenBalancesAsync((0, ts_mockito_1.anything)())).thenResolve([new utils_1.BigNumber(100)]);
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(5),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            try {
                await rfqmService.checkLastLookAsync(job, '0xworkeraddress', false);
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Order failed pre-sign validation');
                (0, chai_1.expect)(updateRfqmJobCalledArgs[0]).to.deep.equal({
                    ..._job,
                    status: types_1.RfqmJobStatus.FailedPresignValidationFailed,
                });
                (0, chai_1.expect)(job).to.deep.equal({
                    ..._job,
                    status: types_1.RfqmJobStatus.FailedPresignValidationFailed,
                });
                (0, ts_mockito_1.verify)(mockBlockchainUtils.getTokenBalancesAsync((0, ts_mockito_1.anything)())).once();
                (0, ts_mockito_1.verify)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).never();
            }
        });
        it('should throw when taker signature is not present', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingProcessing,
                takerSignature: null,
                updatedAt: new Date(),
                workerAddress: '',
            });
            const _job = _.cloneDeep(job);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            try {
                await rfqmService.checkLastLookAsync(job, '0xworkeraddress', true);
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Order failed pre-sign validation due to empty takerSignature');
                (0, chai_1.expect)(updateRfqmJobCalledArgs[0]).to.deep.equal({
                    ..._job,
                    status: types_1.RfqmJobStatus.FailedPresignValidationFailed,
                });
                (0, chai_1.expect)(job).to.deep.equal({
                    ..._job,
                    status: types_1.RfqmJobStatus.FailedPresignValidationFailed,
                });
            }
        });
        it('handles decline to sign', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const _job = _.cloneDeep(job);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([]);
            (0, ts_mockito_1.when)(mockDbUtils.findV2QuoteByOrderHashAsync('0xorderhash')).thenResolve(new entities_1.RfqmV2QuoteEntity({
                createdAt: new Date(),
                chainId: job.chainId,
                fee: job.fee,
                makerUri: job.makerUri,
                order: job.order,
                orderHash: job.orderHash,
            }));
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            const mockQuoteServerClient = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            (0, ts_mockito_1.when)(mockQuoteServerClient.signV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(undefined);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const mockCacheClient = (0, ts_mockito_1.mock)(cache_client_1.CacheClient);
            const mockRfqMakerManager = (0, ts_mockito_1.mock)(rfq_maker_manager_1.RfqMakerManager);
            (0, ts_mockito_1.when)(mockRfqMakerManager.findMakerIdWithRfqmUri(job.makerUri)).thenReturn('makerId1');
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                quoteServerClient: (0, ts_mockito_1.instance)(mockQuoteServerClient),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
                rfqMakerManager: (0, ts_mockito_1.instance)(mockRfqMakerManager),
                cacheClient: (0, ts_mockito_1.instance)(mockCacheClient),
            });
            try {
                await rfqmService.checkLastLookAsync(job, '0xworkeraddress', true);
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Market Maker declined to sign');
                (0, chai_1.expect)(job).to.deep.equal({
                    ..._job,
                    lastLookResult: false,
                    status: types_1.RfqmJobStatus.FailedLastLookDeclined,
                });
                (0, ts_mockito_1.verify)(mockCacheClient.addMakerToCooldownAsync('makerId1', (0, ts_mockito_1.anything)(), job.chainId, job.order.order.makerToken, job.order.order.takerToken)).once();
                (0, ts_mockito_1.verify)(mockDbUtils.writeV2LastLookRejectionCooldownAsync('makerId1', job.chainId, job.order.order.makerToken, job.order.order.takerToken, (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), job.orderHash)).once();
            }
        });
        it('handles a signature failure', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker: '0xmaker',
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash: '0xorderhash',
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const _job = _.cloneDeep(job);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([]);
            const mockQuoteServerClient = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            (0, ts_mockito_1.when)(mockQuoteServerClient.signV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReject(new Error('fake timeout'));
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                quoteServerClient: (0, ts_mockito_1.instance)(mockQuoteServerClient),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            try {
                await rfqmService.checkLastLookAsync(job, '0xworkeraddress', true);
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Job failed during market maker sign attempt');
                (0, chai_1.expect)(job).to.deep.equal({
                    ..._job,
                    status: types_1.RfqmJobStatus.FailedSignFailed,
                });
            }
        });
        it('handles signer is not the maker', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker,
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash,
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            const updateRfqmJobCalledArgs = [];
            (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
            });
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(orderHash)).thenResolve([]);
            const mockQuoteServerClient = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            const invalidEIP712Sig = _.cloneDeep(validEIP712Sig);
            invalidEIP712Sig.r = '0xdc158f7b53b940863bc7b001552a90282e51033f29b73d44a2701bd16faa19d3';
            (0, ts_mockito_1.when)(mockQuoteServerClient.signV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(invalidEIP712Sig);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                quoteServerClient: (0, ts_mockito_1.instance)(mockQuoteServerClient),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            try {
                await rfqmService.checkLastLookAsync(job, '0xworkeraddress', true);
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('Invalid order signer address');
                (0, chai_1.expect)(job.status).to.deep.equal(types_1.RfqmJobStatus.FailedSignFailed);
            }
        });
        it('updates market maker signatures missing bytes', async () => {
            const job = new entities_1.RfqmV2JobEntity({
                affiliateAddress: '',
                chainId: 1,
                createdAt: new Date(),
                expiry: new utils_1.BigNumber(fakeFiveMinutesLater),
                fee: {
                    amount: '0',
                    token: '',
                    type: 'fixed',
                },
                integratorId: '',
                lastLookResult: null,
                makerUri: 'http://foo.bar',
                makerSignature: null,
                order: {
                    order: {
                        chainId: '1',
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(fakeFiveMinutesLater.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                        maker,
                        makerAmount: '1000000',
                        makerToken: '0xmakertoken',
                        taker: '0xtaker',
                        takerAmount: '10000000',
                        takerToken: '0xtakertoken',
                        txOrigin: '',
                        verifyingContract: '',
                    },
                    type: types_1.RfqmOrderTypes.Otc,
                },
                orderHash,
                status: types_1.RfqmJobStatus.PendingEnqueued,
                takerSignature: {
                    signatureType: asset_swapper_1.SignatureType.EthSign,
                    v: 1,
                    r: '',
                    s: '',
                },
                updatedAt: new Date(),
                workerAddress: '',
            });
            const _job = _.cloneDeep(job);
            const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
            (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync((0, ts_mockito_1.anything)())).thenResolve([]);
            const mockQuoteServerClient = (0, ts_mockito_1.mock)(quote_server_client_1.QuoteServerClient);
            (0, ts_mockito_1.when)(mockQuoteServerClient.signV2Async((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(missingByteSig);
            const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
            (0, ts_mockito_1.when)(mockBlockchainUtils.isValidOrderSignerAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(true);
            (0, ts_mockito_1.when)(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync((0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve(0);
            (0, ts_mockito_1.when)(mockBlockchainUtils.generateTakerSignedOtcOrderCallData((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn('0xvalidcalldata');
            const mockRfqMakerBalanceCacheService = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenResolve([
                new utils_1.BigNumber(1000000000),
            ]);
            const rfqmService = buildWorkerServiceForUnitTest({
                dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                quoteServerClient: (0, ts_mockito_1.instance)(mockQuoteServerClient),
                rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                rfqMakerBalanceCacheService: (0, ts_mockito_1.instance)(mockRfqMakerBalanceCacheService),
            });
            await rfqmService.checkLastLookAsync(job, '0xworkeraddress', true);
            (0, chai_1.expect)(job).to.deep.equal({
                ..._job,
                lastLookResult: true,
                makerSignature: (0, signature_utils_1.padSignature)(missingByteSig),
                status: types_1.RfqmJobStatus.PendingLastLookAccepted,
            });
        });
    });
    describe('submitToChainAsync', () => {
        describe('kind is `rfqm_v2_job`', () => {
            it('submits a transaction successfully when there is no previous transaction', async () => {
                const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
                const job = new entities_1.RfqmV2JobEntity({
                    affiliateAddress: '',
                    chainId: 1,
                    createdAt: new Date(),
                    expiry: new utils_1.BigNumber(nowS + 600),
                    fee: {
                        amount: '0',
                        token: '',
                        type: 'fixed',
                    },
                    integratorId: '',
                    lastLookResult: true,
                    makerUri: 'http://foo.bar',
                    order: {
                        order: {
                            chainId: '1',
                            expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(nowS + 600), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                            maker: '0xmaker',
                            makerAmount: '1000000',
                            makerToken: '0xmakertoken',
                            taker: '0xtaker',
                            takerAmount: '10000000',
                            takerToken: '0xtakertoken',
                            txOrigin: '',
                            verifyingContract: '',
                        },
                        type: types_1.RfqmOrderTypes.Otc,
                    },
                    orderHash: '0xorderhash',
                    status: types_1.RfqmJobStatus.PendingLastLookAccepted,
                    updatedAt: new Date(),
                    workerAddress: '',
                });
                const mockTransactionRequest = {};
                const mockTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                    from: '0xworkeraddress',
                    maxFeePerGas: new utils_1.BigNumber(100000),
                    maxPriorityFeePerGas: new utils_1.BigNumber(100),
                    nonce: 0,
                    orderHash: '0xorderhash',
                    to: '0xexchangeproxyaddress',
                    transactionHash: '0xsignedtransactionhash',
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                });
                const mockTransactionReceipt = {
                    to: '0xto',
                    from: '0xfrom',
                    contractAddress: '0xexchangeproxyaddress',
                    transactionIndex: 0,
                    gasUsed: ethers_1.BigNumber.from(10000),
                    logsBloom: '',
                    blockHash: '0xblockhash',
                    transactionHash: '0xsignedtransactionhash',
                    logs: [],
                    blockNumber: 1,
                    confirmations: 3,
                    cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                    effectiveGasPrice: ethers_1.BigNumber.from(1000),
                    byzantium: true,
                    type: 2,
                    status: 1,
                };
                const mockNonce = 0;
                const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
                (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
                const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash', types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([]);
                const updateRfqmJobCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                    updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
                });
                const writeV2RfqmTransactionSubmissionToDbCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.writeV2RfqmTransactionSubmissionToDbAsync((0, ts_mockito_1.anything)())).thenCall(async (transactionArg) => {
                    writeV2RfqmTransactionSubmissionToDbCalledArgs.push(_.cloneDeep(transactionArg));
                    return _.cloneDeep(mockTransaction);
                });
                (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionByTransactionHashAsync('0xsignedtransactionhash')).thenResolve(_.cloneDeep(mockTransaction));
                const updateRfqmTransactionSubmissionsCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmTransactionSubmissionsAsync((0, ts_mockito_1.anything)())).thenCall(async (tranactionArg) => {
                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));
                });
                const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
                (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(100);
                (0, ts_mockito_1.when)(mockBlockchainUtils.transformTxDataToTransactionRequest((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn(mockTransactionRequest);
                (0, ts_mockito_1.when)(mockBlockchainUtils.signTransactionAsync((0, ts_mockito_1.anything)())).thenResolve({
                    signedTransaction: 'signedTransaction',
                    transactionHash: '0xsignedtransactionhash',
                });
                (0, ts_mockito_1.when)(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');
                (0, ts_mockito_1.when)(mockBlockchainUtils.submitSignedTransactionAsync((0, ts_mockito_1.anything)())).thenResolve('0xsignedtransactionhash');
                (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xsignedtransactionhash']))).thenResolve([
                    mockTransactionReceipt,
                ]);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs((0, ts_mockito_1.anything)())).thenReturn({
                    event: '',
                    logIndex: null,
                    transactionIndex: null,
                    transactionHash: '',
                    blockHash: '',
                    address: '',
                    data: '',
                    blockNumber: 0,
                    topics: [],
                    args: {
                        maker: '',
                        makerToken: '',
                        makerTokenFilledAmount: new utils_1.BigNumber(1234),
                        orderHash: '',
                        pool: '',
                        taker: '',
                        takerToken: '',
                        takerTokenFilledAmount: new utils_1.BigNumber(5),
                    },
                });
                const rfqmService = buildWorkerServiceForUnitTest({
                    dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                    gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
                    rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                });
                const callback = async (newSubmissionContextStatus, oldSubmissionContextStatus) => {
                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {
                        const newJobStatus = SubmissionContext_1.SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);
                        job.status = newJobStatus;
                        await mockDbUtils.updateRfqmJobAsync(job);
                    }
                };
                await rfqmService.submitToChainAsync({
                    kind: job.kind,
                    to: '0xexchangeproxyaddress',
                    from: '0xworkeraddress',
                    calldata: '0xcalldata',
                    expiry: job.expiry,
                    identifier: job.orderHash,
                    submissionType: types_1.RfqmTransactionSubmissionType.Trade,
                    onSubmissionContextStatusUpdate: callback,
                });
                (0, ts_mockito_1.verify)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)()));
                // eth_createAccessList should not be called when not enabled
                (0, ts_mockito_1.verify)(mockBlockchainUtils.createAccessListForAsync((0, ts_mockito_1.anything)())).never();
                (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
                (0, chai_1.expect)(writeV2RfqmTransactionSubmissionToDbCalledArgs[0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.Presubmit);
                (0, chai_1.expect)(updateRfqmTransactionSubmissionsCalledArgs[0][0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.Submitted);
                (0, chai_1.expect)(updateRfqmTransactionSubmissionsCalledArgs[1][0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed);
            });
            it("ignores an existing PRESUBMIT transaction which isn't found in the mempool or on chain", async () => {
                const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
                const job = new entities_1.RfqmV2JobEntity({
                    affiliateAddress: '',
                    chainId: 1,
                    createdAt: new Date(),
                    expiry: new utils_1.BigNumber(nowS + 600),
                    fee: {
                        amount: '0',
                        token: '',
                        type: 'fixed',
                    },
                    integratorId: '',
                    lastLookResult: true,
                    makerUri: 'http://foo.bar',
                    order: {
                        order: {
                            chainId: '1',
                            expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(nowS + 600), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                            maker: '0xmaker',
                            makerAmount: '1000000',
                            makerToken: '0xmakertoken',
                            taker: '0xtaker',
                            takerAmount: '10000000',
                            takerToken: '0xtakertoken',
                            txOrigin: '',
                            verifyingContract: '',
                        },
                        type: types_1.RfqmOrderTypes.Otc,
                    },
                    orderHash: '0xorderhash',
                    status: types_1.RfqmJobStatus.PendingLastLookAccepted,
                    updatedAt: new Date(),
                    workerAddress: '',
                });
                const mockPresubmitTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(1233),
                    from: '0xworkeraddress',
                    maxFeePerGas: new utils_1.BigNumber(100000),
                    maxPriorityFeePerGas: new utils_1.BigNumber(100),
                    nonce: 0,
                    orderHash: '0xorderhash',
                    status: types_1.RfqmTransactionSubmissionStatus.Presubmit,
                    to: '0xexchangeproxyaddress',
                    transactionHash: '0xpresubmittransactionhash',
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                });
                const mockTransactionRequest = {};
                const mockTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                    from: '0xworkeraddress',
                    maxFeePerGas: new utils_1.BigNumber(100000),
                    maxPriorityFeePerGas: new utils_1.BigNumber(100),
                    nonce: 0,
                    orderHash: '0xorderhash',
                    to: '0xexchangeproxyaddress',
                    transactionHash: '0xsignedtransactionhash',
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                });
                const mockTransactionReceipt = {
                    to: '0xexchangeproxyaddress',
                    from: '0xworkeraddress',
                    contractAddress: '0xexchangeproxyaddress',
                    transactionIndex: 0,
                    gasUsed: ethers_1.BigNumber.from(10000),
                    logsBloom: '',
                    blockHash: '0xblockhash',
                    transactionHash: '0xsignedtransactionhash',
                    logs: [],
                    blockNumber: 1,
                    confirmations: 3,
                    cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                    effectiveGasPrice: ethers_1.BigNumber.from(1000),
                    byzantium: true,
                    type: 2,
                    status: 1,
                };
                const mockNonce = 0;
                const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
                (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
                const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash', types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([mockPresubmitTransaction]);
                const updateRfqmJobCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                    updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
                });
                const writeV2RfqmTransactionSubmissionToDbCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.writeV2RfqmTransactionSubmissionToDbAsync((0, ts_mockito_1.anything)())).thenCall(async (transactionArg) => {
                    writeV2RfqmTransactionSubmissionToDbCalledArgs.push(_.cloneDeep(transactionArg));
                    return _.cloneDeep(mockTransaction);
                });
                (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionByTransactionHashAsync('0xsignedtransactionhash')).thenResolve(_.cloneDeep(mockTransaction));
                const updateRfqmTransactionSubmissionsCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmTransactionSubmissionsAsync((0, ts_mockito_1.anything)())).thenCall(async (tranactionArg) => {
                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));
                });
                const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
                // This mock response indicates that the presubmit transaction can't be found
                // on chain or in the mempool
                (0, ts_mockito_1.when)(mockBlockchainUtils.getTransactionAsync('0xpresubmittransactionhash')).thenResolve(null);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
                (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(100);
                (0, ts_mockito_1.when)(mockBlockchainUtils.transformTxDataToTransactionRequest((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn(mockTransactionRequest);
                (0, ts_mockito_1.when)(mockBlockchainUtils.signTransactionAsync((0, ts_mockito_1.anything)())).thenResolve({
                    signedTransaction: 'signedTransaction',
                    transactionHash: '0xsignedtransactionhash',
                });
                (0, ts_mockito_1.when)(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');
                (0, ts_mockito_1.when)(mockBlockchainUtils.submitSignedTransactionAsync((0, ts_mockito_1.anything)())).thenResolve('0xsignedtransactionhash');
                (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xsignedtransactionhash']))).thenResolve([
                    mockTransactionReceipt,
                ]);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs((0, ts_mockito_1.anything)())).thenReturn({
                    event: '',
                    logIndex: null,
                    transactionIndex: null,
                    transactionHash: '',
                    blockHash: '',
                    address: '',
                    data: '',
                    blockNumber: 0,
                    topics: [],
                    args: {
                        maker: '',
                        makerToken: '',
                        makerTokenFilledAmount: new utils_1.BigNumber(1234),
                        orderHash: '',
                        pool: '',
                        taker: '',
                        takerToken: '',
                        takerTokenFilledAmount: new utils_1.BigNumber(5),
                    },
                });
                const rfqmService = buildWorkerServiceForUnitTest({
                    dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                    gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
                    rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                });
                const callback = async (newSubmissionContextStatus, oldSubmissionContextStatus) => {
                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {
                        const newJobStatus = SubmissionContext_1.SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);
                        job.status = newJobStatus;
                        await mockDbUtils.updateRfqmJobAsync(job);
                    }
                };
                await rfqmService.submitToChainAsync({
                    kind: job.kind,
                    to: '0xexchangeproxyaddress',
                    from: '0xworkeraddress',
                    calldata: '0xcalldata',
                    expiry: job.expiry,
                    identifier: job.orderHash,
                    submissionType: types_1.RfqmTransactionSubmissionType.Trade,
                    onSubmissionContextStatusUpdate: callback,
                });
                // eth_createAccessList should not be called when not enabled
                (0, ts_mockito_1.verify)(mockBlockchainUtils.createAccessListForAsync((0, ts_mockito_1.anything)())).never();
                (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
                // Expectations are the same as if the presubmit transaction never existed
                (0, chai_1.expect)(writeV2RfqmTransactionSubmissionToDbCalledArgs[0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.Presubmit);
                (0, chai_1.expect)(updateRfqmTransactionSubmissionsCalledArgs[0][0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.Submitted);
                (0, chai_1.expect)(updateRfqmTransactionSubmissionsCalledArgs[1][0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed);
            });
            it("marks a PRESUBMIT job as expired when existing transactions aren't found in \
            the mempool or on chain and the expiration time has passed", async () => {
                const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
                const job = new entities_1.RfqmV2JobEntity({
                    affiliateAddress: '',
                    chainId: 1,
                    createdAt: new Date(),
                    expiry: new utils_1.BigNumber(nowS - 60),
                    fee: {
                        amount: '0',
                        token: '',
                        type: 'fixed',
                    },
                    integratorId: '',
                    lastLookResult: true,
                    makerUri: 'http://foo.bar',
                    order: {
                        order: {
                            chainId: '1',
                            expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(nowS - 60), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                            maker: '0xmaker',
                            makerAmount: '1000000',
                            makerToken: '0xmakertoken',
                            taker: '0xtaker',
                            takerAmount: '10000000',
                            takerToken: '0xtakertoken',
                            txOrigin: '',
                            verifyingContract: '',
                        },
                        type: types_1.RfqmOrderTypes.Otc,
                    },
                    orderHash: '0xorderhash',
                    status: types_1.RfqmJobStatus.PendingLastLookAccepted,
                    updatedAt: new Date(),
                    workerAddress: '',
                });
                const mockPresubmitTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(1233),
                    from: '0xworkeraddress',
                    maxFeePerGas: new utils_1.BigNumber(100000),
                    maxPriorityFeePerGas: new utils_1.BigNumber(100),
                    nonce: 0,
                    orderHash: '0xorderhash',
                    status: types_1.RfqmTransactionSubmissionStatus.Presubmit,
                    to: '0xexchangeproxyaddress',
                    transactionHash: '0xpresubmittransactionhash',
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                });
                const mockTransactionRequest = {};
                const mockTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                    from: '0xworkeraddress',
                    maxFeePerGas: new utils_1.BigNumber(100000),
                    maxPriorityFeePerGas: new utils_1.BigNumber(100),
                    nonce: 0,
                    orderHash: '0xorderhash',
                    to: '0xexchangeproxyaddress',
                    transactionHash: '0xsignedtransactionhash',
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                });
                const mockTransactionReceipt = {
                    to: '0xexchangeproxyaddress',
                    from: '0xworkeraddress',
                    contractAddress: '0xexchangeproxyaddress',
                    transactionIndex: 0,
                    gasUsed: ethers_1.BigNumber.from(10000),
                    logsBloom: '',
                    blockHash: '0xblockhash',
                    transactionHash: '0xsignedtransactionhash',
                    logs: [],
                    blockNumber: 1,
                    confirmations: 3,
                    cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                    effectiveGasPrice: ethers_1.BigNumber.from(1000),
                    byzantium: true,
                    type: 2,
                    status: 1,
                };
                const mockNonce = 0;
                const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
                (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
                const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash', types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([mockPresubmitTransaction]);
                const updateRfqmJobCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                    updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
                });
                const writeV2RfqmTransactionSubmissionToDbCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.writeV2RfqmTransactionSubmissionToDbAsync((0, ts_mockito_1.anything)())).thenCall(async (transactionArg) => {
                    writeV2RfqmTransactionSubmissionToDbCalledArgs.push(_.cloneDeep(transactionArg));
                    return _.cloneDeep(mockTransaction);
                });
                (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionByTransactionHashAsync('0xsignedtransactionhash')).thenResolve(_.cloneDeep(mockTransaction));
                const updateRfqmTransactionSubmissionsCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmTransactionSubmissionsAsync((0, ts_mockito_1.anything)())).thenCall(async (tranactionArg) => {
                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));
                });
                const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
                // This mock response indicates that the presubmit transaction can't be found
                // on chain or in the mempool
                (0, ts_mockito_1.when)(mockBlockchainUtils.getTransactionAsync('0xpresubmittransactionhash')).thenResolve(null);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
                (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(100);
                (0, ts_mockito_1.when)(mockBlockchainUtils.transformTxDataToTransactionRequest((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn(mockTransactionRequest);
                (0, ts_mockito_1.when)(mockBlockchainUtils.signTransactionAsync((0, ts_mockito_1.anything)())).thenResolve({
                    signedTransaction: 'signedTransaction',
                    transactionHash: '0xsignedtransactionhash',
                });
                (0, ts_mockito_1.when)(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');
                (0, ts_mockito_1.when)(mockBlockchainUtils.submitSignedTransactionAsync((0, ts_mockito_1.anything)())).thenResolve('0xsignedtransactionhash');
                (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xsignedtransactionhash']))).thenResolve([
                    mockTransactionReceipt,
                ]);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs((0, ts_mockito_1.anything)())).thenReturn({
                    event: '',
                    logIndex: null,
                    transactionIndex: null,
                    transactionHash: '',
                    blockHash: '',
                    address: '',
                    data: '',
                    blockNumber: 0,
                    topics: [],
                    args: {
                        maker: '',
                        makerToken: '',
                        makerTokenFilledAmount: new utils_1.BigNumber(1234),
                        orderHash: '',
                        pool: '',
                        taker: '',
                        takerToken: '',
                        takerTokenFilledAmount: new utils_1.BigNumber(5),
                    },
                });
                const rfqmService = buildWorkerServiceForUnitTest({
                    dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                    gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
                    rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                });
                const callback = async (newSubmissionContextStatus, oldSubmissionContextStatus) => {
                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {
                        const newJobStatus = SubmissionContext_1.SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);
                        job.status = newJobStatus;
                        await mockDbUtils.updateRfqmJobAsync(job);
                    }
                };
                try {
                    await rfqmService.submitToChainAsync({
                        kind: job.kind,
                        to: '0xexchangeproxyaddress',
                        from: '0xworkeraddress',
                        calldata: '0xcalldata',
                        expiry: job.expiry,
                        identifier: job.orderHash,
                        submissionType: types_1.RfqmTransactionSubmissionType.Trade,
                        onSubmissionContextStatusUpdate: callback,
                    });
                    chai_1.expect.fail();
                }
                catch (e) {
                    (0, chai_1.expect)(e.message).to.contain('Exceed expiry');
                    // eth_createAccessList should not be called when not enabled
                    (0, ts_mockito_1.verify)(mockBlockchainUtils.createAccessListForAsync((0, ts_mockito_1.anything)())).never();
                    (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.FailedExpired);
                }
            });
            it('recovers a PRESUBMIT transaction which actually submitted', async () => {
                const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
                const job = new entities_1.RfqmV2JobEntity({
                    affiliateAddress: '',
                    chainId: 1,
                    createdAt: new Date(),
                    expiry: new utils_1.BigNumber(nowS + 600),
                    fee: {
                        amount: '0',
                        token: '',
                        type: 'fixed',
                    },
                    integratorId: '',
                    lastLookResult: true,
                    makerUri: 'http://foo.bar',
                    order: {
                        order: {
                            chainId: '1',
                            expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(nowS + 600), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                            maker: '0xmaker',
                            makerAmount: '1000000',
                            makerToken: '0xmakertoken',
                            taker: '0xtaker',
                            takerAmount: '10000000',
                            takerToken: '0xtakertoken',
                            txOrigin: '',
                            verifyingContract: '',
                        },
                        type: types_1.RfqmOrderTypes.Otc,
                    },
                    orderHash: '0xorderhash',
                    status: types_1.RfqmJobStatus.PendingLastLookAccepted,
                    updatedAt: new Date(),
                    workerAddress: '',
                });
                const mockPresubmitTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(1233),
                    from: '0xworkeraddress',
                    maxFeePerGas: new utils_1.BigNumber(100000),
                    maxPriorityFeePerGas: new utils_1.BigNumber(100),
                    nonce: 0,
                    orderHash: '0xorderhash',
                    status: types_1.RfqmTransactionSubmissionStatus.Presubmit,
                    to: '0xexchangeproxyaddress',
                    transactionHash: '0xpresubmittransactionhash',
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                });
                const mockTransactionReceipt = {
                    blockHash: '0xblockhash',
                    blockNumber: 1,
                    byzantium: true,
                    confirmations: 3,
                    contractAddress: '0xexchangeproxyaddress',
                    cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                    effectiveGasPrice: ethers_1.BigNumber.from(1000),
                    from: '0xworkeraddress',
                    gasUsed: ethers_1.BigNumber.from(10000),
                    logs: [],
                    logsBloom: '',
                    status: 1,
                    to: '0xexchangeproxyaddress',
                    transactionHash: '0xpresubmittransactionhash',
                    transactionIndex: 0,
                    type: 2,
                };
                const mockTransactionResponse = {
                    chainId: 1,
                    confirmations: 0,
                    data: '',
                    from: '0xworkeraddress',
                    gasLimit: ethers_1.BigNumber.from(1000000),
                    hash: '0xpresubmittransactionhash',
                    nonce: 0,
                    type: 2,
                    value: ethers_1.BigNumber.from(0),
                    wait: (_confirmations) => Promise.resolve(mockTransactionReceipt),
                };
                const mockMinedBlock = {
                    _difficulty: ethers_1.BigNumber.from(2),
                    difficulty: 2,
                    extraData: '',
                    gasLimit: ethers_1.BigNumber.from(1000),
                    gasUsed: ethers_1.BigNumber.from(1000),
                    hash: '0xblockhash',
                    miner: '0xminer',
                    nonce: '0x000',
                    number: 21,
                    parentHash: '0xparentblockhash',
                    timestamp: 12345,
                    transactions: ['0xpresubmittransactionhash'],
                };
                const mockNonce = 0;
                const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
                (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
                const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash', types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([mockPresubmitTransaction]);
                const updateRfqmTransactionSubmissionsCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmTransactionSubmissionsAsync((0, ts_mockito_1.anything)())).thenCall(async (tranactionArg) => {
                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));
                });
                const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
                // This mock response indicates that the transaction is present in the mempool
                (0, ts_mockito_1.when)(mockBlockchainUtils.getTransactionAsync('0xpresubmittransactionhash')).thenResolve(mockTransactionResponse);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
                (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenReject(new Error('estimateGasForAsync called during recovery'));
                (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xpresubmittransactionhash']))).thenResolve([
                    mockTransactionReceipt,
                ]);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs((0, ts_mockito_1.anything)())).thenReturn({
                    event: '',
                    logIndex: null,
                    transactionIndex: null,
                    transactionHash: '',
                    blockHash: '',
                    address: '',
                    data: '',
                    blockNumber: 0,
                    topics: [],
                    args: {
                        maker: '',
                        makerToken: '',
                        makerTokenFilledAmount: new utils_1.BigNumber(1234),
                        orderHash: '',
                        pool: '',
                        taker: '',
                        takerToken: '',
                        takerTokenFilledAmount: new utils_1.BigNumber(5),
                    },
                });
                const rfqmService = buildWorkerServiceForUnitTest({
                    dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                    gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
                    rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                });
                const callback = async (newSubmissionContextStatus, oldSubmissionContextStatus) => {
                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {
                        const newJobStatus = SubmissionContext_1.SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);
                        job.status = newJobStatus;
                        await mockDbUtils.updateRfqmJobAsync(job);
                    }
                };
                await rfqmService.submitToChainAsync({
                    kind: job.kind,
                    to: '0xexchangeproxyaddress',
                    from: '0xworkeraddress',
                    calldata: '0xcalldata',
                    expiry: job.expiry,
                    identifier: job.orderHash,
                    submissionType: types_1.RfqmTransactionSubmissionType.Trade,
                    onSubmissionContextStatusUpdate: callback,
                });
                // eth_createAccessList should not be called when not enabled
                (0, ts_mockito_1.verify)(mockBlockchainUtils.createAccessListForAsync((0, ts_mockito_1.anything)())).never();
                // Logic should first check to see if the transaction was actually sent.
                // If it was (and it is being mock so in this test) then the logic first
                // updates the status of the transaction to "Submitted"
                (0, chai_1.expect)(updateRfqmTransactionSubmissionsCalledArgs[0][0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.Submitted);
                // The logic then enters the watch loop. On the first check, a transaction
                // receipt exists for this transaction and it will be marked "confirmed"
                (0, chai_1.expect)(updateRfqmTransactionSubmissionsCalledArgs[1][0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed);
                (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
            });
            it('finalizes a job to FAILED_EXPIRED once the expiration window has passed', async () => {
                const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
                const ninetySecondsAgo = nowS - 100;
                const job = new entities_1.RfqmV2JobEntity({
                    affiliateAddress: '',
                    chainId: 1,
                    createdAt: new Date(),
                    expiry: new utils_1.BigNumber(ninetySecondsAgo),
                    fee: {
                        amount: '0',
                        token: '',
                        type: 'fixed',
                    },
                    integratorId: '',
                    lastLookResult: true,
                    makerUri: 'http://foo.bar',
                    order: {
                        order: {
                            chainId: '1',
                            expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(ninetySecondsAgo.toString()), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                            maker: '0xmaker',
                            makerAmount: '1000000',
                            makerToken: '0xmakertoken',
                            taker: '0xtaker',
                            takerAmount: '10000000',
                            takerToken: '0xtakertoken',
                            txOrigin: '',
                            verifyingContract: '',
                        },
                        type: types_1.RfqmOrderTypes.Otc,
                    },
                    orderHash: '0xorderhash',
                    status: types_1.RfqmJobStatus.PendingSubmitted,
                    updatedAt: new Date(),
                    workerAddress: '',
                });
                const mockTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                    createdAt: new Date(1233),
                    from: '0xworkeraddress',
                    maxFeePerGas: new utils_1.BigNumber(100000),
                    maxPriorityFeePerGas: new utils_1.BigNumber(100),
                    nonce: 0,
                    orderHash: '0xorderhash',
                    status: types_1.RfqmTransactionSubmissionStatus.Submitted,
                    to: '0xexchangeproxyaddress',
                    transactionHash: '0xpresubmittransactionhash',
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                });
                const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
                (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
                const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash', types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([mockTransaction]);
                const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
                (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(100);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xpresubmittransactionhash']))).thenResolve([]);
                const rfqmService = buildWorkerServiceForUnitTest({
                    dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                    gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
                    rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                });
                const callback = async (newSubmissionContextStatus, oldSubmissionContextStatus) => {
                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {
                        const newJobStatus = SubmissionContext_1.SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);
                        job.status = newJobStatus;
                        await mockDbUtils.updateRfqmJobAsync(job);
                    }
                };
                try {
                    await rfqmService.submitToChainAsync({
                        kind: job.kind,
                        to: '0xexchangeproxyaddress',
                        from: '0xworkeraddress',
                        calldata: '0xcalldata',
                        expiry: job.expiry,
                        identifier: job.orderHash,
                        submissionType: types_1.RfqmTransactionSubmissionType.Trade,
                        onSubmissionContextStatusUpdate: callback,
                    });
                }
                catch (e) {
                    (0, chai_1.expect)(e.message).to.contain('Exceed expiry');
                    // eth_createAccessList should not be called when not enabled
                    (0, ts_mockito_1.verify)(mockBlockchainUtils.createAccessListForAsync((0, ts_mockito_1.anything)())).never();
                    (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.FailedExpired);
                }
            });
            it('should call createAccessListForAsync and should not affect the overall method when RPC returns properly', async () => {
                const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
                const job = new entities_1.RfqmV2JobEntity({
                    affiliateAddress: '',
                    chainId: 1,
                    createdAt: new Date(),
                    expiry: new utils_1.BigNumber(nowS + 600),
                    fee: {
                        amount: '0',
                        token: '',
                        type: 'fixed',
                    },
                    integratorId: '',
                    lastLookResult: true,
                    makerUri: 'http://foo.bar',
                    order: {
                        order: {
                            chainId: '1',
                            expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(nowS + 600), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                            maker: '0xmaker',
                            makerAmount: '1000000',
                            makerToken: '0xmakertoken',
                            taker: '0xtaker',
                            takerAmount: '10000000',
                            takerToken: '0xtakertoken',
                            txOrigin: '',
                            verifyingContract: '',
                        },
                        type: types_1.RfqmOrderTypes.Otc,
                    },
                    orderHash: '0xorderhash',
                    status: types_1.RfqmJobStatus.PendingLastLookAccepted,
                    updatedAt: new Date(),
                    workerAddress: '',
                });
                const mockTransactionRequest = {};
                const mockTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                    from: '0xworkeraddress',
                    maxFeePerGas: new utils_1.BigNumber(100000),
                    maxPriorityFeePerGas: new utils_1.BigNumber(100),
                    nonce: 0,
                    orderHash: '0xorderhash',
                    to: '0xexchangeproxyaddress',
                    transactionHash: '0xsignedtransactionhash',
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                });
                const mockTransactionReceipt = {
                    to: '0xexchangeproxyaddress',
                    from: '0xworkeraddress',
                    contractAddress: '0xexchangeproxyaddress',
                    transactionIndex: 0,
                    gasUsed: ethers_1.BigNumber.from(10000),
                    logsBloom: '',
                    blockHash: '0xblockhash',
                    transactionHash: '0xsignedtransactionhash',
                    logs: [],
                    blockNumber: 1,
                    confirmations: 3,
                    cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                    effectiveGasPrice: ethers_1.BigNumber.from(1000),
                    byzantium: true,
                    type: 2,
                    status: 1,
                };
                const mockNonce = 0;
                const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
                (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
                const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash', types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([]);
                const updateRfqmJobCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                    updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
                });
                const writeV2RfqmTransactionSubmissionToDbCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.writeV2RfqmTransactionSubmissionToDbAsync((0, ts_mockito_1.anything)())).thenCall(async (transactionArg) => {
                    writeV2RfqmTransactionSubmissionToDbCalledArgs.push(_.cloneDeep(transactionArg));
                    return _.cloneDeep(mockTransaction);
                });
                (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionByTransactionHashAsync('0xsignedtransactionhash')).thenResolve(_.cloneDeep(mockTransaction));
                const updateRfqmTransactionSubmissionsCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmTransactionSubmissionsAsync((0, ts_mockito_1.anything)())).thenCall(async (tranactionArg) => {
                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));
                });
                const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
                (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(100);
                (0, ts_mockito_1.when)(mockBlockchainUtils.transformTxDataToTransactionRequest((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn(mockTransactionRequest);
                (0, ts_mockito_1.when)(mockBlockchainUtils.signTransactionAsync((0, ts_mockito_1.anything)())).thenResolve({
                    signedTransaction: 'signedTransaction',
                    transactionHash: '0xsignedtransactionhash',
                });
                (0, ts_mockito_1.when)(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');
                (0, ts_mockito_1.when)(mockBlockchainUtils.submitSignedTransactionAsync((0, ts_mockito_1.anything)())).thenResolve('0xsignedtransactionhash');
                (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xsignedtransactionhash']))).thenResolve([
                    mockTransactionReceipt,
                ]);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs((0, ts_mockito_1.anything)())).thenReturn({
                    event: '',
                    logIndex: null,
                    transactionIndex: null,
                    transactionHash: '',
                    blockHash: '',
                    address: '',
                    data: '',
                    blockNumber: 0,
                    topics: [],
                    args: {
                        maker: '',
                        makerToken: '',
                        makerTokenFilledAmount: new utils_1.BigNumber(1234),
                        orderHash: '',
                        pool: '',
                        taker: '',
                        takerToken: '',
                        takerTokenFilledAmount: new utils_1.BigNumber(5),
                    },
                });
                (0, ts_mockito_1.when)(mockBlockchainUtils.createAccessListForAsync((0, ts_mockito_1.anything)())).thenResolve({
                    accessList: {
                        '0x1234': ['0x0'],
                        '0x12345': ['0x1'],
                    },
                    gasEstimate: 1000,
                });
                const rfqmService = buildWorkerServiceForUnitTest({
                    dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                    gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
                    rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                    enableAccessList: true,
                });
                const callback = async (newSubmissionContextStatus, oldSubmissionContextStatus) => {
                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {
                        const newJobStatus = SubmissionContext_1.SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);
                        job.status = newJobStatus;
                        await mockDbUtils.updateRfqmJobAsync(job);
                    }
                };
                await rfqmService.submitToChainAsync({
                    kind: job.kind,
                    to: '0xexchangeproxyaddress',
                    from: '0xworkeraddress',
                    calldata: '0xcalldata',
                    expiry: job.expiry,
                    identifier: job.orderHash,
                    submissionType: types_1.RfqmTransactionSubmissionType.Trade,
                    onSubmissionContextStatusUpdate: callback,
                });
                (0, ts_mockito_1.verify)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)()));
                (0, ts_mockito_1.verify)(mockBlockchainUtils.createAccessListForAsync((0, ts_mockito_1.anything)())).once();
                (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
                (0, chai_1.expect)(writeV2RfqmTransactionSubmissionToDbCalledArgs[0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.Presubmit);
                (0, chai_1.expect)(updateRfqmTransactionSubmissionsCalledArgs[0][0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.Submitted);
                (0, chai_1.expect)(updateRfqmTransactionSubmissionsCalledArgs[1][0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed);
            });
            it('should call createAccessListForAsync and should not affect the overall method when RPC errors out', async () => {
                const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
                const job = new entities_1.RfqmV2JobEntity({
                    affiliateAddress: '',
                    chainId: 1,
                    createdAt: new Date(),
                    expiry: new utils_1.BigNumber(nowS + 600),
                    fee: {
                        amount: '0',
                        token: '',
                        type: 'fixed',
                    },
                    integratorId: '',
                    lastLookResult: true,
                    makerUri: 'http://foo.bar',
                    order: {
                        order: {
                            chainId: '1',
                            expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(nowS + 600), new utils_1.BigNumber(1), new utils_1.BigNumber(1)).toString(),
                            maker: '0xmaker',
                            makerAmount: '1000000',
                            makerToken: '0xmakertoken',
                            taker: '0xtaker',
                            takerAmount: '10000000',
                            takerToken: '0xtakertoken',
                            txOrigin: '',
                            verifyingContract: '',
                        },
                        type: types_1.RfqmOrderTypes.Otc,
                    },
                    orderHash: '0xorderhash',
                    status: types_1.RfqmJobStatus.PendingLastLookAccepted,
                    updatedAt: new Date(),
                    workerAddress: '',
                });
                const mockTransactionRequest = {};
                const mockTransaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                    from: '0xworkeraddress',
                    maxFeePerGas: new utils_1.BigNumber(100000),
                    maxPriorityFeePerGas: new utils_1.BigNumber(100),
                    nonce: 0,
                    orderHash: '0xorderhash',
                    to: '0xexchangeproxyaddress',
                    transactionHash: '0xsignedtransactionhash',
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                });
                const mockTransactionReceipt = {
                    to: '0xto',
                    from: '0xfrom',
                    contractAddress: '0xexchangeproxyaddress',
                    transactionIndex: 0,
                    gasUsed: ethers_1.BigNumber.from(10000),
                    logsBloom: '',
                    blockHash: '0xblockhash',
                    transactionHash: '0xsignedtransactionhash',
                    logs: [],
                    blockNumber: 1,
                    confirmations: 3,
                    cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                    effectiveGasPrice: ethers_1.BigNumber.from(1000),
                    byzantium: true,
                    type: 2,
                    status: 1,
                };
                const mockNonce = 0;
                const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
                (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
                const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash', types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([]);
                const updateRfqmJobCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                    updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
                });
                const writeV2RfqmTransactionSubmissionToDbCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.writeV2RfqmTransactionSubmissionToDbAsync((0, ts_mockito_1.anything)())).thenCall(async (transactionArg) => {
                    writeV2RfqmTransactionSubmissionToDbCalledArgs.push(_.cloneDeep(transactionArg));
                    return _.cloneDeep(mockTransaction);
                });
                (0, ts_mockito_1.when)(mockDbUtils.findV2TransactionSubmissionByTransactionHashAsync('0xsignedtransactionhash')).thenResolve(_.cloneDeep(mockTransaction));
                const updateRfqmTransactionSubmissionsCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmTransactionSubmissionsAsync((0, ts_mockito_1.anything)())).thenCall(async (tranactionArg) => {
                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));
                });
                const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
                (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(100);
                (0, ts_mockito_1.when)(mockBlockchainUtils.transformTxDataToTransactionRequest((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn(mockTransactionRequest);
                (0, ts_mockito_1.when)(mockBlockchainUtils.signTransactionAsync((0, ts_mockito_1.anything)())).thenResolve({
                    signedTransaction: 'signedTransaction',
                    transactionHash: '0xsignedtransactionhash',
                });
                (0, ts_mockito_1.when)(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');
                (0, ts_mockito_1.when)(mockBlockchainUtils.submitSignedTransactionAsync((0, ts_mockito_1.anything)())).thenResolve('0xsignedtransactionhash');
                (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xsignedtransactionhash']))).thenResolve([
                    mockTransactionReceipt,
                ]);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs((0, ts_mockito_1.anything)())).thenReturn({
                    event: '',
                    logIndex: null,
                    transactionIndex: null,
                    transactionHash: '',
                    blockHash: '',
                    address: '',
                    data: '',
                    blockNumber: 0,
                    topics: [],
                    args: {
                        maker: '',
                        makerToken: '',
                        makerTokenFilledAmount: new utils_1.BigNumber(1234),
                        orderHash: '',
                        pool: '',
                        taker: '',
                        takerToken: '',
                        takerTokenFilledAmount: new utils_1.BigNumber(5),
                    },
                });
                (0, ts_mockito_1.when)(mockBlockchainUtils.createAccessListForAsync((0, ts_mockito_1.anything)())).thenReject(new Error('error'));
                const rfqmService = buildWorkerServiceForUnitTest({
                    dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                    gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
                    rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                    enableAccessList: true,
                });
                const callback = async (newSubmissionContextStatus, oldSubmissionContextStatus) => {
                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {
                        const newJobStatus = SubmissionContext_1.SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);
                        job.status = newJobStatus;
                        await mockDbUtils.updateRfqmJobAsync(job);
                    }
                };
                await rfqmService.submitToChainAsync({
                    kind: job.kind,
                    to: '0xexchangeproxyaddress',
                    from: '0xworkeraddress',
                    calldata: '0xcalldata',
                    expiry: job.expiry,
                    identifier: job.orderHash,
                    submissionType: types_1.RfqmTransactionSubmissionType.Trade,
                    onSubmissionContextStatusUpdate: callback,
                });
                (0, ts_mockito_1.verify)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)()));
                (0, ts_mockito_1.verify)(mockBlockchainUtils.createAccessListForAsync((0, ts_mockito_1.anything)())).once();
                (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
                (0, chai_1.expect)(writeV2RfqmTransactionSubmissionToDbCalledArgs[0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.Presubmit);
                (0, chai_1.expect)(updateRfqmTransactionSubmissionsCalledArgs[0][0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.Submitted);
                (0, chai_1.expect)(updateRfqmTransactionSubmissionsCalledArgs[1][0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed);
            });
        });
        // Not all tests from test block 'kind is `rfqm_v2_job`' is included here as most of the tests are similiar.
        // The tests below specifically test if corresponding methods are called for job kind `meta_transaction_job`.
        describe('kind is `meta_transaction_job`', () => {
            it('submits a transaction successfully when there is no previous transaction', async () => {
                const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
                const jobId = 'jobId';
                const transactionSubmissionId = 'submissionId';
                const job = createMeaTrsanctionJobEntity({
                    chainId: 1,
                    createdAt: new Date(),
                    expiry: new utils_1.BigNumber(nowS + 600),
                    fee: {
                        amount: new utils_1.BigNumber(0),
                        token: '',
                        type: 'fixed',
                    },
                    inputToken: '0xinputToken',
                    inputTokenAmount: new utils_1.BigNumber(10),
                    integratorId: '0xintegrator',
                    metaTransaction: constants_2.MOCK_META_TRANSACTION,
                    metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                    minOutputTokenAmount: new utils_1.BigNumber(10),
                    outputToken: '0xoutputToken',
                    takerAddress: '0xtakerAddress',
                    takerSignature: {
                        signatureType: asset_swapper_1.SignatureType.EthSign,
                        v: 1,
                        r: '',
                        s: '',
                    },
                    status: types_1.RfqmJobStatus.PendingLastLookAccepted,
                    workerAddress: '0xworkeraddress',
                }, jobId);
                const mockTransactionRequest = {};
                const mockTransaction = createMetaTransactionSubmissionEntity({
                    from: '0xworkeraddress',
                    metaTransactionJobId: jobId,
                    maxFeePerGas: new utils_1.BigNumber(100000),
                    maxPriorityFeePerGas: new utils_1.BigNumber(100),
                    nonce: 0,
                    to: '0xexchangeproxyaddress',
                    transactionHash: '0xsignedtransactionhash',
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                }, transactionSubmissionId);
                const mockTransactionReceipt = {
                    to: '0xto',
                    from: '0xfrom',
                    contractAddress: '0xexchangeproxyaddress',
                    transactionIndex: 0,
                    gasUsed: ethers_1.BigNumber.from(10000),
                    logsBloom: '',
                    blockHash: '0xblockhash',
                    transactionHash: '0xsignedtransactionhash',
                    logs: [],
                    blockNumber: 1,
                    confirmations: 3,
                    cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                    effectiveGasPrice: ethers_1.BigNumber.from(1000),
                    byzantium: true,
                    type: 2,
                    status: 1,
                };
                const mockNonce = 0;
                const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
                (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
                const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([]);
                const updateRfqmJobCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                    updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
                });
                const writeMetaTransactionSubmissionAsyncCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.writeMetaTransactionSubmissionAsync((0, ts_mockito_1.anything)())).thenCall(async (transactionArg) => {
                    writeMetaTransactionSubmissionAsyncCalledArgs.push(_.cloneDeep(transactionArg));
                    return _.cloneDeep(mockTransaction);
                });
                (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByTransactionHashAsync('0xsignedtransactionhash', types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([_.cloneDeep(mockTransaction)]);
                const updateRfqmTransactionSubmissionsCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmTransactionSubmissionsAsync((0, ts_mockito_1.anything)())).thenCall(async (tranactionArg) => {
                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));
                });
                const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
                (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(100);
                (0, ts_mockito_1.when)(mockBlockchainUtils.transformTxDataToTransactionRequest((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn(mockTransactionRequest);
                (0, ts_mockito_1.when)(mockBlockchainUtils.signTransactionAsync((0, ts_mockito_1.anything)())).thenResolve({
                    signedTransaction: 'signedTransaction',
                    transactionHash: '0xsignedtransactionhash',
                });
                (0, ts_mockito_1.when)(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');
                (0, ts_mockito_1.when)(mockBlockchainUtils.submitSignedTransactionAsync((0, ts_mockito_1.anything)())).thenResolve('0xsignedtransactionhash');
                (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xsignedtransactionhash']))).thenResolve([
                    mockTransactionReceipt,
                ]);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
                const rfqmService = buildWorkerServiceForUnitTest({
                    dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                    gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
                    rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                });
                const callback = async (newSubmissionContextStatus, oldSubmissionContextStatus) => {
                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {
                        const newJobStatus = SubmissionContext_1.SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);
                        job.status = newJobStatus;
                        await mockDbUtils.updateRfqmJobAsync(job);
                    }
                };
                await rfqmService.submitToChainAsync({
                    kind: job.kind,
                    to: '0xexchangeproxyaddress',
                    from: '0xworkeraddress',
                    calldata: '0xcalldata',
                    expiry: job.expiry,
                    identifier: job.id,
                    submissionType: types_1.RfqmTransactionSubmissionType.Trade,
                    onSubmissionContextStatusUpdate: callback,
                });
                (0, ts_mockito_1.verify)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)()));
                // eth_createAccessList should not be called when not enabled
                (0, ts_mockito_1.verify)(mockBlockchainUtils.createAccessListForAsync((0, ts_mockito_1.anything)())).never();
                (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
                (0, chai_1.expect)(writeMetaTransactionSubmissionAsyncCalledArgs[0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.Presubmit);
                (0, chai_1.expect)(updateRfqmTransactionSubmissionsCalledArgs[0][0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.Submitted);
                (0, chai_1.expect)(updateRfqmTransactionSubmissionsCalledArgs[1][0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed);
            });
            it('recovers a PRESUBMIT transaction which actually submitted', async () => {
                const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
                const jobId = 'jobId';
                const transactionSubmissionId = 'submissionId';
                const job = createMeaTrsanctionJobEntity({
                    chainId: 1,
                    createdAt: new Date(),
                    expiry: new utils_1.BigNumber(nowS + 600),
                    fee: {
                        amount: new utils_1.BigNumber(0),
                        token: '',
                        type: 'fixed',
                    },
                    inputToken: '0xinputToken',
                    inputTokenAmount: new utils_1.BigNumber(10),
                    integratorId: '0xintegrator',
                    metaTransaction: constants_2.MOCK_META_TRANSACTION,
                    metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                    minOutputTokenAmount: new utils_1.BigNumber(10),
                    outputToken: '0xoutputToken',
                    takerAddress: '0xtakerAddress',
                    takerSignature: {
                        signatureType: asset_swapper_1.SignatureType.EthSign,
                        v: 1,
                        r: '',
                        s: '',
                    },
                    status: types_1.RfqmJobStatus.PendingLastLookAccepted,
                    workerAddress: '0xworkeraddress',
                }, jobId);
                const mockPresubmitTransaction = createMetaTransactionSubmissionEntity({
                    from: '0xworkeraddress',
                    metaTransactionJobId: jobId,
                    maxFeePerGas: new utils_1.BigNumber(100000),
                    maxPriorityFeePerGas: new utils_1.BigNumber(100),
                    nonce: 0,
                    status: types_1.RfqmTransactionSubmissionStatus.Presubmit,
                    to: '0xexchangeproxyaddress',
                    transactionHash: '0xpresubmittransactionhash',
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                }, transactionSubmissionId);
                const mockTransactionReceipt = {
                    blockHash: '0xblockhash',
                    blockNumber: 1,
                    byzantium: true,
                    confirmations: 3,
                    contractAddress: '0xexchangeproxyaddress',
                    cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                    effectiveGasPrice: ethers_1.BigNumber.from(1000),
                    from: '0xworkeraddress',
                    gasUsed: ethers_1.BigNumber.from(10000),
                    logs: [],
                    logsBloom: '',
                    status: 1,
                    to: '0xexchangeproxyaddress',
                    transactionHash: '0xpresubmittransactionhash',
                    transactionIndex: 0,
                    type: 2,
                };
                const mockTransactionResponse = {
                    chainId: 1,
                    confirmations: 0,
                    data: '',
                    from: '0xworkeraddress',
                    gasLimit: ethers_1.BigNumber.from(1000000),
                    hash: '0xpresubmittransactionhash',
                    nonce: 0,
                    type: 2,
                    value: ethers_1.BigNumber.from(0),
                    wait: (_confirmations) => Promise.resolve(mockTransactionReceipt),
                };
                const mockMinedBlock = {
                    _difficulty: ethers_1.BigNumber.from(2),
                    difficulty: 2,
                    extraData: '',
                    gasLimit: ethers_1.BigNumber.from(1000),
                    gasUsed: ethers_1.BigNumber.from(1000),
                    hash: '0xblockhash',
                    miner: '0xminer',
                    nonce: '0x000',
                    number: 21,
                    parentHash: '0xparentblockhash',
                    timestamp: 12345,
                    transactions: ['0xpresubmittransactionhash'],
                };
                const mockNonce = 0;
                const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
                (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
                const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([mockPresubmitTransaction]);
                const updateRfqmTransactionSubmissionsCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmTransactionSubmissionsAsync((0, ts_mockito_1.anything)())).thenCall(async (tranactionArg) => {
                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));
                });
                const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
                // This mock response indicates that the transaction is present in the mempool
                (0, ts_mockito_1.when)(mockBlockchainUtils.getTransactionAsync('0xpresubmittransactionhash')).thenResolve(mockTransactionResponse);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
                (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenReject(new Error('estimateGasForAsync called during recovery'));
                (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xpresubmittransactionhash']))).thenResolve([
                    mockTransactionReceipt,
                ]);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
                const rfqmService = buildWorkerServiceForUnitTest({
                    dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                    gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
                    rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                });
                const callback = async (newSubmissionContextStatus, oldSubmissionContextStatus) => {
                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {
                        const newJobStatus = SubmissionContext_1.SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);
                        job.status = newJobStatus;
                        await mockDbUtils.updateRfqmJobAsync(job);
                    }
                };
                await rfqmService.submitToChainAsync({
                    kind: job.kind,
                    to: '0xexchangeproxyaddress',
                    from: '0xworkeraddress',
                    calldata: '0xcalldata',
                    expiry: job.expiry,
                    identifier: job.id,
                    submissionType: types_1.RfqmTransactionSubmissionType.Trade,
                    onSubmissionContextStatusUpdate: callback,
                });
                // eth_createAccessList should not be called when not enabled
                (0, ts_mockito_1.verify)(mockBlockchainUtils.createAccessListForAsync((0, ts_mockito_1.anything)())).never();
                // Logic should first check to see if the transaction was actually sent.
                // If it was (and it is being mock so in this test) then the logic first
                // updates the status of the transaction to "Submitted"
                (0, chai_1.expect)(updateRfqmTransactionSubmissionsCalledArgs[0][0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.Submitted);
                // The logic then enters the watch loop. On the first check, a transaction
                // receipt exists for this transaction and it will be marked "confirmed"
                (0, chai_1.expect)(updateRfqmTransactionSubmissionsCalledArgs[1][0].status).to.equal(types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed);
                (0, chai_1.expect)(job.status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
            });
            it('throws exception if there are more than 1 transaction submissions with the same transaction hash', async () => {
                const nowS = Math.round(new Date().getTime() / constants_1.ONE_SECOND_MS);
                const jobId = 'jobId';
                const transactionSubmissionId = 'submissionId';
                const job = createMeaTrsanctionJobEntity({
                    chainId: 1,
                    createdAt: new Date(),
                    expiry: new utils_1.BigNumber(nowS + 600),
                    fee: {
                        amount: new utils_1.BigNumber(0),
                        token: '',
                        type: 'fixed',
                    },
                    inputToken: '0xinputToken',
                    inputTokenAmount: new utils_1.BigNumber(10),
                    integratorId: '0xintegrator',
                    metaTransaction: constants_2.MOCK_META_TRANSACTION,
                    metaTransactionHash: constants_2.MOCK_META_TRANSACTION.getHash(),
                    minOutputTokenAmount: new utils_1.BigNumber(10),
                    outputToken: '0xoutputToken',
                    takerAddress: '0xtakerAddress',
                    takerSignature: {
                        signatureType: asset_swapper_1.SignatureType.EthSign,
                        v: 1,
                        r: '',
                        s: '',
                    },
                    status: types_1.RfqmJobStatus.PendingLastLookAccepted,
                    workerAddress: '0xworkeraddress',
                }, jobId);
                const mockTransactionRequest = {};
                const mockTransaction = createMetaTransactionSubmissionEntity({
                    from: '0xworkeraddress',
                    metaTransactionJobId: jobId,
                    maxFeePerGas: new utils_1.BigNumber(100000),
                    maxPriorityFeePerGas: new utils_1.BigNumber(100),
                    nonce: 0,
                    to: '0xexchangeproxyaddress',
                    transactionHash: '0xsignedtransactionhash',
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                }, transactionSubmissionId);
                const mockTransactionReceipt = {
                    to: '0xto',
                    from: '0xfrom',
                    contractAddress: '0xexchangeproxyaddress',
                    transactionIndex: 0,
                    gasUsed: ethers_1.BigNumber.from(10000),
                    logsBloom: '',
                    blockHash: '0xblockhash',
                    transactionHash: '0xsignedtransactionhash',
                    logs: [],
                    blockNumber: 1,
                    confirmations: 3,
                    cumulativeGasUsed: ethers_1.BigNumber.from(1000),
                    effectiveGasPrice: ethers_1.BigNumber.from(1000),
                    byzantium: true,
                    type: 2,
                    status: 1,
                };
                const mockNonce = 0;
                const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
                (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(new utils_1.BigNumber(10).shiftedBy(constants_1.GWEI_DECIMALS));
                const mockDbUtils = (0, ts_mockito_1.mock)(rfqm_db_utils_1.RfqmDbUtils);
                (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([]);
                const updateRfqmJobCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmJobAsync((0, ts_mockito_1.anything)())).thenCall(async (jobArg) => {
                    updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));
                });
                const writeMetaTransactionSubmissionAsyncCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.writeMetaTransactionSubmissionAsync((0, ts_mockito_1.anything)())).thenCall(async (transactionArg) => {
                    writeMetaTransactionSubmissionAsyncCalledArgs.push(_.cloneDeep(transactionArg));
                    return _.cloneDeep(mockTransaction);
                });
                (0, ts_mockito_1.when)(mockDbUtils.findMetaTransactionSubmissionsByTransactionHashAsync('0xsignedtransactionhash', types_1.RfqmTransactionSubmissionType.Trade)).thenResolve([_.cloneDeep(mockTransaction), _.cloneDeep(mockTransaction)]);
                const updateRfqmTransactionSubmissionsCalledArgs = [];
                (0, ts_mockito_1.when)(mockDbUtils.updateRfqmTransactionSubmissionsAsync((0, ts_mockito_1.anything)())).thenCall(async (tranactionArg) => {
                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));
                });
                const mockBlockchainUtils = (0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);
                (0, ts_mockito_1.when)(mockBlockchainUtils.estimateGasForAsync((0, ts_mockito_1.anything)())).thenResolve(100);
                (0, ts_mockito_1.when)(mockBlockchainUtils.transformTxDataToTransactionRequest((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn(mockTransactionRequest);
                (0, ts_mockito_1.when)(mockBlockchainUtils.signTransactionAsync((0, ts_mockito_1.anything)())).thenResolve({
                    signedTransaction: 'signedTransaction',
                    transactionHash: '0xsignedtransactionhash',
                });
                (0, ts_mockito_1.when)(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');
                (0, ts_mockito_1.when)(mockBlockchainUtils.submitSignedTransactionAsync((0, ts_mockito_1.anything)())).thenResolve('0xsignedtransactionhash');
                (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0xsignedtransactionhash']))).thenResolve([
                    mockTransactionReceipt,
                ]);
                (0, ts_mockito_1.when)(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);
                const rfqmService = buildWorkerServiceForUnitTest({
                    dbUtils: (0, ts_mockito_1.instance)(mockDbUtils),
                    gasStationAttendant: (0, ts_mockito_1.instance)(gasStationAttendantMock),
                    rfqBlockchainUtils: (0, ts_mockito_1.instance)(mockBlockchainUtils),
                });
                const callback = async (newSubmissionContextStatus, oldSubmissionContextStatus) => {
                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {
                        const newJobStatus = SubmissionContext_1.SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);
                        job.status = newJobStatus;
                        await mockDbUtils.updateRfqmJobAsync(job);
                    }
                };
                try {
                    await rfqmService.submitToChainAsync({
                        kind: job.kind,
                        to: '0xexchangeproxyaddress',
                        from: '0xworkeraddress',
                        calldata: '0xcalldata',
                        expiry: job.expiry,
                        identifier: job.id,
                        submissionType: types_1.RfqmTransactionSubmissionType.Trade,
                        onSubmissionContextStatusUpdate: callback,
                    });
                    chai_1.expect.fail();
                }
                catch (e) {
                    (0, chai_1.expect)(e.message).to.contain('Transaction hash have been submitted not exactly once');
                }
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,