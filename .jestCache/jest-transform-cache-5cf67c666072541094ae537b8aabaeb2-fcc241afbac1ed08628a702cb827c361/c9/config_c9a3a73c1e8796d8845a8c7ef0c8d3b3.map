{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/config.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/config.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers max-file-line-count\r\nimport { HttpServiceConfig } from '@0x/api-utils';\r\nimport { assert } from '@0x/assert';\r\nimport { RfqMakerAssetOfferings } from '@0x/asset-swapper/lib/src/types';\r\nimport { LiquidityProviderRegistry } from '@0x/asset-swapper/lib/src/utils/market_operation_utils/types';\r\nimport { ChainId } from '@0x/contract-addresses';\r\nimport { BigNumber } from '@0x/utils';\r\nimport * as fs from 'fs';\r\nimport * as _ from 'lodash';\r\nimport * as validateUUID from 'uuid-validate';\r\n\r\nimport {\r\n    DEFAULT_BACKGROUND_JOB_TYPES,\r\n    DEFAULT_ETH_GAS_STATION_API_URL,\r\n    DEFAULT_EXPECTED_MINED_SEC,\r\n    DEFAULT_LOCAL_POSTGRES_URI,\r\n    DEFAULT_LOCAL_REDIS_URI,\r\n    DEFAULT_LOGGER_INCLUDE_TIMESTAMP,\r\n    DEFAULT_SENTRY_ENVIRONMENT,\r\n    HEALTHCHECK_PATH,\r\n    METRICS_PATH,\r\n    NULL_ADDRESS,\r\n    ONE_MINUTE_MS,\r\n} from './core/constants';\r\nimport { schemas } from './core/schemas';\r\nimport { FeeModelVersion } from './core/types';\r\nimport { toPairString } from './core/pair_utils';\r\nimport { schemaUtils } from './core/schema_utils';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\nenum EnvVarType {\r\n    AddressList,\r\n    StringList,\r\n    Integer,\r\n    Port,\r\n    KeepAliveTimeout,\r\n    ChainId,\r\n    ETHAddressHex,\r\n    UnitAmount,\r\n    Rate,\r\n    Url,\r\n    UrlList,\r\n    WhitelistAllTokens,\r\n    Boolean,\r\n    NonEmptyString,\r\n    APIKeys,\r\n    PrivateKeys,\r\n    RfqMakerAssetOfferings,\r\n    LiquidityProviderRegistry,\r\n    JsonStringList,\r\n}\r\n\r\n/**\r\n * Values read from configuration files which enable\r\n * rfq-api to operate on a chain.\r\n */\r\nexport interface ChainConfiguration {\r\n    chainId: number;\r\n    gasStationUrl: string;\r\n    name: string; // human readable, for logging and such\r\n    registryAddress: string;\r\n    rpcUrl: string;\r\n    sqsUrl: string;\r\n    zeroExClientBaseUrl: string;\r\n    // Enables caching for maker balances on observed tokens\r\n    enableMakerBalanceCache?: boolean;\r\n    // Use this config to override the 0x Exchange Proxy contract address.\r\n    // There might be a case when we want a different exchange\r\n    // proxy contract than what is defined from @0x/contract-addresses repo.\r\n    //\r\n    // i.e. testing a new feature that hasn't been deployed to the official\r\n    // contract yet\r\n    exchangeProxyContractAddressOverride?: string;\r\n    // Service configuration needs to be present to run the corresponding service.\r\n    gasless?: {\r\n        metaTransactionServiceUrl: string;\r\n    };\r\n    rfqm?: {\r\n        minExpiryDurationMs?: number;\r\n        quoteReportTopic?: string;\r\n        feeModelVersion?: FeeModelVersion;\r\n    };\r\n    rfqt?: {\r\n        minExpiryDurationMs?: number;\r\n        feeEventTopic?: string;\r\n        feeModelVersion?: FeeModelVersion;\r\n    };\r\n    worker?: {\r\n        // The value of the \"tip\" the worker will use when it starts\r\n        // submitting transactions\r\n        initialMaxPriorityFeePerGasGwei: number;\r\n        // The max fee per gas (in gwei) the worker is willing to pay for a transaction\r\n        maxFeePerGasCapGwei: number;\r\n        // Use this config to change the sleep time between a transacion's on-chain status check.\r\n        // You should set the sleep time close to the chain's block time.\r\n        // The smaller sleep time, the more frequent a transaction is checked to see it has been\r\n        // settled on-chain but it also consumes more RPC calls.\r\n        transactionWatcherSleepTimeMs?: number;\r\n        enableAccessList?: boolean;\r\n    };\r\n}\r\n\r\nexport type ChainConfigurations = ChainConfiguration[];\r\n\r\n/**\r\n * Configuration which contains information about chains and\r\n * related resources, like the RPC url.\r\n */\r\nexport const CHAIN_CONFIGURATIONS: ChainConfigurations = (() => {\r\n    let result: ChainConfigurations;\r\n    try {\r\n        result = resolveEnvVar<ChainConfigurations>('CHAIN_CONFIGURATIONS', EnvVarType.JsonStringList, []);\r\n        schemaUtils.validateSchema(result, schemas.chainConfigurationsSchema);\r\n    } catch (e) {\r\n        throw new Error(`CHAIN_CONFIGURATIONS was defined but is not valid JSON per the schema: ${e}`);\r\n    }\r\n    return result;\r\n})();\r\n\r\n/**\r\n * Values read from configuration files which provide\r\n * per pair fee model constants.\r\n */\r\nexport interface FeeModelConfiguration {\r\n    marginRakeRatio: number; // Rake based on margin between RFQm and AMM prices. E.g. marginRakeRatio = 0.5 if we want to charge 50% of the margin.\r\n    tradeSizeBps: number; // Base points of fee based on trade size. 1 bps = 0.01%.\r\n}\r\n\r\n/**\r\n * This interface is used to represent an individual JSON object for a given chain and pair.\r\n * It is only used when we read the JSON object from a file, and should not be used elsewhere.\r\n */\r\ninterface FeeModelConfigurationWithKey extends FeeModelConfiguration {\r\n    chainId: number;\r\n    tokenA: string;\r\n    tokenB: string;\r\n}\r\n\r\nexport type FeeModelConfigurationMap = Map<number, Map<string, FeeModelConfiguration>>;\r\n\r\n/**\r\n * A nested map providing fee model constants for each token pair.\r\n * Use chainId as first key and pair key as the second key.\r\n */\r\nexport const FEE_MODEL_CONFIGURATION_MAP: FeeModelConfigurationMap = (() => {\r\n    try {\r\n        const feeModelConfigurations: FeeModelConfigurationWithKey[] = resolveEnvVar<FeeModelConfigurationWithKey[]>(\r\n            'FEE_MODEL_CONFIGURATIONS',\r\n            EnvVarType.JsonStringList,\r\n            [],\r\n        );\r\n        schemaUtils.validateSchema(feeModelConfigurations, schemas.feeModelConfigurationsSchema);\r\n\r\n        return feeModelConfigurations.reduce((acc, curr) => {\r\n            const { chainId, tokenA, tokenB, marginRakeRatio, tradeSizeBps } = curr;\r\n            if (!acc.has(chainId)) {\r\n                acc.set(chainId, new Map<string, FeeModelConfiguration>());\r\n            }\r\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            acc.get(chainId)!.set(toPairString(tokenA, tokenB), { marginRakeRatio, tradeSizeBps });\r\n            return acc;\r\n        }, new Map</* chainId */ number, Map</* pairKey */ string, FeeModelConfiguration>>());\r\n    } catch (e) {\r\n        throw new Error(`FEE_MODEL_CONFIGURATIONS was defined but is not valid JSON per the schema: ${e}`);\r\n    }\r\n})();\r\n\r\nexport const DEFAULT_FEE_MODEL_CONFIGURATION: FeeModelConfiguration = { marginRakeRatio: 0, tradeSizeBps: 0 };\r\n\r\n/**\r\n * A taker-integrator of the 0x API.\r\n */\r\nexport interface Integrator {\r\n    affiliateAddress?: string; // Used if present and no affiliate address is sent in the quote request\r\n    apiKeys: string[];\r\n    integratorId: string;\r\n    /* IDs for chains the integrator is allowed to access RFQ liquidity on */\r\n    allowedChainIds: number[];\r\n    whitelistIntegratorUrls?: string[];\r\n    whitelistMakerIds?: string[];\r\n    label: string;\r\n    plp: boolean;\r\n    rfqm: boolean;\r\n    rfqt: boolean;\r\n}\r\nexport type IntegratorsAcl = Integrator[];\r\n\r\n/**\r\n * Configuration which represents taker-integrators of the 0x API. The configuration contains the label, id,\r\n * api keys, and allowed liquidity sources for each integrator.\r\n */\r\nexport const INTEGRATORS_ACL: IntegratorsAcl = (() => {\r\n    let integrators: IntegratorsAcl;\r\n    try {\r\n        integrators = resolveEnvVar<IntegratorsAcl>('INTEGRATORS_ACL', EnvVarType.JsonStringList, []);\r\n        schemaUtils.validateSchema(integrators, schemas.integratorsAclSchema);\r\n    } catch (e) {\r\n        throw new Error(`INTEGRATORS_ACL was defined but is not valid JSON per the schema: ${e}`);\r\n    }\r\n    return integrators;\r\n})();\r\n\r\n/**\r\n * Extracts the integrator API keys from the `INTEGRATORS_ACL` environment variable for the provided group type.\r\n */\r\nexport const getApiKeyWhitelistFromIntegratorsAcl = (groupType: 'rfqt' | 'plp' | 'rfqm'): string[] => {\r\n    return INTEGRATORS_ACL.filter((i) => i[groupType])\r\n        .flatMap((i) => i.apiKeys)\r\n        .sort();\r\n};\r\n\r\n/**\r\n * Gets the integrator ID for the provided label.\r\n */\r\nexport const getIntegratorIdFromLabel = (label: string): string | undefined => {\r\n    for (const integrator of INTEGRATORS_ACL) {\r\n        if (integrator.label === label) {\r\n            return integrator.integratorId;\r\n        }\r\n    }\r\n};\r\n\r\nexport type RfqWorkFlowType = 'rfqt' | 'rfqm';\r\nexport type RfqOrderType = 'rfq' | 'otc';\r\n\r\nexport const RFQ_MAKER_REFRESH_INTERVAL_MS: number = ONE_MINUTE_MS * 1;\r\n\r\n/**\r\n * The JSON config for each Market Maker, providing information including URLs, type of order supported and authentication.\r\n */\r\nexport interface RfqMakerConfig {\r\n    makerId: string;\r\n    label: string;\r\n    rfqmOrderTypes: RfqOrderType[];\r\n    rfqtOrderTypes: RfqOrderType[];\r\n    apiKeyHashes: string[];\r\n}\r\n\r\n/**\r\n * A Map type which map the makerId to the config object.\r\n */\r\nexport type MakerIdSet = Set</* makerId */ string>;\r\n\r\n/**\r\n * Generate a set of MakerIds that support a given order type for a given workflow\r\n */\r\nexport const getMakerIdSetForOrderType = (orderType: RfqOrderType | 'any', workflow: RfqWorkFlowType): MakerIdSet => {\r\n    const typesField = workflow === 'rfqt' ? 'rfqtOrderTypes' : 'rfqmOrderTypes';\r\n    return RFQ_MAKER_CONFIGS.reduce((acc, curr) => {\r\n        if (orderType === 'any' || curr[typesField].includes(orderType)) {\r\n            acc.add(curr.makerId);\r\n        }\r\n        return acc;\r\n    }, new Set</* makerId */ string>());\r\n};\r\n\r\n/**\r\n * A list of type RfqMakerConfig, read from the RFQ_MAKER_CONFIGS env variable\r\n */\r\nexport const RFQ_MAKER_CONFIGS: RfqMakerConfig[] = (() => {\r\n    try {\r\n        const makerConfigs = resolveEnvVar<RfqMakerConfig[]>('RFQ_MAKER_CONFIGS', EnvVarType.JsonStringList, []);\r\n        schemaUtils.validateSchema(makerConfigs, schemas.rfqMakerConfigListSchema);\r\n        return makerConfigs;\r\n    } catch (e) {\r\n        throw new Error(`RFQ_MAKER_CONFIGS was defined but is not valid JSON per the schema: ${e}`);\r\n    }\r\n})();\r\n\r\n// Log level for pino.js\r\nexport const LOG_LEVEL: string = _.isEmpty(process.env.LOG_LEVEL)\r\n    ? 'info'\r\n    : assertEnvVarType('LOG_LEVEL', process.env.LOG_LEVEL, EnvVarType.NonEmptyString);\r\n\r\n// Network port to listen on\r\nexport const HTTP_PORT = _.isEmpty(process.env.HTTP_PORT)\r\n    ? 3000\r\n    : assertEnvVarType('HTTP_PORT', process.env.HTTP_PORT, EnvVarType.Port);\r\n\r\n// Network port for the healthcheck service at /healthz, if not provided, it uses the HTTP_PORT value.\r\nexport const HEALTHCHECK_HTTP_PORT = _.isEmpty(process.env.HEALTHCHECK_HTTP_PORT)\r\n    ? HTTP_PORT\r\n    : assertEnvVarType('HEALTHCHECK_HTTP_PORT', process.env.HEALTHCHECK_HTTP_PORT, EnvVarType.Port);\r\n\r\n// Number of milliseconds of inactivity the servers waits for additional\r\n// incoming data aftere it finished writing last response before a socket will\r\n// be destroyed.\r\n// Ref: https://nodejs.org/api/http.html#http_server_keepalivetimeout\r\nexport const HTTP_KEEP_ALIVE_TIMEOUT = _.isEmpty(process.env.HTTP_KEEP_ALIVE_TIMEOUT)\r\n    ? 76 * 1000\r\n    : assertEnvVarType('HTTP_KEEP_ALIVE_TIMEOUT', process.env.HTTP_KEEP_ALIVE_TIMEOUT, EnvVarType.KeepAliveTimeout);\r\n\r\n// Limit the amount of time the parser will wait to receive the complete HTTP headers.\r\n// NOTE: This value HAS to be higher than HTTP_KEEP_ALIVE_TIMEOUT.\r\n// Ref: https://nodejs.org/api/http.html#http_server_headerstimeout\r\nexport const HTTP_HEADERS_TIMEOUT = _.isEmpty(process.env.HTTP_HEADERS_TIMEOUT)\r\n    ? 77 * 1000\r\n    : assertEnvVarType('HTTP_HEADERS_TIMEOUT', process.env.HTTP_HEADERS_TIMEOUT, EnvVarType.KeepAliveTimeout);\r\n\r\n// Default chain id to use when not specified\r\nexport const CHAIN_ID: ChainId = _.isEmpty(process.env.CHAIN_ID)\r\n    ? ChainId.Kovan\r\n    : assertEnvVarType('CHAIN_ID', process.env.CHAIN_ID, EnvVarType.ChainId);\r\n\r\nexport const KAFKA_BROKERS = _.isEmpty(process.env.KAFKA_BROKERS)\r\n    ? undefined\r\n    : assertEnvVarType('KAFKA_BROKERS', process.env.KAFKA_BROKERS, EnvVarType.StringList);\r\n\r\n// The fee recipient for orders\r\nexport const FEE_RECIPIENT_ADDRESS = _.isEmpty(process.env.FEE_RECIPIENT_ADDRESS)\r\n    ? NULL_ADDRESS\r\n    : assertEnvVarType('FEE_RECIPIENT_ADDRESS', process.env.FEE_RECIPIENT_ADDRESS, EnvVarType.ETHAddressHex);\r\n\r\nexport const POSTGRES_URI = _.isEmpty(process.env.POSTGRES_URI)\r\n    ? DEFAULT_LOCAL_POSTGRES_URI\r\n    : assertEnvVarType('POSTGRES_URI', process.env.POSTGRES_URI, EnvVarType.Url);\r\n\r\nexport const POSTGRES_READ_REPLICA_URIS: string[] | undefined = _.isEmpty(process.env.POSTGRES_READ_REPLICA_URIS)\r\n    ? undefined\r\n    : assertEnvVarType('POSTGRES_READ_REPLICA_URIS', process.env.POSTGRES_READ_REPLICA_URIS, EnvVarType.UrlList);\r\n\r\n// Environment name Sentry used to categorize issues and traces.\r\nexport const SENTRY_ENVIRONMENT = _.isEmpty(process.env.SENTRY_ENVIRONMENT)\r\n    ? DEFAULT_SENTRY_ENVIRONMENT\r\n    : assertEnvVarType('SENTRY_ENVIRONMENT', process.env.SENTRY_ENVIRONMENT, EnvVarType.NonEmptyString);\r\n\r\n// An Url with client key to access Sentry from client SDK.\r\nexport const SENTRY_DSN = _.isEmpty(process.env.SENTRY_DSN)\r\n    ? undefined\r\n    : assertEnvVarType('SENTRY_DSN', process.env.SENTRY_DSN, EnvVarType.Url);\r\n\r\n// API Key for Defined.fi's token price API\r\nexport const DEFINED_FI_API_KEY: string = _.isEmpty(process.env.DEFINED_FI_API_KEY)\r\n    ? ''\r\n    : assertEnvVarType('DEFINED_FI_API_KEY', process.env.DEFINED_FI_API_KEY, EnvVarType.NonEmptyString);\r\n\r\n// Endpoint for Defined.fi's token price API, default to https://api.defined.fi\r\nexport const DEFINED_FI_ENDPOINT: string = _.isEmpty(process.env.DEFINED_FI_ENDPOINT)\r\n    ? 'https://api.defined.fi'\r\n    : assertEnvVarType('DEFINED_FI_ENDPOINT', process.env.DEFINED_FI_ENDPOINT, EnvVarType.NonEmptyString);\r\n\r\n// API Key for 0x API (for ZeroExApiClient)\r\nexport const ZERO_EX_API_KEY: string = _.isEmpty(process.env.ZERO_EX_API_KEY)\r\n    ? ''\r\n    : assertEnvVarType('ZERO_EX_API_KEY', process.env.ZERO_EX_API_KEY, EnvVarType.NonEmptyString);\r\n\r\n// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n// eslint-disable-next-line @typescript-eslint/no-inferrable-types\r\nexport const TOKEN_PRICE_ORACLE_TIMEOUT: number = 1000;\r\n\r\n// Sampling rate of traces reported to Sentry. Should be a number between 0.0 and 1.0 (inclusive).\r\nexport const SENTRY_TRACES_SAMPLE_RATE = _.isEmpty(process.env.SENTRY_TRACES_SAMPLE_RATE)\r\n    ? 0\r\n    : assertEnvVarType('SENTRY_TRACES_SAMPLE_RATE', process.env.SENTRY_TRACES_SAMPLE_RATE, EnvVarType.Rate);\r\n\r\nexport const REDIS_URI = _.isEmpty(process.env.REDIS_URI) ? DEFAULT_LOCAL_REDIS_URI : process.env.REDIS_URI;\r\n\r\nexport const REDIS_BACKGROUND_JOB_URI = _.isEmpty(process.env.REDIS_BACKGROUND_JOB_URI)\r\n    ? DEFAULT_LOCAL_REDIS_URI\r\n    : process.env.REDIS_BACKGROUND_JOB_URI;\r\n\r\nexport const BACKGROUND_JOB_TYPES = _.isEmpty(process.env.BACKGROUND_JOB_TYPES)\r\n    ? DEFAULT_BACKGROUND_JOB_TYPES\r\n    : process.env.BACKGROUND_JOB_TYPES;\r\n\r\n// Should the logger include time field in the output logs, defaults to true.\r\nexport const LOGGER_INCLUDE_TIMESTAMP = _.isEmpty(process.env.LOGGER_INCLUDE_TIMESTAMP)\r\n    ? DEFAULT_LOGGER_INCLUDE_TIMESTAMP\r\n    : assertEnvVarType('LOGGER_INCLUDE_TIMESTAMP', process.env.LOGGER_INCLUDE_TIMESTAMP, EnvVarType.Boolean);\r\n\r\nexport const ALT_RFQ_MM_ENDPOINT: string | undefined = _.isEmpty(process.env.ALT_RFQ_MM_ENDPOINT)\r\n    ? undefined\r\n    : assertEnvVarType('ALT_RFQ_MM_ENDPOINT', process.env.ALT_RFQ_MM_ENDPOINT, EnvVarType.Url);\r\nexport const ALT_RFQ_MM_API_KEY: string | undefined = _.isEmpty(process.env.ALT_RFQ_MM_API_KEY)\r\n    ? undefined\r\n    : assertEnvVarType('ALT_RFQ_MM_API_KEY', process.env.ALT_RFQ_MM_API_KEY, EnvVarType.NonEmptyString);\r\nexport const ALT_RFQ_MM_PROFILE: string | undefined = _.isEmpty(process.env.ALT_RFQ_MM_PROFILE)\r\n    ? undefined\r\n    : assertEnvVarType('ALT_RFQ_MM_PROFILE', process.env.ALT_RFQ_MM_PROFILE, EnvVarType.NonEmptyString);\r\n\r\nexport const RFQM_API_KEY_WHITELIST: Set<string> = new Set(getApiKeyWhitelistFromIntegratorsAcl('rfqm'));\r\n\r\nexport const ADMIN_API_KEY: string | undefined = _.isEmpty(process.env.ADMIN_API_KEY)\r\n    ? undefined\r\n    : assertEnvVarType('ADMIN_API_KEY', process.env.ADMIN_API_KEY, EnvVarType.NonEmptyString);\r\n\r\nexport const REASON_ON_STATUS_ERROR_RESPONSE_ENABLED: boolean = _.isEmpty(\r\n    process.env.REASON_ON_STATUS_ERROR_RESPONSE_ENABLED,\r\n)\r\n    ? false\r\n    : assertEnvVarType(\r\n          'REASON_ON_STATUS_ERROR_RESPONSE_ENABLED',\r\n          process.env.REASON_ON_STATUS_ERROR_RESPONSE_ENABLED,\r\n          EnvVarType.Boolean,\r\n      );\r\n\r\nexport const TAKER_SPECIFIED_SIDE_ENABLED: boolean = _.isEmpty(process.env.TAKER_SPECIFIED_SIDE_ENABLED)\r\n    ? false\r\n    : assertEnvVarType('TAKER_SPECIFIED_SIDE_ENABLED', process.env.TAKER_SPECIFIED_SIDE_ENABLED, EnvVarType.Boolean);\r\n\r\nexport const RFQM_MAKER_ID_SET: MakerIdSet = getMakerIdSetForOrderType('any', 'rfqm');\r\nexport const RFQT_MAKER_ID_SET_FOR_RFQ_ORDER: MakerIdSet = getMakerIdSetForOrderType('rfq', 'rfqt');\r\nexport const RFQT_MAKER_ID_SET_FOR_OTC_ORDER: MakerIdSet = getMakerIdSetForOrderType('otc', 'rfqt');\r\nexport const RFQM_MAKER_ID_SET_FOR_OTC_ORDER: MakerIdSet = getMakerIdSetForOrderType('otc', 'rfqm');\r\n\r\n/**\r\n * A map from RFQ maker's api key hashes to maker ids.\r\n * Invalid hashes, which appear more than once in the config file and might resolve to different makers, are removed from the result.\r\n */\r\nexport const RFQ_API_KEY_HASH_TO_MAKER_ID: Map<string, string> = (() => {\r\n    const hashToIdCount = RFQ_MAKER_CONFIGS.reduce((result, rfqMakerConfig) => {\r\n        rfqMakerConfig.apiKeyHashes.forEach((hash) => result.set(hash, (result.get(hash) || 0) + 1));\r\n        return result;\r\n    }, new Map<string, number>());\r\n\r\n    return RFQ_MAKER_CONFIGS.reduce((result, mm) => {\r\n        mm.apiKeyHashes.forEach((hash) => {\r\n            // Ignore invalid hashes with more than one appearances\r\n            if (hashToIdCount.get(hash) === 1) {\r\n                result.set(hash, mm.makerId);\r\n            }\r\n        });\r\n        return result;\r\n    }, new Map<string, string>());\r\n})();\r\n\r\nexport const META_TX_WORKER_MNEMONIC: string | undefined = _.isEmpty(process.env.META_TX_WORKER_MNEMONIC)\r\n    ? undefined\r\n    : assertEnvVarType('META_TX_WORKER_MNEMONIC', process.env.META_TX_WORKER_MNEMONIC, EnvVarType.NonEmptyString);\r\n\r\nexport const RFQM_WORKER_GROUP_INDEX: number | undefined = _.isEmpty(process.env.RFQM_WORKER_GROUP_INDEX)\r\n    ? undefined\r\n    : assertEnvVarType('RFQM_WORKER_GROUP_INDEX', process.env.RFQM_WORKER_GROUP_INDEX, EnvVarType.Integer);\r\n\r\nexport const RFQM_WORKER_GROUP_SIZE: number | undefined = _.isEmpty(process.env.RFQM_WORKER_GROUP_SIZE)\r\n    ? undefined\r\n    : assertEnvVarType('RFQM_WORKER_GROUP_SIZE', process.env.RFQM_WORKER_GROUP_SIZE, EnvVarType.Integer);\r\n\r\n// If set to TRUE, system health will change to MAINTENANCE and integrators will be told to not\r\n// send RFQM orders.\r\n// tslint:disable-next-line boolean-naming\r\nexport const RFQM_MAINTENANCE_MODE: boolean = _.isEmpty(process.env.RFQM_MAINTENANCE_MODE)\r\n    ? false\r\n    : assertEnvVarType('RFQM_MAINTENANCE_MODE', process.env.RFQM_MAINTENANCE_MODE, EnvVarType.Boolean);\r\n\r\nexport const RFQ_PRICE_ENDPOINT_TIMEOUT_MS: number = _.isEmpty(process.env.RFQ_PRICE_ENDPOINT_TIMEOUT_MS)\r\n    ? 1000\r\n    : assertEnvVarType('RFQ_PRICE_ENDPOINT_TIMEOUT_MS', process.env.RFQ_PRICE_ENDPOINT_TIMEOUT_MS, EnvVarType.Integer);\r\n\r\nexport const RFQ_SIGN_ENDPOINT_TIMEOUT_MS = _.isEmpty(process.env.RFQ_SIGN_ENDPOINT_TIMEOUT_MS)\r\n    ? 2000\r\n    : assertEnvVarType('RFQ_SIGN_ENDPOINT_TIMEOUT_MS', process.env.RFQ_SIGN_ENDPOINT_TIMEOUT_MS, EnvVarType.Integer);\r\n\r\n// The expected time for a meta-txn to be included in a block.\r\nexport const META_TXN_RELAY_EXPECTED_MINED_SEC: number = _.isEmpty(process.env.META_TXN_RELAY_EXPECTED_MINED_SEC)\r\n    ? DEFAULT_EXPECTED_MINED_SEC\r\n    : assertEnvVarType(\r\n          'META_TXN_RELAY_EXPECTED_MINED_SEC',\r\n          process.env.META_TXN_RELAY_EXPECTED_MINED_SEC,\r\n          EnvVarType.Integer,\r\n      );\r\n\r\n// Whether or not prometheus metrics should be enabled.\r\n// tslint:disable-next-line:boolean-naming\r\nexport const ENABLE_PROMETHEUS_METRICS: boolean = _.isEmpty(process.env.ENABLE_PROMETHEUS_METRICS)\r\n    ? false\r\n    : assertEnvVarType('ENABLE_PROMETHEUS_METRICS', process.env.ENABLE_PROMETHEUS_METRICS, EnvVarType.Boolean);\r\n\r\nexport const PROMETHEUS_PORT: number = _.isEmpty(process.env.PROMETHEUS_PORT)\r\n    ? 8080\r\n    : assertEnvVarType('PROMETHEUS_PORT', process.env.PROMETHEUS_PORT, EnvVarType.Port);\r\n\r\n// Eth Gas Station URL\r\nexport const ETH_GAS_STATION_API_URL: string = _.isEmpty(process.env.ETH_GAS_STATION_API_URL)\r\n    ? DEFAULT_ETH_GAS_STATION_API_URL\r\n    : assertEnvVarType('ETH_GAS_STATION_API_URL', process.env.ETH_GAS_STATION_API_URL, EnvVarType.Url);\r\n\r\nexport const RFQ_PROXY_ADDRESS: string | undefined = _.isEmpty(process.env.RFQ_PROXY_ADDRESS)\r\n    ? undefined\r\n    : assertEnvVarType('RFQ_PROXY_ADDRESS', process.env.RFQ_PROXY_ADDRESS, EnvVarType.NonEmptyString);\r\n\r\nexport const RFQ_PROXY_PORT: number | undefined = _.isEmpty(process.env.RFQ_PROXY_PORT)\r\n    ? undefined\r\n    : assertEnvVarType('RFQ_PROXY_PORT', process.env.RFQ_PROXY_PORT, EnvVarType.Port);\r\n\r\n// tslint:disable-next-line boolean-naming\r\nexport const ENABLE_LLR_COOLDOWN: boolean = _.isEmpty(process.env.ENABLE_LLR_COOLDOWN)\r\n    ? false\r\n    : assertEnvVarType('ENABLE_LLR_COOLDOWN', process.env.ENABLE_LLR_COOLDOWN, EnvVarType.Boolean);\r\n\r\nexport const LLR_COOLDOWN_DURATION_SECONDS: number = _.isEmpty(process.env.LLR_COOLDOWN_DURATION_SECONDS)\r\n    ? 60\r\n    : assertEnvVarType('LLR_COOLDOWN_DURATION_SECONDS', process.env.LLR_COOLDOWN_DURATION_SECONDS, EnvVarType.Integer);\r\n\r\nexport const defaultHttpServiceConfig: HttpServiceConfig = {\r\n    httpPort: HTTP_PORT,\r\n    healthcheckHttpPort: HEALTHCHECK_HTTP_PORT,\r\n    healthcheckPath: HEALTHCHECK_PATH,\r\n    httpKeepAliveTimeout: HTTP_KEEP_ALIVE_TIMEOUT,\r\n    httpHeadersTimeout: HTTP_HEADERS_TIMEOUT,\r\n    enablePrometheusMetrics: ENABLE_PROMETHEUS_METRICS,\r\n    prometheusPort: PROMETHEUS_PORT,\r\n    prometheusPath: METRICS_PATH,\r\n};\r\n\r\nexport const getIntegratorByIdOrThrow = (\r\n    (integratorsMap: Map<string, Integrator>) =>\r\n    (integratorId: string): Integrator => {\r\n        const integrator = integratorsMap.get(integratorId);\r\n        if (!integrator) {\r\n            throw new Error(`Integrator ${integratorId} does not exist.`);\r\n        }\r\n        return integrator;\r\n    }\r\n)(transformIntegratorsAcl(INTEGRATORS_ACL, 'integratorId'));\r\n\r\n/**\r\n * Gets the integrator ID for a given API key. If the API key is not in the configuration, returns `undefined`.\r\n */\r\nexport const getIntegratorIdForApiKey = (\r\n    (integratorsMap: Map<string, Integrator>) =>\r\n    (apiKey: string): string | undefined => {\r\n        const integrator = integratorsMap.get(apiKey);\r\n        return integrator?.integratorId;\r\n    }\r\n)(transformIntegratorsAcl(INTEGRATORS_ACL, 'apiKeys'));\r\n\r\n/**\r\n * Utility function to transform INTEGRATORS_ACL into a map of apiKey => integrator. The result can\r\n * be used to optimize the lookup of the integrator when a request comes in with an api key. Lookup complexity\r\n * becomes O(1) with the map instead of O(# integrators * # api keys) with the array.\r\n *\r\n * @param integrators the integrators map from the environment variable\r\n * @param keyBy either apiKeys (creates map keyed by every API key) or 'integratorId' (integratorId => Integrator)\r\n */\r\nfunction transformIntegratorsAcl(\r\n    integrators: IntegratorsAcl,\r\n    keyBy: 'apiKeys' | 'integratorId',\r\n): Map<string, Integrator> {\r\n    const result = new Map<string, Integrator>();\r\n    integrators.forEach((integrator) => {\r\n        let mapKeys: string[];\r\n        switch (keyBy) {\r\n            case 'apiKeys':\r\n                mapKeys = integrator.apiKeys;\r\n                break;\r\n            case 'integratorId':\r\n                mapKeys = [integrator.integratorId];\r\n                break;\r\n            default:\r\n                throw new Error(`Parameter \"${keyBy}\" is misconfigured`);\r\n        }\r\n        mapKeys.forEach((apiKey) => {\r\n            result.set(apiKey, integrator);\r\n        });\r\n    });\r\n    return result;\r\n}\r\n\r\n/**\r\n * RPC\r\n */\r\nexport const META_TRANSACTION_SERVICE_RPC_URL: string = _.isEmpty(process.env.META_TRANSACTION_SERVICE_RPC_URL)\r\n    ? ''\r\n    : assertEnvVarType(\r\n          'META_TRANSACTION_SERVICE_RPC_URL',\r\n          process.env.META_TRANSACTION_SERVICE_RPC_URL,\r\n          EnvVarType.Url,\r\n      );\r\n\r\n/**\r\n * Resolves a config of type T for an Enviornment Variable. Checks:\r\n *  - If the env variable is undefined, use the hardcoded fallback\r\n *  - If the env variable points to a filepath, resolve it\r\n *  - Otherwise, just use the env variable\r\n *\r\n * @param envVar - the name of the Environment Variable\r\n * @param envVarType - the type\r\n * @param fallback  - A hardcoded fallback value\r\n * @returns The config\r\n */\r\nfunction resolveEnvVar<T>(envVar: string, envVarType: EnvVarType, fallback: T): T {\r\n    const rawEnvVar = process.env[envVar];\r\n    if (rawEnvVar === undefined || _.isEmpty(rawEnvVar)) {\r\n        return fallback;\r\n    }\r\n\r\n    // If the enviornment variable points to a file\r\n    if (fs.existsSync(rawEnvVar)) {\r\n        return JSON.parse(fs.readFileSync(rawEnvVar, 'utf8'));\r\n    }\r\n\r\n    return assertEnvVarType(envVar, process.env[envVar], envVarType);\r\n}\r\n\r\n// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction assertEnvVarType(name: string, value: any, expectedType: EnvVarType): any {\r\n    let returnValue;\r\n    switch (expectedType) {\r\n        case EnvVarType.Port:\r\n            returnValue = parseInt(value, 10);\r\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n            // eslint-disable-next-line no-case-declarations\r\n            const isWithinRange = returnValue >= 0 && returnValue <= 65535;\r\n            if (isNaN(returnValue) || !isWithinRange) {\r\n                throw new Error(`${name} must be between 0 to 65535, found ${value}.`);\r\n            }\r\n            return returnValue;\r\n        case EnvVarType.ChainId:\r\n        case EnvVarType.KeepAliveTimeout:\r\n        case EnvVarType.Integer:\r\n            returnValue = parseInt(value, 10);\r\n            if (isNaN(returnValue)) {\r\n                throw new Error(`${name} must be a valid integer, found ${value}.`);\r\n            }\r\n            return returnValue;\r\n        case EnvVarType.ETHAddressHex:\r\n            assert.isETHAddressHex(name, value);\r\n            return value;\r\n        case EnvVarType.Url:\r\n            assert.isUri(name, value);\r\n            return value;\r\n        case EnvVarType.UrlList:\r\n            assert.isString(name, value);\r\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n            // eslint-disable-next-line no-case-declarations\r\n            const urlList = (value as string).split(',');\r\n            urlList.forEach((url, i) => assert.isUri(`${name}[${i}]`, url));\r\n            return urlList;\r\n        case EnvVarType.Boolean:\r\n            return value === 'true';\r\n        case EnvVarType.UnitAmount:\r\n            returnValue = new BigNumber(parseFloat(value));\r\n            if (returnValue.isNaN() || returnValue.isNegative()) {\r\n                throw new Error(`${name} must be valid number greater than 0.`);\r\n            }\r\n            return returnValue;\r\n        case EnvVarType.Rate:\r\n            returnValue = parseFloat(value);\r\n            if (returnValue < 0 || returnValue > 1) {\r\n                throw new Error(`${name} must be valid number between 0.0 and 1.0.`);\r\n            }\r\n            return returnValue;\r\n        case EnvVarType.AddressList:\r\n            assert.isString(name, value);\r\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n            // eslint-disable-next-line no-case-declarations\r\n            const addressList = (value as string).split(',').map((a) => a.toLowerCase());\r\n            addressList.forEach((a, i) => assert.isETHAddressHex(`${name}[${i}]`, a));\r\n            return addressList;\r\n        case EnvVarType.StringList:\r\n            assert.isString(name, value);\r\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n            // eslint-disable-next-line no-case-declarations\r\n            const stringList = (value as string).split(',');\r\n            return stringList;\r\n        case EnvVarType.WhitelistAllTokens:\r\n            return '*';\r\n        case EnvVarType.NonEmptyString:\r\n            assert.isString(name, value);\r\n            if (value === '') {\r\n                throw new Error(`${name} must be supplied`);\r\n            }\r\n            return value;\r\n        case EnvVarType.APIKeys:\r\n            assert.isString(name, value);\r\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n            // eslint-disable-next-line no-case-declarations\r\n            const apiKeys = (value as string).split(',');\r\n            apiKeys.forEach((apiKey) => {\r\n                const isValidUUID = validateUUID(apiKey);\r\n                if (!isValidUUID) {\r\n                    throw new Error(`API Key ${apiKey} isn't UUID compliant`);\r\n                }\r\n            });\r\n            return apiKeys;\r\n        case EnvVarType.JsonStringList:\r\n            assert.isString(name, value);\r\n            return JSON.parse(value);\r\n        case EnvVarType.RfqMakerAssetOfferings:\r\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n            // eslint-disable-next-line no-case-declarations\r\n            const offerings: RfqMakerAssetOfferings = JSON.parse(value);\r\n            // tslint:disable-next-line:forin\r\n            for (const makerEndpoint in offerings) {\r\n                assert.isWebUri('market maker endpoint', makerEndpoint);\r\n\r\n                const assetOffering = offerings[makerEndpoint];\r\n                assert.isArray(`value in maker endpoint mapping, for index ${makerEndpoint},`, assetOffering);\r\n                assetOffering.forEach((assetPair, i) => {\r\n                    assert.isArray(`asset pair array ${i} for maker endpoint ${makerEndpoint}`, assetPair);\r\n                    assert.assert(\r\n                        assetPair.length === 2,\r\n                        `asset pair array ${i} for maker endpoint ${makerEndpoint} does not consist of exactly two elements.`,\r\n                    );\r\n                    assert.isETHAddressHex(\r\n                        `first token address for asset pair ${i} for maker endpoint ${makerEndpoint}`,\r\n                        assetPair[0],\r\n                    );\r\n                    assert.isETHAddressHex(\r\n                        `second token address for asset pair ${i} for maker endpoint ${makerEndpoint}`,\r\n                        assetPair[1],\r\n                    );\r\n                    assert.assert(\r\n                        assetPair[0] !== assetPair[1],\r\n                        `asset pair array ${i} for maker endpoint ${makerEndpoint} has identical assets`,\r\n                    );\r\n                });\r\n            }\r\n            return offerings;\r\n        case EnvVarType.LiquidityProviderRegistry:\r\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n            // eslint-disable-next-line no-case-declarations\r\n            const registry: LiquidityProviderRegistry = JSON.parse(value);\r\n            // tslint:disable-next-line:forin\r\n            for (const liquidityProvider in registry) {\r\n                assert.isETHAddressHex('liquidity provider address', liquidityProvider);\r\n\r\n                const { tokens } = registry[liquidityProvider];\r\n                assert.isArray(`token list for liquidity provider ${liquidityProvider}`, tokens);\r\n                tokens.forEach((token, i) => {\r\n                    assert.isETHAddressHex(`address of token ${i} for liquidity provider ${liquidityProvider}`, token);\r\n                });\r\n                // TODO jacob validate gas cost callback in registry\r\n                // assert.isNumber(`gas cost for liquidity provider ${liquidityProvider}`, gasCost);\r\n            }\r\n            return registry;\r\n\r\n        default:\r\n            throw new Error(`Unrecognised EnvVarType: ${expectedType} encountered for variable ${name}.`);\r\n    }\r\n}\r\n"],"version":3}