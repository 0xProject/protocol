{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/services/WorkerService.test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/services/WorkerService.test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\r\n// tslint:disable:no-empty\r\n// tslint:disable:max-file-line-count\r\n\r\nimport { pino } from '@0x/api-utils';\r\nimport { QuoteRequestor, SignatureType } from '@0x/asset-swapper';\r\nimport { getContractAddressesForChainOrThrow } from '@0x/contract-addresses';\r\nimport { OtcOrder } from '@0x/protocol-utils';\r\nimport { BigNumber } from '@0x/utils';\r\nimport { expect } from 'chai';\r\nimport { BigNumber as EthersBigNumber, providers } from 'ethers';\r\nimport * as _ from 'lodash';\r\nimport { Producer } from 'sqs-producer';\r\nimport { anything, capture, deepEqual, instance, mock, spy, verify, when } from 'ts-mockito';\r\n\r\nimport { ETH_DECIMALS, GWEI_DECIMALS, ONE_SECOND_MS } from '../../src/core/constants';\r\nimport {\r\n    MetaTransactionJobEntity,\r\n    RfqmJobEntity,\r\n    RfqmTransactionSubmissionEntity,\r\n    RfqmV2JobEntity,\r\n    RfqmV2QuoteEntity,\r\n    RfqmV2TransactionSubmissionEntity,\r\n} from '../../src/entities';\r\nimport { MetaTransactionJobConstructorOpts } from '../../src/entities/MetaTransactionJobEntity';\r\nimport {\r\n    MetaTransactionSubmissionEntity,\r\n    MetaTransactionSubmissionEntityConstructorOpts,\r\n} from '../../src/entities/MetaTransactionSubmissionEntity';\r\nimport {\r\n    RfqmJobStatus,\r\n    RfqmOrderTypes,\r\n    RfqmTransactionSubmissionStatus,\r\n    RfqmTransactionSubmissionType,\r\n    SubmissionContextStatus,\r\n} from '../../src/entities/types';\r\nimport { logger } from '../../src/logger';\r\nimport { RfqMakerBalanceCacheService } from '../../src/services/rfq_maker_balance_cache_service';\r\nimport { WorkerService } from '../../src/services/WorkerService';\r\nimport { CacheClient } from '../../src/utils/cache_client';\r\nimport { GasStationAttendant } from '../../src/utils/GasStationAttendant';\r\nimport { GasStationAttendantEthereum } from '../../src/utils/GasStationAttendantEthereum';\r\nimport { QuoteServerClient } from '../../src/utils/quote_server_client';\r\nimport { RfqmDbUtils } from '../../src/utils/rfqm_db_utils';\r\nimport { RfqBlockchainUtils } from '../../src/utils/rfq_blockchain_utils';\r\nimport { RfqMakerManager } from '../../src/utils/rfq_maker_manager';\r\nimport { padSignature } from '../../src/utils/signature_utils';\r\nimport { SubmissionContext } from '../../src/utils/SubmissionContext';\r\nimport {\r\n    MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\r\n    MOCK_EXECUTE_META_TRANSACTION_CALLDATA,\r\n    MOCK_META_TRANSACTION,\r\n} from '../constants';\r\n\r\n// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n// eslint-disable-next-line @typescript-eslint/no-loss-of-precision\r\nconst NEVER_EXPIRES = new BigNumber(9999999999999999);\r\nconst MOCK_WORKER_REGISTRY_ADDRESS = '0x1023331a469c6391730ff1E2749422CE8873EC38';\r\nconst MOCK_GAS_PRICE = new BigNumber(100);\r\nconst MOCK_MM_URI = 'https://mm-address';\r\nconst TEST_RFQM_TRANSACTION_WATCHER_SLEEP_TIME_MS = 50;\r\nconst WORKER_FULL_BALANCE_WEI = new BigNumber(1).shiftedBy(ETH_DECIMALS);\r\nlet loggerSpy: pino.Logger;\r\n\r\nconst buildWorkerServiceForUnitTest = (\r\n    overrides: {\r\n        cacheClient?: CacheClient;\r\n        dbUtils?: RfqmDbUtils;\r\n        rfqMakerBalanceCacheService?: RfqMakerBalanceCacheService;\r\n        rfqMakerManager?: RfqMakerManager;\r\n        gasStationAttendant?: GasStationAttendant;\r\n        quoteServerClient?: QuoteServerClient;\r\n        rfqBlockchainUtils?: RfqBlockchainUtils;\r\n        initialMaxPriorityFeePerGasGwei?: number;\r\n        maxFeePerGasGwei?: number;\r\n        enableAccessList?: boolean;\r\n    } = {},\r\n): WorkerService => {\r\n    const contractAddresses = getContractAddressesForChainOrThrow(1);\r\n    const quoteRequestorMock = mock(QuoteRequestor);\r\n    when(\r\n        quoteRequestorMock.requestRfqmIndicativeQuotesAsync(\r\n            anything(),\r\n            anything(),\r\n            anything(),\r\n            anything(),\r\n            anything(),\r\n            anything(),\r\n        ),\r\n    ).thenResolve([\r\n        {\r\n            makerToken: contractAddresses.zrxToken,\r\n            makerAmount: new BigNumber(101),\r\n            takerToken: contractAddresses.etherToken,\r\n            takerAmount: new BigNumber(100),\r\n            expiry: NEVER_EXPIRES,\r\n            makerUri: MOCK_MM_URI,\r\n        },\r\n    ]);\r\n\r\n    const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n    when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(MOCK_GAS_PRICE);\r\n    const gasStationAttendantInstance = instance(gasStationAttendantMock);\r\n\r\n    const rfqBlockchainUtilsMock = mock(RfqBlockchainUtils);\r\n    when(rfqBlockchainUtilsMock.getAccountBalanceAsync(MOCK_WORKER_REGISTRY_ADDRESS)).thenResolve(\r\n        WORKER_FULL_BALANCE_WEI,\r\n    );\r\n    const sqsMock = mock(Producer);\r\n    when(sqsMock.queueSize()).thenResolve(0);\r\n    const quoteServerClientMock = mock(QuoteServerClient);\r\n\r\n    const cacheClientMock = mock(CacheClient);\r\n    const defaultDbUtilsMock = mock(RfqmDbUtils);\r\n    const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\r\n    const rfqMakerManagerMock = mock(RfqMakerManager);\r\n\r\n    return new WorkerService(\r\n        1,\r\n        overrides.gasStationAttendant || gasStationAttendantInstance,\r\n        MOCK_WORKER_REGISTRY_ADDRESS,\r\n        overrides.rfqBlockchainUtils || instance(rfqBlockchainUtilsMock),\r\n        overrides.dbUtils || instance(defaultDbUtilsMock),\r\n        overrides.quoteServerClient || quoteServerClientMock,\r\n        TEST_RFQM_TRANSACTION_WATCHER_SLEEP_TIME_MS,\r\n        overrides.cacheClient || cacheClientMock,\r\n        overrides.rfqMakerBalanceCacheService || instance(rfqMakerBalanceCacheServiceMock),\r\n        overrides.rfqMakerManager || rfqMakerManagerMock,\r\n        overrides.initialMaxPriorityFeePerGasGwei || 2,\r\n        overrides.maxFeePerGasGwei || 128,\r\n        overrides.enableAccessList,\r\n    );\r\n};\r\n\r\nconst createMeaTrsanctionJobEntity = (\r\n    opts: MetaTransactionJobConstructorOpts,\r\n    id: string,\r\n): MetaTransactionJobEntity => {\r\n    const job = new MetaTransactionJobEntity(opts);\r\n    job.id = id;\r\n    return job;\r\n};\r\n\r\nconst createMetaTransactionSubmissionEntity = (\r\n    opts: MetaTransactionSubmissionEntityConstructorOpts,\r\n    id: string,\r\n): MetaTransactionSubmissionEntity => {\r\n    const submission = new MetaTransactionSubmissionEntity(opts);\r\n    submission.id = id;\r\n    return submission;\r\n};\r\n\r\nconst fakeClockMs = 1637722898000;\r\nconst fakeOneMinuteAgoS = fakeClockMs / ONE_SECOND_MS - 60;\r\nconst fakeFiveMinutesLater = fakeClockMs / ONE_SECOND_MS + 300;\r\n\r\nconst maker = '0xbb004090d26845b672f17c6da4b7d162df3bfc5e';\r\nconst orderHash = '0x112160fb0933ecde720f63b50b303ce64e52ded702bef78b9c20361f3652a462';\r\n\r\n// This sig actually belongs to the maker above\r\nconst validEIP712Sig = {\r\n    signatureType: SignatureType.EIP712,\r\n    v: 28,\r\n    r: '0xdc158f7b53b940863bc7b001552a90282e51033f29b73d44a2701bd16faa19d2',\r\n    s: '0x55f6c5470e41b39a5ddeb63c22f8ba1d34748f93265715b9dc4a0f10138985a6',\r\n};\r\n\r\n// This is a real signature that had a missing byte\r\nconst missingByteSig = {\r\n    r: '0x568b31076e1c65954adb1bccc723718b3460f1b699ce1252f8a83bda0d521005',\r\n    s: '0x0307cc7f4161df812f7e5a651b23dbd33981c0410df0dd820a52f61be7a5ab',\r\n    v: 28,\r\n    signatureType: SignatureType.EthSign,\r\n};\r\n\r\njest.setTimeout(ONE_SECOND_MS * 120);\r\n\r\ndescribe('WorkerService', () => {\r\n    beforeEach(() => {\r\n        loggerSpy = spy(logger);\r\n    });\r\n\r\n    describe('workerBeforeLogicAsync', () => {\r\n        it('calls `processJobAsync` with the correct arguments', async () => {\r\n            const workerIndex = 0;\r\n            const workerAddress = MOCK_WORKER_REGISTRY_ADDRESS;\r\n            const jobId = 'jobId';\r\n            const metaTransactionJob = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeFiveMinutesLater),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: '0xinputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                },\r\n                jobId,\r\n            );\r\n            const rfqmV2Job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker,\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash,\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress,\r\n            });\r\n\r\n            const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n            when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n\r\n            const blockchainUtilsMock = mock(RfqBlockchainUtils);\r\n            when(blockchainUtilsMock.getAccountBalanceAsync(workerAddress)).thenResolve(WORKER_FULL_BALANCE_WEI);\r\n\r\n            const dbUtilsMock = mock(RfqmDbUtils);\r\n            when(dbUtilsMock.findV2UnresolvedJobsAsync(workerAddress, anything())).thenResolve([rfqmV2Job]);\r\n            when(dbUtilsMock.findUnresolvedMetaTransactionJobsAsync(workerAddress, anything())).thenResolve([\r\n                metaTransactionJob,\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(dbUtilsMock),\r\n                rfqBlockchainUtils: instance(blockchainUtilsMock),\r\n                gasStationAttendant: instance(gasStationAttendantMock),\r\n            });\r\n            const spiedRfqmService = spy(rfqmService);\r\n            when(spiedRfqmService.processJobAsync(anything(), anything(), anything())).thenResolve();\r\n\r\n            await rfqmService.workerBeforeLogicAsync(workerIndex, workerAddress);\r\n            verify(spiedRfqmService.processJobAsync(orderHash, workerAddress, 'rfqm_v2_job')).once();\r\n            verify(spiedRfqmService.processJobAsync(jobId, workerAddress, 'meta_transaction_job')).once();\r\n        });\r\n    });\r\n\r\n    describe('processJobAsync', () => {\r\n        it('fails if no rfqm v2 job is found', async () => {\r\n            // Return `undefined` for v1 and v2 job for orderhash\r\n            const dbUtilsMock = mock(RfqmDbUtils);\r\n            when(dbUtilsMock.findV2JobByOrderHashAsync('0xorderhash')).thenResolve(null);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\r\n\r\n            await rfqmService.processJobAsync('0xorderhash', '0xworkeraddress');\r\n            expect(capture(loggerSpy.error).last()[0]).to.include({\r\n                errorMessage: 'No job found for identifier',\r\n            });\r\n        });\r\n\r\n        it('fails if a worker ends up with a job assigned to a different worker for a rfqm v2 job', async () => {\r\n            const dbUtilsMock = mock(RfqmDbUtils);\r\n            when(dbUtilsMock.findV2JobByOrderHashAsync('0xorderhash')).thenResolve(\r\n                new RfqmV2JobEntity({\r\n                    affiliateAddress: '',\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeOneMinuteAgoS),\r\n                    fee: {\r\n                        amount: '0',\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    integratorId: '',\r\n                    lastLookResult: null,\r\n                    makerUri: 'http://foo.bar',\r\n                    order: {\r\n                        order: {\r\n                            chainId: '1',\r\n                            expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                                new BigNumber(fakeOneMinuteAgoS.toString()),\r\n                                new BigNumber(1),\r\n                                new BigNumber(1),\r\n                            ).toString(),\r\n                            maker: '',\r\n                            makerAmount: '',\r\n                            makerToken: '',\r\n                            taker: '',\r\n                            takerAmount: '',\r\n                            takerToken: '',\r\n                            txOrigin: '',\r\n                            verifyingContract: '',\r\n                        },\r\n                        type: RfqmOrderTypes.Otc,\r\n                    },\r\n                    orderHash: '0xorderhash',\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    updatedAt: new Date(),\r\n                    workerAddress: '0xwrongworkeraddress',\r\n                }),\r\n            );\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\r\n\r\n            await rfqmService.processJobAsync('0xorderhash', '0xworkeraddress');\r\n            expect(capture(loggerSpy.error).last()[0]).to.include({\r\n                errorMessage: 'Worker was sent a job claimed by a different worker',\r\n            });\r\n        });\r\n\r\n        it('fails if no meta-transaction job is found', async () => {\r\n            const dbUtilsMock = mock(RfqmDbUtils);\r\n            const jobId = 'jobId';\r\n            when(dbUtilsMock.findMetaTransactionJobByIdAsync(jobId)).thenResolve(null);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\r\n\r\n            await rfqmService.processJobAsync(jobId, '0xworkeraddress', 'meta_transaction_job');\r\n            expect(capture(loggerSpy.error).last()[0]).to.include({\r\n                errorMessage: 'No job found for identifier',\r\n            });\r\n        });\r\n\r\n        it('fails if a worker ends up with a job assigned to a different worker for a meta-transaction job', async () => {\r\n            const jobId = 'jobId';\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeFiveMinutesLater),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: 'inputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xwrongworkeraddress',\r\n                    approval: MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\r\n                    approvalSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                },\r\n                jobId,\r\n            );\r\n\r\n            const dbUtilsMock = mock(RfqmDbUtils);\r\n            when(dbUtilsMock.findMetaTransactionJobByIdAsync(jobId)).thenResolve(job);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({ dbUtils: instance(dbUtilsMock) });\r\n\r\n            await rfqmService.processJobAsync(jobId, '0xworkeraddress', 'meta_transaction_job');\r\n            expect(capture(loggerSpy.error).last()[0]).to.include({\r\n                errorMessage: 'Worker was sent a job claimed by a different worker',\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('processApprovalAndTradeAsync', () => {\r\n        it('throws if non-approval job is supplied to the method for a rfqm v2 job', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest();\r\n\r\n            try {\r\n                await rfqmService.processApprovalAndTradeAsync(job, '0xworkeraddress');\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain(\r\n                    'Non-approval job should not be processed by `processApprovalAndTradeAsync`',\r\n                );\r\n            }\r\n        });\r\n\r\n        it('should not proceed to trade transaction if the status of approval transaction is not `SucceededConfirmed` for a rfqm v2 job', async () => {\r\n            const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(nowS + 10),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(nowS + 10),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker,\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash,\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n                approval: MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\r\n                approvalSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n            });\r\n            const mockPresubmitTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                createdAt: new Date(1233),\r\n                from: '0xworkeraddress',\r\n                maxFeePerGas: new BigNumber(100000),\r\n                maxPriorityFeePerGas: new BigNumber(100),\r\n                nonce: 0,\r\n                orderHash: '0xorderhash',\r\n                status: RfqmTransactionSubmissionStatus.Submitted,\r\n                to: '0xexchangeproxyaddress',\r\n                transactionHash: '0xpresubmittransactionhash',\r\n                type: RfqmTransactionSubmissionType.Approval,\r\n            });\r\n            const mockTransactionReceipt: providers.TransactionReceipt = {\r\n                blockHash: '0xblockhash',\r\n                blockNumber: 1,\r\n                byzantium: true,\r\n                confirmations: 3,\r\n                contractAddress: '0xexchangeproxyaddress',\r\n                cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                effectiveGasPrice: EthersBigNumber.from(1000),\r\n                from: '0xworkeraddress',\r\n                gasUsed: EthersBigNumber.from(10000),\r\n                logs: [],\r\n                logsBloom: '',\r\n                status: 0,\r\n                to: '0xexchangeproxyaddress',\r\n                transactionHash: '0xpresubmittransactionhash',\r\n                transactionIndex: 0,\r\n                type: 2,\r\n            };\r\n            const mockMinedBlock: providers.Block = {\r\n                _difficulty: EthersBigNumber.from(2),\r\n                difficulty: 2,\r\n                extraData: '',\r\n                gasLimit: EthersBigNumber.from(1000),\r\n                gasUsed: EthersBigNumber.from(1000),\r\n                hash: '0xblockhash',\r\n                miner: '0xminer',\r\n                nonce: '0x000',\r\n                number: 21,\r\n                parentHash: '0xparentblockhash',\r\n                timestamp: 12345,\r\n                transactions: ['0xpresubmittransactionhash'],\r\n            };\r\n            const mockNonce = 0;\r\n\r\n            const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n            when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            // when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(anything())).thenResolve([]);\r\n            when(\r\n                mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                    anything(),\r\n                    RfqmTransactionSubmissionType.Approval,\r\n                ),\r\n            ).thenResolve([mockPresubmitTransaction]);\r\n            const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n\r\n            const mockQuoteServerClient = mock(QuoteServerClient);\r\n            when(mockQuoteServerClient.signV2Async(anything(), anything(), anything())).thenResolve(validEIP712Sig);\r\n\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.isValidOrderSignerAsync(anything(), anything())).thenResolve(true);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            when(mockBlockchainUtils.getTokenBalancesAsync(anything())).thenResolve([new BigNumber(1000000000)]);\r\n            when(mockBlockchainUtils.generateApprovalCalldataAsync(anything(), anything(), anything())).thenResolve(\r\n                '0xcalldata',\r\n            );\r\n            when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n            when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xpresubmittransactionhash']))).thenResolve([\r\n                mockTransactionReceipt,\r\n            ]);\r\n            when(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);\r\n            when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n            when(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs(anything())).thenReturn({\r\n                event: '',\r\n                logIndex: null,\r\n                transactionIndex: null,\r\n                transactionHash: '',\r\n                blockHash: '',\r\n                address: '',\r\n                data: '',\r\n                blockNumber: 0,\r\n                topics: [],\r\n                args: {\r\n                    maker: '',\r\n                    makerToken: '',\r\n                    makerTokenFilledAmount: new BigNumber(1234),\r\n                    orderHash: '',\r\n                    pool: '',\r\n                    taker: '',\r\n                    takerToken: '',\r\n                    takerTokenFilledAmount: new BigNumber(5),\r\n                },\r\n            });\r\n\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                quoteServerClient: instance(mockQuoteServerClient),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            await rfqmService.processApprovalAndTradeAsync(job, '0xworkeraddress');\r\n            expect(updateRfqmJobCalledArgs[0].status).to.equal(RfqmJobStatus.PendingProcessing);\r\n            expect(updateRfqmJobCalledArgs[1].status).to.equal(RfqmJobStatus.PendingLastLookAccepted);\r\n            expect(updateRfqmJobCalledArgs[updateRfqmJobCalledArgs.length - 1].status).to.equal(\r\n                RfqmJobStatus.FailedRevertedConfirmed,\r\n            );\r\n            expect(job.status).to.equal(RfqmJobStatus.FailedRevertedConfirmed);\r\n        });\r\n\r\n        it('should proceed to trade transaction if the status of approval transaction is `SucceededConfirmed` for a rfqm v2 job', async () => {\r\n            const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(nowS + 10),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(nowS + 10),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker,\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash,\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n                approval: MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\r\n                approvalSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n            });\r\n            const mockPresubmitApprovalTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                createdAt: new Date(1233),\r\n                from: '0xworkeraddress',\r\n                maxFeePerGas: new BigNumber(100000),\r\n                maxPriorityFeePerGas: new BigNumber(100),\r\n                nonce: 0,\r\n                orderHash: '0xorderhash',\r\n                status: RfqmTransactionSubmissionStatus.Submitted,\r\n                to: '0xexchangeproxyaddress',\r\n                transactionHash: '0xpresubmittransactionhash',\r\n                type: RfqmTransactionSubmissionType.Approval,\r\n            });\r\n            const mockPresubmitTradeTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                createdAt: new Date(1233),\r\n                from: '0xworkeraddress',\r\n                maxFeePerGas: new BigNumber(100000),\r\n                maxPriorityFeePerGas: new BigNumber(100),\r\n                nonce: 0,\r\n                orderHash: '0xorderhash',\r\n                status: RfqmTransactionSubmissionStatus.Submitted,\r\n                to: '0xexchangeproxyaddress',\r\n                transactionHash: '0xpresubmittransactionhash',\r\n                type: RfqmTransactionSubmissionType.Trade,\r\n            });\r\n            const mockTransactionReceipt: providers.TransactionReceipt = {\r\n                blockHash: '0xblockhash',\r\n                blockNumber: 1,\r\n                byzantium: true,\r\n                confirmations: 3,\r\n                contractAddress: '0xexchangeproxyaddress',\r\n                cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                effectiveGasPrice: EthersBigNumber.from(1000),\r\n                from: '0xworkeraddress',\r\n                gasUsed: EthersBigNumber.from(10000),\r\n                logs: [],\r\n                logsBloom: '',\r\n                status: 1,\r\n                to: '0xexchangeproxyaddress',\r\n                transactionHash: '0xpresubmittransactionhash',\r\n                transactionIndex: 0,\r\n                type: 2,\r\n            };\r\n            const mockMinedBlock: providers.Block = {\r\n                _difficulty: EthersBigNumber.from(2),\r\n                difficulty: 2,\r\n                extraData: '',\r\n                gasLimit: EthersBigNumber.from(1000),\r\n                gasUsed: EthersBigNumber.from(1000),\r\n                hash: '0xblockhash',\r\n                miner: '0xminer',\r\n                nonce: '0x000',\r\n                number: 21,\r\n                parentHash: '0xparentblockhash',\r\n                timestamp: 12345,\r\n                transactions: ['0xpresubmittransactionhash'],\r\n            };\r\n            const mockNonce = 0;\r\n\r\n            const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n            when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            // when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(anything())).thenResolve([]);\r\n            when(\r\n                mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                    anything(),\r\n                    RfqmTransactionSubmissionType.Approval,\r\n                ),\r\n            ).thenResolve([mockPresubmitApprovalTransaction]);\r\n            when(\r\n                mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                    anything(),\r\n                    RfqmTransactionSubmissionType.Trade,\r\n                ),\r\n            ).thenResolve([mockPresubmitTradeTransaction]);\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(anything())).thenResolve([\r\n                mockPresubmitTradeTransaction,\r\n            ]);\r\n            const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n\r\n            const mockQuoteServerClient = mock(QuoteServerClient);\r\n            when(mockQuoteServerClient.signV2Async(anything(), anything(), anything())).thenResolve(validEIP712Sig);\r\n\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.isValidOrderSignerAsync(anything(), anything())).thenResolve(true);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            when(mockBlockchainUtils.getTokenBalancesAsync(anything())).thenResolve([new BigNumber(1000000000)]);\r\n            when(\r\n                mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenResolve(0);\r\n            when(\r\n                mockBlockchainUtils.generateTakerSignedOtcOrderCallData(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenReturn('0xcalldata');\r\n            when(mockBlockchainUtils.generateApprovalCalldataAsync(anything(), anything(), anything())).thenResolve(\r\n                '0xcalldata',\r\n            );\r\n            when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n            when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xpresubmittransactionhash']))).thenResolve([\r\n                mockTransactionReceipt,\r\n            ]);\r\n            when(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);\r\n            when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n            when(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs(anything())).thenReturn({\r\n                event: '',\r\n                logIndex: null,\r\n                transactionIndex: null,\r\n                transactionHash: '',\r\n                blockHash: '',\r\n                address: '',\r\n                data: '',\r\n                blockNumber: 0,\r\n                topics: [],\r\n                args: {\r\n                    maker: '',\r\n                    makerToken: '',\r\n                    makerTokenFilledAmount: new BigNumber(1234),\r\n                    orderHash: '',\r\n                    pool: '',\r\n                    taker: '',\r\n                    takerToken: '',\r\n                    takerTokenFilledAmount: new BigNumber(5),\r\n                },\r\n            });\r\n\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                quoteServerClient: instance(mockQuoteServerClient),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            await rfqmService.processApprovalAndTradeAsync(job, '0xworkeraddress');\r\n            expect(updateRfqmJobCalledArgs[0].status).to.equal(RfqmJobStatus.PendingProcessing);\r\n            expect(updateRfqmJobCalledArgs[1].status).to.equal(RfqmJobStatus.PendingLastLookAccepted);\r\n            expect(updateRfqmJobCalledArgs[2].status).to.equal(RfqmJobStatus.PendingSubmitted);\r\n            expect(updateRfqmJobCalledArgs[updateRfqmJobCalledArgs.length - 1].status).to.equal(\r\n                RfqmJobStatus.SucceededConfirmed,\r\n            );\r\n            expect(job.status).to.equal(RfqmJobStatus.SucceededConfirmed);\r\n        });\r\n\r\n        it('throws if non-approval job is supplied to the method for a meta-transaction job', async () => {\r\n            const jobId = 'jobId';\r\n\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeFiveMinutesLater),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: '0xinputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                },\r\n                jobId,\r\n            );\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest();\r\n\r\n            try {\r\n                await rfqmService.processApprovalAndTradeAsync(job, '0xworkeraddress');\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain(\r\n                    'Non-approval job should not be processed by `processApprovalAndTradeAsync`',\r\n                );\r\n            }\r\n        });\r\n\r\n        it('should not proceed to trade transaction if the status of approval transaction is not `SucceededConfirmed` for a meta-transaction job', async () => {\r\n            const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n            const jobId = 'jobId';\r\n            const transactionSubmissionId = 'submissionId';\r\n            const inputToken = '0xinputToken';\r\n\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(nowS + 600),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken,\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                    approval: MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\r\n                    approvalSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                },\r\n                jobId,\r\n            );\r\n            const mockTransaction = createMetaTransactionSubmissionEntity(\r\n                {\r\n                    from: '0xworkeraddress',\r\n                    metaTransactionJobId: jobId,\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    type: RfqmTransactionSubmissionType.Approval,\r\n                    status: RfqmTransactionSubmissionStatus.Submitted,\r\n                },\r\n                transactionSubmissionId,\r\n            );\r\n            const mockTransactionReceipt: providers.TransactionReceipt = {\r\n                blockHash: '0xblockhash',\r\n                blockNumber: 1,\r\n                byzantium: true,\r\n                confirmations: 3,\r\n                contractAddress: '0xexchangeproxyaddress',\r\n                cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                effectiveGasPrice: EthersBigNumber.from(1000),\r\n                from: '0xworkeraddress',\r\n                gasUsed: EthersBigNumber.from(10000),\r\n                logs: [],\r\n                logsBloom: '',\r\n                status: 0,\r\n                to: '0xexchangeproxyaddress',\r\n                transactionHash: '0xsignedtransactionhash',\r\n                transactionIndex: 0,\r\n                type: 2,\r\n            };\r\n            const mockMinedBlock: providers.Block = {\r\n                _difficulty: EthersBigNumber.from(2),\r\n                difficulty: 2,\r\n                extraData: '',\r\n                gasLimit: EthersBigNumber.from(1000),\r\n                gasUsed: EthersBigNumber.from(1000),\r\n                hash: '0xblockhash',\r\n                miner: '0xminer',\r\n                nonce: '0x000',\r\n                number: 21,\r\n                parentHash: '0xparentblockhash',\r\n                timestamp: 12345,\r\n                transactions: ['0xsignedtransactionhash'],\r\n            };\r\n            const mockNonce = 0;\r\n\r\n            const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n            when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(\r\n                mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, RfqmTransactionSubmissionType.Approval),\r\n            ).thenResolve([mockTransaction]);\r\n            const updateRfqmJobCalledArgs: MetaTransactionJobEntity[] = [];\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.isValidOrderSignerAsync(anything(), anything())).thenResolve(true);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            when(mockBlockchainUtils.getTokenBalancesAsync(anything())).thenResolve([new BigNumber(1000000000)]);\r\n            when(mockBlockchainUtils.generateApprovalCalldataAsync(inputToken, anything(), anything())).thenResolve(\r\n                '0xcalldata',\r\n            );\r\n            when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n            when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xsignedtransactionhash']))).thenResolve([\r\n                mockTransactionReceipt,\r\n            ]);\r\n            when(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);\r\n            when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n            });\r\n\r\n            await rfqmService.processApprovalAndTradeAsync(job, '0xworkeraddress');\r\n            expect(updateRfqmJobCalledArgs[0].status).to.equal(RfqmJobStatus.PendingProcessing);\r\n            expect(updateRfqmJobCalledArgs[updateRfqmJobCalledArgs.length - 1].status).to.equal(\r\n                RfqmJobStatus.FailedRevertedConfirmed,\r\n            );\r\n            expect(job.status).to.equal(RfqmJobStatus.FailedRevertedConfirmed);\r\n        });\r\n\r\n        it('should proceed to trade transaction if the status of approval transaction is `SucceededConfirmed` for a meta-transaction job', async () => {\r\n            const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n            const jobId = 'jobId';\r\n            const transactionSubmissionId1 = 'submissionId1';\r\n            const transactionSubmissionId2 = 'submissionId2';\r\n            const inputToken = '0xinputToken';\r\n\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(nowS + 600),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken,\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                    approval: MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\r\n                    approvalSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                },\r\n                jobId,\r\n            );\r\n            const mockApprovalTransaction = createMetaTransactionSubmissionEntity(\r\n                {\r\n                    from: '0xworkeraddress',\r\n                    metaTransactionJobId: jobId,\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xsignedtransactionhash1',\r\n                    type: RfqmTransactionSubmissionType.Approval,\r\n                    status: RfqmTransactionSubmissionStatus.Submitted,\r\n                },\r\n                transactionSubmissionId1,\r\n            );\r\n            const mockTradeTransaction = createMetaTransactionSubmissionEntity(\r\n                {\r\n                    from: '0xworkeraddress',\r\n                    metaTransactionJobId: jobId,\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xsignedtransactionhash2',\r\n                    type: RfqmTransactionSubmissionType.Trade,\r\n                    status: RfqmTransactionSubmissionStatus.Submitted,\r\n                },\r\n                transactionSubmissionId2,\r\n            );\r\n            const mockApprovalTransactionReceipt: providers.TransactionReceipt = {\r\n                blockHash: '0xblockhash',\r\n                blockNumber: 1,\r\n                byzantium: true,\r\n                confirmations: 3,\r\n                contractAddress: '0xexchangeproxyaddress',\r\n                cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                effectiveGasPrice: EthersBigNumber.from(1000),\r\n                from: '0xworkeraddress',\r\n                gasUsed: EthersBigNumber.from(10000),\r\n                logs: [],\r\n                logsBloom: '',\r\n                status: 1,\r\n                to: '0xexchangeproxyaddress',\r\n                transactionHash: '0xsignedtransactionhash1',\r\n                transactionIndex: 0,\r\n                type: 2,\r\n            };\r\n            const mockTradeTransactionReceipt: providers.TransactionReceipt = {\r\n                blockHash: '0xblockhash',\r\n                blockNumber: 1,\r\n                byzantium: true,\r\n                confirmations: 3,\r\n                contractAddress: '0xexchangeproxyaddress',\r\n                cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                effectiveGasPrice: EthersBigNumber.from(1000),\r\n                from: '0xworkeraddress',\r\n                gasUsed: EthersBigNumber.from(10000),\r\n                logs: [],\r\n                logsBloom: '',\r\n                status: 1,\r\n                to: '0xexchangeproxyaddress',\r\n                transactionHash: '0xsignedtransactionhash2',\r\n                transactionIndex: 0,\r\n                type: 2,\r\n            };\r\n            const mockMinedBlock: providers.Block = {\r\n                _difficulty: EthersBigNumber.from(2),\r\n                difficulty: 2,\r\n                extraData: '',\r\n                gasLimit: EthersBigNumber.from(1000),\r\n                gasUsed: EthersBigNumber.from(1000),\r\n                hash: '0xblockhash',\r\n                miner: '0xminer',\r\n                nonce: '0x000',\r\n                number: 21,\r\n                parentHash: '0xparentblockhash',\r\n                timestamp: 12345,\r\n                transactions: ['0xsignedtransactionhash1', '0xsignedtransactionhash2'],\r\n            };\r\n            const mockNonce = 0;\r\n\r\n            const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n            when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(\r\n                mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, RfqmTransactionSubmissionType.Approval),\r\n            ).thenResolve([mockApprovalTransaction]);\r\n            when(\r\n                mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, RfqmTransactionSubmissionType.Trade),\r\n            ).thenResolve([mockTradeTransaction]);\r\n            when(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId)).thenResolve([mockTradeTransaction]);\r\n            const updateRfqmJobCalledArgs: MetaTransactionJobEntity[] = [];\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.isValidOrderSignerAsync(anything(), anything())).thenResolve(true);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            when(mockBlockchainUtils.getTokenBalancesAsync(anything())).thenResolve([new BigNumber(1000000000)]);\r\n            when(mockBlockchainUtils.estimateGasForAsync(anything())).thenResolve(0);\r\n            when(mockBlockchainUtils.generateMetaTransactionCallData(anything(), anything(), anything())).thenReturn(\r\n                '0xcalldata',\r\n            );\r\n            when(mockBlockchainUtils.generateApprovalCalldataAsync(anything(), anything(), anything())).thenResolve(\r\n                '0xcalldata',\r\n            );\r\n            when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n            when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xsignedtransactionhash1']))).thenResolve([\r\n                mockApprovalTransactionReceipt,\r\n            ]);\r\n            when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xsignedtransactionhash2']))).thenResolve([\r\n                mockTradeTransactionReceipt,\r\n            ]);\r\n            when(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);\r\n            when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n            });\r\n\r\n            await rfqmService.processApprovalAndTradeAsync(job, '0xworkeraddress');\r\n            expect(updateRfqmJobCalledArgs[0].status).to.equal(RfqmJobStatus.PendingProcessing);\r\n            expect(updateRfqmJobCalledArgs[1].status).to.equal(RfqmJobStatus.PendingSubmitted);\r\n            expect(updateRfqmJobCalledArgs[updateRfqmJobCalledArgs.length - 1].status).to.equal(\r\n                RfqmJobStatus.SucceededConfirmed,\r\n            );\r\n            expect(job.status).to.equal(RfqmJobStatus.SucceededConfirmed);\r\n        });\r\n    });\r\n\r\n    describe('processTradeAsync', () => {\r\n        it('should process a rfqm v2 job trade successfully', async () => {\r\n            const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(nowS + 10),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(nowS + 10),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker,\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash,\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '0xworkeraddress',\r\n            });\r\n\r\n            const mockTransactionRequest: providers.TransactionRequest = {};\r\n            const mockTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                from: '0xworkeraddress',\r\n                maxFeePerGas: new BigNumber(100000),\r\n                maxPriorityFeePerGas: new BigNumber(100),\r\n                nonce: 0,\r\n                orderHash: '0xorderhash',\r\n                to: '0xexchangeproxyaddress',\r\n                transactionHash: '0xsignedtransactionhash',\r\n                type: RfqmTransactionSubmissionType.Trade,\r\n            });\r\n            const mockTransactionReceipt: providers.TransactionReceipt = {\r\n                blockHash: '0xblockhash',\r\n                blockNumber: 1,\r\n                byzantium: true,\r\n                confirmations: 3,\r\n                contractAddress: '0xexchangeproxyaddress',\r\n                cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                effectiveGasPrice: EthersBigNumber.from(1000),\r\n                from: '0xworkeraddress',\r\n                gasUsed: EthersBigNumber.from(10000),\r\n                logs: [],\r\n                logsBloom: '',\r\n                status: 1,\r\n                to: '0xexchangeproxyaddress',\r\n                transactionHash: '0xsignedtransactionhash',\r\n                transactionIndex: 0,\r\n                type: 2,\r\n            };\r\n            const mockMinedBlock: providers.Block = {\r\n                _difficulty: EthersBigNumber.from(2),\r\n                difficulty: 2,\r\n                extraData: '',\r\n                gasLimit: EthersBigNumber.from(1000),\r\n                gasUsed: EthersBigNumber.from(1000),\r\n                hash: '0xblockhash',\r\n                miner: '0xminer',\r\n                nonce: '0x000',\r\n                number: 21,\r\n                parentHash: '0xparentblockhash',\r\n                timestamp: 12345,\r\n                transactions: ['0xpresubmittransactionhash'],\r\n            };\r\n            const mockNonce = 0;\r\n\r\n            const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n            when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(anything())).thenResolve([]);\r\n            const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n            when(\r\n                mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                    anything(),\r\n                    RfqmTransactionSubmissionType.Trade,\r\n                ),\r\n            ).thenResolve([]);\r\n            when(mockDbUtils.findV2TransactionSubmissionByTransactionHashAsync('0xsignedtransactionhash')).thenResolve(\r\n                _.cloneDeep(mockTransaction),\r\n            );\r\n\r\n            const mockQuoteServerClient = mock(QuoteServerClient);\r\n            when(mockQuoteServerClient.signV2Async(anything(), anything(), anything())).thenResolve(validEIP712Sig);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            when(\r\n                mockBlockchainUtils.generateTakerSignedOtcOrderCallData(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenReturn('0xcalldata');\r\n            when(\r\n                mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenResolve(0);\r\n            when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n            when(mockBlockchainUtils.estimateGasForAsync(anything())).thenResolve(100);\r\n            when(\r\n                mockBlockchainUtils.transformTxDataToTransactionRequest(anything(), anything(), anything()),\r\n            ).thenReturn(mockTransactionRequest);\r\n            when(mockBlockchainUtils.submitSignedTransactionAsync(anything())).thenResolve('0xsignedtransactionhash');\r\n            when(mockBlockchainUtils.signTransactionAsync(anything())).thenResolve({\r\n                signedTransaction: 'signedTransaction',\r\n                transactionHash: '0xsignedtransactionhash',\r\n            });\r\n            when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xsignedtransactionhash']))).thenResolve([\r\n                mockTransactionReceipt,\r\n            ]);\r\n            when(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);\r\n            when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                quoteServerClient: instance(mockQuoteServerClient),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            await rfqmService.processTradeAsync(job, '0xworkeraddress');\r\n            expect(updateRfqmJobCalledArgs[0].status).to.equal(RfqmJobStatus.PendingProcessing);\r\n            expect(updateRfqmJobCalledArgs[1].status).to.equal(RfqmJobStatus.PendingLastLookAccepted);\r\n            expect(updateRfqmJobCalledArgs[2].status).to.equal(RfqmJobStatus.PendingSubmitted);\r\n            expect(updateRfqmJobCalledArgs[updateRfqmJobCalledArgs.length - 1].status).to.equal(\r\n                RfqmJobStatus.SucceededConfirmed,\r\n            );\r\n            expect(job.status).to.equal(RfqmJobStatus.SucceededConfirmed);\r\n        });\r\n\r\n        it('should process a meta-transaction job trade successfully', async () => {\r\n            const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n            const jobId = 'jobId';\r\n            const transactionSubmissionId = 'submissionId';\r\n\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(nowS + 600),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: '0xinputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                },\r\n                jobId,\r\n            );\r\n\r\n            const mockTransactionRequest: providers.TransactionRequest = {};\r\n            const mockTransaction = createMetaTransactionSubmissionEntity(\r\n                {\r\n                    from: '0xworkeraddress',\r\n                    metaTransactionJobId: jobId,\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    type: RfqmTransactionSubmissionType.Trade,\r\n                },\r\n                transactionSubmissionId,\r\n            );\r\n            const mockTransactionReceipt: providers.TransactionReceipt = {\r\n                blockHash: '0xblockhash',\r\n                blockNumber: 1,\r\n                byzantium: true,\r\n                confirmations: 3,\r\n                contractAddress: '0xexchangeproxyaddress',\r\n                cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                effectiveGasPrice: EthersBigNumber.from(1000),\r\n                from: '0xworkeraddress',\r\n                gasUsed: EthersBigNumber.from(10000),\r\n                logs: [],\r\n                logsBloom: '',\r\n                status: 1,\r\n                to: '0xexchangeproxyaddress',\r\n                transactionHash: '0xsignedtransactionhash',\r\n                transactionIndex: 0,\r\n                type: 2,\r\n            };\r\n            const mockMinedBlock: providers.Block = {\r\n                _difficulty: EthersBigNumber.from(2),\r\n                difficulty: 2,\r\n                extraData: '',\r\n                gasLimit: EthersBigNumber.from(1000),\r\n                gasUsed: EthersBigNumber.from(1000),\r\n                hash: '0xblockhash',\r\n                miner: '0xminer',\r\n                nonce: '0x000',\r\n                number: 21,\r\n                parentHash: '0xparentblockhash',\r\n                timestamp: 12345,\r\n                transactions: ['0xpresubmittransactionhash'],\r\n            };\r\n            const mockNonce = 0;\r\n\r\n            const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n            when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId)).thenResolve([]);\r\n            const updateRfqmJobCalledArgs: MetaTransactionJobEntity[] = [];\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n            when(\r\n                mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, RfqmTransactionSubmissionType.Trade),\r\n            ).thenResolve([]);\r\n            when(\r\n                mockDbUtils.findMetaTransactionSubmissionsByTransactionHashAsync(\r\n                    '0xsignedtransactionhash',\r\n                    RfqmTransactionSubmissionType.Trade,\r\n                ),\r\n            ).thenResolve([_.cloneDeep(mockTransaction)]);\r\n\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');\r\n            when(mockBlockchainUtils.generateMetaTransactionCallData(anything(), anything(), anything())).thenReturn(\r\n                '0xcalldata',\r\n            );\r\n            when(mockBlockchainUtils.estimateGasForAsync(anything())).thenResolve(0);\r\n            when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n            when(\r\n                mockBlockchainUtils.transformTxDataToTransactionRequest(anything(), anything(), anything()),\r\n            ).thenReturn(mockTransactionRequest);\r\n            when(mockBlockchainUtils.submitSignedTransactionAsync(anything())).thenResolve('0xsignedtransactionhash');\r\n            when(mockBlockchainUtils.signTransactionAsync(anything())).thenResolve({\r\n                signedTransaction: 'signedTransaction',\r\n                transactionHash: '0xsignedtransactionhash',\r\n            });\r\n            when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xsignedtransactionhash']))).thenResolve([\r\n                mockTransactionReceipt,\r\n            ]);\r\n            when(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);\r\n            when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n            });\r\n\r\n            await rfqmService.processTradeAsync(job, '0xworkeraddress');\r\n            expect(updateRfqmJobCalledArgs[0].status).to.equal(RfqmJobStatus.PendingProcessing);\r\n            expect(updateRfqmJobCalledArgs[1].status).to.equal(RfqmJobStatus.PendingSubmitted);\r\n            expect(updateRfqmJobCalledArgs[updateRfqmJobCalledArgs.length - 1].status).to.equal(\r\n                RfqmJobStatus.SucceededConfirmed,\r\n            );\r\n            expect(job.status).to.equal(RfqmJobStatus.SucceededConfirmed);\r\n        });\r\n    });\r\n\r\n    describe('validate job methods', () => {\r\n        it('should return null for valid, unexpired v2 jobs', () => {\r\n            const fakeInFiveMinutesS = fakeClockMs / ONE_SECOND_MS + 360;\r\n\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeInFiveMinutesS),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            /* expiry */ new BigNumber(fakeInFiveMinutesS),\r\n                            /* nonceBucket */ new BigNumber(21),\r\n                            /* nonce */ new BigNumber(0),\r\n                        ).toString(),\r\n                        maker: '',\r\n                        makerAmount: '',\r\n                        makerToken: '',\r\n                        taker: '',\r\n                        takerAmount: '',\r\n                        takerToken: '',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '',\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n\r\n            const result = WorkerService.validateRfqmV2Job(job, new Date(fakeClockMs));\r\n            expect(result).to.equal(null);\r\n        });\r\n\r\n        it('should return a No Taker Signature status for v2 jobs with no taker signature', () => {\r\n            const fakeInFiveMinutesS = fakeClockMs / ONE_SECOND_MS + 360;\r\n\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeInFiveMinutesS),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            /* expiry */ new BigNumber(fakeInFiveMinutesS),\r\n                            /* nonceBucket */ new BigNumber(21),\r\n                            /* nonce */ new BigNumber(0),\r\n                        ).toString(),\r\n                        maker: '',\r\n                        makerAmount: '',\r\n                        makerToken: '',\r\n                        taker: '',\r\n                        takerAmount: '',\r\n                        takerToken: '',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '',\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: null,\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n\r\n            const result = WorkerService.validateRfqmV2Job(job, new Date(fakeClockMs));\r\n            expect(result).to.equal(RfqmJobStatus.FailedValidationNoTakerSignature);\r\n        });\r\n\r\n        it('should return null for a valid, unexpired meta-transaction job', () => {\r\n            const fakeInFiveMinutesS = fakeClockMs / ONE_SECOND_MS + 360;\r\n\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeInFiveMinutesS),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: '0xinputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                },\r\n                'jobId',\r\n            );\r\n\r\n            const result = WorkerService.validateMetaTransactionJob(job, new Date(fakeClockMs));\r\n            expect(result).to.equal(null);\r\n        });\r\n\r\n        it('should return a failed expired status for a meta-transaction job that expires', () => {\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeClockMs / ONE_SECOND_MS),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: '0xinputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                },\r\n                'jobId',\r\n            );\r\n\r\n            const result = WorkerService.validateMetaTransactionJob(job, new Date(fakeClockMs + 1000000));\r\n            expect(result).to.equal(RfqmJobStatus.FailedExpired);\r\n        });\r\n    });\r\n\r\n    describe('shouldResubmitTransaction', () => {\r\n        it('should return false if new gas price < 10% greater than previous', async () => {\r\n            const gasFees = { maxFeePerGas: new BigNumber(100), maxPriorityFeePerGas: new BigNumber(10) };\r\n            const newGasPrice = new BigNumber(105);\r\n\r\n            expect(WorkerService.shouldResubmitTransaction(gasFees, newGasPrice)).to.equal(false);\r\n        });\r\n        it('should return true if new gas price is 10% greater than previous', async () => {\r\n            const gasFees = { maxFeePerGas: new BigNumber(100), maxPriorityFeePerGas: new BigNumber(10) };\r\n            const newGasPrice = new BigNumber(110);\r\n\r\n            expect(WorkerService.shouldResubmitTransaction(gasFees, newGasPrice)).to.equal(true);\r\n        });\r\n        it('should return true if new gas price > 10% greater than previous', async () => {\r\n            const gasFees = { maxFeePerGas: new BigNumber(100), maxPriorityFeePerGas: new BigNumber(10) };\r\n            const newGasPrice = new BigNumber(120);\r\n\r\n            expect(WorkerService.shouldResubmitTransaction(gasFees, newGasPrice)).to.equal(true);\r\n        });\r\n    });\r\n\r\n    describe('checkJobPreprocessingAsync', () => {\r\n        it('should update job staus and throw error if job validation failed for a rfqm v2 job', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeOneMinuteAgoS),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeOneMinuteAgoS.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker,\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash,\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.checkJobPreprocessingAsync(job, new Date(fakeClockMs));\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Job failed validation');\r\n                expect(job.status).to.deep.equal(RfqmJobStatus.FailedExpired);\r\n            }\r\n        });\r\n\r\n        it('should throw error if there is no taker signature for a rfqm v2 job', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker,\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash,\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: null,\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.checkJobPreprocessingAsync(job, new Date(fakeClockMs));\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Job failed validation');\r\n                expect(job.status).to.deep.equal(RfqmJobStatus.FailedValidationNoTakerSignature);\r\n            }\r\n        });\r\n\r\n        it('should update job staus to `PendingProcessing` if job status is `PendingEnqueued` for a rfqm v2 job', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker,\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash,\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n            });\r\n\r\n            await rfqmService.checkJobPreprocessingAsync(job, new Date(fakeClockMs));\r\n            expect(job.status).to.deep.equal(RfqmJobStatus.PendingProcessing);\r\n        });\r\n\r\n        it('should update job staus and throw error if job validation failed for a meta-transaction job', async () => {\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeOneMinuteAgoS),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: '0xinputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                },\r\n                'jobId',\r\n            );\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.checkJobPreprocessingAsync(job, new Date(fakeClockMs));\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Job failed validation');\r\n                expect(job.status).to.deep.equal(RfqmJobStatus.FailedExpired);\r\n            }\r\n        });\r\n\r\n        it('should update job staus to `PendingProcessing` if job status is `PendingEnqueued` for a meta-transaction job', async () => {\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeFiveMinutesLater),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: '0xinputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                },\r\n                'jobId',\r\n            );\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n            });\r\n\r\n            await rfqmService.checkJobPreprocessingAsync(job, new Date(fakeClockMs));\r\n            expect(job.status).to.deep.equal(RfqmJobStatus.PendingProcessing);\r\n        });\r\n    });\r\n\r\n    describe('prepareApprovalAsync', () => {\r\n        it('should throw exception if there are submitted transactions but job maker signature is null for a rfqm v2 job', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const mockTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                createdAt: new Date(1233),\r\n                from: '0xworkeraddress',\r\n                maxFeePerGas: new BigNumber(100000),\r\n                maxPriorityFeePerGas: new BigNumber(100),\r\n                nonce: 0,\r\n                orderHash: '0xorderhash',\r\n                status: RfqmTransactionSubmissionStatus.Submitted,\r\n                to: '0xexchangeproxyaddress',\r\n                transactionHash: '0xpresubmittransactionhash',\r\n                type: RfqmTransactionSubmissionType.Trade,\r\n            });\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(\r\n                mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                    '0xorderhash',\r\n                    RfqmTransactionSubmissionType.Approval,\r\n                ),\r\n            ).thenResolve([mockTransaction]);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.generateApprovalCalldataAsync(anything(), anything(), anything())).thenResolve(\r\n                MOCK_EXECUTE_META_TRANSACTION_CALLDATA,\r\n            );\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.prepareApprovalAsync(job, '0xtoken', MOCK_EXECUTE_META_TRANSACTION_APPROVAL, {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                });\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Encountered a job with submissions but no maker signature');\r\n            }\r\n        });\r\n\r\n        it('should return generated calldata if there are submitted transactions for a rfqm v2 job', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const mockTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                createdAt: new Date(1233),\r\n                from: '0xworkeraddress',\r\n                maxFeePerGas: new BigNumber(100000),\r\n                maxPriorityFeePerGas: new BigNumber(100),\r\n                nonce: 0,\r\n                orderHash: '0xorderhash',\r\n                status: RfqmTransactionSubmissionStatus.Submitted,\r\n                to: '0xexchangeproxyaddress',\r\n                transactionHash: '0xpresubmittransactionhash',\r\n                type: RfqmTransactionSubmissionType.Trade,\r\n            });\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(\r\n                mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                    '0xorderhash',\r\n                    RfqmTransactionSubmissionType.Approval,\r\n                ),\r\n            ).thenResolve([mockTransaction]);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.generateApprovalCalldataAsync(anything(), anything(), anything())).thenResolve(\r\n                MOCK_EXECUTE_META_TRANSACTION_CALLDATA,\r\n            );\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n            });\r\n\r\n            const calldata = await rfqmService.prepareApprovalAsync(\r\n                job,\r\n                '0xtoken',\r\n                MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\r\n                {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n            );\r\n            expect(calldata).to.deep.equal(MOCK_EXECUTE_META_TRANSACTION_CALLDATA);\r\n        });\r\n\r\n        it('should throw exception if eth_call failed for a rfqm v2 job', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(\r\n                mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                    '0xorderhash',\r\n                    RfqmTransactionSubmissionType.Approval,\r\n                ),\r\n            ).thenResolve([]);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.generateApprovalCalldataAsync(anything(), anything(), anything())).thenResolve(\r\n                MOCK_EXECUTE_META_TRANSACTION_CALLDATA,\r\n            );\r\n            when(mockBlockchainUtils.estimateGasForAsync(anything())).thenThrow(new Error('error'));\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.prepareApprovalAsync(job, '0xtoken', MOCK_EXECUTE_META_TRANSACTION_APPROVAL, {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                });\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Eth call approval validation failed');\r\n                expect(job.status).to.deep.equal(RfqmJobStatus.FailedEthCallFailed);\r\n            }\r\n        });\r\n\r\n        it('should return correct calldata if there is no submitted transaction for a rfqm v2 job', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(\r\n                mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                    '0xorderhash',\r\n                    RfqmTransactionSubmissionType.Approval,\r\n                ),\r\n            ).thenResolve([]);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.generateApprovalCalldataAsync(anything(), anything(), anything())).thenResolve(\r\n                MOCK_EXECUTE_META_TRANSACTION_CALLDATA,\r\n            );\r\n            when(mockBlockchainUtils.estimateGasForAsync(anything())).thenResolve(10);\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n            });\r\n\r\n            const calldata = await rfqmService.prepareApprovalAsync(\r\n                job,\r\n                '0xtoken',\r\n                MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\r\n                {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n            );\r\n            expect(calldata).to.deep.equal(MOCK_EXECUTE_META_TRANSACTION_CALLDATA);\r\n        });\r\n\r\n        it('should return generated calldata if there are submitted transactions for a meta-transaction job', async () => {\r\n            const jobId = 'jobId';\r\n            const transactionSubmissionId = 'submissionId';\r\n\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeFiveMinutesLater),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: '0xinputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                },\r\n                jobId,\r\n            );\r\n\r\n            const mockTransaction = createMetaTransactionSubmissionEntity(\r\n                {\r\n                    from: '0xworkeraddress',\r\n                    metaTransactionJobId: jobId,\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    type: RfqmTransactionSubmissionType.Approval,\r\n                },\r\n                transactionSubmissionId,\r\n            );\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(\r\n                mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, RfqmTransactionSubmissionType.Approval),\r\n            ).thenResolve([mockTransaction]);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.generateApprovalCalldataAsync(anything(), anything(), anything())).thenResolve(\r\n                MOCK_EXECUTE_META_TRANSACTION_CALLDATA,\r\n            );\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n            });\r\n\r\n            const calldata = await rfqmService.prepareApprovalAsync(\r\n                job,\r\n                '0xtoken',\r\n                MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\r\n                {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n            );\r\n            expect(calldata).to.deep.equal(MOCK_EXECUTE_META_TRANSACTION_CALLDATA);\r\n            verify(mockBlockchainUtils.estimateGasForAsync(anything())).never();\r\n        });\r\n\r\n        it('should throw exception if eth_call failed for a meta-transaction job', async () => {\r\n            const jobId = 'jobId';\r\n\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeFiveMinutesLater),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: '0xinputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                },\r\n                jobId,\r\n            );\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(\r\n                mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, RfqmTransactionSubmissionType.Approval),\r\n            ).thenResolve([]);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.generateApprovalCalldataAsync(anything(), anything(), anything())).thenResolve(\r\n                MOCK_EXECUTE_META_TRANSACTION_CALLDATA,\r\n            );\r\n            when(mockBlockchainUtils.estimateGasForAsync(anything())).thenThrow(new Error('error'));\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.prepareApprovalAsync(job, '0xtoken', MOCK_EXECUTE_META_TRANSACTION_APPROVAL, {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                });\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Eth call approval validation failed');\r\n                expect(job.status).to.deep.equal(RfqmJobStatus.FailedEthCallFailed);\r\n            }\r\n        });\r\n\r\n        it('should return correct calldata if there is no submitted transaction for a meta-transaction job', async () => {\r\n            const jobId = 'jobId';\r\n\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeFiveMinutesLater),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: '0xinputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                },\r\n                jobId,\r\n            );\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(\r\n                mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, RfqmTransactionSubmissionType.Approval),\r\n            ).thenResolve([]);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.generateApprovalCalldataAsync(anything(), anything(), anything())).thenResolve(\r\n                MOCK_EXECUTE_META_TRANSACTION_CALLDATA,\r\n            );\r\n            when(mockBlockchainUtils.estimateGasForAsync(anything())).thenResolve(10);\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n            });\r\n\r\n            const calldata = await rfqmService.prepareApprovalAsync(\r\n                job,\r\n                '0xtoken',\r\n                MOCK_EXECUTE_META_TRANSACTION_APPROVAL,\r\n                {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n            );\r\n            expect(calldata).to.deep.equal(MOCK_EXECUTE_META_TRANSACTION_CALLDATA);\r\n        });\r\n    });\r\n\r\n    describe('preparerfqmV2TradeAsync', () => {\r\n        it('updates the job and throws upon validation failure when `shouldCheckLastLook` is true', async () => {\r\n            const expiredJob = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeOneMinuteAgoS),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeOneMinuteAgoS.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '',\r\n                        makerAmount: '',\r\n                        makerToken: '',\r\n                        taker: '',\r\n                        takerAmount: '',\r\n                        takerToken: '',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const _job = _.cloneDeep(expiredJob);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([]);\r\n            const rfqmService = buildWorkerServiceForUnitTest({ dbUtils: instance(mockDbUtils) });\r\n\r\n            try {\r\n                await rfqmService.preparerfqmV2TradeAsync(expiredJob, '0xworkeraddress', true, new Date(fakeClockMs));\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Job failed validation');\r\n                expect(expiredJob).to.deep.equal({ ..._job, status: RfqmJobStatus.FailedExpired });\r\n            }\r\n        });\r\n\r\n        it('handles a balance check failure', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([]);\r\n            const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([new BigNumber(100)]);\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(5),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Order failed pre-sign validation');\r\n                expect(updateRfqmJobCalledArgs[0]).to.deep.equal({\r\n                    ..._job,\r\n                    status: RfqmJobStatus.PendingProcessing,\r\n                });\r\n                expect(updateRfqmJobCalledArgs[1]).to.deep.equal({\r\n                    ..._job,\r\n                    status: RfqmJobStatus.FailedPresignValidationFailed,\r\n                });\r\n                expect(job).to.deep.equal({\r\n                    ..._job,\r\n                    status: RfqmJobStatus.FailedPresignValidationFailed,\r\n                });\r\n            }\r\n        });\r\n\r\n        it('handles a decline to sign', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([]);\r\n            const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n            const mockQuoteServerClient = mock(QuoteServerClient);\r\n            when(mockQuoteServerClient.signV2Async(anything(), anything(), anything())).thenResolve(undefined);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                quoteServerClient: instance(mockQuoteServerClient),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Market Maker declined to sign');\r\n                expect(job).to.deep.equal({\r\n                    ..._job,\r\n                    lastLookResult: false,\r\n                    status: RfqmJobStatus.FailedLastLookDeclined,\r\n                });\r\n            }\r\n        });\r\n\r\n        it('handles a signature failure', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([]);\r\n            const mockQuoteServerClient = mock(QuoteServerClient);\r\n            when(mockQuoteServerClient.signV2Async(anything(), anything(), anything())).thenReject(\r\n                new Error('fake timeout'),\r\n            );\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                quoteServerClient: instance(mockQuoteServerClient),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Job failed during market maker sign attempt');\r\n                expect(job).to.deep.equal({\r\n                    ..._job,\r\n                    status: RfqmJobStatus.FailedSignFailed,\r\n                });\r\n            }\r\n        });\r\n\r\n        it('handles signer is not the maker', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker,\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash,\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(orderHash)).thenResolve([]);\r\n            const mockQuoteServerClient = mock(QuoteServerClient);\r\n            const invalidEIP712Sig = _.cloneDeep(validEIP712Sig);\r\n            invalidEIP712Sig.r = '0xdc158f7b53b940863bc7b001552a90282e51033f29b73d44a2701bd16faa19d3';\r\n            when(mockQuoteServerClient.signV2Async(anything(), anything(), anything())).thenResolve(invalidEIP712Sig);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                quoteServerClient: instance(mockQuoteServerClient),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Invalid order signer address');\r\n                expect(job.status).to.deep.equal(RfqmJobStatus.FailedSignFailed);\r\n            }\r\n        });\r\n\r\n        it('handles an eth_call failure', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker,\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash,\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(orderHash)).thenResolve([]);\r\n            const mockQuoteServerClient = mock(QuoteServerClient);\r\n            when(mockQuoteServerClient.signV2Async(anything(), anything(), anything())).thenResolve(validEIP712Sig);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            when(\r\n                mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenReject(new Error('fake eth call failure'));\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                quoteServerClient: instance(mockQuoteServerClient),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Eth call validation failed');\r\n                expect(job).to.deep.equal({\r\n                    ..._job,\r\n                    lastLookResult: true,\r\n                    makerSignature: validEIP712Sig,\r\n                    status: RfqmJobStatus.FailedEthCallFailed,\r\n                });\r\n            }\r\n        });\r\n\r\n        it('updates market maker signatures missing bytes', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker,\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash,\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(anything())).thenResolve([]);\r\n            const mockQuoteServerClient = mock(QuoteServerClient);\r\n            when(mockQuoteServerClient.signV2Async(anything(), anything(), anything())).thenResolve(missingByteSig);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.isValidOrderSignerAsync(anything(), anything())).thenResolve(true);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            when(\r\n                mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenResolve(0);\r\n            when(\r\n                mockBlockchainUtils.generateTakerSignedOtcOrderCallData(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenReturn('0xvalidcalldata');\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                quoteServerClient: instance(mockQuoteServerClient),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            await rfqmService.preparerfqmV2TradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));\r\n            expect(job).to.deep.equal({\r\n                ..._job,\r\n                lastLookResult: true,\r\n                makerSignature: padSignature(missingByteSig),\r\n                status: RfqmJobStatus.PendingLastLookAccepted,\r\n            });\r\n        });\r\n\r\n        it('skips the eth_call for jobs with existing submissions', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: true,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: validEIP712Sig,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingLastLookAccepted,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const transaction = new RfqmV2TransactionSubmissionEntity({\r\n                orderHash,\r\n                to: '0xexchangeproxyaddress',\r\n                from: '0xworkeraddress',\r\n                transactionHash: '0xsignedtransactionhash',\r\n                maxFeePerGas: new BigNumber(100000),\r\n                maxPriorityFeePerGas: new BigNumber(100),\r\n                nonce: 21,\r\n                type: RfqmTransactionSubmissionType.Trade,\r\n            });\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([transaction]);\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n            const mockQuoteServerClient = mock(QuoteServerClient);\r\n            when(mockQuoteServerClient.signV2Async(anything(), anything(), anything())).thenResolve(validEIP712Sig);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            when(\r\n                mockBlockchainUtils.generateTakerSignedOtcOrderCallData(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenReturn('0xvalidcalldata');\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                quoteServerClient: instance(mockQuoteServerClient),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            const calldata = await rfqmService.preparerfqmV2TradeAsync(\r\n                job,\r\n                '0xworkeraddress',\r\n                true,\r\n                new Date(fakeClockMs),\r\n            );\r\n            expect(job).to.deep.equal({\r\n                ..._job,\r\n                lastLookResult: true,\r\n                makerSignature: validEIP712Sig,\r\n                status: RfqmJobStatus.PendingLastLookAccepted,\r\n            });\r\n            expect(calldata).to.equal('0xvalidcalldata');\r\n            verify(\r\n                mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).never();\r\n        });\r\n\r\n        it('lets expired jobs with existing submissions fall through', async () => {\r\n            // If the job isn't in a terminal status but there are existing submissions,\r\n            // `prepareTradeAsync` will let the job continue to the submission step which\r\n            // will allow the worker to check receipts for those submissions.\r\n            const expiredJob = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeOneMinuteAgoS),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: true,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: {\r\n                    r: '',\r\n                    s: '',\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                },\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeOneMinuteAgoS.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingSubmitted,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n\r\n            const transaction = new RfqmV2TransactionSubmissionEntity({\r\n                orderHash: '0xorderhash',\r\n                to: '0xexchangeproxyaddress',\r\n                from: '0xworkeraddress',\r\n                transactionHash: '0xsignedtransactionhash',\r\n                maxFeePerGas: new BigNumber(100000),\r\n                maxPriorityFeePerGas: new BigNumber(100),\r\n                nonce: 21,\r\n                type: RfqmTransactionSubmissionType.Trade,\r\n            });\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([transaction]);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(\r\n                mockBlockchainUtils.generateTakerSignedOtcOrderCallData(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenReturn('0xvalidcalldata');\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n            });\r\n\r\n            await rfqmService.preparerfqmV2TradeAsync(expiredJob, '0xworkeraddress', true, new Date(fakeClockMs));\r\n            expect(expiredJob.status).to.equal(RfqmJobStatus.PendingSubmitted);\r\n        });\r\n\r\n        it('successfully prepares a job when checking last look', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker,\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash,\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '0xworkeraddress',\r\n            });\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(orderHash)).thenResolve([]);\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n            const mockQuoteServerClient = mock(QuoteServerClient);\r\n            when(mockQuoteServerClient.signV2Async(anything(), anything(), anything())).thenResolve(validEIP712Sig);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            when(\r\n                mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenResolve(0);\r\n            when(\r\n                mockBlockchainUtils.generateTakerSignedOtcOrderCallData(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenReturn('0xvalidcalldata');\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                quoteServerClient: instance(mockQuoteServerClient),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            const calldata = await rfqmService.preparerfqmV2TradeAsync(\r\n                job,\r\n                '0xworkeraddress',\r\n                true,\r\n                new Date(fakeClockMs),\r\n            );\r\n            expect(job).to.deep.equal({\r\n                ..._job,\r\n                lastLookResult: true,\r\n                makerSignature: validEIP712Sig,\r\n                status: RfqmJobStatus.PendingLastLookAccepted,\r\n            });\r\n            expect(calldata).to.equal('0xvalidcalldata');\r\n            expect(updateRfqmJobCalledArgs[0]).to.deep.equal({\r\n                ..._job,\r\n                status: RfqmJobStatus.PendingProcessing,\r\n            });\r\n            expect(updateRfqmJobCalledArgs[1]).to.deep.equal({\r\n                ..._job,\r\n                lastLookResult: true,\r\n                makerSignature: validEIP712Sig,\r\n                status: RfqmJobStatus.PendingLastLookAccepted,\r\n            });\r\n        });\r\n\r\n        it('successfully prepares a job if no last look is necessary', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: true,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: validEIP712Sig,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker,\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash,\r\n                status: RfqmJobStatus.PendingLastLookAccepted,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '0xworkeraddress',\r\n            });\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(orderHash)).thenResolve([]);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            when(\r\n                mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenResolve(0);\r\n            when(\r\n                mockBlockchainUtils.generateTakerSignedOtcOrderCallData(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenReturn('0xvalidcalldata');\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n            const spiedRfqmService = spy(rfqmService);\r\n\r\n            const calldata = await rfqmService.preparerfqmV2TradeAsync(\r\n                job,\r\n                '0xworkeraddress',\r\n                false,\r\n                new Date(fakeClockMs),\r\n            );\r\n            expect(job).to.deep.equal(_job);\r\n            expect(calldata).to.equal('0xvalidcalldata');\r\n            verify(spiedRfqmService.checkJobPreprocessingAsync(anything(), anything())).never();\r\n            verify(spiedRfqmService.checkLastLookAsync(anything(), anything(), anything())).never();\r\n        });\r\n    });\r\n\r\n    describe('prepareMetaTransactionTradeAsync', () => {\r\n        it('updates the job and throws upon validation failure if `shouldValidateJob` is true', async () => {\r\n            const jobId = 'jobId';\r\n            const expiredJob = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeOneMinuteAgoS),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: '0xinputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                },\r\n                jobId,\r\n            );\r\n\r\n            const _job = _.cloneDeep(expiredJob);\r\n            const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n            when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId)).thenResolve([]);\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                gasStationAttendant: instance(gasStationAttendantMock),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.prepareMetaTransactionTradeAsync(\r\n                    expiredJob,\r\n                    '0xworkeraddress',\r\n                    true,\r\n                    new Date(fakeClockMs),\r\n                );\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Job failed validation');\r\n                expect(expiredJob).to.deep.equal({ ..._job, status: RfqmJobStatus.FailedExpired });\r\n            }\r\n        });\r\n\r\n        it('handles an eth_call failure', async () => {\r\n            const jobId = 'jobId';\r\n\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeFiveMinutesLater),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: '0xinputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                },\r\n                jobId,\r\n            );\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n            when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId)).thenResolve([]);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            when(mockBlockchainUtils.estimateGasForAsync(anything())).thenReject(new Error('fake eth call failure'));\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                gasStationAttendant: instance(gasStationAttendantMock),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.prepareMetaTransactionTradeAsync(job, '0xworkeraddress', true, new Date(fakeClockMs));\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Eth call validation failed');\r\n                expect(job).to.deep.equal({\r\n                    ..._job,\r\n                    status: RfqmJobStatus.FailedEthCallFailed,\r\n                });\r\n            }\r\n        });\r\n\r\n        it('skips the eth_call for jobs with existing submissions', async () => {\r\n            const jobId = 'jobId';\r\n\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeFiveMinutesLater),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: '0xinputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingProcessing,\r\n                    workerAddress: '0xworkeraddress',\r\n                },\r\n                jobId,\r\n            );\r\n            const transaction = createMetaTransactionSubmissionEntity(\r\n                {\r\n                    from: '0xworkeraddress',\r\n                    metaTransactionJobId: jobId,\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    type: RfqmTransactionSubmissionType.Trade,\r\n                },\r\n                'submissionId',\r\n            );\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n            when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId)).thenResolve([transaction]);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.generateMetaTransactionCallData(anything(), anything(), anything())).thenReturn(\r\n                '0xvalidcalldata',\r\n            );\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                gasStationAttendant: instance(gasStationAttendantMock),\r\n            });\r\n\r\n            const calldata = await rfqmService.prepareMetaTransactionTradeAsync(\r\n                job,\r\n                '0xworkeraddress',\r\n                true,\r\n                new Date(fakeClockMs),\r\n            );\r\n            expect(job).to.deep.equal(_job);\r\n            expect(calldata).to.equal('0xvalidcalldata');\r\n            verify(mockBlockchainUtils.estimateGasForAsync(anything())).never();\r\n        });\r\n\r\n        it('successfully prepares a job if `shouldValidateJob` is true', async () => {\r\n            const jobId = 'jobId';\r\n\r\n            const job = createMeaTrsanctionJobEntity(\r\n                {\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(fakeFiveMinutesLater),\r\n                    fee: {\r\n                        amount: new BigNumber(0),\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    inputToken: '0xinputToken',\r\n                    inputTokenAmount: new BigNumber(10),\r\n                    integratorId: '0xintegrator',\r\n                    metaTransaction: MOCK_META_TRANSACTION,\r\n                    metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                    minOutputTokenAmount: new BigNumber(10),\r\n                    outputToken: '0xoutputToken',\r\n                    takerAddress: '0xtakerAddress',\r\n                    takerSignature: {\r\n                        signatureType: SignatureType.EthSign,\r\n                        v: 1,\r\n                        r: '',\r\n                        s: '',\r\n                    },\r\n                    status: RfqmJobStatus.PendingEnqueued,\r\n                    workerAddress: '0xworkeraddress',\r\n                },\r\n                jobId,\r\n            );\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n            when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n            );\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            const updateRfqmJobCalledArgs: MetaTransactionJobEntity[] = [];\r\n            when(mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId)).thenResolve([]);\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.estimateGasForAsync(anything())).thenResolve(0);\r\n            when(mockBlockchainUtils.generateMetaTransactionCallData(anything(), anything(), anything())).thenReturn(\r\n                '0xvalidcalldata',\r\n            );\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                gasStationAttendant: instance(gasStationAttendantMock),\r\n            });\r\n\r\n            const calldata = await rfqmService.prepareMetaTransactionTradeAsync(\r\n                job,\r\n                '0xworkeraddress',\r\n                true,\r\n                new Date(fakeClockMs),\r\n            );\r\n            expect(job).to.deep.equal({\r\n                ..._job,\r\n                status: RfqmJobStatus.PendingProcessing,\r\n            });\r\n            expect(calldata).to.equal('0xvalidcalldata');\r\n            expect(updateRfqmJobCalledArgs[0]).to.deep.equal({\r\n                ..._job,\r\n                status: RfqmJobStatus.PendingProcessing,\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('checkLastLookAsync', () => {\r\n        it('should call `getMinOfBalancesAndAllowancesAsync` when `shouldCheckAllowance` is true and throws when balance check fails', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingProcessing,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([new BigNumber(100)]);\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(5),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.checkLastLookAsync(job, '0xworkeraddress', true);\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Order failed pre-sign validation');\r\n                expect(updateRfqmJobCalledArgs[0]).to.deep.equal({\r\n                    ..._job,\r\n                    status: RfqmJobStatus.FailedPresignValidationFailed,\r\n                });\r\n                expect(job).to.deep.equal({\r\n                    ..._job,\r\n                    status: RfqmJobStatus.FailedPresignValidationFailed,\r\n                });\r\n                verify(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).once();\r\n                verify(mockBlockchainUtils.getTokenBalancesAsync(anything())).never();\r\n            }\r\n        });\r\n\r\n        it('should call `getTokenBalancesAsync` when `shouldCheckAllowance` is false and throws when balance check fails', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingProcessing,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getTokenBalancesAsync(anything())).thenResolve([new BigNumber(100)]);\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(5),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.checkLastLookAsync(job, '0xworkeraddress', false);\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Order failed pre-sign validation');\r\n                expect(updateRfqmJobCalledArgs[0]).to.deep.equal({\r\n                    ..._job,\r\n                    status: RfqmJobStatus.FailedPresignValidationFailed,\r\n                });\r\n                expect(job).to.deep.equal({\r\n                    ..._job,\r\n                    status: RfqmJobStatus.FailedPresignValidationFailed,\r\n                });\r\n\r\n                verify(mockBlockchainUtils.getTokenBalancesAsync(anything())).once();\r\n                verify(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).never();\r\n            }\r\n        });\r\n\r\n        it('should throw when taker signature is not present', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingProcessing,\r\n                takerSignature: null,\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.checkLastLookAsync(job, '0xworkeraddress', true);\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Order failed pre-sign validation due to empty takerSignature');\r\n                expect(updateRfqmJobCalledArgs[0]).to.deep.equal({\r\n                    ..._job,\r\n                    status: RfqmJobStatus.FailedPresignValidationFailed,\r\n                });\r\n                expect(job).to.deep.equal({\r\n                    ..._job,\r\n                    status: RfqmJobStatus.FailedPresignValidationFailed,\r\n                });\r\n            }\r\n        });\r\n\r\n        it('handles decline to sign', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([]);\r\n            when(mockDbUtils.findV2QuoteByOrderHashAsync('0xorderhash')).thenResolve(\r\n                new RfqmV2QuoteEntity({\r\n                    createdAt: new Date(),\r\n                    chainId: job.chainId,\r\n                    fee: job.fee,\r\n                    makerUri: job.makerUri,\r\n                    order: job.order,\r\n                    orderHash: job.orderHash,\r\n                }),\r\n            );\r\n            const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n            const mockQuoteServerClient = mock(QuoteServerClient);\r\n            when(mockQuoteServerClient.signV2Async(anything(), anything(), anything())).thenResolve(undefined);\r\n\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const mockCacheClient = mock(CacheClient);\r\n\r\n            const mockRfqMakerManager = mock(RfqMakerManager);\r\n            when(mockRfqMakerManager.findMakerIdWithRfqmUri(job.makerUri)).thenReturn('makerId1');\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                quoteServerClient: instance(mockQuoteServerClient),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n                rfqMakerManager: instance(mockRfqMakerManager),\r\n                cacheClient: instance(mockCacheClient),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.checkLastLookAsync(job, '0xworkeraddress', true);\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Market Maker declined to sign');\r\n                expect(job).to.deep.equal({\r\n                    ..._job,\r\n                    lastLookResult: false,\r\n                    status: RfqmJobStatus.FailedLastLookDeclined,\r\n                });\r\n\r\n                verify(\r\n                    mockCacheClient.addMakerToCooldownAsync(\r\n                        'makerId1',\r\n                        anything(),\r\n                        job.chainId,\r\n                        job.order.order.makerToken,\r\n                        job.order.order.takerToken,\r\n                    ),\r\n                ).once();\r\n\r\n                verify(\r\n                    mockDbUtils.writeV2LastLookRejectionCooldownAsync(\r\n                        'makerId1',\r\n                        job.chainId,\r\n                        job.order.order.makerToken,\r\n                        job.order.order.takerToken,\r\n                        anything(),\r\n                        anything(),\r\n                        job.orderHash,\r\n                    ),\r\n                ).once();\r\n            }\r\n        });\r\n\r\n        it('handles a signature failure', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker: '0xmaker',\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash: '0xorderhash',\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync('0xorderhash')).thenResolve([]);\r\n            const mockQuoteServerClient = mock(QuoteServerClient);\r\n            when(mockQuoteServerClient.signV2Async(anything(), anything(), anything())).thenReject(\r\n                new Error('fake timeout'),\r\n            );\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                quoteServerClient: instance(mockQuoteServerClient),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.checkLastLookAsync(job, '0xworkeraddress', true);\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Job failed during market maker sign attempt');\r\n                expect(job).to.deep.equal({\r\n                    ..._job,\r\n                    status: RfqmJobStatus.FailedSignFailed,\r\n                });\r\n            }\r\n        });\r\n\r\n        it('handles signer is not the maker', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker,\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash,\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n            when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n            });\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(orderHash)).thenResolve([]);\r\n            const mockQuoteServerClient = mock(QuoteServerClient);\r\n            const invalidEIP712Sig = _.cloneDeep(validEIP712Sig);\r\n            invalidEIP712Sig.r = '0xdc158f7b53b940863bc7b001552a90282e51033f29b73d44a2701bd16faa19d3';\r\n            when(mockQuoteServerClient.signV2Async(anything(), anything(), anything())).thenResolve(invalidEIP712Sig);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                quoteServerClient: instance(mockQuoteServerClient),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            try {\r\n                await rfqmService.checkLastLookAsync(job, '0xworkeraddress', true);\r\n                expect.fail();\r\n            } catch (e) {\r\n                expect(e.message).to.contain('Invalid order signer address');\r\n                expect(job.status).to.deep.equal(RfqmJobStatus.FailedSignFailed);\r\n            }\r\n        });\r\n\r\n        it('updates market maker signatures missing bytes', async () => {\r\n            const job = new RfqmV2JobEntity({\r\n                affiliateAddress: '',\r\n                chainId: 1,\r\n                createdAt: new Date(),\r\n                expiry: new BigNumber(fakeFiveMinutesLater),\r\n                fee: {\r\n                    amount: '0',\r\n                    token: '',\r\n                    type: 'fixed',\r\n                },\r\n                integratorId: '',\r\n                lastLookResult: null,\r\n                makerUri: 'http://foo.bar',\r\n                makerSignature: null,\r\n                order: {\r\n                    order: {\r\n                        chainId: '1',\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                            new BigNumber(fakeFiveMinutesLater.toString()),\r\n                            new BigNumber(1),\r\n                            new BigNumber(1),\r\n                        ).toString(),\r\n                        maker,\r\n                        makerAmount: '1000000',\r\n                        makerToken: '0xmakertoken',\r\n                        taker: '0xtaker',\r\n                        takerAmount: '10000000',\r\n                        takerToken: '0xtakertoken',\r\n                        txOrigin: '',\r\n                        verifyingContract: '',\r\n                    },\r\n                    type: RfqmOrderTypes.Otc,\r\n                },\r\n                orderHash,\r\n                status: RfqmJobStatus.PendingEnqueued,\r\n                takerSignature: {\r\n                    signatureType: SignatureType.EthSign,\r\n                    v: 1,\r\n                    r: '',\r\n                    s: '',\r\n                },\r\n                updatedAt: new Date(),\r\n                workerAddress: '',\r\n            });\r\n            const _job = _.cloneDeep(job);\r\n\r\n            const mockDbUtils = mock(RfqmDbUtils);\r\n            when(mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(anything())).thenResolve([]);\r\n            const mockQuoteServerClient = mock(QuoteServerClient);\r\n            when(mockQuoteServerClient.signV2Async(anything(), anything(), anything())).thenResolve(missingByteSig);\r\n            const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n            when(mockBlockchainUtils.isValidOrderSignerAsync(anything(), anything())).thenResolve(true);\r\n            when(mockBlockchainUtils.getMinOfBalancesAndAllowancesAsync(anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n            when(\r\n                mockBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenResolve(0);\r\n            when(\r\n                mockBlockchainUtils.generateTakerSignedOtcOrderCallData(\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                    anything(),\r\n                ),\r\n            ).thenReturn('0xvalidcalldata');\r\n            const mockRfqMakerBalanceCacheService = mock(RfqMakerBalanceCacheService);\r\n            when(mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(anything(), anything())).thenResolve([\r\n                new BigNumber(1000000000),\r\n            ]);\r\n\r\n            const rfqmService = buildWorkerServiceForUnitTest({\r\n                dbUtils: instance(mockDbUtils),\r\n                quoteServerClient: instance(mockQuoteServerClient),\r\n                rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                rfqMakerBalanceCacheService: instance(mockRfqMakerBalanceCacheService),\r\n            });\r\n\r\n            await rfqmService.checkLastLookAsync(job, '0xworkeraddress', true);\r\n            expect(job).to.deep.equal({\r\n                ..._job,\r\n                lastLookResult: true,\r\n                makerSignature: padSignature(missingByteSig),\r\n                status: RfqmJobStatus.PendingLastLookAccepted,\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('submitToChainAsync', () => {\r\n        describe('kind is `rfqm_v2_job`', () => {\r\n            it('submits a transaction successfully when there is no previous transaction', async () => {\r\n                const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n                const job = new RfqmV2JobEntity({\r\n                    affiliateAddress: '',\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(nowS + 600),\r\n                    fee: {\r\n                        amount: '0',\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    integratorId: '',\r\n                    lastLookResult: true,\r\n                    makerUri: 'http://foo.bar',\r\n                    order: {\r\n                        order: {\r\n                            chainId: '1',\r\n                            expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                                new BigNumber(nowS + 600),\r\n                                new BigNumber(1),\r\n                                new BigNumber(1),\r\n                            ).toString(),\r\n                            maker: '0xmaker',\r\n                            makerAmount: '1000000',\r\n                            makerToken: '0xmakertoken',\r\n                            taker: '0xtaker',\r\n                            takerAmount: '10000000',\r\n                            takerToken: '0xtakertoken',\r\n                            txOrigin: '',\r\n                            verifyingContract: '',\r\n                        },\r\n                        type: RfqmOrderTypes.Otc,\r\n                    },\r\n                    orderHash: '0xorderhash',\r\n                    status: RfqmJobStatus.PendingLastLookAccepted,\r\n                    updatedAt: new Date(),\r\n                    workerAddress: '',\r\n                });\r\n\r\n                const mockTransactionRequest: providers.TransactionRequest = {};\r\n                const mockTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                    from: '0xworkeraddress',\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    orderHash: '0xorderhash',\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    type: RfqmTransactionSubmissionType.Trade,\r\n                });\r\n                const mockTransactionReceipt: providers.TransactionReceipt = {\r\n                    to: '0xto',\r\n                    from: '0xfrom',\r\n                    contractAddress: '0xexchangeproxyaddress',\r\n                    transactionIndex: 0,\r\n                    gasUsed: EthersBigNumber.from(10000),\r\n                    logsBloom: '',\r\n                    blockHash: '0xblockhash',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    logs: [],\r\n                    blockNumber: 1,\r\n                    confirmations: 3,\r\n                    cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                    effectiveGasPrice: EthersBigNumber.from(1000),\r\n                    byzantium: true,\r\n                    type: 2,\r\n                    status: 1,\r\n                };\r\n                const mockNonce = 0;\r\n\r\n                const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n                when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                    new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n                );\r\n                const mockDbUtils = mock(RfqmDbUtils);\r\n                when(\r\n                    mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                        '0xorderhash',\r\n                        RfqmTransactionSubmissionType.Trade,\r\n                    ),\r\n                ).thenResolve([]);\r\n                const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n                when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                    updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n                });\r\n                const writeV2RfqmTransactionSubmissionToDbCalledArgs: RfqmTransactionSubmissionEntity[] = [];\r\n                when(mockDbUtils.writeV2RfqmTransactionSubmissionToDbAsync(anything())).thenCall(\r\n                    async (transactionArg) => {\r\n                        writeV2RfqmTransactionSubmissionToDbCalledArgs.push(_.cloneDeep(transactionArg));\r\n                        return _.cloneDeep(mockTransaction);\r\n                    },\r\n                );\r\n                when(\r\n                    mockDbUtils.findV2TransactionSubmissionByTransactionHashAsync('0xsignedtransactionhash'),\r\n                ).thenResolve(_.cloneDeep(mockTransaction));\r\n                const updateRfqmTransactionSubmissionsCalledArgs: RfqmTransactionSubmissionEntity[][] = [];\r\n                when(mockDbUtils.updateRfqmTransactionSubmissionsAsync(anything())).thenCall(async (tranactionArg) => {\r\n                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));\r\n                });\r\n                const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n                when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n                when(mockBlockchainUtils.estimateGasForAsync(anything())).thenResolve(100);\r\n                when(\r\n                    mockBlockchainUtils.transformTxDataToTransactionRequest(anything(), anything(), anything()),\r\n                ).thenReturn(mockTransactionRequest);\r\n                when(mockBlockchainUtils.signTransactionAsync(anything())).thenResolve({\r\n                    signedTransaction: 'signedTransaction',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                });\r\n                when(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');\r\n                when(mockBlockchainUtils.submitSignedTransactionAsync(anything())).thenResolve(\r\n                    '0xsignedtransactionhash',\r\n                );\r\n                when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xsignedtransactionhash']))).thenResolve([\r\n                    mockTransactionReceipt,\r\n                ]);\r\n                when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n                when(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs(anything())).thenReturn({\r\n                    event: '',\r\n                    logIndex: null,\r\n                    transactionIndex: null,\r\n                    transactionHash: '',\r\n                    blockHash: '',\r\n                    address: '',\r\n                    data: '',\r\n                    blockNumber: 0,\r\n                    topics: [],\r\n                    args: {\r\n                        maker: '',\r\n                        makerToken: '',\r\n                        makerTokenFilledAmount: new BigNumber(1234),\r\n                        orderHash: '',\r\n                        pool: '',\r\n                        taker: '',\r\n                        takerToken: '',\r\n                        takerTokenFilledAmount: new BigNumber(5),\r\n                    },\r\n                });\r\n                const rfqmService = buildWorkerServiceForUnitTest({\r\n                    dbUtils: instance(mockDbUtils),\r\n                    gasStationAttendant: instance(gasStationAttendantMock),\r\n                    rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                });\r\n\r\n                const callback = async (\r\n                    newSubmissionContextStatus: SubmissionContextStatus,\r\n                    oldSubmissionContextStatus?: SubmissionContextStatus,\r\n                ): Promise<void> => {\r\n                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {\r\n                        const newJobStatus =\r\n                            SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);\r\n                        job.status = newJobStatus;\r\n                        await mockDbUtils.updateRfqmJobAsync(job);\r\n                    }\r\n                };\r\n                await rfqmService.submitToChainAsync({\r\n                    kind: job.kind,\r\n                    to: '0xexchangeproxyaddress',\r\n                    from: '0xworkeraddress',\r\n                    calldata: '0xcalldata',\r\n                    expiry: job.expiry,\r\n                    identifier: job.orderHash,\r\n                    submissionType: RfqmTransactionSubmissionType.Trade,\r\n                    onSubmissionContextStatusUpdate: callback,\r\n                });\r\n                verify(mockBlockchainUtils.estimateGasForAsync(anything()));\r\n                // eth_createAccessList should not be called when not enabled\r\n                verify(mockBlockchainUtils.createAccessListForAsync(anything())).never();\r\n                expect(job.status).to.equal(RfqmJobStatus.SucceededConfirmed);\r\n                expect(writeV2RfqmTransactionSubmissionToDbCalledArgs[0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.Presubmit,\r\n                );\r\n                expect(updateRfqmTransactionSubmissionsCalledArgs[0][0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.Submitted,\r\n                );\r\n                expect(updateRfqmTransactionSubmissionsCalledArgs[1][0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.SucceededConfirmed,\r\n                );\r\n            });\r\n\r\n            it(\"ignores an existing PRESUBMIT transaction which isn't found in the mempool or on chain\", async () => {\r\n                const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n                const job = new RfqmV2JobEntity({\r\n                    affiliateAddress: '',\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(nowS + 600),\r\n                    fee: {\r\n                        amount: '0',\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    integratorId: '',\r\n                    lastLookResult: true,\r\n                    makerUri: 'http://foo.bar',\r\n                    order: {\r\n                        order: {\r\n                            chainId: '1',\r\n                            expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                                new BigNumber(nowS + 600),\r\n                                new BigNumber(1),\r\n                                new BigNumber(1),\r\n                            ).toString(),\r\n                            maker: '0xmaker',\r\n                            makerAmount: '1000000',\r\n                            makerToken: '0xmakertoken',\r\n                            taker: '0xtaker',\r\n                            takerAmount: '10000000',\r\n                            takerToken: '0xtakertoken',\r\n                            txOrigin: '',\r\n                            verifyingContract: '',\r\n                        },\r\n                        type: RfqmOrderTypes.Otc,\r\n                    },\r\n                    orderHash: '0xorderhash',\r\n                    status: RfqmJobStatus.PendingLastLookAccepted,\r\n                    updatedAt: new Date(),\r\n                    workerAddress: '',\r\n                });\r\n\r\n                const mockPresubmitTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                    createdAt: new Date(1233),\r\n                    from: '0xworkeraddress',\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    orderHash: '0xorderhash',\r\n                    status: RfqmTransactionSubmissionStatus.Presubmit,\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xpresubmittransactionhash',\r\n                    type: RfqmTransactionSubmissionType.Trade,\r\n                });\r\n\r\n                const mockTransactionRequest: providers.TransactionRequest = {};\r\n                const mockTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                    from: '0xworkeraddress',\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    orderHash: '0xorderhash',\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    type: RfqmTransactionSubmissionType.Trade,\r\n                });\r\n                const mockTransactionReceipt: providers.TransactionReceipt = {\r\n                    to: '0xexchangeproxyaddress',\r\n                    from: '0xworkeraddress',\r\n                    contractAddress: '0xexchangeproxyaddress',\r\n                    transactionIndex: 0,\r\n                    gasUsed: EthersBigNumber.from(10000),\r\n                    logsBloom: '',\r\n                    blockHash: '0xblockhash',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    logs: [],\r\n                    blockNumber: 1,\r\n                    confirmations: 3,\r\n                    cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                    effectiveGasPrice: EthersBigNumber.from(1000),\r\n                    byzantium: true,\r\n                    type: 2,\r\n                    status: 1,\r\n                };\r\n                const mockNonce = 0;\r\n\r\n                const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n                when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                    new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n                );\r\n                const mockDbUtils = mock(RfqmDbUtils);\r\n                when(\r\n                    mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                        '0xorderhash',\r\n                        RfqmTransactionSubmissionType.Trade,\r\n                    ),\r\n                ).thenResolve([mockPresubmitTransaction]);\r\n                const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n                when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                    updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n                });\r\n                const writeV2RfqmTransactionSubmissionToDbCalledArgs: RfqmTransactionSubmissionEntity[] = [];\r\n                when(mockDbUtils.writeV2RfqmTransactionSubmissionToDbAsync(anything())).thenCall(\r\n                    async (transactionArg) => {\r\n                        writeV2RfqmTransactionSubmissionToDbCalledArgs.push(_.cloneDeep(transactionArg));\r\n                        return _.cloneDeep(mockTransaction);\r\n                    },\r\n                );\r\n                when(\r\n                    mockDbUtils.findV2TransactionSubmissionByTransactionHashAsync('0xsignedtransactionhash'),\r\n                ).thenResolve(_.cloneDeep(mockTransaction));\r\n                const updateRfqmTransactionSubmissionsCalledArgs: RfqmV2TransactionSubmissionEntity[][] = [];\r\n                when(mockDbUtils.updateRfqmTransactionSubmissionsAsync(anything())).thenCall(async (tranactionArg) => {\r\n                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));\r\n                });\r\n                const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n                // This mock response indicates that the presubmit transaction can't be found\r\n                // on chain or in the mempool\r\n                when(mockBlockchainUtils.getTransactionAsync('0xpresubmittransactionhash')).thenResolve(null);\r\n                when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n                when(mockBlockchainUtils.estimateGasForAsync(anything())).thenResolve(100);\r\n                when(\r\n                    mockBlockchainUtils.transformTxDataToTransactionRequest(anything(), anything(), anything()),\r\n                ).thenReturn(mockTransactionRequest);\r\n                when(mockBlockchainUtils.signTransactionAsync(anything())).thenResolve({\r\n                    signedTransaction: 'signedTransaction',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                });\r\n                when(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');\r\n                when(mockBlockchainUtils.submitSignedTransactionAsync(anything())).thenResolve(\r\n                    '0xsignedtransactionhash',\r\n                );\r\n                when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xsignedtransactionhash']))).thenResolve([\r\n                    mockTransactionReceipt,\r\n                ]);\r\n                when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n                when(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs(anything())).thenReturn({\r\n                    event: '',\r\n                    logIndex: null,\r\n                    transactionIndex: null,\r\n                    transactionHash: '',\r\n                    blockHash: '',\r\n                    address: '',\r\n                    data: '',\r\n                    blockNumber: 0,\r\n                    topics: [],\r\n                    args: {\r\n                        maker: '',\r\n                        makerToken: '',\r\n                        makerTokenFilledAmount: new BigNumber(1234),\r\n                        orderHash: '',\r\n                        pool: '',\r\n                        taker: '',\r\n                        takerToken: '',\r\n                        takerTokenFilledAmount: new BigNumber(5),\r\n                    },\r\n                });\r\n                const rfqmService = buildWorkerServiceForUnitTest({\r\n                    dbUtils: instance(mockDbUtils),\r\n                    gasStationAttendant: instance(gasStationAttendantMock),\r\n                    rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                });\r\n\r\n                const callback = async (\r\n                    newSubmissionContextStatus: SubmissionContextStatus,\r\n                    oldSubmissionContextStatus?: SubmissionContextStatus,\r\n                ): Promise<void> => {\r\n                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {\r\n                        const newJobStatus =\r\n                            SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);\r\n                        job.status = newJobStatus;\r\n                        await mockDbUtils.updateRfqmJobAsync(job);\r\n                    }\r\n                };\r\n                await rfqmService.submitToChainAsync({\r\n                    kind: job.kind,\r\n                    to: '0xexchangeproxyaddress',\r\n                    from: '0xworkeraddress',\r\n                    calldata: '0xcalldata',\r\n                    expiry: job.expiry,\r\n                    identifier: job.orderHash,\r\n                    submissionType: RfqmTransactionSubmissionType.Trade,\r\n                    onSubmissionContextStatusUpdate: callback,\r\n                });\r\n\r\n                // eth_createAccessList should not be called when not enabled\r\n                verify(mockBlockchainUtils.createAccessListForAsync(anything())).never();\r\n                expect(job.status).to.equal(RfqmJobStatus.SucceededConfirmed);\r\n                // Expectations are the same as if the presubmit transaction never existed\r\n                expect(writeV2RfqmTransactionSubmissionToDbCalledArgs[0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.Presubmit,\r\n                );\r\n                expect(updateRfqmTransactionSubmissionsCalledArgs[0][0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.Submitted,\r\n                );\r\n                expect(updateRfqmTransactionSubmissionsCalledArgs[1][0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.SucceededConfirmed,\r\n                );\r\n            });\r\n\r\n            it(\"marks a PRESUBMIT job as expired when existing transactions aren't found in \\\r\n            the mempool or on chain and the expiration time has passed\", async () => {\r\n                const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n                const job = new RfqmV2JobEntity({\r\n                    affiliateAddress: '',\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(nowS - 60),\r\n                    fee: {\r\n                        amount: '0',\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    integratorId: '',\r\n                    lastLookResult: true,\r\n                    makerUri: 'http://foo.bar',\r\n                    order: {\r\n                        order: {\r\n                            chainId: '1',\r\n                            expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                                new BigNumber(nowS - 60),\r\n                                new BigNumber(1),\r\n                                new BigNumber(1),\r\n                            ).toString(),\r\n                            maker: '0xmaker',\r\n                            makerAmount: '1000000',\r\n                            makerToken: '0xmakertoken',\r\n                            taker: '0xtaker',\r\n                            takerAmount: '10000000',\r\n                            takerToken: '0xtakertoken',\r\n                            txOrigin: '',\r\n                            verifyingContract: '',\r\n                        },\r\n                        type: RfqmOrderTypes.Otc,\r\n                    },\r\n                    orderHash: '0xorderhash',\r\n                    status: RfqmJobStatus.PendingLastLookAccepted,\r\n                    updatedAt: new Date(),\r\n                    workerAddress: '',\r\n                });\r\n\r\n                const mockPresubmitTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                    createdAt: new Date(1233),\r\n                    from: '0xworkeraddress',\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    orderHash: '0xorderhash',\r\n                    status: RfqmTransactionSubmissionStatus.Presubmit,\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xpresubmittransactionhash',\r\n                    type: RfqmTransactionSubmissionType.Trade,\r\n                });\r\n\r\n                const mockTransactionRequest: providers.TransactionRequest = {};\r\n                const mockTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                    from: '0xworkeraddress',\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    orderHash: '0xorderhash',\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    type: RfqmTransactionSubmissionType.Trade,\r\n                });\r\n                const mockTransactionReceipt: providers.TransactionReceipt = {\r\n                    to: '0xexchangeproxyaddress',\r\n                    from: '0xworkeraddress',\r\n                    contractAddress: '0xexchangeproxyaddress',\r\n                    transactionIndex: 0,\r\n                    gasUsed: EthersBigNumber.from(10000),\r\n                    logsBloom: '',\r\n                    blockHash: '0xblockhash',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    logs: [],\r\n                    blockNumber: 1,\r\n                    confirmations: 3,\r\n                    cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                    effectiveGasPrice: EthersBigNumber.from(1000),\r\n                    byzantium: true,\r\n                    type: 2,\r\n                    status: 1,\r\n                };\r\n                const mockNonce = 0;\r\n\r\n                const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n                when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                    new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n                );\r\n                const mockDbUtils = mock(RfqmDbUtils);\r\n                when(\r\n                    mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                        '0xorderhash',\r\n                        RfqmTransactionSubmissionType.Trade,\r\n                    ),\r\n                ).thenResolve([mockPresubmitTransaction]);\r\n                const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n                when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                    updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n                });\r\n                const writeV2RfqmTransactionSubmissionToDbCalledArgs: RfqmTransactionSubmissionEntity[] = [];\r\n                when(mockDbUtils.writeV2RfqmTransactionSubmissionToDbAsync(anything())).thenCall(\r\n                    async (transactionArg) => {\r\n                        writeV2RfqmTransactionSubmissionToDbCalledArgs.push(_.cloneDeep(transactionArg));\r\n                        return _.cloneDeep(mockTransaction);\r\n                    },\r\n                );\r\n                when(\r\n                    mockDbUtils.findV2TransactionSubmissionByTransactionHashAsync('0xsignedtransactionhash'),\r\n                ).thenResolve(_.cloneDeep(mockTransaction));\r\n                const updateRfqmTransactionSubmissionsCalledArgs: RfqmV2TransactionSubmissionEntity[][] = [];\r\n                when(mockDbUtils.updateRfqmTransactionSubmissionsAsync(anything())).thenCall(async (tranactionArg) => {\r\n                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));\r\n                });\r\n                const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n                // This mock response indicates that the presubmit transaction can't be found\r\n                // on chain or in the mempool\r\n                when(mockBlockchainUtils.getTransactionAsync('0xpresubmittransactionhash')).thenResolve(null);\r\n                when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n                when(mockBlockchainUtils.estimateGasForAsync(anything())).thenResolve(100);\r\n                when(\r\n                    mockBlockchainUtils.transformTxDataToTransactionRequest(anything(), anything(), anything()),\r\n                ).thenReturn(mockTransactionRequest);\r\n                when(mockBlockchainUtils.signTransactionAsync(anything())).thenResolve({\r\n                    signedTransaction: 'signedTransaction',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                });\r\n                when(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');\r\n                when(mockBlockchainUtils.submitSignedTransactionAsync(anything())).thenResolve(\r\n                    '0xsignedtransactionhash',\r\n                );\r\n                when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xsignedtransactionhash']))).thenResolve([\r\n                    mockTransactionReceipt,\r\n                ]);\r\n                when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n                when(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs(anything())).thenReturn({\r\n                    event: '',\r\n                    logIndex: null,\r\n                    transactionIndex: null,\r\n                    transactionHash: '',\r\n                    blockHash: '',\r\n                    address: '',\r\n                    data: '',\r\n                    blockNumber: 0,\r\n                    topics: [],\r\n                    args: {\r\n                        maker: '',\r\n                        makerToken: '',\r\n                        makerTokenFilledAmount: new BigNumber(1234),\r\n                        orderHash: '',\r\n                        pool: '',\r\n                        taker: '',\r\n                        takerToken: '',\r\n                        takerTokenFilledAmount: new BigNumber(5),\r\n                    },\r\n                });\r\n                const rfqmService = buildWorkerServiceForUnitTest({\r\n                    dbUtils: instance(mockDbUtils),\r\n                    gasStationAttendant: instance(gasStationAttendantMock),\r\n                    rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                });\r\n                const callback = async (\r\n                    newSubmissionContextStatus: SubmissionContextStatus,\r\n                    oldSubmissionContextStatus?: SubmissionContextStatus,\r\n                ): Promise<void> => {\r\n                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {\r\n                        const newJobStatus =\r\n                            SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);\r\n                        job.status = newJobStatus;\r\n                        await mockDbUtils.updateRfqmJobAsync(job);\r\n                    }\r\n                };\r\n\r\n                try {\r\n                    await rfqmService.submitToChainAsync({\r\n                        kind: job.kind,\r\n                        to: '0xexchangeproxyaddress',\r\n                        from: '0xworkeraddress',\r\n                        calldata: '0xcalldata',\r\n                        expiry: job.expiry,\r\n                        identifier: job.orderHash,\r\n                        submissionType: RfqmTransactionSubmissionType.Trade,\r\n                        onSubmissionContextStatusUpdate: callback,\r\n                    });\r\n                    expect.fail();\r\n                } catch (e) {\r\n                    expect(e.message).to.contain('Exceed expiry');\r\n                    // eth_createAccessList should not be called when not enabled\r\n                    verify(mockBlockchainUtils.createAccessListForAsync(anything())).never();\r\n                    expect(job.status).to.equal(RfqmJobStatus.FailedExpired);\r\n                }\r\n            });\r\n\r\n            it('recovers a PRESUBMIT transaction which actually submitted', async () => {\r\n                const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n                const job = new RfqmV2JobEntity({\r\n                    affiliateAddress: '',\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(nowS + 600),\r\n                    fee: {\r\n                        amount: '0',\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    integratorId: '',\r\n                    lastLookResult: true,\r\n                    makerUri: 'http://foo.bar',\r\n                    order: {\r\n                        order: {\r\n                            chainId: '1',\r\n                            expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                                new BigNumber(nowS + 600),\r\n                                new BigNumber(1),\r\n                                new BigNumber(1),\r\n                            ).toString(),\r\n                            maker: '0xmaker',\r\n                            makerAmount: '1000000',\r\n                            makerToken: '0xmakertoken',\r\n                            taker: '0xtaker',\r\n                            takerAmount: '10000000',\r\n                            takerToken: '0xtakertoken',\r\n                            txOrigin: '',\r\n                            verifyingContract: '',\r\n                        },\r\n                        type: RfqmOrderTypes.Otc,\r\n                    },\r\n                    orderHash: '0xorderhash',\r\n                    status: RfqmJobStatus.PendingLastLookAccepted,\r\n                    updatedAt: new Date(),\r\n                    workerAddress: '',\r\n                });\r\n\r\n                const mockPresubmitTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                    createdAt: new Date(1233),\r\n                    from: '0xworkeraddress',\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    orderHash: '0xorderhash',\r\n                    status: RfqmTransactionSubmissionStatus.Presubmit,\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xpresubmittransactionhash',\r\n                    type: RfqmTransactionSubmissionType.Trade,\r\n                });\r\n                const mockTransactionReceipt: providers.TransactionReceipt = {\r\n                    blockHash: '0xblockhash',\r\n                    blockNumber: 1,\r\n                    byzantium: true,\r\n                    confirmations: 3,\r\n                    contractAddress: '0xexchangeproxyaddress',\r\n                    cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                    effectiveGasPrice: EthersBigNumber.from(1000),\r\n                    from: '0xworkeraddress',\r\n                    gasUsed: EthersBigNumber.from(10000),\r\n                    logs: [],\r\n                    logsBloom: '',\r\n                    status: 1,\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xpresubmittransactionhash',\r\n                    transactionIndex: 0,\r\n                    type: 2,\r\n                };\r\n                const mockTransactionResponse: providers.TransactionResponse = {\r\n                    chainId: 1,\r\n                    confirmations: 0,\r\n                    data: '',\r\n                    from: '0xworkeraddress',\r\n                    gasLimit: EthersBigNumber.from(1000000),\r\n                    hash: '0xpresubmittransactionhash',\r\n                    nonce: 0,\r\n                    type: 2,\r\n                    value: EthersBigNumber.from(0),\r\n                    wait: (_confirmations: number | undefined) => Promise.resolve(mockTransactionReceipt),\r\n                };\r\n                const mockMinedBlock: providers.Block = {\r\n                    _difficulty: EthersBigNumber.from(2),\r\n                    difficulty: 2,\r\n                    extraData: '',\r\n                    gasLimit: EthersBigNumber.from(1000),\r\n                    gasUsed: EthersBigNumber.from(1000),\r\n                    hash: '0xblockhash',\r\n                    miner: '0xminer',\r\n                    nonce: '0x000',\r\n                    number: 21,\r\n                    parentHash: '0xparentblockhash',\r\n                    timestamp: 12345,\r\n                    transactions: ['0xpresubmittransactionhash'],\r\n                };\r\n                const mockNonce = 0;\r\n\r\n                const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n                when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                    new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n                );\r\n                const mockDbUtils = mock(RfqmDbUtils);\r\n                when(\r\n                    mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                        '0xorderhash',\r\n                        RfqmTransactionSubmissionType.Trade,\r\n                    ),\r\n                ).thenResolve([mockPresubmitTransaction]);\r\n                const updateRfqmTransactionSubmissionsCalledArgs: RfqmV2TransactionSubmissionEntity[][] = [];\r\n                when(mockDbUtils.updateRfqmTransactionSubmissionsAsync(anything())).thenCall(async (tranactionArg) => {\r\n                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));\r\n                });\r\n                const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n                // This mock response indicates that the transaction is present in the mempool\r\n                when(mockBlockchainUtils.getTransactionAsync('0xpresubmittransactionhash')).thenResolve(\r\n                    mockTransactionResponse,\r\n                );\r\n                when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n                when(mockBlockchainUtils.estimateGasForAsync(anything())).thenReject(\r\n                    new Error('estimateGasForAsync called during recovery'),\r\n                );\r\n                when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xpresubmittransactionhash']))).thenResolve([\r\n                    mockTransactionReceipt,\r\n                ]);\r\n                when(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);\r\n                when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n                when(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs(anything())).thenReturn({\r\n                    event: '',\r\n                    logIndex: null,\r\n                    transactionIndex: null,\r\n                    transactionHash: '',\r\n                    blockHash: '',\r\n                    address: '',\r\n                    data: '',\r\n                    blockNumber: 0,\r\n                    topics: [],\r\n                    args: {\r\n                        maker: '',\r\n                        makerToken: '',\r\n                        makerTokenFilledAmount: new BigNumber(1234),\r\n                        orderHash: '',\r\n                        pool: '',\r\n                        taker: '',\r\n                        takerToken: '',\r\n                        takerTokenFilledAmount: new BigNumber(5),\r\n                    },\r\n                });\r\n                const rfqmService = buildWorkerServiceForUnitTest({\r\n                    dbUtils: instance(mockDbUtils),\r\n                    gasStationAttendant: instance(gasStationAttendantMock),\r\n                    rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                });\r\n                const callback = async (\r\n                    newSubmissionContextStatus: SubmissionContextStatus,\r\n                    oldSubmissionContextStatus?: SubmissionContextStatus,\r\n                ): Promise<void> => {\r\n                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {\r\n                        const newJobStatus =\r\n                            SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);\r\n                        job.status = newJobStatus;\r\n                        await mockDbUtils.updateRfqmJobAsync(job);\r\n                    }\r\n                };\r\n\r\n                await rfqmService.submitToChainAsync({\r\n                    kind: job.kind,\r\n                    to: '0xexchangeproxyaddress',\r\n                    from: '0xworkeraddress',\r\n                    calldata: '0xcalldata',\r\n                    expiry: job.expiry,\r\n                    identifier: job.orderHash,\r\n                    submissionType: RfqmTransactionSubmissionType.Trade,\r\n                    onSubmissionContextStatusUpdate: callback,\r\n                });\r\n\r\n                // eth_createAccessList should not be called when not enabled\r\n                verify(mockBlockchainUtils.createAccessListForAsync(anything())).never();\r\n                // Logic should first check to see if the transaction was actually sent.\r\n                // If it was (and it is being mock so in this test) then the logic first\r\n                // updates the status of the transaction to \"Submitted\"\r\n                expect(updateRfqmTransactionSubmissionsCalledArgs[0][0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.Submitted,\r\n                );\r\n                // The logic then enters the watch loop. On the first check, a transaction\r\n                // receipt exists for this transaction and it will be marked \"confirmed\"\r\n                expect(updateRfqmTransactionSubmissionsCalledArgs[1][0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.SucceededConfirmed,\r\n                );\r\n                expect(job.status).to.equal(RfqmJobStatus.SucceededConfirmed);\r\n            });\r\n\r\n            it('finalizes a job to FAILED_EXPIRED once the expiration window has passed', async () => {\r\n                const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n                const ninetySecondsAgo = nowS - 100;\r\n                const job = new RfqmV2JobEntity({\r\n                    affiliateAddress: '',\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(ninetySecondsAgo),\r\n                    fee: {\r\n                        amount: '0',\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    integratorId: '',\r\n                    lastLookResult: true,\r\n                    makerUri: 'http://foo.bar',\r\n                    order: {\r\n                        order: {\r\n                            chainId: '1',\r\n                            expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                                new BigNumber(ninetySecondsAgo.toString()),\r\n                                new BigNumber(1),\r\n                                new BigNumber(1),\r\n                            ).toString(),\r\n                            maker: '0xmaker',\r\n                            makerAmount: '1000000',\r\n                            makerToken: '0xmakertoken',\r\n                            taker: '0xtaker',\r\n                            takerAmount: '10000000',\r\n                            takerToken: '0xtakertoken',\r\n                            txOrigin: '',\r\n                            verifyingContract: '',\r\n                        },\r\n                        type: RfqmOrderTypes.Otc,\r\n                    },\r\n                    orderHash: '0xorderhash',\r\n                    status: RfqmJobStatus.PendingSubmitted,\r\n                    updatedAt: new Date(),\r\n                    workerAddress: '',\r\n                });\r\n\r\n                const mockTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                    createdAt: new Date(1233),\r\n                    from: '0xworkeraddress',\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    orderHash: '0xorderhash',\r\n                    status: RfqmTransactionSubmissionStatus.Submitted,\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xpresubmittransactionhash',\r\n                    type: RfqmTransactionSubmissionType.Trade,\r\n                });\r\n\r\n                const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n                when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                    new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n                );\r\n                const mockDbUtils = mock(RfqmDbUtils);\r\n                when(\r\n                    mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                        '0xorderhash',\r\n                        RfqmTransactionSubmissionType.Trade,\r\n                    ),\r\n                ).thenResolve([mockTransaction]);\r\n                const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n                when(mockBlockchainUtils.estimateGasForAsync(anything())).thenResolve(100);\r\n                when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xpresubmittransactionhash']))).thenResolve([]);\r\n                const rfqmService = buildWorkerServiceForUnitTest({\r\n                    dbUtils: instance(mockDbUtils),\r\n                    gasStationAttendant: instance(gasStationAttendantMock),\r\n                    rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                });\r\n                const callback = async (\r\n                    newSubmissionContextStatus: SubmissionContextStatus,\r\n                    oldSubmissionContextStatus?: SubmissionContextStatus,\r\n                ): Promise<void> => {\r\n                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {\r\n                        const newJobStatus =\r\n                            SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);\r\n                        job.status = newJobStatus;\r\n                        await mockDbUtils.updateRfqmJobAsync(job);\r\n                    }\r\n                };\r\n\r\n                try {\r\n                    await rfqmService.submitToChainAsync({\r\n                        kind: job.kind,\r\n                        to: '0xexchangeproxyaddress',\r\n                        from: '0xworkeraddress',\r\n                        calldata: '0xcalldata',\r\n                        expiry: job.expiry,\r\n                        identifier: job.orderHash,\r\n                        submissionType: RfqmTransactionSubmissionType.Trade,\r\n                        onSubmissionContextStatusUpdate: callback,\r\n                    });\r\n                } catch (e) {\r\n                    expect(e.message).to.contain('Exceed expiry');\r\n                    // eth_createAccessList should not be called when not enabled\r\n                    verify(mockBlockchainUtils.createAccessListForAsync(anything())).never();\r\n                    expect(job.status).to.equal(RfqmJobStatus.FailedExpired);\r\n                }\r\n            });\r\n\r\n            it('should call createAccessListForAsync and should not affect the overall method when RPC returns properly', async () => {\r\n                const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n                const job = new RfqmV2JobEntity({\r\n                    affiliateAddress: '',\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(nowS + 600),\r\n                    fee: {\r\n                        amount: '0',\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    integratorId: '',\r\n                    lastLookResult: true,\r\n                    makerUri: 'http://foo.bar',\r\n                    order: {\r\n                        order: {\r\n                            chainId: '1',\r\n                            expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                                new BigNumber(nowS + 600),\r\n                                new BigNumber(1),\r\n                                new BigNumber(1),\r\n                            ).toString(),\r\n                            maker: '0xmaker',\r\n                            makerAmount: '1000000',\r\n                            makerToken: '0xmakertoken',\r\n                            taker: '0xtaker',\r\n                            takerAmount: '10000000',\r\n                            takerToken: '0xtakertoken',\r\n                            txOrigin: '',\r\n                            verifyingContract: '',\r\n                        },\r\n                        type: RfqmOrderTypes.Otc,\r\n                    },\r\n                    orderHash: '0xorderhash',\r\n                    status: RfqmJobStatus.PendingLastLookAccepted,\r\n                    updatedAt: new Date(),\r\n                    workerAddress: '',\r\n                });\r\n\r\n                const mockTransactionRequest: providers.TransactionRequest = {};\r\n                const mockTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                    from: '0xworkeraddress',\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    orderHash: '0xorderhash',\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    type: RfqmTransactionSubmissionType.Trade,\r\n                });\r\n                const mockTransactionReceipt: providers.TransactionReceipt = {\r\n                    to: '0xexchangeproxyaddress',\r\n                    from: '0xworkeraddress',\r\n                    contractAddress: '0xexchangeproxyaddress',\r\n                    transactionIndex: 0,\r\n                    gasUsed: EthersBigNumber.from(10000),\r\n                    logsBloom: '',\r\n                    blockHash: '0xblockhash',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    logs: [],\r\n                    blockNumber: 1,\r\n                    confirmations: 3,\r\n                    cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                    effectiveGasPrice: EthersBigNumber.from(1000),\r\n                    byzantium: true,\r\n                    type: 2,\r\n                    status: 1,\r\n                };\r\n                const mockNonce = 0;\r\n\r\n                const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n                when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                    new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n                );\r\n                const mockDbUtils = mock(RfqmDbUtils);\r\n                when(\r\n                    mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                        '0xorderhash',\r\n                        RfqmTransactionSubmissionType.Trade,\r\n                    ),\r\n                ).thenResolve([]);\r\n                const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n                when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                    updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n                });\r\n                const writeV2RfqmTransactionSubmissionToDbCalledArgs: RfqmTransactionSubmissionEntity[] = [];\r\n                when(mockDbUtils.writeV2RfqmTransactionSubmissionToDbAsync(anything())).thenCall(\r\n                    async (transactionArg) => {\r\n                        writeV2RfqmTransactionSubmissionToDbCalledArgs.push(_.cloneDeep(transactionArg));\r\n                        return _.cloneDeep(mockTransaction);\r\n                    },\r\n                );\r\n                when(\r\n                    mockDbUtils.findV2TransactionSubmissionByTransactionHashAsync('0xsignedtransactionhash'),\r\n                ).thenResolve(_.cloneDeep(mockTransaction));\r\n                const updateRfqmTransactionSubmissionsCalledArgs: RfqmTransactionSubmissionEntity[][] = [];\r\n                when(mockDbUtils.updateRfqmTransactionSubmissionsAsync(anything())).thenCall(async (tranactionArg) => {\r\n                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));\r\n                });\r\n                const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n                when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n                when(mockBlockchainUtils.estimateGasForAsync(anything())).thenResolve(100);\r\n                when(\r\n                    mockBlockchainUtils.transformTxDataToTransactionRequest(anything(), anything(), anything()),\r\n                ).thenReturn(mockTransactionRequest);\r\n                when(mockBlockchainUtils.signTransactionAsync(anything())).thenResolve({\r\n                    signedTransaction: 'signedTransaction',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                });\r\n                when(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');\r\n                when(mockBlockchainUtils.submitSignedTransactionAsync(anything())).thenResolve(\r\n                    '0xsignedtransactionhash',\r\n                );\r\n                when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xsignedtransactionhash']))).thenResolve([\r\n                    mockTransactionReceipt,\r\n                ]);\r\n                when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n                when(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs(anything())).thenReturn({\r\n                    event: '',\r\n                    logIndex: null,\r\n                    transactionIndex: null,\r\n                    transactionHash: '',\r\n                    blockHash: '',\r\n                    address: '',\r\n                    data: '',\r\n                    blockNumber: 0,\r\n                    topics: [],\r\n                    args: {\r\n                        maker: '',\r\n                        makerToken: '',\r\n                        makerTokenFilledAmount: new BigNumber(1234),\r\n                        orderHash: '',\r\n                        pool: '',\r\n                        taker: '',\r\n                        takerToken: '',\r\n                        takerTokenFilledAmount: new BigNumber(5),\r\n                    },\r\n                });\r\n                when(mockBlockchainUtils.createAccessListForAsync(anything())).thenResolve({\r\n                    accessList: {\r\n                        '0x1234': ['0x0'],\r\n                        '0x12345': ['0x1'],\r\n                    },\r\n                    gasEstimate: 1000,\r\n                });\r\n                const rfqmService = buildWorkerServiceForUnitTest({\r\n                    dbUtils: instance(mockDbUtils),\r\n                    gasStationAttendant: instance(gasStationAttendantMock),\r\n                    rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                    enableAccessList: true,\r\n                });\r\n                const callback = async (\r\n                    newSubmissionContextStatus: SubmissionContextStatus,\r\n                    oldSubmissionContextStatus?: SubmissionContextStatus,\r\n                ): Promise<void> => {\r\n                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {\r\n                        const newJobStatus =\r\n                            SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);\r\n                        job.status = newJobStatus;\r\n                        await mockDbUtils.updateRfqmJobAsync(job);\r\n                    }\r\n                };\r\n\r\n                await rfqmService.submitToChainAsync({\r\n                    kind: job.kind,\r\n                    to: '0xexchangeproxyaddress',\r\n                    from: '0xworkeraddress',\r\n                    calldata: '0xcalldata',\r\n                    expiry: job.expiry,\r\n                    identifier: job.orderHash,\r\n                    submissionType: RfqmTransactionSubmissionType.Trade,\r\n                    onSubmissionContextStatusUpdate: callback,\r\n                });\r\n                verify(mockBlockchainUtils.estimateGasForAsync(anything()));\r\n                verify(mockBlockchainUtils.createAccessListForAsync(anything())).once();\r\n                expect(job.status).to.equal(RfqmJobStatus.SucceededConfirmed);\r\n                expect(writeV2RfqmTransactionSubmissionToDbCalledArgs[0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.Presubmit,\r\n                );\r\n                expect(updateRfqmTransactionSubmissionsCalledArgs[0][0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.Submitted,\r\n                );\r\n                expect(updateRfqmTransactionSubmissionsCalledArgs[1][0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.SucceededConfirmed,\r\n                );\r\n            });\r\n\r\n            it('should call createAccessListForAsync and should not affect the overall method when RPC errors out', async () => {\r\n                const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n                const job = new RfqmV2JobEntity({\r\n                    affiliateAddress: '',\r\n                    chainId: 1,\r\n                    createdAt: new Date(),\r\n                    expiry: new BigNumber(nowS + 600),\r\n                    fee: {\r\n                        amount: '0',\r\n                        token: '',\r\n                        type: 'fixed',\r\n                    },\r\n                    integratorId: '',\r\n                    lastLookResult: true,\r\n                    makerUri: 'http://foo.bar',\r\n                    order: {\r\n                        order: {\r\n                            chainId: '1',\r\n                            expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\r\n                                new BigNumber(nowS + 600),\r\n                                new BigNumber(1),\r\n                                new BigNumber(1),\r\n                            ).toString(),\r\n                            maker: '0xmaker',\r\n                            makerAmount: '1000000',\r\n                            makerToken: '0xmakertoken',\r\n                            taker: '0xtaker',\r\n                            takerAmount: '10000000',\r\n                            takerToken: '0xtakertoken',\r\n                            txOrigin: '',\r\n                            verifyingContract: '',\r\n                        },\r\n                        type: RfqmOrderTypes.Otc,\r\n                    },\r\n                    orderHash: '0xorderhash',\r\n                    status: RfqmJobStatus.PendingLastLookAccepted,\r\n                    updatedAt: new Date(),\r\n                    workerAddress: '',\r\n                });\r\n\r\n                const mockTransactionRequest: providers.TransactionRequest = {};\r\n                const mockTransaction = new RfqmV2TransactionSubmissionEntity({\r\n                    from: '0xworkeraddress',\r\n                    maxFeePerGas: new BigNumber(100000),\r\n                    maxPriorityFeePerGas: new BigNumber(100),\r\n                    nonce: 0,\r\n                    orderHash: '0xorderhash',\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    type: RfqmTransactionSubmissionType.Trade,\r\n                });\r\n                const mockTransactionReceipt: providers.TransactionReceipt = {\r\n                    to: '0xto',\r\n                    from: '0xfrom',\r\n                    contractAddress: '0xexchangeproxyaddress',\r\n                    transactionIndex: 0,\r\n                    gasUsed: EthersBigNumber.from(10000),\r\n                    logsBloom: '',\r\n                    blockHash: '0xblockhash',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    logs: [],\r\n                    blockNumber: 1,\r\n                    confirmations: 3,\r\n                    cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                    effectiveGasPrice: EthersBigNumber.from(1000),\r\n                    byzantium: true,\r\n                    type: 2,\r\n                    status: 1,\r\n                };\r\n                const mockNonce = 0;\r\n\r\n                const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n                when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                    new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n                );\r\n                const mockDbUtils = mock(RfqmDbUtils);\r\n                when(\r\n                    mockDbUtils.findV2TransactionSubmissionsByOrderHashAsync(\r\n                        '0xorderhash',\r\n                        RfqmTransactionSubmissionType.Trade,\r\n                    ),\r\n                ).thenResolve([]);\r\n                const updateRfqmJobCalledArgs: RfqmJobEntity[] = [];\r\n                when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                    updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n                });\r\n                const writeV2RfqmTransactionSubmissionToDbCalledArgs: RfqmTransactionSubmissionEntity[] = [];\r\n                when(mockDbUtils.writeV2RfqmTransactionSubmissionToDbAsync(anything())).thenCall(\r\n                    async (transactionArg) => {\r\n                        writeV2RfqmTransactionSubmissionToDbCalledArgs.push(_.cloneDeep(transactionArg));\r\n                        return _.cloneDeep(mockTransaction);\r\n                    },\r\n                );\r\n                when(\r\n                    mockDbUtils.findV2TransactionSubmissionByTransactionHashAsync('0xsignedtransactionhash'),\r\n                ).thenResolve(_.cloneDeep(mockTransaction));\r\n                const updateRfqmTransactionSubmissionsCalledArgs: RfqmTransactionSubmissionEntity[][] = [];\r\n                when(mockDbUtils.updateRfqmTransactionSubmissionsAsync(anything())).thenCall(async (tranactionArg) => {\r\n                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));\r\n                });\r\n                const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n                when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n                when(mockBlockchainUtils.estimateGasForAsync(anything())).thenResolve(100);\r\n                when(\r\n                    mockBlockchainUtils.transformTxDataToTransactionRequest(anything(), anything(), anything()),\r\n                ).thenReturn(mockTransactionRequest);\r\n                when(mockBlockchainUtils.signTransactionAsync(anything())).thenResolve({\r\n                    signedTransaction: 'signedTransaction',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                });\r\n                when(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');\r\n                when(mockBlockchainUtils.submitSignedTransactionAsync(anything())).thenResolve(\r\n                    '0xsignedtransactionhash',\r\n                );\r\n                when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xsignedtransactionhash']))).thenResolve([\r\n                    mockTransactionReceipt,\r\n                ]);\r\n                when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n                when(mockBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs(anything())).thenReturn({\r\n                    event: '',\r\n                    logIndex: null,\r\n                    transactionIndex: null,\r\n                    transactionHash: '',\r\n                    blockHash: '',\r\n                    address: '',\r\n                    data: '',\r\n                    blockNumber: 0,\r\n                    topics: [],\r\n                    args: {\r\n                        maker: '',\r\n                        makerToken: '',\r\n                        makerTokenFilledAmount: new BigNumber(1234),\r\n                        orderHash: '',\r\n                        pool: '',\r\n                        taker: '',\r\n                        takerToken: '',\r\n                        takerTokenFilledAmount: new BigNumber(5),\r\n                    },\r\n                });\r\n                when(mockBlockchainUtils.createAccessListForAsync(anything())).thenReject(new Error('error'));\r\n                const rfqmService = buildWorkerServiceForUnitTest({\r\n                    dbUtils: instance(mockDbUtils),\r\n                    gasStationAttendant: instance(gasStationAttendantMock),\r\n                    rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                    enableAccessList: true,\r\n                });\r\n                const callback = async (\r\n                    newSubmissionContextStatus: SubmissionContextStatus,\r\n                    oldSubmissionContextStatus?: SubmissionContextStatus,\r\n                ): Promise<void> => {\r\n                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {\r\n                        const newJobStatus =\r\n                            SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);\r\n                        job.status = newJobStatus;\r\n                        await mockDbUtils.updateRfqmJobAsync(job);\r\n                    }\r\n                };\r\n\r\n                await rfqmService.submitToChainAsync({\r\n                    kind: job.kind,\r\n                    to: '0xexchangeproxyaddress',\r\n                    from: '0xworkeraddress',\r\n                    calldata: '0xcalldata',\r\n                    expiry: job.expiry,\r\n                    identifier: job.orderHash,\r\n                    submissionType: RfqmTransactionSubmissionType.Trade,\r\n                    onSubmissionContextStatusUpdate: callback,\r\n                });\r\n                verify(mockBlockchainUtils.estimateGasForAsync(anything()));\r\n                verify(mockBlockchainUtils.createAccessListForAsync(anything())).once();\r\n                expect(job.status).to.equal(RfqmJobStatus.SucceededConfirmed);\r\n                expect(writeV2RfqmTransactionSubmissionToDbCalledArgs[0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.Presubmit,\r\n                );\r\n                expect(updateRfqmTransactionSubmissionsCalledArgs[0][0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.Submitted,\r\n                );\r\n                expect(updateRfqmTransactionSubmissionsCalledArgs[1][0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.SucceededConfirmed,\r\n                );\r\n            });\r\n        });\r\n\r\n        // Not all tests from test block 'kind is `rfqm_v2_job`' is included here as most of the tests are similiar.\r\n        // The tests below specifically test if corresponding methods are called for job kind `meta_transaction_job`.\r\n        describe('kind is `meta_transaction_job`', () => {\r\n            it('submits a transaction successfully when there is no previous transaction', async () => {\r\n                const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n                const jobId = 'jobId';\r\n                const transactionSubmissionId = 'submissionId';\r\n                const job = createMeaTrsanctionJobEntity(\r\n                    {\r\n                        chainId: 1,\r\n                        createdAt: new Date(),\r\n                        expiry: new BigNumber(nowS + 600),\r\n                        fee: {\r\n                            amount: new BigNumber(0),\r\n                            token: '',\r\n                            type: 'fixed',\r\n                        },\r\n                        inputToken: '0xinputToken',\r\n                        inputTokenAmount: new BigNumber(10),\r\n                        integratorId: '0xintegrator',\r\n                        metaTransaction: MOCK_META_TRANSACTION,\r\n                        metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                        minOutputTokenAmount: new BigNumber(10),\r\n                        outputToken: '0xoutputToken',\r\n                        takerAddress: '0xtakerAddress',\r\n                        takerSignature: {\r\n                            signatureType: SignatureType.EthSign,\r\n                            v: 1,\r\n                            r: '',\r\n                            s: '',\r\n                        },\r\n                        status: RfqmJobStatus.PendingLastLookAccepted,\r\n                        workerAddress: '0xworkeraddress',\r\n                    },\r\n                    jobId,\r\n                );\r\n\r\n                const mockTransactionRequest: providers.TransactionRequest = {};\r\n                const mockTransaction = createMetaTransactionSubmissionEntity(\r\n                    {\r\n                        from: '0xworkeraddress',\r\n                        metaTransactionJobId: jobId,\r\n                        maxFeePerGas: new BigNumber(100000),\r\n                        maxPriorityFeePerGas: new BigNumber(100),\r\n                        nonce: 0,\r\n                        to: '0xexchangeproxyaddress',\r\n                        transactionHash: '0xsignedtransactionhash',\r\n                        type: RfqmTransactionSubmissionType.Trade,\r\n                    },\r\n                    transactionSubmissionId,\r\n                );\r\n                const mockTransactionReceipt: providers.TransactionReceipt = {\r\n                    to: '0xto',\r\n                    from: '0xfrom',\r\n                    contractAddress: '0xexchangeproxyaddress',\r\n                    transactionIndex: 0,\r\n                    gasUsed: EthersBigNumber.from(10000),\r\n                    logsBloom: '',\r\n                    blockHash: '0xblockhash',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    logs: [],\r\n                    blockNumber: 1,\r\n                    confirmations: 3,\r\n                    cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                    effectiveGasPrice: EthersBigNumber.from(1000),\r\n                    byzantium: true,\r\n                    type: 2,\r\n                    status: 1,\r\n                };\r\n                const mockNonce = 0;\r\n\r\n                const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n                when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                    new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n                );\r\n                const mockDbUtils = mock(RfqmDbUtils);\r\n                when(\r\n                    mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, RfqmTransactionSubmissionType.Trade),\r\n                ).thenResolve([]);\r\n                const updateRfqmJobCalledArgs: MetaTransactionJobEntity[] = [];\r\n                when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                    updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n                });\r\n                const writeMetaTransactionSubmissionAsyncCalledArgs: MetaTransactionSubmissionEntity[] = [];\r\n                when(mockDbUtils.writeMetaTransactionSubmissionAsync(anything())).thenCall(async (transactionArg) => {\r\n                    writeMetaTransactionSubmissionAsyncCalledArgs.push(_.cloneDeep(transactionArg));\r\n                    return _.cloneDeep(mockTransaction);\r\n                });\r\n                when(\r\n                    mockDbUtils.findMetaTransactionSubmissionsByTransactionHashAsync(\r\n                        '0xsignedtransactionhash',\r\n                        RfqmTransactionSubmissionType.Trade,\r\n                    ),\r\n                ).thenResolve([_.cloneDeep(mockTransaction)]);\r\n                const updateRfqmTransactionSubmissionsCalledArgs: MetaTransactionSubmissionEntity[][] = [];\r\n                when(mockDbUtils.updateRfqmTransactionSubmissionsAsync(anything())).thenCall(async (tranactionArg) => {\r\n                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));\r\n                });\r\n                const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n                when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n                when(mockBlockchainUtils.estimateGasForAsync(anything())).thenResolve(100);\r\n                when(\r\n                    mockBlockchainUtils.transformTxDataToTransactionRequest(anything(), anything(), anything()),\r\n                ).thenReturn(mockTransactionRequest);\r\n                when(mockBlockchainUtils.signTransactionAsync(anything())).thenResolve({\r\n                    signedTransaction: 'signedTransaction',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                });\r\n                when(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');\r\n                when(mockBlockchainUtils.submitSignedTransactionAsync(anything())).thenResolve(\r\n                    '0xsignedtransactionhash',\r\n                );\r\n                when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xsignedtransactionhash']))).thenResolve([\r\n                    mockTransactionReceipt,\r\n                ]);\r\n                when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n                const rfqmService = buildWorkerServiceForUnitTest({\r\n                    dbUtils: instance(mockDbUtils),\r\n                    gasStationAttendant: instance(gasStationAttendantMock),\r\n                    rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                });\r\n\r\n                const callback = async (\r\n                    newSubmissionContextStatus: SubmissionContextStatus,\r\n                    oldSubmissionContextStatus?: SubmissionContextStatus,\r\n                ): Promise<void> => {\r\n                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {\r\n                        const newJobStatus =\r\n                            SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);\r\n                        job.status = newJobStatus;\r\n                        await mockDbUtils.updateRfqmJobAsync(job);\r\n                    }\r\n                };\r\n                await rfqmService.submitToChainAsync({\r\n                    kind: job.kind,\r\n                    to: '0xexchangeproxyaddress',\r\n                    from: '0xworkeraddress',\r\n                    calldata: '0xcalldata',\r\n                    expiry: job.expiry,\r\n                    identifier: job.id,\r\n                    submissionType: RfqmTransactionSubmissionType.Trade,\r\n                    onSubmissionContextStatusUpdate: callback,\r\n                });\r\n                verify(mockBlockchainUtils.estimateGasForAsync(anything()));\r\n                // eth_createAccessList should not be called when not enabled\r\n                verify(mockBlockchainUtils.createAccessListForAsync(anything())).never();\r\n                expect(job.status).to.equal(RfqmJobStatus.SucceededConfirmed);\r\n                expect(writeMetaTransactionSubmissionAsyncCalledArgs[0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.Presubmit,\r\n                );\r\n                expect(updateRfqmTransactionSubmissionsCalledArgs[0][0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.Submitted,\r\n                );\r\n                expect(updateRfqmTransactionSubmissionsCalledArgs[1][0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.SucceededConfirmed,\r\n                );\r\n            });\r\n\r\n            it('recovers a PRESUBMIT transaction which actually submitted', async () => {\r\n                const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n                const jobId = 'jobId';\r\n                const transactionSubmissionId = 'submissionId';\r\n                const job = createMeaTrsanctionJobEntity(\r\n                    {\r\n                        chainId: 1,\r\n                        createdAt: new Date(),\r\n                        expiry: new BigNumber(nowS + 600),\r\n                        fee: {\r\n                            amount: new BigNumber(0),\r\n                            token: '',\r\n                            type: 'fixed',\r\n                        },\r\n                        inputToken: '0xinputToken',\r\n                        inputTokenAmount: new BigNumber(10),\r\n                        integratorId: '0xintegrator',\r\n                        metaTransaction: MOCK_META_TRANSACTION,\r\n                        metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                        minOutputTokenAmount: new BigNumber(10),\r\n                        outputToken: '0xoutputToken',\r\n                        takerAddress: '0xtakerAddress',\r\n                        takerSignature: {\r\n                            signatureType: SignatureType.EthSign,\r\n                            v: 1,\r\n                            r: '',\r\n                            s: '',\r\n                        },\r\n                        status: RfqmJobStatus.PendingLastLookAccepted,\r\n                        workerAddress: '0xworkeraddress',\r\n                    },\r\n                    jobId,\r\n                );\r\n\r\n                const mockPresubmitTransaction = createMetaTransactionSubmissionEntity(\r\n                    {\r\n                        from: '0xworkeraddress',\r\n                        metaTransactionJobId: jobId,\r\n                        maxFeePerGas: new BigNumber(100000),\r\n                        maxPriorityFeePerGas: new BigNumber(100),\r\n                        nonce: 0,\r\n                        status: RfqmTransactionSubmissionStatus.Presubmit,\r\n                        to: '0xexchangeproxyaddress',\r\n                        transactionHash: '0xpresubmittransactionhash',\r\n                        type: RfqmTransactionSubmissionType.Trade,\r\n                    },\r\n                    transactionSubmissionId,\r\n                );\r\n                const mockTransactionReceipt: providers.TransactionReceipt = {\r\n                    blockHash: '0xblockhash',\r\n                    blockNumber: 1,\r\n                    byzantium: true,\r\n                    confirmations: 3,\r\n                    contractAddress: '0xexchangeproxyaddress',\r\n                    cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                    effectiveGasPrice: EthersBigNumber.from(1000),\r\n                    from: '0xworkeraddress',\r\n                    gasUsed: EthersBigNumber.from(10000),\r\n                    logs: [],\r\n                    logsBloom: '',\r\n                    status: 1,\r\n                    to: '0xexchangeproxyaddress',\r\n                    transactionHash: '0xpresubmittransactionhash',\r\n                    transactionIndex: 0,\r\n                    type: 2,\r\n                };\r\n                const mockTransactionResponse: providers.TransactionResponse = {\r\n                    chainId: 1,\r\n                    confirmations: 0,\r\n                    data: '',\r\n                    from: '0xworkeraddress',\r\n                    gasLimit: EthersBigNumber.from(1000000),\r\n                    hash: '0xpresubmittransactionhash',\r\n                    nonce: 0,\r\n                    type: 2,\r\n                    value: EthersBigNumber.from(0),\r\n                    wait: (_confirmations: number | undefined) => Promise.resolve(mockTransactionReceipt),\r\n                };\r\n                const mockMinedBlock: providers.Block = {\r\n                    _difficulty: EthersBigNumber.from(2),\r\n                    difficulty: 2,\r\n                    extraData: '',\r\n                    gasLimit: EthersBigNumber.from(1000),\r\n                    gasUsed: EthersBigNumber.from(1000),\r\n                    hash: '0xblockhash',\r\n                    miner: '0xminer',\r\n                    nonce: '0x000',\r\n                    number: 21,\r\n                    parentHash: '0xparentblockhash',\r\n                    timestamp: 12345,\r\n                    transactions: ['0xpresubmittransactionhash'],\r\n                };\r\n                const mockNonce = 0;\r\n\r\n                const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n                when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                    new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n                );\r\n                const mockDbUtils = mock(RfqmDbUtils);\r\n                when(\r\n                    mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, RfqmTransactionSubmissionType.Trade),\r\n                ).thenResolve([mockPresubmitTransaction]);\r\n                const updateRfqmTransactionSubmissionsCalledArgs: MetaTransactionSubmissionEntity[][] = [];\r\n                when(mockDbUtils.updateRfqmTransactionSubmissionsAsync(anything())).thenCall(async (tranactionArg) => {\r\n                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));\r\n                });\r\n                const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n                // This mock response indicates that the transaction is present in the mempool\r\n                when(mockBlockchainUtils.getTransactionAsync('0xpresubmittransactionhash')).thenResolve(\r\n                    mockTransactionResponse,\r\n                );\r\n                when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n                when(mockBlockchainUtils.estimateGasForAsync(anything())).thenReject(\r\n                    new Error('estimateGasForAsync called during recovery'),\r\n                );\r\n                when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xpresubmittransactionhash']))).thenResolve([\r\n                    mockTransactionReceipt,\r\n                ]);\r\n                when(mockBlockchainUtils.getBlockAsync('0xblockhash')).thenResolve(mockMinedBlock);\r\n                when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n                const rfqmService = buildWorkerServiceForUnitTest({\r\n                    dbUtils: instance(mockDbUtils),\r\n                    gasStationAttendant: instance(gasStationAttendantMock),\r\n                    rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                });\r\n                const callback = async (\r\n                    newSubmissionContextStatus: SubmissionContextStatus,\r\n                    oldSubmissionContextStatus?: SubmissionContextStatus,\r\n                ): Promise<void> => {\r\n                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {\r\n                        const newJobStatus =\r\n                            SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);\r\n                        job.status = newJobStatus;\r\n                        await mockDbUtils.updateRfqmJobAsync(job);\r\n                    }\r\n                };\r\n\r\n                await rfqmService.submitToChainAsync({\r\n                    kind: job.kind,\r\n                    to: '0xexchangeproxyaddress',\r\n                    from: '0xworkeraddress',\r\n                    calldata: '0xcalldata',\r\n                    expiry: job.expiry,\r\n                    identifier: job.id,\r\n                    submissionType: RfqmTransactionSubmissionType.Trade,\r\n                    onSubmissionContextStatusUpdate: callback,\r\n                });\r\n\r\n                // eth_createAccessList should not be called when not enabled\r\n                verify(mockBlockchainUtils.createAccessListForAsync(anything())).never();\r\n                // Logic should first check to see if the transaction was actually sent.\r\n                // If it was (and it is being mock so in this test) then the logic first\r\n                // updates the status of the transaction to \"Submitted\"\r\n                expect(updateRfqmTransactionSubmissionsCalledArgs[0][0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.Submitted,\r\n                );\r\n                // The logic then enters the watch loop. On the first check, a transaction\r\n                // receipt exists for this transaction and it will be marked \"confirmed\"\r\n                expect(updateRfqmTransactionSubmissionsCalledArgs[1][0].status).to.equal(\r\n                    RfqmTransactionSubmissionStatus.SucceededConfirmed,\r\n                );\r\n                expect(job.status).to.equal(RfqmJobStatus.SucceededConfirmed);\r\n            });\r\n\r\n            it('throws exception if there are more than 1 transaction submissions with the same transaction hash', async () => {\r\n                const nowS = Math.round(new Date().getTime() / ONE_SECOND_MS);\r\n                const jobId = 'jobId';\r\n                const transactionSubmissionId = 'submissionId';\r\n                const job = createMeaTrsanctionJobEntity(\r\n                    {\r\n                        chainId: 1,\r\n                        createdAt: new Date(),\r\n                        expiry: new BigNumber(nowS + 600),\r\n                        fee: {\r\n                            amount: new BigNumber(0),\r\n                            token: '',\r\n                            type: 'fixed',\r\n                        },\r\n                        inputToken: '0xinputToken',\r\n                        inputTokenAmount: new BigNumber(10),\r\n                        integratorId: '0xintegrator',\r\n                        metaTransaction: MOCK_META_TRANSACTION,\r\n                        metaTransactionHash: MOCK_META_TRANSACTION.getHash(),\r\n                        minOutputTokenAmount: new BigNumber(10),\r\n                        outputToken: '0xoutputToken',\r\n                        takerAddress: '0xtakerAddress',\r\n                        takerSignature: {\r\n                            signatureType: SignatureType.EthSign,\r\n                            v: 1,\r\n                            r: '',\r\n                            s: '',\r\n                        },\r\n                        status: RfqmJobStatus.PendingLastLookAccepted,\r\n                        workerAddress: '0xworkeraddress',\r\n                    },\r\n                    jobId,\r\n                );\r\n\r\n                const mockTransactionRequest: providers.TransactionRequest = {};\r\n                const mockTransaction = createMetaTransactionSubmissionEntity(\r\n                    {\r\n                        from: '0xworkeraddress',\r\n                        metaTransactionJobId: jobId,\r\n                        maxFeePerGas: new BigNumber(100000),\r\n                        maxPriorityFeePerGas: new BigNumber(100),\r\n                        nonce: 0,\r\n                        to: '0xexchangeproxyaddress',\r\n                        transactionHash: '0xsignedtransactionhash',\r\n                        type: RfqmTransactionSubmissionType.Trade,\r\n                    },\r\n                    transactionSubmissionId,\r\n                );\r\n                const mockTransactionReceipt: providers.TransactionReceipt = {\r\n                    to: '0xto',\r\n                    from: '0xfrom',\r\n                    contractAddress: '0xexchangeproxyaddress',\r\n                    transactionIndex: 0,\r\n                    gasUsed: EthersBigNumber.from(10000),\r\n                    logsBloom: '',\r\n                    blockHash: '0xblockhash',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                    logs: [],\r\n                    blockNumber: 1,\r\n                    confirmations: 3,\r\n                    cumulativeGasUsed: EthersBigNumber.from(1000),\r\n                    effectiveGasPrice: EthersBigNumber.from(1000),\r\n                    byzantium: true,\r\n                    type: 2,\r\n                    status: 1,\r\n                };\r\n                const mockNonce = 0;\r\n\r\n                const gasStationAttendantMock = mock(GasStationAttendantEthereum);\r\n                when(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(\r\n                    new BigNumber(10).shiftedBy(GWEI_DECIMALS),\r\n                );\r\n                const mockDbUtils = mock(RfqmDbUtils);\r\n                when(\r\n                    mockDbUtils.findMetaTransactionSubmissionsByJobIdAsync(jobId, RfqmTransactionSubmissionType.Trade),\r\n                ).thenResolve([]);\r\n                const updateRfqmJobCalledArgs: MetaTransactionJobEntity[] = [];\r\n                when(mockDbUtils.updateRfqmJobAsync(anything())).thenCall(async (jobArg) => {\r\n                    updateRfqmJobCalledArgs.push(_.cloneDeep(jobArg));\r\n                });\r\n                const writeMetaTransactionSubmissionAsyncCalledArgs: MetaTransactionSubmissionEntity[] = [];\r\n                when(mockDbUtils.writeMetaTransactionSubmissionAsync(anything())).thenCall(async (transactionArg) => {\r\n                    writeMetaTransactionSubmissionAsyncCalledArgs.push(_.cloneDeep(transactionArg));\r\n                    return _.cloneDeep(mockTransaction);\r\n                });\r\n                when(\r\n                    mockDbUtils.findMetaTransactionSubmissionsByTransactionHashAsync(\r\n                        '0xsignedtransactionhash',\r\n                        RfqmTransactionSubmissionType.Trade,\r\n                    ),\r\n                ).thenResolve([_.cloneDeep(mockTransaction), _.cloneDeep(mockTransaction)]);\r\n                const updateRfqmTransactionSubmissionsCalledArgs: MetaTransactionSubmissionEntity[][] = [];\r\n                when(mockDbUtils.updateRfqmTransactionSubmissionsAsync(anything())).thenCall(async (tranactionArg) => {\r\n                    updateRfqmTransactionSubmissionsCalledArgs.push(_.cloneDeep(tranactionArg));\r\n                });\r\n                const mockBlockchainUtils = mock(RfqBlockchainUtils);\r\n                when(mockBlockchainUtils.getNonceAsync('0xworkeraddress')).thenResolve(mockNonce);\r\n                when(mockBlockchainUtils.estimateGasForAsync(anything())).thenResolve(100);\r\n                when(\r\n                    mockBlockchainUtils.transformTxDataToTransactionRequest(anything(), anything(), anything()),\r\n                ).thenReturn(mockTransactionRequest);\r\n                when(mockBlockchainUtils.signTransactionAsync(anything())).thenResolve({\r\n                    signedTransaction: 'signedTransaction',\r\n                    transactionHash: '0xsignedtransactionhash',\r\n                });\r\n                when(mockBlockchainUtils.getExchangeProxyAddress()).thenReturn('0xexchangeproxyaddress');\r\n                when(mockBlockchainUtils.submitSignedTransactionAsync(anything())).thenResolve(\r\n                    '0xsignedtransactionhash',\r\n                );\r\n                when(mockBlockchainUtils.getReceiptsAsync(deepEqual(['0xsignedtransactionhash']))).thenResolve([\r\n                    mockTransactionReceipt,\r\n                ]);\r\n                when(mockBlockchainUtils.getCurrentBlockAsync()).thenResolve(4);\r\n                const rfqmService = buildWorkerServiceForUnitTest({\r\n                    dbUtils: instance(mockDbUtils),\r\n                    gasStationAttendant: instance(gasStationAttendantMock),\r\n                    rfqBlockchainUtils: instance(mockBlockchainUtils),\r\n                });\r\n\r\n                const callback = async (\r\n                    newSubmissionContextStatus: SubmissionContextStatus,\r\n                    oldSubmissionContextStatus?: SubmissionContextStatus,\r\n                ): Promise<void> => {\r\n                    if (newSubmissionContextStatus !== oldSubmissionContextStatus) {\r\n                        const newJobStatus =\r\n                            SubmissionContext.tradeSubmissionContextStatusToJobStatus(newSubmissionContextStatus);\r\n                        job.status = newJobStatus;\r\n                        await mockDbUtils.updateRfqmJobAsync(job);\r\n                    }\r\n                };\r\n\r\n                try {\r\n                    await rfqmService.submitToChainAsync({\r\n                        kind: job.kind,\r\n                        to: '0xexchangeproxyaddress',\r\n                        from: '0xworkeraddress',\r\n                        calldata: '0xcalldata',\r\n                        expiry: job.expiry,\r\n                        identifier: job.id,\r\n                        submissionType: RfqmTransactionSubmissionType.Trade,\r\n                        onSubmissionContextStatusUpdate: callback,\r\n                    });\r\n                    expect.fail();\r\n                } catch (e) {\r\n                    expect(e.message).to.contain('Transaction hash have been submitted not exactly once');\r\n                }\r\n            });\r\n        });\r\n    });\r\n});\r\n"],"version":3}