5a17e857c53e83f97dd5be1ef0fb09aa
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorHandler = exports.errorUtils = void 0;
const api_utils_1 = require("@0x/api-utils");
const HttpStatus = require("http-status-codes");
const errors_1 = require("../core/errors");
class ErrorUtils extends api_utils_1.ErrorUtils {
    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    generateError(err) {
        // handle error codes that are specific to 0x API
        if ((0, api_utils_1.isAPIError)(err) &&
            isAPIBadRequestError(err) &&
            Object.values(errors_1.APIErrorCodes).includes(err.generalErrorCode)) {
            const statusCode = err.statusCode;
            const code = err.generalErrorCode;
            return {
                statusCode,
                errorBody: {
                    code,
                    reason: errors_1.apiErrorCodesToReasons[code],
                },
            };
        }
        // otherwise use general error handling
        return super.generateError(err);
    }
}
function isAPIBadRequestError(error) {
    return error.statusCode === HttpStatus.BAD_REQUEST;
}
exports.errorUtils = new ErrorUtils();
exports.errorHandler = exports.errorUtils.getErrorHandler();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9taWRkbGV3YXJlL2Vycm9yX2hhbmRsaW5nLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUF3RztBQUN4RyxnREFBZ0Q7QUFFaEQsMkNBQXVFO0FBRXZFLE1BQU0sVUFBVyxTQUFRLHNCQUFjO0lBQ25DLDZEQUE2RDtJQUM3RCw4REFBOEQ7SUFDdkQsYUFBYSxDQUFDLEdBQVU7UUFDM0IsaURBQWlEO1FBQ2pELElBQ0ksSUFBQSxzQkFBVSxFQUFDLEdBQUcsQ0FBQztZQUNmLG9CQUFvQixDQUFDLEdBQUcsQ0FBQztZQUN6QixNQUFNLENBQUMsTUFBTSxDQUFDLHNCQUFhLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEVBQzdEO1lBQ0UsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQztZQUNsQyxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsZ0JBQWdCLENBQUM7WUFDbEMsT0FBTztnQkFDSCxVQUFVO2dCQUNWLFNBQVMsRUFBRTtvQkFDUCxJQUFJO29CQUNKLE1BQU0sRUFBRSwrQkFBc0IsQ0FBQyxJQUFJLENBQUM7aUJBQ3ZDO2FBQ0osQ0FBQztTQUNMO1FBQ0QsdUNBQXVDO1FBQ3ZDLE9BQU8sS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQyxDQUFDO0NBQ0o7QUFFRCxTQUFTLG9CQUFvQixDQUFDLEtBQW1CO0lBQzdDLE9BQU8sS0FBSyxDQUFDLFVBQVUsS0FBSyxVQUFVLENBQUMsV0FBVyxDQUFDO0FBQ3ZELENBQUM7QUFFWSxRQUFBLFVBQVUsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO0FBQzlCLFFBQUEsWUFBWSxHQUFHLGtCQUFVLENBQUMsZUFBZSxFQUFFLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9taWRkbGV3YXJlL2Vycm9yX2hhbmRsaW5nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUJhc2VFcnJvciwgQmFkUmVxdWVzdEVycm9yLCBFcnJvclV0aWxzIGFzIEJhc2VFcnJvclV0aWxzLCBpc0FQSUVycm9yIH0gZnJvbSAnQDB4L2FwaS11dGlscyc7XHJcbmltcG9ydCAqIGFzIEh0dHBTdGF0dXMgZnJvbSAnaHR0cC1zdGF0dXMtY29kZXMnO1xyXG5cclxuaW1wb3J0IHsgQVBJRXJyb3JDb2RlcywgYXBpRXJyb3JDb2Rlc1RvUmVhc29ucyB9IGZyb20gJy4uL2NvcmUvZXJyb3JzJztcclxuXHJcbmNsYXNzIEVycm9yVXRpbHMgZXh0ZW5kcyBCYXNlRXJyb3JVdGlscyB7XHJcbiAgICAvLyAkZXNsaW50LWZpeC1tZSBodHRwczovL2dpdGh1Yi5jb20vcmhpbm9kYXZpZC9lc2xpbnQtZml4LW1lXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgcHVibGljIGdlbmVyYXRlRXJyb3IoZXJyOiBFcnJvcik6IGFueSB7XHJcbiAgICAgICAgLy8gaGFuZGxlIGVycm9yIGNvZGVzIHRoYXQgYXJlIHNwZWNpZmljIHRvIDB4IEFQSVxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgaXNBUElFcnJvcihlcnIpICYmXHJcbiAgICAgICAgICAgIGlzQVBJQmFkUmVxdWVzdEVycm9yKGVycikgJiZcclxuICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhBUElFcnJvckNvZGVzKS5pbmNsdWRlcyhlcnIuZ2VuZXJhbEVycm9yQ29kZSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhdHVzQ29kZSA9IGVyci5zdGF0dXNDb2RlO1xyXG4gICAgICAgICAgICBjb25zdCBjb2RlID0gZXJyLmdlbmVyYWxFcnJvckNvZGU7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlLFxyXG4gICAgICAgICAgICAgICAgZXJyb3JCb2R5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZSxcclxuICAgICAgICAgICAgICAgICAgICByZWFzb246IGFwaUVycm9yQ29kZXNUb1JlYXNvbnNbY29kZV0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBvdGhlcndpc2UgdXNlIGdlbmVyYWwgZXJyb3IgaGFuZGxpbmdcclxuICAgICAgICByZXR1cm4gc3VwZXIuZ2VuZXJhdGVFcnJvcihlcnIpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0FQSUJhZFJlcXVlc3RFcnJvcihlcnJvcjogQVBJQmFzZUVycm9yKTogZXJyb3IgaXMgQVBJQmFzZUVycm9yICYgQmFkUmVxdWVzdEVycm9yPEFQSUVycm9yQ29kZXM+IHtcclxuICAgIHJldHVybiBlcnJvci5zdGF0dXNDb2RlID09PSBIdHRwU3RhdHVzLkJBRF9SRVFVRVNUO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZXJyb3JVdGlscyA9IG5ldyBFcnJvclV0aWxzKCk7XHJcbmV4cG9ydCBjb25zdCBlcnJvckhhbmRsZXIgPSBlcnJvclV0aWxzLmdldEVycm9ySGFuZGxlcigpO1xyXG4iXSwidmVyc2lvbiI6M30=