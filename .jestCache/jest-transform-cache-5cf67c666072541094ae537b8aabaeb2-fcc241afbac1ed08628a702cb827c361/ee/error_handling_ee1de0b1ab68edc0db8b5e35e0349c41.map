{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/middleware/error_handling.ts","mappings":";;;AAAA,6CAAwG;AACxG,gDAAgD;AAEhD,2CAAuE;AAEvE,MAAM,UAAW,SAAQ,sBAAc;IACnC,6DAA6D;IAC7D,8DAA8D;IACvD,aAAa,CAAC,GAAU;QAC3B,iDAAiD;QACjD,IACI,IAAA,sBAAU,EAAC,GAAG,CAAC;YACf,oBAAoB,CAAC,GAAG,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,sBAAa,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAC7D;YACE,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;YAClC,MAAM,IAAI,GAAG,GAAG,CAAC,gBAAgB,CAAC;YAClC,OAAO;gBACH,UAAU;gBACV,SAAS,EAAE;oBACP,IAAI;oBACJ,MAAM,EAAE,+BAAsB,CAAC,IAAI,CAAC;iBACvC;aACJ,CAAC;SACL;QACD,uCAAuC;QACvC,OAAO,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;CACJ;AAED,SAAS,oBAAoB,CAAC,KAAmB;IAC7C,OAAO,KAAK,CAAC,UAAU,KAAK,UAAU,CAAC,WAAW,CAAC;AACvD,CAAC;AAEY,QAAA,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;AAC9B,QAAA,YAAY,GAAG,kBAAU,CAAC,eAAe,EAAE,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/middleware/error_handling.ts"],"sourcesContent":["import { APIBaseError, BadRequestError, ErrorUtils as BaseErrorUtils, isAPIError } from '@0x/api-utils';\r\nimport * as HttpStatus from 'http-status-codes';\r\n\r\nimport { APIErrorCodes, apiErrorCodesToReasons } from '../core/errors';\r\n\r\nclass ErrorUtils extends BaseErrorUtils {\r\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    public generateError(err: Error): any {\r\n        // handle error codes that are specific to 0x API\r\n        if (\r\n            isAPIError(err) &&\r\n            isAPIBadRequestError(err) &&\r\n            Object.values(APIErrorCodes).includes(err.generalErrorCode)\r\n        ) {\r\n            const statusCode = err.statusCode;\r\n            const code = err.generalErrorCode;\r\n            return {\r\n                statusCode,\r\n                errorBody: {\r\n                    code,\r\n                    reason: apiErrorCodesToReasons[code],\r\n                },\r\n            };\r\n        }\r\n        // otherwise use general error handling\r\n        return super.generateError(err);\r\n    }\r\n}\r\n\r\nfunction isAPIBadRequestError(error: APIBaseError): error is APIBaseError & BadRequestError<APIErrorCodes> {\r\n    return error.statusCode === HttpStatus.BAD_REQUEST;\r\n}\r\n\r\nexport const errorUtils = new ErrorUtils();\r\nexport const errorHandler = errorUtils.getErrorHandler();\r\n"],"version":3}