066c2486c6a0b694bc4044c10e8bc46c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable: custom-no-magic-numbers
const eip712registry_1 = require("../../src/eip712registry");
const Eip712Utils_1 = require("../../src/utils/Eip712Utils");
describe('extractEIP712DomainType', () => {
    it('extracts the EIP712Domain type from the domain for the USDC token on polygon', () => {
        const token = '0x2791bca1f2de4661ed88a30c99a7a9449aa84174'; // USDC
        const { domain } = eip712registry_1.EIP_712_REGISTRY[137][token];
        const result = (0, Eip712Utils_1.extractEIP712DomainType)(domain);
        expect(result).toEqual({
            EIP712Domain: [
                { name: 'name', type: 'string' },
                { name: 'version', type: 'string' },
                { name: 'verifyingContract', type: 'address' },
                { name: 'salt', type: 'bytes32' },
            ],
        });
    });
    it('extracts the EIP712Domain type from the domain for the BANANA token on polygon', () => {
        const token = '0x5d47baba0d66083c52009271faf3f50dcc01023c'; // BANANA
        const { domain } = eip712registry_1.EIP_712_REGISTRY[137][token];
        const result = (0, Eip712Utils_1.extractEIP712DomainType)(domain);
        expect(result).toEqual({
            EIP712Domain: [
                { name: 'name', type: 'string' },
                { name: 'version', type: 'string' },
                { name: 'chainId', type: 'uint256' },
                { name: 'verifyingContract', type: 'address' },
            ],
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvRWlwNzEyVXRpbHNUZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsMENBQTBDO0FBQzFDLDZEQUE0RDtBQUM1RCw2REFBc0U7QUFFdEUsUUFBUSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUNyQyxFQUFFLENBQUMsOEVBQThFLEVBQUUsR0FBRyxFQUFFO1FBQ3BGLE1BQU0sS0FBSyxHQUFHLDRDQUE0QyxDQUFDLENBQUMsT0FBTztRQUNuRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsaUNBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsTUFBTSxNQUFNLEdBQUcsSUFBQSxxQ0FBdUIsRUFBQyxNQUFNLENBQUMsQ0FBQztRQUMvQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ25CLFlBQVksRUFBRTtnQkFDVixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRTtnQkFDaEMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7Z0JBQ25DLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7Z0JBQzlDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO2FBQ3BDO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0ZBQWdGLEVBQUUsR0FBRyxFQUFFO1FBQ3RGLE1BQU0sS0FBSyxHQUFHLDRDQUE0QyxDQUFDLENBQUMsU0FBUztRQUNyRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsaUNBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsTUFBTSxNQUFNLEdBQUcsSUFBQSxxQ0FBdUIsRUFBQyxNQUFNLENBQUMsQ0FBQztRQUMvQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ25CLFlBQVksRUFBRTtnQkFDVixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRTtnQkFDaEMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7Z0JBQ25DLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO2dCQUNwQyxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO2FBQ2pEO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvdGVzdC91dGlscy9FaXA3MTJVdGlsc1Rlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6IGN1c3RvbS1uby1tYWdpYy1udW1iZXJzXG5pbXBvcnQgeyBFSVBfNzEyX1JFR0lTVFJZIH0gZnJvbSAnLi4vLi4vc3JjL2VpcDcxMnJlZ2lzdHJ5JztcbmltcG9ydCB7IGV4dHJhY3RFSVA3MTJEb21haW5UeXBlIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL0VpcDcxMlV0aWxzJztcblxuZGVzY3JpYmUoJ2V4dHJhY3RFSVA3MTJEb21haW5UeXBlJywgKCkgPT4ge1xuICAgIGl0KCdleHRyYWN0cyB0aGUgRUlQNzEyRG9tYWluIHR5cGUgZnJvbSB0aGUgZG9tYWluIGZvciB0aGUgVVNEQyB0b2tlbiBvbiBwb2x5Z29uJywgKCkgPT4ge1xuICAgICAgICBjb25zdCB0b2tlbiA9ICcweDI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQnOyAvLyBVU0RDXG4gICAgICAgIGNvbnN0IHsgZG9tYWluIH0gPSBFSVBfNzEyX1JFR0lTVFJZWzEzN11bdG9rZW5dO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBleHRyYWN0RUlQNzEyRG9tYWluVHlwZShkb21haW4pO1xuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHtcbiAgICAgICAgICAgIEVJUDcxMkRvbWFpbjogW1xuICAgICAgICAgICAgICAgIHsgbmFtZTogJ25hbWUnLCB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ3ZlcnNpb24nLCB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ3ZlcmlmeWluZ0NvbnRyYWN0JywgdHlwZTogJ2FkZHJlc3MnIH0sXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAnc2FsdCcsIHR5cGU6ICdieXRlczMyJyB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZXh0cmFjdHMgdGhlIEVJUDcxMkRvbWFpbiB0eXBlIGZyb20gdGhlIGRvbWFpbiBmb3IgdGhlIEJBTkFOQSB0b2tlbiBvbiBwb2x5Z29uJywgKCkgPT4ge1xuICAgICAgICBjb25zdCB0b2tlbiA9ICcweDVkNDdiYWJhMGQ2NjA4M2M1MjAwOTI3MWZhZjNmNTBkY2MwMTAyM2MnOyAvLyBCQU5BTkFcbiAgICAgICAgY29uc3QgeyBkb21haW4gfSA9IEVJUF83MTJfUkVHSVNUUllbMTM3XVt0b2tlbl07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGV4dHJhY3RFSVA3MTJEb21haW5UeXBlKGRvbWFpbik7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoe1xuICAgICAgICAgICAgRUlQNzEyRG9tYWluOiBbXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAnbmFtZScsIHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAndmVyc2lvbicsIHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAnY2hhaW5JZCcsIHR5cGU6ICd1aW50MjU2JyB9LFxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ3ZlcmlmeWluZ0NvbnRyYWN0JywgdHlwZTogJ2FkZHJlc3MnIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9