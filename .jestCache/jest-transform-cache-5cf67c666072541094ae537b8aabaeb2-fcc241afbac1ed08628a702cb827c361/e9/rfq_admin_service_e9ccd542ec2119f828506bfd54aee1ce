ae9fd74ac52a755f745663a1bc93862a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqAdminService = void 0;
const utils_1 = require("@0x/utils");
const constants_1 = require("../core/constants");
const types_1 = require("../entities/types");
const logger_1 = require("../logger");
/**
 * RfqAdminService is the coordination layer for admin HTTP services.
 * It currently uses the admin API key for authentication, but
 * this can be replaced with a more sophisticated means of authentication.
 */
class RfqAdminService {
    constructor(_dbUtils) {
        this._dbUtils = _dbUtils;
    }
    /**
     * Cleans up pending jobs by manually setting the status to `FailedExpired`.
     * Ignores jobs not in a pending status.
     */
    async cleanupJobsAsync(orderHashes, now = new Date()) {
        const modifiedJobs = [];
        const unmodifiedJobs = [];
        const handleJob = async (orderHash) => {
            const job = await this._dbUtils.findV2JobByOrderHashAsync(orderHash);
            if (!job) {
                logger_1.logger.error({ orderHash }, `No job found for order hash`);
                unmodifiedJobs.push(orderHash);
                return;
            }
            if (!types_1.UnresolvedRfqmJobStatuses.includes(job.status)) {
                logger_1.logger.error({ orderHash, status: job.status }, 'Tried to clean up a resolved job');
                unmodifiedJobs.push(orderHash);
                return;
            }
            try {
                const { expiry } = job;
                const thirtySecondsPastExpiry = expiry.plus(new utils_1.BigNumber(30));
                const nowSeconds = new utils_1.BigNumber(now.getTime() / constants_1.ONE_SECOND_MS);
                if (nowSeconds.isGreaterThan(thirtySecondsPastExpiry)) {
                    job.status = types_1.RfqmJobStatus.FailedExpired;
                    await this._dbUtils.updateRfqmJobAsync(job);
                    logger_1.logger.info({ orderHash }, 'Job status manually updated to failure');
                    modifiedJobs.push(orderHash);
                }
                else {
                    logger_1.logger.error({ orderHash }, 'Tried to clean up an unexpired job');
                    unmodifiedJobs.push(orderHash);
                }
            }
            catch (error) {
                logger_1.logger.error({ orderHash }, 'Failed to clean up the job');
                unmodifiedJobs.push(orderHash);
            }
        };
        await Promise.all(orderHashes.map((h) => handleJob(h)));
        return {
            modifiedJobs,
            unmodifiedJobs,
        };
    }
}
exports.RfqAdminService = RfqAdminService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9zZXJ2aWNlcy9yZnFfYWRtaW5fc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBc0M7QUFFdEMsaURBQWtEO0FBQ2xELDZDQUE2RTtBQUM3RSxzQ0FBbUM7QUFLbkM7Ozs7R0FJRztBQUNILE1BQWEsZUFBZTtJQUN4QixZQUE2QixRQUFxQjtRQUFyQixhQUFRLEdBQVIsUUFBUSxDQUFhO0lBQUcsQ0FBQztJQUV0RDs7O09BR0c7SUFDSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsV0FBcUIsRUFBRSxNQUFZLElBQUksSUFBSSxFQUFFO1FBQ3ZFLE1BQU0sWUFBWSxHQUFhLEVBQUUsQ0FBQztRQUNsQyxNQUFNLGNBQWMsR0FBYSxFQUFFLENBQUM7UUFFcEMsTUFBTSxTQUFTLEdBQUcsS0FBSyxFQUFFLFNBQWlCLEVBQWlCLEVBQUU7WUFDekQsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRXJFLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ04sZUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLDZCQUE2QixDQUFDLENBQUM7Z0JBQzNELGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQy9CLE9BQU87YUFDVjtZQUVELElBQUksQ0FBQyxpQ0FBeUIsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUNqRCxlQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztnQkFDcEYsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDL0IsT0FBTzthQUNWO1lBRUQsSUFBSTtnQkFDQSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDO2dCQUN2QixNQUFNLHVCQUF1QixHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxpQkFBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQy9ELE1BQU0sVUFBVSxHQUFHLElBQUksaUJBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcseUJBQWEsQ0FBQyxDQUFDO2dCQUVoRSxJQUFJLFVBQVUsQ0FBQyxhQUFhLENBQUMsdUJBQXVCLENBQUMsRUFBRTtvQkFDbkQsR0FBRyxDQUFDLE1BQU0sR0FBRyxxQkFBYSxDQUFDLGFBQWEsQ0FBQztvQkFDekMsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUM1QyxlQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsd0NBQXdDLENBQUMsQ0FBQztvQkFDckUsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztpQkFDaEM7cUJBQU07b0JBQ0gsZUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLG9DQUFvQyxDQUFDLENBQUM7b0JBQ2xFLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7aUJBQ2xDO2FBQ0o7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDWixlQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztnQkFDMUQsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUNsQztRQUNMLENBQUMsQ0FBQztRQUVGLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXhELE9BQU87WUFDSCxZQUFZO1lBQ1osY0FBYztTQUNqQixDQUFDO0lBQ04sQ0FBQztDQUNKO0FBckRELDBDQXFEQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvc3JjL3NlcnZpY2VzL3JmcV9hZG1pbl9zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gJ0AweC91dGlscyc7XG5cbmltcG9ydCB7IE9ORV9TRUNPTkRfTVMgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBSZnFtSm9iU3RhdHVzLCBVbnJlc29sdmVkUmZxbUpvYlN0YXR1c2VzIH0gZnJvbSAnLi4vZW50aXRpZXMvdHlwZXMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IFJmcW1EYlV0aWxzIH0gZnJvbSAnLi4vdXRpbHMvcmZxbV9kYl91dGlscyc7XG5cbmltcG9ydCB7IENsZWFudXBKb2JzUmVzcG9uc2UgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBSZnFBZG1pblNlcnZpY2UgaXMgdGhlIGNvb3JkaW5hdGlvbiBsYXllciBmb3IgYWRtaW4gSFRUUCBzZXJ2aWNlcy5cbiAqIEl0IGN1cnJlbnRseSB1c2VzIHRoZSBhZG1pbiBBUEkga2V5IGZvciBhdXRoZW50aWNhdGlvbiwgYnV0XG4gKiB0aGlzIGNhbiBiZSByZXBsYWNlZCB3aXRoIGEgbW9yZSBzb3BoaXN0aWNhdGVkIG1lYW5zIG9mIGF1dGhlbnRpY2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgUmZxQWRtaW5TZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9kYlV0aWxzOiBSZnFtRGJVdGlscykge31cblxuICAgIC8qKlxuICAgICAqIENsZWFucyB1cCBwZW5kaW5nIGpvYnMgYnkgbWFudWFsbHkgc2V0dGluZyB0aGUgc3RhdHVzIHRvIGBGYWlsZWRFeHBpcmVkYC5cbiAgICAgKiBJZ25vcmVzIGpvYnMgbm90IGluIGEgcGVuZGluZyBzdGF0dXMuXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGNsZWFudXBKb2JzQXN5bmMob3JkZXJIYXNoZXM6IHN0cmluZ1tdLCBub3c6IERhdGUgPSBuZXcgRGF0ZSgpKTogUHJvbWlzZTxDbGVhbnVwSm9ic1Jlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IG1vZGlmaWVkSm9iczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgY29uc3QgdW5tb2RpZmllZEpvYnM6IHN0cmluZ1tdID0gW107XG5cbiAgICAgICAgY29uc3QgaGFuZGxlSm9iID0gYXN5bmMgKG9yZGVySGFzaDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgICAgICAgICBjb25zdCBqb2IgPSBhd2FpdCB0aGlzLl9kYlV0aWxzLmZpbmRWMkpvYkJ5T3JkZXJIYXNoQXN5bmMob3JkZXJIYXNoKTtcblxuICAgICAgICAgICAgaWYgKCFqb2IpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoeyBvcmRlckhhc2ggfSwgYE5vIGpvYiBmb3VuZCBmb3Igb3JkZXIgaGFzaGApO1xuICAgICAgICAgICAgICAgIHVubW9kaWZpZWRKb2JzLnB1c2gob3JkZXJIYXNoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghVW5yZXNvbHZlZFJmcW1Kb2JTdGF0dXNlcy5pbmNsdWRlcyhqb2Iuc3RhdHVzKSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcih7IG9yZGVySGFzaCwgc3RhdHVzOiBqb2Iuc3RhdHVzIH0sICdUcmllZCB0byBjbGVhbiB1cCBhIHJlc29sdmVkIGpvYicpO1xuICAgICAgICAgICAgICAgIHVubW9kaWZpZWRKb2JzLnB1c2gob3JkZXJIYXNoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBleHBpcnkgfSA9IGpvYjtcbiAgICAgICAgICAgICAgICBjb25zdCB0aGlydHlTZWNvbmRzUGFzdEV4cGlyeSA9IGV4cGlyeS5wbHVzKG5ldyBCaWdOdW1iZXIoMzApKTtcbiAgICAgICAgICAgICAgICBjb25zdCBub3dTZWNvbmRzID0gbmV3IEJpZ051bWJlcihub3cuZ2V0VGltZSgpIC8gT05FX1NFQ09ORF9NUyk7XG5cbiAgICAgICAgICAgICAgICBpZiAobm93U2Vjb25kcy5pc0dyZWF0ZXJUaGFuKHRoaXJ0eVNlY29uZHNQYXN0RXhwaXJ5KSkge1xuICAgICAgICAgICAgICAgICAgICBqb2Iuc3RhdHVzID0gUmZxbUpvYlN0YXR1cy5GYWlsZWRFeHBpcmVkO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9kYlV0aWxzLnVwZGF0ZVJmcW1Kb2JBc3luYyhqb2IpO1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyh7IG9yZGVySGFzaCB9LCAnSm9iIHN0YXR1cyBtYW51YWxseSB1cGRhdGVkIHRvIGZhaWx1cmUnKTtcbiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRKb2JzLnB1c2gob3JkZXJIYXNoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoeyBvcmRlckhhc2ggfSwgJ1RyaWVkIHRvIGNsZWFuIHVwIGFuIHVuZXhwaXJlZCBqb2InKTtcbiAgICAgICAgICAgICAgICAgICAgdW5tb2RpZmllZEpvYnMucHVzaChvcmRlckhhc2gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKHsgb3JkZXJIYXNoIH0sICdGYWlsZWQgdG8gY2xlYW4gdXAgdGhlIGpvYicpO1xuICAgICAgICAgICAgICAgIHVubW9kaWZpZWRKb2JzLnB1c2gob3JkZXJIYXNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChvcmRlckhhc2hlcy5tYXAoKGgpID0+IGhhbmRsZUpvYihoKSkpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtb2RpZmllZEpvYnMsXG4gICAgICAgICAgICB1bm1vZGlmaWVkSm9icyxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXSwidmVyc2lvbiI6M30=