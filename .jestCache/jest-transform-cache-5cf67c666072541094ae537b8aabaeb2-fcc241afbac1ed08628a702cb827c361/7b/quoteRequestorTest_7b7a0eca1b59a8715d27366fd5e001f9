67b3b70518f0498997cfd24251a34f9b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable max-file-line-count
const constants_1 = require("@0x/asset-swapper/lib/src/constants");
const types_1 = require("@0x/asset-swapper/lib/src/types");
const dev_utils_1 = require("@0x/dev-utils");
const protocol_utils_1 = require("@0x/protocol-utils");
const types_2 = require("@0x/types");
const utils_1 = require("@0x/utils");
const axios_1 = require("axios");
const chai_1 = require("chai");
const http_1 = require("http");
const https_1 = require("https");
const _ = require("lodash");
const constants_2 = require("../../core/constants");
const QuoteRequestor_1 = require("../QuoteRequestor");
const testHelpers_1 = require("./testHelpers");
const quoteRequestorHttpClient = axios_1.default.create({
    httpAgent: new http_1.Agent({ keepAlive: true, timeout: constants_1.KEEP_ALIVE_TTL }),
    httpsAgent: new https_1.Agent({ keepAlive: true, timeout: constants_1.KEEP_ALIVE_TTL }),
});
const ALT_MM_API_KEY = 'averysecurekey';
const ALT_PROFILE = 'acoolprofile';
const ALT_RFQ_CREDS = {
    altRfqApiKey: ALT_MM_API_KEY,
    altRfqProfile: ALT_PROFILE,
};
const CREATED_STATUS_CODE = 201;
function makeThreeMinuteExpiry() {
    const expiry = new Date(Date.now());
    // tslint:disable-next-line: custom-no-magic-numbers
    expiry.setMinutes(expiry.getMinutes() + 3);
    return new utils_1.BigNumber(Math.round(expiry.valueOf() / constants_1.constants.ONE_SECOND_MS));
}
describe('QuoteRequestor', () => {
    const [makerToken, takerToken, otherToken1] = dev_utils_1.tokenUtils.getDummyERC20TokenAddresses();
    const validSignature = { v: 28, r: '0x', s: '0x', signatureType: protocol_utils_1.SignatureType.EthSign };
    const altRfqAssetOfferings = {
        'https://132.0.0.1': [
            {
                id: 'XYZ-123',
                baseAsset: makerToken,
                quoteAsset: takerToken,
                baseAssetDecimals: 2,
                quoteAssetDecimals: 3,
            },
        ],
    };
    describe('requestRfqtFirmQuotesAsync for firm quotes', () => {
        it('should return successful RFQT requests', async () => {
            const takerAddress = '0xd209925defc99488e3afff1174e48b4fa628302a';
            const txOrigin = takerAddress;
            const apiKey = 'my-ko0l-api-key';
            // Set up RFQT responses
            // tslint:disable-next-line:array-type
            const mockedRequests = [];
            const altMockedRequests = [];
            const expectedParams = {
                sellTokenAddress: takerToken,
                buyTokenAddress: makerToken,
                sellAmountBaseUnits: '10000',
                comparisonPrice: undefined,
                takerAddress,
                txOrigin,
                protocolVersion: '4',
            };
            const mockedDefaults = {
                requestApiKey: apiKey,
                requestParams: expectedParams,
                responseCode: types_2.StatusCodes.Success,
            };
            const validSignedOrder = {
                makerToken,
                takerToken,
                makerAmount: new utils_1.BigNumber('1000'),
                takerAmount: new utils_1.BigNumber('1000'),
                maker: takerAddress,
                taker: takerAddress,
                pool: '0x',
                salt: '0',
                chainId: 1,
                verifyingContract: takerAddress,
                txOrigin,
                expiry: makeThreeMinuteExpiry(),
                signature: validSignature,
            };
            // request is to sell 10000 units of the base token
            // 10 units at 3 decimals
            const altFirmRequestData = {
                market: 'XYZ-123',
                model: types_1.AltQuoteModel.Firm,
                profile: ALT_PROFILE,
                side: types_1.AltQuoteSide.Sell,
                meta: {
                    txOrigin,
                    taker: takerAddress,
                    client: apiKey,
                },
                value: '10',
            };
            const altFirmResponse = {
                ...altFirmRequestData,
                id: 'random_id',
                // tslint:disable-next-line:custom-no-magic-numbers
                price: new utils_1.BigNumber(10 / 100).toString(),
                status: 'active',
                data: {
                    '0xv4order': validSignedOrder,
                },
            };
            // Successful response
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://1337.0.0.1',
                responseData: {
                    signedOrder: validSignedOrder,
                },
            });
            // Another Successful response
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://37.0.0.1',
                responseData: { signedOrder: validSignedOrder },
            });
            // Test out a bad response code, ensure it doesnt cause throw
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://420.0.0.1',
                responseData: { error: 'bad request' },
                responseCode: types_2.StatusCodes.InternalError,
            });
            // Test out a successful response code but a partial order
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://421.0.0.1',
                responseData: { signedOrder: { makerToken: '123' } },
            });
            // A successful response code and invalid response data (encoding)
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://421.1.0.1',
                responseData: 'this is not JSON!',
            });
            // A successful response code and valid order, but for wrong maker asset data
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://422.0.0.1',
                responseData: { signedOrder: { ...validSignedOrder, makerToken: '0x1234' } },
            });
            // A successful response code and valid order, but for wrong taker asset data
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://423.0.0.1',
                responseData: { signedOrder: { ...validSignedOrder, takerToken: '0x1234' } },
            });
            // A successful response code and good order but its unsigned
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://424.0.0.1',
                responseData: { signedOrder: _.omit(validSignedOrder, ['signature']) },
            });
            // A successful response code and good order but for the wrong txOrigin
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://425.0.0.1',
                responseData: { signedOrder: { ...validSignedOrder, txOrigin: constants_2.NULL_ADDRESS } },
            });
            // A successful response code and order from an alt RFQ implementation
            altMockedRequests.push({
                endpoint: 'https://132.0.0.1',
                mmApiKey: ALT_MM_API_KEY,
                responseCode: CREATED_STATUS_CODE,
                requestData: altFirmRequestData,
                responseData: altFirmResponse,
            });
            const normalizedSuccessfulOrder = {
                order: {
                    ..._.omit(validSignedOrder, ['signature']),
                    makerAmount: new utils_1.BigNumber(validSignedOrder.makerAmount),
                    takerAmount: new utils_1.BigNumber(validSignedOrder.takerAmount),
                    expiry: new utils_1.BigNumber(validSignedOrder.expiry),
                    salt: new utils_1.BigNumber(validSignedOrder.salt),
                },
                signature: validSignedOrder.signature,
                type: protocol_utils_1.FillQuoteTransformerOrderType.Rfq,
            };
            return testHelpers_1.testHelpers.withMockedRfqQuotes(mockedRequests, altMockedRequests, testHelpers_1.RfqQuoteEndpoint.Firm, async () => {
                const qr = new QuoteRequestor_1.QuoteRequestor({
                    'https://1337.0.0.1': [[makerToken, takerToken]],
                    'https://420.0.0.1': [[makerToken, takerToken]],
                    'https://421.0.0.1': [[makerToken, takerToken]],
                    'https://421.1.0.1': [[makerToken, takerToken]],
                    'https://422.0.0.1': [[makerToken, takerToken]],
                    'https://423.0.0.1': [[makerToken, takerToken]],
                    'https://424.0.0.1': [[makerToken, takerToken]],
                    'https://425.0.0.1': [[makerToken, takerToken]],
                    'https://426.0.0.1': [] /* Shouldn't ping an RFQ-T provider when they don't support the requested asset pair. */,
                    'https://37.0.0.1': [[makerToken, takerToken]],
                }, quoteRequestorHttpClient, ALT_RFQ_CREDS);
                const resp = await qr.requestRfqtFirmQuotesAsync(makerToken, takerToken, new utils_1.BigNumber(10000), types_1.MarketOperation.Sell, undefined, {
                    integrator: {
                        integratorId: apiKey,
                        label: 'foo',
                    },
                    takerAddress,
                    txOrigin: takerAddress,
                    intentOnFilling: true,
                    altRfqAssetOfferings,
                });
                (0, chai_1.expect)(resp).to.deep.eq([
                    normalizedSuccessfulOrder,
                    normalizedSuccessfulOrder,
                    normalizedSuccessfulOrder,
                ]);
            }, quoteRequestorHttpClient);
        });
    });
    describe('requestRfqtIndicativeQuotesAsync for Indicative quotes', () => {
        it('should optionally accept a "comparisonPrice" parameter', async () => {
            const response = QuoteRequestor_1.QuoteRequestor.makeQueryParameters(otherToken1, // tx origin
            otherToken1, // taker
            types_1.MarketOperation.Sell, makerToken, takerToken, new utils_1.BigNumber(1000), new utils_1.BigNumber(300.2));
            (0, chai_1.expect)(response.comparisonPrice).to.eql('300.2');
        });
        it('should return successful RFQT requests', async () => {
            const takerAddress = '0xd209925defc99488e3afff1174e48b4fa628302a';
            const apiKey = 'my-ko0l-api-key';
            // Set up RFQT responses
            // tslint:disable-next-line:array-type
            const mockedRequests = [];
            const expectedParams = {
                sellTokenAddress: takerToken,
                buyTokenAddress: makerToken,
                sellAmountBaseUnits: '10000',
                comparisonPrice: undefined,
                takerAddress,
                txOrigin: takerAddress,
                protocolVersion: '4',
            };
            const mockedDefaults = {
                requestApiKey: apiKey,
                requestParams: expectedParams,
                responseCode: types_2.StatusCodes.Success,
            };
            // Successful response
            const successfulQuote1 = {
                makerToken,
                takerToken,
                makerAmount: new utils_1.BigNumber(expectedParams.sellAmountBaseUnits),
                takerAmount: new utils_1.BigNumber(expectedParams.sellAmountBaseUnits),
                expiry: makeThreeMinuteExpiry(),
            };
            const goodMMUri1 = 'https://1337.0.0.1';
            const goodMMUri2 = 'https://37.0.0.1';
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: goodMMUri1,
                responseData: successfulQuote1,
            });
            // Test out a bad response code, ensure it doesnt cause throw
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://420.0.0.1',
                responseData: { error: 'bad request' },
                responseCode: types_2.StatusCodes.InternalError,
            });
            // Test out a successful response code but an invalid order
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://421.0.0.1',
                responseData: { makerToken: '123' },
            });
            // A successful response code and valid response data, but for wrong maker asset data
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://422.0.0.1',
                responseData: { ...successfulQuote1, makerToken: otherToken1 },
            });
            // A successful response code and valid response data, but for wrong taker asset data
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://423.0.0.1',
                responseData: { ...successfulQuote1, takerToken: otherToken1 },
            });
            // Another Successful response
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: goodMMUri2,
                responseData: successfulQuote1,
            });
            const assetOfferings = {
                'https://420.0.0.1': [[makerToken, takerToken]],
                'https://421.0.0.1': [[makerToken, takerToken]],
                'https://422.0.0.1': [[makerToken, takerToken]],
                'https://423.0.0.1': [[makerToken, takerToken]],
                'https://424.0.0.1': [[makerToken, takerToken]],
            };
            assetOfferings[goodMMUri1] = [[makerToken, takerToken]];
            assetOfferings[goodMMUri2] = [[makerToken, takerToken]];
            return testHelpers_1.testHelpers.withMockedRfqQuotes(mockedRequests, [], testHelpers_1.RfqQuoteEndpoint.Indicative, async () => {
                const qr = new QuoteRequestor_1.QuoteRequestor(assetOfferings, quoteRequestorHttpClient);
                const resp = await qr.requestRfqtIndicativeQuotesAsync(makerToken, takerToken, new utils_1.BigNumber(10000), types_1.MarketOperation.Sell, undefined, {
                    integrator: {
                        integratorId: apiKey,
                        label: 'foo',
                    },
                    takerAddress,
                    txOrigin: takerAddress,
                    intentOnFilling: true,
                });
                (0, chai_1.expect)(resp.sort()).to.eql([
                    { ...successfulQuote1, makerUri: goodMMUri1 },
                    { ...successfulQuote1, makerUri: goodMMUri2 },
                ].sort());
            }, quoteRequestorHttpClient);
        });
        it('should only return RFQT requests that meet the timeout', async () => {
            const takerAddress = '0xd209925defc99488e3afff1174e48b4fa628302a';
            const apiKey = 'my-ko0l-api-key';
            const maxTimeoutMs = 10;
            // tslint:disable-next-line:custom-no-magic-numbers
            const exceedTimeoutMs = maxTimeoutMs + 50;
            // Set up RFQT responses
            // tslint:disable-next-line:array-type
            const mockedRequests = [];
            const expectedParams = {
                sellTokenAddress: takerToken,
                buyTokenAddress: makerToken,
                sellAmountBaseUnits: '10000',
                comparisonPrice: undefined,
                takerAddress,
                txOrigin: takerAddress,
                protocolVersion: '4',
            };
            const mockedDefaults = {
                requestApiKey: apiKey,
                requestParams: expectedParams,
                responseCode: types_2.StatusCodes.Success,
            };
            // Successful response
            const successfulQuote1 = {
                makerToken,
                takerToken,
                makerAmount: new utils_1.BigNumber(expectedParams.sellAmountBaseUnits),
                takerAmount: new utils_1.BigNumber(expectedParams.sellAmountBaseUnits),
                expiry: makeThreeMinuteExpiry(),
            };
            // One good request
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://1337.0.0.1',
                responseData: successfulQuote1,
            });
            // One request that will timeout
            mockedRequests.push({
                ...mockedDefaults,
                endpoint: 'https://420.0.0.1',
                responseData: successfulQuote1,
                callback: async () => {
                    // tslint:disable-next-line:no-inferred-empty-object-type
                    return new Promise((resolve, _reject) => {
                        setTimeout(() => {
                            resolve([types_2.StatusCodes.Success, successfulQuote1]);
                        }, exceedTimeoutMs);
                    });
                },
            });
            return testHelpers_1.testHelpers.withMockedRfqQuotes(mockedRequests, [], testHelpers_1.RfqQuoteEndpoint.Indicative, async () => {
                const qr = new QuoteRequestor_1.QuoteRequestor({
                    'https://1337.0.0.1': [[makerToken, takerToken]],
                    'https://420.0.0.1': [[makerToken, takerToken]],
                }, quoteRequestorHttpClient);
                const resp = await qr.requestRfqtIndicativeQuotesAsync(makerToken, takerToken, new utils_1.BigNumber(10000), types_1.MarketOperation.Sell, undefined, {
                    integrator: {
                        integratorId: apiKey,
                        label: 'foo',
                    },
                    takerAddress,
                    txOrigin: takerAddress,
                    intentOnFilling: true,
                    makerEndpointMaxResponseTimeMs: maxTimeoutMs,
                });
                (0, chai_1.expect)(resp.sort()).to.eql([{ ...successfulQuote1, makerUri: 'https://1337.0.0.1' }].sort()); // notice only one result, despite two requests made
            }, quoteRequestorHttpClient);
        });
        it('should return successful RFQT indicative quote requests (Buy)', async () => {
            const takerAddress = '0xd209925defc99488e3afff1174e48b4fa628302a';
            const apiKey = 'my-ko0l-api-key';
            // Set up RFQT responses
            // tslint:disable-next-line:array-type
            const mockedRequests = [];
            const expectedParams = {
                sellTokenAddress: takerToken,
                buyTokenAddress: makerToken,
                buyAmountBaseUnits: '10000',
                comparisonPrice: undefined,
                takerAddress,
                txOrigin: takerAddress,
                protocolVersion: '4',
            };
            // Successful response
            const successfulQuote1 = {
                makerToken,
                takerToken,
                makerAmount: new utils_1.BigNumber(expectedParams.buyAmountBaseUnits),
                takerAmount: new utils_1.BigNumber(expectedParams.buyAmountBaseUnits),
                expiry: makeThreeMinuteExpiry(),
            };
            mockedRequests.push({
                endpoint: 'https://1337.0.0.1',
                requestApiKey: apiKey,
                requestParams: expectedParams,
                responseData: successfulQuote1,
                responseCode: types_2.StatusCodes.Success,
            });
            return testHelpers_1.testHelpers.withMockedRfqQuotes(mockedRequests, [], testHelpers_1.RfqQuoteEndpoint.Indicative, async () => {
                const qr = new QuoteRequestor_1.QuoteRequestor({ 'https://1337.0.0.1': [[makerToken, takerToken]] }, quoteRequestorHttpClient);
                const resp = await qr.requestRfqtIndicativeQuotesAsync(makerToken, takerToken, new utils_1.BigNumber(10000), types_1.MarketOperation.Buy, undefined, {
                    integrator: {
                        integratorId: apiKey,
                        label: 'foo',
                    },
                    takerAddress,
                    txOrigin: takerAddress,
                    intentOnFilling: true,
                });
                (0, chai_1.expect)(resp.sort()).to.eql([{ ...successfulQuote1, makerUri: 'https://1337.0.0.1' }].sort());
            }, quoteRequestorHttpClient);
        });
        it('should be able to handle and filter RFQ offerings', () => {
            const tests = [
                [['https://top.maker'], []],
                [undefined, ['https://foo.bar/', 'https://lorem.ipsum/']],
                [['https://lorem.ipsum/'], ['https://lorem.ipsum/']],
            ];
            for (const test of tests) {
                const [apiKeyWhitelist, results] = test;
                const response = QuoteRequestor_1.QuoteRequestor.getTypedMakerUrlsAndWhitelist({
                    integrator: {
                        integratorId: 'foo',
                        label: 'bar',
                        whitelistIntegratorUrls: apiKeyWhitelist,
                    },
                    altRfqAssetOfferings: {},
                }, {
                    'https://foo.bar/': [
                        [
                            '0xA6cD4cb8c62aCDe44739E3Ed0F1d13E0e31f2d94',
                            '0xF45107c0200a04A8aB9C600cc52A3C89AE5D0489',
                        ],
                    ],
                    'https://lorem.ipsum/': [
                        [
                            '0xA6cD4cb8c62aCDe44739E3Ed0F1d13E0e31f2d94',
                            '0xF45107c0200a04A8aB9C600cc52A3C89AE5D0489',
                        ],
                    ],
                });
                const typedUrls = response.map((typed) => typed.url);
                (0, chai_1.expect)(typedUrls).to.eql(results);
            }
        });
        it('should return successful alt indicative quotes', async () => {
            const takerAddress = '0xd209925defc99488e3afff1174e48b4fa628302a';
            const txOrigin = '0xf209925defc99488e3afff1174e48b4fa628302a';
            const apiKey = 'my-ko0l-api-key';
            // base token has 2 decimals
            // quote token has 3 decimals
            const baseToken = makerToken;
            const quoteToken = takerToken;
            // Set up RFQT responses
            const altMockedRequests = [];
            const altScenarios = [];
            // SCENARIO 1
            // buy, base asset specified
            // requesting to buy 100 units (10000 base units) of the base token
            // returning a price of 0.01, which should mean 10000 maker, 1000 taker amount
            const buyAmountAltRequest = {
                market: 'XYZ-123',
                model: types_1.AltQuoteModel.Indicative,
                profile: ALT_PROFILE,
                side: types_1.AltQuoteSide.Sell,
                meta: {
                    txOrigin,
                    taker: takerAddress,
                    client: apiKey,
                },
                amount: '100',
            };
            // Successful response
            const buyAmountAltResponse = {
                ...buyAmountAltRequest,
                id: 'random_id',
                // tslint:disable-next-line:custom-no-magic-numbers
                price: new utils_1.BigNumber(0.01).toString(),
                status: 'live',
            };
            const successfulBuyAmountQuote = {
                makerToken: baseToken,
                takerToken: quoteToken,
                makerAmount: new utils_1.BigNumber(10000),
                takerAmount: new utils_1.BigNumber(1000),
                expiry: new utils_1.BigNumber(0),
            };
            altMockedRequests.push({
                endpoint: 'https://132.0.0.1',
                mmApiKey: ALT_MM_API_KEY,
                responseCode: CREATED_STATUS_CODE,
                requestData: buyAmountAltRequest,
                responseData: buyAmountAltResponse,
            });
            altScenarios.push({
                successfulQuote: successfulBuyAmountQuote,
                requestedMakerToken: baseToken,
                requestedTakerToken: quoteToken,
                requestedAmount: new utils_1.BigNumber(10000),
                requestedOperation: types_1.MarketOperation.Buy,
            });
            // SCENARIO 2
            // alt buy, quote asset specified
            // user is requesting to sell 1 unit of the quote token, or 1000 base units
            // returning a price of 0.01, which should mean 10000 maker amount, 1000 taker amount
            const buyValueAltRequest = {
                market: 'XYZ-123',
                model: types_1.AltQuoteModel.Indicative,
                profile: ALT_PROFILE,
                side: types_1.AltQuoteSide.Sell,
                meta: {
                    txOrigin,
                    taker: takerAddress,
                    client: apiKey,
                },
                value: '1',
            };
            // Successful response
            const buyValueAltResponse = {
                ...buyValueAltRequest,
                id: 'random_id',
                // tslint:disable-next-line:custom-no-magic-numbers
                price: new utils_1.BigNumber(0.01).toString(),
                status: 'live',
            };
            const successfulBuyValueQuote = {
                makerToken: baseToken,
                takerToken: quoteToken,
                makerAmount: new utils_1.BigNumber(10000),
                takerAmount: new utils_1.BigNumber(1000),
                expiry: new utils_1.BigNumber(0),
            };
            altMockedRequests.push({
                endpoint: 'https://132.0.0.1',
                mmApiKey: ALT_MM_API_KEY,
                responseCode: CREATED_STATUS_CODE,
                requestData: buyValueAltRequest,
                responseData: buyValueAltResponse,
            });
            altScenarios.push({
                successfulQuote: successfulBuyValueQuote,
                requestedMakerToken: baseToken,
                requestedTakerToken: quoteToken,
                requestedAmount: new utils_1.BigNumber(1000),
                requestedOperation: types_1.MarketOperation.Sell,
            });
            // SCENARIO 3
            // alt sell, base asset specified
            // user is requesting to sell 100 units (10000 base units) of the base token
            // returning a price of 0.01, which should mean 10000 taker amount, 1000 maker amount
            const sellAmountAltRequest = {
                market: 'XYZ-123',
                model: types_1.AltQuoteModel.Indicative,
                profile: ALT_PROFILE,
                side: types_1.AltQuoteSide.Buy,
                meta: {
                    txOrigin,
                    taker: takerAddress,
                    client: apiKey,
                },
                amount: '100',
            };
            // Successful response
            const sellAmountAltResponse = {
                ...sellAmountAltRequest,
                id: 'random_id',
                // tslint:disable-next-line:custom-no-magic-numbers
                price: new utils_1.BigNumber(0.01).toString(),
                status: 'live',
            };
            const successfulSellAmountQuote = {
                makerToken: quoteToken,
                takerToken: baseToken,
                makerAmount: new utils_1.BigNumber(1000),
                takerAmount: new utils_1.BigNumber(10000),
                expiry: new utils_1.BigNumber(0),
            };
            altMockedRequests.push({
                endpoint: 'https://132.0.0.1',
                mmApiKey: ALT_MM_API_KEY,
                responseCode: CREATED_STATUS_CODE,
                requestData: sellAmountAltRequest,
                responseData: sellAmountAltResponse,
            });
            altScenarios.push({
                successfulQuote: successfulSellAmountQuote,
                requestedMakerToken: quoteToken,
                requestedTakerToken: baseToken,
                requestedAmount: new utils_1.BigNumber(10000),
                requestedOperation: types_1.MarketOperation.Sell,
            });
            // SCENARIO 4
            // alt sell, quote asset specified
            // user is requesting to buy 1 unit (1000 base units) of the quote token
            // returning a price of 0.01, which should mean 10000 taker amount, 1000 maker amount
            const sellValueAltRequest = {
                market: 'XYZ-123',
                model: types_1.AltQuoteModel.Indicative,
                profile: ALT_PROFILE,
                side: types_1.AltQuoteSide.Buy,
                meta: {
                    txOrigin,
                    taker: takerAddress,
                    client: apiKey,
                },
                value: '1',
            };
            // Successful response
            const sellValueAltResponse = {
                ...sellValueAltRequest,
                id: 'random_id',
                // tslint:disable-next-line:custom-no-magic-numbers
                price: new utils_1.BigNumber(0.01).toString(),
                status: 'live',
            };
            const successfulSellValueQuote = {
                makerToken: quoteToken,
                takerToken: baseToken,
                makerAmount: new utils_1.BigNumber(1000),
                takerAmount: new utils_1.BigNumber(10000),
                expiry: new utils_1.BigNumber(0),
            };
            altMockedRequests.push({
                endpoint: 'https://132.0.0.1',
                mmApiKey: ALT_MM_API_KEY,
                responseCode: CREATED_STATUS_CODE,
                requestData: sellValueAltRequest,
                responseData: sellValueAltResponse,
            });
            altScenarios.push({
                successfulQuote: successfulSellValueQuote,
                requestedMakerToken: quoteToken,
                requestedTakerToken: baseToken,
                requestedAmount: new utils_1.BigNumber(1000),
                requestedOperation: types_1.MarketOperation.Buy,
            });
            let scenarioCounter = 1;
            for (const altScenario of altScenarios) {
                utils_1.logUtils.log(`Alt MM indicative scenario ${scenarioCounter}`);
                scenarioCounter += 1;
                await testHelpers_1.testHelpers.withMockedRfqQuotes([], altMockedRequests, testHelpers_1.RfqQuoteEndpoint.Indicative, async () => {
                    const qr = new QuoteRequestor_1.QuoteRequestor({}, quoteRequestorHttpClient, ALT_RFQ_CREDS);
                    const resp = await qr.requestRfqtIndicativeQuotesAsync(altScenario.requestedMakerToken, altScenario.requestedTakerToken, altScenario.requestedAmount, altScenario.requestedOperation, undefined, {
                        integrator: {
                            integratorId: apiKey,
                            label: 'foo',
                        },
                        takerAddress,
                        txOrigin,
                        intentOnFilling: true,
                        altRfqAssetOfferings,
                    });
                    // hack to get the expiry right, since it's dependent on the current timestamp
                    const expected = { ...altScenario.successfulQuote, expiry: resp[0].expiry };
                    (0, chai_1.expect)(resp.sort()).to.eql([expected].sort());
                }, quoteRequestorHttpClient);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,