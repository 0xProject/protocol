3e36cfd4da8e36d5a63101b928185157
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startMetricsServer = exports.closeWorkersAsync = exports.closeRedisConnectionsAsync = void 0;
const api_utils_1 = require("@0x/api-utils");
const express = require("express");
const config_1 = require("../config");
const constants_1 = require("../core/constants");
const logger_1 = require("../logger");
/**
 * Close redis connections.
 *
 * @param redisConnections Redis connections to close.
 */
async function closeRedisConnectionsAsync(redisConnections) {
    const results = [];
    for (const connection of redisConnections) {
        try {
            const result = await connection.quit();
            results.push(result);
        }
        catch (error) {
            logger_1.logger.error({ errorMessage: error.message, stack: error.stack }, 'Faied to shutdown redis connection');
        }
    }
    return results;
}
exports.closeRedisConnectionsAsync = closeRedisConnectionsAsync;
/**
 * Close bullmq workers.
 *
 * @param workers Bullmq workers to close.
 */
async function closeWorkersAsync(workers) {
    for (const worker of workers) {
        try {
            await worker.close();
        }
        catch (error) {
            logger_1.logger.error({ errorMessage: error.message, stack: error.stack }, `Failed to shutdown worker ${worker.name}`);
        }
    }
}
exports.closeWorkersAsync = closeWorkersAsync;
/**
 * Start the metrics server.
 */
function startMetricsServer() {
    if (config_1.ENABLE_PROMETHEUS_METRICS) {
        const metricsService = new api_utils_1.MetricsService();
        const metricsRouter = (0, api_utils_1.createMetricsRouter)(metricsService);
        const metricsApp = express();
        metricsApp.use(constants_1.METRICS_PATH, metricsRouter);
        const metricsServer = metricsApp.listen(config_1.PROMETHEUS_PORT, () => {
            logger_1.logger.info(`Metrics (HTTP) listening on port ${config_1.PROMETHEUS_PORT}`);
        });
        metricsServer.on('error', (error) => {
            logger_1.logger.error({ errorMessage: error, stack: error.stack }, 'Error in metrics server');
        });
    }
}
exports.startMetricsServer = startMetricsServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9ydW5uZXJfdXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQW9FO0FBRXBFLG1DQUFtQztBQUVuQyxzQ0FBdUU7QUFDdkUsaURBQWlEO0FBQ2pELHNDQUFtQztBQUVuQzs7OztHQUlHO0FBQ0ksS0FBSyxVQUFVLDBCQUEwQixDQUFJLGdCQUE4QztJQUM5RixNQUFNLE9BQU8sR0FBUSxFQUFFLENBQUM7SUFDeEIsS0FBSyxNQUFNLFVBQVUsSUFBSSxnQkFBZ0IsRUFBRTtRQUN2QyxJQUFJO1lBQ0EsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDdkMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN4QjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ1osZUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsb0NBQW9DLENBQUMsQ0FBQztTQUMzRztLQUNKO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQVhELGdFQVdDO0FBRUQ7Ozs7R0FJRztBQUNJLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxPQUFpQjtJQUNyRCxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUMxQixJQUFJO1lBQ0EsTUFBTSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDeEI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNaLGVBQU0sQ0FBQyxLQUFLLENBQ1IsRUFBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUNuRCw2QkFBNkIsTUFBTSxDQUFDLElBQUksRUFBRSxDQUM3QyxDQUFDO1NBQ0w7S0FDSjtBQUNMLENBQUM7QUFYRCw4Q0FXQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0Isa0JBQWtCO0lBQzlCLElBQUksa0NBQXlCLEVBQUU7UUFDM0IsTUFBTSxjQUFjLEdBQUcsSUFBSSwwQkFBYyxFQUFFLENBQUM7UUFDNUMsTUFBTSxhQUFhLEdBQUcsSUFBQSwrQkFBbUIsRUFBQyxjQUFjLENBQUMsQ0FBQztRQUMxRCxNQUFNLFVBQVUsR0FBRyxPQUFPLEVBQUUsQ0FBQztRQUU3QixVQUFVLENBQUMsR0FBRyxDQUFDLHdCQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDNUMsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyx3QkFBZSxFQUFFLEdBQUcsRUFBRTtZQUMxRCxlQUFNLENBQUMsSUFBSSxDQUFDLG9DQUFvQyx3QkFBZSxFQUFFLENBQUMsQ0FBQztRQUN2RSxDQUFDLENBQUMsQ0FBQztRQUVILGFBQWEsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDaEMsZUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3pGLENBQUMsQ0FBQyxDQUFDO0tBQ047QUFDTCxDQUFDO0FBZkQsZ0RBZUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9ydW5uZXJfdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTWV0cmljc1JvdXRlciwgTWV0cmljc1NlcnZpY2UgfSBmcm9tICdAMHgvYXBpLXV0aWxzJztcclxuaW1wb3J0IHsgV29ya2VyIH0gZnJvbSAnYnVsbG1xJztcclxuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcclxuXHJcbmltcG9ydCB7IEVOQUJMRV9QUk9NRVRIRVVTX01FVFJJQ1MsIFBST01FVEhFVVNfUE9SVCB9IGZyb20gJy4uL2NvbmZpZyc7XHJcbmltcG9ydCB7IE1FVFJJQ1NfUEFUSCB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzJztcclxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyJztcclxuXHJcbi8qKlxyXG4gKiBDbG9zZSByZWRpcyBjb25uZWN0aW9ucy5cclxuICpcclxuICogQHBhcmFtIHJlZGlzQ29ubmVjdGlvbnMgUmVkaXMgY29ubmVjdGlvbnMgdG8gY2xvc2UuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xvc2VSZWRpc0Nvbm5lY3Rpb25zQXN5bmM8VD4ocmVkaXNDb25uZWN0aW9uczogeyBxdWl0OiAoKSA9PiBQcm9taXNlPFQ+IH1bXSk6IFByb21pc2U8VFtdPiB7XHJcbiAgICBjb25zdCByZXN1bHRzOiBUW10gPSBbXTtcclxuICAgIGZvciAoY29uc3QgY29ubmVjdGlvbiBvZiByZWRpc0Nvbm5lY3Rpb25zKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29ubmVjdGlvbi5xdWl0KCk7XHJcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcih7IGVycm9yTWVzc2FnZTogZXJyb3IubWVzc2FnZSwgc3RhY2s6IGVycm9yLnN0YWNrIH0sICdGYWllZCB0byBzaHV0ZG93biByZWRpcyBjb25uZWN0aW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdHM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbG9zZSBidWxsbXEgd29ya2Vycy5cclxuICpcclxuICogQHBhcmFtIHdvcmtlcnMgQnVsbG1xIHdvcmtlcnMgdG8gY2xvc2UuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xvc2VXb3JrZXJzQXN5bmMod29ya2VyczogV29ya2VyW10pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGZvciAoY29uc3Qgd29ya2VyIG9mIHdvcmtlcnMpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCB3b3JrZXIuY2xvc2UoKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoXHJcbiAgICAgICAgICAgICAgICB7IGVycm9yTWVzc2FnZTogZXJyb3IubWVzc2FnZSwgc3RhY2s6IGVycm9yLnN0YWNrIH0sXHJcbiAgICAgICAgICAgICAgICBgRmFpbGVkIHRvIHNodXRkb3duIHdvcmtlciAke3dvcmtlci5uYW1lfWAsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogU3RhcnQgdGhlIG1ldHJpY3Mgc2VydmVyLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0TWV0cmljc1NlcnZlcigpOiB2b2lkIHtcclxuICAgIGlmIChFTkFCTEVfUFJPTUVUSEVVU19NRVRSSUNTKSB7XHJcbiAgICAgICAgY29uc3QgbWV0cmljc1NlcnZpY2UgPSBuZXcgTWV0cmljc1NlcnZpY2UoKTtcclxuICAgICAgICBjb25zdCBtZXRyaWNzUm91dGVyID0gY3JlYXRlTWV0cmljc1JvdXRlcihtZXRyaWNzU2VydmljZSk7XHJcbiAgICAgICAgY29uc3QgbWV0cmljc0FwcCA9IGV4cHJlc3MoKTtcclxuXHJcbiAgICAgICAgbWV0cmljc0FwcC51c2UoTUVUUklDU19QQVRILCBtZXRyaWNzUm91dGVyKTtcclxuICAgICAgICBjb25zdCBtZXRyaWNzU2VydmVyID0gbWV0cmljc0FwcC5saXN0ZW4oUFJPTUVUSEVVU19QT1JULCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGBNZXRyaWNzIChIVFRQKSBsaXN0ZW5pbmcgb24gcG9ydCAke1BST01FVEhFVVNfUE9SVH1gKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbWV0cmljc1NlcnZlci5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKHsgZXJyb3JNZXNzYWdlOiBlcnJvciwgc3RhY2s6IGVycm9yLnN0YWNrIH0sICdFcnJvciBpbiBtZXRyaWNzIHNlcnZlcicpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==