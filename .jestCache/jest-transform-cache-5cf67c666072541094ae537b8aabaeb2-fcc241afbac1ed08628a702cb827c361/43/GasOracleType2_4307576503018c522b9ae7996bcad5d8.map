{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasOracleType2.ts","mappings":";;;AAAA,qCAAsC;AAEtC,yDAAuC;AA0BvC,MAAM,UAAU,GAAG,GAAG,CAAC;AAEvB;;;;GAIG;AACH,MAAa,cAAc;IA6DvB;;;OAGG;IACH,YAAoB,GAAW,EAAE,aAA4B;QACzD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;IACpB,CAAC;IAhED;;;;;;OAMG;IACI,MAAM,CAAC,MAAM,CAAC,GAAW,EAAE,aAA4B;QAC1D,MAAM,WAAW,GAAG,wCAAwC,CAAC;QAC7D,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACxB,MAAM,IAAI,KAAK,CACX,sCAAsC,GAAG;gFACuB,CACnE,CAAC;SACL;QACD,OAAO,IAAI,cAAc,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,wBAAwB;QACjC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAA4B,IAAI,CAAC,IAAI,EAAE;YACjF,OAAO,EAAE,UAAU;SACtB,CAAC,CAAC;QACH,IAAI,QAAQ,CAAC,MAAM,KAAK,sBAAE,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACvE;QACD,IAAI;YACA,qEAAqE;YACrE,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC;YAC3D,OAAO,IAAI,iBAAS,CAAC,OAAO,CAAC,CAAC;SACjC;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;SAChG;IACL,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,+BAA+B,CAAC,KAA8C;QACvF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAA4B,IAAI,CAAC,IAAI,EAAE;YACjF,OAAO,EAAE,UAAU;SACtB,CAAC,CAAC;QACH,IAAI,QAAQ,CAAC,MAAM,KAAK,sBAAE,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACvE;QACD,IAAI;YACA,MAAM,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,oBAAoB,CAAC;YACxE,OAAO,IAAI,iBAAS,CAAC,cAAc,CAAC,CAAC;SACxC;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,KAAK,CACX,qFAAqF,CAAC,CAAC,OAAO,EAAE,CACnG,CAAC;SACL;IACL,CAAC;CAUJ;AArED,wCAqEC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasOracleType2.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { AxiosInstance } from 'axios';\nimport { OK } from 'http-status-codes';\n\n/**\n * Response format from https://github.com/0xProject/gas-price-oracle\n * for \"v2\" endpoints\n */\nexport interface T0xGasPriceOracleResponse {\n    result: TResult;\n}\n\nexport interface TResult {\n    source: string;\n    timestamp: number;\n    instant: TRates;\n    fast: TRates;\n    standard: TRates;\n    low: TRates;\n}\n\nexport interface TRates {\n    price: number;\n    maxPriorityFeePerGas: number;\n    maxFeePerGas: number;\n    baseFeePerGas: number;\n}\n\nconst TIMEOUT_MS = 250;\n\n/**\n * A client to wrap the functionality of the 0x Gas Price Oracle\n * (https://github.com/0xProject/gas-price-oracle) \"v2\" endpoints\n * which provide support for EIP1559\n */\nexport class GasOracleType2 {\n    private readonly _url: string;\n    private readonly _axiosInstance: AxiosInstance;\n\n    /**\n     * Creates an instance of `GasOracleType2`.\n     *\n     * Verifies that the URL is of the format\n     * \"http://gas-price-oracle-svc.gas-price-oracle/v2/source/median\", that way\n     * we don't accidentally put in a v0 URL.\n     */\n    public static create(url: string, axiosInstance: AxiosInstance): GasOracleType2 {\n        const domainRegex = /^https?:\\/\\/[^/]*\\/v2\\/source\\/median$/;\n        if (!domainRegex.test(url)) {\n            throw new Error(\n                `Error creating GasOracleType0: URL ${url} is not of the expected format.\n                Make sure you aren't trying to use a v0 URL with GasOracleType2`,\n            );\n        }\n        return new GasOracleType2(url, axiosInstance);\n    }\n\n    /**\n     * Fetch the current baseFeePerGas being reported by the oracle\n     */\n    public async getBaseFeePerGasWeiAsync(): Promise<BigNumber> {\n        const response = await this._axiosInstance.get<T0xGasPriceOracleResponse>(this._url, {\n            timeout: TIMEOUT_MS,\n        });\n        if (response.status !== OK) {\n            throw new Error('Failed to request base fee from gas price oracle');\n        }\n        try {\n            // All the speed levels have the same base fee, so just use 'instant'\n            const baseFee = response.data.result.instant.baseFeePerGas;\n            return new BigNumber(baseFee);\n        } catch (e) {\n            throw new Error(`Response from gas price oracle did not include the base fee: ${e.message}`);\n        }\n    }\n\n    /**\n     * Fetch the current maxPriorityFeePerGas, aka \"tip\", being reported by the oracle\n     */\n    public async getMaxPriorityFeePerGasWeiAsync(speed: 'instant' | 'fast' | 'standard' | 'low'): Promise<BigNumber> {\n        const response = await this._axiosInstance.get<T0xGasPriceOracleResponse>(this._url, {\n            timeout: TIMEOUT_MS,\n        });\n        if (response.status !== OK) {\n            throw new Error('Failed to request base fee from gas price oracle');\n        }\n        try {\n            const maxPriorityFee = response.data.result[speed].maxPriorityFeePerGas;\n            return new BigNumber(maxPriorityFee);\n        } catch (e) {\n            throw new Error(\n                `Response from gas price oracle did not include the expected maxPriorityFeePerGas: ${e.message}`,\n            );\n        }\n    }\n\n    /**\n     * Constructor is marked `private` to force users to use the static\n     * creator functions, which validate the URL.\n     */\n    private constructor(url: string, axiosInstance: AxiosInstance) {\n        this._axiosInstance = axiosInstance;\n        this._url = url;\n    }\n}\n"],"version":3}