e2474d653cc5f21d45fd86903d86c8b2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GasOracleType2 = void 0;
const utils_1 = require("@0x/utils");
const http_status_codes_1 = require("http-status-codes");
const TIMEOUT_MS = 250;
/**
 * A client to wrap the functionality of the 0x Gas Price Oracle
 * (https://github.com/0xProject/gas-price-oracle) "v2" endpoints
 * which provide support for EIP1559
 */
class GasOracleType2 {
    /**
     * Constructor is marked `private` to force users to use the static
     * creator functions, which validate the URL.
     */
    constructor(url, axiosInstance) {
        this._axiosInstance = axiosInstance;
        this._url = url;
    }
    /**
     * Creates an instance of `GasOracleType2`.
     *
     * Verifies that the URL is of the format
     * "http://gas-price-oracle-svc.gas-price-oracle/v2/source/median", that way
     * we don't accidentally put in a v0 URL.
     */
    static create(url, axiosInstance) {
        const domainRegex = /^https?:\/\/[^/]*\/v2\/source\/median$/;
        if (!domainRegex.test(url)) {
            throw new Error(`Error creating GasOracleType0: URL ${url} is not of the expected format.
                Make sure you aren't trying to use a v0 URL with GasOracleType2`);
        }
        return new GasOracleType2(url, axiosInstance);
    }
    /**
     * Fetch the current baseFeePerGas being reported by the oracle
     */
    async getBaseFeePerGasWeiAsync() {
        const response = await this._axiosInstance.get(this._url, {
            timeout: TIMEOUT_MS,
        });
        if (response.status !== http_status_codes_1.OK) {
            throw new Error('Failed to request base fee from gas price oracle');
        }
        try {
            // All the speed levels have the same base fee, so just use 'instant'
            const baseFee = response.data.result.instant.baseFeePerGas;
            return new utils_1.BigNumber(baseFee);
        }
        catch (e) {
            throw new Error(`Response from gas price oracle did not include the base fee: ${e.message}`);
        }
    }
    /**
     * Fetch the current maxPriorityFeePerGas, aka "tip", being reported by the oracle
     */
    async getMaxPriorityFeePerGasWeiAsync(speed) {
        const response = await this._axiosInstance.get(this._url, {
            timeout: TIMEOUT_MS,
        });
        if (response.status !== http_status_codes_1.OK) {
            throw new Error('Failed to request base fee from gas price oracle');
        }
        try {
            const maxPriorityFee = response.data.result[speed].maxPriorityFeePerGas;
            return new utils_1.BigNumber(maxPriorityFee);
        }
        catch (e) {
            throw new Error(`Response from gas price oracle did not include the expected maxPriorityFeePerGas: ${e.message}`);
        }
    }
}
exports.GasOracleType2 = GasOracleType2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9HYXNPcmFjbGVUeXBlMi50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBc0M7QUFFdEMseURBQXVDO0FBMEJ2QyxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUM7QUFFdkI7Ozs7R0FJRztBQUNILE1BQWEsY0FBYztJQTZEdkI7OztPQUdHO0lBQ0gsWUFBb0IsR0FBVyxFQUFFLGFBQTRCO1FBQ3pELElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ3BCLENBQUM7SUFoRUQ7Ozs7OztPQU1HO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFXLEVBQUUsYUFBNEI7UUFDMUQsTUFBTSxXQUFXLEdBQUcsd0NBQXdDLENBQUM7UUFDN0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FDWCxzQ0FBc0MsR0FBRztnRkFDdUIsQ0FDbkUsQ0FBQztTQUNMO1FBQ0QsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSyxDQUFDLHdCQUF3QjtRQUNqQyxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUE0QixJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2pGLE9BQU8sRUFBRSxVQUFVO1NBQ3RCLENBQUMsQ0FBQztRQUNILElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxzQkFBRSxFQUFFO1lBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztTQUN2RTtRQUNELElBQUk7WUFDQSxxRUFBcUU7WUFDckUsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztZQUMzRCxPQUFPLElBQUksaUJBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNqQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1IsTUFBTSxJQUFJLEtBQUssQ0FBQyxnRUFBZ0UsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDaEc7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxLQUFLLENBQUMsK0JBQStCLENBQUMsS0FBOEM7UUFDdkYsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBNEIsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNqRixPQUFPLEVBQUUsVUFBVTtTQUN0QixDQUFDLENBQUM7UUFDSCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssc0JBQUUsRUFBRTtZQUN4QixNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7U0FDdkU7UUFDRCxJQUFJO1lBQ0EsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsb0JBQW9CLENBQUM7WUFDeEUsT0FBTyxJQUFJLGlCQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDeEM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNSLE1BQU0sSUFBSSxLQUFLLENBQ1gscUZBQXFGLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FDbkcsQ0FBQztTQUNMO0lBQ0wsQ0FBQztDQVVKO0FBckVELHdDQXFFQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvc3JjL3V0aWxzL0dhc09yYWNsZVR5cGUyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gJ0AweC91dGlscyc7XG5pbXBvcnQgeyBBeGlvc0luc3RhbmNlIH0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgT0sgfSBmcm9tICdodHRwLXN0YXR1cy1jb2Rlcyc7XG5cbi8qKlxuICogUmVzcG9uc2UgZm9ybWF0IGZyb20gaHR0cHM6Ly9naXRodWIuY29tLzB4UHJvamVjdC9nYXMtcHJpY2Utb3JhY2xlXG4gKiBmb3IgXCJ2MlwiIGVuZHBvaW50c1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFQweEdhc1ByaWNlT3JhY2xlUmVzcG9uc2Uge1xuICAgIHJlc3VsdDogVFJlc3VsdDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUUmVzdWx0IHtcbiAgICBzb3VyY2U6IHN0cmluZztcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgICBpbnN0YW50OiBUUmF0ZXM7XG4gICAgZmFzdDogVFJhdGVzO1xuICAgIHN0YW5kYXJkOiBUUmF0ZXM7XG4gICAgbG93OiBUUmF0ZXM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVFJhdGVzIHtcbiAgICBwcmljZTogbnVtYmVyO1xuICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiBudW1iZXI7XG4gICAgbWF4RmVlUGVyR2FzOiBudW1iZXI7XG4gICAgYmFzZUZlZVBlckdhczogbnVtYmVyO1xufVxuXG5jb25zdCBUSU1FT1VUX01TID0gMjUwO1xuXG4vKipcbiAqIEEgY2xpZW50IHRvIHdyYXAgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIDB4IEdhcyBQcmljZSBPcmFjbGVcbiAqIChodHRwczovL2dpdGh1Yi5jb20vMHhQcm9qZWN0L2dhcy1wcmljZS1vcmFjbGUpIFwidjJcIiBlbmRwb2ludHNcbiAqIHdoaWNoIHByb3ZpZGUgc3VwcG9ydCBmb3IgRUlQMTU1OVxuICovXG5leHBvcnQgY2xhc3MgR2FzT3JhY2xlVHlwZTIge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX3VybDogc3RyaW5nO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2F4aW9zSW5zdGFuY2U6IEF4aW9zSW5zdGFuY2U7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGBHYXNPcmFjbGVUeXBlMmAuXG4gICAgICpcbiAgICAgKiBWZXJpZmllcyB0aGF0IHRoZSBVUkwgaXMgb2YgdGhlIGZvcm1hdFxuICAgICAqIFwiaHR0cDovL2dhcy1wcmljZS1vcmFjbGUtc3ZjLmdhcy1wcmljZS1vcmFjbGUvdjIvc291cmNlL21lZGlhblwiLCB0aGF0IHdheVxuICAgICAqIHdlIGRvbid0IGFjY2lkZW50YWxseSBwdXQgaW4gYSB2MCBVUkwuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUodXJsOiBzdHJpbmcsIGF4aW9zSW5zdGFuY2U6IEF4aW9zSW5zdGFuY2UpOiBHYXNPcmFjbGVUeXBlMiB7XG4gICAgICAgIGNvbnN0IGRvbWFpblJlZ2V4ID0gL15odHRwcz86XFwvXFwvW14vXSpcXC92MlxcL3NvdXJjZVxcL21lZGlhbiQvO1xuICAgICAgICBpZiAoIWRvbWFpblJlZ2V4LnRlc3QodXJsKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGBFcnJvciBjcmVhdGluZyBHYXNPcmFjbGVUeXBlMDogVVJMICR7dXJsfSBpcyBub3Qgb2YgdGhlIGV4cGVjdGVkIGZvcm1hdC5cbiAgICAgICAgICAgICAgICBNYWtlIHN1cmUgeW91IGFyZW4ndCB0cnlpbmcgdG8gdXNlIGEgdjAgVVJMIHdpdGggR2FzT3JhY2xlVHlwZTJgLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEdhc09yYWNsZVR5cGUyKHVybCwgYXhpb3NJbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmV0Y2ggdGhlIGN1cnJlbnQgYmFzZUZlZVBlckdhcyBiZWluZyByZXBvcnRlZCBieSB0aGUgb3JhY2xlXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGdldEJhc2VGZWVQZXJHYXNXZWlBc3luYygpOiBQcm9taXNlPEJpZ051bWJlcj4ge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuX2F4aW9zSW5zdGFuY2UuZ2V0PFQweEdhc1ByaWNlT3JhY2xlUmVzcG9uc2U+KHRoaXMuX3VybCwge1xuICAgICAgICAgICAgdGltZW91dDogVElNRU9VVF9NUyxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IE9LKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byByZXF1ZXN0IGJhc2UgZmVlIGZyb20gZ2FzIHByaWNlIG9yYWNsZScpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBBbGwgdGhlIHNwZWVkIGxldmVscyBoYXZlIHRoZSBzYW1lIGJhc2UgZmVlLCBzbyBqdXN0IHVzZSAnaW5zdGFudCdcbiAgICAgICAgICAgIGNvbnN0IGJhc2VGZWUgPSByZXNwb25zZS5kYXRhLnJlc3VsdC5pbnN0YW50LmJhc2VGZWVQZXJHYXM7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihiYXNlRmVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZXNwb25zZSBmcm9tIGdhcyBwcmljZSBvcmFjbGUgZGlkIG5vdCBpbmNsdWRlIHRoZSBiYXNlIGZlZTogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGZXRjaCB0aGUgY3VycmVudCBtYXhQcmlvcml0eUZlZVBlckdhcywgYWthIFwidGlwXCIsIGJlaW5nIHJlcG9ydGVkIGJ5IHRoZSBvcmFjbGVcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0TWF4UHJpb3JpdHlGZWVQZXJHYXNXZWlBc3luYyhzcGVlZDogJ2luc3RhbnQnIHwgJ2Zhc3QnIHwgJ3N0YW5kYXJkJyB8ICdsb3cnKTogUHJvbWlzZTxCaWdOdW1iZXI+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldDxUMHhHYXNQcmljZU9yYWNsZVJlc3BvbnNlPih0aGlzLl91cmwsIHtcbiAgICAgICAgICAgIHRpbWVvdXQ6IFRJTUVPVVRfTVMsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSBPSykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcmVxdWVzdCBiYXNlIGZlZSBmcm9tIGdhcyBwcmljZSBvcmFjbGUnKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbWF4UHJpb3JpdHlGZWUgPSByZXNwb25zZS5kYXRhLnJlc3VsdFtzcGVlZF0ubWF4UHJpb3JpdHlGZWVQZXJHYXM7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihtYXhQcmlvcml0eUZlZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBgUmVzcG9uc2UgZnJvbSBnYXMgcHJpY2Ugb3JhY2xlIGRpZCBub3QgaW5jbHVkZSB0aGUgZXhwZWN0ZWQgbWF4UHJpb3JpdHlGZWVQZXJHYXM6ICR7ZS5tZXNzYWdlfWAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3IgaXMgbWFya2VkIGBwcml2YXRlYCB0byBmb3JjZSB1c2VycyB0byB1c2UgdGhlIHN0YXRpY1xuICAgICAqIGNyZWF0b3IgZnVuY3Rpb25zLCB3aGljaCB2YWxpZGF0ZSB0aGUgVVJMLlxuICAgICAqL1xuICAgIHByaXZhdGUgY29uc3RydWN0b3IodXJsOiBzdHJpbmcsIGF4aW9zSW5zdGFuY2U6IEF4aW9zSW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5fYXhpb3NJbnN0YW5jZSA9IGF4aW9zSW5zdGFuY2U7XG4gICAgICAgIHRoaXMuX3VybCA9IHVybDtcbiAgICB9XG59XG4iXSwidmVyc2lvbiI6M30=