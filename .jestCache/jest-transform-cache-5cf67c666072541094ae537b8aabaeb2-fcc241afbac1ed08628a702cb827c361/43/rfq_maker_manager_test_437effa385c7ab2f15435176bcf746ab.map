{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfq_maker_manager_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfq_maker_manager_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\n// tslint:disable:no-empty\n// tslint:disable:max-file-line-count\n\nimport { anything, instance, mock, when } from 'ts-mockito';\n\nimport { MakerIdSet } from '../../src/config';\nimport { RfqMaker } from '../../src/entities';\nimport { ConfigManager } from '../../src/utils/config_manager';\nimport { RfqMakerDbUtils } from '../../src/utils/rfq_maker_db_utils';\nimport { RfqMakerManager } from '../../src/utils/rfq_maker_manager';\nimport { CHAIN_ID } from '../constants';\n\nconst createMockConfigManager = (\n    rfqtRfqMakers: MakerIdSet,\n    rfqtOtcMakers: MakerIdSet,\n    rfqmOtcMakers: MakerIdSet,\n): ConfigManager => {\n    const configManagerMock = mock(ConfigManager);\n    when(configManagerMock.getRfqmMakerIdSetForOtcOrder()).thenReturn(rfqmOtcMakers);\n    when(configManagerMock.getRfqtMakerIdSetForRfqOrder()).thenReturn(rfqtRfqMakers);\n    when(configManagerMock.getRfqtMakerIdSetForOtcOrder()).thenReturn(rfqtOtcMakers);\n\n    return instance(configManagerMock);\n};\n\nconst createMockRfqMakerDbUtilsInstance = (rfqMaker: RfqMaker[]): RfqMakerDbUtils => {\n    const rfqMakerDbUtilsMock = mock(RfqMakerDbUtils);\n    when(rfqMakerDbUtilsMock.getRfqMakersAsync(anything())).thenResolve(rfqMaker);\n    when(rfqMakerDbUtilsMock.getRfqMakersUpdateTimeHashAsync(anything())).thenResolve('hash');\n\n    return instance(rfqMakerDbUtilsMock);\n};\n\ndescribe('RfqMakerManager', () => {\n    // Tokens in Checksum representation\n    const tokenA = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';\n    const tokenB = '0x6B175474E89094C44Da98b954EedeAC495271d0F';\n    const tokenC = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\n\n    const makerIdSet: MakerIdSet = new Set();\n    makerIdSet.add('maker1');\n    makerIdSet.add('maker2');\n\n    const rfqMaker: RfqMaker[] = [\n        {\n            makerId: 'maker1',\n            chainId: CHAIN_ID,\n            pairs: [],\n            updatedAt: new Date(),\n            rfqtUri: 'https://maker1.asdf',\n            rfqmUri: 'https://maker1.asdf',\n        },\n        {\n            makerId: 'maker2',\n            chainId: CHAIN_ID,\n            pairs: [],\n            updatedAt: new Date(),\n            rfqtUri: 'https://maker2.asdf',\n            rfqmUri: 'https://maker2.asdf',\n        },\n    ];\n\n    describe('getRfqmV2MakerUrisForPair', () => {\n        it('should return a list of maker uris for a given config', async () => {\n            // Given\n            rfqMaker[0].pairs = [[tokenA, tokenB]];\n            rfqMaker[1].pairs = [[tokenA, tokenB]];\n            const rfqMakerDbUtils = createMockRfqMakerDbUtilsInstance(rfqMaker);\n            const configManager = createMockConfigManager(makerIdSet, makerIdSet, makerIdSet);\n\n            const rfqMakerManager = new RfqMakerManager(configManager, rfqMakerDbUtils, CHAIN_ID);\n            await rfqMakerManager.initializeAsync();\n\n            // When\n            const makerUris = rfqMakerManager.getRfqmV2MakerUrisForPair(tokenA, tokenB);\n\n            // Then\n            expect(makerUris).toEqual(['https://maker1.asdf', 'https://maker2.asdf']);\n        });\n\n        it('should ignore ordering when considering pairs', async () => {\n            // Given\n            rfqMaker[0].pairs = [[tokenA, tokenB]];\n            rfqMaker[1].pairs = [[tokenB, tokenA]];\n            const rfqMakerDbUtils = createMockRfqMakerDbUtilsInstance(rfqMaker);\n            const configManager = createMockConfigManager(makerIdSet, makerIdSet, makerIdSet);\n\n            const rfqMakerManager = new RfqMakerManager(configManager, rfqMakerDbUtils, CHAIN_ID);\n            await rfqMakerManager.initializeAsync();\n\n            // When\n            const makerUris1 = rfqMakerManager.getRfqmV2MakerUrisForPair(tokenB, tokenA); // order doesn't matter\n            const makerUris2 = rfqMakerManager.getRfqmV2MakerUrisForPair(tokenB, tokenA); // order doesn't matter\n\n            // Then\n            expect(makerUris1).toEqual(['https://maker1.asdf', 'https://maker2.asdf']);\n            expect(makerUris2).toEqual(['https://maker1.asdf', 'https://maker2.asdf']);\n        });\n\n        it('should return whitelisted makers only', async () => {\n            // Given\n            rfqMaker[0].pairs = [[tokenA, tokenB]];\n            rfqMaker[1].pairs = [[tokenA, tokenB]];\n            const rfqMakerDbUtils = createMockRfqMakerDbUtilsInstance(rfqMaker);\n            const configManager = createMockConfigManager(makerIdSet, makerIdSet, makerIdSet);\n\n            const rfqMakerManager = new RfqMakerManager(configManager, rfqMakerDbUtils, CHAIN_ID);\n            await rfqMakerManager.initializeAsync();\n\n            const whitelistedMakerIds = [rfqMaker[0].makerId];\n\n            // When\n            const makerUris1 = rfqMakerManager.getRfqmV2MakerUrisForPair(tokenA, tokenB);\n            const makerUris2 = rfqMakerManager.getRfqmV2MakerUrisForPair(tokenA, tokenB, whitelistedMakerIds);\n\n            // Then\n            expect(makerUris1).toEqual(['https://maker1.asdf', 'https://maker2.asdf']);\n            expect(makerUris2).toEqual(['https://maker1.asdf']);\n        });\n\n        it('should filter out blacklisted makers', async () => {\n            // Given\n            rfqMaker[0].pairs = [[tokenA, tokenB]];\n            rfqMaker[1].pairs = [[tokenA, tokenB]];\n            const rfqMakerDbUtils = createMockRfqMakerDbUtilsInstance(rfqMaker);\n            const configManager = createMockConfigManager(makerIdSet, makerIdSet, makerIdSet);\n\n            const rfqMakerManager = new RfqMakerManager(configManager, rfqMakerDbUtils, CHAIN_ID);\n            await rfqMakerManager.initializeAsync();\n\n            const blacklistedMakerIds = [rfqMaker[0].makerId];\n\n            // When\n            const makerUris1 = rfqMakerManager.getRfqmV2MakerUrisForPair(tokenA, tokenB);\n            const makerUris2 = rfqMakerManager.getRfqmV2MakerUrisForPair(tokenA, tokenB, null, blacklistedMakerIds);\n\n            // Then\n            expect(makerUris1).toEqual(['https://maker1.asdf', 'https://maker2.asdf']);\n            expect(makerUris2).toEqual(['https://maker2.asdf']);\n        });\n\n        it('should ignore casing when considering pairs', async () => {\n            // Given\n            // These pairs are selected such that when sorted as is: [0xF, 0xd]\n            // But their order fips when sorted after lower casing:  [0xd, 0xf]\n            const token_0xd = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\n            const token_0xF = '0xFA2562da1Bba7B954f26C74725dF51fb62646313';\n            rfqMaker[0].pairs = [[token_0xd, token_0xF]];\n            rfqMaker[1].pairs = [[token_0xd.toLowerCase(), token_0xF.toLowerCase()]]; // case doesn't matter\n            const rfqMakerDbUtils = createMockRfqMakerDbUtilsInstance(rfqMaker);\n            const configManager = createMockConfigManager(makerIdSet, makerIdSet, makerIdSet);\n\n            const rfqMakerManager = new RfqMakerManager(configManager, rfqMakerDbUtils, CHAIN_ID);\n            await rfqMakerManager.initializeAsync();\n\n            // When\n            const makerUris1 = rfqMakerManager.getRfqmV2MakerUrisForPair(token_0xd, token_0xF);\n            const makerUris2 = rfqMakerManager.getRfqmV2MakerUrisForPair(\n                token_0xd.toUpperCase(),\n                token_0xF.toUpperCase(),\n            ); // case doesn't matter\n\n            // Then\n            expect(makerUris1).toEqual(makerUris2);\n        });\n\n        it('should return [] if no maker uris are providing liquidity', async () => {\n            // Given\n            rfqMaker[0].pairs = [[tokenA, tokenB]];\n            rfqMaker[1].pairs = [[tokenA, tokenB]];\n            const rfqMakerDbUtils = createMockRfqMakerDbUtilsInstance(rfqMaker);\n\n            const makerIdSetForMaker2Only: MakerIdSet = new Set();\n            makerIdSetForMaker2Only.add('maker2');\n            const configManager = createMockConfigManager(new Set(), makerIdSet, makerIdSetForMaker2Only);\n\n            const rfqMakerManager = new RfqMakerManager(configManager, rfqMakerDbUtils, CHAIN_ID);\n            await rfqMakerManager.initializeAsync();\n\n            // When\n            const makerUris = rfqMakerManager.getRfqmV2MakerUrisForPair(tokenA, tokenC);\n\n            // Then\n            expect(makerUris).toEqual([]);\n        });\n    });\n\n    describe('findMakerIdWithRfqmUri', () => {\n        it('should return correct maker Id if the rfqm URI exists', async () => {\n            // Given\n            const rfqMakerDbUtils = createMockRfqMakerDbUtilsInstance(rfqMaker);\n            const configManager = createMockConfigManager(makerIdSet, makerIdSet, makerIdSet);\n\n            const rfqMakerManager = new RfqMakerManager(configManager, rfqMakerDbUtils, CHAIN_ID);\n            await rfqMakerManager.initializeAsync();\n\n            // When\n            const maker1Id = rfqMakerManager.findMakerIdWithRfqmUri('https://maker1.asdf');\n            const maker2Id = rfqMakerManager.findMakerIdWithRfqmUri('https://maker2.asdf');\n\n            // Then\n            expect(maker1Id).toEqual('maker1');\n            expect(maker2Id).toEqual('maker2');\n        });\n\n        it('should return null if the maker URI does not exist', async () => {\n            // Given\n            const rfqMakerDbUtils = createMockRfqMakerDbUtilsInstance(rfqMaker);\n            const configManager = createMockConfigManager(makerIdSet, makerIdSet, makerIdSet);\n\n            const rfqMakerManager = new RfqMakerManager(configManager, rfqMakerDbUtils, CHAIN_ID);\n            await rfqMakerManager.initializeAsync();\n\n            // When\n            const nullMakerId = rfqMakerManager.findMakerIdWithRfqmUri('https://maker-null.asdf');\n\n            // Then\n            expect(nullMakerId).toEqual(null);\n        });\n    });\n\n    describe('getRfqtV2MakerOfferings', () => {\n        it('should return the RfqMakerAssetOfferings for OtcOrder', async () => {\n            // Given\n            const rfqMakerForMaker123 = [...rfqMaker];\n            rfqMakerForMaker123[0].pairs = [[tokenA, tokenB]];\n            rfqMakerForMaker123[1].pairs = [[tokenA, tokenB]];\n            rfqMakerForMaker123.push({\n                makerId: 'maker3',\n                chainId: CHAIN_ID,\n                pairs: [[tokenA, tokenC]],\n                updatedAt: new Date(),\n                rfqtUri: 'https://maker3.asdf',\n                rfqmUri: null,\n            });\n\n            const rfqMakerDbUtils = createMockRfqMakerDbUtilsInstance(rfqMakerForMaker123);\n\n            const makerIdSetWithMakers23: MakerIdSet = new Set();\n            makerIdSetWithMakers23.add('maker2');\n            makerIdSetWithMakers23.add('maker3');\n            const configManager = createMockConfigManager(makerIdSetWithMakers23, makerIdSetWithMakers23, new Set());\n\n            const rfqMakerManager = new RfqMakerManager(configManager, rfqMakerDbUtils, CHAIN_ID);\n            await rfqMakerManager.initializeAsync();\n\n            // When\n            const assetOfferings = rfqMakerManager.getRfqtV2MakerOfferings();\n\n            // Then\n            expect(assetOfferings).toEqual({\n                'https://maker2.asdf': [[tokenA, tokenB]],\n                'https://maker3.asdf': [[tokenA, tokenC]],\n            });\n        });\n    });\n\n    describe('getRfqtV1MakerOfferings', () => {\n        it('should return the RfqMakerAssetOfferings for RfqOrder', async () => {\n            // Given\n            const rfqMakerForMaker123 = [...rfqMaker];\n            rfqMakerForMaker123[0].pairs = [[tokenA, tokenB]];\n            rfqMakerForMaker123[1].pairs = [[tokenA, tokenB]];\n            rfqMakerForMaker123.push({\n                makerId: 'maker3',\n                chainId: CHAIN_ID,\n                pairs: [[tokenA, tokenC]],\n                updatedAt: new Date(),\n                rfqmUri: null,\n                rfqtUri: 'https://maker3.asdf',\n            });\n\n            const rfqMakerDbUtils = createMockRfqMakerDbUtilsInstance(rfqMakerForMaker123);\n\n            const makerIdSetWithMakers23: MakerIdSet = new Set();\n            makerIdSetWithMakers23.add('maker2');\n            makerIdSetWithMakers23.add('maker3');\n            const configManager = createMockConfigManager(makerIdSetWithMakers23, new Set(), new Set());\n\n            const rfqMakerManager = new RfqMakerManager(configManager, rfqMakerDbUtils, CHAIN_ID);\n            await rfqMakerManager.initializeAsync();\n\n            // When\n            const assetOfferings = rfqMakerManager.getRfqtV1MakerOfferings();\n\n            // Then\n            expect(assetOfferings).toEqual({\n                'https://maker2.asdf': [[tokenA, tokenB]],\n                'https://maker3.asdf': [[tokenA, tokenC]],\n            });\n        });\n    });\n    describe('getRfqtV2MakersForPair', () => {\n        it('should return the market makers trading rfqt-otc', async () => {\n            rfqMaker[0].pairs = [[tokenB, tokenA]];\n            rfqMaker[1].pairs = [[tokenB, tokenB]]; // This maker should not be included in the result\n\n            const rfqMakerDbUtils = createMockRfqMakerDbUtilsInstance(rfqMaker);\n            const configManager = createMockConfigManager(new Set(), new Set(['maker1', 'maker2']), new Set());\n            const rfqMakerManager = new RfqMakerManager(configManager, rfqMakerDbUtils, CHAIN_ID);\n            await rfqMakerManager.initializeAsync();\n\n            const makers = rfqMakerManager.getRfqtV2MakersForPair(tokenA, tokenB);\n\n            expect(makers.length).toEqual(1);\n            expect(makers[0].makerId).toEqual('maker1');\n        });\n    });\n});\n"],"version":3}