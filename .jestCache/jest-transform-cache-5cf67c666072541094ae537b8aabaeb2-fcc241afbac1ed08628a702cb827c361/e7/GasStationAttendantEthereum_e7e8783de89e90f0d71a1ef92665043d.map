{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasStationAttendantEthereum.ts","mappings":";;;AAAA,qCAAsC;AAEtC,iDAAkD;AAKlD,uEAAiE;AAGjE,MAAM,qCAAqC,GAAG,CAAC,CAAC;AAChD,MAAM,4BAA4B,GAAG,IAAI,iBAAS,CAAC,KAAK,CAAC,CAAC,CAAC,uCAAuC;AAClG,uGAAuG;AACvG,MAAM,mCAAmC,GAAG,GAAG,CAAC,CAAC,2DAA2D;AAE5G;;GAEG;AACH,MAAa,2BAA2B;IAGpC,YAAY,SAAoB;QAC5B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,wDAAwD;IACjD,KAAK,CAAC,2BAA2B;QACpC,OAAO,IAAI,iBAAS,CAAC,iBAAiB,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,6BAA6B;QACtC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,wBAAwB,EAAE,CAAC;QACjE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC;QAEpF,sCAAsC;QACtC,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,+CAA+C;QACpF,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAChD,MAAM,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE/C,gDAAgD;QAChD,MAAM,WAAW,GAAG,IAAA,8CAAoB,EACpC,4CAA4C,EAAE,OAAO;QACrD,4CAA4C,EAAE,OAAO;QACrD,KAAK,EACL,IAAI,CACP,CAAC;QAEF,OAAO,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,kCAAkC;QAC3C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,wBAAwB,EAAE,CAAC;QACjE,0EAA0E;QAC1E,+DAA+D;QAC/D,MAAM,2BAA2B,GAAG,UAAU,CAAC;QAC/C,OAAO,OAAO,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC,YAAY,CAAC,iBAAS,CAAC,UAAU,CAAC,CAAC;IACxF,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,eAAe,CACxB,iBAEQ;QAER,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,wBAAwB,EAAE,CAAC;QACjE,IAAI,CAAC,iBAAiB,EAAE;YACpB,gDAAgD;YAChD,MAAM,2BAA2B,GAAG,IAAI,iBAAS,CAAC,qCAAqC,CAAC,CAAC,KAAK,CAC1F,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,yBAAa,CAAC,CAC9B,CAAC;YACF,OAAO;gBACH,oBAAoB,EAAE,2BAA2B;gBACjD,YAAY,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC;aACnE,CAAC;SACL;QACD,MAAM,EAAE,YAAY,EAAE,eAAe,EAAE,oBAAoB,EAAE,uBAAuB,EAAE,GAClF,iBAAiB,CAAC,UAAU,CAAC;QACjC,MAAM,uBAAuB,GAAG,uBAAuB,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;QACnG,IAAI,uBAAuB,CAAC,sBAAsB,CAAC,4BAA4B,CAAC,EAAE;YAC9E,2DAA2D;YAC3D,OAAO,IAAI,CAAC;SACf;QACD,iGAAiG;QACjG,4FAA4F;QAC5F,iDAAiD;QACjD,MAAM,eAAe,GAAG,iBAAS,CAAC,GAAG,CACjC,eAAe,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,+CAA+C;QAClF,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CACxD,CAAC;QACF,OAAO;YACH,oBAAoB,EAAE,uBAAuB,CAAC,YAAY,CAAC,iBAAS,CAAC,UAAU,CAAC;YAChF,YAAY,EAAE,eAAe,CAAC,YAAY,CAAC,iBAAS,CAAC,UAAU,CAAC;SACnE,CAAC;IACN,CAAC;CACJ;AA9FD,kEA8FC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasStationAttendantEthereum.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\r\n\r\nimport { GWEI_DECIMALS } from '../core/constants';\r\nimport { MetaTransactionSubmissionEntity, RfqmV2TransactionSubmissionEntity } from '../entities';\r\n\r\nimport { GasOracle } from './GasOracle';\r\nimport { GasStationAttendant, Wei, WeiPerGas } from './GasStationAttendant';\r\nimport { calculateGasEstimate } from './rfqm_gas_estimate_utils';\r\nimport { SubmissionContext } from './SubmissionContext';\r\n\r\nconst INITIAL_MAX_PRIORITY_FEE_PER_GAS_GWEI = 2;\r\nconst MAX_PRIORITY_FEE_PER_GAS_CAP = new BigNumber(128e9); // The maximum tip we're willing to pay\r\n// Retrying an EIP 1559 transaction: https://docs.alchemy.com/alchemy/guides/eip-1559/retry-eip-1559-tx\r\nconst MAX_PRIORITY_FEE_PER_GAS_MULTIPLIER = 1.5; // Increase multiplier for tip with each resubmission cycle\r\n\r\n/**\r\n * An implementation of `GasStationAttendant` designed for Ethereum Mainnet.\r\n */\r\nexport class GasStationAttendantEthereum implements GasStationAttendant {\r\n    private readonly _gasOracle: GasOracle;\r\n\r\n    constructor(gasOracle: GasOracle) {\r\n        this._gasOracle = gasOracle;\r\n    }\r\n\r\n    /**\r\n     * The Safe Balance For Trade is based on historical data as outlined here:\r\n     * https://0xproject.quip.com/qZdFAHLpT7JI/RFQm-healthz-System-Health-Endpoint#temp:C:cXH5851e0f15e8c4828bffc1339d\r\n     */\r\n    // tslint:disable-next-line: prefer-function-over-method\r\n    public async getSafeBalanceForTradeAsync(): Promise<Wei> {\r\n        return new BigNumber(82500000000000000);\r\n    }\r\n\r\n    /**\r\n     * Uses an estimate of the current base fee with 6\r\n     * 10% increases plus the \"instant\" maxPriorityFeePerGas\r\n     * as reported by the oracle.\r\n     *\r\n     * Gas amount is estimated for an unwrap of the AAVE-USDC pair.\r\n     */\r\n    public async getWorkerBalanceForTradeAsync(): Promise<WeiPerGas> {\r\n        const baseFee = await this._gasOracle.getBaseFeePerGasWeiAsync();\r\n        const instantTip = await this._gasOracle.getMaxPriorityFeePerGasWeiAsync('instant');\r\n\r\n        // Pad the baseFee for 6 10% increases\r\n        const baseFeePad = Math.pow(1.1, 6); // tslint:disable-line: custom-no-magic-numbers\r\n        const paddedBaseFee = baseFee.times(baseFeePad);\r\n        const gasRate = paddedBaseFee.plus(instantTip);\r\n\r\n        // Use a gas estimate of a pretty high-cost pair\r\n        const gasEstimate = calculateGasEstimate(\r\n            '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9', // AAVE\r\n            '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', // USDC\r\n            'otc',\r\n            true,\r\n        );\r\n\r\n        return gasRate.times(gasEstimate);\r\n    }\r\n\r\n    /**\r\n     * Calculated by looking at historical data and seeing we average 1.5 transactions\r\n     * per job. This means we expect to pay 2.75 GWEI priority fee plus the base fee.\r\n     */\r\n    public async getExpectedTransactionGasRateAsync(): Promise<WeiPerGas> {\r\n        const baseFee = await this._gasOracle.getBaseFeePerGasWeiAsync();\r\n        // Currently we submit a 2 GWEI tip then multiply it by 1.5 per submission\r\n        // Trades take ~1.5 submissions on average, so that's 2.75 GWEI\r\n        const avgMaxPriorityFeePerGasRate = 2750000000;\r\n        return baseFee.plus(avgMaxPriorityFeePerGasRate).integerValue(BigNumber.ROUND_CEIL);\r\n    }\r\n\r\n    /**\r\n     * The submission strategy starts with a maxPriorityFee of 2 GWEI and adds\r\n     * 2 x the base fee to get the initial maxFeePerGas.\r\n     */\r\n    public async getNextBidAsync(\r\n        submissionContext: SubmissionContext<\r\n            RfqmV2TransactionSubmissionEntity[] | MetaTransactionSubmissionEntity[]\r\n        > | null,\r\n    ): Promise<{ maxFeePerGas: BigNumber; maxPriorityFeePerGas: BigNumber } | null> {\r\n        const baseFee = await this._gasOracle.getBaseFeePerGasWeiAsync();\r\n        if (!submissionContext) {\r\n            // Our first bid is 2x the base fee + 2 GWEI tip\r\n            const initialMaxPriorityFeePerGas = new BigNumber(INITIAL_MAX_PRIORITY_FEE_PER_GAS_GWEI).times(\r\n                Math.pow(10, GWEI_DECIMALS),\r\n            );\r\n            return {\r\n                maxPriorityFeePerGas: initialMaxPriorityFeePerGas,\r\n                maxFeePerGas: baseFee.times(2).plus(initialMaxPriorityFeePerGas),\r\n            };\r\n        }\r\n        const { maxFeePerGas: oldMaxFeePerGas, maxPriorityFeePerGas: oldMaxPriorityFeePerGas } =\r\n            submissionContext.maxGasFees;\r\n        const newMaxPriorityFeePerGas = oldMaxPriorityFeePerGas.times(MAX_PRIORITY_FEE_PER_GAS_MULTIPLIER);\r\n        if (newMaxPriorityFeePerGas.isGreaterThanOrEqualTo(MAX_PRIORITY_FEE_PER_GAS_CAP)) {\r\n            // We've reached our max; don't put in any new transactions\r\n            return null;\r\n        }\r\n        // The RPC nodes still need at least a 0.1 increase in both values to accept the new transaction.\r\n        // For the new max fee per gas, we'll take the maximum of a 0.1 increase from the last value\r\n        // or the value from an increase in the base fee.\r\n        const newMaxFeePerGas = BigNumber.max(\r\n            oldMaxFeePerGas.multipliedBy(1.1), // tslint:disable-line: custom-no-magic-numbers\r\n            baseFee.multipliedBy(2).plus(newMaxPriorityFeePerGas),\r\n        );\r\n        return {\r\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas.integerValue(BigNumber.ROUND_CEIL),\r\n            maxFeePerGas: newMaxFeePerGas.integerValue(BigNumber.ROUND_CEIL),\r\n        };\r\n    }\r\n}\r\n"],"version":3}