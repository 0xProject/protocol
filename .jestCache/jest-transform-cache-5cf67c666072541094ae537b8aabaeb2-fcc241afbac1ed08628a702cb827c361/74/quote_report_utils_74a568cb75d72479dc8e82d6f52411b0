d44d47eeb206bddbb80eb97f70b0942a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonifyFillData = exports.quoteReportUtils = void 0;
const asset_swapper_1 = require("@0x/asset-swapper");
const logger_1 = require("../logger");
const number_utils_1 = require("./number_utils");
exports.quoteReportUtils = {
    async publishRFQMQuoteReportAsync(logOpts, kafkaProducer, quoteReportTopic, extendedQuoteReportSubmissionBy = 'rfqm') {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (kafkaProducer && quoteReportTopic) {
            const quoteId = number_utils_1.numberUtils.randomHexNumberOfLength(10);
            logger_1.logger.info(`Generating and pushing RFQm Quote Report for: ${quoteId}`);
            let orderHash;
            if (logOpts.bestQuote && isFirmQuote(logOpts.bestQuote)) {
                orderHash = logOpts.bestQuote.order.getHash();
            }
            const finalQuotes = logOpts.finalQuotes.map((quote, index) => {
                return {
                    ...jsonifyFillData({
                        quoteEntryIndex: index,
                        isDelivered: false,
                        liquiditySource: asset_swapper_1.ERC20BridgeSource.Native,
                        makerAmount: isFirmQuote(quote) ? quote.order.makerAmount : quote.makerAmount,
                        takerAmount: isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount,
                        fillableTakerAmount: isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount,
                        isRFQ: true,
                        makerUri: quote.makerUri,
                        fillData: isFirmQuote(quote) ? quote.order : {},
                    }),
                    isIntermediate: false,
                };
            });
            const intermediateQuotes = logOpts.intermediateQuotes.map((quote, index) => {
                return {
                    ...jsonifyFillData({
                        quoteEntryIndex: index,
                        isDelivered: false,
                        liquiditySource: asset_swapper_1.ERC20BridgeSource.Native,
                        makerAmount: isFirmQuote(quote) ? quote.order.makerAmount : quote.makerAmount,
                        takerAmount: isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount,
                        fillableTakerAmount: isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount,
                        isRFQ: true,
                        makerUri: quote.makerUri,
                        fillData: isFirmQuote(quote) ? quote.order : {},
                    }),
                    isIntermediate: true,
                };
            });
            const sourcesDelivered = logOpts.bestQuote
                ? [
                    jsonifyFillData({
                        quoteEntryIndex: 0,
                        isDelivered: true,
                        liquiditySource: asset_swapper_1.ERC20BridgeSource.Native,
                        makerAmount: isFirmQuote(logOpts.bestQuote)
                            ? (_a = logOpts.bestQuote) === null || _a === void 0 ? void 0 : _a.order.makerAmount
                            : (_b = logOpts.bestQuote) === null || _b === void 0 ? void 0 : _b.makerAmount,
                        takerAmount: isFirmQuote(logOpts.bestQuote)
                            ? (_c = logOpts.bestQuote) === null || _c === void 0 ? void 0 : _c.order.takerAmount
                            : (_d = logOpts.bestQuote) === null || _d === void 0 ? void 0 : _d.takerAmount,
                        fillableTakerAmount: isFirmQuote(logOpts.bestQuote)
                            ? (_e = logOpts.bestQuote) === null || _e === void 0 ? void 0 : _e.order.takerAmount
                            : (_f = logOpts.bestQuote) === null || _f === void 0 ? void 0 : _f.takerAmount,
                        isRFQ: true,
                        makerUri: (_g = logOpts.bestQuote) === null || _g === void 0 ? void 0 : _g.makerUri,
                        fillData: isFirmQuote(logOpts.bestQuote) ? (_h = logOpts.bestQuote) === null || _h === void 0 ? void 0 : _h.order : {},
                    }),
                ]
                : undefined;
            const extendedQuoteReport = {
                quoteId,
                taker: logOpts.taker,
                timestamp: Date.now(),
                firmQuoteReport: logOpts.isFirmQuote,
                submissionBy: extendedQuoteReportSubmissionBy,
                buyAmount: logOpts.buyAmount ? logOpts.buyAmount.toString() : undefined,
                sellAmount: logOpts.sellAmount ? logOpts.sellAmount.toString() : undefined,
                buyTokenAddress: logOpts.buyTokenAddress,
                sellTokenAddress: logOpts.sellTokenAddress,
                integratorId: logOpts.integratorId,
                slippageBips: undefined,
                zeroExTransactionHash: orderHash,
                sourcesConsidered: finalQuotes.concat(intermediateQuotes),
                sourcesDelivered,
                fee: logOpts.fee,
                ammQuoteUniqueId: logOpts.ammQuoteUniqueId,
                isLiquidityAvailable: logOpts.isLiquidityAvailable,
            };
            kafkaProducer.send({
                topic: quoteReportTopic,
                messages: [
                    {
                        value: JSON.stringify(extendedQuoteReport),
                    },
                ],
            });
            return quoteId;
        }
        return null;
    },
    async publishRfqtV2FeeEvent(logOpts, kafkaProducer, feeEventTopic) {
        if (kafkaProducer && feeEventTopic) {
            const createdAt = Date.now();
            logger_1.logger.info(`Generating and pushing RFQt V2 Quote Report`);
            logOpts.quotes.map((quote) => {
                const quoteReport = {
                    createdAt,
                    orderHash: quote.order.getHash(),
                    requestedBuyAmount: logOpts.requestedBuyAmount,
                    requestedSellAmount: logOpts.requestedSellAmount,
                    requestedTakerAddress: logOpts.requestedTakerAddress,
                    fillableBuyAmount: quote.fillableMakerAmount,
                    fillableSellAmount: quote.fillableTakerAmount,
                    buyTokenAddress: logOpts.buyTokenAddress,
                    sellTokenAddress: logOpts.sellTokenAddress,
                    fee: logOpts.fee,
                    integratorId: logOpts.integratorId,
                    makerId: quote.makerId,
                    makerUri: quote.makerUri,
                    expiry: quote.order.expiry,
                    blockNumber: logOpts.blockNumber,
                };
                kafkaProducer.send({
                    topic: feeEventTopic,
                    messages: [
                        {
                            value: JSON.stringify(quoteReport),
                        },
                    ],
                });
            });
        }
    },
};
function isFirmQuote(quote) {
    return quote.order !== undefined;
}
/**
 * Migrated from @0x/asset-swapper
 */
function jsonifyFillData(source) {
    return {
        ...source,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        fillData: JSON.stringify(source.fillData, (key, value) => {
            if (key === '_samplerContract') {
                return {};
            }
            else {
                return value;
            }
        }),
    };
}
exports.jsonifyFillData = jsonifyFillData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9xdW90ZV9yZXBvcnRfdXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEscURBQWdHO0FBSWhHLHNDQUFtQztBQUduQyxpREFBNkM7QUEwSWhDLFFBQUEsZ0JBQWdCLEdBQUc7SUFDNUIsS0FBSyxDQUFDLDJCQUEyQixDQUM3QixPQUE2QyxFQUM3QyxhQUF1QixFQUN2QixnQkFBeUIsRUFDekIsa0NBQXVFLE1BQU07O1FBRTdFLElBQUksYUFBYSxJQUFJLGdCQUFnQixFQUFFO1lBQ25DLE1BQU0sT0FBTyxHQUFHLDBCQUFXLENBQUMsdUJBQXVCLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEQsZUFBTSxDQUFDLElBQUksQ0FBQyxpREFBaUQsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUV4RSxJQUFJLFNBQTZCLENBQUM7WUFDbEMsSUFBSSxPQUFPLENBQUMsU0FBUyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ3JELFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUNqRDtZQUVELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUN2QyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQWlELEVBQUU7Z0JBQzVELE9BQU87b0JBQ0gsR0FBRyxlQUFlLENBQUM7d0JBQ2YsZUFBZSxFQUFFLEtBQUs7d0JBQ3RCLFdBQVcsRUFBRSxLQUFLO3dCQUNsQixlQUFlLEVBQUUsaUNBQWlCLENBQUMsTUFBTTt3QkFDekMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXO3dCQUM3RSxXQUFXLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMs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QztvQkFDZixLQUFLLEVBQUUsYUFBYTtvQkFDcEIsUUFBUSxFQUFFO3dCQUNOOzRCQUNJLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQzt5QkFDckM7cUJBQ0o7aUJBQ0osQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7Q0FDSixDQUFDO0FBRUYsU0FBUyxXQUFXLENBQUMsS0FBcUM7SUFDdEQsT0FBUSxLQUFzQixDQUFDLEtBQUssS0FBSyxTQUFTLENBQUM7QUFDdkQsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsZUFBZSxDQUFDLE1BQXVDO0lBQ25FLE9BQU87UUFDSCxHQUFHLE1BQU07UUFDVCw4REFBOEQ7UUFDOUQsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQVcsRUFBRSxLQUFVLEVBQUUsRUFBRTtZQUNsRSxJQUFJLEdBQUcsS0FBSyxrQkFBa0IsRUFBRTtnQkFDNUIsT0FBTyxFQUFFLENBQUM7YUFDYjtpQkFBTTtnQkFDSCxPQUFPLEtBQUssQ0FBQzthQUNoQjtRQUNMLENBQUMsQ0FBQztLQUNMLENBQUM7QUFDTixDQUFDO0FBWkQsMENBWUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9xdW90ZV9yZXBvcnRfdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRVJDMjBCcmlkZ2VTb3VyY2UsIEZpbGxEYXRhLCBOYXRpdmVGaWxsRGF0YSwgUmZxT3JkZXJGaWVsZHMgfSBmcm9tICdAMHgvYXNzZXQtc3dhcHBlcic7XHJcbmltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gJ0AweC91dGlscyc7XHJcbmltcG9ydCB7IFByb2R1Y2VyIH0gZnJvbSAna2Fma2Fqcyc7XHJcblxyXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi9sb2dnZXInO1xyXG5pbXBvcnQgeyBGaXJtT3RjUXVvdGUsIEluZGljYXRpdmVRdW90ZSwgUmZxdFYyUXVvdGUsIFN0b3JlZEZlZSB9IGZyb20gJy4uL2NvcmUvdHlwZXMnO1xyXG5cclxuaW1wb3J0IHsgbnVtYmVyVXRpbHMgfSBmcm9tICcuL251bWJlcl91dGlscyc7XHJcblxyXG4vKiogTWlncmF0ZWQgZnJvbSBAMHgvYXNzZXQtc3dhcHBlciAqL1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFeHRlbmRlZFF1b3RlUmVwb3J0IHtcclxuICAgIHF1b3RlSWQ/OiBzdHJpbmc7XHJcbiAgICB0YWtlcj86IHN0cmluZztcclxuICAgIHRpbWVzdGFtcDogbnVtYmVyO1xyXG4gICAgZmlybVF1b3RlUmVwb3J0OiBib29sZWFuO1xyXG4gICAgc3VibWlzc2lvbkJ5OiAndGFrZXInIHwgJ21ldGFUeG4nIHwgJ3JmcW0nIHwgJ2dhc2xlc3NTd2FwUmZxJyB8ICdnYXNsZXNzU3dhcEFtbSc7XHJcbiAgICBidXlBbW91bnQ/OiBzdHJpbmc7XHJcbiAgICBzZWxsQW1vdW50Pzogc3RyaW5nO1xyXG4gICAgYnV5VG9rZW5BZGRyZXNzOiBzdHJpbmc7XHJcbiAgICBzZWxsVG9rZW5BZGRyZXNzOiBzdHJpbmc7XHJcbiAgICBpbnRlZ3JhdG9ySWQ/OiBzdHJpbmc7XHJcbiAgICBzbGlwcGFnZUJpcHM/OiBudW1iZXI7XHJcbiAgICB6ZXJvRXhUcmFuc2FjdGlvbkhhc2g/OiBzdHJpbmc7XHJcbiAgICBkZWNvZGVkVW5pcXVlSWQ/OiBzdHJpbmc7XHJcbiAgICBzb3VyY2VzQ29uc2lkZXJlZDogRXh0ZW5kZWRRdW90ZVJlcG9ydEluZGV4ZWRFbnRyeU91dGJvdW5kW107XHJcbiAgICBzb3VyY2VzRGVsaXZlcmVkOiBFeHRlbmRlZFF1b3RlUmVwb3J0SW5kZXhlZEVudHJ5T3V0Ym91bmRbXSB8IHVuZGVmaW5lZDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBRdW90ZVJlcG9ydEVudHJ5QmFzZSB7XHJcbiAgICBsaXF1aWRpdHlTb3VyY2U6IEVSQzIwQnJpZGdlU291cmNlO1xyXG4gICAgbWFrZXJBbW91bnQ6IEJpZ051bWJlcjtcclxuICAgIHRha2VyQW1vdW50OiBCaWdOdW1iZXI7XHJcbiAgICBmaWxsRGF0YTogRmlsbERhdGE7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBCcmlkZ2VRdW90ZVJlcG9ydEVudHJ5IGV4dGVuZHMgUXVvdGVSZXBvcnRFbnRyeUJhc2Uge1xyXG4gICAgbGlxdWlkaXR5U291cmNlOiBFeGNsdWRlPEVSQzIwQnJpZGdlU291cmNlLCBFUkMyMEJyaWRnZVNvdXJjZS5OYXRpdmU+O1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgTXVsdGlIb3BRdW90ZVJlcG9ydEVudHJ5IGV4dGVuZHMgUXVvdGVSZXBvcnRFbnRyeUJhc2Uge1xyXG4gICAgbGlxdWlkaXR5U291cmNlOiBFUkMyMEJyaWRnZVNvdXJjZS5NdWx0aUhvcDtcclxuICAgIGhvcFNvdXJjZXM6IEVSQzIwQnJpZGdlU291cmNlW107XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBOYXRpdmVMaW1pdE9yZGVyUXVvdGVSZXBvcnRFbnRyeSBleHRlbmRzIFF1b3RlUmVwb3J0RW50cnlCYXNlIHtcclxuICAgIGxpcXVpZGl0eVNvdXJjZTogRVJDMjBCcmlkZ2VTb3VyY2UuTmF0aXZlO1xyXG4gICAgZmlsbERhdGE6IE5hdGl2ZUZpbGxEYXRhO1xyXG4gICAgZmlsbGFibGVUYWtlckFtb3VudDogQmlnTnVtYmVyO1xyXG4gICAgaXNSRlE6IGZhbHNlO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgTmF0aXZlUmZxT3JkZXJRdW90ZVJlcG9ydEVudHJ5IGV4dGVuZHMgUXVvdGVSZXBvcnRFbnRyeUJhc2Uge1xyXG4gICAgbGlxdWlkaXR5U291cmNlOiBFUkMyMEJyaWRnZVNvdXJjZS5OYXRpdmU7XHJcbiAgICBmaWxsRGF0YTogTmF0aXZlRmlsbERhdGE7XHJcbiAgICBmaWxsYWJsZVRha2VyQW1vdW50OiBCaWdOdW1iZXI7XHJcbiAgICBpc1JGUTogdHJ1ZTtcclxuICAgIG5hdGl2ZU9yZGVyOiBSZnFPcmRlckZpZWxkcztcclxuICAgIG1ha2VyVXJpOiBzdHJpbmc7XHJcbiAgICBjb21wYXJpc29uUHJpY2U/OiBudW1iZXI7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBJbmRpY2F0aXZlUmZxT3JkZXJRdW90ZVJlcG9ydEVudHJ5IGV4dGVuZHMgUXVvdGVSZXBvcnRFbnRyeUJhc2Uge1xyXG4gICAgbGlxdWlkaXR5U291cmNlOiBFUkMyMEJyaWRnZVNvdXJjZS5OYXRpdmU7XHJcbiAgICBmaWxsYWJsZVRha2VyQW1vdW50OiBCaWdOdW1iZXI7XHJcbiAgICBpc1JGUTogdHJ1ZTtcclxuICAgIG1ha2VyVXJpPzogc3RyaW5nO1xyXG4gICAgY29tcGFyaXNvblByaWNlPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgZGVjbGFyZSB0eXBlIEV4dGVuZGVkUXVvdGVSZXBvcnRFbnRyeSA9XHJcbiAgICB8IEJyaWRnZVF1b3RlUmVwb3J0RW50cnlcclxuICAgIHwgTXVsdGlIb3BRdW90ZVJlcG9ydEVudHJ5XHJcbiAgICB8IE5hdGl2ZUxpbWl0T3JkZXJRdW90ZVJlcG9ydEVudHJ5XHJcbiAgICB8IE5hdGl2ZVJmcU9yZGVyUXVvdGVSZXBvcnRFbnRyeVxyXG4gICAgfCBJbmRpY2F0aXZlUmZxT3JkZXJRdW90ZVJlcG9ydEVudHJ5O1xyXG5cclxuZXhwb3J0IHR5cGUgRXh0ZW5kZWRRdW90ZVJlcG9ydEluZGV4ZWRFbnRyeSA9IEV4dGVuZGVkUXVvdGVSZXBvcnRFbnRyeSAmIHtcclxuICAgIHF1b3RlRW50cnlJbmRleDogbnVtYmVyO1xyXG4gICAgaXNEZWxpdmVyZWQ6IGJvb2xlYW47XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBFeHRlbmRlZFF1b3RlUmVwb3J0SW5kZXhlZEVudHJ5T3V0Ym91bmQgPSBPbWl0PEV4dGVuZGVkUXVvdGVSZXBvcnRJbmRleGVkRW50cnksICdmaWxsRGF0YSc+ICYge1xyXG4gICAgZmlsbERhdGE/OiBzdHJpbmc7XHJcbn07XHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxudHlwZSBFeHRlbmRlZFF1b3RlUmVwb3J0RW50cnlXaXRoSW50ZXJtZWRpYXRlUXVvdGUgPSBFeHRlbmRlZFF1b3RlUmVwb3J0SW5kZXhlZEVudHJ5T3V0Ym91bmQgJiB7XHJcbiAgICBpc0ludGVybWVkaWF0ZTogYm9vbGVhbjtcclxufTtcclxuXHJcbnR5cGUgRXh0ZW5kZWRRdW90ZVJlcG9ydFdpdGhJbnRlcm1lZGlhdGVRdW90ZSA9IE9taXQ8RXh0ZW5kZWRRdW90ZVJlcG9ydCwgJ3NvdXJjZXNDb25zaWRlcmVkJz4gJiB7XHJcbiAgICBzb3VyY2VzQ29uc2lkZXJlZDogRXh0ZW5kZWRRdW90ZVJlcG9ydEVudHJ5V2l0aEludGVybWVkaWF0ZVF1b3RlW107XHJcbn07XHJcblxyXG50eXBlIEV4dGVuZGVkUXVvdGVSZXBvcnRXaXRoRmVlID0gRXh0ZW5kZWRRdW90ZVJlcG9ydFdpdGhJbnRlcm1lZGlhdGVRdW90ZSAmIHtcclxuICAgIGZlZTogU3RvcmVkRmVlO1xyXG4gICAgYW1tUXVvdGVVbmlxdWVJZD86IHN0cmluZztcclxuICAgIGlzTGlxdWlkaXR5QXZhaWxhYmxlPzogYm9vbGVhbjtcclxufTtcclxuXHJcbmludGVyZmFjZSBFeHRlbmRlZFF1b3RlUmVwb3J0Rm9yUkZRTUxvZ09wdGlvbnMge1xyXG4gICAgaXNGaXJtUXVvdGU6IGJvb2xlYW47XHJcbiAgICBzZWxsQW1vdW50PzogQmlnTnVtYmVyO1xyXG4gICAgYnV5QW1vdW50PzogQmlnTnVtYmVyO1xyXG4gICAgYnV5VG9rZW5BZGRyZXNzOiBzdHJpbmc7XHJcbiAgICBzZWxsVG9rZW5BZGRyZXNzOiBzdHJpbmc7XHJcbiAgICBpbnRlZ3JhdG9ySWQ/OiBzdHJpbmc7XHJcbiAgICB0YWtlcj86IHN0cmluZztcclxuICAgIGZpbmFsUXVvdGVzOiBJbmRpY2F0aXZlUXVvdGVbXSB8IEZpcm1PdGNRdW90ZVtdO1xyXG4gICAgaW50ZXJtZWRpYXRlUXVvdGVzOiBJbmRpY2F0aXZlUXVvdGVbXTtcclxuICAgIGJlc3RRdW90ZTogSW5kaWNhdGl2ZVF1b3RlIHwgRmlybU90Y1F1b3RlIHwgbnVsbDtcclxuICAgIGZlZTogU3RvcmVkRmVlO1xyXG4gICAgYW1tUXVvdGVVbmlxdWVJZD86IHN0cmluZztcclxuICAgIGlzTGlxdWlkaXR5QXZhaWxhYmxlPzogYm9vbGVhbjtcclxufVxyXG4vKipcclxuICogUkZRdCBWMiBGZWUgRXZlbnQgSW50ZXJmYWNlc1xyXG4gKi9cclxuaW50ZXJmYWNlIFJmcXRWMkZlZUV2ZW50TG9nT3B0aW9ucyB7XHJcbiAgICByZXF1ZXN0ZWRCdXlBbW91bnQ6IEJpZ051bWJlciB8IG51bGw7XHJcbiAgICByZXF1ZXN0ZWRTZWxsQW1vdW50OiBCaWdOdW1iZXIgfCBudWxsO1xyXG4gICAgcmVxdWVzdGVkVGFrZXJBZGRyZXNzOiBzdHJpbmc7XHJcbiAgICBidXlUb2tlbkFkZHJlc3M6IHN0cmluZztcclxuICAgIHNlbGxUb2tlbkFkZHJlc3M6IHN0cmluZztcclxuICAgIGludGVncmF0b3JJZDogc3RyaW5nO1xyXG4gICAgYmxvY2tOdW1iZXI/OiBudW1iZXI7XHJcbiAgICBxdW90ZXM6IFJmcXRWMlF1b3RlW107XHJcbiAgICBmZWU6IFN0b3JlZEZlZTtcclxufVxyXG5cclxuaW50ZXJmYWNlIFJmcXRWMkZlZUV2ZW50IHtcclxuICAgIGNyZWF0ZWRBdDogbnVtYmVyO1xyXG4gICAgb3JkZXJIYXNoOiBzdHJpbmc7XHJcbiAgICByZXF1ZXN0ZWRCdXlBbW91bnQ6IEJpZ051bWJlciB8IG51bGw7XHJcbiAgICByZXF1ZXN0ZWRTZWxsQW1vdW50OiBCaWdOdW1iZXIgfCBudWxsO1xyXG4gICAgcmVxdWVzdGVkVGFrZXJBZGRyZXNzOiBzdHJpbmc7XHJcbiAgICBmaWxsYWJsZUJ1eUFtb3VudDogQmlnTnVtYmVyO1xyXG4gICAgZmlsbGFibGVTZWxsQW1vdW50OiBCaWdOdW1iZXI7XHJcbiAgICBidXlUb2tlbkFkZHJlc3M6IHN0cmluZztcclxuICAgIHNlbGxUb2tlbkFkZHJlc3M6IHN0cmluZztcclxuICAgIGZlZTogU3RvcmVkRmVlO1xyXG4gICAgaW50ZWdyYXRvcklkOiBzdHJpbmc7XHJcbiAgICBtYWtlcklkPzogc3RyaW5nO1xyXG4gICAgbWFrZXJVcmk/OiBzdHJpbmc7XHJcbiAgICBleHBpcnk6IEJpZ051bWJlcjtcclxuICAgIGJsb2NrTnVtYmVyPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcXVvdGVSZXBvcnRVdGlscyA9IHtcclxuICAgIGFzeW5jIHB1Ymxpc2hSRlFNUXVvdGVSZXBvcnRBc3luYyhcclxuICAgICAgICBsb2dPcHRzOiBFeHRlbmRlZFF1b3RlUmVwb3J0Rm9yUkZRTUxvZ09wdGlvbnMsXHJcbiAgICAgICAga2Fma2FQcm9kdWNlcjogUHJvZHVjZXIsXHJcbiAgICAgICAgcXVvdGVSZXBvcnRUb3BpYz86IHN0cmluZyxcclxuICAgICAgICBleHRlbmRlZFF1b3RlUmVwb3J0U3VibWlzc2lvbkJ5OiBFeHRlbmRlZFF1b3RlUmVwb3J0WydzdWJtaXNzaW9uQnknXSA9ICdyZnFtJyxcclxuICAgICk6IFByb21pc2U8LyogcXVvdGVJZCAqLyBzdHJpbmcgfCBudWxsPiB7XHJcbiAgICAgICAgaWYgKGthZmthUHJvZHVjZXIgJiYgcXVvdGVSZXBvcnRUb3BpYykge1xyXG4gICAgICAgICAgICBjb25zdCBxdW90ZUlkID0gbnVtYmVyVXRpbHMucmFuZG9tSGV4TnVtYmVyT2ZMZW5ndGgoMTApO1xyXG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhgR2VuZXJhdGluZyBhbmQgcHVzaGluZyBSRlFtIFF1b3RlIFJlcG9ydCBmb3I6ICR7cXVvdGVJZH1gKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBvcmRlckhhc2g6IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgaWYgKGxvZ09wdHMuYmVzdFF1b3RlICYmIGlzRmlybVF1b3RlKGxvZ09wdHMuYmVzdFF1b3RlKSkge1xyXG4gICAgICAgICAgICAgICAgb3JkZXJIYXNoID0gbG9nT3B0cy5iZXN0UXVvdGUub3JkZXIuZ2V0SGFzaCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmaW5hbFF1b3RlcyA9IGxvZ09wdHMuZmluYWxRdW90ZXMubWFwKFxyXG4gICAgICAgICAgICAgICAgKHF1b3RlLCBpbmRleCk6IEV4dGVuZGVkUXVvdGVSZXBvcnRFbnRyeVdpdGhJbnRlcm1lZGlhdGVRdW90ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uanNvbmlmeUZpbGxEYXRhKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1b3RlRW50cnlJbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0RlbGl2ZXJlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXF1aWRpdHlTb3VyY2U6IEVSQzIwQnJpZGdlU291cmNlLk5hdGl2ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VyQW1vdW50OiBpc0Zpcm1RdW90ZShxdW90ZSkgPyBxdW90ZS5vcmRlci5tYWtlckFtb3VudCA6IHF1b3RlLm1ha2VyQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IGlzRmlybVF1b3RlKHF1b3RlKSA/IHF1b3RlLm9yZGVyLnRha2VyQW1vdW50IDogcXVvdGUudGFrZXJBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsYWJsZVRha2VyQW1vdW50OiBpc0Zpcm1RdW90ZShxdW90ZSkgPyBxdW90ZS5vcmRlci50YWtlckFtb3VudCA6IHF1b3RlLnRha2VyQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSRlE6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWtlclVyaTogcXVvdGUubWFrZXJVcmksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsRGF0YTogaXNGaXJtUXVvdGUocXVvdGUpID8gcXVvdGUub3JkZXIgOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzSW50ZXJtZWRpYXRlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGludGVybWVkaWF0ZVF1b3RlcyA9IGxvZ09wdHMuaW50ZXJtZWRpYXRlUXVvdGVzLm1hcChcclxuICAgICAgICAgICAgICAgIChxdW90ZSwgaW5kZXgpOiBFeHRlbmRlZFF1b3RlUmVwb3J0RW50cnlXaXRoSW50ZXJtZWRpYXRlUXVvdGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmpzb25pZnlGaWxsRGF0YSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdW90ZUVudHJ5SW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEZWxpdmVyZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlxdWlkaXR5U291cmNlOiBFUkMyMEJyaWRnZVNvdXJjZS5OYXRpdmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWtlckFtb3VudDogaXNGaXJtUXVvdGUocXVvdGUpID8gcXVvdGUub3JkZXIubWFrZXJBbW91bnQgOiBxdW90ZS5tYWtlckFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRha2VyQW1vdW50OiBpc0Zpcm1RdW90ZShxdW90ZSkgPyBxdW90ZS5vcmRlci50YWtlckFtb3VudCA6IHF1b3RlLnRha2VyQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbGFibGVUYWtlckFtb3VudDogaXNGaXJtUXVvdGUocXVvdGUpID8gcXVvdGUub3JkZXIudGFrZXJBbW91bnQgOiBxdW90ZS50YWtlckFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUkZROiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFrZXJVcmk6IHF1b3RlLm1ha2VyVXJpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbERhdGE6IGlzRmlybVF1b3RlKHF1b3RlKSA/IHF1b3RlLm9yZGVyIDoge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0ludGVybWVkaWF0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZXNEZWxpdmVyZWQ6IEV4dGVuZGVkUXVvdGVSZXBvcnRJbmRleGVkRW50cnlPdXRib3VuZFtdIHwgdW5kZWZpbmVkID0gbG9nT3B0cy5iZXN0UXVvdGVcclxuICAgICAgICAgICAgICAgID8gW1xyXG4gICAgICAgICAgICAgICAgICAgICAganNvbmlmeUZpbGxEYXRhKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBxdW90ZUVudHJ5SW5kZXg6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEZWxpdmVyZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGlxdWlkaXR5U291cmNlOiBFUkMyMEJyaWRnZVNvdXJjZS5OYXRpdmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFrZXJBbW91bnQ6IGlzRmlybVF1b3RlKGxvZ09wdHMuYmVzdFF1b3RlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGxvZ09wdHMuYmVzdFF1b3RlPy5vcmRlci5tYWtlckFtb3VudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGxvZ09wdHMuYmVzdFF1b3RlPy5tYWtlckFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0YWtlckFtb3VudDogaXNGaXJtUXVvdGUobG9nT3B0cy5iZXN0UXVvdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbG9nT3B0cy5iZXN0UXVvdGU/Lm9yZGVyLnRha2VyQW1vdW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbG9nT3B0cy5iZXN0UXVvdGU/LnRha2VyQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxhYmxlVGFrZXJBbW91bnQ6IGlzRmlybVF1b3RlKGxvZ09wdHMuYmVzdFF1b3RlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGxvZ09wdHMuYmVzdFF1b3RlPy5vcmRlci50YWtlckFtb3VudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGxvZ09wdHMuYmVzdFF1b3RlPy50YWtlckFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JGUTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBtYWtlclVyaTogbG9nT3B0cy5iZXN0UXVvdGU/Lm1ha2VyVXJpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxEYXRhOiBpc0Zpcm1RdW90ZShsb2dPcHRzLmJlc3RRdW90ZSkgPyBsb2dPcHRzLmJlc3RRdW90ZT8ub3JkZXIgOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgY29uc3QgZXh0ZW5kZWRRdW90ZVJlcG9ydDogRXh0ZW5kZWRRdW90ZVJlcG9ydFdpdGhGZWUgPSB7XHJcbiAgICAgICAgICAgICAgICBxdW90ZUlkLFxyXG4gICAgICAgICAgICAgICAgdGFrZXI6IGxvZ09wdHMudGFrZXIsXHJcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICBmaXJtUXVvdGVSZXBvcnQ6IGxvZ09wdHMuaXNGaXJtUXVvdGUsXHJcbiAgICAgICAgICAgICAgICBzdWJtaXNzaW9uQnk6IGV4dGVuZGVkUXVvdGVSZXBvcnRTdWJtaXNzaW9uQnksXHJcbiAgICAgICAgICAgICAgICBidXlBbW91bnQ6IGxvZ09wdHMuYnV5QW1vdW50ID8gbG9nT3B0cy5idXlBbW91bnQudG9TdHJpbmcoKSA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIHNlbGxBbW91bnQ6IGxvZ09wdHMuc2VsbEFtb3VudCA/IGxvZ09wdHMuc2VsbEFtb3VudC50b1N0cmluZygpIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgYnV5VG9rZW5BZGRyZXNzOiBsb2dPcHRzLmJ1eVRva2VuQWRkcmVzcyxcclxuICAgICAgICAgICAgICAgIHNlbGxUb2tlbkFkZHJlc3M6IGxvZ09wdHMuc2VsbFRva2VuQWRkcmVzcyxcclxuICAgICAgICAgICAgICAgIGludGVncmF0b3JJZDogbG9nT3B0cy5pbnRlZ3JhdG9ySWQsXHJcbiAgICAgICAgICAgICAgICBzbGlwcGFnZUJpcHM6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIHplcm9FeFRyYW5zYWN0aW9uSGFzaDogb3JkZXJIYXNoLFxyXG4gICAgICAgICAgICAgICAgc291cmNlc0NvbnNpZGVyZWQ6IGZpbmFsUXVvdGVzLmNvbmNhdChpbnRlcm1lZGlhdGVRdW90ZXMpLFxyXG4gICAgICAgICAgICAgICAgc291cmNlc0RlbGl2ZXJlZCxcclxuICAgICAgICAgICAgICAgIGZlZTogbG9nT3B0cy5mZWUsXHJcbiAgICAgICAgICAgICAgICBhbW1RdW90ZVVuaXF1ZUlkOiBsb2dPcHRzLmFtbVF1b3RlVW5pcXVlSWQsXHJcbiAgICAgICAgICAgICAgICBpc0xpcXVpZGl0eUF2YWlsYWJsZTogbG9nT3B0cy5pc0xpcXVpZGl0eUF2YWlsYWJsZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAga2Fma2FQcm9kdWNlci5zZW5kKHtcclxuICAgICAgICAgICAgICAgIHRvcGljOiBxdW90ZVJlcG9ydFRvcGljLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBKU09OLnN0cmluZ2lmeShleHRlbmRlZFF1b3RlUmVwb3J0KSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBxdW90ZUlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcbiAgICBhc3luYyBwdWJsaXNoUmZxdFYyRmVlRXZlbnQobG9nT3B0czogUmZxdFYyRmVlRXZlbnRMb2dPcHRpb25zLCBrYWZrYVByb2R1Y2VyOiBQcm9kdWNlciwgZmVlRXZlbnRUb3BpYz86IHN0cmluZykge1xyXG4gICAgICAgIGlmIChrYWZrYVByb2R1Y2VyICYmIGZlZUV2ZW50VG9waWMpIHtcclxuICAgICAgICAgICAgY29uc3QgY3JlYXRlZEF0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgbG9nZ2VyLmluZm8oYEdlbmVyYXRpbmcgYW5kIHB1c2hpbmcgUkZRdCBWMiBRdW90ZSBSZXBvcnRgKTtcclxuXHJcbiAgICAgICAgICAgIGxvZ09wdHMucXVvdGVzLm1hcCgocXVvdGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHF1b3RlUmVwb3J0OiBSZnF0VjJGZWVFdmVudCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVkQXQsXHJcbiAgICAgICAgICAgICAgICAgICAgb3JkZXJIYXNoOiBxdW90ZS5vcmRlci5nZXRIYXNoKCksXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkQnV5QW1vdW50OiBsb2dPcHRzLnJlcXVlc3RlZEJ1eUFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRTZWxsQW1vdW50OiBsb2dPcHRzLnJlcXVlc3RlZFNlbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkVGFrZXJBZGRyZXNzOiBsb2dPcHRzLnJlcXVlc3RlZFRha2VyQWRkcmVzcyxcclxuICAgICAgICAgICAgICAgICAgICBmaWxsYWJsZUJ1eUFtb3VudDogcXVvdGUuZmlsbGFibGVNYWtlckFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICBmaWxsYWJsZVNlbGxBbW91bnQ6IHF1b3RlLmZpbGxhYmxlVGFrZXJBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW5BZGRyZXNzOiBsb2dPcHRzLmJ1eVRva2VuQWRkcmVzcyxcclxuICAgICAgICAgICAgICAgICAgICBzZWxsVG9rZW5BZGRyZXNzOiBsb2dPcHRzLnNlbGxUb2tlbkFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgZmVlOiBsb2dPcHRzLmZlZSxcclxuICAgICAgICAgICAgICAgICAgICBpbnRlZ3JhdG9ySWQ6IGxvZ09wdHMuaW50ZWdyYXRvcklkLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VySWQ6IHF1b3RlLm1ha2VySWQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJVcmk6IHF1b3RlLm1ha2VyVXJpLFxyXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyeTogcXVvdGUub3JkZXIuZXhwaXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrTnVtYmVyOiBsb2dPcHRzLmJsb2NrTnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBrYWZrYVByb2R1Y2VyLnNlbmQoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcGljOiBmZWVFdmVudFRvcGljLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBKU09OLnN0cmluZ2lmeShxdW90ZVJlcG9ydCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG59O1xyXG5cclxuZnVuY3Rpb24gaXNGaXJtUXVvdGUocXVvdGU6IEZpcm1PdGNRdW90ZSB8IEluZGljYXRpdmVRdW90ZSk6IHF1b3RlIGlzIEZpcm1PdGNRdW90ZSB7XHJcbiAgICByZXR1cm4gKHF1b3RlIGFzIEZpcm1PdGNRdW90ZSkub3JkZXIgIT09IHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1pZ3JhdGVkIGZyb20gQDB4L2Fzc2V0LXN3YXBwZXJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBqc29uaWZ5RmlsbERhdGEoc291cmNlOiBFeHRlbmRlZFF1b3RlUmVwb3J0SW5kZXhlZEVudHJ5KTogRXh0ZW5kZWRRdW90ZVJlcG9ydEluZGV4ZWRFbnRyeU91dGJvdW5kIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc291cmNlLFxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgZmlsbERhdGE6IEpTT04uc3RyaW5naWZ5KHNvdXJjZS5maWxsRGF0YSwgKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdfc2FtcGxlckNvbnRyYWN0Jykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSksXHJcbiAgICB9O1xyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==