e61c8c79d96bd5d9e889da7c2dea3625
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfig = void 0;
const config_1 = require("./config");
const entities_1 = require("./entities");
const LastLookRejectionCooldownsEntity_1 = require("./entities/LastLookRejectionCooldownsEntity");
const entities = [
    entities_1.BlockedAddressEntity,
    entities_1.SignedOrderEntity,
    entities_1.PersistentSignedOrderEntity,
    entities_1.TransactionEntity,
    entities_1.KeyValueEntity,
    LastLookRejectionCooldownsEntity_1.LastLookRejectionCooldownEntity,
    entities_1.MakerBalanceChainCacheEntity,
    entities_1.MetaTransactionJobEntity,
    entities_1.MetaTransactionSubmissionEntity,
    entities_1.SignedOrderV4Entity,
    entities_1.PersistentSignedOrderV4Entity,
    entities_1.RfqmWorkerHeartbeatEntity,
    entities_1.RfqmQuoteEntity,
    entities_1.RfqmJobEntity,
    entities_1.RfqmTransactionSubmissionEntity,
    entities_1.RfqmV2JobEntity,
    entities_1.RfqmV2QuoteEntity,
    entities_1.RfqmV2TransactionSubmissionEntity,
    entities_1.OrderWatcherSignedOrderEntity,
    entities_1.RfqMaker,
    entities_1.RfqMakerUpdateTimeHash,
];
const createConfig = (postgresUri = config_1.POSTGRES_URI) => ({
    type: 'postgres',
    entities,
    synchronize: false,
    logging: true,
    logger: 'debug',
    extra: {
        max: 15,
        statement_timeout: 10000,
    },
    migrations: ['./lib/migrations/*.js'],
    ...(config_1.POSTGRES_READ_REPLICA_URIS
        ? {
            replication: {
                master: { url: postgresUri },
                slaves: config_1.POSTGRES_READ_REPLICA_URIS.map((r) => ({ url: r })),
            },
        }
        : { url: postgresUri }),
});
exports.createConfig = createConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9jcmVhdGVPcm1Db25maWcudHMiLCJtYXBwaW5ncyI6Ijs7O0FBRUEscUNBQW9FO0FBQ3BFLHlDQXFCb0I7QUFDcEIsa0dBQThGO0FBRTlGLE1BQU0sUUFBUSxHQUFHO0lBQ2IsK0JBQW9CO0lBQ3BCLDRCQUFpQjtJQUNqQixzQ0FBMkI7SUFDM0IsNEJBQWlCO0lBQ2pCLHlCQUFjO0lBQ2Qsa0VBQStCO0lBQy9CLHVDQUE0QjtJQUM1QixtQ0FBd0I7SUFDeEIsMENBQStCO0lBQy9CLDhCQUFtQjtJQUNuQix3Q0FBNkI7SUFDN0Isb0NBQXlCO0lBQ3pCLDBCQUFlO0lBQ2Ysd0JBQWE7SUFDYiwwQ0FBK0I7SUFDL0IsMEJBQWU7SUFDZiw0QkFBaUI7SUFDakIsNENBQWlDO0lBQ2pDLHdDQUE2QjtJQUM3QixtQkFBUTtJQUNSLGlDQUFzQjtDQUN6QixDQUFDO0FBRUssTUFBTSxZQUFZLEdBQUcsQ0FBQyxjQUFzQixxQkFBWSxFQUFxQixFQUFFLENBQUMsQ0FBQztJQUNwRixJQUFJLEVBQUUsVUFBVTtJQUNoQixRQUFRO0lBQ1IsV0FBVyxFQUFFLEtBQUs7SUFDbEIsT0FBTyxFQUFFLElBQUk7SUFDYixNQUFNLEVBQUUsT0FBTztJQUNmLEtBQUssRUFBRTtRQUNILEdBQUcsRUFBRSxFQUFFO1FBQ1AsaUJBQWlCLEVBQUUsS0FBSztLQUMzQjtJQUNELFVBQVUsRUFBRSxDQUFDLHVCQUF1QixDQUFDO0lBQ3JDLEdBQUcsQ0FBQyxtQ0FBMEI7UUFDMUIsQ0FBQyxDQUFDO1lBQ0ksV0FBVyxFQUFFO2dCQUNULE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUU7Z0JBQzVCLE1BQU0sRUFBRSxtQ0FBMEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUM5RDtTQUNKO1FBQ0gsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxDQUFDO0NBQzlCLENBQUMsQ0FBQztBQW5CVSxRQUFBLFlBQVksZ0JBbUJ0QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvc3JjL2NyZWF0ZU9ybUNvbmZpZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhU291cmNlT3B0aW9ucyB9IGZyb20gJ3R5cGVvcm0nO1xuXG5pbXBvcnQgeyBQT1NUR1JFU19SRUFEX1JFUExJQ0FfVVJJUywgUE9TVEdSRVNfVVJJIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHtcbiAgICBCbG9ja2VkQWRkcmVzc0VudGl0eSxcbiAgICBLZXlWYWx1ZUVudGl0eSxcbiAgICBNYWtlckJhbGFuY2VDaGFpbkNhY2hlRW50aXR5LFxuICAgIE1ldGFUcmFuc2FjdGlvbkpvYkVudGl0eSxcbiAgICBNZXRhVHJhbnNhY3Rpb25TdWJtaXNzaW9uRW50aXR5LFxuICAgIE9yZGVyV2F0Y2hlclNpZ25lZE9yZGVyRW50aXR5LFxuICAgIFBlcnNpc3RlbnRTaWduZWRPcmRlckVudGl0eSxcbiAgICBQZXJzaXN0ZW50U2lnbmVkT3JkZXJWNEVudGl0eSxcbiAgICBSZnFNYWtlcixcbiAgICBSZnFNYWtlclVwZGF0ZVRpbWVIYXNoLFxuICAgIFJmcW1Kb2JFbnRpdHksXG4gICAgUmZxbVF1b3RlRW50aXR5LFxuICAgIFJmcW1UcmFuc2FjdGlvblN1Ym1pc3Npb25FbnRpdHksXG4gICAgUmZxbVYySm9iRW50aXR5LFxuICAgIFJmcW1WMlF1b3RlRW50aXR5LFxuICAgIFJmcW1WMlRyYW5zYWN0aW9uU3VibWlzc2lvbkVudGl0eSxcbiAgICBSZnFtV29ya2VySGVhcnRiZWF0RW50aXR5LFxuICAgIFNpZ25lZE9yZGVyRW50aXR5LFxuICAgIFNpZ25lZE9yZGVyVjRFbnRpdHksXG4gICAgVHJhbnNhY3Rpb25FbnRpdHksXG59IGZyb20gJy4vZW50aXRpZXMnO1xuaW1wb3J0IHsgTGFzdExvb2tSZWplY3Rpb25Db29sZG93bkVudGl0eSB9IGZyb20gJy4vZW50aXRpZXMvTGFzdExvb2tSZWplY3Rpb25Db29sZG93bnNFbnRpdHknO1xuXG5jb25zdCBlbnRpdGllcyA9IFtcbiAgICBCbG9ja2VkQWRkcmVzc0VudGl0eSxcbiAgICBTaWduZWRPcmRlckVudGl0eSxcbiAgICBQZXJzaXN0ZW50U2lnbmVkT3JkZXJFbnRpdHksXG4gICAgVHJhbnNhY3Rpb25FbnRpdHksXG4gICAgS2V5VmFsdWVFbnRpdHksXG4gICAgTGFzdExvb2tSZWplY3Rpb25Db29sZG93bkVudGl0eSxcbiAgICBNYWtlckJhbGFuY2VDaGFpbkNhY2hlRW50aXR5LFxuICAgIE1ldGFUcmFuc2FjdGlvbkpvYkVudGl0eSxcbiAgICBNZXRhVHJhbnNhY3Rpb25TdWJtaXNzaW9uRW50aXR5LFxuICAgIFNpZ25lZE9yZGVyVjRFbnRpdHksXG4gICAgUGVyc2lzdGVudFNpZ25lZE9yZGVyVjRFbnRpdHksXG4gICAgUmZxbVdvcmtlckhlYXJ0YmVhdEVudGl0eSxcbiAgICBSZnFtUXVvdGVFbnRpdHksXG4gICAgUmZxbUpvYkVudGl0eSxcbiAgICBSZnFtVHJhbnNhY3Rpb25TdWJtaXNzaW9uRW50aXR5LFxuICAgIFJmcW1WMkpvYkVudGl0eSxcbiAgICBSZnFtVjJRdW90ZUVudGl0eSxcbiAgICBSZnFtVjJUcmFuc2FjdGlvblN1Ym1pc3Npb25FbnRpdHksXG4gICAgT3JkZXJXYXRjaGVyU2lnbmVkT3JkZXJFbnRpdHksXG4gICAgUmZxTWFrZXIsXG4gICAgUmZxTWFrZXJVcGRhdGVUaW1lSGFzaCxcbl07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVDb25maWcgPSAocG9zdGdyZXNVcmk6IHN0cmluZyA9IFBPU1RHUkVTX1VSSSk6IERhdGFTb3VyY2VPcHRpb25zID0+ICh7XG4gICAgdHlwZTogJ3Bvc3RncmVzJyxcbiAgICBlbnRpdGllcyxcbiAgICBzeW5jaHJvbml6ZTogZmFsc2UsXG4gICAgbG9nZ2luZzogdHJ1ZSxcbiAgICBsb2dnZXI6ICdkZWJ1ZycsXG4gICAgZXh0cmE6IHtcbiAgICAgICAgbWF4OiAxNSxcbiAgICAgICAgc3RhdGVtZW50X3RpbWVvdXQ6IDEwMDAwLFxuICAgIH0sXG4gICAgbWlncmF0aW9uczogWycuL2xpYi9taWdyYXRpb25zLyouanMnXSxcbiAgICAuLi4oUE9TVEdSRVNfUkVBRF9SRVBMSUNBX1VSSVNcbiAgICAgICAgPyB7XG4gICAgICAgICAgICAgIHJlcGxpY2F0aW9uOiB7XG4gICAgICAgICAgICAgICAgICBtYXN0ZXI6IHsgdXJsOiBwb3N0Z3Jlc1VyaSB9LFxuICAgICAgICAgICAgICAgICAgc2xhdmVzOiBQT1NUR1JFU19SRUFEX1JFUExJQ0FfVVJJUy5tYXAoKHIpID0+ICh7IHVybDogciB9KSksXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgfVxuICAgICAgICA6IHsgdXJsOiBwb3N0Z3Jlc1VyaSB9KSxcbn0pO1xuIl0sInZlcnNpb24iOjN9