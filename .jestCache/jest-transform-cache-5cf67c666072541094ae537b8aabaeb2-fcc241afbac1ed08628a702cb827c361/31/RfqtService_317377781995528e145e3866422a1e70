b07dd76219ea977e0da6b50e9fdf94a4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqtService = void 0;
const orders_1 = require("@0x/protocol-utils/lib/src/orders");
const token_metadata_1 = require("@0x/token-metadata");
const utils_1 = require("@0x/utils");
const constants_1 = require("../core/constants");
const fee_utils_1 = require("../core/fee_utils");
const logger_1 = require("../logger");
const quote_report_utils_1 = require("../utils/quote_report_utils");
const RfqtQuoteValidator_1 = require("../utils/RfqtQuoteValidator");
const signature_utils_1 = require("../utils/signature_utils");
const getTokenAddressFromSymbol = (symbol, chainId) => {
    return (0, token_metadata_1.getTokenMetadataIfExists)(symbol, chainId).tokenAddress;
};
/**
 * Converts the parameters of an RFQt v2 prices request from 0x API
 * into the format needed for `QuoteServerClient` to call the market makers
 */
function transformRfqtV2PricesParameters(p, fee, chainId) {
    const buyTokenAddress = p.makerToken;
    const sellTokenAddress = p.takerToken;
    // Typescript gymnastics with `baseUnits` to caputure the "oneof" nature--
    // By packaging them in their own little object, the type becomes:
    //
    // { buyAmountBaseUnits: BigNumber, sellAmountBaseUnits: undefined } |
    // { buyAmountBaseUnits: undefined, sellAmountBaseUnits: BigNumber }
    //
    // This is different from not packaging them together, where the types would be:
    //
    // buyAmountBaseUnits: BigNumber | undefined
    // sellAmountBaseUnits: BigNumber | undefined
    const baseUnits = p.isSelling === false
        ? {
            buyAmountBaseUnits: p.assetFillAmount,
            sellAmountBaseUnits: undefined,
        }
        : {
            // This is a SELL
            buyAmountBaseUnits: undefined,
            sellAmountBaseUnits: p.assetFillAmount,
        };
    const mmRequestParameters = {
        ...baseUnits,
        buyTokenAddress,
        sellTokenAddress,
        chainId,
        feeAmount: fee.amount,
        feeToken: fee.token,
        integratorId: p.integrator.integratorId,
        takerAddress: p.takerAddress,
        txOrigin: p.txOrigin,
        trader: p.trader,
        gasless: p.workflow === 'gasless-rfqt',
        protocolVersion: '4', //hardcode - will break some MMs if missing!
    };
    // Convert mmRequestParameters values to strings
    const stringParameters = ((o) => {
        return Object.keys(o).reduce((result, key) => {
            const value = o[key];
            if (value !== undefined && value.toString) {
                const stringValue = value.toString();
                result[key] = stringValue;
            }
            return result;
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }, {});
    })(mmRequestParameters);
    return stringParameters;
}
/**
 * Contains the logic to handle RFQT Trades.
 *
 * `"v1"` functions support `MetaTransaction` trades while
 * `"v2"` functions (will) support `OtcOrder` trades.
 *
 * `v1` relies heavily on `QuoteRequestor` which has been copied over
 * from `0x/asset-swapper`.
 */
class RfqtService {
    constructor(_chainId, _rfqMakerManager, 
    // Used for RFQt v1 requests
    _quoteRequestor, 
    // Used for RFQt v2 requests
    _quoteServerClient, _minExpiryDurationMs, _blockchainUtils, _tokenMetadataManager, _contractAddresses, _feeService, _feeModelVersion, _rfqMakerBalanceCacheService, _kafkaProducer, _feeEventTopic) {
        this._chainId = _chainId;
        this._rfqMakerManager = _rfqMakerManager;
        this._quoteRequestor = _quoteRequestor;
        this._quoteServerClient = _quoteServerClient;
        this._minExpiryDurationMs = _minExpiryDurationMs;
        this._blockchainUtils = _blockchainUtils;
        this._tokenMetadataManager = _tokenMetadataManager;
        this._contractAddresses = _contractAddresses;
        this._feeService = _feeService;
        this._feeModelVersion = _feeModelVersion;
        this._rfqMakerBalanceCacheService = _rfqMakerBalanceCacheService;
        this._kafkaProducer = _kafkaProducer;
        this._feeEventTopic = _feeEventTopic;
        this._nativeTokenSymbol = (0, token_metadata_1.nativeTokenSymbol)(this._chainId);
        this._nativeTokenAddress = getTokenAddressFromSymbol(this._nativeTokenSymbol, this._chainId);
        this._nativeWrappedTokenSymbol = (0, token_metadata_1.nativeWrappedTokenSymbol)(this._chainId);
        this._nativeWrappedTokenAddress = getTokenAddressFromSymbol(this._nativeWrappedTokenSymbol, this._chainId);
    }
    /**
     * Pass through to `QuoteRequestor::requestRfqtIndicativeQuotesAsync` to fetch
     * indicative quotes from market makers.
     *
     * Note that by this point, 0x API should be sending the null address
     * as the `takerAddress` and the taker's address as the `txOrigin`.
     */
    async getV1PricesAsync(parameters) {
        const { altRfqAssetOfferings, assetFillAmount, comparisonPrice, integrator, intentOnFilling, // tslint:disable-line boolean-naming
        makerToken, marketOperation, takerAddress, takerToken, txOrigin, } = parameters;
        return this._quoteRequestor.requestRfqtIndicativeQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, {
            altRfqAssetOfferings,
            integrator,
            intentOnFilling,
            isIndicative: true,
            isLastLook: false,
            makerEndpointMaxResponseTimeMs: 600,
            takerAddress,
            txOrigin: txOrigin || constants_1.NULL_ADDRESS,
        });
    }
    /**
     * Pass through to `QuoteRequestor::requestRfqtFirmQuotesAsync` to fetch
     * firm quotes from market makers.
     *
     * Note that by this point, 0x API should be sending the null address
     * as the `takerAddress` and the taker's address as the `txOrigin`.
     */
    async getV1QuotesAsync(parameters) {
        const { altRfqAssetOfferings, assetFillAmount, comparisonPrice, integrator, intentOnFilling, // tslint:disable-line boolean-naming
        makerToken, marketOperation, takerAddress, takerToken, txOrigin, } = parameters;
        const quotes = await this._quoteRequestor.requestRfqtFirmQuotesAsync(makerToken, takerToken, assetFillAmount, marketOperation, comparisonPrice, {
            altRfqAssetOfferings,
            integrator,
            intentOnFilling,
            isIndicative: false,
            isLastLook: false,
            makerEndpointMaxResponseTimeMs: 600,
            takerAddress,
            txOrigin,
        });
        return quotes.map((q) => {
            return {
                ...q,
                makerUri: this._quoteRequestor.getMakerUriForSignature(q.signature),
            };
        });
    }
    /**
     * Accepts data sent by 0x API and fetches prices from Market Makers
     * configured on the given pair.
     *
     * Note that by this point, 0x API should be sending the null address
     * as the `takerAddress` and the taker's address as the `txOrigin`.
     */
    async getV2PricesAsync(quoteContext, now = new Date()) {
        const { feeWithDetails: fee } = await this._feeService.calculateFeeAsync(quoteContext);
        return this._getV2PricesInternalAsync(quoteContext, fee, now);
    }
    /**
     * Accepts data sent by 0x API and fetches quotes from market makers
     * configured on the given pair.
     *
     * Preparing quotes is a two step process:
     *  1. Requests are made to the market makers' `/price` endpoint using
     *     logic similar to that of `getV2PricesAsync`
     *  2. Valid prices are then sent to the market makers' `/sign`
     *     endpoint to get a signed quote
     */
    async getV2QuotesAsync(quoteContext, now = new Date()) {
        var _a, _b;
        const { feeWithDetails: fee } = await this._feeService.calculateFeeAsync(quoteContext);
        const storedFee = (0, fee_utils_1.feeToStoredFee)(fee);
        // TODO (rhinodavid): put a meter on this response time
        const prices = await this._getV2PricesInternalAsync(quoteContext, fee, now);
        // If multiple quotes are aggregated into the final order, they must
        // all have unique nonces. Otherwise they'll be rejected by the smart contract.
        const baseNonce = new utils_1.BigNumber(Math.floor(now.getTime() / constants_1.ONE_SECOND_MS));
        const pricesAndOrders = prices.map((price, i) => ({
            order: this._v2priceToOrder(price, quoteContext.txOrigin, baseNonce.plus(i)),
            price,
        }));
        const pricesAndOrdersAndSignatures = await Promise.all(pricesAndOrders.map(async ({ price, order }) => {
            let signature;
            try {
                const orderHash = order.getHash();
                signature = await this._quoteServerClient.signV2Async(price.makerUri, quoteContext.integrator.integratorId, { order, orderHash, expiry: price.expiry, fee }, (u) => `${u}/rfqt/v2/sign`, 
                /* requireProceedWithFill */ false);
                if (signature) {
                    // Certain market makers are returning signature components which are missing
                    // leading bytes. Add them if they don't exist.
                    const paddedSignature = (0, signature_utils_1.padSignature)(signature);
                    if (paddedSignature.r !== signature.r || paddedSignature.s !== signature.s) {
                        logger_1.logger.warn({ orderHash, r: paddedSignature.r, s: paddedSignature.s }, 'Got market maker signature with missing bytes');
                        signature = paddedSignature;
                    }
                    // Verify the signer was the maker
                    const signerAddress = (0, signature_utils_1.getSignerFromHash)(orderHash, signature).toLowerCase();
                    const makerAddress = order.maker.toLowerCase();
                    if (signerAddress !== makerAddress) {
                        const isValidSigner = await this._blockchainUtils.isValidOrderSignerAsync(makerAddress, signerAddress);
                        if (!isValidSigner) {
                            logger_1.logger.warn({ signerAddress, makerAddress, orderHash, makerUri: price.makerUri }, 'Invalid maker signature');
                            // Quotes with `undefined` signature will be filtered out later
                            signature = undefined;
                        }
                    }
                }
            }
            catch (e) {
                logger_1.logger.warn({ orderHash: order.getHash(), makerId: price.makerId }, 'Failed trying to get rfqt signature from market maker');
            }
            return {
                price,
                order,
                signature: signature !== null && signature !== void 0 ? signature : null,
            };
        }));
        // (Maker Balance Cache) Fetch maker balances to calculate fillable amounts
        let quotedMakerBalances;
        const quotedERC20Owners = prices.map((price) => ({
            owner: price.makerAddress,
            token: price.makerToken,
        }));
        try {
            quotedMakerBalances = await this._rfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(this._chainId, quotedERC20Owners);
        }
        catch (e) {
            logger_1.logger.error({ chainId: this._chainId, quotedERC20Owners, errorMessage: e.message }, 'Failed to fetch maker balances to calculate fillable amounts');
        }
        const fillableAmounts = (0, RfqtQuoteValidator_1.getRfqtV2FillableAmounts)(prices, this._chainId, quotedMakerBalances);
        const quotes = pricesAndOrdersAndSignatures
            .filter((pos) => pos.signature)
            .map(({ price, order, signature }, i) => ({
            ...fillableAmounts[i],
            fillableTakerFeeAmount: new utils_1.BigNumber(0),
            makerId: price.makerId,
            makerUri: price.makerUri,
            order,
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            signature: signature, // `null` signatures already filtered out
        }));
        // Write to Fee Event Report
        if (this._kafkaProducer) {
            try {
                await quote_report_utils_1.quoteReportUtils.publishRfqtV2FeeEvent({
                    requestedBuyAmount: (_a = quoteContext.makerAmount) !== null && _a !== void 0 ? _a : null,
                    requestedSellAmount: (_b = quoteContext.takerAmount) !== null && _b !== void 0 ? _b : null,
                    requestedTakerAddress: quoteContext.takerAddress,
                    buyTokenAddress: quoteContext.makerToken,
                    sellTokenAddress: quoteContext.takerToken,
                    integratorId: quoteContext.integrator.integratorId,
                    quotes,
                    fee: storedFee,
                }, this._kafkaProducer, this._feeEventTopic);
            }
            catch (e) {
                logger_1.logger.error({
                    chainId: this._chainId,
                    requestedBuyAmount: quoteContext.makerAmount,
                    requestedSellAmount: quoteContext.takerAmount,
                    requestedTakerAddress: quoteContext.takerAddress,
                    buyTokenAddress: quoteContext.makerToken,
                    sellTokenAddress: quoteContext.takerToken,
                    integratorId: quoteContext.integrator.integratorId,
                    errorMessage: e.message,
                }, 'Failed to publish RFQt quote to Fee Event Report');
            }
        }
        return quotes;
    }
    get feeModelVersion() {
        return this._feeModelVersion;
    }
    /**
     * Passthrough to TokenMetadataManager's `getTokenDecimalsAsync` method
     */
    async getTokenDecimalsAsync(tokenAddress) {
        return this._tokenMetadataManager.getTokenDecimalsAsync(tokenAddress);
    }
    /**
     * Get prices from MMs for given quote context and fee.
     */
    async _getV2PricesInternalAsync(quoteContext, fee, now = new Date()) {
        const { integrator, makerToken, takerToken } = quoteContext;
        // Fetch the makers active on this pair
        const makers = this._rfqMakerManager.getRfqtV2MakersForPair(makerToken, takerToken).filter((m) => {
            if (m.rfqtUri === null) {
                return false;
            }
            if (integrator.whitelistMakerIds && !integrator.whitelistMakerIds.includes(m.makerId)) {
                return false;
            }
            return true;
        });
        // Short circuit if no makers are active
        if (!makers.length) {
            return [];
        }
        // TODO (haozhuo): check to see if MM passes circuit breaker
        const prices = (await this._quoteServerClient.batchGetPriceV2Async(
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        makers.map((m) => /* won't be null because of previous `filter` operation */ m.rfqtUri), integrator, transformRfqtV2PricesParameters(quoteContext, fee, this._chainId), (url) => `${url}/rfqt/v2/price`)).map((price) => {
            const maker = makers.find((m) => m.rfqtUri === price.makerUri);
            if (!maker) {
                throw new Error(`Could not find maker with URI ${price.makerUri}`);
            }
            return {
                expiry: price.expiry,
                makerAddress: price.maker,
                makerAmount: price.makerAmount,
                makerId: maker.makerId,
                makerToken: price.makerToken,
                makerUri: price.makerUri,
                takerAmount: price.takerAmount,
                takerToken: price.takerToken,
            };
        });
        // Filter out invalid prices
        const validatedPrices = (0, RfqtQuoteValidator_1.validateV2Prices)(prices, quoteContext, this._minExpiryDurationMs, now);
        return validatedPrices;
    }
    /**
     * Converts a price returned from the market maker's `price` endpoint
     * into an v2 order
     */
    _v2priceToOrder(price, txOrigin, nonce, nonceBucket = new utils_1.BigNumber(0)) {
        return new orders_1.OtcOrder({
            chainId: this._chainId,
            expiryAndNonce: orders_1.OtcOrder.encodeExpiryAndNonce(price.expiry, nonceBucket, nonce),
            maker: price.makerAddress,
            makerAmount: price.makerAmount,
            makerToken: price.makerToken,
            taker: constants_1.NULL_ADDRESS,
            takerAmount: price.takerAmount,
            takerToken: price.takerToken,
            txOrigin,
            verifyingContract: this._contractAddresses.exchangeProxy,
        });
    }
}
exports.RfqtService = RfqtService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,