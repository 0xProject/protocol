{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/meta_transaction_fee_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/meta_transaction_fee_test.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\r\nimport { rawFeesToFees } from '../../src/core/meta_transaction_fee_utils';\r\n\r\nconst FEE_TOKEN = '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174';\r\nconst FEE_RECIPIENT = '0x5fb652150AcE5303c82f0d1D491041e042f2ad22';\r\n\r\ndescribe('meta_transaction_fee_utils', () => {\r\n    describe('rawFeesToFees', () => {\r\n        it('returns undefined if `rawFees` is undefined', () => {\r\n            expect(rawFeesToFees(undefined)).toBeUndefined();\r\n        });\r\n\r\n        describe('integrator fee', () => {\r\n            it('returns integrator fee as undefined if integrator fee is not provided', () => {\r\n                const fees = rawFeesToFees({\r\n                    zeroExFee: {\r\n                        type: 'integrator_share',\r\n                        feeToken: FEE_TOKEN,\r\n                        feeAmount: '1000',\r\n                        feeRecipient: FEE_RECIPIENT,\r\n                        integratorSharePercentage: '10',\r\n                    },\r\n                });\r\n                expect(fees).toBeTruthy();\r\n                expect(fees?.integratorFee).toBeUndefined();\r\n            });\r\n\r\n            it('returns the correct integrator fee if integrator fee is provided', () => {\r\n                const fees = rawFeesToFees({\r\n                    integratorFee: {\r\n                        type: 'volume',\r\n                        feeToken: FEE_TOKEN,\r\n                        feeAmount: '1000',\r\n                        feeRecipient: FEE_RECIPIENT,\r\n                        volumePercentage: '10',\r\n                    },\r\n                    zeroExFee: {\r\n                        type: 'integrator_share',\r\n                        feeToken: FEE_TOKEN,\r\n                        feeAmount: '100000',\r\n                        feeRecipient: FEE_RECIPIENT,\r\n                        integratorSharePercentage: '1',\r\n                    },\r\n                });\r\n                expect(fees).toBeTruthy();\r\n                expect(fees?.integratorFee).toEqual({\r\n                    type: 'volume',\r\n                    feeToken: FEE_TOKEN,\r\n                    feeAmount: new BigNumber(1000),\r\n                    feeRecipient: FEE_RECIPIENT,\r\n                    volumePercentage: new BigNumber(10),\r\n                });\r\n            });\r\n        });\r\n\r\n        describe('0x fee', () => {\r\n            it('returns 0x fee as undefined if 0x fee is not provided', () => {\r\n                const fees = rawFeesToFees({\r\n                    integratorFee: {\r\n                        type: 'volume',\r\n                        feeToken: FEE_TOKEN,\r\n                        feeAmount: '1000',\r\n                        feeRecipient: FEE_RECIPIENT,\r\n                        volumePercentage: '10',\r\n                    },\r\n                });\r\n                expect(fees).toBeTruthy();\r\n                expect(fees?.zeroExFee).toBeUndefined();\r\n            });\r\n\r\n            it('returns the correct 0x fee volume fee if 0x fee is provided', () => {\r\n                const fees = rawFeesToFees({\r\n                    integratorFee: {\r\n                        type: 'volume',\r\n                        feeToken: FEE_TOKEN,\r\n                        feeAmount: '1000',\r\n                        feeRecipient: FEE_RECIPIENT,\r\n                        volumePercentage: '10',\r\n                    },\r\n                    zeroExFee: {\r\n                        type: 'volume',\r\n                        feeToken: FEE_TOKEN,\r\n                        feeAmount: '100000',\r\n                        feeRecipient: null,\r\n                        volumePercentage: '1',\r\n                    },\r\n                });\r\n                expect(fees).toBeTruthy();\r\n                expect(fees?.zeroExFee).toEqual({\r\n                    type: 'volume',\r\n                    feeToken: FEE_TOKEN,\r\n                    feeAmount: new BigNumber(100000),\r\n                    feeRecipient: null,\r\n                    volumePercentage: new BigNumber(1),\r\n                });\r\n            });\r\n\r\n            it('returns the correct 0x fee integrator share fee if 0x fee is provided', () => {\r\n                const fees = rawFeesToFees({\r\n                    integratorFee: {\r\n                        type: 'volume',\r\n                        feeToken: FEE_TOKEN,\r\n                        feeAmount: '1000',\r\n                        feeRecipient: FEE_RECIPIENT,\r\n                        volumePercentage: '10',\r\n                    },\r\n                    zeroExFee: {\r\n                        type: 'integrator_share',\r\n                        feeToken: FEE_TOKEN,\r\n                        feeAmount: '100000',\r\n                        feeRecipient: FEE_RECIPIENT,\r\n                        integratorSharePercentage: '1',\r\n                    },\r\n                });\r\n                expect(fees).toBeTruthy();\r\n                expect(fees?.zeroExFee).toEqual({\r\n                    type: 'integrator_share',\r\n                    feeToken: FEE_TOKEN,\r\n                    feeAmount: new BigNumber(100000),\r\n                    feeRecipient: FEE_RECIPIENT,\r\n                    integratorSharePercentage: new BigNumber(1),\r\n                });\r\n            });\r\n        });\r\n\r\n        describe('gas fee', () => {\r\n            it('returns gas fee as undefined if gas fee is not provided', () => {\r\n                const fees = rawFeesToFees({\r\n                    zeroExFee: {\r\n                        type: 'integrator_share',\r\n                        feeToken: FEE_TOKEN,\r\n                        feeAmount: '1000',\r\n                        feeRecipient: FEE_RECIPIENT,\r\n                        integratorSharePercentage: '10',\r\n                    },\r\n                });\r\n                expect(fees).toBeTruthy();\r\n                expect(fees?.gasFee).toBeUndefined();\r\n            });\r\n\r\n            it('returns the correct gas fee if gas is provided', () => {\r\n                const fees = rawFeesToFees({\r\n                    integratorFee: {\r\n                        type: 'volume',\r\n                        feeToken: FEE_TOKEN,\r\n                        feeAmount: '1000',\r\n                        feeRecipient: FEE_RECIPIENT,\r\n                        volumePercentage: '10',\r\n                    },\r\n                    zeroExFee: {\r\n                        type: 'integrator_share',\r\n                        feeToken: FEE_TOKEN,\r\n                        feeAmount: '100000',\r\n                        feeRecipient: FEE_RECIPIENT,\r\n                        integratorSharePercentage: '1',\r\n                    },\r\n                    gasFee: {\r\n                        type: 'gas',\r\n                        feeToken: FEE_TOKEN,\r\n                        feeAmount: '10',\r\n                        feeRecipient: FEE_RECIPIENT,\r\n                        gasPrice: '123',\r\n                        estimatedGas: '200000',\r\n                        feeTokenAmountPerBaseUnitNativeToken: '0.0001',\r\n                    },\r\n                });\r\n                expect(fees).toBeTruthy();\r\n                expect(fees?.gasFee).toEqual({\r\n                    type: 'gas',\r\n                    feeToken: FEE_TOKEN,\r\n                    feeAmount: new BigNumber(10),\r\n                    feeRecipient: FEE_RECIPIENT,\r\n                    gasPrice: new BigNumber(123),\r\n                    estimatedGas: new BigNumber(200000),\r\n                    feeTokenAmountPerBaseUnitNativeToken: new BigNumber(0.0001),\r\n                });\r\n            });\r\n        });\r\n    });\r\n});\r\n"],"version":3}