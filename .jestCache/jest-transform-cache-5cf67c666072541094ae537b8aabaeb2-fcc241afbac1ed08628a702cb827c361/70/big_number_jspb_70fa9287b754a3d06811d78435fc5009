bb06e4934887f7ab892bab52aa18ac6e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigNumberJsJSON = exports.BigNumberJs = void 0;
const protoscript_1 = require("protoscript");
//========================================//
//        Protobuf Encode / Decode        //
//========================================//
exports.BigNumberJs = {
    /**
     * Serializes BigNumberJs to protobuf.
     */
    encode: function (msg) {
        return exports.BigNumberJs._writeMessage(msg, new protoscript_1.BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes BigNumberJs from protobuf.
     */
    decode: function (bytes) {
        return exports.BigNumberJs._readMessage(exports.BigNumberJs.initialize(), new protoscript_1.BinaryReader(bytes));
    },
    /**
     * Initializes BigNumberJs with all fields set to their default value.
     */
    initialize: function () {
        return {
            c: [],
            e: undefined,
            s: undefined,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        var _a;
        if ((_a = msg.c) === null || _a === void 0 ? void 0 : _a.length) {
            writer.writePackedInt64String(1, msg.c.map((x) => x.toString()));
        }
        if (msg.e != undefined) {
            writer.writeSint32(2, msg.e);
        }
        if (msg.s != undefined) {
            writer.writeBool(3, msg.s);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    if (reader.isDelimited()) {
                        msg.c.push(...reader.readPackedInt64String().map(BigInt));
                    }
                    else {
                        msg.c.push(BigInt(reader.readInt64String()));
                    }
                    break;
                }
                case 2: {
                    msg.e = reader.readSint32();
                    break;
                }
                case 3: {
                    msg.s = reader.readBool();
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
//========================================//
//          JSON Encode / Decode          //
//========================================//
exports.BigNumberJsJSON = {
    /**
     * Serializes BigNumberJs to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(exports.BigNumberJsJSON._writeMessage(msg));
    },
    /**
     * Deserializes BigNumberJs from JSON.
     */
    decode: function (json) {
        return exports.BigNumberJsJSON._readMessage(exports.BigNumberJsJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes BigNumberJs with all fields set to their default value.
     */
    initialize: function () {
        return {
            c: [],
            e: undefined,
            s: undefined,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        var _a;
        const json = {};
        if ((_a = msg.c) === null || _a === void 0 ? void 0 : _a.length) {
            json["c"] = msg.c.map((x) => x.toString());
        }
        if (msg.e != undefined) {
            json["e"] = msg.e;
        }
        if (msg.s != undefined) {
            json["s"] = msg.s;
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        const _c = json["c"];
        if (_c) {
            msg.c = _c.map(BigInt);
        }
        const _e = json["e"];
        if (_e) {
            msg.e = _e;
        }
        const _s = json["s"];
        if (_s) {
            msg.s = _s;
        }
        return msg;
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,