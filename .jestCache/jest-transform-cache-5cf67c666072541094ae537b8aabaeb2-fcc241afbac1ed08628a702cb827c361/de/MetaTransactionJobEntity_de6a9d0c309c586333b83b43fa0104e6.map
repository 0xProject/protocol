{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/entities/MetaTransactionJobEntity.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/entities/MetaTransactionJobEntity.ts"],"sourcesContent":["import { MetaTransaction, Signature } from '@0x/protocol-utils';\r\nimport { BigNumber } from '@0x/utils';\r\nimport { Column, Entity, Index, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\r\n\r\nimport { Approval, Fee } from '../core/types';\r\n\r\nimport { BigNumberTransformer, FeeTransformer, MetaTransactionTransformer } from './transformers';\r\nimport { RfqmJobStatus } from './types';\r\n\r\nexport type MetaTransactionJobConstructorOpts = Pick<\r\n    MetaTransactionJobEntity,\r\n    | 'chainId'\r\n    | 'expiry'\r\n    | 'fee'\r\n    | 'inputToken'\r\n    | 'inputTokenAmount'\r\n    | 'integratorId'\r\n    | 'metaTransaction'\r\n    | 'metaTransactionHash'\r\n    | 'minOutputTokenAmount'\r\n    | 'outputToken'\r\n    | 'takerAddress'\r\n    | 'takerSignature'\r\n> &\r\n    Partial<MetaTransactionJobEntity>;\r\n\r\n@Entity({ name: 'meta_transaction_jobs' })\r\nexport class MetaTransactionJobEntity {\r\n    // Differentiator for different flavors of RFQM jobs\r\n    public kind: 'meta_transaction_job';\r\n\r\n    // UUID and would be generated automatically during insertion\r\n    @PrimaryGeneratedColumn('uuid')\r\n    public id!: string;\r\n\r\n    @Index()\r\n    @Column({ name: 'meta_transaction_hash', type: 'varchar', unique: true })\r\n    public metaTransactionHash: string;\r\n\r\n    @Index()\r\n    @Column({ name: 'created_at', type: 'timestamptz', default: () => 'now()' })\r\n    public createdAt!: Date;\r\n\r\n    @UpdateDateColumn({ name: 'updated_at', type: 'timestamptz', nullable: true })\r\n    public updatedAt: Date | null;\r\n\r\n    // The expiration time of the job, in unix seconds\r\n    @Column({ name: 'expiry', type: 'numeric', transformer: BigNumberTransformer })\r\n    public expiry: BigNumber;\r\n\r\n    @Column({ name: 'chain_id', type: 'integer' })\r\n    public chainId: number;\r\n\r\n    @Column({ name: 'integrator_id', type: 'varchar' })\r\n    public integratorId: string;\r\n\r\n    @Index()\r\n    @Column({ name: 'status', type: 'varchar' })\r\n    public status: RfqmJobStatus;\r\n\r\n    @Column({ name: 'fee', type: 'jsonb', transformer: FeeTransformer })\r\n    public fee: Fee;\r\n\r\n    @Column({ name: 'meta_transaction', type: 'jsonb', transformer: MetaTransactionTransformer })\r\n    public metaTransaction: MetaTransaction;\r\n\r\n    @Index()\r\n    @Column({ name: 'worker_address', type: 'varchar', nullable: true })\r\n    public workerAddress: string | null;\r\n\r\n    @Column({ name: 'affiliate_address', type: 'varchar', nullable: true })\r\n    public affiliateAddress: string | null;\r\n\r\n    @Index()\r\n    @Column({ name: 'taker_address', type: 'varchar' })\r\n    public takerAddress: string;\r\n\r\n    // The taker's signature of the metaTransaction hash.\r\n    @Column({ name: 'taker_signature', type: 'jsonb' })\r\n    public takerSignature: Signature;\r\n\r\n    // The optional approval object that contains the EIP-712 context (which includes\r\n    // the message that the taker will sign). This is stored to help us prepare the\r\n    // calldata for gasless approvals\r\n    @Column({ name: 'approval', type: 'jsonb', nullable: true })\r\n    public approval: Approval | null;\r\n\r\n    // The signature for the approval.\r\n    @Column({ name: 'approval_signature', type: 'jsonb', nullable: true })\r\n    public approvalSignature: Signature | null;\r\n\r\n    @Column({ name: 'input_token', type: 'varchar' })\r\n    public inputToken: string;\r\n\r\n    @Column({ name: 'output_token', type: 'varchar' })\r\n    public outputToken: string;\r\n\r\n    @Column({ name: 'input_token_amount', type: 'numeric', transformer: BigNumberTransformer })\r\n    public inputTokenAmount: BigNumber;\r\n\r\n    @Column({ name: 'min_output_token_amount', type: 'numeric', transformer: BigNumberTransformer })\r\n    public minOutputTokenAmount: BigNumber;\r\n\r\n    @Column({ name: 'settled_output_token_amount', type: 'numeric', transformer: BigNumberTransformer, nullable: true })\r\n    public settledOutputTokenAmount: BigNumber | null;\r\n\r\n    /**\r\n     * Used to get the 'canonical' hash of the job. This is useful\r\n     * because it can also be called on an rfqm job and\r\n     * that will return the order hash.\r\n     */\r\n    public getHash(): string {\r\n        return this.metaTransactionHash;\r\n    }\r\n\r\n    // TypeORM runs a validation check where it calls this initializer with no argument.\r\n    // With no default `opts`, `opts` will be undefined and the validation will throw,\r\n    // therefore, add this hacky default.\r\n    // tslint:disable-next-line no-object-literal-type-assertion\r\n    constructor(opts: MetaTransactionJobConstructorOpts = {} as MetaTransactionJobConstructorOpts) {\r\n        this.kind = 'meta_transaction_job';\r\n\r\n        // allow createdAt overrides for testing\r\n        if (opts.createdAt) {\r\n            this.createdAt = opts.createdAt;\r\n        }\r\n\r\n        this.affiliateAddress = opts.affiliateAddress ?? null;\r\n        this.approval = opts.approval ?? null;\r\n        this.approvalSignature = opts.approvalSignature ?? null;\r\n        this.chainId = opts.chainId;\r\n        this.expiry = opts.expiry;\r\n        this.fee = opts.fee;\r\n        this.inputToken = opts.inputToken;\r\n        this.inputTokenAmount = opts.inputTokenAmount;\r\n        this.integratorId = opts.integratorId;\r\n        this.metaTransaction = opts.metaTransaction;\r\n        this.metaTransactionHash = opts.metaTransactionHash;\r\n        this.minOutputTokenAmount = opts.minOutputTokenAmount;\r\n        this.outputToken = opts.outputToken;\r\n        this.settledOutputTokenAmount = opts.settledOutputTokenAmount ?? null;\r\n        this.status = opts.status ?? RfqmJobStatus.PendingEnqueued;\r\n        this.takerAddress = opts.takerAddress;\r\n        this.takerSignature = opts.takerSignature;\r\n        this.updatedAt = opts.updatedAt ?? null;\r\n        this.workerAddress = opts.workerAddress ?? null;\r\n    }\r\n}\r\n"],"version":3}