7ae4e60754f27ac22cc1fcb4ac67b451
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetaTransactionJobEntity = void 0;
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const typeorm_1 = require("typeorm");
const transformers_1 = require("./transformers");
const types_1 = require("./types");
let MetaTransactionJobEntity = class MetaTransactionJobEntity {
    // TypeORM runs a validation check where it calls this initializer with no argument.
    // With no default `opts`, `opts` will be undefined and the validation will throw,
    // therefore, add this hacky default.
    // tslint:disable-next-line no-object-literal-type-assertion
    constructor(opts = {}) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.kind = 'meta_transaction_job';
        // allow createdAt overrides for testing
        if (opts.createdAt) {
            this.createdAt = opts.createdAt;
        }
        this.affiliateAddress = (_a = opts.affiliateAddress) !== null && _a !== void 0 ? _a : null;
        this.approval = (_b = opts.approval) !== null && _b !== void 0 ? _b : null;
        this.approvalSignature = (_c = opts.approvalSignature) !== null && _c !== void 0 ? _c : null;
        this.chainId = opts.chainId;
        this.expiry = opts.expiry;
        this.fee = opts.fee;
        this.inputToken = opts.inputToken;
        this.inputTokenAmount = opts.inputTokenAmount;
        this.integratorId = opts.integratorId;
        this.metaTransaction = opts.metaTransaction;
        this.metaTransactionHash = opts.metaTransactionHash;
        this.minOutputTokenAmount = opts.minOutputTokenAmount;
        this.outputToken = opts.outputToken;
        this.settledOutputTokenAmount = (_d = opts.settledOutputTokenAmount) !== null && _d !== void 0 ? _d : null;
        this.status = (_e = opts.status) !== null && _e !== void 0 ? _e : types_1.RfqmJobStatus.PendingEnqueued;
        this.takerAddress = opts.takerAddress;
        this.takerSignature = opts.takerSignature;
        this.updatedAt = (_f = opts.updatedAt) !== null && _f !== void 0 ? _f : null;
        this.workerAddress = (_g = opts.workerAddress) !== null && _g !== void 0 ? _g : null;
    }
    /**
     * Used to get the 'canonical' hash of the job. This is useful
     * because it can also be called on an rfqm job and
     * that will return the order hash.
     */
    getHash() {
        return this.metaTransactionHash;
    }
};
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], MetaTransactionJobEntity.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Index)(),
    (0, typeorm_1.Column)({ name: 'meta_transaction_hash', type: 'varchar', unique: true }),
    __metadata("design:type", String)
], MetaTransactionJobEntity.prototype, "metaTransactionHash", void 0);
__decorate([
    (0, typeorm_1.Index)(),
    (0, typeorm_1.Column)({ name: 'created_at', type: 'timestamptz', default: () => 'now()' }),
    __metadata("design:type", Date)
], MetaTransactionJobEntity.prototype, "createdAt", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at', type: 'timestamptz', nullable: true }),
    __metadata("design:type", Object)
], MetaTransactionJobEntity.prototype, "updatedAt", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'expiry', type: 'numeric', transformer: transformers_1.BigNumberTransformer }),
    __metadata("design:type", utils_1.BigNumber)
], MetaTransactionJobEntity.prototype, "expiry", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'chain_id', type: 'integer' }),
    __metadata("design:type", Number)
], MetaTransactionJobEntity.prototype, "chainId", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'integrator_id', type: 'varchar' }),
    __metadata("design:type", String)
], MetaTransactionJobEntity.prototype, "integratorId", void 0);
__decorate([
    (0, typeorm_1.Index)(),
    (0, typeorm_1.Column)({ name: 'status', type: 'varchar' }),
    __metadata("design:type", String)
], MetaTransactionJobEntity.prototype, "status", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'fee', type: 'jsonb', transformer: transformers_1.FeeTransformer }),
    __metadata("design:type", Object)
], MetaTransactionJobEntity.prototype, "fee", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'meta_transaction', type: 'jsonb', transformer: transformers_1.MetaTransactionTransformer }),
    __metadata("design:type", protocol_utils_1.MetaTransaction)
], MetaTransactionJobEntity.prototype, "metaTransaction", void 0);
__decorate([
    (0, typeorm_1.Index)(),
    (0, typeorm_1.Column)({ name: 'worker_address', type: 'varchar', nullable: true }),
    __metadata("design:type", Object)
], MetaTransactionJobEntity.prototype, "workerAddress", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'affiliate_address', type: 'varchar', nullable: true }),
    __metadata("design:type", Object)
], MetaTransactionJobEntity.prototype, "affiliateAddress", void 0);
__decorate([
    (0, typeorm_1.Index)(),
    (0, typeorm_1.Column)({ name: 'taker_address', type: 'varchar' }),
    __metadata("design:type", String)
], MetaTransactionJobEntity.prototype, "takerAddress", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'taker_signature', type: 'jsonb' }),
    __metadata("design:type", Object)
], MetaTransactionJobEntity.prototype, "takerSignature", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'approval', type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], MetaTransactionJobEntity.prototype, "approval", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'approval_signature', type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], MetaTransactionJobEntity.prototype, "approvalSignature", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'input_token', type: 'varchar' }),
    __metadata("design:type", String)
], MetaTransactionJobEntity.prototype, "inputToken", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'output_token', type: 'varchar' }),
    __metadata("design:type", String)
], MetaTransactionJobEntity.prototype, "outputToken", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'input_token_amount', type: 'numeric', transformer: transformers_1.BigNumberTransformer }),
    __metadata("design:type", utils_1.BigNumber)
], MetaTransactionJobEntity.prototype, "inputTokenAmount", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'min_output_token_amount', type: 'numeric', transformer: transformers_1.BigNumberTransformer }),
    __metadata("design:type", utils_1.BigNumber)
], MetaTransactionJobEntity.prototype, "minOutputTokenAmount", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'settled_output_token_amount', type: 'numeric', transformer: transformers_1.BigNumberTransformer, nullable: true }),
    __metadata("design:type", Object)
], MetaTransactionJobEntity.prototype, "settledOutputTokenAmount", void 0);
MetaTransactionJobEntity = __decorate([
    (0, typeorm_1.Entity)({ name: 'meta_transaction_jobs' }),
    __metadata("design:paramtypes", [Object])
], MetaTransactionJobEntity);
exports.MetaTransactionJobEntity = MetaTransactionJobEntity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,