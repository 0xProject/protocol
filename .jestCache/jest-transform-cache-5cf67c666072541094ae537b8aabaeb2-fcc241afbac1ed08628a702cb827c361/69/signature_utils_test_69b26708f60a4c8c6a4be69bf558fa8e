f7c02589ea5b8b3b9239e3c6956cbc34
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:custom-no-magic-numbers
// tslint:disable:max-file-line-count
const protocol_utils_1 = require("@0x/protocol-utils");
const chai_1 = require("chai");
const signature_utils_1 = require("../../src/utils/signature_utils");
const address = '0xdA9AC423442169588DE6b4305f4E820D708d0cE5';
const privateKey = '0x653fa328df81be180b58e42737bc4cef037a19a3b9673b15d20ee2eebb2e509d';
describe('Signature utils', () => {
    describe('getSignerFromHash', () => {
        it('should recover an address for an EthSign Signature', () => {
            // Given
            const otcOrder = new protocol_utils_1.OtcOrder();
            const orderHash = otcOrder.getHash();
            const signature = (0, protocol_utils_1.ethSignHashWithKey)(orderHash, privateKey);
            // When
            const signer = (0, signature_utils_1.getSignerFromHash)(orderHash, signature);
            // Then
            (0, chai_1.expect)(signer).to.equal(address.toLowerCase());
        });
        it('should recover an address for an EIP712 Signature', () => {
            // Given
            const otcOrder = new protocol_utils_1.OtcOrder();
            const orderHash = otcOrder.getHash();
            const signature = (0, protocol_utils_1.eip712SignTypedDataWithKey)(otcOrder.getEIP712TypedData(), privateKey);
            // When
            const signer = (0, signature_utils_1.getSignerFromHash)(orderHash, signature);
            // Then
            (0, chai_1.expect)(signer).to.equal(address.toLowerCase());
        });
        it('should not recover an address when signature is for something else', () => {
            // Given
            const limitOrder = new protocol_utils_1.LimitOrder();
            const limitOrderHash = limitOrder.getHash();
            const signatureForLimitOrder = (0, protocol_utils_1.ethSignHashWithKey)(limitOrderHash, privateKey);
            const otcOrder = new protocol_utils_1.OtcOrder();
            const otcOrderHash = otcOrder.getHash();
            // When
            const signer = (0, signature_utils_1.getSignerFromHash)(otcOrderHash, signatureForLimitOrder);
            // Then
            (0, chai_1.expect)(signer.toLowerCase()).to.not.eq(address.toLowerCase());
        });
    });
    describe('padSignature', () => {
        it("doesn't modify valid signatures", () => {
            const validSignature = {
                r: '0x9168c21566a9846ad80ef8c27a199d4855a5245dfee5e9453300e6dd5d659ca6',
                s: '0x0c74487fba706194d030cce9c8b5d712e698326731f4e6d603251b7a1eeca084',
                v: 28,
                signatureType: 3,
            };
            const result = (0, signature_utils_1.padSignature)(validSignature);
            (0, chai_1.expect)(validSignature).to.deep.equal(result);
        });
        it('pads a signature missing bytes', () => {
            const signature = {
                r: '0x59ca6',
                s: '0Xeca084',
                v: 28,
                signatureType: 3,
            };
            const result = (0, signature_utils_1.padSignature)(signature);
            (0, chai_1.expect)(result).to.deep.equal({
                r: '0x0000000000000000000000000000000000000000000000000000000000059ca6',
                s: '0x0000000000000000000000000000000000000000000000000000000000eca084',
                v: 28,
                signatureType: 3,
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvc2lnbmF0dXJlX3V0aWxzX3Rlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBeUM7QUFDekMscUNBQXFDO0FBRXJDLHVEQUEwRztBQUMxRywrQkFBOEI7QUFFOUIscUVBQWtGO0FBRWxGLE1BQU0sT0FBTyxHQUFHLDRDQUE0QyxDQUFDO0FBQzdELE1BQU0sVUFBVSxHQUFHLG9FQUFvRSxDQUFDO0FBRXhGLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDN0IsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUMvQixFQUFFLENBQUMsb0RBQW9ELEVBQUUsR0FBRyxFQUFFO1lBQzFELFFBQVE7WUFDUixNQUFNLFFBQVEsR0FBRyxJQUFJLHlCQUFRLEVBQUUsQ0FBQztZQUNoQyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDckMsTUFBTSxTQUFTLEdBQUcsSUFBQSxtQ0FBa0IsRUFBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFFNUQsT0FBTztZQUNQLE1BQU0sTUFBTSxHQUFHLElBQUEsbUNBQWlCLEVBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBRXZELE9BQU87WUFDUCxJQUFBLGFBQU0sRUFBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLEdBQUcsRUFBRTtZQUN6RCxRQUFRO1lBQ1IsTUFBTSxRQUFRLEdBQUcsSUFBSSx5QkFBUSxFQUFFLENBQUM7WUFDaEMsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3JDLE1BQU0sU0FBUyxHQUFHLElBQUEsMkNBQTBCLEVBQUMsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFFeEYsT0FBTztZQUNQLE1BQU0sTUFBTSxHQUFHLElBQUEsbUNBQWlCLEVBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBRXZELE9BQU87WUFDUCxJQUFBLGFBQU0sRUFBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG9FQUFvRSxFQUFFLEdBQUcsRUFBRTtZQUMxRSxRQUFRO1lBQ1IsTUFBTSxVQUFVLEdBQUcsSUFBSSwyQkFBVSxFQUFFLENBQUM7WUFDcEMsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzVDLE1BQU0sc0JBQXNCLEdBQUcsSUFBQSxtQ0FBa0IsRUFBQyxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFFOUUsTUFBTSxRQUFRLEdBQUcsSUFBSSx5QkFBUSxFQUFFLENBQUM7WUFDaEMsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRXhDLE9BQU87WUFDUCxNQUFNLE1BQU0sR0FBRyxJQUFBLG1DQUFpQixFQUFDLFlBQVksRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1lBRXZFLE9BQU87WUFDUCxJQUFBLGFBQU0sRUFBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7UUFDMUIsRUFBRSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtZQUN2QyxNQUFNLGNBQWMsR0FBRztnQkFDbkIsQ0FBQyxFQUFFLG9FQUFvRTtnQkFDdkUsQ0FBQyxFQUFFLG9FQUFvRTtnQkFDdkUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ0wsYUFBYSxFQUFFLENBQUM7YUFDbkIsQ0FBQztZQUVGLE1BQU0sTUFBTSxHQUFHLElBQUEsOEJBQVksRUFBQyxjQUFjLENBQUMsQ0FBQztZQUU1QyxJQUFBLGFBQU0sRUFBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7WUFDdEMsTUFBTSxTQUFTLEdBQUc7Z0JBQ2QsQ0FBQyxFQUFFLFNBQVM7Z0JBQ1osQ0FBQyxFQUFFLFVBQVU7Z0JBQ2IsQ0FBQyxFQUFFLEVBQUU7Z0JBQ0wsYUFBYSxFQUFFLENBQUM7YUFDbkIsQ0FBQztZQUVGLE1BQU0sTUFBTSxHQUFHLElBQUEsOEJBQVksRUFBQyxTQUFTLENBQUMsQ0FBQztZQUV2QyxJQUFBLGFBQU0sRUFBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDekIsQ0FBQyxFQUFFLG9FQUFvRTtnQkFDdkUsQ0FBQyxFQUFFLG9FQUFvRTtnQkFDdkUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ0wsYUFBYSxFQUFFLENBQUM7YUFDbkIsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZHdhbHNoL2NvZGUtbG9jYWwvMHgtcmZxLWFwaS90ZXN0L3V0aWxzL3NpZ25hdHVyZV91dGlsc190ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOmN1c3RvbS1uby1tYWdpYy1udW1iZXJzXG4vLyB0c2xpbnQ6ZGlzYWJsZTptYXgtZmlsZS1saW5lLWNvdW50XG5cbmltcG9ydCB7IGVpcDcxMlNpZ25UeXBlZERhdGFXaXRoS2V5LCBldGhTaWduSGFzaFdpdGhLZXksIExpbWl0T3JkZXIsIE90Y09yZGVyIH0gZnJvbSAnQDB4L3Byb3RvY29sLXV0aWxzJztcbmltcG9ydCB7IGV4cGVjdCB9IGZyb20gJ2NoYWknO1xuXG5pbXBvcnQgeyBnZXRTaWduZXJGcm9tSGFzaCwgcGFkU2lnbmF0dXJlIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL3NpZ25hdHVyZV91dGlscyc7XG5cbmNvbnN0IGFkZHJlc3MgPSAnMHhkQTlBQzQyMzQ0MjE2OTU4OERFNmI0MzA1ZjRFODIwRDcwOGQwY0U1JztcbmNvbnN0IHByaXZhdGVLZXkgPSAnMHg2NTNmYTMyOGRmODFiZTE4MGI1OGU0MjczN2JjNGNlZjAzN2ExOWEzYjk2NzNiMTVkMjBlZTJlZWJiMmU1MDlkJztcblxuZGVzY3JpYmUoJ1NpZ25hdHVyZSB1dGlscycsICgpID0+IHtcbiAgICBkZXNjcmliZSgnZ2V0U2lnbmVyRnJvbUhhc2gnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdzaG91bGQgcmVjb3ZlciBhbiBhZGRyZXNzIGZvciBhbiBFdGhTaWduIFNpZ25hdHVyZScsICgpID0+IHtcbiAgICAgICAgICAgIC8vIEdpdmVuXG4gICAgICAgICAgICBjb25zdCBvdGNPcmRlciA9IG5ldyBPdGNPcmRlcigpO1xuICAgICAgICAgICAgY29uc3Qgb3JkZXJIYXNoID0gb3RjT3JkZXIuZ2V0SGFzaCgpO1xuICAgICAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gZXRoU2lnbkhhc2hXaXRoS2V5KG9yZGVySGFzaCwgcHJpdmF0ZUtleSk7XG5cbiAgICAgICAgICAgIC8vIFdoZW5cbiAgICAgICAgICAgIGNvbnN0IHNpZ25lciA9IGdldFNpZ25lckZyb21IYXNoKG9yZGVySGFzaCwgc2lnbmF0dXJlKTtcblxuICAgICAgICAgICAgLy8gVGhlblxuICAgICAgICAgICAgZXhwZWN0KHNpZ25lcikudG8uZXF1YWwoYWRkcmVzcy50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCByZWNvdmVyIGFuIGFkZHJlc3MgZm9yIGFuIEVJUDcxMiBTaWduYXR1cmUnLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBHaXZlblxuICAgICAgICAgICAgY29uc3Qgb3RjT3JkZXIgPSBuZXcgT3RjT3JkZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IG9yZGVySGFzaCA9IG90Y09yZGVyLmdldEhhc2goKTtcbiAgICAgICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGVpcDcxMlNpZ25UeXBlZERhdGFXaXRoS2V5KG90Y09yZGVyLmdldEVJUDcxMlR5cGVkRGF0YSgpLCBwcml2YXRlS2V5KTtcblxuICAgICAgICAgICAgLy8gV2hlblxuICAgICAgICAgICAgY29uc3Qgc2lnbmVyID0gZ2V0U2lnbmVyRnJvbUhhc2gob3JkZXJIYXNoLCBzaWduYXR1cmUpO1xuXG4gICAgICAgICAgICAvLyBUaGVuXG4gICAgICAgICAgICBleHBlY3Qoc2lnbmVyKS50by5lcXVhbChhZGRyZXNzLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIG5vdCByZWNvdmVyIGFuIGFkZHJlc3Mgd2hlbiBzaWduYXR1cmUgaXMgZm9yIHNvbWV0aGluZyBlbHNlJywgKCkgPT4ge1xuICAgICAgICAgICAgLy8gR2l2ZW5cbiAgICAgICAgICAgIGNvbnN0IGxpbWl0T3JkZXIgPSBuZXcgTGltaXRPcmRlcigpO1xuICAgICAgICAgICAgY29uc3QgbGltaXRPcmRlckhhc2ggPSBsaW1pdE9yZGVyLmdldEhhc2goKTtcbiAgICAgICAgICAgIGNvbnN0IHNpZ25hdHVyZUZvckxpbWl0T3JkZXIgPSBldGhTaWduSGFzaFdpdGhLZXkobGltaXRPcmRlckhhc2gsIHByaXZhdGVLZXkpO1xuXG4gICAgICAgICAgICBjb25zdCBvdGNPcmRlciA9IG5ldyBPdGNPcmRlcigpO1xuICAgICAgICAgICAgY29uc3Qgb3RjT3JkZXJIYXNoID0gb3RjT3JkZXIuZ2V0SGFzaCgpO1xuXG4gICAgICAgICAgICAvLyBXaGVuXG4gICAgICAgICAgICBjb25zdCBzaWduZXIgPSBnZXRTaWduZXJGcm9tSGFzaChvdGNPcmRlckhhc2gsIHNpZ25hdHVyZUZvckxpbWl0T3JkZXIpO1xuXG4gICAgICAgICAgICAvLyBUaGVuXG4gICAgICAgICAgICBleHBlY3Qoc2lnbmVyLnRvTG93ZXJDYXNlKCkpLnRvLm5vdC5lcShhZGRyZXNzLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgncGFkU2lnbmF0dXJlJywgKCkgPT4ge1xuICAgICAgICBpdChcImRvZXNuJ3QgbW9kaWZ5IHZhbGlkIHNpZ25hdHVyZXNcIiwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsaWRTaWduYXR1cmUgPSB7XG4gICAgICAgICAgICAgICAgcjogJzB4OTE2OGMyMTU2NmE5ODQ2YWQ4MGVmOGMyN2ExOTlkNDg1NWE1MjQ1ZGZlZTVlOTQ1MzMwMGU2ZGQ1ZDY1OWNhNicsXG4gICAgICAgICAgICAgICAgczogJzB4MGM3NDQ4N2ZiYTcwNjE5NGQwMzBjY2U5YzhiNWQ3MTJlNjk4MzI2NzMxZjRlNmQ2MDMyNTFiN2ExZWVjYTA4NCcsXG4gICAgICAgICAgICAgICAgdjogMjgsXG4gICAgICAgICAgICAgICAgc2lnbmF0dXJlVHlwZTogMyxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHBhZFNpZ25hdHVyZSh2YWxpZFNpZ25hdHVyZSk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZFNpZ25hdHVyZSkudG8uZGVlcC5lcXVhbChyZXN1bHQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgncGFkcyBhIHNpZ25hdHVyZSBtaXNzaW5nIGJ5dGVzJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0ge1xuICAgICAgICAgICAgICAgIHI6ICcweDU5Y2E2JyxcbiAgICAgICAgICAgICAgICBzOiAnMFhlY2EwODQnLFxuICAgICAgICAgICAgICAgIHY6IDI4LFxuICAgICAgICAgICAgICAgIHNpZ25hdHVyZVR5cGU6IDMsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBwYWRTaWduYXR1cmUoc2lnbmF0dXJlKTtcblxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8uZGVlcC5lcXVhbCh7XG4gICAgICAgICAgICAgICAgcjogJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1OWNhNicsXG4gICAgICAgICAgICAgICAgczogJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGVjYTA4NCcsXG4gICAgICAgICAgICAgICAgdjogMjgsXG4gICAgICAgICAgICAgICAgc2lnbmF0dXJlVHlwZTogMyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9