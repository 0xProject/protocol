{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/signature_utils_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/signature_utils_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\n// tslint:disable:max-file-line-count\n\nimport { eip712SignTypedDataWithKey, ethSignHashWithKey, LimitOrder, OtcOrder } from '@0x/protocol-utils';\nimport { expect } from 'chai';\n\nimport { getSignerFromHash, padSignature } from '../../src/utils/signature_utils';\n\nconst address = '0xdA9AC423442169588DE6b4305f4E820D708d0cE5';\nconst privateKey = '0x653fa328df81be180b58e42737bc4cef037a19a3b9673b15d20ee2eebb2e509d';\n\ndescribe('Signature utils', () => {\n    describe('getSignerFromHash', () => {\n        it('should recover an address for an EthSign Signature', () => {\n            // Given\n            const otcOrder = new OtcOrder();\n            const orderHash = otcOrder.getHash();\n            const signature = ethSignHashWithKey(orderHash, privateKey);\n\n            // When\n            const signer = getSignerFromHash(orderHash, signature);\n\n            // Then\n            expect(signer).to.equal(address.toLowerCase());\n        });\n\n        it('should recover an address for an EIP712 Signature', () => {\n            // Given\n            const otcOrder = new OtcOrder();\n            const orderHash = otcOrder.getHash();\n            const signature = eip712SignTypedDataWithKey(otcOrder.getEIP712TypedData(), privateKey);\n\n            // When\n            const signer = getSignerFromHash(orderHash, signature);\n\n            // Then\n            expect(signer).to.equal(address.toLowerCase());\n        });\n\n        it('should not recover an address when signature is for something else', () => {\n            // Given\n            const limitOrder = new LimitOrder();\n            const limitOrderHash = limitOrder.getHash();\n            const signatureForLimitOrder = ethSignHashWithKey(limitOrderHash, privateKey);\n\n            const otcOrder = new OtcOrder();\n            const otcOrderHash = otcOrder.getHash();\n\n            // When\n            const signer = getSignerFromHash(otcOrderHash, signatureForLimitOrder);\n\n            // Then\n            expect(signer.toLowerCase()).to.not.eq(address.toLowerCase());\n        });\n    });\n    describe('padSignature', () => {\n        it(\"doesn't modify valid signatures\", () => {\n            const validSignature = {\n                r: '0x9168c21566a9846ad80ef8c27a199d4855a5245dfee5e9453300e6dd5d659ca6',\n                s: '0x0c74487fba706194d030cce9c8b5d712e698326731f4e6d603251b7a1eeca084',\n                v: 28,\n                signatureType: 3,\n            };\n\n            const result = padSignature(validSignature);\n\n            expect(validSignature).to.deep.equal(result);\n        });\n\n        it('pads a signature missing bytes', () => {\n            const signature = {\n                r: '0x59ca6',\n                s: '0Xeca084',\n                v: 28,\n                signatureType: 3,\n            };\n\n            const result = padSignature(signature);\n\n            expect(result).to.deep.equal({\n                r: '0x0000000000000000000000000000000000000000000000000000000000059ca6',\n                s: '0x0000000000000000000000000000000000000000000000000000000000eca084',\n                v: 28,\n                signatureType: 3,\n            });\n        });\n    });\n});\n"],"version":3}