{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/core/pair_utils.ts","mappings":";;;AAAA;;;;GAIG;AACH,SAAS,cAAc,CAAC,CAAS;IAC7B,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACvB,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;QAChB,MAAM,IAAI,KAAK,EAAE,CAAC;KACrB;IACD,mDAAmD;IACnD,uCAAuC;IACvC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,IAAI,EAAsB,CAAC;AAC/E,CAAC;AAED;;;GAGG;AACH,SAAgB,YAAY,CAAC,MAAc,EAAE,MAAc;IACvD,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;SAClB,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;SAC/B,IAAI,EAAE;SACN,IAAI,CAAC,GAAG,CAAC,CAAC;AACnB,CAAC;AALD,oCAKC;AAED;;;;;;;;;;;GAWG;AACH,SAAgB,aAAa,CAAC,KAAe;IACzC,OAAO,KAAK,CAAC,IAAI,CACb,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;QAC1B,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QACxC,OAAO,MAAM,CAAC;IAClB,CAAC,EAAE,IAAI,GAAG,EAAoB,CAAC,CAClC,CAAC;AACN,CAAC;AAPD,sCAOC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/core/pair_utils.ts"],"sourcesContent":["/**\n * Transforms a \"pair string\" of format \"0x1-0x2\" into\n * a two-element array [\"0x1\", \"0x2\"]. Ensures the result\n * array is sorted and converted to lower case.\n */\nfunction fromPairString(k: string): [string, string] {\n    const a = k.split('-');\n    if (a.length !== 2) {\n        throw new Error();\n    }\n    // type coercion is there because TypeScript thinks\n    // `sort` might change the array length\n    return [a[0].toLowerCase(), a[1].toLowerCase()].sort() as [string, string];\n}\n\n/**\n * Transforms two token addresses into a \"pair string\" of the format\n * \"0x1-0x2\".\n */\nexport function toPairString(tokenA: string, tokenB: string): string {\n    return [tokenA, tokenB]\n        .map((str) => str.toLowerCase())\n        .sort()\n        .join('-');\n}\n\n/**\n * Transforms an array of \"0x1-0x2\" pair strings into an array\n * of two-element arrays. Removes duplicate pairs.\n *\n * Example:\n * const pairs = [\n *  \"0x1-0x2\",\n *  \"0x2-0x1\",\n *  \"0x3-0x4\",\n * ];\n * toUniqueArray(pairs); // [[\"0x1\", \"0x2\"], [\"0x3\", \"0x4\"]]\n */\nexport function toUniqueArray(pairs: string[]): [string, string][] {\n    return Array.from(\n        pairs.reduce((result, pair) => {\n            result.add(fromPairString(pair).sort());\n            return result;\n        }, new Set<[string, string]>()),\n    );\n}\n"],"version":3}