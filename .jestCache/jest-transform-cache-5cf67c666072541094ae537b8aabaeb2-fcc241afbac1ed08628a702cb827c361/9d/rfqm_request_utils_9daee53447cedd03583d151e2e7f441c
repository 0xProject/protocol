e7f668e59100f6b694a681bb18081475
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringsToEIP712Context = exports.stringsToOtcOrderFields = exports.stringsToMetaTransactionFields = exports.stringsToSignature = void 0;
const utils_1 = require("@0x/utils");
/**
 * convert a Signature response into the data types expected by protocol-utils
 */
function stringsToSignature(strings) {
    return {
        signatureType: Number(strings.signatureType),
        v: Number(strings.v),
        r: strings.r,
        s: strings.s,
    };
}
exports.stringsToSignature = stringsToSignature;
/**
 * Converts the request payload for a gasless swap metatransaction into
 * the appropriate types
 */
function stringsToMetaTransactionFields(strings) {
    return {
        callData: strings.callData,
        chainId: Number(strings.chainId),
        expirationTimeSeconds: new utils_1.BigNumber(strings.expirationTimeSeconds),
        feeAmount: new utils_1.BigNumber(strings.feeAmount),
        feeToken: strings.feeToken,
        maxGasPrice: new utils_1.BigNumber(strings.maxGasPrice),
        minGasPrice: new utils_1.BigNumber(strings.minGasPrice),
        salt: new utils_1.BigNumber(strings.salt),
        sender: strings.sender,
        signer: strings.signer,
        value: new utils_1.BigNumber(strings.value),
        verifyingContract: strings.verifyingContract,
    };
}
exports.stringsToMetaTransactionFields = stringsToMetaTransactionFields;
/**
 * convert a JSON OtcOrder into an OtcOrder
 */
function stringsToOtcOrderFields(strings) {
    return {
        maker: strings.maker,
        taker: strings.taker,
        makerAmount: new utils_1.BigNumber(strings.makerAmount),
        takerAmount: new utils_1.BigNumber(strings.takerAmount),
        makerToken: strings.makerToken,
        takerToken: strings.takerToken,
        txOrigin: strings.txOrigin,
        expiryAndNonce: new utils_1.BigNumber(strings.expiryAndNonce),
        chainId: Number(strings.chainId),
        verifyingContract: strings.verifyingContract,
    };
}
exports.stringsToOtcOrderFields = stringsToOtcOrderFields;
// Internal function for handling the domain
function _stringsToEIP712Domain(strings) {
    const res = {
        ...strings,
        chainId: Number(strings.chainId),
    };
    // remove chainId if its NaN
    if (Number.isNaN(res.chainId)) {
        delete res.chainId;
    }
    return res;
}
/**
 * convert a JSON EIP712Context into an EIP712Context
 */
function stringsToEIP712Context(strings) {
    return {
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        types: strings.types,
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        primaryType: strings.primaryType,
        domain: _stringsToEIP712Domain(strings.domain),
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        message: strings.message,
    };
}
exports.stringsToEIP712Context = stringsToEIP712Context;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,