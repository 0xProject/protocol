{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/number_utils.ts","mappings":";;;AAAa,QAAA,WAAW,GAAG;IACvB,wGAAwG;IACxG,qBAAqB,EAAE,CAAC,gBAAwB,EAAE,gBAAwB,EAAU,EAAE;QAClF,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACxC,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,wDAAwD;IACtH,CAAC;IACD,sEAAsE;IACtE,8CAA8C;IAC9C,6CAA6C;IAC7C,uBAAuB,EAAE,CAAC,YAAoB,EAAU,EAAE;QACtD,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE;YACnC,mDAAmD;YACnD,GAAG,GAAG,GAAG,GAAG,GAAG,mBAAW,CAAC,qBAAqB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;SAC1E;QACD,OAAO,GAAG,CAAC;IACf,CAAC;CACJ,CAAC;AAEK,MAAM,MAAM,GAAG,CAAC,CAAS,EAAE,CAAS,EAAU,EAAE;IACnD,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AAC7B,CAAC,CAAC;AAFW,QAAA,MAAM,UAEjB","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/number_utils.ts"],"sourcesContent":["export const numberUtils = {\n    // from MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n    randomNumberInclusive: (minimumSpecified: number, maximumSpecified: number): number => {\n        const min = Math.ceil(minimumSpecified);\n        const max = Math.floor(maximumSpecified);\n        return Math.floor(Math.random() * (max - min + 1)) + min; // The maximum is inclusive and the minimum is inclusive\n    },\n    // creates a random hex number of desired length by stringing together\n    // random integers from 1-15, guaranteeing the\n    // result is a hex number of the given length\n    randomHexNumberOfLength: (numberLength: number): string => {\n        let res = '';\n        for (let i = 0; i < numberLength; i++) {\n            // tslint:disable-next-line:custom-no-magic-numbers\n            res = `${res}${numberUtils.randomNumberInclusive(1, 15).toString(16)}`;\n        }\n        return res;\n    },\n};\n\nexport const modulo = (a: number, b: number): number => {\n    return ((a % b) + b) % b;\n};\n"],"version":3}