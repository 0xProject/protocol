{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/service_utils.ts","mappings":";;;AAAA,qCAAkD;AAElD,sCAAkD;AAClD,iDAA4D;AAE5D,iDAA6C;AAEhC,QAAA,YAAY,GAAG;IACxB,iBAAiB,CACb,IAAY,EACZ,gBAA+B;QAK/B,MAAM,yBAAyB,GAAG,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,8BAAqB,CAAC;QAC9F,MAAM,wBAAwB,GAAG,IAAI,kBAAU,CAAC,MAAM,CAAC;YACnD,QAAQ,EAAE,IAAI;YACd,OAAO,EAAE,EAAE;YACX,IAAI,EAAE,oBAAoB;YAC1B,MAAM,EAAE;gBACJ,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE;gBACtC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE;aACzC;YACD,OAAO,EAAE,KAAK;YACd,eAAe,EAAE,MAAM;YACvB,IAAI,EAAE,UAAU;SACnB,CAAC,CAAC;QAEH,6BAA6B;QAC7B,MAAM,kBAAkB,GAAG,IAAI,iBAAS,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,yBAAa,CAAC,CAAC,YAAY,EAAE,CAAC;QACpF,MAAM,YAAY,GAAG,kBAAkB,CAAC,QAAQ,CAAC,oBAAQ,CAAC,CAAC;QAC3D,MAAM,YAAY,GAAG,0BAAW,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC;QAE7D,wDAAwD;QACxD,kFAAkF;QAClF,iFAAiF;QACjF,qBAAqB;QACrB,MAAM,gBAAgB,GAAG,IAAI,iBAAS,CAAC,GAAG,YAAY,GAAG,YAAY,EAAE,EAAE,oBAAQ,CAAC,CAAC;QAEnF,yCAAyC;QACzC,MAAM,oBAAoB,GAAG,wBAAwB,CAAC,MAAM,CAAC,CAAC,yBAAyB,EAAE,gBAAgB,CAAC,CAAC,CAAC;QAC5G,MAAM,cAAc,GAAG,GAAG,IAAI,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;QACjE,OAAO,EAAE,cAAc,EAAE,eAAe,EAAE,GAAG,YAAY,IAAI,kBAAkB,EAAE,EAAE,CAAC;IACxF,CAAC;CACJ,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/service_utils.ts"],"sourcesContent":["import { AbiEncoder, BigNumber } from '@0x/utils';\n\nimport { FEE_RECIPIENT_ADDRESS } from '../config';\nimport { HEX_BASE, ONE_SECOND_MS } from '../core/constants';\n\nimport { numberUtils } from './number_utils';\n\nexport const serviceUtils = {\n    attributeCallData(\n        data: string,\n        affiliateAddress: string | null,\n    ): {\n        affiliatedData: string;\n        decodedUniqueId: string;\n    } {\n        const affiliateAddressOrDefault = affiliateAddress ? affiliateAddress : FEE_RECIPIENT_ADDRESS;\n        const affiliateCallDataEncoder = new AbiEncoder.Method({\n            constant: true,\n            outputs: [],\n            name: 'ZeroExAPIAffiliate',\n            inputs: [\n                { name: 'affiliate', type: 'address' },\n                { name: 'timestamp', type: 'uint256' },\n            ],\n            payable: false,\n            stateMutability: 'view',\n            type: 'function',\n        });\n\n        // Generate unique identiifer\n        const timestampInSeconds = new BigNumber(Date.now() / ONE_SECOND_MS).integerValue();\n        const hexTimestamp = timestampInSeconds.toString(HEX_BASE);\n        const randomNumber = numberUtils.randomHexNumberOfLength(10);\n\n        // Concatenate the hex identifier with the hex timestamp\n        // In the final encoded call data, this will leave us with a 5-byte ID followed by\n        // a 4-byte timestamp, and won't break parsers of the timestamp made prior to the\n        // addition of the ID\n        const uniqueIdentifier = new BigNumber(`${randomNumber}${hexTimestamp}`, HEX_BASE);\n\n        // Encode additional call data and return\n        const encodedAffiliateData = affiliateCallDataEncoder.encode([affiliateAddressOrDefault, uniqueIdentifier]);\n        const affiliatedData = `${data}${encodedAffiliateData.slice(2)}`;\n        return { affiliatedData, decodedUniqueId: `${randomNumber}-${timestampInSeconds}` };\n    },\n};\n"],"version":3}