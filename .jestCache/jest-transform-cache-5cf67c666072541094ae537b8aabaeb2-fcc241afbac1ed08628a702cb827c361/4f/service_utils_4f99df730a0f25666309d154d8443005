770a7606d7cf4ff2ad38a3cc7387b893
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serviceUtils = void 0;
const utils_1 = require("@0x/utils");
const config_1 = require("../config");
const constants_1 = require("../core/constants");
const number_utils_1 = require("./number_utils");
exports.serviceUtils = {
    attributeCallData(data, affiliateAddress) {
        const affiliateAddressOrDefault = affiliateAddress ? affiliateAddress : config_1.FEE_RECIPIENT_ADDRESS;
        const affiliateCallDataEncoder = new utils_1.AbiEncoder.Method({
            constant: true,
            outputs: [],
            name: 'ZeroExAPIAffiliate',
            inputs: [
                { name: 'affiliate', type: 'address' },
                { name: 'timestamp', type: 'uint256' },
            ],
            payable: false,
            stateMutability: 'view',
            type: 'function',
        });
        // Generate unique identiifer
        const timestampInSeconds = new utils_1.BigNumber(Date.now() / constants_1.ONE_SECOND_MS).integerValue();
        const hexTimestamp = timestampInSeconds.toString(constants_1.HEX_BASE);
        const randomNumber = number_utils_1.numberUtils.randomHexNumberOfLength(10);
        // Concatenate the hex identifier with the hex timestamp
        // In the final encoded call data, this will leave us with a 5-byte ID followed by
        // a 4-byte timestamp, and won't break parsers of the timestamp made prior to the
        // addition of the ID
        const uniqueIdentifier = new utils_1.BigNumber(`${randomNumber}${hexTimestamp}`, constants_1.HEX_BASE);
        // Encode additional call data and return
        const encodedAffiliateData = affiliateCallDataEncoder.encode([affiliateAddressOrDefault, uniqueIdentifier]);
        const affiliatedData = `${data}${encodedAffiliateData.slice(2)}`;
        return { affiliatedData, decodedUniqueId: `${randomNumber}-${timestampInSeconds}` };
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9zZXJ2aWNlX3V0aWxzLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFrRDtBQUVsRCxzQ0FBa0Q7QUFDbEQsaURBQTREO0FBRTVELGlEQUE2QztBQUVoQyxRQUFBLFlBQVksR0FBRztJQUN4QixpQkFBaUIsQ0FDYixJQUFZLEVBQ1osZ0JBQStCO1FBSy9CLE1BQU0seUJBQXlCLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyw4QkFBcUIsQ0FBQztRQUM5RixNQUFNLHdCQUF3QixHQUFHLElBQUksa0JBQVUsQ0FBQyxNQUFNLENBQUM7WUFDbkQsUUFBUSxFQUFFLElBQUk7WUFDZCxPQUFPLEVBQUUsRUFBRTtZQUNYLElBQUksRUFBRSxvQkFBb0I7WUFDMUIsTUFBTSxFQUFFO2dCQUNKLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO2dCQUN0QyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTthQUN6QztZQUNELE9BQU8sRUFBRSxLQUFLO1lBQ2QsZUFBZSxFQUFFLE1BQU07WUFDdkIsSUFBSSxFQUFFLFVBQVU7U0FDbkIsQ0FBQyxDQUFDO1FBRUgsNkJBQTZCO1FBQzdCLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxpQkFBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyx5QkFBYSxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEYsTUFBTSxZQUFZLEdBQUcsa0JBQWtCLENBQUMsUUFBUSxDQUFDLG9CQUFRLENBQUMsQ0FBQztRQUMzRCxNQUFNLFlBQVksR0FBRywwQkFBVyxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTdELHdEQUF3RDtRQUN4RCxrRkFBa0Y7UUFDbEYsaUZBQWlGO1FBQ2pGLHFCQUFxQjtRQUNyQixNQUFNLGdCQUFnQixHQUFHLElBQUksaUJBQVMsQ0FBQyxHQUFHLFlBQVksR0FBRyxZQUFZLEVBQUUsRUFBRSxvQkFBUSxDQUFDLENBQUM7UUFFbkYseUNBQXlDO1FBQ3pDLE1BQU0sb0JBQW9CLEdBQUcsd0JBQXdCLENBQUMsTUFBTSxDQUFDLENBQUMseUJBQXlCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBQzVHLE1BQU0sY0FBYyxHQUFHLEdBQUcsSUFBSSxHQUFHLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2pFLE9BQU8sRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLEdBQUcsWUFBWSxJQUFJLGtCQUFrQixFQUFFLEVBQUUsQ0FBQztJQUN4RixDQUFDO0NBQ0osQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvc3JjL3V0aWxzL3NlcnZpY2VfdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJpRW5jb2RlciwgQmlnTnVtYmVyIH0gZnJvbSAnQDB4L3V0aWxzJztcblxuaW1wb3J0IHsgRkVFX1JFQ0lQSUVOVF9BRERSRVNTIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IEhFWF9CQVNFLCBPTkVfU0VDT05EX01TIH0gZnJvbSAnLi4vY29yZS9jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBudW1iZXJVdGlscyB9IGZyb20gJy4vbnVtYmVyX3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IHNlcnZpY2VVdGlscyA9IHtcbiAgICBhdHRyaWJ1dGVDYWxsRGF0YShcbiAgICAgICAgZGF0YTogc3RyaW5nLFxuICAgICAgICBhZmZpbGlhdGVBZGRyZXNzOiBzdHJpbmcgfCBudWxsLFxuICAgICk6IHtcbiAgICAgICAgYWZmaWxpYXRlZERhdGE6IHN0cmluZztcbiAgICAgICAgZGVjb2RlZFVuaXF1ZUlkOiBzdHJpbmc7XG4gICAgfSB7XG4gICAgICAgIGNvbnN0IGFmZmlsaWF0ZUFkZHJlc3NPckRlZmF1bHQgPSBhZmZpbGlhdGVBZGRyZXNzID8gYWZmaWxpYXRlQWRkcmVzcyA6IEZFRV9SRUNJUElFTlRfQUREUkVTUztcbiAgICAgICAgY29uc3QgYWZmaWxpYXRlQ2FsbERhdGFFbmNvZGVyID0gbmV3IEFiaUVuY29kZXIuTWV0aG9kKHtcbiAgICAgICAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgICAgICAgb3V0cHV0czogW10sXG4gICAgICAgICAgICBuYW1lOiAnWmVyb0V4QVBJQWZmaWxpYXRlJyxcbiAgICAgICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAgICAgIHsgbmFtZTogJ2FmZmlsaWF0ZScsIHR5cGU6ICdhZGRyZXNzJyB9LFxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ3RpbWVzdGFtcCcsIHR5cGU6ICd1aW50MjU2JyB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHBheWFibGU6IGZhbHNlLFxuICAgICAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiAndmlldycsXG4gICAgICAgICAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBHZW5lcmF0ZSB1bmlxdWUgaWRlbnRpaWZlclxuICAgICAgICBjb25zdCB0aW1lc3RhbXBJblNlY29uZHMgPSBuZXcgQmlnTnVtYmVyKERhdGUubm93KCkgLyBPTkVfU0VDT05EX01TKS5pbnRlZ2VyVmFsdWUoKTtcbiAgICAgICAgY29uc3QgaGV4VGltZXN0YW1wID0gdGltZXN0YW1wSW5TZWNvbmRzLnRvU3RyaW5nKEhFWF9CQVNFKTtcbiAgICAgICAgY29uc3QgcmFuZG9tTnVtYmVyID0gbnVtYmVyVXRpbHMucmFuZG9tSGV4TnVtYmVyT2ZMZW5ndGgoMTApO1xuXG4gICAgICAgIC8vIENvbmNhdGVuYXRlIHRoZSBoZXggaWRlbnRpZmllciB3aXRoIHRoZSBoZXggdGltZXN0YW1wXG4gICAgICAgIC8vIEluIHRoZSBmaW5hbCBlbmNvZGVkIGNhbGwgZGF0YSwgdGhpcyB3aWxsIGxlYXZlIHVzIHdpdGggYSA1LWJ5dGUgSUQgZm9sbG93ZWQgYnlcbiAgICAgICAgLy8gYSA0LWJ5dGUgdGltZXN0YW1wLCBhbmQgd29uJ3QgYnJlYWsgcGFyc2VycyBvZiB0aGUgdGltZXN0YW1wIG1hZGUgcHJpb3IgdG8gdGhlXG4gICAgICAgIC8vIGFkZGl0aW9uIG9mIHRoZSBJRFxuICAgICAgICBjb25zdCB1bmlxdWVJZGVudGlmaWVyID0gbmV3IEJpZ051bWJlcihgJHtyYW5kb21OdW1iZXJ9JHtoZXhUaW1lc3RhbXB9YCwgSEVYX0JBU0UpO1xuXG4gICAgICAgIC8vIEVuY29kZSBhZGRpdGlvbmFsIGNhbGwgZGF0YSBhbmQgcmV0dXJuXG4gICAgICAgIGNvbnN0IGVuY29kZWRBZmZpbGlhdGVEYXRhID0gYWZmaWxpYXRlQ2FsbERhdGFFbmNvZGVyLmVuY29kZShbYWZmaWxpYXRlQWRkcmVzc09yRGVmYXVsdCwgdW5pcXVlSWRlbnRpZmllcl0pO1xuICAgICAgICBjb25zdCBhZmZpbGlhdGVkRGF0YSA9IGAke2RhdGF9JHtlbmNvZGVkQWZmaWxpYXRlRGF0YS5zbGljZSgyKX1gO1xuICAgICAgICByZXR1cm4geyBhZmZpbGlhdGVkRGF0YSwgZGVjb2RlZFVuaXF1ZUlkOiBgJHtyYW5kb21OdW1iZXJ9LSR7dGltZXN0YW1wSW5TZWNvbmRzfWAgfTtcbiAgICB9LFxufTtcbiJdLCJ2ZXJzaW9uIjozfQ==