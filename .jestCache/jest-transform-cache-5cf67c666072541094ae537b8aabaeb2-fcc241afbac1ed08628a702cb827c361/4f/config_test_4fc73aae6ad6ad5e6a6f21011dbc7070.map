{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/config_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/config_test.ts"],"sourcesContent":["// tslint:disable custom-no-magic-numbers\nimport { expect } from 'chai';\n\nimport {\n    getApiKeyWhitelistFromIntegratorsAcl,\n    getIntegratorByIdOrThrow,\n    getIntegratorIdForApiKey,\n} from '../src/config';\n\n/**\n * Configuration tests which run against the config in `test_env` file.\n */\ndescribe('Config', () => {\n    describe('getIntegratorIdForApiKey', () => {\n        it('gets the integrator ID for an api key', () => {\n            const id = getIntegratorIdForApiKey('test-api-key-1');\n\n            expect(id).to.equal('test-integrator-id-1');\n        });\n\n        it('correctly parses whitelist', () => {\n            try {\n                getIntegratorByIdOrThrow('test-integrator-id-2');\n                expect.fail(`\"test-integrator-id-2\" should not exist`);\n            } catch (e) {\n                expect(e.toString()).to.equal('AssertionError: \"test-integrator-id-2\" should not exist');\n            }\n        });\n\n        it('allows us to fetch Integrator by Integrator key', () => {\n            const { whitelistIntegratorUrls } = getIntegratorByIdOrThrow('test-integrator-id-1');\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            expect(whitelistIntegratorUrls!.length).to.eql(1);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            expect(whitelistIntegratorUrls![0]).to.eql('http://foo.bar');\n        });\n\n        it('returns `undefined` for non-existent api keys', () => {\n            const id = getIntegratorIdForApiKey('test-api-key-does-not-exist');\n            expect(id).to.equal(undefined);\n        });\n    });\n\n    describe('getApiKeyWhitelistFromIntegratorsAcl', () => {\n        it('gets keys for allowed liquidity sources', () => {\n            const rfqtKeys = getApiKeyWhitelistFromIntegratorsAcl('rfqt');\n            expect(rfqtKeys.length).to.eql(2);\n            expect(rfqtKeys[0]).to.eql('test-api-key-1');\n            expect(rfqtKeys[1]).to.eql('test-api-key-2');\n\n            const rfqmKeys = getApiKeyWhitelistFromIntegratorsAcl('rfqm');\n            expect(rfqmKeys.length).to.eql(3); // tslint:disable-line: custom-no-magic-numbers\n            expect(rfqmKeys[0]).to.eql('test-api-key-1');\n            expect(rfqmKeys[1]).to.eql('test-api-key-2');\n            expect(rfqmKeys[2]).to.eql('test-api-key-3');\n        });\n        it(\"doesn't add disallowed liquidity sources to allowed API keys\", () => {\n            const plpKeys = getApiKeyWhitelistFromIntegratorsAcl('plp');\n            expect(plpKeys.length).to.equal(0);\n        });\n    });\n});\n"],"version":3}