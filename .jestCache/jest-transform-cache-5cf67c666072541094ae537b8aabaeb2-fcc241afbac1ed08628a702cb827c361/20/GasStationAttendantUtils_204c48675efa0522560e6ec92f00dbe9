28f51b705da686a1d25fe6bb38f55557
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGasStationAttendant = void 0;
const GasOracleType0_1 = require("./GasOracleType0");
const GasOracleType2_1 = require("./GasOracleType2");
const GasStationAttendantEthereum_1 = require("./GasStationAttendantEthereum");
const GasStationAttendantPolygon_1 = require("./GasStationAttendantPolygon");
function getGasStationAttendant(chain, axiosInstance) {
    // tslint:disable: custom-no-magic-numbers
    switch (chain.chainId) {
        case /* ethereum */ 1:
            return new GasStationAttendantEthereum_1.GasStationAttendantEthereum(GasOracleType2_1.GasOracleType2.create(chain.gasStationUrl, axiosInstance));
        case /* ganache */ 1337:
            return new GasStationAttendantEthereum_1.GasStationAttendantEthereum(GasOracleType2_1.GasOracleType2.create(chain.gasStationUrl, axiosInstance));
        case /* polygon */ 137:
            return new GasStationAttendantPolygon_1.GasStationAttendantPolygon(GasOracleType0_1.GasOracleType0.create(chain.gasStationUrl, axiosInstance));
        case /* mumbai */ 80001:
            return new GasStationAttendantPolygon_1.GasStationAttendantPolygon(GasOracleType0_1.GasOracleType0.create(chain.gasStationUrl, axiosInstance));
        default:
            throw new Error(`Gas station attendant not configured for chain: ${chain.name}`);
    }
    // tslint:enable: custom-no-magic-numbers
}
exports.getGasStationAttendant = getGasStationAttendant;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9HYXNTdGF0aW9uQXR0ZW5kYW50VXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBR0EscURBQWtEO0FBRWxELHFEQUFrRDtBQUVsRCwrRUFBNEU7QUFDNUUsNkVBQTBFO0FBRTFFLFNBQWdCLHNCQUFzQixDQUFDLEtBQXlCLEVBQUUsYUFBNEI7SUFDMUYsMENBQTBDO0lBQzFDLFFBQVEsS0FBSyxDQUFDLE9BQU8sRUFBRTtRQUNuQixLQUFLLGNBQWMsQ0FBQyxDQUFDO1lBQ2pCLE9BQU8sSUFBSSx5REFBMkIsQ0FBQywrQkFBYyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDdEcsS0FBSyxhQUFhLENBQUMsSUFBSTtZQUNuQixPQUFPLElBQUkseURBQTJCLENBQUMsK0JBQWMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ3RHLEtBQUssYUFBYSxDQUFDLEdBQUc7WUFDbEIsT0FBTyxJQUFJLHVEQUEwQixDQUFDLCtCQUFjLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUNyRyxLQUFLLFlBQVksQ0FBQyxLQUFLO1lBQ25CLE9BQU8sSUFBSSx1REFBMEIsQ0FBQywrQkFBYyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDckc7WUFDSSxNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUN4RjtJQUNELHlDQUF5QztBQUM3QyxDQUFDO0FBZkQsd0RBZUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9HYXNTdGF0aW9uQXR0ZW5kYW50VXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXhpb3NJbnN0YW5jZSB9IGZyb20gJ2F4aW9zJztcblxuaW1wb3J0IHsgQ2hhaW5Db25maWd1cmF0aW9uIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IEdhc09yYWNsZVR5cGUwIH0gZnJvbSAnLi9HYXNPcmFjbGVUeXBlMCc7XG5cbmltcG9ydCB7IEdhc09yYWNsZVR5cGUyIH0gZnJvbSAnLi9HYXNPcmFjbGVUeXBlMic7XG5pbXBvcnQgeyBHYXNTdGF0aW9uQXR0ZW5kYW50IH0gZnJvbSAnLi9HYXNTdGF0aW9uQXR0ZW5kYW50JztcbmltcG9ydCB7IEdhc1N0YXRpb25BdHRlbmRhbnRFdGhlcmV1bSB9IGZyb20gJy4vR2FzU3RhdGlvbkF0dGVuZGFudEV0aGVyZXVtJztcbmltcG9ydCB7IEdhc1N0YXRpb25BdHRlbmRhbnRQb2x5Z29uIH0gZnJvbSAnLi9HYXNTdGF0aW9uQXR0ZW5kYW50UG9seWdvbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHYXNTdGF0aW9uQXR0ZW5kYW50KGNoYWluOiBDaGFpbkNvbmZpZ3VyYXRpb24sIGF4aW9zSW5zdGFuY2U6IEF4aW9zSW5zdGFuY2UpOiBHYXNTdGF0aW9uQXR0ZW5kYW50IHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZTogY3VzdG9tLW5vLW1hZ2ljLW51bWJlcnNcbiAgICBzd2l0Y2ggKGNoYWluLmNoYWluSWQpIHtcbiAgICAgICAgY2FzZSAvKiBldGhlcmV1bSAqLyAxOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBHYXNTdGF0aW9uQXR0ZW5kYW50RXRoZXJldW0oR2FzT3JhY2xlVHlwZTIuY3JlYXRlKGNoYWluLmdhc1N0YXRpb25VcmwsIGF4aW9zSW5zdGFuY2UpKTtcbiAgICAgICAgY2FzZSAvKiBnYW5hY2hlICovIDEzMzc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEdhc1N0YXRpb25BdHRlbmRhbnRFdGhlcmV1bShHYXNPcmFjbGVUeXBlMi5jcmVhdGUoY2hhaW4uZ2FzU3RhdGlvblVybCwgYXhpb3NJbnN0YW5jZSkpO1xuICAgICAgICBjYXNlIC8qIHBvbHlnb24gKi8gMTM3OlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBHYXNTdGF0aW9uQXR0ZW5kYW50UG9seWdvbihHYXNPcmFjbGVUeXBlMC5jcmVhdGUoY2hhaW4uZ2FzU3RhdGlvblVybCwgYXhpb3NJbnN0YW5jZSkpO1xuICAgICAgICBjYXNlIC8qIG11bWJhaSAqLyA4MDAwMTpcbiAgICAgICAgICAgIHJldHVybiBuZXcgR2FzU3RhdGlvbkF0dGVuZGFudFBvbHlnb24oR2FzT3JhY2xlVHlwZTAuY3JlYXRlKGNoYWluLmdhc1N0YXRpb25VcmwsIGF4aW9zSW5zdGFuY2UpKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgR2FzIHN0YXRpb24gYXR0ZW5kYW50IG5vdCBjb25maWd1cmVkIGZvciBjaGFpbjogJHtjaGFpbi5uYW1lfWApO1xuICAgIH1cbiAgICAvLyB0c2xpbnQ6ZW5hYmxlOiBjdXN0b20tbm8tbWFnaWMtbnVtYmVyc1xufVxuIl0sInZlcnNpb24iOjN9