fb93190e20a6c4be48fc3f03b9139ffd
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable custom-no-magic-numbers
// tslint:disable await-promise
// tslint:disable max-file-line-count
const asset_swapper_1 = require("@0x/asset-swapper");
const contract_addresses_1 = require("@0x/contract-addresses");
const contracts_erc20_1 = require("@0x/contracts-erc20");
const contracts_zero_ex_1 = require("@0x/contracts-zero-ex");
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const web3_wrapper_1 = require("@0x/web3-wrapper");
const chai_1 = require("chai");
const ethers_1 = require("ethers");
const constants_1 = require("../src/core/constants");
const balance_checker_1 = require("../src/utils/balance_checker");
const rfq_blockchain_utils_1 = require("../src/utils/rfq_blockchain_utils");
const constants_2 = require("./constants");
const deployment_1 = require("./test_utils/deployment");
const GAS_PRICE = 1e9;
const VALID_EXPIRY = new utils_1.BigNumber(9000000000);
const CHAIN_ID = contract_addresses_1.ChainId.Ganache;
jest.setTimeout(constants_1.ONE_MINUTE_MS * 2);
let teardownDependencies;
describe('RFQ Blockchain Utils', () => {
    let provider;
    let makerToken;
    let takerToken;
    let makerAmount;
    let takerAmount;
    let invalidTakerAmount;
    let makerBalance;
    let takerBalance;
    let web3Wrapper;
    let owner;
    let maker;
    let taker;
    let signer;
    let txOrigin;
    let zeroEx;
    let rfqOrder;
    let otcOrder;
    let unfillableRfqOrder;
    let rfqBlockchainUtils;
    let orderSig;
    let sigForUnfillableOrder;
    let makerOtcOrderSig;
    let takerOtcOrderSig;
    beforeAll(async () => {
        teardownDependencies = await (0, deployment_1.setupDependenciesAsync)(['ganache']);
        provider = (0, constants_2.getProvider)();
        web3Wrapper = new web3_wrapper_1.Web3Wrapper(provider);
        [owner, maker, taker, txOrigin, signer] = await web3Wrapper.getAvailableAddressesAsync();
        // Deploy dummy tokens
        makerToken = await contracts_erc20_1.DummyERC20TokenContract.deployFrom0xArtifactAsync(contracts_erc20_1.artifacts.DummyERC20Token, provider, { from: maker, gas: 10000000 }, {}, 'The token that originally belongs to the maker', 'makerToken', new utils_1.BigNumber(18), new utils_1.BigNumber(0));
        takerToken = await contracts_erc20_1.DummyERC20TokenContract.deployFrom0xArtifactAsync(contracts_erc20_1.artifacts.DummyERC20Token, provider, { from: taker, gas: 10000000 }, {}, 'The token that originally belongs to the maker', 'takerToken', new utils_1.BigNumber(18), new utils_1.BigNumber(0));
        // Deploy Balance Checker (only necessary for Ganache because ganache doesn't have overrides)
        const balanceCheckerContract = await asset_swapper_1.BalanceCheckerContract.deployFrom0xArtifactAsync(asset_swapper_1.artifacts.BalanceChecker, provider, { from: owner, gas: 10000000 }, {});
        const balanceChecker = new balance_checker_1.BalanceChecker(provider, balanceCheckerContract);
        makerAmount = new utils_1.BigNumber(100);
        takerAmount = new utils_1.BigNumber(50);
        invalidTakerAmount = new utils_1.BigNumber(10000000);
        // Deploy ZeroEx to Ganache
        zeroEx = await (0, contracts_zero_ex_1.fullMigrateAsync)(owner, provider, { from: owner, gasPrice: GAS_PRICE }, {}, { protocolFeeMultiplier: Number(0) }, {
            nativeOrders: contracts_zero_ex_1.artifacts.NativeOrdersFeature,
            metaTransactions: contracts_zero_ex_1.artifacts.MetaTransactionsFeature,
        });
        // Prepare an RfqOrder
        rfqOrder = new protocol_utils_1.RfqOrder({
            makerToken: makerToken.address,
            takerToken: takerToken.address,
            makerAmount,
            takerAmount,
            maker,
            taker,
            txOrigin,
            expiry: VALID_EXPIRY,
            salt: new utils_1.BigNumber(1),
            verifyingContract: zeroEx.address,
            chainId: CHAIN_ID,
        });
        orderSig = await rfqOrder.getSignatureWithProviderAsync(provider);
        // Prepare an Unfillable RfqOrder
        unfillableRfqOrder = new protocol_utils_1.RfqOrder({
            makerToken: makerToken.address,
            takerToken: takerToken.address,
            makerAmount,
            takerAmount: invalidTakerAmount,
            maker,
            taker,
            txOrigin,
            expiry: VALID_EXPIRY,
            salt: new utils_1.BigNumber(1),
            verifyingContract: zeroEx.address,
            chainId: CHAIN_ID,
        });
        sigForUnfillableOrder = await unfillableRfqOrder.getSignatureWithProviderAsync(provider);
        // Prepare an OtcOrder and valid signatures
        otcOrder = new protocol_utils_1.OtcOrder({
            maker,
            taker,
            makerAmount,
            takerAmount,
            makerToken: makerToken.address,
            takerToken: takerToken.address,
            txOrigin,
            expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(new utils_1.BigNumber(VALID_EXPIRY), constants_1.ZERO, new utils_1.BigNumber(VALID_EXPIRY)),
            chainId: CHAIN_ID,
            verifyingContract: zeroEx.address,
        });
        const orderHash = otcOrder.getHash();
        makerOtcOrderSig = await (0, protocol_utils_1.ethSignHashWithProviderAsync)(orderHash, maker, provider);
        takerOtcOrderSig = await (0, protocol_utils_1.ethSignHashWithProviderAsync)(orderHash, taker, provider);
        // Mint enough tokens for a few trades
        const numTrades = 2;
        makerBalance = makerAmount.times(numTrades);
        takerBalance = takerAmount.times(numTrades);
        await makerToken.mint(makerBalance).awaitTransactionSuccessAsync({ from: maker });
        await makerToken.approve(zeroEx.address, makerBalance.times(2)).awaitTransactionSuccessAsync({ from: maker });
        await takerToken.mint(takerBalance).awaitTransactionSuccessAsync({ from: taker });
        await takerToken.approve(zeroEx.address, takerBalance.times(2)).awaitTransactionSuccessAsync({ from: taker });
        const ethersProvider = new ethers_1.providers.JsonRpcProvider();
        const ethersWallet = new ethers_1.Wallet(constants_2.WORKER_TEST_PRIVATE_KEY, ethersProvider);
        rfqBlockchainUtils = new rfq_blockchain_utils_1.RfqBlockchainUtils(provider, zeroEx.address, balanceChecker, ethersProvider, ethersWallet);
    });
    afterAll(async () => {
        if (!teardownDependencies()) {
            throw new Error('Failed to tear down dependencies');
        }
    });
    describe('getMinOfBalancesAndAllowancesAsync', () => {
        it('should fetch min of token balances and allowances', async () => {
            const addresses = [
                { owner: maker, token: makerToken.address },
                { owner: maker, token: takerToken.address },
                { owner: taker, token: makerToken.address },
                { owner: taker, token: takerToken.address },
            ];
            const res = await rfqBlockchainUtils.getMinOfBalancesAndAllowancesAsync(addresses);
            (0, chai_1.expect)(res).to.deep.eq([makerBalance, constants_1.ZERO, constants_1.ZERO, takerBalance]);
        });
    });
    describe('getTokenBalancesAsync', () => {
        it('should fetch token balances', async () => {
            const addresses = [
                { owner: maker, token: makerToken.address },
                { owner: maker, token: takerToken.address },
                { owner: taker, token: makerToken.address },
                { owner: taker, token: takerToken.address },
            ];
            const res = await rfqBlockchainUtils.getTokenBalancesAsync(addresses);
            (0, chai_1.expect)(res).to.deep.eq([makerBalance, constants_1.ZERO, constants_1.ZERO, takerBalance]);
        });
    });
    describe('OtcOrder', () => {
        describe('estimateGasForFillTakerSignedOtcOrderAsync', () => {
            it('does not throw an error on valid order', async () => {
                try {
                    const gasEstimate = await rfqBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync(otcOrder, makerOtcOrderSig, takerOtcOrderSig, txOrigin, false);
                    (0, chai_1.expect)(gasEstimate).to.be.greaterThan(0);
                }
                catch (err) {
                    chai_1.expect.fail('should not throw');
                }
            });
            it('throws an error if order is invalid', async () => {
                const invalidOtcOrder = new protocol_utils_1.OtcOrder({
                    maker,
                    taker,
                    makerAmount,
                    takerAmount,
                    makerToken: makerToken.address,
                    takerToken: takerToken.address,
                    txOrigin,
                    expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(constants_1.ZERO, // expired
                    constants_1.ZERO, VALID_EXPIRY),
                    chainId: CHAIN_ID,
                    verifyingContract: zeroEx.address,
                });
                const orderHash = invalidOtcOrder.getHash();
                const makerSig = await (0, protocol_utils_1.ethSignHashWithProviderAsync)(orderHash, maker, provider);
                const takerSig = await (0, protocol_utils_1.ethSignHashWithProviderAsync)(orderHash, taker, provider);
                (0, chai_1.expect)(rfqBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync(invalidOtcOrder, // invalid order, should be expired
                makerSig, takerSig, txOrigin, false)).to.eventually.be.rejectedWith(/revert/);
            });
            it('throws an error if signatures invalid', async () => {
                (0, chai_1.expect)(rfqBlockchainUtils.estimateGasForFillTakerSignedOtcOrderAsync(otcOrder, makerOtcOrderSig, makerOtcOrderSig, // wrong signature
                txOrigin, false)).to.eventually.be.rejectedWith('revert');
            });
        });
    });
    describe('validateMetaTransaction', () => {
        it('returns successful filled amounts for a valid metatransaction', async () => {
            const metaTx = rfqBlockchainUtils.generateMetaTransaction(rfqOrder, orderSig, taker, takerAmount, CHAIN_ID);
            const metaTxSig = await metaTx.getSignatureWithProviderAsync(provider);
            const res = await rfqBlockchainUtils.validateMetaTransactionOrThrowAsync(metaTx, metaTxSig, txOrigin);
            (0, chai_1.expect)(res[0]).to.deep.equal(takerAmount);
            (0, chai_1.expect)(res[1]).to.deep.equal(makerAmount);
        });
        it('throws for a metatransaction with an invalid signature', async () => {
            const metaTx = rfqBlockchainUtils.generateMetaTransaction(rfqOrder, orderSig, taker, takerAmount, CHAIN_ID);
            const invalidMetaTxSig = orderSig;
            (0, chai_1.expect)(rfqBlockchainUtils.validateMetaTransactionOrThrowAsync(metaTx, invalidMetaTxSig, txOrigin)).to.eventually.be.rejectedWith('SignatureValidationError');
        });
        it('throws for a metatransaction with an unfillable order', async () => {
            const metaTx = rfqBlockchainUtils.generateMetaTransaction(unfillableRfqOrder, sigForUnfillableOrder, taker, invalidTakerAmount, CHAIN_ID);
            const metaTxSig = await metaTx.getSignatureWithProviderAsync(provider);
            (0, chai_1.expect)(rfqBlockchainUtils.validateMetaTransactionOrThrowAsync(metaTx, metaTxSig, txOrigin)).to.eventually.be.rejectedWith('MetaTransactionCallFailedError');
        });
        it('returns successful filled amounts for a valid metatransaction when validating calldata', async () => {
            const metaTx = rfqBlockchainUtils.generateMetaTransaction(rfqOrder, orderSig, taker, takerAmount, CHAIN_ID);
            const metaTxSig = await metaTx.getSignatureWithProviderAsync(provider);
            const callData = rfqBlockchainUtils.generateMetaTransactionCallData(metaTx, metaTxSig, constants_2.MATCHA_AFFILIATE_ADDRESS);
            const res = await rfqBlockchainUtils.decodeMetaTransactionCallDataAndValidateAsync(callData, txOrigin);
            (0, chai_1.expect)(res[0]).to.deep.equal(takerAmount);
            (0, chai_1.expect)(res[1]).to.deep.equal(makerAmount);
        });
        it('throws for a metatransaction with an invalid signature when validating calldata', async () => {
            const metaTx = rfqBlockchainUtils.generateMetaTransaction(rfqOrder, orderSig, taker, takerAmount, CHAIN_ID);
            const invalidMetaTxSig = orderSig;
            const callData = rfqBlockchainUtils.generateMetaTransactionCallData(metaTx, invalidMetaTxSig, constants_2.MATCHA_AFFILIATE_ADDRESS);
            (0, chai_1.expect)(rfqBlockchainUtils.decodeMetaTransactionCallDataAndValidateAsync(callData, txOrigin)).to.eventually.be.rejectedWith('SignatureValidationError');
        });
        it('throws for a metatransaction with an unfillable order when validating calldata', async () => {
            const metaTx = rfqBlockchainUtils.generateMetaTransaction(unfillableRfqOrder, sigForUnfillableOrder, taker, invalidTakerAmount, CHAIN_ID);
            const metaTxSig = await metaTx.getSignatureWithProviderAsync(provider);
            const callData = rfqBlockchainUtils.generateMetaTransactionCallData(metaTx, metaTxSig, constants_2.MATCHA_AFFILIATE_ADDRESS);
            (0, chai_1.expect)(rfqBlockchainUtils.decodeMetaTransactionCallDataAndValidateAsync(callData, txOrigin)).to.eventually.be.rejectedWith('MetaTransactionCallFailedError');
        });
        it('should throw for a partially filled order', async () => {
            const metaTx1 = rfqBlockchainUtils.generateMetaTransaction(rfqOrder, orderSig, taker, takerAmount.div(2), CHAIN_ID);
            const metaTxSig1 = await metaTx1.getSignatureWithProviderAsync(provider);
            await zeroEx.executeMetaTransaction(metaTx1, metaTxSig1).awaitTransactionSuccessAsync({ from: txOrigin });
            const metaTx2 = rfqBlockchainUtils.generateMetaTransaction(rfqOrder, orderSig, taker, takerAmount, CHAIN_ID);
            const metaTxSig2 = await metaTx2.getSignatureWithProviderAsync(provider);
            (0, chai_1.expect)(rfqBlockchainUtils.validateMetaTransactionOrThrowAsync(metaTx2, metaTxSig2, txOrigin)).to.eventually.be.rejectedWith('filled amount is less than requested fill amount');
        });
    });
    describe('transformTxDataToTransactionRequest', () => {
        it('creates a TransactionRequest', () => {
            const txOptions = {
                from: '0xfromaddress',
                gas: new utils_1.BigNumber(210000000),
                maxFeePerGas: new utils_1.BigNumber(200000),
                maxPriorityFeePerGas: new utils_1.BigNumber(100000),
                nonce: 21,
                to: '0xtoaddress',
                value: 0,
            };
            const result = rfqBlockchainUtils.transformTxDataToTransactionRequest(txOptions, 
            /* chainId = */ 1337, 
            /* callData */ '0x01234');
            (0, chai_1.expect)(result.from).to.equal('0xfromaddress');
            (0, chai_1.expect)(result.gasLimit).to.equal(BigInt(210000000));
            (0, chai_1.expect)(result.maxFeePerGas).to.equal(BigInt(200000));
            (0, chai_1.expect)(result.maxPriorityFeePerGas).to.equal(BigInt(100000));
            (0, chai_1.expect)(result.nonce).to.equal(21);
            (0, chai_1.expect)(result.to).to.equal('0xtoaddress');
            (0, chai_1.expect)(result.value).to.equal(0);
        });
        it("uses the proxy address if no 'to' address is provided", () => {
            const txOptions = { from: '0xfromaddress' };
            const result = rfqBlockchainUtils.transformTxDataToTransactionRequest(txOptions);
            (0, chai_1.expect)(result.to).to.equal(zeroEx.address);
        });
    });
    describe('getDecodedRfqOrderFillEventLogFromLogs', () => {
        it('correctly parses an RfqOrderFillEvent from logs', async () => {
            const rfqOrderFilledEvent = rfqBlockchainUtils.getDecodedRfqOrderFillEventLogFromLogs([
                constants_2.TEST_RFQ_ORDER_FILLED_EVENT_LOG,
            ]);
            (0, chai_1.expect)(rfqOrderFilledEvent.args.takerTokenFilledAmount).to.deep.eq(constants_2.TEST_RFQ_ORDER_FILLED_EVENT_TAKER_AMOUNT);
            (0, chai_1.expect)(rfqOrderFilledEvent.blockNumber).to.deep.eq(constants_2.TEST_RFQ_ORDER_FILLED_EVENT_LOG.blockNumber);
        });
    });
    describe('getTokenDecimalsAsync', () => {
        it('gets the token decimals', async () => {
            const decimals = await rfqBlockchainUtils.getTokenDecimalsAsync(makerToken.address);
            (0, chai_1.expect)(decimals).to.equal(18);
        });
        it('throws if the contract does not exist', () => {
            // tslint:disable-next-line: no-unused-expression no-unbound-method
            (0, chai_1.expect)(rfqBlockchainUtils.getTokenDecimalsAsync('0x29D7d1dd5B6f9C864d9db560D72a247c178aE86B')).to.be
                .rejected;
        });
    });
    describe('isValidOrderSigner', () => {
        it('returns false if signer is not valid', async () => {
            const isValidOrderSigner = await rfqBlockchainUtils.isValidOrderSignerAsync(maker, signer);
            (0, chai_1.expect)(isValidOrderSigner).to.equal(false);
        });
        it('returns true when valid signer address is passed', async () => {
            await rfqBlockchainUtils.registerAllowedOrderSignerAsync(maker, signer, true);
            const isValidOrderSigner = await rfqBlockchainUtils.isValidOrderSignerAsync(maker, signer);
            (0, chai_1.expect)(isValidOrderSigner).to.equal(true);
        });
    });
    describe('generateApprovalCalldataAsync', () => {
        it('generates executeMetaTransaction calldata', async () => {
            const token = makerToken.address;
            const approval = constants_2.MOCK_EXECUTE_META_TRANSACTION_APPROVAL;
            const signature = {
                r: '0x0000000000000000000000000000000000000000000000000000000000000000',
                s: '0x0000000000000000000000000000000000000000000000000000000000000000',
                v: 28,
                signatureType: 2,
            };
            const calldata = await rfqBlockchainUtils.generateApprovalCalldataAsync(token, approval, signature);
            (0, chai_1.expect)(calldata).to.eq(constants_2.MOCK_EXECUTE_META_TRANSACTION_CALLDATA);
        });
        it('generates permit calldata', async () => {
            const token = makerToken.address;
            const approval = constants_2.MOCK_PERMIT_APPROVAL;
            const signature = {
                r: '0x0000000000000000000000000000000000000000000000000000000000000000',
                s: '0x0000000000000000000000000000000000000000000000000000000000000000',
                v: 28,
                signatureType: 2,
            };
            const calldata = await rfqBlockchainUtils.generateApprovalCalldataAsync(token, approval, signature);
            (0, chai_1.expect)(calldata).to.eq(constants_2.MOCK_PERMIT_CALLDATA);
        });
    });
    describe('estimateGasForAsync', () => {
        it('throws exception on invalid calldata', async () => {
            const erc20AbiDecimals = `[{
                "constant": true,
                "inputs": [],
                "name": "decimals",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint8"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }]`;
            const erc20 = new ethers_1.Contract(takerToken.address, erc20AbiDecimals);
            const { data: calldata } = await erc20.populateTransaction.decimals();
            if (!calldata) {
                throw new Error('calldata for decimals should not be undefined or empty');
            }
            const invalidCalldata = `${calldata.substring(0, calldata.length - 1)}0`;
            try {
                await rfqBlockchainUtils.estimateGasForAsync({ to: takerToken.address, data: invalidCalldata });
                chai_1.expect.fail();
            }
            catch (e) {
                (0, chai_1.expect)(e.message).to.contain('estimateGasForAsync');
            }
        });
        it('successfully estimates gas', async () => {
            const erc20AbiDecimals = `[{
                "constant": true,
                "inputs": [],
                "name": "decimals",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint8"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }]`;
            const erc20 = new ethers_1.Contract(takerToken.address, erc20AbiDecimals);
            const { data: calldata } = await erc20.populateTransaction.decimals();
            if (!calldata) {
                throw new Error('calldata for decimals should not be undefined or empty');
            }
            await rfqBlockchainUtils.estimateGasForAsync({ to: takerToken.address, data: calldata });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,