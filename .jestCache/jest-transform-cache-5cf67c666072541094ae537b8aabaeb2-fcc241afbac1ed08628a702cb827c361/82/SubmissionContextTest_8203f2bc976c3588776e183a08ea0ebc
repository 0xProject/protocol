856e4a7b610cf733897234da430a315e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@0x/utils");
const chai_1 = require("chai");
const ethers_1 = require("ethers");
const ts_mockito_1 = require("ts-mockito");
const constants_1 = require("../../src/core/constants");
const entities_1 = require("../../src/entities");
const types_1 = require("../../src/entities/types");
const SubmissionContext_1 = require("../../src/utils/SubmissionContext");
let mockBlockchainUtils;
describe('SubmissionContext', () => {
    beforeEach(() => {
        mockBlockchainUtils = (0, ts_mockito_1.mock)();
    });
    describe('constructor', () => {
        it('requires a transaction', () => {
            (0, chai_1.expect)(() => new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [])).to.throw('nonzero');
        });
        it('requires all transactions to have unique hashes', () => {
            const transaction1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                gasPrice: new utils_1.BigNumber(1),
            });
            const transaction2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                gasPrice: new utils_1.BigNumber(1),
            });
            (0, chai_1.expect)(() => new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [transaction1, transaction2])).to.throw('unique');
        });
        it('requires all transactions to have the same nonce', () => {
            const transaction1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                gasPrice: new utils_1.BigNumber(1),
            });
            const transaction2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x2',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 1,
                gasPrice: new utils_1.BigNumber(1),
            });
            (0, chai_1.expect)(() => new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [transaction1, transaction2])).to.throw('nonce');
        });
        it('requires all transactions to have the same gas format', () => {
            const transaction1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                gasPrice: new utils_1.BigNumber(1),
            });
            const transaction2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x2',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(1),
                maxPriorityFeePerGas: new utils_1.BigNumber(1),
            });
            (0, chai_1.expect)(() => new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [transaction1, transaction2])).to.throw('type');
        });
        it('fails for invalid EIP-1559 transactions', () => {
            const transaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxPriorityFeePerGas: new utils_1.BigNumber(1),
            });
            (0, chai_1.expect)(() => new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [transaction])).to.throw();
        });
    });
    describe('get transactionType', () => {
        it('handles type-0 transactions', () => {
            const transaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                gasPrice: new utils_1.BigNumber(1),
            });
            const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [transaction]);
            (0, chai_1.expect)(submissionContext.transactionType).to.equal(0);
        });
        it('handles type-2 transactions', () => {
            const transaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(1),
                maxPriorityFeePerGas: new utils_1.BigNumber(1),
            });
            const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [transaction]);
            (0, chai_1.expect)(submissionContext.transactionType).to.equal(2);
        });
    });
    describe('maxGasPrice', () => {
        it('throws for EIP-1559 transactions', () => {
            const transaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(1),
                maxPriorityFeePerGas: new utils_1.BigNumber(1),
            });
            const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [transaction]);
            (0, chai_1.expect)(() => submissionContext.maxGasPrice).to.throw('EIP-1559');
        });
        it('gets the max gas price', () => {
            const transaction1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                gasPrice: new utils_1.BigNumber(1),
            });
            const transaction2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x2',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                gasPrice: new utils_1.BigNumber(2),
            });
            const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [
                transaction1,
                transaction2,
            ]);
            (0, chai_1.expect)(submissionContext.maxGasPrice.toNumber()).to.equal(new utils_1.BigNumber(2).toNumber());
        });
    });
    describe('maxGasFees', () => {
        it('throws for non-EIP-1559 transactions', () => {
            const transaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                gasPrice: new utils_1.BigNumber(1),
            });
            const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [transaction]);
            (0, chai_1.expect)(() => submissionContext.maxGasFees).to.throw('non-EIP-1559');
        });
        it('gets the max gas fees', () => {
            const transaction1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(0),
                maxPriorityFeePerGas: new utils_1.BigNumber(1),
            });
            const transaction2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x2',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(1),
                maxPriorityFeePerGas: new utils_1.BigNumber(0),
            });
            const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [
                transaction1,
                transaction2,
            ]);
            (0, chai_1.expect)(submissionContext.maxGasFees.maxFeePerGas.toNumber()).to.equal(new utils_1.BigNumber(1).toNumber());
            (0, chai_1.expect)(submissionContext.maxGasFees.maxPriorityFeePerGas.toNumber()).to.equal(new utils_1.BigNumber(1).toNumber());
        });
    });
    describe('get firstSubmissionTimestampS', () => {
        it('gets the earliest time a transaction in the context was submitted', () => {
            const fakeEarlierMs = 1640307189361;
            const fakeLaterMs = 1650307189361;
            const transaction1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                createdAt: new Date(fakeLaterMs),
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(0),
                maxPriorityFeePerGas: new utils_1.BigNumber(1),
            });
            const transaction2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                createdAt: new Date(fakeEarlierMs),
                transactionHash: '0x2',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(1),
                maxPriorityFeePerGas: new utils_1.BigNumber(0),
            });
            const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [
                transaction1,
                transaction2,
            ]);
            (0, chai_1.expect)(submissionContext.firstSubmissionTimestampS).to.equal(Math.round(fakeEarlierMs / constants_1.ONE_SECOND_MS));
        });
    });
    describe('getReceiptsAsync', () => {
        it('returns null if no transactions have been mined', async () => {
            const transaction = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(1),
                maxPriorityFeePerGas: new utils_1.BigNumber(1),
            });
            (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0x1']))).thenResolve([undefined]);
            const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [transaction]);
            (0, chai_1.expect)(await submissionContext.getReceiptAsync()).to.equal(null);
        });
        it('returns one transaction receipt have been mined', async () => {
            const transaction1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(1),
                maxPriorityFeePerGas: new utils_1.BigNumber(1),
            });
            const transaction2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x2',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(1),
                maxPriorityFeePerGas: new utils_1.BigNumber(1),
            });
            const receipt = {
                to: '0xto',
                from: '0xfrom',
                contractAddress: '0xcontract',
                transactionIndex: 1,
                gasUsed: ethers_1.BigNumber.from(1),
                logsBloom: '',
                blockHash: '0xblockhash',
                transactionHash: '0x1',
                logs: [],
                blockNumber: 123,
                confirmations: 1,
                cumulativeGasUsed: ethers_1.BigNumber.from(1),
                effectiveGasPrice: ethers_1.BigNumber.from(1),
                byzantium: true,
                type: 2,
                status: 1,
            };
            (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0x1', '0x2']))).thenResolve([receipt, undefined]);
            const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [
                transaction1,
                transaction2,
            ]);
            (0, chai_1.expect)(await submissionContext.getReceiptAsync()).to.equal(receipt);
        });
        it('throws if multiple receipts are returned', () => {
            const transaction1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(1),
                maxPriorityFeePerGas: new utils_1.BigNumber(1),
            });
            const transaction2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                type: types_1.RfqmTransactionSubmissionType.Trade,
                transactionHash: '0x2',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(1),
                maxPriorityFeePerGas: new utils_1.BigNumber(1),
            });
            const receipt = {
                to: '0xto',
                from: '0xfrom',
                contractAddress: '0xcontract',
                transactionIndex: 1,
                gasUsed: ethers_1.BigNumber.from(1),
                logsBloom: '',
                blockHash: '0xblockhash',
                transactionHash: '0x1',
                logs: [],
                blockNumber: 123,
                confirmations: 1,
                cumulativeGasUsed: ethers_1.BigNumber.from(1),
                effectiveGasPrice: ethers_1.BigNumber.from(1),
                byzantium: true,
                type: 2,
                status: 1,
            };
            (0, ts_mockito_1.when)(mockBlockchainUtils.getReceiptsAsync((0, ts_mockito_1.deepEqual)(['0x1', '0x2']))).thenResolve([receipt, receipt]);
            const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [
                transaction1,
                transaction2,
            ]);
            (0, chai_1.expect)(submissionContext.getReceiptAsync()).to.eventually.be.rejectedWith('more than one transaction receipt');
        });
        describe('isBlockConfirmed', () => {
            it('should say no if receipt block is under 3 blocks deep', async () => {
                const receiptBlock = 100;
                const currentBlock = 102;
                (0, chai_1.expect)(SubmissionContext_1.SubmissionContext.isBlockConfirmed(currentBlock, receiptBlock)).to.equal(false);
            });
            it('should say yes if the receipt block is at least 3 blocks deep', async () => {
                const receiptBlock = 100;
                const currentBlock = 103;
                (0, chai_1.expect)(SubmissionContext_1.SubmissionContext.isBlockConfirmed(currentBlock, receiptBlock)).to.equal(true);
            });
        });
        describe('submissionContextStatus', () => {
            it('should return `PendingSubmitted` if none of the transactions is resolved', async () => {
                const transaction1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    transactionHash: '0x1',
                    from: '0xfrom',
                    to: '0xto',
                    orderHash: '0xOrderhash',
                    nonce: 0,
                    maxFeePerGas: new utils_1.BigNumber(1),
                    maxPriorityFeePerGas: new utils_1.BigNumber(1),
                    status: types_1.RfqmTransactionSubmissionStatus.Submitted,
                });
                const transaction2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    transactionHash: '0x2',
                    from: '0xfrom',
                    to: '0xto',
                    orderHash: '0xOrderhash',
                    nonce: 0,
                    maxFeePerGas: new utils_1.BigNumber(1),
                    maxPriorityFeePerGas: new utils_1.BigNumber(1),
                    status: types_1.RfqmTransactionSubmissionStatus.Submitted,
                });
                const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [
                    transaction1,
                    transaction2,
                ]);
                (0, chai_1.expect)(submissionContext.submissionContextStatus).to.deep.equal(types_1.SubmissionContextStatus.PendingSubmitted);
            });
            it('should return the correct status if one of the transactions is resolved', async () => {
                const transaction1 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    transactionHash: '0x1',
                    from: '0xfrom',
                    to: '0xto',
                    orderHash: '0xOrderhash',
                    nonce: 0,
                    maxFeePerGas: new utils_1.BigNumber(1),
                    maxPriorityFeePerGas: new utils_1.BigNumber(1),
                    status: types_1.RfqmTransactionSubmissionStatus.Submitted,
                });
                const transaction2 = new entities_1.RfqmV2TransactionSubmissionEntity({
                    type: types_1.RfqmTransactionSubmissionType.Trade,
                    transactionHash: '0x2',
                    from: '0xfrom',
                    to: '0xto',
                    orderHash: '0xOrderhash',
                    nonce: 0,
                    maxFeePerGas: new utils_1.BigNumber(1),
                    maxPriorityFeePerGas: new utils_1.BigNumber(1),
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed,
                });
                const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)(mockBlockchainUtils), [
                    transaction1,
                    transaction2,
                ]);
                (0, chai_1.expect)(submissionContext.submissionContextStatus).to.deep.equal(types_1.SubmissionContextStatus.SucceededConfirmed);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,