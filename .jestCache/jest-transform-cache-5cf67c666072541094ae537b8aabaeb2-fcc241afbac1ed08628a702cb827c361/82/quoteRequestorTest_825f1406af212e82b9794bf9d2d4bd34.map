{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/quoteRequestor/__tests__/quoteRequestorTest.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/quoteRequestor/__tests__/quoteRequestorTest.ts"],"sourcesContent":["// tslint:disable max-file-line-count\nimport { tokenUtils } from '@0x/dev-utils';\nimport { FillQuoteTransformerOrderType, SignatureType } from '@0x/protocol-utils';\nimport { MarketOperation, StatusCodes } from '@0x/types';\nimport { BigNumber, logUtils } from '@0x/utils';\nimport Axios from 'axios';\nimport { expect } from 'chai';\nimport { Agent as HttpAgent } from 'http';\nimport { Agent as HttpsAgent } from 'https';\nimport * as _ from 'lodash';\n\nimport { KEEP_ALIVE_TTL, NULL_ADDRESS, ONE_SECOND_MS } from '../../core/constants';\nimport { TakerRequestQueryParamsUnnested, V4RFQIndicativeQuote } from '../../quote-server/types';\nimport {\n    AltMockedRfqQuoteResponse,\n    AltQuoteModel,\n    AltQuoteRequestData,\n    AltQuoteSide,\n    AltRfqMakerAssetOfferings,\n    MockedRfqQuoteResponse,\n} from '../altMmTypes';\nimport { QuoteRequestor } from '../QuoteRequestor';\n\nimport { RfqQuoteEndpoint, testHelpers } from './testHelpers';\n\nconst quoteRequestorHttpClient = Axios.create({\n    httpAgent: new HttpAgent({ keepAlive: true, timeout: KEEP_ALIVE_TTL }),\n    httpsAgent: new HttpsAgent({ keepAlive: true, timeout: KEEP_ALIVE_TTL }),\n});\n\nconst ALT_MM_API_KEY = 'averysecurekey';\nconst ALT_PROFILE = 'acoolprofile';\nconst ALT_RFQ_CREDS = {\n    altRfqApiKey: ALT_MM_API_KEY,\n    altRfqProfile: ALT_PROFILE,\n};\n\nconst CREATED_STATUS_CODE = 201;\n\nfunction makeThreeMinuteExpiry(): BigNumber {\n    const expiry = new Date(Date.now());\n    // tslint:disable-next-line: custom-no-magic-numbers\n    expiry.setMinutes(expiry.getMinutes() + 3);\n    return new BigNumber(Math.round(expiry.valueOf() / ONE_SECOND_MS));\n}\n\ndescribe('QuoteRequestor', () => {\n    const [makerToken, takerToken, otherToken1] = tokenUtils.getDummyERC20TokenAddresses();\n    const validSignature = { v: 28, r: '0x', s: '0x', signatureType: SignatureType.EthSign };\n\n    const altRfqAssetOfferings: AltRfqMakerAssetOfferings = {\n        'https://132.0.0.1': [\n            {\n                id: 'XYZ-123',\n                baseAsset: makerToken,\n                quoteAsset: takerToken,\n                baseAssetDecimals: 2,\n                quoteAssetDecimals: 3,\n            },\n        ],\n    };\n\n    describe('requestRfqtFirmQuotesAsync for firm quotes', () => {\n        it('should return successful RFQT requests', async () => {\n            const takerAddress = '0xd209925defc99488e3afff1174e48b4fa628302a';\n            const txOrigin = takerAddress;\n            const apiKey = 'my-ko0l-api-key';\n\n            // Set up RFQT responses\n            // tslint:disable-next-line:array-type\n            const mockedRequests: MockedRfqQuoteResponse[] = [];\n            const altMockedRequests: AltMockedRfqQuoteResponse[] = [];\n\n            const expectedParams: TakerRequestQueryParamsUnnested = {\n                sellTokenAddress: takerToken,\n                buyTokenAddress: makerToken,\n                sellAmountBaseUnits: '10000',\n                comparisonPrice: undefined,\n                takerAddress,\n                txOrigin,\n                protocolVersion: '4',\n            };\n            const mockedDefaults = {\n                requestApiKey: apiKey,\n                requestParams: expectedParams,\n                responseCode: StatusCodes.Success,\n            };\n            const validSignedOrder = {\n                makerToken,\n                takerToken,\n                makerAmount: new BigNumber('1000'),\n                takerAmount: new BigNumber('1000'),\n                maker: takerAddress,\n                taker: takerAddress,\n                pool: '0x',\n                salt: '0',\n                chainId: 1,\n                verifyingContract: takerAddress,\n                txOrigin,\n                expiry: makeThreeMinuteExpiry(),\n                signature: validSignature,\n            };\n            // request is to sell 10000 units of the base token\n            // 10 units at 3 decimals\n            const altFirmRequestData = {\n                market: 'XYZ-123',\n                model: AltQuoteModel.Firm,\n                profile: ALT_PROFILE,\n                side: AltQuoteSide.Sell,\n                meta: {\n                    txOrigin,\n                    taker: takerAddress,\n                    client: apiKey,\n                },\n                value: '10',\n            };\n            const altFirmResponse = {\n                ...altFirmRequestData,\n                id: 'random_id',\n                // tslint:disable-next-line:custom-no-magic-numbers\n                price: new BigNumber(10 / 100).toString(),\n                status: 'active',\n                data: {\n                    '0xv4order': validSignedOrder,\n                },\n            };\n\n            // Successful response\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://1337.0.0.1',\n                responseData: {\n                    signedOrder: validSignedOrder,\n                },\n            });\n            // Another Successful response\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://37.0.0.1',\n                responseData: { signedOrder: validSignedOrder },\n            });\n            // Test out a bad response code, ensure it doesnt cause throw\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://420.0.0.1',\n                responseData: { error: 'bad request' },\n                responseCode: StatusCodes.InternalError,\n            });\n            // Test out a successful response code but a partial order\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://421.0.0.1',\n                responseData: { signedOrder: { makerToken: '123' } },\n            });\n            // A successful response code and invalid response data (encoding)\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://421.1.0.1',\n                responseData: 'this is not JSON!',\n            });\n            // A successful response code and valid order, but for wrong maker asset data\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://422.0.0.1',\n                responseData: { signedOrder: { ...validSignedOrder, makerToken: '0x1234' } },\n            });\n            // A successful response code and valid order, but for wrong taker asset data\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://423.0.0.1',\n                responseData: { signedOrder: { ...validSignedOrder, takerToken: '0x1234' } },\n            });\n            // A successful response code and good order but its unsigned\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://424.0.0.1',\n                responseData: { signedOrder: _.omit(validSignedOrder, ['signature']) },\n            });\n            // A successful response code and good order but for the wrong txOrigin\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://425.0.0.1',\n                responseData: { signedOrder: { ...validSignedOrder, txOrigin: NULL_ADDRESS } },\n            });\n            // A successful response code and order from an alt RFQ implementation\n            altMockedRequests.push({\n                endpoint: 'https://132.0.0.1',\n                mmApiKey: ALT_MM_API_KEY,\n                responseCode: CREATED_STATUS_CODE,\n                requestData: altFirmRequestData,\n                responseData: altFirmResponse,\n            });\n\n            const normalizedSuccessfulOrder = {\n                order: {\n                    ..._.omit(validSignedOrder, ['signature']),\n                    makerAmount: new BigNumber(validSignedOrder.makerAmount),\n                    takerAmount: new BigNumber(validSignedOrder.takerAmount),\n                    expiry: new BigNumber(validSignedOrder.expiry),\n                    salt: new BigNumber(validSignedOrder.salt),\n                },\n                signature: validSignedOrder.signature,\n                type: FillQuoteTransformerOrderType.Rfq,\n            };\n\n            return testHelpers.withMockedRfqQuotes(\n                mockedRequests,\n                altMockedRequests,\n                RfqQuoteEndpoint.Firm,\n                async () => {\n                    const qr = new QuoteRequestor(\n                        {\n                            'https://1337.0.0.1': [[makerToken, takerToken]],\n                            'https://420.0.0.1': [[makerToken, takerToken]],\n                            'https://421.0.0.1': [[makerToken, takerToken]],\n                            'https://421.1.0.1': [[makerToken, takerToken]],\n                            'https://422.0.0.1': [[makerToken, takerToken]],\n                            'https://423.0.0.1': [[makerToken, takerToken]],\n                            'https://424.0.0.1': [[makerToken, takerToken]],\n                            'https://425.0.0.1': [[makerToken, takerToken]],\n                            'https://426.0.0.1':\n                                [] /* Shouldn't ping an RFQ-T provider when they don't support the requested asset pair. */,\n                            'https://37.0.0.1': [[makerToken, takerToken]],\n                        },\n                        quoteRequestorHttpClient,\n                        ALT_RFQ_CREDS,\n                    );\n                    const resp = await qr.requestRfqtFirmQuotesAsync(\n                        makerToken,\n                        takerToken,\n                        new BigNumber(10000),\n                        MarketOperation.Sell,\n                        undefined,\n                        {\n                            integrator: {\n                                allowedChainIds: [],\n                                apiKeys: [],\n                                integratorId: apiKey,\n                                label: 'foo',\n                                plp: false,\n                                rfqm: false,\n                                rfqt: true,\n                            },\n                            takerAddress,\n                            txOrigin: takerAddress,\n                            intentOnFilling: true,\n                            altRfqAssetOfferings,\n                        },\n                    );\n                    expect(resp).to.deep.eq([\n                        normalizedSuccessfulOrder,\n                        normalizedSuccessfulOrder,\n                        normalizedSuccessfulOrder,\n                    ]);\n                },\n                quoteRequestorHttpClient,\n            );\n        });\n    });\n    describe('requestRfqtIndicativeQuotesAsync for Indicative quotes', () => {\n        it('should optionally accept a \"comparisonPrice\" parameter', async () => {\n            const response = QuoteRequestor.makeQueryParameters(\n                otherToken1, // tx origin\n                otherToken1, // taker\n                MarketOperation.Sell,\n                makerToken,\n                takerToken,\n                new BigNumber(1000),\n                new BigNumber(300.2),\n            );\n            expect(response.comparisonPrice).to.eql('300.2');\n        });\n        it('should return successful RFQT requests', async () => {\n            const takerAddress = '0xd209925defc99488e3afff1174e48b4fa628302a';\n            const apiKey = 'my-ko0l-api-key';\n\n            // Set up RFQT responses\n            // tslint:disable-next-line:array-type\n            const mockedRequests: MockedRfqQuoteResponse[] = [];\n            const expectedParams: TakerRequestQueryParamsUnnested = {\n                sellTokenAddress: takerToken,\n                buyTokenAddress: makerToken,\n                sellAmountBaseUnits: '10000',\n                comparisonPrice: undefined,\n                takerAddress,\n                txOrigin: takerAddress,\n                protocolVersion: '4',\n            };\n            const mockedDefaults = {\n                requestApiKey: apiKey,\n                requestParams: expectedParams,\n                responseCode: StatusCodes.Success,\n            };\n\n            // Successful response\n            const successfulQuote1 = {\n                makerToken,\n                takerToken,\n                makerAmount: new BigNumber(expectedParams.sellAmountBaseUnits),\n                takerAmount: new BigNumber(expectedParams.sellAmountBaseUnits),\n                expiry: makeThreeMinuteExpiry(),\n            };\n\n            const goodMMUri1 = 'https://1337.0.0.1';\n            const goodMMUri2 = 'https://37.0.0.1';\n\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: goodMMUri1,\n                responseData: successfulQuote1,\n            });\n            // Test out a bad response code, ensure it doesnt cause throw\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://420.0.0.1',\n                responseData: { error: 'bad request' },\n                responseCode: StatusCodes.InternalError,\n            });\n            // Test out a successful response code but an invalid order\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://421.0.0.1',\n                responseData: { makerToken: '123' },\n            });\n            // A successful response code and valid response data, but for wrong maker asset data\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://422.0.0.1',\n                responseData: { ...successfulQuote1, makerToken: otherToken1 },\n            });\n            // A successful response code and valid response data, but for wrong taker asset data\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://423.0.0.1',\n                responseData: { ...successfulQuote1, takerToken: otherToken1 },\n            });\n            // Another Successful response\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: goodMMUri2,\n                responseData: successfulQuote1,\n            });\n\n            const assetOfferings: { [k: string]: [[string, string]] } = {\n                'https://420.0.0.1': [[makerToken, takerToken]],\n                'https://421.0.0.1': [[makerToken, takerToken]],\n                'https://422.0.0.1': [[makerToken, takerToken]],\n                'https://423.0.0.1': [[makerToken, takerToken]],\n                'https://424.0.0.1': [[makerToken, takerToken]],\n            };\n            assetOfferings[goodMMUri1] = [[makerToken, takerToken]];\n            assetOfferings[goodMMUri2] = [[makerToken, takerToken]];\n\n            return testHelpers.withMockedRfqQuotes(\n                mockedRequests,\n                [],\n                RfqQuoteEndpoint.Indicative,\n                async () => {\n                    const qr = new QuoteRequestor(assetOfferings, quoteRequestorHttpClient);\n                    const resp = await qr.requestRfqtIndicativeQuotesAsync(\n                        makerToken,\n                        takerToken,\n                        new BigNumber(10000),\n                        MarketOperation.Sell,\n                        undefined,\n                        {\n                            integrator: {\n                                allowedChainIds: [],\n                                apiKeys: [],\n                                integratorId: apiKey,\n                                label: 'foo',\n                                plp: false,\n                                rfqm: false,\n                                rfqt: true,\n                            },\n                            takerAddress,\n                            txOrigin: takerAddress,\n                            intentOnFilling: true,\n                        },\n                    );\n                    expect(resp.sort()).to.eql(\n                        [\n                            { ...successfulQuote1, makerUri: goodMMUri1 },\n                            { ...successfulQuote1, makerUri: goodMMUri2 },\n                        ].sort(),\n                    );\n                },\n                quoteRequestorHttpClient,\n            );\n        });\n        it('should only return RFQT requests that meet the timeout', async () => {\n            const takerAddress = '0xd209925defc99488e3afff1174e48b4fa628302a';\n            const apiKey = 'my-ko0l-api-key';\n            const maxTimeoutMs = 10;\n            // tslint:disable-next-line:custom-no-magic-numbers\n            const exceedTimeoutMs = maxTimeoutMs + 50;\n\n            // Set up RFQT responses\n            // tslint:disable-next-line:array-type\n            const mockedRequests: MockedRfqQuoteResponse[] = [];\n            const expectedParams: TakerRequestQueryParamsUnnested = {\n                sellTokenAddress: takerToken,\n                buyTokenAddress: makerToken,\n                sellAmountBaseUnits: '10000',\n                comparisonPrice: undefined,\n                takerAddress,\n                txOrigin: takerAddress,\n                protocolVersion: '4',\n            };\n            const mockedDefaults = {\n                requestApiKey: apiKey,\n                requestParams: expectedParams,\n                responseCode: StatusCodes.Success,\n            };\n\n            // Successful response\n            const successfulQuote1 = {\n                makerToken,\n                takerToken,\n                makerAmount: new BigNumber(expectedParams.sellAmountBaseUnits),\n                takerAmount: new BigNumber(expectedParams.sellAmountBaseUnits),\n                expiry: makeThreeMinuteExpiry(),\n            };\n\n            // One good request\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://1337.0.0.1',\n                responseData: successfulQuote1,\n            });\n\n            // One request that will timeout\n            mockedRequests.push({\n                ...mockedDefaults,\n                endpoint: 'https://420.0.0.1',\n                responseData: successfulQuote1,\n                callback: async () => {\n                    // tslint:disable-next-line:no-inferred-empty-object-type\n                    return new Promise((resolve, _reject) => {\n                        setTimeout(() => {\n                            resolve([StatusCodes.Success, successfulQuote1]);\n                        }, exceedTimeoutMs);\n                    });\n                },\n            });\n\n            return testHelpers.withMockedRfqQuotes(\n                mockedRequests,\n                [],\n                RfqQuoteEndpoint.Indicative,\n                async () => {\n                    const qr = new QuoteRequestor(\n                        {\n                            'https://1337.0.0.1': [[makerToken, takerToken]],\n                            'https://420.0.0.1': [[makerToken, takerToken]],\n                        },\n                        quoteRequestorHttpClient,\n                    );\n                    const resp = await qr.requestRfqtIndicativeQuotesAsync(\n                        makerToken,\n                        takerToken,\n                        new BigNumber(10000),\n                        MarketOperation.Sell,\n                        undefined,\n                        {\n                            integrator: {\n                                allowedChainIds: [],\n                                apiKeys: [],\n                                integratorId: apiKey,\n                                label: 'foo',\n                                plp: false,\n                                rfqm: false,\n                                rfqt: true,\n                            },\n                            takerAddress,\n                            txOrigin: takerAddress,\n                            intentOnFilling: true,\n                            makerEndpointMaxResponseTimeMs: maxTimeoutMs,\n                        },\n                    );\n                    expect(resp.sort()).to.eql([{ ...successfulQuote1, makerUri: 'https://1337.0.0.1' }].sort()); // notice only one result, despite two requests made\n                },\n                quoteRequestorHttpClient,\n            );\n        });\n        it('should return successful RFQT indicative quote requests (Buy)', async () => {\n            const takerAddress = '0xd209925defc99488e3afff1174e48b4fa628302a';\n            const apiKey = 'my-ko0l-api-key';\n\n            // Set up RFQT responses\n            // tslint:disable-next-line:array-type\n            const mockedRequests: MockedRfqQuoteResponse[] = [];\n            const expectedParams: TakerRequestQueryParamsUnnested = {\n                sellTokenAddress: takerToken,\n                buyTokenAddress: makerToken,\n                buyAmountBaseUnits: '10000',\n                comparisonPrice: undefined,\n                takerAddress,\n                txOrigin: takerAddress,\n                protocolVersion: '4',\n            };\n            // Successful response\n            const successfulQuote1 = {\n                makerToken,\n                takerToken,\n                makerAmount: new BigNumber(expectedParams.buyAmountBaseUnits),\n                takerAmount: new BigNumber(expectedParams.buyAmountBaseUnits),\n                expiry: makeThreeMinuteExpiry(),\n            };\n            mockedRequests.push({\n                endpoint: 'https://1337.0.0.1',\n                requestApiKey: apiKey,\n                requestParams: expectedParams,\n                responseData: successfulQuote1,\n                responseCode: StatusCodes.Success,\n            });\n\n            return testHelpers.withMockedRfqQuotes(\n                mockedRequests,\n                [],\n                RfqQuoteEndpoint.Indicative,\n                async () => {\n                    const qr = new QuoteRequestor(\n                        { 'https://1337.0.0.1': [[makerToken, takerToken]] },\n                        quoteRequestorHttpClient,\n                    );\n                    const resp = await qr.requestRfqtIndicativeQuotesAsync(\n                        makerToken,\n                        takerToken,\n                        new BigNumber(10000),\n                        MarketOperation.Buy,\n                        undefined,\n                        {\n                            integrator: {\n                                integratorId: apiKey,\n                                label: 'foo',\n                                apiKeys: [],\n                                allowedChainIds: [],\n                                rfqm: false,\n                                rfqt: true,\n                                plp: false,\n                            },\n                            takerAddress,\n                            txOrigin: takerAddress,\n                            intentOnFilling: true,\n                        },\n                    );\n                    expect(resp.sort()).to.eql([{ ...successfulQuote1, makerUri: 'https://1337.0.0.1' }].sort());\n                },\n                quoteRequestorHttpClient,\n            );\n        });\n        it('should be able to handle and filter RFQ offerings', () => {\n            const tests: [string[] | undefined, string[]][] = [\n                [['https://top.maker'], []],\n                [undefined, ['https://foo.bar/', 'https://lorem.ipsum/']],\n                [['https://lorem.ipsum/'], ['https://lorem.ipsum/']],\n            ];\n            for (const test of tests) {\n                const [apiKeyWhitelist, results] = test;\n                const response = QuoteRequestor.getTypedMakerUrlsAndWhitelist(\n                    {\n                        integrator: {\n                            allowedChainIds: [],\n                            apiKeys: [],\n                            integratorId: 'foo',\n                            label: 'bar',\n                            plp: false,\n                            rfqm: false,\n                            rfqt: true,\n                            whitelistIntegratorUrls: apiKeyWhitelist,\n                        },\n                        altRfqAssetOfferings: {},\n                    },\n                    {\n                        'https://foo.bar/': [\n                            [\n                                '0xA6cD4cb8c62aCDe44739E3Ed0F1d13E0e31f2d94',\n                                '0xF45107c0200a04A8aB9C600cc52A3C89AE5D0489',\n                            ],\n                        ],\n                        'https://lorem.ipsum/': [\n                            [\n                                '0xA6cD4cb8c62aCDe44739E3Ed0F1d13E0e31f2d94',\n                                '0xF45107c0200a04A8aB9C600cc52A3C89AE5D0489',\n                            ],\n                        ],\n                    },\n                );\n                const typedUrls = response.map((typed) => typed.url);\n                expect(typedUrls).to.eql(results);\n            }\n        });\n\n        it('should return successful alt indicative quotes', async () => {\n            const takerAddress = '0xd209925defc99488e3afff1174e48b4fa628302a';\n            const txOrigin = '0xf209925defc99488e3afff1174e48b4fa628302a';\n            const apiKey = 'my-ko0l-api-key';\n\n            // base token has 2 decimals\n            // quote token has 3 decimals\n            const baseToken = makerToken;\n            const quoteToken = takerToken;\n\n            // Set up RFQT responses\n            const altMockedRequests: AltMockedRfqQuoteResponse[] = [];\n            const altScenarios: {\n                successfulQuote: V4RFQIndicativeQuote;\n                requestedMakerToken: string;\n                requestedTakerToken: string;\n                requestedAmount: BigNumber;\n                requestedOperation: MarketOperation;\n            }[] = [];\n\n            // SCENARIO 1\n            // buy, base asset specified\n            // requesting to buy 100 units (10000 base units) of the base token\n            // returning a price of 0.01, which should mean 10000 maker, 1000 taker amount\n            const buyAmountAltRequest: AltQuoteRequestData = {\n                market: 'XYZ-123',\n                model: AltQuoteModel.Indicative,\n                profile: ALT_PROFILE,\n                side: AltQuoteSide.Sell,\n                meta: {\n                    txOrigin,\n                    taker: takerAddress,\n                    client: apiKey,\n                },\n                amount: '100',\n            };\n            // Successful response\n            const buyAmountAltResponse = {\n                ...buyAmountAltRequest,\n                id: 'random_id',\n                // tslint:disable-next-line:custom-no-magic-numbers\n                price: new BigNumber(0.01).toString(),\n                status: 'live',\n            };\n            const successfulBuyAmountQuote: V4RFQIndicativeQuote = {\n                makerToken: baseToken,\n                takerToken: quoteToken,\n                makerAmount: new BigNumber(10000),\n                takerAmount: new BigNumber(1000),\n                expiry: new BigNumber(0),\n            };\n            altMockedRequests.push({\n                endpoint: 'https://132.0.0.1',\n                mmApiKey: ALT_MM_API_KEY,\n                responseCode: CREATED_STATUS_CODE,\n                requestData: buyAmountAltRequest,\n                responseData: buyAmountAltResponse,\n            });\n            altScenarios.push({\n                successfulQuote: successfulBuyAmountQuote,\n                requestedMakerToken: baseToken,\n                requestedTakerToken: quoteToken,\n                requestedAmount: new BigNumber(10000),\n                requestedOperation: MarketOperation.Buy,\n            });\n\n            // SCENARIO 2\n            // alt buy, quote asset specified\n            // user is requesting to sell 1 unit of the quote token, or 1000 base units\n            // returning a price of 0.01, which should mean 10000 maker amount, 1000 taker amount\n            const buyValueAltRequest: AltQuoteRequestData = {\n                market: 'XYZ-123',\n                model: AltQuoteModel.Indicative,\n                profile: ALT_PROFILE,\n                side: AltQuoteSide.Sell,\n                meta: {\n                    txOrigin,\n                    taker: takerAddress,\n                    client: apiKey,\n                },\n                value: '1',\n            };\n            // Successful response\n            const buyValueAltResponse = {\n                ...buyValueAltRequest,\n                id: 'random_id',\n                // tslint:disable-next-line:custom-no-magic-numbers\n                price: new BigNumber(0.01).toString(),\n                status: 'live',\n            };\n            const successfulBuyValueQuote: V4RFQIndicativeQuote = {\n                makerToken: baseToken,\n                takerToken: quoteToken,\n                makerAmount: new BigNumber(10000),\n                takerAmount: new BigNumber(1000),\n                expiry: new BigNumber(0),\n            };\n            altMockedRequests.push({\n                endpoint: 'https://132.0.0.1',\n                mmApiKey: ALT_MM_API_KEY,\n                responseCode: CREATED_STATUS_CODE,\n                requestData: buyValueAltRequest,\n                responseData: buyValueAltResponse,\n            });\n            altScenarios.push({\n                successfulQuote: successfulBuyValueQuote,\n                requestedMakerToken: baseToken,\n                requestedTakerToken: quoteToken,\n                requestedAmount: new BigNumber(1000),\n                requestedOperation: MarketOperation.Sell,\n            });\n\n            // SCENARIO 3\n            // alt sell, base asset specified\n            // user is requesting to sell 100 units (10000 base units) of the base token\n            // returning a price of 0.01, which should mean 10000 taker amount, 1000 maker amount\n            const sellAmountAltRequest: AltQuoteRequestData = {\n                market: 'XYZ-123',\n                model: AltQuoteModel.Indicative,\n                profile: ALT_PROFILE,\n                side: AltQuoteSide.Buy,\n                meta: {\n                    txOrigin,\n                    taker: takerAddress,\n                    client: apiKey,\n                },\n                amount: '100',\n            };\n            // Successful response\n            const sellAmountAltResponse = {\n                ...sellAmountAltRequest,\n                id: 'random_id',\n                // tslint:disable-next-line:custom-no-magic-numbers\n                price: new BigNumber(0.01).toString(),\n                status: 'live',\n            };\n            const successfulSellAmountQuote: V4RFQIndicativeQuote = {\n                makerToken: quoteToken,\n                takerToken: baseToken,\n                makerAmount: new BigNumber(1000),\n                takerAmount: new BigNumber(10000),\n                expiry: new BigNumber(0),\n            };\n            altMockedRequests.push({\n                endpoint: 'https://132.0.0.1',\n                mmApiKey: ALT_MM_API_KEY,\n                responseCode: CREATED_STATUS_CODE,\n                requestData: sellAmountAltRequest,\n                responseData: sellAmountAltResponse,\n            });\n            altScenarios.push({\n                successfulQuote: successfulSellAmountQuote,\n                requestedMakerToken: quoteToken,\n                requestedTakerToken: baseToken,\n                requestedAmount: new BigNumber(10000),\n                requestedOperation: MarketOperation.Sell,\n            });\n\n            // SCENARIO 4\n            // alt sell, quote asset specified\n            // user is requesting to buy 1 unit (1000 base units) of the quote token\n            // returning a price of 0.01, which should mean 10000 taker amount, 1000 maker amount\n            const sellValueAltRequest: AltQuoteRequestData = {\n                market: 'XYZ-123',\n                model: AltQuoteModel.Indicative,\n                profile: ALT_PROFILE,\n                side: AltQuoteSide.Buy,\n                meta: {\n                    txOrigin,\n                    taker: takerAddress,\n                    client: apiKey,\n                },\n                value: '1',\n            };\n            // Successful response\n            const sellValueAltResponse = {\n                ...sellValueAltRequest,\n                id: 'random_id',\n                // tslint:disable-next-line:custom-no-magic-numbers\n                price: new BigNumber(0.01).toString(),\n                status: 'live',\n            };\n            const successfulSellValueQuote: V4RFQIndicativeQuote = {\n                makerToken: quoteToken,\n                takerToken: baseToken,\n                makerAmount: new BigNumber(1000),\n                takerAmount: new BigNumber(10000),\n                expiry: new BigNumber(0),\n            };\n            altMockedRequests.push({\n                endpoint: 'https://132.0.0.1',\n                mmApiKey: ALT_MM_API_KEY,\n                responseCode: CREATED_STATUS_CODE,\n                requestData: sellValueAltRequest,\n                responseData: sellValueAltResponse,\n            });\n            altScenarios.push({\n                successfulQuote: successfulSellValueQuote,\n                requestedMakerToken: quoteToken,\n                requestedTakerToken: baseToken,\n                requestedAmount: new BigNumber(1000),\n                requestedOperation: MarketOperation.Buy,\n            });\n\n            let scenarioCounter = 1;\n            for (const altScenario of altScenarios) {\n                logUtils.log(`Alt MM indicative scenario ${scenarioCounter}`);\n                scenarioCounter += 1;\n                await testHelpers.withMockedRfqQuotes(\n                    [],\n                    altMockedRequests,\n                    RfqQuoteEndpoint.Indicative,\n                    async () => {\n                        const qr = new QuoteRequestor({}, quoteRequestorHttpClient, ALT_RFQ_CREDS);\n                        const resp = await qr.requestRfqtIndicativeQuotesAsync(\n                            altScenario.requestedMakerToken,\n                            altScenario.requestedTakerToken,\n                            altScenario.requestedAmount,\n                            altScenario.requestedOperation,\n                            undefined,\n                            {\n                                integrator: {\n                                    allowedChainIds: [],\n                                    apiKeys: [],\n                                    integratorId: apiKey,\n                                    label: 'foo',\n                                    plp: false,\n                                    rfqm: false,\n                                    rfqt: true,\n                                },\n                                takerAddress,\n                                txOrigin,\n                                intentOnFilling: true,\n                                altRfqAssetOfferings,\n                            },\n                        );\n                        // hack to get the expiry right, since it's dependent on the current timestamp\n                        const expected = { ...altScenario.successfulQuote, expiry: resp[0].expiry };\n                        expect(resp.sort()).to.eql([expected].sort());\n                    },\n                    quoteRequestorHttpClient,\n                );\n            }\n        });\n    });\n});\n"],"version":3}