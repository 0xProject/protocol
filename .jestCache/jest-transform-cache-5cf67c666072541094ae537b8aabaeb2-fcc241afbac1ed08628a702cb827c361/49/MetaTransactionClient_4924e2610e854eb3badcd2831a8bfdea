52677316cad2ba8e8de8d40b0d0eba34
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getQuoteRpc = exports.getV2QuoteAsync = exports.getV1QuoteAsync = void 0;
const api_utils_1 = require("@0x/api-utils");
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const http_status_codes_1 = require("http-status-codes");
const config_1 = require("../config");
const constants_1 = require("../core/constants");
const errors_1 = require("../core/errors");
const meta_transaction_fee_utils_1 = require("../core/meta_transaction_fee_utils");
const types_1 = require("../core/types");
const meta_transaction_pb_1 = require("../proto-ts/meta_transaction.pb");
const ProtoUtils_1 = require("./ProtoUtils");
const rfqm_request_utils_1 = require("./rfqm_request_utils");
/**
 * Queries the MetaTransaction v1 endpoints for an AMM quote wrapped in a
 * MetaTransaction.
 * If no AMM liquidity is available, returns `null`.
 *
 * If a prometheus 'Summary' is provided to the `requestDurationSummary`
 * parameter, the function will call its `observe` method with the request
 * duration in ms.
 *
 * @throws `AxiosError`
 */
async function getV1QuoteAsync(axiosInstance, url, params, meter, noLiquidityLogger) {
    const stopTimer = meter === null || meter === void 0 ? void 0 : meter.requestDurationSummary.startTimer({ chainId: meter.chainId });
    let response;
    try {
        response = await axiosInstance.get(url.toString(), {
            params,
            // TODO (rhinodavid): Formalize this value once we have a good idea of the
            // actual numbers
            timeout: 10000,
            paramsSerializer: (data) => {
                const result = new URLSearchParams({
                    buyToken: data.buyToken,
                    sellToken: data.sellToken,
                    takerAddress: data.takerAddress,
                    integratorId: data.integratorId,
                    chainId: data.chainId.toString(),
                });
                const { affiliateAddress, buyAmount: buyAmountData, sellAmount: sellAmountData, slippagePercentage, quoteUniqueId, } = data;
                affiliateAddress && result.append('affiliateAddress', affiliateAddress);
                buyAmountData && result.append('buyAmount', buyAmountData.toString());
                sellAmountData && result.append('sellAmount', sellAmountData.toString());
                slippagePercentage && result.append('slippagePercentage', slippagePercentage.toString());
                quoteUniqueId && result.append('quoteUniqueId', quoteUniqueId);
                return result.toString();
            },
        });
    }
    catch (e) {
        stopTimer && stopTimer({ success: 'false' });
        return handleQuoteError(e, params, noLiquidityLogger);
    }
    stopTimer && stopTimer({ success: 'true' });
    const { buyAmount, buyTokenAddress, gas, price, sellAmount, sellTokenAddress, metaTransactionHash } = response.data;
    // A fun thing here is that the return from the API, @0x/types:ExchangeProxyMetaTransaction
    // does not match @0x/protocol-utils:MetaTransaction. So, we pull the domain information out
    // and put it at the top level of the constructor parameters
    const metaTransaction = new protocol_utils_1.MetaTransaction((0, rfqm_request_utils_1.stringsToMetaTransactionFields)({
        ...response.data.metaTransaction,
        chainId: response.data.metaTransaction.domain.chainId,
        verifyingContract: response.data.metaTransaction.domain.verifyingContract,
    }));
    const computedHash = metaTransaction.getHash();
    if (computedHash !== metaTransactionHash) {
        throw new Error(`Computered meta-transaction hash ${computedHash} is different from hash returned from meta-transaction endpoints ${metaTransactionHash}`);
    }
    return {
        trade: {
            kind: types_1.GaslessTypes.MetaTransaction,
            hash: metaTransaction.getHash(),
            metaTransaction,
        },
        price: {
            buyAmount: new utils_1.BigNumber(buyAmount),
            buyTokenAddress,
            gas: new utils_1.BigNumber(gas),
            price: new utils_1.BigNumber(price),
            sellAmount: new utils_1.BigNumber(sellAmount),
            sellTokenAddress,
        },
    };
}
exports.getV1QuoteAsync = getV1QuoteAsync;
/**
 * Queries the meta-transaction v2 endpoints for a meta-transaction quote wrapped in a
 * meta-transaction. The meta-transaction type returned could be either v1 or v2.
 *
 * If no liquidity is available, returns `null`.
 *
 * If a prometheus 'Summary' is provided to the `requestDurationSummary`
 * parameter, the function will call its `observe` method with the request
 * duration in ms.
 *
 * @throws `AxiosError`
 */
async function getV2QuoteAsync(axiosInstance, url, params, meter, noLiquidityLogger) {
    const stopTimer = meter === null || meter === void 0 ? void 0 : meter.requestDurationSummary.startTimer({ chainId: meter.chainId });
    let response;
    try {
        response = await axiosInstance.post(url.toString(), params);
    }
    catch (e) {
        stopTimer && stopTimer({ success: 'false' });
        return handleQuoteError(e, params, noLiquidityLogger);
    }
    stopTimer && stopTimer({ success: 'true' });
    const { buyAmount, buyTokenAddress, gas, price, sellAmount, sellTokenAddress, trade: rawTrade } = response.data;
    switch (rawTrade.kind) {
        case types_1.GaslessTypes.MetaTransaction: {
            const metaTransaction = new protocol_utils_1.MetaTransaction((0, rfqm_request_utils_1.stringsToMetaTransactionFields)({
                ...rawTrade.metaTransaction,
            }));
            const computedHash = metaTransaction.getHash();
            if (computedHash !== rawTrade.hash) {
                throw new Error(`Computered meta-transaction hash ${computedHash} is different from hash returned from meta-transaction endpoints ${rawTrade.hash}`);
            }
            return {
                trade: {
                    kind: types_1.GaslessTypes.MetaTransaction,
                    hash: rawTrade.hash,
                    metaTransaction,
                },
                price: {
                    buyAmount: new utils_1.BigNumber(buyAmount),
                    buyTokenAddress,
                    gas: new utils_1.BigNumber(gas),
                    price: new utils_1.BigNumber(price),
                    sellAmount: new utils_1.BigNumber(sellAmount),
                    sellTokenAddress,
                },
                sources: response.data.sources
                    .map((source) => {
                    return {
                        ...source,
                        proportion: new utils_1.BigNumber(source.proportion),
                    };
                })
                    .filter((source) => source.proportion.gt(constants_1.ZERO)),
                fees: (0, meta_transaction_fee_utils_1.rawFeesToFees)(response.data.fees),
            };
        }
        default:
            ((_x) => {
                throw new Error('unreachable');
            })(rawTrade.kind);
    }
}
exports.getV2QuoteAsync = getV2QuoteAsync;
/**
 * Internal function to handle meta-transaction quote responses.
 *
 * @returns Null if it's no liquidty error.
 */
function handleQuoteError(e, // eslint-disable-line @typescript-eslint/no-explicit-any
params, noLiquidityLogger) {
    var _a, _b, _c, _d, _f, _g, _h, _j, _k, _l, _m;
    if ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) {
        const axiosError = e;
        //  The response for no liquidity is a 400 status with a body like:
        //  {
        //     "code": 100,
        //     "reason": "Validation Failed",
        //     "validationErrors": [
        //       {
        //         "field": "sellAmount",
        //         "code": 1004,
        //         "reason": "INSUFFICIENT_ASSET_LIQUIDITY"
        //       }
        //     ]
        //   }
        if (((_b = axiosError.response) === null || _b === void 0 ? void 0 : _b.status) === http_status_codes_1.BAD_REQUEST &&
            ((_f = (_d = (_c = axiosError.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.validationErrors) === null || _f === void 0 ? void 0 : _f.length) === 1 &&
            ((_j = (_h = (_g = axiosError.response) === null || _g === void 0 ? void 0 : _g.data) === null || _h === void 0 ? void 0 : _h.validationErrors) === null || _j === void 0 ? void 0 : _j.map((v) => v.reason).includes(types_1.SwapQuoterError.InsufficientAssetLiquidity))) {
            // Looks like there is no liquidity for the quote...
            noLiquidityLogger &&
                noLiquidityLogger({ ammQuoteRequestParams: params }, `[MetaTransactionClient] No liquidity returned for pair`);
            return null;
        }
        // The response for insufficient fund error (primarily caused by trading amount is less than the fee)
        // is a 400 status and with a body like:
        // {
        //      "code": 109,
        //      "reason": "Insufficient funds for transaction"
        // }
        if (((_k = axiosError.response) === null || _k === void 0 ? void 0 : _k.status) === http_status_codes_1.BAD_REQUEST &&
            ((_m = (_l = axiosError.response) === null || _l === void 0 ? void 0 : _l.data) === null || _m === void 0 ? void 0 : _m.code) === errors_1.APIErrorCodes.InsufficientFundsError) {
            if (params.sellAmount) {
                throw new api_utils_1.ValidationError([
                    {
                        field: 'sellAmount',
                        code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                        reason: 'sellAmount too small',
                    },
                ]);
            }
            throw new api_utils_1.ValidationError([
                {
                    field: 'buyAmount',
                    code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                    reason: 'buyAmount too small',
                },
            ]);
        }
    }
    // This error is neither the standard no liquidity error nor the insufficient fund error
    throw e;
}
/**
 * Queries the MetaTransaction RPC service for an AMM quote wrapped in a
 * MetaTransaction.
 * If no AMM liquidity is available, returns `null`.
 *
 * If a prometheus 'Summary' is provided to the `requestDurationSummary`
 * parameter, the function will call its `observe` method with the request
 * duration in ms.
 */
async function getQuoteRpc(params, meter, noLiquidityLogger) {
    var _a, _b, _c, _d, _f, _g;
    const stopTimer = meter === null || meter === void 0 ? void 0 : meter.requestDurationSummary.startTimer({ chainId: meter.chainId });
    let response;
    try {
        // TODO (rhinodavid): Figure out how to set a timeout
        response = await (0, meta_transaction_pb_1.GetQuote)({
            affiliateAddress: params.affiliateAddress,
            buyAmount: params.buyAmount ? (0, ProtoUtils_1.bigNumberToProto)(params.buyAmount) : undefined,
            buyTokenAddress: params.buyToken,
            chainId: params.chainId,
            integratorId: params.integratorId,
            quoteUniqueId: params.quoteUniqueId,
            sellAmount: params.sellAmount ? (0, ProtoUtils_1.bigNumberToProto)(params.sellAmount) : undefined,
            sellTokenAddress: params.sellToken,
            slippagePercentage: params.slippagePercentage ? (0, ProtoUtils_1.bigNumberToProto)(params.slippagePercentage) : undefined,
            takerAddress: params.takerAddress,
        }, { baseURL: config_1.META_TRANSACTION_SERVICE_RPC_URL });
    }
    catch (_e) {
        stopTimer && stopTimer({ success: 'false' });
        /**
         * Error handling:
         *
         * Twirp throws an error of the following type:
         * export interface TwirpError {
         *   code: ErrorCode;
         *   msg: string;
         *   meta?: Record<string, string>;
         * }
         *
         * To support the current error codes, we type `meta` as:
         *  meta: {
         *     zeroexErrorCode?: APIErrorCodes,
         *     validationErrors: JSON.stringify(ValidationErrorItem[])
         *  }
         */
        const e = _e;
        const zeroexErrorCode = Number.isNaN(parseInt((_b = (_a = e.meta) === null || _a === void 0 ? void 0 : _a.zeroexErrorCode) !== null && _b !== void 0 ? _b : ''))
            ? null
            : parseInt((_d = (_c = e.meta) === null || _c === void 0 ? void 0 : _c.zeroexErrorCode) !== null && _d !== void 0 ? _d : '');
        const validationErrors = JSON.parse((_g = (_f = e.meta) === null || _f === void 0 ? void 0 : _f.validationErrors) !== null && _g !== void 0 ? _g : '[]');
        if ((validationErrors === null || validationErrors === void 0 ? void 0 : validationErrors.length) === 1 &&
            (validationErrors === null || validationErrors === void 0 ? void 0 : validationErrors.map((v) => v.reason).includes(types_1.SwapQuoterError.InsufficientAssetLiquidity))) {
            // Looks like there is no liquidity for the quote...
            noLiquidityLogger &&
                noLiquidityLogger({ ammQuoteRequestParams: params }, `[MetaTransactionClient] No liquidity returned for pair`);
            return null;
        }
        // The response for insufficient fund error (primarily caused by trading amount is less than the fee)
        // is a zeroexGeneralErrorCode `InsufficientFundsError`
        if (zeroexErrorCode === errors_1.APIErrorCodes.InsufficientFundsError) {
            if (params.sellAmount) {
                throw new api_utils_1.ValidationError([
                    {
                        field: 'sellAmount',
                        code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                        reason: 'sellAmount too small',
                    },
                ]);
            }
            throw new api_utils_1.ValidationError([
                {
                    field: 'buyAmount',
                    code: api_utils_1.ValidationErrorCodes.FieldInvalid,
                    reason: 'buyAmount too small',
                },
            ]);
        }
        // This error is neither the standard no liquidity error nor the insufficient fund error
        throw e;
    }
    stopTimer && stopTimer({ success: 'true' });
    return {
        metaTransaction: new protocol_utils_1.MetaTransaction({
            signer: response.metaTransaction.signerAddress,
            sender: response.metaTransaction.senderAddress,
            minGasPrice: (0, ProtoUtils_1.protoToBigNumber)(response.metaTransaction.minGasPrice),
            maxGasPrice: (0, ProtoUtils_1.protoToBigNumber)(response.metaTransaction.maxGasPrice),
            expirationTimeSeconds: (0, ProtoUtils_1.protoToBigNumber)(response.metaTransaction.expirationTimeSeconds),
            salt: (0, ProtoUtils_1.protoToBigNumber)(response.metaTransaction.salt),
            callData: response.metaTransaction.callData,
            value: (0, ProtoUtils_1.protoToBigNumber)(response.metaTransaction.value),
            feeToken: response.metaTransaction.feeTokenAddress,
            feeAmount: (0, ProtoUtils_1.protoToBigNumber)(response.metaTransaction.feeAmount),
            chainId: response.metaTransaction.chainId,
            verifyingContract: response.metaTransaction.verifyingContract,
        }),
        price: {
            buyAmount: (0, ProtoUtils_1.protoToBigNumber)(response.quote.buyAmount),
            buyTokenAddress: response.quote.buyTokenAddress,
            gas: (0, ProtoUtils_1.protoToBigNumber)(response.quote.gas),
            price: (0, ProtoUtils_1.protoToBigNumber)(response.quote.price),
            sellAmount: (0, ProtoUtils_1.protoToBigNumber)(response.quote.sellAmount),
            sellTokenAddress: response.quote.sellTokenAddress,
        },
    };
}
exports.getQuoteRpc = getQuoteRpc;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,