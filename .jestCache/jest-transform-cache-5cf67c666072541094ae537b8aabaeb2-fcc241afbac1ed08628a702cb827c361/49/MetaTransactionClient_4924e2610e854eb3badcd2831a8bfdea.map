{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/MetaTransactionClient.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/MetaTransactionClient.ts"],"sourcesContent":["import { pino, ValidationError, ValidationErrorCodes, ValidationErrorItem } from '@0x/api-utils';\nimport { MetaTransaction, MetaTransactionFields } from '@0x/protocol-utils';\nimport { EIP712DomainWithDefaultSchema } from '@0x/types';\nimport { BigNumber } from '@0x/utils';\nimport { AxiosError, AxiosInstance, AxiosResponse } from 'axios';\nimport { BAD_REQUEST } from 'http-status-codes';\nimport { Summary } from 'prom-client';\nimport { TwirpError } from 'twirpscript';\nimport { META_TRANSACTION_SERVICE_RPC_URL } from '../config';\nimport { ZERO } from '../core/constants';\nimport { APIErrorCodes } from '../core/errors';\nimport { rawFeesToFees } from '../core/meta_transaction_fee_utils';\nimport { GaslessTypes, SwapQuoterError } from '../core/types';\nimport { FeeConfigs, Fees, RawFees } from '../core/types/meta_transaction_fees';\nimport { GetQuote, GetQuoteResponse } from '../proto-ts/meta_transaction.pb';\n\nimport { FetchIndicativeQuoteResponse, LiquiditySource, MetaTransactionTradeResponse } from '../services/types';\nimport { bigNumberToProto, protoToBigNumber } from './ProtoUtils';\nimport { stringsToMetaTransactionFields } from './rfqm_request_utils';\n\ninterface QuoteParams {\n    affiliateAddress?: string;\n    chainId: number;\n    buyAmount?: BigNumber;\n    buyToken: string;\n    integratorId: string;\n    sellAmount?: BigNumber;\n    sellToken: string;\n    slippagePercentage?: BigNumber;\n    takerAddress: string;\n    quoteUniqueId?: string; // ID to use for the quote report `decodedUniqueId`\n    metaTransactionVersion?: 'v1' | 'v2';\n    feeConfigs?: FeeConfigs;\n}\n\n// Types\n//\n// NOTE: These types are copied here from 0x API. Once we have\n// a solution for a real service architecture, these types should\n// become part of the RPC interface published by a future\n// MetaTransactionService. Also we will make it MetatransactionService.\n\ninterface QuoteBase {\n    chainId: number;\n    price: BigNumber;\n    buyAmount: BigNumber;\n    sellAmount: BigNumber;\n    sources: LiquiditySource[];\n    gasPrice: BigNumber;\n    estimatedGas: BigNumber;\n    sellTokenToEthRate: BigNumber;\n    buyTokenToEthRate: BigNumber;\n    protocolFee: BigNumber;\n    minimumProtocolFee: BigNumber;\n    allowanceTarget?: string;\n    // Our calculated price impact or null if we were unable to\n    // to calculate any price impact\n    estimatedPriceImpact: BigNumber | null;\n}\n\n// Raw type of `QuoteBase` as the quote response sent by meta-transaction endpoints is serialized.\ninterface RawQuoteBase {\n    chainId: number;\n    price: string;\n    buyAmount: string;\n    sellAmount: string;\n    sources: {\n        name: string;\n        proportion: string;\n        intermediateToken?: string;\n        hops?: string[];\n    }[];\n    gasPrice: string;\n    estimatedGas: string;\n    sellTokenToEthRate: string;\n    buyTokenToEthRate: string;\n    protocolFee: string;\n    minimumProtocolFee: string;\n    allowanceTarget?: string;\n    // Our calculated price impact or null if we were unable to\n    // to calculate any price impact\n    estimatedPriceImpact: string | null;\n}\n\nexport interface BasePriceResponse extends QuoteBase {\n    sellTokenAddress: string;\n    buyTokenAddress: string;\n    value: BigNumber;\n    gas: BigNumber;\n}\n\n// Raw type of `BasePriceResponse` as the quote response sent by meta-transaction endpoints is serialized.\ninterface RawBasePriceResponse extends RawQuoteBase {\n    sellTokenAddress: string;\n    buyTokenAddress: string;\n    value: string;\n    gas: string;\n}\n\n/****** Types for 0x-api meta-transaction v1 endpoints ******/\n// Raw type of `ExchangeProxyMetaTransaction` as the quote response sent by meta-transaction endpoints is serialized.\ninterface RawExchangeProxyMetaTransaction {\n    signer: string;\n    sender: string;\n    minGasPrice: string;\n    maxGasPrice: string;\n    expirationTimeSeconds: string;\n    salt: string;\n    callData: string;\n    value: string;\n    feeToken: string;\n    feeAmount: string;\n    domain: EIP712DomainWithDefaultSchema;\n}\n\ninterface GetMetaTransactionV1QuoteResponse extends RawBasePriceResponse {\n    metaTransactionHash: string;\n    metaTransaction: RawExchangeProxyMetaTransaction;\n}\n\n/****** Types for 0x-api meta-transaction v2 endpoints ******/\ntype RawTradeResponse = RawMetaTransactionV1TradeResponse /** add RawMetaTransactionV2TradeResponse when it's ready */;\n\ninterface RawMetaTransactionV1TradeResponse {\n    kind: GaslessTypes.MetaTransaction;\n    hash: string;\n    metaTransaction: Record<keyof Omit<MetaTransactionFields, 'chainId'>, string> & { chainId: number };\n}\n\n// Quote response sent by meta-transaction v2 /quote endpoint\ninterface GetMetaTransactionV2QuoteResponse extends RawBasePriceResponse {\n    trade: RawTradeResponse;\n    fees?: RawFees;\n}\n\nexport interface MetaTransactionClientQuoteResponse {\n    trade: MetaTransactionTradeResponse;\n    price: FetchIndicativeQuoteResponse;\n    sources?: LiquiditySource[];\n    fees?: Fees;\n}\n\n/**\n * Queries the MetaTransaction v1 endpoints for an AMM quote wrapped in a\n * MetaTransaction.\n * If no AMM liquidity is available, returns `null`.\n *\n * If a prometheus 'Summary' is provided to the `requestDurationSummary`\n * parameter, the function will call its `observe` method with the request\n * duration in ms.\n *\n * @throws `AxiosError`\n */\nexport async function getV1QuoteAsync(\n    axiosInstance: AxiosInstance,\n    url: URL,\n    params: QuoteParams,\n    meter?: { requestDurationSummary: Summary<'chainId' | 'success'>; chainId: number },\n    noLiquidityLogger?: pino.LogFn,\n): Promise<MetaTransactionClientQuoteResponse | null> {\n    const stopTimer = meter?.requestDurationSummary.startTimer({ chainId: meter.chainId });\n\n    let response: AxiosResponse<GetMetaTransactionV1QuoteResponse>;\n    try {\n        response = await axiosInstance.get<GetMetaTransactionV1QuoteResponse>(url.toString(), {\n            params,\n            // TODO (rhinodavid): Formalize this value once we have a good idea of the\n            // actual numbers\n            timeout: 10000,\n            paramsSerializer: (data: typeof params) => {\n                const result = new URLSearchParams({\n                    buyToken: data.buyToken,\n                    sellToken: data.sellToken,\n                    takerAddress: data.takerAddress,\n                    integratorId: data.integratorId,\n                    chainId: data.chainId.toString(),\n                });\n                const {\n                    affiliateAddress,\n                    buyAmount: buyAmountData,\n                    sellAmount: sellAmountData,\n                    slippagePercentage,\n                    quoteUniqueId,\n                } = data;\n\n                affiliateAddress && result.append('affiliateAddress', affiliateAddress);\n                buyAmountData && result.append('buyAmount', buyAmountData.toString());\n                sellAmountData && result.append('sellAmount', sellAmountData.toString());\n                slippagePercentage && result.append('slippagePercentage', slippagePercentage.toString());\n                quoteUniqueId && result.append('quoteUniqueId', quoteUniqueId);\n\n                return result.toString();\n            },\n        });\n    } catch (e) {\n        stopTimer && stopTimer({ success: 'false' });\n        return handleQuoteError(e, params, noLiquidityLogger);\n    }\n\n    stopTimer && stopTimer({ success: 'true' });\n\n    const { buyAmount, buyTokenAddress, gas, price, sellAmount, sellTokenAddress, metaTransactionHash } = response.data;\n\n    // A fun thing here is that the return from the API, @0x/types:ExchangeProxyMetaTransaction\n    // does not match @0x/protocol-utils:MetaTransaction. So, we pull the domain information out\n    // and put it at the top level of the constructor parameters\n    const metaTransaction = new MetaTransaction(\n        stringsToMetaTransactionFields({\n            ...response.data.metaTransaction,\n            chainId: response.data.metaTransaction.domain.chainId,\n            verifyingContract: response.data.metaTransaction.domain.verifyingContract,\n        }),\n    );\n\n    const computedHash = metaTransaction.getHash();\n    if (computedHash !== metaTransactionHash) {\n        throw new Error(\n            `Computered meta-transaction hash ${computedHash} is different from hash returned from meta-transaction endpoints ${metaTransactionHash}`,\n        );\n    }\n\n    return {\n        trade: {\n            kind: GaslessTypes.MetaTransaction,\n            hash: metaTransaction.getHash(),\n            metaTransaction,\n        },\n        price: {\n            buyAmount: new BigNumber(buyAmount),\n            buyTokenAddress,\n            gas: new BigNumber(gas),\n            price: new BigNumber(price),\n            sellAmount: new BigNumber(sellAmount),\n            sellTokenAddress,\n        },\n    };\n}\n\n/**\n * Queries the meta-transaction v2 endpoints for a meta-transaction quote wrapped in a\n * meta-transaction. The meta-transaction type returned could be either v1 or v2.\n *\n * If no liquidity is available, returns `null`.\n *\n * If a prometheus 'Summary' is provided to the `requestDurationSummary`\n * parameter, the function will call its `observe` method with the request\n * duration in ms.\n *\n * @throws `AxiosError`\n */\nexport async function getV2QuoteAsync(\n    axiosInstance: AxiosInstance,\n    url: URL,\n    params: QuoteParams,\n    meter?: { requestDurationSummary: Summary<'chainId' | 'success'>; chainId: number },\n    noLiquidityLogger?: pino.LogFn,\n): Promise<MetaTransactionClientQuoteResponse | null> {\n    const stopTimer = meter?.requestDurationSummary.startTimer({ chainId: meter.chainId });\n\n    let response: AxiosResponse<GetMetaTransactionV2QuoteResponse>;\n    try {\n        response = await axiosInstance.post<GetMetaTransactionV2QuoteResponse>(url.toString(), params);\n    } catch (e) {\n        stopTimer && stopTimer({ success: 'false' });\n        return handleQuoteError(e, params, noLiquidityLogger);\n    }\n\n    stopTimer && stopTimer({ success: 'true' });\n\n    const { buyAmount, buyTokenAddress, gas, price, sellAmount, sellTokenAddress, trade: rawTrade } = response.data;\n\n    switch (rawTrade.kind) {\n        case GaslessTypes.MetaTransaction: {\n            const metaTransaction = new MetaTransaction(\n                stringsToMetaTransactionFields({\n                    ...rawTrade.metaTransaction,\n                }),\n            );\n\n            const computedHash = metaTransaction.getHash();\n            if (computedHash !== rawTrade.hash) {\n                throw new Error(\n                    `Computered meta-transaction hash ${computedHash} is different from hash returned from meta-transaction endpoints ${rawTrade.hash}`,\n                );\n            }\n\n            return {\n                trade: {\n                    kind: GaslessTypes.MetaTransaction,\n                    hash: rawTrade.hash,\n                    metaTransaction,\n                },\n                price: {\n                    buyAmount: new BigNumber(buyAmount),\n                    buyTokenAddress,\n                    gas: new BigNumber(gas),\n                    price: new BigNumber(price),\n                    sellAmount: new BigNumber(sellAmount),\n                    sellTokenAddress,\n                },\n                sources: response.data.sources\n                    .map((source) => {\n                        return {\n                            ...source,\n                            proportion: new BigNumber(source.proportion),\n                        };\n                    })\n                    .filter((source) => source.proportion.gt(ZERO)),\n                fees: rawFeesToFees(response.data.fees),\n            };\n        }\n        default:\n            ((_x: never) => {\n                throw new Error('unreachable');\n            })(rawTrade.kind);\n    }\n}\n\n/**\n * Internal function to handle meta-transaction quote responses.\n *\n * @returns Null if it's no liquidty error.\n */\nfunction handleQuoteError(\n    e: any, // eslint-disable-line @typescript-eslint/no-explicit-any\n    params: QuoteParams,\n    noLiquidityLogger?: pino.LogFn,\n): null {\n    if (e.response?.data) {\n        const axiosError = e as AxiosError<{\n            code: number;\n            reason: string;\n            validationErrors?: ValidationErrorItem[];\n        }>;\n        //  The response for no liquidity is a 400 status with a body like:\n        //  {\n        //     \"code\": 100,\n        //     \"reason\": \"Validation Failed\",\n        //     \"validationErrors\": [\n        //       {\n        //         \"field\": \"sellAmount\",\n        //         \"code\": 1004,\n        //         \"reason\": \"INSUFFICIENT_ASSET_LIQUIDITY\"\n        //       }\n        //     ]\n        //   }\n        if (\n            axiosError.response?.status === BAD_REQUEST &&\n            axiosError.response?.data?.validationErrors?.length === 1 &&\n            axiosError.response?.data?.validationErrors\n                ?.map((v) => v.reason)\n                .includes(SwapQuoterError.InsufficientAssetLiquidity)\n        ) {\n            // Looks like there is no liquidity for the quote...\n            noLiquidityLogger &&\n                noLiquidityLogger(\n                    { ammQuoteRequestParams: params },\n                    `[MetaTransactionClient] No liquidity returned for pair`,\n                );\n            return null;\n        }\n\n        // The response for insufficient fund error (primarily caused by trading amount is less than the fee)\n        // is a 400 status and with a body like:\n        // {\n        //      \"code\": 109,\n        //      \"reason\": \"Insufficient funds for transaction\"\n        // }\n        if (\n            axiosError.response?.status === BAD_REQUEST &&\n            axiosError.response?.data?.code === APIErrorCodes.InsufficientFundsError\n        ) {\n            if (params.sellAmount) {\n                throw new ValidationError([\n                    {\n                        field: 'sellAmount',\n                        code: ValidationErrorCodes.FieldInvalid,\n                        reason: 'sellAmount too small',\n                    },\n                ]);\n            }\n\n            throw new ValidationError([\n                {\n                    field: 'buyAmount',\n                    code: ValidationErrorCodes.FieldInvalid,\n                    reason: 'buyAmount too small',\n                },\n            ]);\n        }\n    }\n    // This error is neither the standard no liquidity error nor the insufficient fund error\n    throw e;\n}\n\n/**\n * Queries the MetaTransaction RPC service for an AMM quote wrapped in a\n * MetaTransaction.\n * If no AMM liquidity is available, returns `null`.\n *\n * If a prometheus 'Summary' is provided to the `requestDurationSummary`\n * parameter, the function will call its `observe` method with the request\n * duration in ms.\n */\nexport async function getQuoteRpc(\n    params: {\n        affiliateAddress?: string;\n        chainId: number;\n        buyAmount?: BigNumber;\n        buyToken: string;\n        integratorId: string;\n        sellAmount?: BigNumber;\n        sellToken: string;\n        slippagePercentage?: BigNumber;\n        takerAddress: string;\n        quoteUniqueId?: string; // ID to use for the quote report `decodedUniqueId`\n    },\n    meter?: { requestDurationSummary: Summary<'chainId' | 'success'>; chainId: number },\n    noLiquidityLogger?: pino.LogFn,\n): Promise<{ metaTransaction: MetaTransaction; price: FetchIndicativeQuoteResponse } | null> {\n    const stopTimer = meter?.requestDurationSummary.startTimer({ chainId: meter.chainId });\n\n    let response: GetQuoteResponse;\n    try {\n        // TODO (rhinodavid): Figure out how to set a timeout\n        response = await GetQuote(\n            {\n                affiliateAddress: params.affiliateAddress,\n                buyAmount: params.buyAmount ? bigNumberToProto(params.buyAmount) : undefined,\n                buyTokenAddress: params.buyToken,\n                chainId: params.chainId,\n                integratorId: params.integratorId,\n                quoteUniqueId: params.quoteUniqueId,\n                sellAmount: params.sellAmount ? bigNumberToProto(params.sellAmount) : undefined,\n                sellTokenAddress: params.sellToken,\n                slippagePercentage: params.slippagePercentage ? bigNumberToProto(params.slippagePercentage) : undefined,\n                takerAddress: params.takerAddress,\n            },\n            { baseURL: META_TRANSACTION_SERVICE_RPC_URL },\n        );\n    } catch (_e) {\n        stopTimer && stopTimer({ success: 'false' });\n\n        /**\n         * Error handling:\n         *\n         * Twirp throws an error of the following type:\n         * export interface TwirpError {\n         *   code: ErrorCode;\n         *   msg: string;\n         *   meta?: Record<string, string>;\n         * }\n         *\n         * To support the current error codes, we type `meta` as:\n         *  meta: {\n         *     zeroexErrorCode?: APIErrorCodes,\n         *     validationErrors: JSON.stringify(ValidationErrorItem[])\n         *  }\n         */\n\n        const e = _e as TwirpError;\n        const zeroexErrorCode = Number.isNaN(parseInt(e.meta?.zeroexErrorCode ?? ''))\n            ? null\n            : parseInt(e.meta?.zeroexErrorCode ?? '');\n        const validationErrors: ValidationErrorItem[] = JSON.parse(e.meta?.validationErrors ?? '[]');\n\n        if (\n            validationErrors?.length === 1 &&\n            validationErrors?.map((v) => v.reason).includes(SwapQuoterError.InsufficientAssetLiquidity)\n        ) {\n            // Looks like there is no liquidity for the quote...\n            noLiquidityLogger &&\n                noLiquidityLogger(\n                    { ammQuoteRequestParams: params },\n                    `[MetaTransactionClient] No liquidity returned for pair`,\n                );\n            return null;\n        }\n\n        // The response for insufficient fund error (primarily caused by trading amount is less than the fee)\n        // is a zeroexGeneralErrorCode `InsufficientFundsError`\n\n        if (zeroexErrorCode === APIErrorCodes.InsufficientFundsError) {\n            if (params.sellAmount) {\n                throw new ValidationError([\n                    {\n                        field: 'sellAmount',\n                        code: ValidationErrorCodes.FieldInvalid,\n                        reason: 'sellAmount too small',\n                    },\n                ]);\n            }\n\n            throw new ValidationError([\n                {\n                    field: 'buyAmount',\n                    code: ValidationErrorCodes.FieldInvalid,\n                    reason: 'buyAmount too small',\n                },\n            ]);\n        }\n        // This error is neither the standard no liquidity error nor the insufficient fund error\n        throw e;\n    }\n\n    stopTimer && stopTimer({ success: 'true' });\n\n    return {\n        metaTransaction: new MetaTransaction({\n            signer: response.metaTransaction.signerAddress,\n            sender: response.metaTransaction.senderAddress,\n            minGasPrice: protoToBigNumber(response.metaTransaction.minGasPrice),\n            maxGasPrice: protoToBigNumber(response.metaTransaction.maxGasPrice),\n            expirationTimeSeconds: protoToBigNumber(response.metaTransaction.expirationTimeSeconds),\n            salt: protoToBigNumber(response.metaTransaction.salt),\n            callData: response.metaTransaction.callData,\n            value: protoToBigNumber(response.metaTransaction.value),\n            feeToken: response.metaTransaction.feeTokenAddress,\n            feeAmount: protoToBigNumber(response.metaTransaction.feeAmount),\n            chainId: response.metaTransaction.chainId,\n            verifyingContract: response.metaTransaction.verifyingContract,\n        }),\n        price: {\n            buyAmount: protoToBigNumber(response.quote.buyAmount),\n            buyTokenAddress: response.quote.buyTokenAddress,\n            gas: protoToBigNumber(response.quote.gas),\n            price: protoToBigNumber(response.quote.price),\n            sellAmount: protoToBigNumber(response.quote.sellAmount),\n            sellTokenAddress: response.quote.sellTokenAddress,\n        },\n    };\n}\n"],"version":3}