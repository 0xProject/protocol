ac236bae1f925e0a0866f07e55422984
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenPriceOracle = void 0;
const utils_1 = require("@0x/utils");
const prom_client_1 = require("prom-client");
const logger_1 = require("../logger");
/**
 * With this summary metric, some of the things you can do are:
 * - Get the rate of failed price fetch requests:
 *      rate(rfq_token_price_fetch_request_duration_seconds_count{success="false"}[5m])
 * - Get the rate of success price fetch requests:
 *      rate(rfq_token_price_fetch_request_duration_seconds_count{success="true"}[5m])
 * - Get the p95 of request duration of all success price fetch (with the sliding window of 1 minute):
 *      rfq_token_price_fetch_request_duration_seconds{quantile="0.99", success="true"}
 */
const RFQ_TOKEN_PRICE_FETCH_REQUEST_DURATION_SECONDS = new prom_client_1.Summary({
    name: 'rfq_token_price_fetch_request_duration_seconds',
    help: 'Histogram of request duration of token price fetch request',
    percentiles: [0.5, 0.9, 0.95, 0.99, 0.999],
    labelNames: ['chainId', 'success'],
    // Set sliding window to 1 minutes
    maxAgeSeconds: 60,
    // The more number of age buckets, the smoother the time window is moved
    // but it also consumes more memory & CPU for maintaining the bucket.
    ageBuckets: 5,
});
class TokenPriceOracle {
    constructor(_axiosInstance, _definedFiApiKey, _definedFiEndpoint, _cacheTTLMs = 20000) {
        this._axiosInstance = _axiosInstance;
        this._definedFiApiKey = _definedFiApiKey;
        this._definedFiEndpoint = _definedFiEndpoint;
        this._cacheTTLMs = _cacheTTLMs;
        if (!_definedFiApiKey) {
            throw new Error('Missing Defined.Fi API Key');
        }
        this._tokenPriceCache = new Map();
    }
    /**
     * Fetch the current price of multiple tokens. The returned array will be a list
     * of result for each item in passed via params in the same order.
     */
    async batchFetchTokenPriceAsync(params) {
        // Note: we can actually batching the getPrice requests in a single GraphQL query
        // but this is for future improvement. For now, batching via sending multiple graphql requests
        // in parallel should be sufficient
        return Promise.all(params.map((p) => this._fetchTokenPriceCachedAsync(p)));
    }
    async _fetchTokenPriceCachedAsync(params) {
        const cacheKey = `${params.chainId}:${params.tokenAddress}`;
        const cacheData = this._tokenPriceCache.get(cacheKey);
        if (cacheData && cacheData[0] > Date.now()) {
            return cacheData[1];
        }
        const freshData = await this._fetchTokenPriceAsync(params);
        this._tokenPriceCache.set(cacheKey, [Date.now() + this._cacheTTLMs, freshData]);
        return freshData;
    }
    async _fetchTokenPriceAsync(params) {
        var _a, _b;
        const stopTimer = RFQ_TOKEN_PRICE_FETCH_REQUEST_DURATION_SECONDS.startTimer({
            chainId: params.chainId.toString(),
        });
        try {
            const { data } = await this._axiosInstance.post(this._definedFiEndpoint, {
                query: `
                        query getPrice {
                            getPrice(address: "${params.tokenAddress}", networkId: ${params.chainId}) {
                              priceUsd
                            }
                        }
                    `,
            }, {
                headers: { 'x-api-key': this._definedFiApiKey },
            });
            const priceInUsd = ((_b = (_a = data === null || data === void 0 ? void 0 : data.data) === null || _a === void 0 ? void 0 : _a.getPrice) === null || _b === void 0 ? void 0 : _b.priceUsd) || null;
            if (!priceInUsd) {
                throw new Error(`Got 200 but without price value. Response body: ${JSON.stringify(data)}`);
            }
            stopTimer({ success: 'true' });
            return new utils_1.BigNumber(priceInUsd).shiftedBy(params.tokenDecimals * -1); // USD price of 1 base unit
        }
        catch (error) {
            logger_1.logger.error({ ...params, message: error.message }, 'Failed to fetch token price');
            stopTimer({ success: 'false' });
            return null;
        }
    }
}
exports.TokenPriceOracle = TokenPriceOracle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,