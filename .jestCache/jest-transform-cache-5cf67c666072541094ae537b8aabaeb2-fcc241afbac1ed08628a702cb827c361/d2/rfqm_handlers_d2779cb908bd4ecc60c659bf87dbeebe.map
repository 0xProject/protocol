{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/rfqm_handlers.ts","mappings":";;;AAAA,qCAAqC;AACrC,6CAA0F;AAC1F,uDAA8C;AAC9C,uDAAiH;AACjH,qCAAoD;AAEpD,gDAAgD;AAChD,6CAAsC;AAGtC,6CAA0C;AAU1C,yCAKuB;AAEvB,kEAA+F;AAC/F,oEAMqC;AAErC,uDAAmD;AAEnD,MAAM,6BAA6B,GAAG,IAAI,qBAAO,CAAC;IAC9C,IAAI,EAAE,yCAAyC;IAC/C,IAAI,EAAE,6CAA6C;IACnD,UAAU,EAAE,CAAC,iBAAiB,EAAE,SAAS,CAAC;CAC7C,CAAC,CAAC;AAEH,MAAM,+BAA+B,GAAG,IAAI,qBAAO,CAAC;IAChD,IAAI,EAAE,yCAAyC;IAC/C,IAAI,EAAE,0DAA0D;IAChE,UAAU,EAAE,CAAC,iBAAiB,EAAE,SAAS,CAAC;CAC7C,CAAC,CAAC;AAEH,MAAM,2BAA2B,GAAG,IAAI,qBAAO,CAAC;IAC5C,IAAI,EAAE,qCAAqC;IAC3C,IAAI,EAAE,0DAA0D;IAChE,UAAU,EAAE,CAAC,iBAAiB,EAAE,SAAS,CAAC;CAC7C,CAAC,CAAC;AAEH,MAAM,uBAAuB,GAAG,IAAI,qBAAO,CAAC;IACxC,IAAI,EAAE,mCAAmC;IACzC,IAAI,EAAE,uCAAuC;IAC7C,UAAU,EAAE,CAAC,iBAAiB,EAAE,SAAS,CAAC;CAC7C,CAAC,CAAC;AAEH,MAAM,yBAAyB,GAAG,IAAI,qBAAO,CAAC;IAC1C,IAAI,EAAE,mCAAmC;IACzC,IAAI,EAAE,oDAAoD;IAC1D,UAAU,EAAE,CAAC,iBAAiB,EAAE,SAAS,CAAC;CAC7C,CAAC,CAAC;AAEH,MAAM,qBAAqB,GAAG,IAAI,qBAAO,CAAC;IACtC,IAAI,EAAE,+BAA+B;IACrC,IAAI,EAAE,oDAAoD;IAC1D,UAAU,EAAE,CAAC,iBAAiB,EAAE,SAAS,CAAC;CAC7C,CAAC,CAAC;AAEH,MAAM,2BAA2B,GAAG,IAAI,qBAAO,CAAC;IAC5C,IAAI,EAAE,qCAAqC;IAC3C,IAAI,EAAE,gDAAgD;IACtD,UAAU,EAAE,CAAC,iBAAiB,EAAE,SAAS,CAAC;CAC7C,CAAC,CAAC;AAEH,6FAA6F;AAC7F,MAAM,qCAAqC,GAAG,KAAK,CAAC;AAIpD,MAAa,YAAY;IAErB,YAA6B,aAA2B,EAAmB,cAA6B;QAA3E,kBAAa,GAAb,aAAa,CAAc;QAAmB,mBAAc,GAAd,cAAc,CAAe;QADvF,sCAAiC,GAAG,IAAI,GAAG,EAAsC,CAAC;IACQ,CAAC;IAErG,KAAK,CAAC,uBAAuB,CAAC,GAAoB,EAAE,GAAqB;QAC5E,gBAAgB;QAChB,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,qCAAqC,CAAC,GAAG,CAAC,CAAC;QAClF,0DAA0D;QAC1D,6BAA6B,CAAC,GAAG,CAAC;YAC9B,eAAe,EAAE,MAAM,CAAC,UAAU,CAAC,KAAK;YACxC,OAAO;SACV,CAAC,CAAC;QAEH,8BAA8B;QAC9B,IAAI,eAAe,CAAC;QACpB,IAAI;YACA,eAAe,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;SAC/F;QAAC,OAAO,CAAC,EAAE;YACR,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,8DAA8D,CAAC,CAAC;YACjF,2BAA2B,CAAC,GAAG,CAAC;gBAC5B,eAAe,EAAE,MAAM,CAAC,UAAU,CAAC,KAAK;gBACxC,OAAO;aACV,CAAC,CAAC;YACH,MAAM,CAAC,CAAC;SACX;QAED,wBAAwB;QACxB,IAAI,eAAe,KAAK,IAAI,EAAE;YAC1B,+BAA+B,CAAC,GAAG,CAAC;gBAChC,eAAe,EAAE,MAAM,CAAC,UAAU,CAAC,KAAK;gBACxC,OAAO;aACV,CAAC,CAAC;SACN;QAED,SAAS;QACT,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC;YAC3B,kBAAkB,EAAE,eAAe,KAAK,IAAI;YAC5C,GAAG,eAAe;SACrB,CAAC,CAAC;IACP,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,GAAoB,EAAE,GAAqB;QACtE,gBAAgB;QAChB,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC;QAC5E,0DAA0D;QAC1D,uBAAuB,CAAC,GAAG,CAAC;YACxB,eAAe,EAAE,MAAM,CAAC,UAAU,CAAC,KAAK;YACxC,OAAO;SACV,CAAC,CAAC;QAEH,wBAAwB;QACxB,IAAI,SAA2C,CAAC;QAChD,IAAI;YACA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;YACnF,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC;SAC5B;QAAC,OAAO,CAAC,EAAE;YACR,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,wDAAwD,CAAC,CAAC;YAC3E,qBAAqB,CAAC,GAAG,CAAC;gBACtB,eAAe,EAAE,MAAM,CAAC,UAAU,CAAC,KAAK;gBACxC,OAAO;aACV,CAAC,CAAC;YACH,MAAM,CAAC,CAAC;SACX;QAED,wBAAwB;QACxB,IAAI,SAAS,KAAK,IAAI,EAAE;YACpB,yBAAyB,CAAC,GAAG,CAAC;gBAC1B,eAAe,EAAE,MAAM,CAAC,UAAU,CAAC,KAAK;gBACxC,OAAO;aACV,CAAC,CAAC;SACN;QAED,SAAS;QACT,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC;YAC3B,kBAAkB,EAAE,SAAS,KAAK,IAAI;YACtC,GAAG,SAAS;SACf,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,cAAc,CAAC,GAAoB,EAAE,GAAqB;QACnE,MAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;QACpC,MAAM,YAAY,GAAG,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACzE,IAAI,MAAyB,CAAC;QAC9B,IAAI,CAAC,YAAY,EAAE;YACf,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,mBAAmB,EAAE,CAAC;YACvE,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;SAC7E;aAAM;YACH,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YAC1D,IAAI,UAAU,IAAI,qCAAqC,EAAE;gBACrD,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,mBAAmB,EAAE,CAAC;gBACvE,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;aAC7E;iBAAM;gBACH,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;aAC5B;SACJ;QAED,MAAM,QAAQ,GAAG,IAAA,kDAA8B,EAAC,MAAM,CAAC,CAAC;QACxD,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,GAAoB,EAAE,GAAqB;QACnE,MAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;QACpC,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAEjC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAEjF,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC;IAC9F,CAAC;IAEM,KAAK,CAAC,sBAAsB,CAAC,GAAoB,EAAE,GAAqB;QAC3E,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC;QAChF,2BAA2B,CAAC,GAAG,CAAC;YAC5B,eAAe,EAAE,UAAU,CAAC,KAAK;YACjC,OAAO;SACV,CAAC,CAAC;QACH,IAAI;YACA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAAC;YAChG,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACjD;QAAC,OAAO,CAAC,EAAE;YACR,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,mDAAmD,CAAC,CAAC;YACtE,MAAM,CAAC,CAAC;SACX;IACL,CAAC;IAEM,KAAK,CAAC,kCAAkC,CAAC,GAAoB,EAAE,GAAqB;QACvF,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,yCAAyC,CAAC,GAAG,CAAC,CAAC;QAC5F,2BAA2B,CAAC,GAAG,CAAC;YAC5B,eAAe,EAAE,UAAU,CAAC,KAAK;YACjC,OAAO;SACV,CAAC,CAAC;QACH,IAAI;YACA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,0CAA0C,CAAC,MAAM,CAAC,CAAC;YAC5G,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACjD;QAAC,OAAO,CAAC,EAAE;YACR,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,iEAAiE,CAAC,CAAC;YACpF,MAAM,CAAC,CAAC;SACX;IACL,CAAC;IAEO,KAAK,CAAC,+BAA+B,CACzC,GAAoB;QAEpB,6DAA6D;QAC7D,8DAA8D;QAC9D,0BAAW,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,iBAAO,CAAC,sBAA6B,CAAC,CAAC;QAC7E,MAAM,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC;QAC5C,MAAM,mBAAmB,GAAG,GAAG,CAAC,KAAK,CAAC,aAAa,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAC9E,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,6CAA6C,CAAC,GAAG,CAAC,CAAC;QAC1F,IAAI,CAAC,oBAAY,CAAC,SAAS,CAAC,YAAsB,CAAC,EAAE;YACjD,MAAM,IAAI,2BAAe,CAAC;gBACtB;oBACI,KAAK,EAAE,cAAc;oBACrB,IAAI,EAAE,gCAAoB,CAAC,cAAc;oBACzC,MAAM,EAAE,mCAAmC;iBAC9C;aACJ,CAAC,CAAC;SACN;QACD,OAAO;YACH,OAAO;YACP,MAAM,EAAE;gBACJ,GAAG,MAAM;gBACT,YAAY,EAAE,YAAsB;gBACpC,aAAa,EAAE,mBAAmB;aACrC;SACJ,CAAC;IACN,CAAC;IAEO,mBAAmB,CAAC,OAAe;QACvC,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAEhD,IAAI,CAAC,OAAO,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;SACxD;QACD,OAAO,OAAO,CAAC;IACnB,CAAC;IAED;;;OAGG;IACK,eAAe,CAAC,MAA0B,EAAE,OAAe;QAC/D,IAAI,MAAM,KAAK,SAAS,EAAE;YACtB,MAAM,IAAI,8BAAkB,CAAC,6BAA6B,CAAC,CAAC;SAC/D;QACD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,sBAAsB,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAC3D,MAAM,IAAI,8BAAkB,CAAC,wCAAwC,CAAC,CAAC;SAC1E;QACD,MAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC;QAC1E,IAAI,CAAC,YAAY,EAAE;YACf,sDAAsD;YACtD,MAAM,IAAI,8BAAkB,CAAC,yCAAyC,CAAC,CAAC;SAC3E;QACD,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,YAAY,CAAC,CAAC;QAC9E,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YAC/C,MAAM,IAAI,8BAAkB,CAAC,0CAA0C,OAAO,EAAE,CAAC,CAAC;SACrF;QACD,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;IAClC,CAAC;IAEO,KAAK,CAAC,qCAAqC,CAC/C,GAAoB;QAEpB,6DAA6D;QAC7D,8DAA8D;QAC9D,0BAAW,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,iBAAO,CAAC,4BAAmC,CAAC,CAAC;QACnF,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;QACnC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,6CAA6C,CAAC,GAAG,CAAC,CAAC;QAE1F,OAAO;YACH,OAAO;YACP,MAAM,EAAE;gBACJ,GAAG,MAAM;gBACT,YAAY,EAAE,YAAsB;aACvC;SACJ,CAAC;IACN,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,6CAA6C,CACvD,GAAoB;QAEpB,MAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;QACpC,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,CAAC;QAC/E,MAAM,EAAE,gBAAgB,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;QAEvC,eAAe;QACf,MAAM,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,SAAmB,CAAC;QACnD,MAAM,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,QAAkB,CAAC;QACjD,6BAA6B,CAAC,YAAY,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;QAElE,IAAI,gBAAwB,CAAC;QAC7B,IAAI,iBAAyB,CAAC;QAC9B,IAAI,uBAA+B,CAAC;QACpC,IAAI,wBAAgC,CAAC;QAErC,IAAI;YACA,uBAAuB,GAAG,WAAW,CAAC,iBAAiB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC;gBACtE,CAAC,CAAC,WAAW;gBACb,CAAC,CAAC,wBAAwB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YACrD,gBAAgB,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;SACjG;QAAC,MAAM;YACJ,MAAM,IAAI,2BAAe,CAAC;gBACtB;oBACI,KAAK,EAAE,UAAU;oBACjB,IAAI,EAAE,gCAAoB,CAAC,mBAAmB;oBAC9C,MAAM,EAAE,SAAS,WAAW,2BAA2B;iBAC1D;aACJ,CAAC,CAAC;SACN;QAED,IAAI;YACA,wBAAwB,GAAG,YAAY,CAAC,iBAAiB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC;gBACxE,CAAC,CAAC,YAAY;gBACd,CAAC,CAAC,wBAAwB,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;YACtD,iBAAiB,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;SACnG;QAAC,MAAM;YACJ,MAAM,IAAI,2BAAe,CAAC;gBACtB;oBACI,KAAK,EAAE,WAAW;oBAClB,IAAI,EAAE,gCAAoB,CAAC,mBAAmB;oBAC9C,MAAM,EAAE,SAAS,YAAY,2BAA2B;iBAC3D;aACJ,CAAC,CAAC;SACN;QAED,sBAAsB;QACtB,MAAM,UAAU,GACZ,GAAG,CAAC,KAAK,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,iBAAS,CAAC,GAAG,CAAC,KAAK,CAAC,UAAoB,CAAC,CAAC;QACnG,MAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,iBAAS,CAAC,GAAG,CAAC,KAAK,CAAC,SAAmB,CAAC,CAAC;QAE/G,OAAO;YACH,OAAO;YACP,MAAM,EAAE;gBACJ,SAAS;gBACT,QAAQ,EAAE,uBAAuB;gBACjC,gBAAgB;gBAChB,UAAU;gBACV,UAAU;gBACV,SAAS,EAAE,wBAAwB;gBACnC,iBAAiB;gBACjB,gBAAgB,EAAE,gBAA0B;aAC/C;SACJ,CAAC;IACN,CAAC;IAEO,6BAA6B,CAAC,GAAoB;QAKtD,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,IAAoB,CAAC;QAC3C,MAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;QACpC,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,CAAC;QAE/E,IAAI,IAAI,KAAK,oBAAY,CAAC,QAAQ,EAAE;YAChC,MAAM,KAAK,GAAG,IAAI,yBAAQ,CAAC,IAAA,4CAAuB,EAAC,GAAG,CAAC,IAAI,CAAC,KAA0B,CAAC,CAAC,CAAC;YACzF,MAAM,SAAS,GAAG,IAAA,uCAAkB,EAAC,GAAG,CAAC,IAAI,CAAC,SAAkC,CAAC,CAAC;YAClF,OAAO;gBACH,OAAO;gBACP,UAAU;gBACV,MAAM,EAAE;oBACJ,IAAI;oBACJ,KAAK;oBACL,SAAS;iBACZ;aACJ,CAAC;SACL;aAAM;YACH,MAAM,IAAI,2BAAe,CAAC;gBACtB;oBACI,KAAK,EAAE,MAAM;oBACb,IAAI,EAAE,gCAAoB,CAAC,YAAY;oBACvC,MAAM,EAAE,GAAG,IAAI,iCAAiC;iBACnD;aACJ,CAAC,CAAC;SACN;IACL,CAAC;IAEO,yCAAyC,CAG7C,GAAoB;QAMpB,MAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;QACpC,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,CAAC;QAE/E,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAErC,MAAM,YAAY,GAAwD,EAAE,CAAC;QAE7E,wBAAwB;QACxB,IAAI,QAAQ,EAAE;YACV,IACI,QAAQ,CAAC,IAAI,KAAK,4BAAoB,CAAC,sBAAsB;gBAC7D,QAAQ,CAAC,IAAI,KAAK,4BAAoB,CAAC,MAAM,EAC/C;gBACE,MAAM,MAAM,GAAG,IAAA,2CAAsB,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACvD,MAAM,SAAS,GAAG,IAAA,uCAAkB,EAAC,QAAQ,CAAC,SAAkC,CAAC,CAAC;gBAClF,YAAY,CAAC,QAAQ,GAAG;oBACpB,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,6DAA6D;oBAC7D,8DAA8D;oBAC9D,MAAM,EAAE,MAAa;oBACrB,SAAS;iBACZ,CAAC;aACL;iBAAM;gBACH,MAAM,IAAI,2BAAe,CAAC;oBACtB;wBACI,KAAK,EAAE,UAAU;wBACjB,IAAI,EAAE,gCAAoB,CAAC,YAAY;wBACvC,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,0CAA0C;qBACrE;iBACJ,CAAC,CAAC;aACN;SACJ;QAED,qBAAqB;QACrB,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC;QAC7B,IAAI,mCAAwE,CAAC;QAC7E,IAAI,SAAS,KAAK,oBAAY,CAAC,QAAQ,EAAE;YACrC,MAAM,KAAK,GAAG,IAAI,yBAAQ,CAAC,IAAA,4CAAuB,EAAC,KAAK,CAAC,KAA0B,CAAC,CAAC,CAAC;YACtF,MAAM,SAAS,GAAG,IAAA,uCAAkB,EAAC,KAAK,CAAC,SAAkC,CAAC,CAAC;YAC/E,mCAAmC,GAAG;gBAClC,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,KAAK;gBACL,SAAS;aACZ,CAAC;SACL;aAAM;YACH,MAAM,IAAI,2BAAe,CAAC;gBACtB;oBACI,KAAK,EAAE,MAAM;oBACb,IAAI,EAAE,gCAAoB,CAAC,YAAY;oBACvC,MAAM,EAAE,GAAG,KAAK,CAAC,IAAI,uCAAuC;iBAC/D;aACJ,CAAC,CAAC;SACN;QAED,OAAO;YACH,OAAO;YACP,UAAU;YACV,MAAM,EAAE;gBACJ,GAAG,YAAY;gBACf,IAAI,EAAE,oBAAY,CAAC,QAAQ;gBAC3B,KAAK,EAAE,mCAAmC;aAC7C;SACJ,CAAC;IACN,CAAC;CACJ;AA9YD,oCA8YC;AAED;;;;;GAKG;AACH,MAAM,cAAc,GAAG,CAAC,GAAoB,EAAU,EAAE;IACpD,MAAM,iBAAiB,GAAG,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IACpD,IAAI,iBAAiB,KAAK,SAAS,EAAE;QACjC,OAAO,CAAC,CAAC;KACZ;SAAM;QACH,MAAM,SAAS,GAAG,QAAQ,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;QAClD,IAAI,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;YACzB,MAAM,IAAI,2BAAe,CAAC;gBACtB;oBACI,KAAK,EAAE,aAAa;oBACpB,IAAI,EAAE,gCAAoB,CAAC,YAAY;oBACvC,MAAM,EAAE,kBAAkB;iBAC7B;aACJ,CAAC,CAAC;SACN;QACD,OAAO,SAAS,CAAC;KACpB;AACL,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,wBAAwB,GAAG,CAAC,MAAc,EAAE,OAAe,EAAU,EAAE;;IACzE,MAAM,OAAO,GAAG,MAAA,IAAA,yCAAwB,EAAC,MAAM,EAAE,OAAO,CAAC,0CAAE,YAAY,CAAC;IACxE,IAAI,CAAC,OAAO,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;KACxC;IACD,OAAO,OAAO,CAAC;AACnB,CAAC,CAAC;AAEF,MAAM,6BAA6B,GAAG,CAAC,KAAa,EAAE,OAAe,EAAE,KAAa,EAAW,EAAE;IAC7F,IAAI,IAAA,wCAAuB,EAAC,KAAK,EAAE,OAAO,CAAC,EAAE;QACzC,MAAM,MAAM,GAAG,IAAA,yCAAwB,EAAC,OAAO,CAAC,CAAC;QACjD,MAAM,IAAI,2BAAe,CAAC;YACtB;gBACI,KAAK;gBACL,IAAI,EAAE,gCAAoB,CAAC,iBAAiB;gBAC5C,MAAM,EAAE,gDAAgD,MAAM,UAAU;aAC3E;SACJ,CAAC,CAAC;KACN;IAED,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/rfqm_handlers.ts"],"sourcesContent":["// tslint:disable:max-file-line-count\r\nimport { InvalidAPIKeyError, ValidationError, ValidationErrorCodes } from '@0x/api-utils';\r\nimport { OtcOrder } from '@0x/protocol-utils';\r\nimport { getTokenMetadataIfExists, isNativeSymbolOrAddress, nativeWrappedTokenSymbol } from '@0x/token-metadata';\r\nimport { addressUtils, BigNumber } from '@0x/utils';\r\nimport * as express from 'express';\r\nimport * as HttpStatus from 'http-status-codes';\r\nimport { Counter } from 'prom-client';\r\n\r\nimport { Integrator } from '../config';\r\nimport { schemas } from '../core/schemas';\r\nimport { RfqmService } from '../services/rfqm_service';\r\nimport {\r\n    FetchFirmQuoteParams,\r\n    FetchIndicativeQuoteParams,\r\n    FetchQuoteParamsBase,\r\n    OtcOrderRfqmQuoteResponse,\r\n    OtcOrderSubmitRfqmSignedQuoteParams,\r\n    SubmitRfqmSignedQuoteWithApprovalParams,\r\n} from '../services/types';\r\nimport {\r\n    ExecuteMetaTransactionEip712Context,\r\n    GaslessApprovalTypes,\r\n    GaslessTypes,\r\n    PermitEip712Context,\r\n} from '../core/types';\r\nimport { ConfigManager } from '../utils/config_manager';\r\nimport { HealthCheckResult, transformResultToShortResponse } from '../utils/rfqm_health_check';\r\nimport {\r\n    RawOtcOrderFields,\r\n    StringSignatureFields,\r\n    stringsToEIP712Context,\r\n    stringsToOtcOrderFields,\r\n    stringsToSignature,\r\n} from '../utils/rfqm_request_utils';\r\nimport { RfqmServices } from '../utils/rfqm_service_builder';\r\nimport { schemaUtils } from '../core/schema_utils';\r\n\r\nconst RFQM_INDICATIVE_QUOTE_REQUEST = new Counter({\r\n    name: 'rfqm_handler_indicative_quote_requested',\r\n    help: 'Request made to fetch rfqm indicative quote',\r\n    labelNames: ['integratorLabel', 'chainId'],\r\n});\r\n\r\nconst RFQM_INDICATIVE_QUOTE_NOT_FOUND = new Counter({\r\n    name: 'rfqm_handler_indicative_quote_not_found',\r\n    help: 'Request to fetch rfqm indicative quote returned no quote',\r\n    labelNames: ['integratorLabel', 'chainId'],\r\n});\r\n\r\nconst RFQM_INDICATIVE_QUOTE_ERROR = new Counter({\r\n    name: 'rfqm_handler_indicative_quote_error',\r\n    help: 'Request to fetch rfqm indicative quote resulted in error',\r\n    labelNames: ['integratorLabel', 'chainId'],\r\n});\r\n\r\nconst RFQM_FIRM_QUOTE_REQUEST = new Counter({\r\n    name: 'rfqm_handler_firm_quote_requested',\r\n    help: 'Request made to fetch rfqm firm quote',\r\n    labelNames: ['integratorLabel', 'chainId'],\r\n});\r\n\r\nconst RFQM_FIRM_QUOTE_NOT_FOUND = new Counter({\r\n    name: 'rfqm_handler_firm_quote_not_found',\r\n    help: 'Request to fetch rfqm firm quote returned no quote',\r\n    labelNames: ['integratorLabel', 'chainId'],\r\n});\r\n\r\nconst RFQM_FIRM_QUOTE_ERROR = new Counter({\r\n    name: 'rfqm_handler_firm_quote_error',\r\n    help: 'Request to fetch rfqm firm quote resulted in error',\r\n    labelNames: ['integratorLabel', 'chainId'],\r\n});\r\n\r\nconst RFQM_SIGNED_QUOTE_SUBMITTED = new Counter({\r\n    name: 'rfqm_handler_signed_quote_submitted',\r\n    help: 'Request received to submit a signed rfqm quote',\r\n    labelNames: ['integratorLabel', 'chainId'],\r\n});\r\n\r\n// If the cache is more milliseconds old than the value specified here, it will be refreshed.\r\nconst HEALTH_CHECK_RESULT_CACHE_DURATION_MS = 30000;\r\n\r\ntype RfqmHealthCheckResultCache = [HealthCheckResult, Date];\r\n\r\nexport class RfqmHandlers {\r\n    private readonly _cachedHealthCheckResultByChainId = new Map<number, RfqmHealthCheckResultCache>();\r\n    constructor(private readonly _rfqmServices: RfqmServices, private readonly _configManager: ConfigManager) {}\r\n\r\n    public async getIndicativeQuoteAsync(req: express.Request, res: express.Response): Promise<void> {\r\n        // Parse request\r\n        const { chainId, params } = await this._parseFetchIndicativeQuoteParamsAsync(req);\r\n        // NOTE: not all requests are emitted if they fail parsing\r\n        RFQM_INDICATIVE_QUOTE_REQUEST.inc({\r\n            integratorLabel: params.integrator.label,\r\n            chainId,\r\n        });\r\n\r\n        // Try to get indicative quote\r\n        let indicativeQuote;\r\n        try {\r\n            indicativeQuote = await this._getServiceForChain(chainId).fetchIndicativeQuoteAsync(params);\r\n        } catch (e) {\r\n            req.log.error(e, 'Encountered an error while fetching an rfqm indicative quote');\r\n            RFQM_INDICATIVE_QUOTE_ERROR.inc({\r\n                integratorLabel: params.integrator.label,\r\n                chainId,\r\n            });\r\n            throw e;\r\n        }\r\n\r\n        // Log no quote returned\r\n        if (indicativeQuote === null) {\r\n            RFQM_INDICATIVE_QUOTE_NOT_FOUND.inc({\r\n                integratorLabel: params.integrator.label,\r\n                chainId,\r\n            });\r\n        }\r\n\r\n        // Result\r\n        res.status(HttpStatus.OK).send({\r\n            liquidityAvailable: indicativeQuote !== null,\r\n            ...indicativeQuote,\r\n        });\r\n    }\r\n\r\n    public async getFirmQuoteAsync(req: express.Request, res: express.Response): Promise<void> {\r\n        // Parse request\r\n        const { chainId, params } = await this._parseFetchFirmQuoteParamsAsync(req);\r\n        // NOTE: not all requests are emitted if they fail parsing\r\n        RFQM_FIRM_QUOTE_REQUEST.inc({\r\n            integratorLabel: params.integrator.label,\r\n            chainId,\r\n        });\r\n\r\n        // Try to get firm quote\r\n        let firmQuote: OtcOrderRfqmQuoteResponse | null;\r\n        try {\r\n            const result = await this._getServiceForChain(chainId).fetchFirmQuoteAsync(params);\r\n            firmQuote = result.quote;\r\n        } catch (e) {\r\n            req.log.error(e, 'Encountered an error while fetching an rfqm firm quote');\r\n            RFQM_FIRM_QUOTE_ERROR.inc({\r\n                integratorLabel: params.integrator.label,\r\n                chainId,\r\n            });\r\n            throw e;\r\n        }\r\n\r\n        // Log no quote returned\r\n        if (firmQuote === null) {\r\n            RFQM_FIRM_QUOTE_NOT_FOUND.inc({\r\n                integratorLabel: params.integrator.label,\r\n                chainId,\r\n            });\r\n        }\r\n\r\n        // Result\r\n        res.status(HttpStatus.OK).send({\r\n            liquidityAvailable: firmQuote !== null,\r\n            ...firmQuote,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handler for the `/rfqm/v1/healthz` endpoint.\r\n     */\r\n    public async getHealthAsync(req: express.Request, res: express.Response): Promise<void> {\r\n        const chainId = extractChainId(req);\r\n        const cachedResult = this._cachedHealthCheckResultByChainId.get(chainId);\r\n        let result: HealthCheckResult;\r\n        if (!cachedResult) {\r\n            result = await this._getServiceForChain(chainId).runHealthCheckAsync();\r\n            this._cachedHealthCheckResultByChainId.set(chainId, [result, new Date()]);\r\n        } else {\r\n            const cacheAgeMs = Date.now() - cachedResult[1].getTime();\r\n            if (cacheAgeMs >= HEALTH_CHECK_RESULT_CACHE_DURATION_MS) {\r\n                result = await this._getServiceForChain(chainId).runHealthCheckAsync();\r\n                this._cachedHealthCheckResultByChainId.set(chainId, [result, new Date()]);\r\n            } else {\r\n                result = cachedResult[0];\r\n            }\r\n        }\r\n\r\n        const response = transformResultToShortResponse(result);\r\n        res.status(HttpStatus.OK).send(response);\r\n    }\r\n\r\n    public async getStatusAsync(req: express.Request, res: express.Response): Promise<void> {\r\n        const chainId = extractChainId(req);\r\n        const { orderHash } = req.params;\r\n\r\n        const status = await this._getServiceForChain(chainId).getStatusAsync(orderHash);\r\n\r\n        status ? res.status(HttpStatus.OK).send(status) : res.status(HttpStatus.NOT_FOUND).send();\r\n    }\r\n\r\n    public async submitSignedQuoteAsync(req: express.Request, res: express.Response): Promise<void> {\r\n        const { chainId, integrator, params } = this._parseSubmitSignedQuoteParams(req);\r\n        RFQM_SIGNED_QUOTE_SUBMITTED.inc({\r\n            integratorLabel: integrator.label,\r\n            chainId,\r\n        });\r\n        try {\r\n            const response = await this._getServiceForChain(chainId).submitTakerSignedOtcOrderAsync(params);\r\n            res.status(HttpStatus.CREATED).send(response);\r\n        } catch (e) {\r\n            req.log.error(e, 'Encountered an error while queuing a signed quote');\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async submitSignedQuoteWithApprovalAsync(req: express.Request, res: express.Response): Promise<void> {\r\n        const { chainId, integrator, params } = this._parseSubmitSignedQuoteWithApprovalParams(req);\r\n        RFQM_SIGNED_QUOTE_SUBMITTED.inc({\r\n            integratorLabel: integrator.label,\r\n            chainId,\r\n        });\r\n        try {\r\n            const response = await this._getServiceForChain(chainId).submitTakerSignedOtcOrderWithApprovalAsync(params);\r\n            res.status(HttpStatus.CREATED).send(response);\r\n        } catch (e) {\r\n            req.log.error(e, 'Encountered an error while queuing a signed quote with approval');\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private async _parseFetchFirmQuoteParamsAsync(\r\n        req: express.Request,\r\n    ): Promise<{ chainId: number; params: FetchFirmQuoteParams }> {\r\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        schemaUtils.validateSchema(req.query, schemas.firmQuoteRequestSchema as any);\r\n        const takerAddress = req.query.takerAddress;\r\n        const shouldCheckApproval = req.query.checkApproval === 'true' ? true : false;\r\n        const { chainId, params } = await this._parseIndicativeAndFirmQuoteSharedParamsAsync(req);\r\n        if (!addressUtils.isAddress(takerAddress as string)) {\r\n            throw new ValidationError([\r\n                {\r\n                    field: 'takerAddress',\r\n                    code: ValidationErrorCodes.InvalidAddress,\r\n                    reason: `Must provide a valid takerAddress`,\r\n                },\r\n            ]);\r\n        }\r\n        return {\r\n            chainId,\r\n            params: {\r\n                ...params,\r\n                takerAddress: takerAddress as string,\r\n                checkApproval: shouldCheckApproval,\r\n            },\r\n        };\r\n    }\r\n\r\n    private _getServiceForChain(chainId: number): RfqmService {\r\n        const service = this._rfqmServices.get(chainId);\r\n\r\n        if (!service) {\r\n            throw new Error('No configuration exists for chain');\r\n        }\r\n        return service;\r\n    }\r\n\r\n    /**\r\n     * Examines the API key provided in the request, ensures it is valid for RFQM, and fetches the associated\r\n     * integrator ID.\r\n     */\r\n    private _validateApiKey(apiKey: string | undefined, chainId: number): { apiKey: string; integrator: Integrator } {\r\n        if (apiKey === undefined) {\r\n            throw new InvalidAPIKeyError('Must access with an API key');\r\n        }\r\n        if (!this._configManager.getRfqmApiKeyWhitelist().has(apiKey)) {\r\n            throw new InvalidAPIKeyError('API key not authorized for RFQM access');\r\n        }\r\n        const integratorId = this._configManager.getIntegratorIdForApiKey(apiKey);\r\n        if (!integratorId) {\r\n            // With a valid configuration this should never happen\r\n            throw new InvalidAPIKeyError('API key has no associated Integrator ID');\r\n        }\r\n        const integrator = this._configManager.getIntegratorByIdOrThrow(integratorId);\r\n        if (!integrator.allowedChainIds.includes(chainId)) {\r\n            throw new InvalidAPIKeyError(`API Key not authorized to access chain ${chainId}`);\r\n        }\r\n        return { apiKey, integrator };\r\n    }\r\n\r\n    private async _parseFetchIndicativeQuoteParamsAsync(\r\n        req: express.Request,\r\n    ): Promise<{ chainId: number; params: FetchIndicativeQuoteParams }> {\r\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        schemaUtils.validateSchema(req.query, schemas.indicativeQuoteRequestSchema as any);\r\n        const { takerAddress } = req.query;\r\n        const { chainId, params } = await this._parseIndicativeAndFirmQuoteSharedParamsAsync(req);\r\n\r\n        return {\r\n            chainId,\r\n            params: {\r\n                ...params,\r\n                takerAddress: takerAddress as string,\r\n            },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Parse shared params of indicative and firm quotes.\r\n     *\r\n     * @param req The request object.\r\n     * @returns Chain ID and parsed shared params of indicative and firm quotes.\r\n     */\r\n    private async _parseIndicativeAndFirmQuoteSharedParamsAsync(\r\n        req: express.Request,\r\n    ): Promise<{ chainId: number; params: FetchQuoteParamsBase }> {\r\n        const chainId = extractChainId(req);\r\n        const { integrator } = this._validateApiKey(req.header('0x-api-key'), chainId);\r\n        const { affiliateAddress } = req.query;\r\n\r\n        // Parse tokens\r\n        const sellTokenRaw = req.query.sellToken as string;\r\n        const buyTokenRaw = req.query.buyToken as string;\r\n        validateNotNativeTokenOrThrow(sellTokenRaw, chainId, 'sellToken');\r\n\r\n        let buyTokenDecimals: number;\r\n        let sellTokenDecimals: number;\r\n        let buyTokenContractAddress: string;\r\n        let sellTokenContractAddress: string;\r\n\r\n        try {\r\n            buyTokenContractAddress = buyTokenRaw.toLocaleLowerCase().startsWith('0x')\r\n                ? buyTokenRaw\r\n                : contractAddressForSymbol(buyTokenRaw, chainId);\r\n            buyTokenDecimals = await this._getServiceForChain(chainId).getTokenDecimalsAsync(buyTokenRaw);\r\n        } catch {\r\n            throw new ValidationError([\r\n                {\r\n                    field: 'buyToken',\r\n                    code: ValidationErrorCodes.AddressNotSupported,\r\n                    reason: `Token ${buyTokenRaw} is currently unsupported`,\r\n                },\r\n            ]);\r\n        }\r\n\r\n        try {\r\n            sellTokenContractAddress = sellTokenRaw.toLocaleLowerCase().startsWith('0x')\r\n                ? sellTokenRaw\r\n                : contractAddressForSymbol(sellTokenRaw, chainId);\r\n            sellTokenDecimals = await this._getServiceForChain(chainId).getTokenDecimalsAsync(sellTokenRaw);\r\n        } catch {\r\n            throw new ValidationError([\r\n                {\r\n                    field: 'sellToken',\r\n                    code: ValidationErrorCodes.AddressNotSupported,\r\n                    reason: `Token ${sellTokenRaw} is currently unsupported`,\r\n                },\r\n            ]);\r\n        }\r\n\r\n        // Parse number params\r\n        const sellAmount =\r\n            req.query.sellAmount === undefined ? undefined : new BigNumber(req.query.sellAmount as string);\r\n        const buyAmount = req.query.buyAmount === undefined ? undefined : new BigNumber(req.query.buyAmount as string);\r\n\r\n        return {\r\n            chainId,\r\n            params: {\r\n                buyAmount,\r\n                buyToken: buyTokenContractAddress,\r\n                buyTokenDecimals,\r\n                integrator,\r\n                sellAmount,\r\n                sellToken: sellTokenContractAddress,\r\n                sellTokenDecimals,\r\n                affiliateAddress: affiliateAddress as string,\r\n            },\r\n        };\r\n    }\r\n\r\n    private _parseSubmitSignedQuoteParams(req: express.Request): {\r\n        chainId: number;\r\n        integrator: Integrator;\r\n        params: OtcOrderSubmitRfqmSignedQuoteParams;\r\n    } {\r\n        const type = req.body.type as GaslessTypes;\r\n        const chainId = extractChainId(req);\r\n        const { integrator } = this._validateApiKey(req.header('0x-api-key'), chainId);\r\n\r\n        if (type === GaslessTypes.OtcOrder) {\r\n            const order = new OtcOrder(stringsToOtcOrderFields(req.body.order as RawOtcOrderFields));\r\n            const signature = stringsToSignature(req.body.signature as StringSignatureFields);\r\n            return {\r\n                chainId,\r\n                integrator,\r\n                params: {\r\n                    type,\r\n                    order,\r\n                    signature,\r\n                },\r\n            };\r\n        } else {\r\n            throw new ValidationError([\r\n                {\r\n                    field: 'type',\r\n                    code: ValidationErrorCodes.FieldInvalid,\r\n                    reason: `${type} is an invalid value for 'type'`,\r\n                },\r\n            ]);\r\n        }\r\n    }\r\n\r\n    private _parseSubmitSignedQuoteWithApprovalParams<\r\n        T extends ExecuteMetaTransactionEip712Context | PermitEip712Context,\r\n    >(\r\n        req: express.Request,\r\n    ): {\r\n        chainId: number;\r\n        integrator: Integrator;\r\n        params: SubmitRfqmSignedQuoteWithApprovalParams<T>;\r\n    } {\r\n        const chainId = extractChainId(req);\r\n        const { integrator } = this._validateApiKey(req.header('0x-api-key'), chainId);\r\n\r\n        const { approval, trade } = req.body;\r\n\r\n        const parsedParams: Partial<SubmitRfqmSignedQuoteWithApprovalParams<T>> = {};\r\n\r\n        // Parse approval params\r\n        if (approval) {\r\n            if (\r\n                approval.type === GaslessApprovalTypes.ExecuteMetaTransaction ||\r\n                approval.type === GaslessApprovalTypes.Permit\r\n            ) {\r\n                const eip712 = stringsToEIP712Context(approval.eip712);\r\n                const signature = stringsToSignature(approval.signature as StringSignatureFields);\r\n                parsedParams.approval = {\r\n                    type: approval.type,\r\n                    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    eip712: eip712 as any,\r\n                    signature,\r\n                };\r\n            } else {\r\n                throw new ValidationError([\r\n                    {\r\n                        field: 'approval',\r\n                        code: ValidationErrorCodes.FieldInvalid,\r\n                        reason: `${approval.type} is an invalid value for Approval 'type'`,\r\n                    },\r\n                ]);\r\n            }\r\n        }\r\n\r\n        // Parse trade params\r\n        const tradeType = trade.type;\r\n        let otcOrderSubmitRfqmSignedQuoteParams: OtcOrderSubmitRfqmSignedQuoteParams;\r\n        if (tradeType === GaslessTypes.OtcOrder) {\r\n            const order = new OtcOrder(stringsToOtcOrderFields(trade.order as RawOtcOrderFields));\r\n            const signature = stringsToSignature(trade.signature as StringSignatureFields);\r\n            otcOrderSubmitRfqmSignedQuoteParams = {\r\n                type: trade.type,\r\n                order,\r\n                signature,\r\n            };\r\n        } else {\r\n            throw new ValidationError([\r\n                {\r\n                    field: 'type',\r\n                    code: ValidationErrorCodes.FieldInvalid,\r\n                    reason: `${trade.type} is an invalid value for Trade 'type'`,\r\n                },\r\n            ]);\r\n        }\r\n\r\n        return {\r\n            chainId,\r\n            integrator,\r\n            params: {\r\n                ...parsedParams,\r\n                kind: GaslessTypes.OtcOrder, // Must be of type OtcOrder for this flow\r\n                trade: otcOrderSubmitRfqmSignedQuoteParams,\r\n            },\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Extracts the Chain Id from the request. If none is provided, assumes a Chain Id of 1 (for backwards compatibility)\r\n *\r\n * @param req - the Express Request object\r\n * @returns the chain Id for this request\r\n */\r\nconst extractChainId = (req: express.Request): number => {\r\n    const chainIdFromHeader = req.header('0x-chain-id');\r\n    if (chainIdFromHeader === undefined) {\r\n        return 1;\r\n    } else {\r\n        const parsedInt = parseInt(chainIdFromHeader, 10);\r\n        if (Number.isNaN(parsedInt)) {\r\n            throw new ValidationError([\r\n                {\r\n                    field: '0x-chain-id',\r\n                    code: ValidationErrorCodes.FieldInvalid,\r\n                    reason: 'Invalid chain id',\r\n                },\r\n            ]);\r\n        }\r\n        return parsedInt;\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the token address for a given symbol.\r\n *\r\n * Throws if the symbol is not present in @0x/token-metadata\r\n */\r\nconst contractAddressForSymbol = (symbol: string, chainId: number): string => {\r\n    const address = getTokenMetadataIfExists(symbol, chainId)?.tokenAddress;\r\n    if (!address) {\r\n        throw new Error('Unsupported token');\r\n    }\r\n    return address;\r\n};\r\n\r\nconst validateNotNativeTokenOrThrow = (token: string, chainId: number, field: string): boolean => {\r\n    if (isNativeSymbolOrAddress(token, chainId)) {\r\n        const symbol = nativeWrappedTokenSymbol(chainId);\r\n        throw new ValidationError([\r\n            {\r\n                field,\r\n                code: ValidationErrorCodes.TokenNotSupported,\r\n                reason: `Unwrapped Native Asset is not supported. Use ${symbol} instead`,\r\n            },\r\n        ]);\r\n    }\r\n\r\n    return true;\r\n};\r\n"],"version":3}