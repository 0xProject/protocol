{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/background-jobs/maker_balance_cache_update.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/background-jobs/maker_balance_cache_update.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\nimport { Job, Queue } from 'bullmq';\nimport { Counter } from 'prom-client';\n\nimport { CHAIN_CONFIGURATIONS } from '../config';\nimport { logger } from '../logger';\nimport { buildRfqMakerBalanceCacheServiceAsync } from '../utils/rfqm_service_builder';\n\nimport { BackgroundJobBlueprint } from './blueprint';\n\nconst QUEUE_NAME = 'maker-balance-cache-update';\n// keep successful job history for 1 day\nconst REMOVE_ON_COMPLETE_OPS = {\n    count: 24 * 60 * 6,\n};\n// keep failed job history for 3 days\nconst REMOVE_ON_FAILURE_OPS = {\n    count: 3 * 24 * 60 * 6,\n};\nconst MAKER_BALANCE_CACHE_UPDATE_SCHEDULE = '*/10 * * * * *'; // job will be scheduled at every 10 seconds\nconst DESCRIPTION = 'Periodically updates observed entries in maker balance cache through balance checks.';\n\nexport interface BackgroundJobMBCUpdateData {\n    chainId: number;\n    timestamp: number;\n}\n\nexport interface BackgroundJobMBCUpdateResult {\n    chainId: number;\n    jobName: string;\n    timestamp: number;\n}\n\nconst backgroundJobMBCUpdate: BackgroundJobBlueprint<BackgroundJobMBCUpdateData, BackgroundJobMBCUpdateResult> = {\n    queueName: QUEUE_NAME,\n    schedule: MAKER_BALANCE_CACHE_UPDATE_SCHEDULE,\n    description: DESCRIPTION,\n    createAsync,\n    processAsync,\n};\n// tslint:disable-next-line: no-default-export\nexport default backgroundJobMBCUpdate;\n\nconst MAKER_BALANCE_CACHE_UPDATE_PROCESS_COUNT = new Counter({\n    name: 'rfq_background_job_mbc_update_process_total',\n    help: 'Number of times the processor method of the maker balance cache update background job is triggered',\n});\n\n/**\n * Creates a background job by queues a message that performs an update on the maker balance cache.\n *\n * @param queue Queue to push the message.\n * @param data Necessary data for processor to execute the background job.\n * @returns Promise of the background job.\n */\nasync function createAsync(\n    queue: Queue,\n    data: Partial<BackgroundJobMBCUpdateData>,\n): Promise<Job<BackgroundJobMBCUpdateData, BackgroundJobMBCUpdateResult>> {\n    logger.info({ queue: QUEUE_NAME, data }, 'Creating the maker balance cache background job on queue');\n    return queue.add(`${QUEUE_NAME}.${data.timestamp}`, data, {\n        removeOnComplete: REMOVE_ON_COMPLETE_OPS,\n        removeOnFail: REMOVE_ON_FAILURE_OPS,\n    });\n}\n\n/**\n * Processor method for the maker balance cache update job. Runs a cache update,\n * performing balance checks on observed maker balances.\n *\n * @param job Maker balance cache update background job.\n * @returns Result of the update background job.\n */\nasync function processAsync(\n    job: Job<BackgroundJobMBCUpdateData, BackgroundJobMBCUpdateResult>,\n): Promise<BackgroundJobMBCUpdateResult> {\n    await job.updateProgress(0);\n    logger.info(\n        { jobName: job.name, queue: job.queueName, data: job.data, timestamp: Date.now() },\n        'Processing the maker balance cache update background job on queue',\n    );\n\n    const chainId = job.data.chainId;\n\n    // Build dependencies\n    const chain = CHAIN_CONFIGURATIONS.find((c) => c.chainId === chainId);\n    if (!chain) {\n        throw new Error(`Tried to start background job process for chain ${chainId}\n        but no chain configuration was present`);\n    }\n    const rfqMakerBalanceCacheService = await buildRfqMakerBalanceCacheServiceAsync(chain);\n\n    if (!rfqMakerBalanceCacheService) {\n        logger.error(\n            { jobName: job.name, queue: job.queueName, data: job.data, timestamp: Date.now() },\n            'Failed to initialize dependencies for maker-balance-cache-update',\n        );\n        throw new Error('Failed to initialize dependencies for maker-balance-cache-update');\n    }\n    await job.updateProgress(50);\n\n    // Perform update on maker balance cache\n    try {\n        await rfqMakerBalanceCacheService.updateERC20OwnerBalancesAsync(chainId);\n        MAKER_BALANCE_CACHE_UPDATE_PROCESS_COUNT.inc();\n    } catch (error) {\n        logger.error(\n            { jobName: job.name, queue: job.queueName, data: job.data, timestamp: Date.now() },\n            'Failed to update maker balance cache while running scheduled background job',\n        );\n        throw new Error('Failed to update maker balance cache while running scheduled background job');\n    } finally {\n        await rfqMakerBalanceCacheService.closeAsync();\n    }\n\n    await job.updateProgress(100);\n    return {\n        chainId,\n        jobName: job.name,\n        timestamp: Date.now(),\n    };\n}\n"],"version":3}