{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfqtServiceBuilder.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfqtServiceBuilder.ts"],"sourcesContent":["import { ProtocolFeeUtils, SupportedProvider } from '@0x/asset-swapper';\r\nimport { getContractAddressesForChainOrThrow } from '@0x/contract-addresses';\r\nimport { getTokenMetadataIfExists } from '@0x/token-metadata';\r\nimport Axios, { AxiosRequestConfig } from 'axios';\r\nimport { providers } from 'ethers';\r\nimport { Agent as HttpAgent } from 'http';\r\nimport { Agent as HttpsAgent } from 'https';\r\nimport Redis from 'ioredis';\r\nimport { Kafka, Producer as KafkaProducer } from 'kafkajs';\r\n\r\nimport {\r\n    ALT_RFQ_MM_API_KEY,\r\n    ALT_RFQ_MM_PROFILE,\r\n    ChainConfigurations,\r\n    DEFINED_FI_API_KEY,\r\n    DEFINED_FI_ENDPOINT,\r\n    KAFKA_BROKERS,\r\n    RFQ_PROXY_ADDRESS,\r\n    RFQ_PROXY_PORT,\r\n    ZERO_EX_API_KEY,\r\n} from '../config';\r\nimport {\r\n    DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n    KEEP_ALIVE_TTL,\r\n    PROTOCOL_FEE_UTILS_POLLING_INTERVAL_IN_MS,\r\n} from '../core/constants';\r\nimport { RefreshingQuoteRequestor } from '../quoteRequestor/RefreshingQuoteRequestor';\r\nimport { FeeService } from '../services/fee_service';\r\nimport { RfqtService } from '../services/RfqtService';\r\nimport { RfqMakerBalanceCacheService } from '../services/rfq_maker_balance_cache_service';\r\n\r\nimport { BalanceChecker } from './balance_checker';\r\nimport { CacheClient } from './cache_client';\r\nimport { ConfigManager } from './config_manager';\r\nimport { getGasStationAttendant } from './GasStationAttendantUtils';\r\nimport { providerUtils } from './provider_utils';\r\nimport { QuoteServerClient } from './quote_server_client';\r\nimport { RfqBalanceCheckUtils, RfqBlockchainUtils } from './rfq_blockchain_utils';\r\nimport { RfqMakerDbUtils } from './rfq_maker_db_utils';\r\nimport { RfqMakerManager } from './rfq_maker_manager';\r\nimport { TokenMetadataManager } from './TokenMetadataManager';\r\nimport { TokenPriceOracle } from './TokenPriceOracle';\r\nimport { ZeroExApiClient } from './ZeroExApiClient';\r\n\r\nexport type RfqtServices = Map<number, RfqtService>;\r\n\r\nconst DEFAULT_AXIOS_TIMEOUT = 600; // ms\r\n\r\n/**\r\n * Creates an RFQT Service for each chain present in `ChainConfigurations`.\r\n *\r\n * Intended for use by the top-level runners.\r\n */\r\nexport async function buildRfqtServicesAsync(\r\n    chainConfigurations: ChainConfigurations,\r\n    rfqMakerDbUtils: RfqMakerDbUtils,\r\n    redis: Redis,\r\n): Promise<RfqtServices> {\r\n    const axiosInstance = Axios.create(getAxiosRequestConfig());\r\n    const configManager = new ConfigManager();\r\n    const altRfqOptions =\r\n        ALT_RFQ_MM_API_KEY !== undefined && ALT_RFQ_MM_PROFILE !== undefined\r\n            ? {\r\n                  // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                  altRfqApiKey: ALT_RFQ_MM_API_KEY!,\r\n                  // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                  altRfqProfile: ALT_RFQ_MM_PROFILE!,\r\n              }\r\n            : undefined;\r\n    const services = await Promise.all(\r\n        chainConfigurations.map(async (chain) => {\r\n            const { rfqt: rfqtConfiguration, chainId } = chain;\r\n            if (!rfqtConfiguration) {\r\n                throw new Error(`RFQt Service for chain ${chainId} does not exist`);\r\n            }\r\n\r\n            const rfqMakerManager = new RfqMakerManager(configManager, rfqMakerDbUtils, chainId);\r\n            await rfqMakerManager.initializeAsync();\r\n            const quoteRequestor = new RefreshingQuoteRequestor(rfqMakerManager, axiosInstance, altRfqOptions);\r\n            const quoteServerClient = new QuoteServerClient(axiosInstance);\r\n            const contractAddresses = getContractAddressesForChainOrThrow(chainId);\r\n            const ethersProvider = new providers.JsonRpcProvider(chain.rpcUrl, chainId);\r\n            const provider: SupportedProvider = providerUtils.createWeb3Provider(chain.rpcUrl);\r\n\r\n            const balanceChecker = new BalanceChecker(provider);\r\n            const rfqBlockchainUtils = new RfqBlockchainUtils(\r\n                provider,\r\n                contractAddresses.exchangeProxy,\r\n                balanceChecker,\r\n                ethersProvider,\r\n            );\r\n            const tokenMetadataManager = new TokenMetadataManager(chainId, rfqBlockchainUtils);\r\n\r\n            const balanceCheckUtils = new RfqBalanceCheckUtils(balanceChecker, contractAddresses.exchangeProxy);\r\n            const cacheClient = new CacheClient(redis);\r\n            const rfqMakerBalanceCacheService = new RfqMakerBalanceCacheService(cacheClient, balanceCheckUtils);\r\n\r\n            const kafkaProducer = getKafkaProducer();\r\n\r\n            const feeTokenMetadata = getTokenMetadataIfExists(contractAddresses.etherToken, chainId);\r\n            if (feeTokenMetadata === undefined) {\r\n                throw new Error(`Fee token ${contractAddresses.etherToken} on chain ${chainId} could not be found!`);\r\n            }\r\n\r\n            const protocolFeeUtils = ProtocolFeeUtils.getInstance(\r\n                PROTOCOL_FEE_UTILS_POLLING_INTERVAL_IN_MS,\r\n                chain.gasStationUrl,\r\n            );\r\n            const gasStationAttendant = getGasStationAttendant(chain, axiosInstance, protocolFeeUtils);\r\n            const tokenPriceOracle = new TokenPriceOracle(axiosInstance, DEFINED_FI_API_KEY, DEFINED_FI_ENDPOINT);\r\n            const zeroExApiClient = new ZeroExApiClient(Axios.create(), ZERO_EX_API_KEY, chain);\r\n            const feeService = new FeeService(\r\n                chainId,\r\n                feeTokenMetadata,\r\n                configManager,\r\n                gasStationAttendant,\r\n                tokenPriceOracle,\r\n                zeroExApiClient,\r\n                rfqtConfiguration.minExpiryDurationMs || DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n            );\r\n\r\n            return new RfqtService(\r\n                chainId,\r\n                rfqMakerManager,\r\n                quoteRequestor,\r\n                quoteServerClient,\r\n                rfqtConfiguration.minExpiryDurationMs || DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n                rfqBlockchainUtils,\r\n                tokenMetadataManager,\r\n                contractAddresses,\r\n                feeService,\r\n                rfqtConfiguration.feeModelVersion || 0,\r\n                rfqMakerBalanceCacheService,\r\n                kafkaProducer,\r\n                rfqtConfiguration.feeEventTopic,\r\n            );\r\n        }),\r\n    );\r\n    return new Map(services.map((s, i) => [chainConfigurations[i].chainId, s]));\r\n}\r\n\r\n/**\r\n * Creates the Axios Request Config\r\n */\r\nfunction getAxiosRequestConfig(): AxiosRequestConfig {\r\n    const axiosRequestConfig: AxiosRequestConfig = {\r\n        httpAgent: new HttpAgent({ keepAlive: true, timeout: KEEP_ALIVE_TTL }),\r\n        httpsAgent: new HttpsAgent({ keepAlive: true, timeout: KEEP_ALIVE_TTL }),\r\n        timeout: DEFAULT_AXIOS_TIMEOUT,\r\n    };\r\n    if (RFQ_PROXY_ADDRESS !== undefined && RFQ_PROXY_PORT !== undefined) {\r\n        axiosRequestConfig.proxy = {\r\n            host: RFQ_PROXY_ADDRESS,\r\n            port: RFQ_PROXY_PORT,\r\n        };\r\n    }\r\n\r\n    return axiosRequestConfig;\r\n}\r\n\r\n/**\r\n * Initialize a kafka producer if KAFKA_BROKERS is set\r\n */\r\nfunction getKafkaProducer(): KafkaProducer | undefined {\r\n    let kafkaProducer: KafkaProducer | undefined;\r\n    if (KAFKA_BROKERS !== undefined) {\r\n        const kafka = new Kafka({\r\n            clientId: '0x-api',\r\n            brokers: KAFKA_BROKERS,\r\n        });\r\n\r\n        kafkaProducer = kafka.producer();\r\n        // tslint:disable-next-line: no-floating-promises\r\n        kafkaProducer.connect();\r\n    }\r\n    return kafkaProducer;\r\n}\r\n"],"version":3}