383e3b03d0ee4b3246066592a606ac94
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GasStationAttendantPolygon = void 0;
const utils_1 = require("@0x/utils");
const constants_1 = require("../core/constants");
const logger_1 = require("../logger");
// The total minimum bid recommended by the post here:
// https://forum.matic.network/t/recommended-min-gas-price-setting/2531
// Expect bids lower than this to be rejected by the RPC node.
const MINIMUM_BID_WEI = 30000000000;
// The maximum tip we're willing to pay, based on p99 historical data
// Increase multiplier for tip with each resubmission cycle
const TEN_PERCENT_INCREASE = 1.1;
/**
 * An implementation of `GasStationAttendant` designed for Polygon.
 *
 * Currently, the 0x Gas Oracle does not provide pricing for Polygon
 * in EIP-1559 format. Therefore, we'll use the 'fast' gas as a
 * `maxPriorityFeePerGas` estimate. This actually works out okay because
 * the Polygon base fee is always essentially zero as of April 2022.
 */
class GasStationAttendantPolygon {
    constructor(gasOracleType0) {
        this._gasOracleType0 = gasOracleType0;
    }
    /**
     * The Safe Balance For Trade is from the p95 data shown here:
     * https://0xproject.slack.com/archives/CQG0ZGBFS/p1649708977452469
     */
    // tslint:disable-next-line: prefer-function-over-method
    async getSafeBalanceForTradeAsync() {
        const p95PriorityFeeGwei = 261;
        // Base fee is essentially zero
        // TODO (rhinodavid): Make this smarter as we have more historical data
        const gasEstimate = constants_1.RFQM_TX_OTC_ORDER_GAS_ESTIMATE;
        // 0.0261 MATIC
        return new utils_1.BigNumber(p95PriorityFeeGwei).shiftedBy(constants_1.GWEI_DECIMALS).times(gasEstimate);
    }
    /**
     * Uses the current fast gas price as the `maxPriorityFeePerGas`
     * estimate. Plans for 3 resubmits at a 10% tip increase. Assumes
     * no base fee.
     *
     * Uses a fixed value of 110,000 for the transaction gas amount
     * estimate.
     */
    async getWorkerBalanceForTradeAsync() {
        // TODO (rhinodavid): Once the 0x gas oracle can give EIP-1559 data for Polygon
        // use that instead of the legacy fast gas price.
        const gasPriceEstimateWei = await this._gasOracleType0.getGasWeiAsync('fast');
        logger_1.logger.info({ gasPriceEstimateWei: gasPriceEstimateWei.toString() }, 'Polygon fast gas price estimate (wei)');
        // Since the base fee is basically nothing, use this for our initial max priority fee
        const maxPriorityFeePerGas = gasPriceEstimateWei;
        // Pad the tip for 3 10% increases
        const maxPriorityFeePad = Math.pow(TEN_PERCENT_INCREASE, 3); // tslint:disable-line: custom-no-magic-numbers
        const paddedMaxPriorityFeePerGas = maxPriorityFeePerGas.times(maxPriorityFeePad);
        const gasRateWei = utils_1.BigNumber.max(paddedMaxPriorityFeePerGas.plus(0), MINIMUM_BID_WEI); // Amortizing the base fee to 0
        // Pad a little until we get a better idea of token-specific costs
        const padding = 1.1;
        const gasEstimate = constants_1.RFQM_TX_OTC_ORDER_GAS_ESTIMATE * padding;
        return gasRateWei.times(gasEstimate);
    }
    /**
     * Calculated using a similar methodology to `getWorkerBalanceForTradeAsync`,
     * but assumes we submit and average 1.5 transactions per trade, which is
     * what we see on Ethereum.
     *
     * TODO (rhinodavid): Update this once we have more historical data
     */
    async getExpectedTransactionGasRateAsync() {
        const gasPriceEstimateWei = await this._gasOracleType0.getGasWeiAsync('fast');
        logger_1.logger.info({ gasPriceEstimateWei: gasPriceEstimateWei.toString() }, 'Polygon fast gas price estimate (wei)');
        // Since the base fee is basically nothing, use this for our initial max priority fee
        const maxPriorityFeePerGas = gasPriceEstimateWei;
        // Pad the tip for 1.5 10% increases
        const baseFeePad = Math.pow(TEN_PERCENT_INCREASE, 1.5); // tslint:disable-line: custom-no-magic-numbers
        const paddedMaxPriorityFeePerGas = maxPriorityFeePerGas.times(baseFeePad);
        const gasRateWei = paddedMaxPriorityFeePerGas.plus(0); // Amortizing the base fee to 0
        logger_1.logger.info({
            gasPriceEstimateWei,
            maxPriorityFeePerGas,
            baseFeePad,
            paddedMaxPriorityFeePerGas,
            gasRateWei,
        }, 'Gas variables in Ploygon `getExpectedTransactionGasRateAsync`');
        return gasRateWei.integerValue(utils_1.BigNumber.ROUND_CEIL);
    }
}
exports.GasStationAttendantPolygon = GasStationAttendantPolygon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,