{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasStationAttendantPolygon.ts","mappings":";;;AAAA,qCAAsC;AAEtC,iDAAkF;AAClF,sCAAmC;AAKnC,sDAAsD;AACtD,uEAAuE;AACvE,8DAA8D;AAC9D,MAAM,eAAe,GAAG,WAAW,CAAC;AAEpC,qEAAqE;AAErE,2DAA2D;AAC3D,MAAM,oBAAoB,GAAG,GAAG,CAAC;AAEjC;;;;;;;GAOG;AACH,MAAa,0BAA0B;IAGnC,YAAY,cAA8B;QACtC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACH,wDAAwD;IACjD,KAAK,CAAC,2BAA2B;QACpC,MAAM,kBAAkB,GAAG,GAAG,CAAC;QAC/B,+BAA+B;QAC/B,uEAAuE;QACvE,MAAM,WAAW,GAAG,0CAA8B,CAAC;QACnD,eAAe;QACf,OAAO,IAAI,iBAAS,CAAC,kBAAkB,CAAC,CAAC,SAAS,CAAC,yBAAa,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IACzF,CAAC;IAED;;;;;;;OAOG;IACI,KAAK,CAAC,6BAA6B;QACtC,+EAA+E;QAC/E,iDAAiD;QACjD,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC9E,eAAM,CAAC,IAAI,CAAC,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,QAAQ,EAAE,EAAE,EAAE,uCAAuC,CAAC,CAAC;QAE9G,qFAAqF;QACrF,MAAM,oBAAoB,GAAG,mBAAmB,CAAC;QAEjD,kCAAkC;QAClC,MAAM,iBAAiB,GAAG,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC,CAAC,+CAA+C;QAC5G,MAAM,0BAA0B,GAAG,oBAAoB,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACjF,MAAM,UAAU,GAAG,iBAAS,CAAC,GAAG,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,+BAA+B;QAEtH,kEAAkE;QAClE,MAAM,OAAO,GAAG,GAAG,CAAC;QACpB,MAAM,WAAW,GAAG,0CAA8B,GAAG,OAAO,CAAC;QAE7D,OAAO,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IACzC,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,kCAAkC;QAC3C,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC9E,eAAM,CAAC,IAAI,CAAC,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,QAAQ,EAAE,EAAE,EAAE,uCAAuC,CAAC,CAAC;QAE9G,qFAAqF;QACrF,MAAM,oBAAoB,GAAG,mBAAmB,CAAC;QAEjD,oCAAoC;QACpC,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC,CAAC,+CAA+C;QACvG,MAAM,0BAA0B,GAAG,oBAAoB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAC1E,MAAM,UAAU,GAAG,0BAA0B,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,+BAA+B;QAEtF,eAAM,CAAC,IAAI,CACP;YACI,mBAAmB;YACnB,oBAAoB;YACpB,UAAU;YACV,0BAA0B;YAC1B,UAAU;SACb,EACD,+DAA+D,CAClE,CAAC;QAEF,OAAO,UAAU,CAAC,YAAY,CAAC,iBAAS,CAAC,UAAU,CAAC,CAAC;IACzD,CAAC;CACJ;AAlFD,gEAkFC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasStationAttendantPolygon.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\n\nimport { GWEI_DECIMALS, RFQM_TX_OTC_ORDER_GAS_ESTIMATE } from '../core/constants';\nimport { logger } from '../logger';\nimport { GasOracleType0 } from './GasOracleType0';\n\nimport { GasStationAttendant, Wei, WeiPerGas } from './GasStationAttendant';\n\n// The total minimum bid recommended by the post here:\n// https://forum.matic.network/t/recommended-min-gas-price-setting/2531\n// Expect bids lower than this to be rejected by the RPC node.\nconst MINIMUM_BID_WEI = 30000000000;\n\n// The maximum tip we're willing to pay, based on p99 historical data\n\n// Increase multiplier for tip with each resubmission cycle\nconst TEN_PERCENT_INCREASE = 1.1;\n\n/**\n * An implementation of `GasStationAttendant` designed for Polygon.\n *\n * Currently, the 0x Gas Oracle does not provide pricing for Polygon\n * in EIP-1559 format. Therefore, we'll use the 'fast' gas as a\n * `maxPriorityFeePerGas` estimate. This actually works out okay because\n * the Polygon base fee is always essentially zero as of April 2022.\n */\nexport class GasStationAttendantPolygon implements GasStationAttendant {\n    private readonly _gasOracleType0: GasOracleType0;\n\n    constructor(gasOracleType0: GasOracleType0) {\n        this._gasOracleType0 = gasOracleType0;\n    }\n\n    /**\n     * The Safe Balance For Trade is from the p95 data shown here:\n     * https://0xproject.slack.com/archives/CQG0ZGBFS/p1649708977452469\n     */\n    // tslint:disable-next-line: prefer-function-over-method\n    public async getSafeBalanceForTradeAsync(): Promise<Wei> {\n        const p95PriorityFeeGwei = 261;\n        // Base fee is essentially zero\n        // TODO (rhinodavid): Make this smarter as we have more historical data\n        const gasEstimate = RFQM_TX_OTC_ORDER_GAS_ESTIMATE;\n        // 0.0261 MATIC\n        return new BigNumber(p95PriorityFeeGwei).shiftedBy(GWEI_DECIMALS).times(gasEstimate);\n    }\n\n    /**\n     * Uses the current fast gas price as the `maxPriorityFeePerGas`\n     * estimate. Plans for 3 resubmits at a 10% tip increase. Assumes\n     * no base fee.\n     *\n     * Uses a fixed value of 110,000 for the transaction gas amount\n     * estimate.\n     */\n    public async getWorkerBalanceForTradeAsync(): Promise<WeiPerGas> {\n        // TODO (rhinodavid): Once the 0x gas oracle can give EIP-1559 data for Polygon\n        // use that instead of the legacy fast gas price.\n        const gasPriceEstimateWei = await this._gasOracleType0.getGasWeiAsync('fast');\n        logger.info({ gasPriceEstimateWei: gasPriceEstimateWei.toString() }, 'Polygon fast gas price estimate (wei)');\n\n        // Since the base fee is basically nothing, use this for our initial max priority fee\n        const maxPriorityFeePerGas = gasPriceEstimateWei;\n\n        // Pad the tip for 3 10% increases\n        const maxPriorityFeePad = Math.pow(TEN_PERCENT_INCREASE, 3); // tslint:disable-line: custom-no-magic-numbers\n        const paddedMaxPriorityFeePerGas = maxPriorityFeePerGas.times(maxPriorityFeePad);\n        const gasRateWei = BigNumber.max(paddedMaxPriorityFeePerGas.plus(0), MINIMUM_BID_WEI); // Amortizing the base fee to 0\n\n        // Pad a little until we get a better idea of token-specific costs\n        const padding = 1.1;\n        const gasEstimate = RFQM_TX_OTC_ORDER_GAS_ESTIMATE * padding;\n\n        return gasRateWei.times(gasEstimate);\n    }\n\n    /**\n     * Calculated using a similar methodology to `getWorkerBalanceForTradeAsync`,\n     * but assumes we submit and average 1.5 transactions per trade, which is\n     * what we see on Ethereum.\n     *\n     * TODO (rhinodavid): Update this once we have more historical data\n     */\n    public async getExpectedTransactionGasRateAsync(): Promise<WeiPerGas> {\n        const gasPriceEstimateWei = await this._gasOracleType0.getGasWeiAsync('fast');\n        logger.info({ gasPriceEstimateWei: gasPriceEstimateWei.toString() }, 'Polygon fast gas price estimate (wei)');\n\n        // Since the base fee is basically nothing, use this for our initial max priority fee\n        const maxPriorityFeePerGas = gasPriceEstimateWei;\n\n        // Pad the tip for 1.5 10% increases\n        const baseFeePad = Math.pow(TEN_PERCENT_INCREASE, 1.5); // tslint:disable-line: custom-no-magic-numbers\n        const paddedMaxPriorityFeePerGas = maxPriorityFeePerGas.times(baseFeePad);\n        const gasRateWei = paddedMaxPriorityFeePerGas.plus(0); // Amortizing the base fee to 0\n\n        logger.info(\n            {\n                gasPriceEstimateWei,\n                maxPriorityFeePerGas,\n                baseFeePad,\n                paddedMaxPriorityFeePerGas,\n                gasRateWei,\n            },\n            'Gas variables in Ploygon `getExpectedTransactionGasRateAsync`',\n        );\n\n        return gasRateWei.integerValue(BigNumber.ROUND_CEIL);\n    }\n}\n"],"version":3}