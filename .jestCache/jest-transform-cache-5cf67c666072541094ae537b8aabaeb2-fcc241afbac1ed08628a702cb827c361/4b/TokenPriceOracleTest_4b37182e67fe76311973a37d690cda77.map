{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/TokenPriceOracleTest.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/TokenPriceOracleTest.ts"],"sourcesContent":["// tslint:disable: custom-no-magic-numbers\nimport Axios, { AxiosInstance } from 'axios';\nimport AxiosMockAdapter from 'axios-mock-adapter';\nimport * as HttpStatus from 'http-status-codes';\n\nimport { TokenPriceOracle } from '../../src/utils/TokenPriceOracle';\n\nlet axiosClient: AxiosInstance;\nlet axiosMock: AxiosMockAdapter;\n\ndescribe('TokenPriceOracle', () => {\n    beforeAll(() => {\n        axiosClient = Axios.create();\n        axiosMock = new AxiosMockAdapter(axiosClient);\n    });\n\n    afterEach(() => {\n        axiosMock.reset();\n        jest.useRealTimers();\n    });\n\n    describe('batchFetchTokenPriceAsync', () => {\n        it('returns the price in USD for all requested tokens', async () => {\n            const fakeDefinedFiResponseForUSDC = {\n                data: {\n                    getPrice: {\n                        priceUsd: 1.1,\n                    },\n                },\n            };\n            const fakeDefinedUSDCResponseForETH = {\n                data: {\n                    getPrice: {\n                        priceUsd: 3000.01,\n                    },\n                },\n            };\n            axiosMock\n                .onPost('https://api.defined.fi')\n                .replyOnce(HttpStatus.OK, fakeDefinedFiResponseForUSDC)\n                .onPost('https://api.defined.fi')\n                .replyOnce(HttpStatus.OK, fakeDefinedUSDCResponseForETH);\n\n            const tokenPriceOracle = new TokenPriceOracle(axiosClient, 'fakeApiKey', 'https://api.defined.fi');\n            const result = await tokenPriceOracle.batchFetchTokenPriceAsync([\n                { chainId: 1, tokenAddress: '0xUSDCContractAddress', tokenDecimals: 18 },\n                { chainId: 3, tokenAddress: '0xWETHContractAddress', tokenDecimals: 18 },\n            ]);\n            expect(axiosMock.history.post[0].headers['x-api-key']).toBe('fakeApiKey');\n\n            const expectedGraphqlQuery = `\n                query getPrice {\n                    getPrice(address: \"0xUSDCContractAddress\", networkId: 1) {\n                        priceUsd\n                    }\n                }\n            `;\n            const actualGraphQlQuery = JSON.parse(axiosMock.history.post[0].data).query;\n            // Strip out all indentations before comparing the body\n            expect(actualGraphQlQuery.replace(/^\\s+/gm, '')).toBe(expectedGraphqlQuery.replace(/^\\s+/gm, ''));\n\n            expect(result[0]?.toNumber()).toBe(1.1e-18);\n            expect(result[1]?.toNumber()).toBe(3000.01e-18);\n        });\n\n        it(\"returns null priceInUsd when it couldn't fetch the price\", async () => {\n            const tokenPriceOracle = new TokenPriceOracle(axiosClient, 'fakeApiKey', 'https://api.defined.fi');\n\n            // Test the case when server returns non-200 response\n            axiosMock.onPost('https://api.defined.fi').replyOnce(HttpStatus.INTERNAL_SERVER_ERROR);\n            let result = await tokenPriceOracle.batchFetchTokenPriceAsync([\n                { chainId: 1, tokenAddress: '0xUSDCContractAddress', tokenDecimals: 18 },\n            ]);\n            expect(result[0]).toBe(null);\n\n            // Test the case when server returns 200 but with unexpected response's body\n            //\n            // This is an actual response captured from defined.fi when we provide an invalid\n            // token address to their getPrice endpoint\n            const fakeDefinedResponseForInvalidToken = {\n                data: {\n                    getPrice: null,\n                },\n                errors: [\n                    {\n                        path: ['getPrice'],\n                        data: null,\n                        errorType: 'TypeError',\n                        errorInfo: null,\n                        locations: [\n                            {\n                                line: 2,\n                                column: 1,\n                                sourceName: null,\n                            },\n                        ],\n                        message: \"Cannot read property 'price' of undefined\",\n                    },\n                ],\n            };\n            axiosMock.onPost('https://api.defined.fi').replyOnce(HttpStatus.OK, fakeDefinedResponseForInvalidToken);\n            result = await tokenPriceOracle.batchFetchTokenPriceAsync([\n                { chainId: 1, tokenAddress: '0xInvalidContractAddress', tokenDecimals: 18 },\n            ]);\n            expect(result[0]).toBe(null);\n        });\n\n        it('caches the result', async () => {\n            const tokenPriceOracle = new TokenPriceOracle(axiosClient, 'fakeApiKey', 'https://api.defined.fi');\n\n            const fakeDefinedFiResponseForUSDC = {\n                data: {\n                    getPrice: {\n                        priceUsd: 1.1,\n                    },\n                },\n            };\n            const fakeDefinedFiResponseForUSDCChanged = {\n                data: {\n                    getPrice: {\n                        priceUsd: 2.1,\n                    },\n                },\n            };\n\n            axiosMock\n                .onPost('https://api.defined.fi')\n                .replyOnce(HttpStatus.OK, fakeDefinedFiResponseForUSDC)\n                .onPost('https://api.defined.fi')\n                .replyOnce(HttpStatus.OK, fakeDefinedFiResponseForUSDCChanged);\n\n            let result = await tokenPriceOracle.batchFetchTokenPriceAsync([\n                { chainId: 1, tokenAddress: '0xUSDCContractAddress', tokenDecimals: 18 },\n            ]);\n            expect(result[0]?.toNumber()).toBe(1.1e-18);\n\n            // Make another token price fetch request, the price should still be 1.1 because it didn't make another request to\n            // defined.fi API\n            result = await tokenPriceOracle.batchFetchTokenPriceAsync([\n                { chainId: 1, tokenAddress: '0xUSDCContractAddress', tokenDecimals: 18 },\n            ]);\n            // TokenPriceOracle shouldn't make another request to api.defined.fi\n            expect(axiosMock.history.post).toHaveLength(1);\n            expect(result[0]?.toNumber()).toBe(1.1e-18);\n        });\n\n        it('invalidates cache after configured TTL', async () => {\n            // Set Cache TTL to 5 seconds\n            const tokenPriceOracle = new TokenPriceOracle(axiosClient, 'fakeApiKey', 'https://api.defined.fi', 5000);\n\n            const fakeDefinedFiResponseForUSDC = {\n                data: {\n                    getPrice: {\n                        priceUsd: 1.1,\n                    },\n                },\n            };\n            const fakeDefinedFiResponseForUSDCChanged = {\n                data: {\n                    getPrice: {\n                        priceUsd: 2.1,\n                    },\n                },\n            };\n\n            axiosMock\n                .onPost('https://api.defined.fi')\n                .replyOnce(HttpStatus.OK, fakeDefinedFiResponseForUSDC)\n                .onPost('https://api.defined.fi')\n                .replyOnce(HttpStatus.OK, fakeDefinedFiResponseForUSDCChanged);\n\n            let result = await tokenPriceOracle.batchFetchTokenPriceAsync([\n                { chainId: 1, tokenAddress: '0xUSDCContractAddress', tokenDecimals: 18 },\n            ]);\n            expect(result[0]?.toNumber()).toBe(1.1e-18);\n\n            // Fast forward the system time 5.1 seconds\n            jest.useFakeTimers().setSystemTime(Date.now() + 5100);\n\n            // Make another token price fetch request, the price should be 2.1 now since the cache is invalidated\n            // so the TokenPriceOracle fetched the price from upstream again.\n            result = await tokenPriceOracle.batchFetchTokenPriceAsync([\n                { chainId: 1, tokenAddress: '0xUSDCContractAddress', tokenDecimals: 18 },\n            ]);\n            expect(axiosMock.history.post).toHaveLength(2);\n            expect(result[0]?.toNumber()).toBe(2.1e-18);\n        });\n\n        it('uses custom endpoint if provided', async () => {\n            axiosMock.onPost('https://custom-endpoint.local').replyOnce(HttpStatus.OK, {\n                data: {\n                    getPrice: {\n                        priceUsd: 1.1,\n                    },\n                },\n            });\n\n            const tokenPriceOracle = new TokenPriceOracle(\n                axiosClient,\n                'fakeApiKey',\n                'https://custom-endpoint.local',\n                5000,\n            );\n            await tokenPriceOracle.batchFetchTokenPriceAsync([\n                { chainId: 1, tokenAddress: '0xUSDCContractAddress', tokenDecimals: 18 },\n            ]);\n            expect(axiosMock.history.post[0].url).toBe('https://custom-endpoint.local');\n        });\n    });\n});\n"],"version":3}