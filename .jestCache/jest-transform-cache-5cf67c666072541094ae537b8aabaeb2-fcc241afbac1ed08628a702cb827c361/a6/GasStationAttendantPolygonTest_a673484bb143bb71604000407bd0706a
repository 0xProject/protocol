dd687b59bc44d03e56008a2294056b1e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@0x/utils");
const ts_mockito_1 = require("ts-mockito");
const constants_1 = require("../../src/core/constants");
const GasOracleType0_1 = require("../../src/utils/GasOracleType0");
const GasStationAttendantPolygon_1 = require("../../src/utils/GasStationAttendantPolygon");
let gasOracleMock;
describe('GasStationAttendantPolygon', () => {
    beforeAll(() => {
        gasOracleMock = (0, ts_mockito_1.mock)(GasOracleType0_1.GasOracleType0);
    });
    describe('getWorkerBalanceForTradeAsync', () => {
        it('gets the balance to trade', async () => {
            (0, ts_mockito_1.when)(gasOracleMock.getGasWeiAsync('fast')).thenResolve(new utils_1.BigNumber(1000).shiftedBy(constants_1.GWEI_DECIMALS));
            const attendant = new GasStationAttendantPolygon_1.GasStationAttendantPolygon((0, ts_mockito_1.instance)(gasOracleMock));
            const workerGasToTrade = await attendant.getWorkerBalanceForTradeAsync();
            // 1000 GWEI * (1.1^3) = 1331
            // Gas estimate = 100,000 * 1.1 = 110,000
            // Total = 1331 * 110,000 = 146,410,000 GWEI
            expect(workerGasToTrade.toPrecision(2).toString()).toEqual(
            // tslint:disable-next-line: custom-no-magic-numbers
            new utils_1.BigNumber(146410000).times(Math.pow(10, constants_1.GWEI_DECIMALS)).toPrecision(2).toString());
        });
    });
    describe('getExpectedTransactionGasRateAsync', () => {
        it('estimates the transaction gas rate', async () => {
            (0, ts_mockito_1.when)(gasOracleMock.getGasWeiAsync('fast')).thenResolve(new utils_1.BigNumber(666).shiftedBy(constants_1.GWEI_DECIMALS));
            const attendant = new GasStationAttendantPolygon_1.GasStationAttendantPolygon((0, ts_mockito_1.instance)(gasOracleMock));
            const gasRate = await attendant.getExpectedTransactionGasRateAsync();
            // 666 * 1.1^1.5 = 768.35736217 GWEI
            expect(gasRate.toString()).toEqual(
            // tslint:disable-next-line: custom-no-magic-numbers
            new utils_1.BigNumber(768.35736217)
                .times(Math.pow(10, constants_1.GWEI_DECIMALS))
                .integerValue(utils_1.BigNumber.ROUND_CEIL)
                .toString());
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvR2FzU3RhdGlvbkF0dGVuZGFudFBvbHlnb25UZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEscUNBQXNDO0FBQ3RDLDJDQUFrRDtBQUVsRCx3REFBeUQ7QUFDekQsbUVBQWdFO0FBQ2hFLDJGQUF3RjtBQUV4RixJQUFJLGFBQTZCLENBQUM7QUFFbEMsUUFBUSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtJQUN4QyxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ1gsYUFBYSxHQUFHLElBQUEsaUJBQUksRUFBQywrQkFBYyxDQUFDLENBQUM7SUFDekMsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1FBQzNDLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN2QyxJQUFBLGlCQUFJLEVBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLGlCQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLHlCQUFhLENBQUMsQ0FBQyxDQUFDO1lBRXJHLE1BQU0sU0FBUyxHQUFHLElBQUksdURBQTBCLENBQUMsSUFBQSxxQkFBUSxFQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFFMUUsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLFNBQVMsQ0FBQyw2QkFBNkIsRUFBRSxDQUFDO1lBRXpFLDZCQUE2QjtZQUM3Qix5Q0FBeUM7WUFDekMsNENBQTRDO1lBRTVDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPO1lBQ3RELG9EQUFvRDtZQUNwRCxJQUFJLGlCQUFTLENBQUMsU0FBVyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLHlCQUFhLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FDMUYsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUFFO1FBQ2hELEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNoRCxJQUFBLGlCQUFJLEVBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLGlCQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLHlCQUFhLENBQUMsQ0FBQyxDQUFDO1lBRXBHLE1BQU0sU0FBUyxHQUFHLElBQUksdURBQTBCLENBQUMsSUFBQSxxQkFBUSxFQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFFMUUsTUFBTSxPQUFPLEdBQUcsTUFBTSxTQUFTLENBQUMsa0NBQWtDLEVBQUUsQ0FBQztZQUVyRSxvQ0FBb0M7WUFDcEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU87WUFDOUIsb0RBQW9EO1lBQ3BELElBQUksaUJBQVMsQ0FBQyxZQUFZLENBQUM7aUJBQ3RCLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSx5QkFBYSxDQUFDLENBQUM7aUJBQ2xDLFlBQVksQ0FBQyxpQkFBUyxDQUFDLFVBQVUsQ0FBQztpQkFDbEMsUUFBUSxFQUFFLENBQ2xCLENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvR2FzU3RhdGlvbkF0dGVuZGFudFBvbHlnb25UZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gJ0AweC91dGlscyc7XG5pbXBvcnQgeyBpbnN0YW5jZSwgbW9jaywgd2hlbiB9IGZyb20gJ3RzLW1vY2tpdG8nO1xuXG5pbXBvcnQgeyBHV0VJX0RFQ0lNQUxTIH0gZnJvbSAnLi4vLi4vc3JjL2NvcmUvY29uc3RhbnRzJztcbmltcG9ydCB7IEdhc09yYWNsZVR5cGUwIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL0dhc09yYWNsZVR5cGUwJztcbmltcG9ydCB7IEdhc1N0YXRpb25BdHRlbmRhbnRQb2x5Z29uIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL0dhc1N0YXRpb25BdHRlbmRhbnRQb2x5Z29uJztcblxubGV0IGdhc09yYWNsZU1vY2s6IEdhc09yYWNsZVR5cGUwO1xuXG5kZXNjcmliZSgnR2FzU3RhdGlvbkF0dGVuZGFudFBvbHlnb24nLCAoKSA9PiB7XG4gICAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICAgICAgZ2FzT3JhY2xlTW9jayA9IG1vY2soR2FzT3JhY2xlVHlwZTApO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2dldFdvcmtlckJhbGFuY2VGb3JUcmFkZUFzeW5jJywgKCkgPT4ge1xuICAgICAgICBpdCgnZ2V0cyB0aGUgYmFsYW5jZSB0byB0cmFkZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHdoZW4oZ2FzT3JhY2xlTW9jay5nZXRHYXNXZWlBc3luYygnZmFzdCcpKS50aGVuUmVzb2x2ZShuZXcgQmlnTnVtYmVyKDEwMDApLnNoaWZ0ZWRCeShHV0VJX0RFQ0lNQUxTKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGF0dGVuZGFudCA9IG5ldyBHYXNTdGF0aW9uQXR0ZW5kYW50UG9seWdvbihpbnN0YW5jZShnYXNPcmFjbGVNb2NrKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHdvcmtlckdhc1RvVHJhZGUgPSBhd2FpdCBhdHRlbmRhbnQuZ2V0V29ya2VyQmFsYW5jZUZvclRyYWRlQXN5bmMoKTtcblxuICAgICAgICAgICAgLy8gMTAwMCBHV0VJICogKDEuMV4zKSA9IDEzMzFcbiAgICAgICAgICAgIC8vIEdhcyBlc3RpbWF0ZSA9IDEwMCwwMDAgKiAxLjEgPSAxMTAsMDAwXG4gICAgICAgICAgICAvLyBUb3RhbCA9IDEzMzEgKiAxMTAsMDAwID0gMTQ2LDQxMCwwMDAgR1dFSVxuXG4gICAgICAgICAgICBleHBlY3Qod29ya2VyR2FzVG9UcmFkZS50b1ByZWNpc2lvbigyKS50b1N0cmluZygpKS50b0VxdWFsKFxuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY3VzdG9tLW5vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgICAgICAgICBuZXcgQmlnTnVtYmVyKDE0Nl80MTBfMDAwKS50aW1lcyhNYXRoLnBvdygxMCwgR1dFSV9ERUNJTUFMUykpLnRvUHJlY2lzaW9uKDIpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdnZXRFeHBlY3RlZFRyYW5zYWN0aW9uR2FzUmF0ZUFzeW5jJywgKCkgPT4ge1xuICAgICAgICBpdCgnZXN0aW1hdGVzIHRoZSB0cmFuc2FjdGlvbiBnYXMgcmF0ZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHdoZW4oZ2FzT3JhY2xlTW9jay5nZXRHYXNXZWlBc3luYygnZmFzdCcpKS50aGVuUmVzb2x2ZShuZXcgQmlnTnVtYmVyKDY2Nikuc2hpZnRlZEJ5KEdXRUlfREVDSU1BTFMpKTtcblxuICAgICAgICAgICAgY29uc3QgYXR0ZW5kYW50ID0gbmV3IEdhc1N0YXRpb25BdHRlbmRhbnRQb2x5Z29uKGluc3RhbmNlKGdhc09yYWNsZU1vY2spKTtcblxuICAgICAgICAgICAgY29uc3QgZ2FzUmF0ZSA9IGF3YWl0IGF0dGVuZGFudC5nZXRFeHBlY3RlZFRyYW5zYWN0aW9uR2FzUmF0ZUFzeW5jKCk7XG5cbiAgICAgICAgICAgIC8vIDY2NiAqIDEuMV4xLjUgPSA3NjguMzU3MzYyMTcgR1dFSVxuICAgICAgICAgICAgZXhwZWN0KGdhc1JhdGUudG9TdHJpbmcoKSkudG9FcXVhbChcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGN1c3RvbS1uby1tYWdpYy1udW1iZXJzXG4gICAgICAgICAgICAgICAgbmV3IEJpZ051bWJlcig3NjguMzU3MzYyMTcpXG4gICAgICAgICAgICAgICAgICAgIC50aW1lcyhNYXRoLnBvdygxMCwgR1dFSV9ERUNJTUFMUykpXG4gICAgICAgICAgICAgICAgICAgIC5pbnRlZ2VyVmFsdWUoQmlnTnVtYmVyLlJPVU5EX0NFSUwpXG4gICAgICAgICAgICAgICAgICAgIC50b1N0cmluZygpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==