{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/GasStationAttendantPolygonTest.ts","mappings":";;AAAA,qCAAsC;AACtC,2CAAkD;AAElD,wDAAyD;AACzD,mEAAgE;AAChE,2FAAwF;AAExF,IAAI,aAA6B,CAAC;AAElC,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;IACxC,SAAS,CAAC,GAAG,EAAE;QACX,aAAa,GAAG,IAAA,iBAAI,EAAC,+BAAc,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;QAC3C,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YACvC,IAAA,iBAAI,EAAC,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,iBAAS,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,yBAAa,CAAC,CAAC,CAAC;YAErG,MAAM,SAAS,GAAG,IAAI,uDAA0B,CAAC,IAAA,qBAAQ,EAAC,aAAa,CAAC,CAAC,CAAC;YAE1E,MAAM,gBAAgB,GAAG,MAAM,SAAS,CAAC,6BAA6B,EAAE,CAAC;YAEzE,6BAA6B;YAC7B,yCAAyC;YACzC,4CAA4C;YAE5C,MAAM,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO;YACtD,oDAAoD;YACpD,IAAI,iBAAS,CAAC,SAAW,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,yBAAa,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAC1F,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAChD,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAChD,IAAA,iBAAI,EAAC,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,iBAAS,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,yBAAa,CAAC,CAAC,CAAC;YAEpG,MAAM,SAAS,GAAG,IAAI,uDAA0B,CAAC,IAAA,qBAAQ,EAAC,aAAa,CAAC,CAAC,CAAC;YAE1E,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,kCAAkC,EAAE,CAAC;YAErE,oCAAoC;YACpC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO;YAC9B,oDAAoD;YACpD,IAAI,iBAAS,CAAC,YAAY,CAAC;iBACtB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,yBAAa,CAAC,CAAC;iBAClC,YAAY,CAAC,iBAAS,CAAC,UAAU,CAAC;iBAClC,QAAQ,EAAE,CAClB,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/GasStationAttendantPolygonTest.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { instance, mock, when } from 'ts-mockito';\n\nimport { GWEI_DECIMALS } from '../../src/core/constants';\nimport { GasOracleType0 } from '../../src/utils/GasOracleType0';\nimport { GasStationAttendantPolygon } from '../../src/utils/GasStationAttendantPolygon';\n\nlet gasOracleMock: GasOracleType0;\n\ndescribe('GasStationAttendantPolygon', () => {\n    beforeAll(() => {\n        gasOracleMock = mock(GasOracleType0);\n    });\n\n    describe('getWorkerBalanceForTradeAsync', () => {\n        it('gets the balance to trade', async () => {\n            when(gasOracleMock.getGasWeiAsync('fast')).thenResolve(new BigNumber(1000).shiftedBy(GWEI_DECIMALS));\n\n            const attendant = new GasStationAttendantPolygon(instance(gasOracleMock));\n\n            const workerGasToTrade = await attendant.getWorkerBalanceForTradeAsync();\n\n            // 1000 GWEI * (1.1^3) = 1331\n            // Gas estimate = 100,000 * 1.1 = 110,000\n            // Total = 1331 * 110,000 = 146,410,000 GWEI\n\n            expect(workerGasToTrade.toPrecision(2).toString()).toEqual(\n                // tslint:disable-next-line: custom-no-magic-numbers\n                new BigNumber(146_410_000).times(Math.pow(10, GWEI_DECIMALS)).toPrecision(2).toString(),\n            );\n        });\n    });\n\n    describe('getExpectedTransactionGasRateAsync', () => {\n        it('estimates the transaction gas rate', async () => {\n            when(gasOracleMock.getGasWeiAsync('fast')).thenResolve(new BigNumber(666).shiftedBy(GWEI_DECIMALS));\n\n            const attendant = new GasStationAttendantPolygon(instance(gasOracleMock));\n\n            const gasRate = await attendant.getExpectedTransactionGasRateAsync();\n\n            // 666 * 1.1^1.5 = 768.35736217 GWEI\n            expect(gasRate.toString()).toEqual(\n                // tslint:disable-next-line: custom-no-magic-numbers\n                new BigNumber(768.35736217)\n                    .times(Math.pow(10, GWEI_DECIMALS))\n                    .integerValue(BigNumber.ROUND_CEIL)\n                    .toString(),\n            );\n        });\n    });\n});\n"],"version":3}