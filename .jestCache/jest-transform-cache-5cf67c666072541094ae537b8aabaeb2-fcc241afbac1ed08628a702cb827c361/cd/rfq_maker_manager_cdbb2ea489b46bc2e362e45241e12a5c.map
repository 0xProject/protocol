{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfq_maker_manager.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/rfq_maker_manager.ts"],"sourcesContent":["import * as EventEmitter from 'events';\nimport { Counter, Summary } from 'prom-client';\n\nimport { MakerIdSet, RfqWorkFlowType, RFQ_MAKER_REFRESH_INTERVAL_MS } from '../config';\nimport { RfqMaker } from '../entities';\nimport { logger } from '../logger';\n\nimport { ConfigManager } from './config_manager';\nimport { toPairString } from '../core/pair_utils';\nimport { RfqMakerDbUtils } from './rfq_maker_db_utils';\n\n/**\n * A mapping from RFQ-T/M quote provider URLs to the trading pairs they support.\n * The value type represents an array of supported asset pairs, with each array element encoded as a 2-element array of token addresses.\n */\nexport interface RfqMakerAssetOfferings {\n    [endpoint: string]: Array<[string, string]>;\n}\n\nconst RFQ_MAKER_REFRESH_FAILED = new Counter({\n    name: 'rfq_maker_refresh_failed',\n    help: 'A maker refreshing job failed.',\n    labelNames: ['chainId'],\n});\nconst RFQ_MAKER_REFRESH_SUCCEEDED = new Counter({\n    name: 'rfq_maker_refresh_succeeded',\n    help: 'A maker refreshing job succeeded.',\n    labelNames: ['chainId'],\n});\nconst RFQ_MAKER_REFRESH_LATENCY = new Summary({\n    name: 'rfq_maker_refresh_latency',\n    help: 'Latency for the maker maker refreshing job.',\n    labelNames: ['chainId'],\n});\n\n/**\n * Filters an array of makers (fetched from the database) to remove\n * those (1) not in the set `ids`, and (2) who have no URI set for the\n * given `workflow`\n */\nfunction filterMakers(makers: RfqMaker[], workflow: RfqWorkFlowType, ids: MakerIdSet): RfqMaker[] {\n    return makers.filter(\n        (maker: RfqMaker) =>\n            ids.has(maker.makerId) &&\n            ((workflow === 'rfqm' && maker.rfqmUri !== null) || (workflow === 'rfqt' && maker.rfqtUri !== null)),\n    );\n}\n\n/**\n * Transforms an array of makers into their asset offerings for a given workflow\n */\nfunction makersToAssetOfferings(makers: RfqMaker[], workflow: RfqWorkFlowType): RfqMakerAssetOfferings {\n    return makers.reduce((result: RfqMakerAssetOfferings, m) => {\n        const uri: string | null = workflow === 'rfqm' ? m.rfqmUri : m.rfqtUri;\n\n        if (!uri) {\n            throw new Error();\n        }\n        result[uri] = m.pairs;\n        return result;\n    }, {});\n}\n\n/**\n * Filters the given `makers` to only those trading on the given `pair`\n */\nfunction makersForPair(makers: RfqMaker[], pair: string): RfqMaker[] {\n    return makers.filter((m: RfqMaker) => {\n        return m.pairs.map((p) => toPairString(...p)).includes(pair);\n    });\n}\n\n/**\n * Unifies the maker configuration collected from environment variables\n * and the `rfq_maker_pairs` database. Once initialized, refreshes itself\n * per the `RFQ_MAKER_REFRESH_INTERVAL_MS` configuration variable.\n *\n * Usage:\n * // Instantiate instance\n * const rfqMakerManager = new RfqMakerManager(configManager, dbUtils, chainId);\n * // Initialize\n * await rfqMakerManager.initializeAsync();\n */\nexport class RfqMakerManager extends EventEmitter {\n    public static REFRESHED_EVENT = 'refreshed';\n\n    private _rfqmMakers: RfqMaker[];\n    private _rfqtV1Makers: RfqMaker[];\n    private _rfqtV2Makers: RfqMaker[];\n\n    private _rfqMakerListUpdateHash: string | null;\n\n    constructor(\n        private readonly _configManager: ConfigManager,\n        private readonly _dbUtils: RfqMakerDbUtils,\n        private readonly _chainId: number,\n    ) {\n        super();\n\n        this._rfqmMakers = [];\n        this._rfqtV1Makers = [];\n        this._rfqtV2Makers = [];\n\n        this._rfqMakerListUpdateHash = null;\n    }\n\n    /**\n     * Initialize RfqMaker entities and set up periodical refreshing\n     */\n    public async initializeAsync(): Promise<void> {\n        await this._refreshAsync();\n\n        setInterval(async () => {\n            await this._refreshAsync();\n        }, RFQ_MAKER_REFRESH_INTERVAL_MS);\n    }\n\n    /**\n     * Get the RfqMakerAssetOfferings for rfqt orders with rfq order type\n     */\n    public getRfqtV1MakerOfferings(): RfqMakerAssetOfferings {\n        return makersToAssetOfferings(this._rfqtV1Makers, 'rfqt');\n    }\n\n    /**\n     * Get the Rfqt MakerAssetOfferings for Otc Order\n     */\n    public getRfqtV2MakerOfferings(): RfqMakerAssetOfferings {\n        return makersToAssetOfferings(this._rfqtV2Makers, 'rfqt');\n    }\n\n    /**\n     * Returns the `RfqMaker` entities trading the given token pair\n     * on RFQt V2\n     */\n    public getRfqtV2MakersForPair(tokenAAddress: string, tokenBAddress: string): RfqMaker[] {\n        return makersForPair(this._rfqtV2Makers, toPairString(tokenAAddress, tokenBAddress)) || [];\n    }\n\n    /**\n     * Get the RfqMakerAssetOfferings for RFQm orders.\n     * As of Q1 2022, the RFQ order type has been deprecated\n     * and only OTC orders are used on RFQm.\n     */\n    public getRfqmV2MakerOfferings(): RfqMakerAssetOfferings {\n        return makersToAssetOfferings(this._rfqmMakers, 'rfqm');\n    }\n\n    /**\n     * Get a list of RFQm Maker Uris that support this pair on OtcOrder\n     */\n    public getRfqmV2MakerUrisForPair(\n        makerToken: string,\n        takerToken: string,\n        whitelistMakerIds: string[] | null = null,\n        blacklistMakerIds: string[] | null = null,\n    ): string[] {\n        let makers = makersForPair(this._rfqmMakers, toPairString(makerToken, takerToken)) || [];\n\n        if (whitelistMakerIds !== null) {\n            makers = makers.filter((maker) => whitelistMakerIds.includes(maker.makerId));\n        }\n        if (blacklistMakerIds !== null) {\n            makers = makers.filter((maker) => !blacklistMakerIds.includes(maker.makerId));\n        }\n\n        return makers.map((m) => m.rfqmUri).filter((uri: string | null): uri is string => uri !== null);\n    }\n\n    /**\n     * Find maker ID from its RFQm URI\n     */\n    public findMakerIdWithRfqmUri(makerRfqmUri: string): string | null {\n        const maker = this._rfqmMakers.find((m) => m.rfqmUri === makerRfqmUri);\n        return maker?.makerId || null;\n    }\n\n    /**\n     * Refresh RfqMaker entities by querying database.\n     * Emit an 'refreshed' event for subscribers to refresh if the operation is successful.\n     */\n    private async _refreshAsync(): Promise<void> {\n        const chainId = this._chainId;\n        const refreshTime = new Date();\n        const timerStopFunction = RFQ_MAKER_REFRESH_LATENCY.labels(chainId.toString()).startTimer();\n\n        try {\n            const rfqMakerListUpdateHash = await this._dbUtils.getRfqMakersUpdateTimeHashAsync(chainId);\n            if (rfqMakerListUpdateHash === this._rfqMakerListUpdateHash) {\n                return;\n            }\n            this._rfqMakerListUpdateHash = rfqMakerListUpdateHash;\n\n            const rfqMakerList = await this._dbUtils.getRfqMakersAsync(chainId);\n\n            this._rfqtV1Makers = filterMakers(rfqMakerList, 'rfqt', this._configManager.getRfqtMakerIdSetForRfqOrder());\n            this._rfqtV2Makers = filterMakers(rfqMakerList, 'rfqt', this._configManager.getRfqtMakerIdSetForOtcOrder());\n            this._rfqmMakers = filterMakers(rfqMakerList, 'rfqm', this._configManager.getRfqmMakerIdSetForOtcOrder());\n\n            this.emit(RfqMakerManager.REFRESHED_EVENT);\n\n            logger.info({ chainId, refreshTime }, `Successfully refreshed makers.`);\n            RFQ_MAKER_REFRESH_SUCCEEDED.labels(chainId.toString()).inc();\n        } catch (error) {\n            logger.error({ chainId, refreshTime, errorMessage: error.message }, `Failed to refresh makers.`);\n            RFQ_MAKER_REFRESH_FAILED.labels(chainId.toString()).inc();\n        } finally {\n            timerStopFunction();\n        }\n    }\n}\n"],"version":3}