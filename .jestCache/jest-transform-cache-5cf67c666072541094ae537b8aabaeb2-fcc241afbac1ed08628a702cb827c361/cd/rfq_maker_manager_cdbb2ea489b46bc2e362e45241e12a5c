23713f75fc9b61106eea9b8da7c6e709
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqMakerManager = void 0;
const EventEmitter = require("events");
const prom_client_1 = require("prom-client");
const config_1 = require("../config");
const logger_1 = require("../logger");
const pair_utils_1 = require("../core/pair_utils");
const RFQ_MAKER_REFRESH_FAILED = new prom_client_1.Counter({
    name: 'rfq_maker_refresh_failed',
    help: 'A maker refreshing job failed.',
    labelNames: ['chainId'],
});
const RFQ_MAKER_REFRESH_SUCCEEDED = new prom_client_1.Counter({
    name: 'rfq_maker_refresh_succeeded',
    help: 'A maker refreshing job succeeded.',
    labelNames: ['chainId'],
});
const RFQ_MAKER_REFRESH_LATENCY = new prom_client_1.Summary({
    name: 'rfq_maker_refresh_latency',
    help: 'Latency for the maker maker refreshing job.',
    labelNames: ['chainId'],
});
/**
 * Filters an array of makers (fetched from the database) to remove
 * those (1) not in the set `ids`, and (2) who have no URI set for the
 * given `workflow`
 */
function filterMakers(makers, workflow, ids) {
    return makers.filter((maker) => ids.has(maker.makerId) &&
        ((workflow === 'rfqm' && maker.rfqmUri !== null) || (workflow === 'rfqt' && maker.rfqtUri !== null)));
}
/**
 * Transforms an array of makers into their asset offerings for a given workflow
 */
function makersToAssetOfferings(makers, workflow) {
    return makers.reduce((result, m) => {
        const uri = workflow === 'rfqm' ? m.rfqmUri : m.rfqtUri;
        if (!uri) {
            throw new Error();
        }
        result[uri] = m.pairs;
        return result;
    }, {});
}
/**
 * Filters the given `makers` to only those trading on the given `pair`
 */
function makersForPair(makers, pair) {
    return makers.filter((m) => {
        return m.pairs.map((p) => (0, pair_utils_1.toPairString)(...p)).includes(pair);
    });
}
/**
 * Unifies the maker configuration collected from environment variables
 * and the `rfq_maker_pairs` database. Once initialized, refreshes itself
 * per the `RFQ_MAKER_REFRESH_INTERVAL_MS` configuration variable.
 *
 * Usage:
 * // Instantiate instance
 * const rfqMakerManager = new RfqMakerManager(configManager, dbUtils, chainId);
 * // Initialize
 * await rfqMakerManager.initializeAsync();
 */
class RfqMakerManager extends EventEmitter {
    constructor(_configManager, _dbUtils, _chainId) {
        super();
        this._configManager = _configManager;
        this._dbUtils = _dbUtils;
        this._chainId = _chainId;
        this._rfqmMakers = [];
        this._rfqtV1Makers = [];
        this._rfqtV2Makers = [];
        this._rfqMakerListUpdateHash = null;
    }
    /**
     * Initialize RfqMaker entities and set up periodical refreshing
     */
    async initializeAsync() {
        await this._refreshAsync();
        setInterval(async () => {
            await this._refreshAsync();
        }, config_1.RFQ_MAKER_REFRESH_INTERVAL_MS);
    }
    /**
     * Get the RfqMakerAssetOfferings for rfqt orders with rfq order type
     */
    getRfqtV1MakerOfferings() {
        return makersToAssetOfferings(this._rfqtV1Makers, 'rfqt');
    }
    /**
     * Get the Rfqt MakerAssetOfferings for Otc Order
     */
    getRfqtV2MakerOfferings() {
        return makersToAssetOfferings(this._rfqtV2Makers, 'rfqt');
    }
    /**
     * Returns the `RfqMaker` entities trading the given token pair
     * on RFQt V2
     */
    getRfqtV2MakersForPair(tokenAAddress, tokenBAddress) {
        return makersForPair(this._rfqtV2Makers, (0, pair_utils_1.toPairString)(tokenAAddress, tokenBAddress)) || [];
    }
    /**
     * Get the RfqMakerAssetOfferings for RFQm orders.
     * As of Q1 2022, the RFQ order type has been deprecated
     * and only OTC orders are used on RFQm.
     */
    getRfqmV2MakerOfferings() {
        return makersToAssetOfferings(this._rfqmMakers, 'rfqm');
    }
    /**
     * Get a list of RFQm Maker Uris that support this pair on OtcOrder
     */
    getRfqmV2MakerUrisForPair(makerToken, takerToken, whitelistMakerIds = null, blacklistMakerIds = null) {
        let makers = makersForPair(this._rfqmMakers, (0, pair_utils_1.toPairString)(makerToken, takerToken)) || [];
        if (whitelistMakerIds !== null) {
            makers = makers.filter((maker) => whitelistMakerIds.includes(maker.makerId));
        }
        if (blacklistMakerIds !== null) {
            makers = makers.filter((maker) => !blacklistMakerIds.includes(maker.makerId));
        }
        return makers.map((m) => m.rfqmUri).filter((uri) => uri !== null);
    }
    /**
     * Find maker ID from its RFQm URI
     */
    findMakerIdWithRfqmUri(makerRfqmUri) {
        const maker = this._rfqmMakers.find((m) => m.rfqmUri === makerRfqmUri);
        return (maker === null || maker === void 0 ? void 0 : maker.makerId) || null;
    }
    /**
     * Refresh RfqMaker entities by querying database.
     * Emit an 'refreshed' event for subscribers to refresh if the operation is successful.
     */
    async _refreshAsync() {
        const chainId = this._chainId;
        const refreshTime = new Date();
        const timerStopFunction = RFQ_MAKER_REFRESH_LATENCY.labels(chainId.toString()).startTimer();
        try {
            const rfqMakerListUpdateHash = await this._dbUtils.getRfqMakersUpdateTimeHashAsync(chainId);
            if (rfqMakerListUpdateHash === this._rfqMakerListUpdateHash) {
                return;
            }
            this._rfqMakerListUpdateHash = rfqMakerListUpdateHash;
            const rfqMakerList = await this._dbUtils.getRfqMakersAsync(chainId);
            this._rfqtV1Makers = filterMakers(rfqMakerList, 'rfqt', this._configManager.getRfqtMakerIdSetForRfqOrder());
            this._rfqtV2Makers = filterMakers(rfqMakerList, 'rfqt', this._configManager.getRfqtMakerIdSetForOtcOrder());
            this._rfqmMakers = filterMakers(rfqMakerList, 'rfqm', this._configManager.getRfqmMakerIdSetForOtcOrder());
            this.emit(RfqMakerManager.REFRESHED_EVENT);
            logger_1.logger.info({ chainId, refreshTime }, `Successfully refreshed makers.`);
            RFQ_MAKER_REFRESH_SUCCEEDED.labels(chainId.toString()).inc();
        }
        catch (error) {
            logger_1.logger.error({ chainId, refreshTime, errorMessage: error.message }, `Failed to refresh makers.`);
            RFQ_MAKER_REFRESH_FAILED.labels(chainId.toString()).inc();
        }
        finally {
            timerStopFunction();
        }
    }
}
exports.RfqMakerManager = RfqMakerManager;
RfqMakerManager.REFRESHED_EVENT = 'refreshed';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,