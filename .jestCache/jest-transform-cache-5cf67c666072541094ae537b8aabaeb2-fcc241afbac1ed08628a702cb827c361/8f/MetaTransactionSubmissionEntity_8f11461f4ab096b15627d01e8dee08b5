fdac4326be98f35b3c7f294bc32450a3
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetaTransactionSubmissionEntity = void 0;
const typeorm_1 = require("typeorm");
const transformers_1 = require("./transformers");
const types_1 = require("./types");
let MetaTransactionSubmissionEntity = class MetaTransactionSubmissionEntity {
    // TypeORM runs a validation check where it calls this initializer with no argument.
    // With no default `opts`, `opts` will be undefined and the validation will throw,
    // therefore, add this hacky default.
    constructor(
    // tslint:disable-next-line no-object-literal-type-assertion
    opts = {}) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.kind = 'meta_transaction_submission';
        // allow createdAt overrides for testing
        if (opts.createdAt) {
            this.createdAt = opts.createdAt;
        }
        this.blockMined = (_a = opts.blockMined) !== null && _a !== void 0 ? _a : null;
        this.from = opts.from;
        this.gasPrice = (_b = opts.gasPrice) !== null && _b !== void 0 ? _b : null;
        this.gasUsed = (_c = opts.gasUsed) !== null && _c !== void 0 ? _c : null;
        this.maxFeePerGas = (_d = opts.maxFeePerGas) !== null && _d !== void 0 ? _d : null;
        this.maxPriorityFeePerGas = (_e = opts.maxPriorityFeePerGas) !== null && _e !== void 0 ? _e : null;
        this.metaTransactionJobId = opts.metaTransactionJobId;
        this.nonce = opts.nonce;
        this.status = (_f = opts.status) !== null && _f !== void 0 ? _f : types_1.RfqmTransactionSubmissionStatus.Submitted;
        this.to = opts.to;
        this.transactionHash = opts.transactionHash;
        this.type = opts.type;
        this.updatedAt = (_g = opts.updatedAt) !== null && _g !== void 0 ? _g : null;
    }
};
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], MetaTransactionSubmissionEntity.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Index)(),
    (0, typeorm_1.Column)({ name: 'transaction_hash', type: 'varchar' }),
    __metadata("design:type", String)
], MetaTransactionSubmissionEntity.prototype, "transactionHash", void 0);
__decorate([
    (0, typeorm_1.Index)(),
    (0, typeorm_1.Column)({ name: 'meta_transaction_job_id', type: 'uuid' }),
    __metadata("design:type", String)
], MetaTransactionSubmissionEntity.prototype, "metaTransactionJobId", void 0);
__decorate([
    (0, typeorm_1.Index)(),
    (0, typeorm_1.Column)({ name: 'created_at', type: 'timestamptz', default: () => 'now()' }),
    __metadata("design:type", Date)
], MetaTransactionSubmissionEntity.prototype, "createdAt", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at', type: 'timestamptz', nullable: true }),
    __metadata("design:type", Object)
], MetaTransactionSubmissionEntity.prototype, "updatedAt", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'from', type: 'varchar' }),
    __metadata("design:type", String)
], MetaTransactionSubmissionEntity.prototype, "from", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'to', type: 'varchar' }),
    __metadata("design:type", String)
], MetaTransactionSubmissionEntity.prototype, "to", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'nonce', type: 'bigint', transformer: transformers_1.BigIntTransformer }),
    __metadata("design:type", Number)
], MetaTransactionSubmissionEntity.prototype, "nonce", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'gas_price', type: 'numeric', nullable: true, transformer: transformers_1.BigNumberTransformer }),
    __metadata("design:type", Object)
], MetaTransactionSubmissionEntity.prototype, "gasPrice", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'max_fee_per_gas', type: 'numeric', nullable: true, transformer: transformers_1.BigNumberTransformer }),
    __metadata("design:type", Object)
], MetaTransactionSubmissionEntity.prototype, "maxFeePerGas", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'max_priority_fee_per_gas', type: 'numeric', nullable: true, transformer: transformers_1.BigNumberTransformer }),
    __metadata("design:type", Object)
], MetaTransactionSubmissionEntity.prototype, "maxPriorityFeePerGas", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'gas_used', type: 'numeric', nullable: true, transformer: transformers_1.BigNumberTransformer }),
    __metadata("design:type", Object)
], MetaTransactionSubmissionEntity.prototype, "gasUsed", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'block_mined', type: 'numeric', nullable: true, transformer: transformers_1.BigNumberTransformer }),
    __metadata("design:type", Object)
], MetaTransactionSubmissionEntity.prototype, "blockMined", void 0);
__decorate([
    (0, typeorm_1.Index)(),
    (0, typeorm_1.Column)({ name: 'status', type: 'varchar' }),
    __metadata("design:type", String)
], MetaTransactionSubmissionEntity.prototype, "status", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'type', type: 'varchar' }),
    __metadata("design:type", String)
], MetaTransactionSubmissionEntity.prototype, "type", void 0);
MetaTransactionSubmissionEntity = __decorate([
    (0, typeorm_1.Entity)({ name: 'meta_transaction_submissions' }),
    __metadata("design:paramtypes", [Object])
], MetaTransactionSubmissionEntity);
exports.MetaTransactionSubmissionEntity = MetaTransactionSubmissionEntity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,