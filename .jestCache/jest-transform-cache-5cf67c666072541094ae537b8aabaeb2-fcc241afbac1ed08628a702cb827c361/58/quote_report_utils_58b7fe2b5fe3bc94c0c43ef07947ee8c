96b91bc2f986b1cb2b0e1ce3846acfe7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonifyFillData = exports.quoteReportUtils = void 0;
const asset_swapper_1 = require("@0x/asset-swapper");
const logger_1 = require("../logger");
const number_utils_1 = require("./number_utils");
exports.quoteReportUtils = {
    async publishRFQMQuoteReportAsync(logOpts, kafkaProducer, quoteReportTopic, extendedQuoteReportSubmissionBy = 'rfqm') {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (kafkaProducer && quoteReportTopic) {
            const quoteId = number_utils_1.numberUtils.randomHexNumberOfLength(10);
            logger_1.logger.info(`Generating and pushing RFQm Quote Report for: ${quoteId}`);
            let orderHash;
            if (logOpts.bestQuote && isFirmQuote(logOpts.bestQuote)) {
                orderHash = logOpts.bestQuote.order.getHash();
            }
            const finalQuotes = logOpts.finalQuotes.map((quote, index) => {
                return {
                    ...jsonifyFillData({
                        quoteEntryIndex: index,
                        isDelivered: false,
                        liquiditySource: asset_swapper_1.ERC20BridgeSource.Native,
                        makerAmount: isFirmQuote(quote) ? quote.order.makerAmount : quote.makerAmount,
                        takerAmount: isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount,
                        fillableTakerAmount: isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount,
                        isRFQ: true,
                        makerUri: quote.makerUri,
                        fillData: isFirmQuote(quote) ? quote.order : {},
                    }),
                    isIntermediate: false,
                };
            });
            const intermediateQuotes = logOpts.intermediateQuotes.map((quote, index) => {
                return {
                    ...jsonifyFillData({
                        quoteEntryIndex: index,
                        isDelivered: false,
                        liquiditySource: asset_swapper_1.ERC20BridgeSource.Native,
                        makerAmount: isFirmQuote(quote) ? quote.order.makerAmount : quote.makerAmount,
                        takerAmount: isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount,
                        fillableTakerAmount: isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount,
                        isRFQ: true,
                        makerUri: quote.makerUri,
                        fillData: isFirmQuote(quote) ? quote.order : {},
                    }),
                    isIntermediate: true,
                };
            });
            const sourcesDelivered = logOpts.bestQuote
                ? [
                    jsonifyFillData({
                        quoteEntryIndex: 0,
                        isDelivered: true,
                        liquiditySource: asset_swapper_1.ERC20BridgeSource.Native,
                        makerAmount: isFirmQuote(logOpts.bestQuote)
                            ? (_a = logOpts.bestQuote) === null || _a === void 0 ? void 0 : _a.order.makerAmount
                            : (_b = logOpts.bestQuote) === null || _b === void 0 ? void 0 : _b.makerAmount,
                        takerAmount: isFirmQuote(logOpts.bestQuote)
                            ? (_c = logOpts.bestQuote) === null || _c === void 0 ? void 0 : _c.order.takerAmount
                            : (_d = logOpts.bestQuote) === null || _d === void 0 ? void 0 : _d.takerAmount,
                        fillableTakerAmount: isFirmQuote(logOpts.bestQuote)
                            ? (_e = logOpts.bestQuote) === null || _e === void 0 ? void 0 : _e.order.takerAmount
                            : (_f = logOpts.bestQuote) === null || _f === void 0 ? void 0 : _f.takerAmount,
                        isRFQ: true,
                        makerUri: (_g = logOpts.bestQuote) === null || _g === void 0 ? void 0 : _g.makerUri,
                        fillData: isFirmQuote(logOpts.bestQuote) ? (_h = logOpts.bestQuote) === null || _h === void 0 ? void 0 : _h.order : {},
                    }),
                ]
                : undefined;
            const extendedQuoteReport = {
                quoteId,
                taker: logOpts.taker,
                timestamp: Date.now(),
                firmQuoteReport: logOpts.isFirmQuote,
                submissionBy: extendedQuoteReportSubmissionBy,
                buyAmount: logOpts.buyAmount ? logOpts.buyAmount.toString() : undefined,
                sellAmount: logOpts.sellAmount ? logOpts.sellAmount.toString() : undefined,
                buyTokenAddress: logOpts.buyTokenAddress,
                sellTokenAddress: logOpts.sellTokenAddress,
                integratorId: logOpts.integratorId,
                slippageBips: undefined,
                zeroExTransactionHash: orderHash,
                sourcesConsidered: finalQuotes.concat(intermediateQuotes),
                sourcesDelivered,
                fee: logOpts.fee,
                ammQuoteUniqueId: logOpts.ammQuoteUniqueId,
                isLiquidityAvailable: logOpts.isLiquidityAvailable,
            };
            kafkaProducer.send({
                topic: quoteReportTopic,
                messages: [
                    {
                        value: JSON.stringify(extendedQuoteReport),
                    },
                ],
            });
            return quoteId;
        }
        return null;
    },
    async publishRfqtV2FeeEvent(logOpts, kafkaProducer, feeEventTopic) {
        if (kafkaProducer && feeEventTopic) {
            const createdAt = Date.now();
            logger_1.logger.info(`Generating and pushing RFQt V2 Quote Report`);
            logOpts.quotes.map((quote) => {
                const quoteReport = {
                    createdAt,
                    orderHash: quote.order.getHash(),
                    requestedBuyAmount: logOpts.requestedBuyAmount,
                    requestedSellAmount: logOpts.requestedSellAmount,
                    requestedTakerAddress: logOpts.requestedTakerAddress,
                    fillableBuyAmount: quote.fillableMakerAmount,
                    fillableSellAmount: quote.fillableTakerAmount,
                    buyTokenAddress: logOpts.buyTokenAddress,
                    sellTokenAddress: logOpts.sellTokenAddress,
                    fee: logOpts.fee,
                    integratorId: logOpts.integratorId,
                    makerId: quote.makerId,
                    makerUri: quote.makerUri,
                    expiry: quote.order.expiry,
                    blockNumber: logOpts.blockNumber,
                };
                kafkaProducer.send({
                    topic: feeEventTopic,
                    messages: [
                        {
                            value: JSON.stringify(quoteReport),
                        },
                    ],
                });
            });
        }
    },
};
function isFirmQuote(quote) {
    return quote.order !== undefined;
}
/**
 * Migrated from @0x/asset-swapper
 */
function jsonifyFillData(source) {
    return {
        ...source,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        fillData: JSON.stringify(source.fillData, (key, value) => {
            if (key === '_samplerContract') {
                return {};
            }
            else {
                return value;
            }
        }),
    };
}
exports.jsonifyFillData = jsonifyFillData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9xdW90ZV9yZXBvcnRfdXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEscURBQWdHO0FBSWhHLHNDQUFtQztBQUduQyxpREFBNkM7QUEwSWhDLFFBQUEsZ0JBQWdCLEdBQUc7SUFDNUIsS0FBSyxDQUFDLDJCQUEyQixDQUM3QixPQUE2QyxFQUM3QyxhQUF1QixFQUN2QixnQkFBeUIsRUFDekIsa0NBQXVFLE1BQU07O1FBRTdFLElBQUksYUFBYSxJQUFJLGdCQUFnQixFQUFFO1lBQ25DLE1BQU0sT0FBTyxHQUFHLDBCQUFXLENBQUMsdUJBQXVCLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEQsZUFBTSxDQUFDLElBQUksQ0FBQyxpREFBaUQsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUV4RSxJQUFJLFNBQTZCLENBQUM7WUFDbEMsSUFBSSxPQUFPLENBQUMsU0FBUyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ3JELFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUNqRDtZQUVELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUN2QyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQWlELEVBQUU7Z0JBQzVELE9BQU87b0JBQ0gsR0FBRyxlQUFlLENBQUM7d0JBQ2YsZUFBZSxFQUFFLEtBQUs7d0JBQ3RCLFdBQVcsRUFBRSxLQUFLO3dCQUNsQixlQUFlLEVBQUUsaUNBQWlCLENBQUMsTUFBTTt3QkFDekMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXO3dCQUM3RSxXQUFXLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMs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QztvQkFDZixLQUFLLEVBQUUsYUFBYTtvQkFDcEIsUUFBUSxFQUFFO3dCQUNOOzRCQUNJLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQzt5QkFDckM7cUJBQ0o7aUJBQ0osQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7Q0FDSixDQUFDO0FBRUYsU0FBUyxXQUFXLENBQUMsS0FBcUM7SUFDdEQsT0FBUSxLQUFzQixDQUFDLEtBQUssS0FBSyxTQUFTLENBQUM7QUFDdkQsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsZUFBZSxDQUFDLE1BQXVDO0lBQ25FLE9BQU87UUFDSCxHQUFHLE1BQU07UUFDVCw4REFBOEQ7UUFDOUQsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQVcsRUFBRSxLQUFVLEVBQUUsRUFBRTtZQUNsRSxJQUFJLEdBQUcsS0FBSyxrQkFBa0IsRUFBRTtnQkFDNUIsT0FBTyxFQUFFLENBQUM7YUFDYjtpQkFBTTtnQkFDSCxPQUFPLEtBQUssQ0FBQzthQUNoQjtRQUNMLENBQUMsQ0FBQztLQUNMLENBQUM7QUFDTixDQUFDO0FBWkQsMENBWUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9xdW90ZV9yZXBvcnRfdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRVJDMjBCcmlkZ2VTb3VyY2UsIEZpbGxEYXRhLCBOYXRpdmVGaWxsRGF0YSwgUmZxT3JkZXJGaWVsZHMgfSBmcm9tICdAMHgvYXNzZXQtc3dhcHBlcic7XG5pbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tICdAMHgvdXRpbHMnO1xuaW1wb3J0IHsgUHJvZHVjZXIgfSBmcm9tICdrYWZrYWpzJztcblxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IEZpcm1PdGNRdW90ZSwgSW5kaWNhdGl2ZVF1b3RlLCBSZnF0VjJRdW90ZSwgU3RvcmVkRmVlIH0gZnJvbSAnLi4vY29yZS90eXBlcyc7XG5cbmltcG9ydCB7IG51bWJlclV0aWxzIH0gZnJvbSAnLi9udW1iZXJfdXRpbHMnO1xuXG4vKiogTWlncmF0ZWQgZnJvbSBAMHgvYXNzZXQtc3dhcHBlciAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIEV4dGVuZGVkUXVvdGVSZXBvcnQge1xuICAgIHF1b3RlSWQ/OiBzdHJpbmc7XG4gICAgdGFrZXI/OiBzdHJpbmc7XG4gICAgdGltZXN0YW1wOiBudW1iZXI7XG4gICAgZmlybVF1b3RlUmVwb3J0OiBib29sZWFuO1xuICAgIHN1Ym1pc3Npb25CeTogJ3Rha2VyJyB8ICdtZXRhVHhuJyB8ICdyZnFtJyB8ICdnYXNsZXNzU3dhcFJmcScgfCAnZ2FzbGVzc1N3YXBBbW0nO1xuICAgIGJ1eUFtb3VudD86IHN0cmluZztcbiAgICBzZWxsQW1vdW50Pzogc3RyaW5nO1xuICAgIGJ1eVRva2VuQWRkcmVzczogc3RyaW5nO1xuICAgIHNlbGxUb2tlbkFkZHJlc3M6IHN0cmluZztcbiAgICBpbnRlZ3JhdG9ySWQ/OiBzdHJpbmc7XG4gICAgc2xpcHBhZ2VCaXBzPzogbnVtYmVyO1xuICAgIHplcm9FeFRyYW5zYWN0aW9uSGFzaD86IHN0cmluZztcbiAgICBkZWNvZGVkVW5pcXVlSWQ/OiBzdHJpbmc7XG4gICAgc291cmNlc0NvbnNpZGVyZWQ6IEV4dGVuZGVkUXVvdGVSZXBvcnRJbmRleGVkRW50cnlPdXRib3VuZFtdO1xuICAgIHNvdXJjZXNEZWxpdmVyZWQ6IEV4dGVuZGVkUXVvdGVSZXBvcnRJbmRleGVkRW50cnlPdXRib3VuZFtdIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFF1b3RlUmVwb3J0RW50cnlCYXNlIHtcbiAgICBsaXF1aWRpdHlTb3VyY2U6IEVSQzIwQnJpZGdlU291cmNlO1xuICAgIG1ha2VyQW1vdW50OiBCaWdOdW1iZXI7XG4gICAgdGFrZXJBbW91bnQ6IEJpZ051bWJlcjtcbiAgICBmaWxsRGF0YTogRmlsbERhdGE7XG59XG5leHBvcnQgaW50ZXJmYWNlIEJyaWRnZVF1b3RlUmVwb3J0RW50cnkgZXh0ZW5kcyBRdW90ZVJlcG9ydEVudHJ5QmFzZSB7XG4gICAgbGlxdWlkaXR5U291cmNlOiBFeGNsdWRlPEVSQzIwQnJpZGdlU291cmNlLCBFUkMyMEJyaWRnZVNvdXJjZS5OYXRpdmU+O1xufVxuZXhwb3J0IGludGVyZmFjZSBNdWx0aUhvcFF1b3RlUmVwb3J0RW50cnkgZXh0ZW5kcyBRdW90ZVJlcG9ydEVudHJ5QmFzZSB7XG4gICAgbGlxdWlkaXR5U291cmNlOiBFUkMyMEJyaWRnZVNvdXJjZS5NdWx0aUhvcDtcbiAgICBob3BTb3VyY2VzOiBFUkMyMEJyaWRnZVNvdXJjZVtdO1xufVxuZXhwb3J0IGludGVyZmFjZSBOYXRpdmVMaW1pdE9yZGVyUXVvdGVSZXBvcnRFbnRyeSBleHRlbmRzIFF1b3RlUmVwb3J0RW50cnlCYXNlIHtcbiAgICBsaXF1aWRpdHlTb3VyY2U6IEVSQzIwQnJpZGdlU291cmNlLk5hdGl2ZTtcbiAgICBmaWxsRGF0YTogTmF0aXZlRmlsbERhdGE7XG4gICAgZmlsbGFibGVUYWtlckFtb3VudDogQmlnTnVtYmVyO1xuICAgIGlzUkZROiBmYWxzZTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTmF0aXZlUmZxT3JkZXJRdW90ZVJlcG9ydEVudHJ5IGV4dGVuZHMgUXVvdGVSZXBvcnRFbnRyeUJhc2Uge1xuICAgIGxpcXVpZGl0eVNvdXJjZTogRVJDMjBCcmlkZ2VTb3VyY2UuTmF0aXZlO1xuICAgIGZpbGxEYXRhOiBOYXRpdmVGaWxsRGF0YTtcbiAgICBmaWxsYWJsZVRha2VyQW1vdW50OiBCaWdOdW1iZXI7XG4gICAgaXNSRlE6IHRydWU7XG4gICAgbmF0aXZlT3JkZXI6IFJmcU9yZGVyRmllbGRzO1xuICAgIG1ha2VyVXJpOiBzdHJpbmc7XG4gICAgY29tcGFyaXNvblByaWNlPzogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBJbmRpY2F0aXZlUmZxT3JkZXJRdW90ZVJlcG9ydEVudHJ5IGV4dGVuZHMgUXVvdGVSZXBvcnRFbnRyeUJhc2Uge1xuICAgIGxpcXVpZGl0eVNvdXJjZTogRVJDMjBCcmlkZ2VTb3VyY2UuTmF0aXZlO1xuICAgIGZpbGxhYmxlVGFrZXJBbW91bnQ6IEJpZ051bWJlcjtcbiAgICBpc1JGUTogdHJ1ZTtcbiAgICBtYWtlclVyaT86IHN0cmluZztcbiAgICBjb21wYXJpc29uUHJpY2U/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBkZWNsYXJlIHR5cGUgRXh0ZW5kZWRRdW90ZVJlcG9ydEVudHJ5ID1cbiAgICB8IEJyaWRnZVF1b3RlUmVwb3J0RW50cnlcbiAgICB8IE11bHRpSG9wUXVvdGVSZXBvcnRFbnRyeVxuICAgIHwgTmF0aXZlTGltaXRPcmRlclF1b3RlUmVwb3J0RW50cnlcbiAgICB8IE5hdGl2ZVJmcU9yZGVyUXVvdGVSZXBvcnRFbnRyeVxuICAgIHwgSW5kaWNhdGl2ZVJmcU9yZGVyUXVvdGVSZXBvcnRFbnRyeTtcblxuZXhwb3J0IHR5cGUgRXh0ZW5kZWRRdW90ZVJlcG9ydEluZGV4ZWRFbnRyeSA9IEV4dGVuZGVkUXVvdGVSZXBvcnRFbnRyeSAmIHtcbiAgICBxdW90ZUVudHJ5SW5kZXg6IG51bWJlcjtcbiAgICBpc0RlbGl2ZXJlZDogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIEV4dGVuZGVkUXVvdGVSZXBvcnRJbmRleGVkRW50cnlPdXRib3VuZCA9IE9taXQ8RXh0ZW5kZWRRdW90ZVJlcG9ydEluZGV4ZWRFbnRyeSwgJ2ZpbGxEYXRhJz4gJiB7XG4gICAgZmlsbERhdGE/OiBzdHJpbmc7XG59O1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG50eXBlIEV4dGVuZGVkUXVvdGVSZXBvcnRFbnRyeVdpdGhJbnRlcm1lZGlhdGVRdW90ZSA9IEV4dGVuZGVkUXVvdGVSZXBvcnRJbmRleGVkRW50cnlPdXRib3VuZCAmIHtcbiAgICBpc0ludGVybWVkaWF0ZTogYm9vbGVhbjtcbn07XG5cbnR5cGUgRXh0ZW5kZWRRdW90ZVJlcG9ydFdpdGhJbnRlcm1lZGlhdGVRdW90ZSA9IE9taXQ8RXh0ZW5kZWRRdW90ZVJlcG9ydCwgJ3NvdXJjZXNDb25zaWRlcmVkJz4gJiB7XG4gICAgc291cmNlc0NvbnNpZGVyZWQ6IEV4dGVuZGVkUXVvdGVSZXBvcnRFbnRyeVdpdGhJbnRlcm1lZGlhdGVRdW90ZVtdO1xufTtcblxudHlwZSBFeHRlbmRlZFF1b3RlUmVwb3J0V2l0aEZlZSA9IEV4dGVuZGVkUXVvdGVSZXBvcnRXaXRoSW50ZXJtZWRpYXRlUXVvdGUgJiB7XG4gICAgZmVlOiBTdG9yZWRGZWU7XG4gICAgYW1tUXVvdGVVbmlxdWVJZD86IHN0cmluZztcbiAgICBpc0xpcXVpZGl0eUF2YWlsYWJsZT86IGJvb2xlYW47XG59O1xuXG5pbnRlcmZhY2UgRXh0ZW5kZWRRdW90ZVJlcG9ydEZvclJGUU1Mb2dPcHRpb25zIHtcbiAgICBpc0Zpcm1RdW90ZTogYm9vbGVhbjtcbiAgICBzZWxsQW1vdW50PzogQmlnTnVtYmVyO1xuICAgIGJ1eUFtb3VudD86IEJpZ051bWJlcjtcbiAgICBidXlUb2tlbkFkZHJlc3M6IHN0cmluZztcbiAgICBzZWxsVG9rZW5BZGRyZXNzOiBzdHJpbmc7XG4gICAgaW50ZWdyYXRvcklkPzogc3RyaW5nO1xuICAgIHRha2VyPzogc3RyaW5nO1xuICAgIGZpbmFsUXVvdGVzOiBJbmRpY2F0aXZlUXVvdGVbXSB8IEZpcm1PdGNRdW90ZVtdO1xuICAgIGludGVybWVkaWF0ZVF1b3RlczogSW5kaWNhdGl2ZVF1b3RlW107XG4gICAgYmVzdFF1b3RlOiBJbmRpY2F0aXZlUXVvdGUgfCBGaXJtT3RjUXVvdGUgfCBudWxsO1xuICAgIGZlZTogU3RvcmVkRmVlO1xuICAgIGFtbVF1b3RlVW5pcXVlSWQ/OiBzdHJpbmc7XG4gICAgaXNMaXF1aWRpdHlBdmFpbGFibGU/OiBib29sZWFuO1xufVxuLyoqXG4gKiBSRlF0IFYyIEZlZSBFdmVudCBJbnRlcmZhY2VzXG4gKi9cbmludGVyZmFjZSBSZnF0VjJGZWVFdmVudExvZ09wdGlvbnMge1xuICAgIHJlcXVlc3RlZEJ1eUFtb3VudDogQmlnTnVtYmVyIHwgbnVsbDtcbiAgICByZXF1ZXN0ZWRTZWxsQW1vdW50OiBCaWdOdW1iZXIgfCBudWxsO1xuICAgIHJlcXVlc3RlZFRha2VyQWRkcmVzczogc3RyaW5nO1xuICAgIGJ1eVRva2VuQWRkcmVzczogc3RyaW5nO1xuICAgIHNlbGxUb2tlbkFkZHJlc3M6IHN0cmluZztcbiAgICBpbnRlZ3JhdG9ySWQ6IHN0cmluZztcbiAgICBibG9ja051bWJlcj86IG51bWJlcjtcbiAgICBxdW90ZXM6IFJmcXRWMlF1b3RlW107XG4gICAgZmVlOiBTdG9yZWRGZWU7XG59XG5cbmludGVyZmFjZSBSZnF0VjJGZWVFdmVudCB7XG4gICAgY3JlYXRlZEF0OiBudW1iZXI7XG4gICAgb3JkZXJIYXNoOiBzdHJpbmc7XG4gICAgcmVxdWVzdGVkQnV5QW1vdW50OiBCaWdOdW1iZXIgfCBudWxsO1xuICAgIHJlcXVlc3RlZFNlbGxBbW91bnQ6IEJpZ051bWJlciB8IG51bGw7XG4gICAgcmVxdWVzdGVkVGFrZXJBZGRyZXNzOiBzdHJpbmc7XG4gICAgZmlsbGFibGVCdXlBbW91bnQ6IEJpZ051bWJlcjtcbiAgICBmaWxsYWJsZVNlbGxBbW91bnQ6IEJpZ051bWJlcjtcbiAgICBidXlUb2tlbkFkZHJlc3M6IHN0cmluZztcbiAgICBzZWxsVG9rZW5BZGRyZXNzOiBzdHJpbmc7XG4gICAgZmVlOiBTdG9yZWRGZWU7XG4gICAgaW50ZWdyYXRvcklkOiBzdHJpbmc7XG4gICAgbWFrZXJJZD86IHN0cmluZztcbiAgICBtYWtlclVyaT86IHN0cmluZztcbiAgICBleHBpcnk6IEJpZ051bWJlcjtcbiAgICBibG9ja051bWJlcj86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IHF1b3RlUmVwb3J0VXRpbHMgPSB7XG4gICAgYXN5bmMgcHVibGlzaFJGUU1RdW90ZVJlcG9ydEFzeW5jKFxuICAgICAgICBsb2dPcHRzOiBFeHRlbmRlZFF1b3RlUmVwb3J0Rm9yUkZRTUxvZ09wdGlvbnMsXG4gICAgICAgIGthZmthUHJvZHVjZXI6IFByb2R1Y2VyLFxuICAgICAgICBxdW90ZVJlcG9ydFRvcGljPzogc3RyaW5nLFxuICAgICAgICBleHRlbmRlZFF1b3RlUmVwb3J0U3VibWlzc2lvbkJ5OiBFeHRlbmRlZFF1b3RlUmVwb3J0WydzdWJtaXNzaW9uQnknXSA9ICdyZnFtJyxcbiAgICApOiBQcm9taXNlPC8qIHF1b3RlSWQgKi8gc3RyaW5nIHwgbnVsbD4ge1xuICAgICAgICBpZiAoa2Fma2FQcm9kdWNlciAmJiBxdW90ZVJlcG9ydFRvcGljKSB7XG4gICAgICAgICAgICBjb25zdCBxdW90ZUlkID0gbnVtYmVyVXRpbHMucmFuZG9tSGV4TnVtYmVyT2ZMZW5ndGgoMTApO1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8oYEdlbmVyYXRpbmcgYW5kIHB1c2hpbmcgUkZRbSBRdW90ZSBSZXBvcnQgZm9yOiAke3F1b3RlSWR9YCk7XG5cbiAgICAgICAgICAgIGxldCBvcmRlckhhc2g6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChsb2dPcHRzLmJlc3RRdW90ZSAmJiBpc0Zpcm1RdW90ZShsb2dPcHRzLmJlc3RRdW90ZSkpIHtcbiAgICAgICAgICAgICAgICBvcmRlckhhc2ggPSBsb2dPcHRzLmJlc3RRdW90ZS5vcmRlci5nZXRIYXNoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGZpbmFsUXVvdGVzID0gbG9nT3B0cy5maW5hbFF1b3Rlcy5tYXAoXG4gICAgICAgICAgICAgICAgKHF1b3RlLCBpbmRleCk6IEV4dGVuZGVkUXVvdGVSZXBvcnRFbnRyeVdpdGhJbnRlcm1lZGlhdGVRdW90ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5qc29uaWZ5RmlsbERhdGEoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1b3RlRW50cnlJbmRleDogaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEZWxpdmVyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpcXVpZGl0eVNvdXJjZTogRVJDMjBCcmlkZ2VTb3VyY2UuTmF0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VyQW1vdW50OiBpc0Zpcm1RdW90ZShxdW90ZSkgPyBxdW90ZS5vcmRlci5tYWtlckFtb3VudCA6IHF1b3RlLm1ha2VyQW1vdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRha2VyQW1vdW50OiBpc0Zpcm1RdW90ZShxdW90ZSkgPyBxdW90ZS5vcmRlci50YWtlckFtb3VudCA6IHF1b3RlLnRha2VyQW1vdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxhYmxlVGFrZXJBbW91bnQ6IGlzRmlybVF1b3RlKHF1b3RlKSA/IHF1b3RlLm9yZGVyLnRha2VyQW1vdW50IDogcXVvdGUudGFrZXJBbW91bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSRlE6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFrZXJVcmk6IHF1b3RlLm1ha2VyVXJpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxEYXRhOiBpc0Zpcm1RdW90ZShxdW90ZSkgPyBxdW90ZS5vcmRlciA6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0ludGVybWVkaWF0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IGludGVybWVkaWF0ZVF1b3RlcyA9IGxvZ09wdHMuaW50ZXJtZWRpYXRlUXVvdGVzLm1hcChcbiAgICAgICAgICAgICAgICAocXVvdGUsIGluZGV4KTogRXh0ZW5kZWRRdW90ZVJlcG9ydEVudHJ5V2l0aEludGVybWVkaWF0ZVF1b3RlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmpzb25pZnlGaWxsRGF0YSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVvdGVFbnRyeUluZGV4OiBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0RlbGl2ZXJlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlxdWlkaXR5U291cmNlOiBFUkMyMEJyaWRnZVNvdXJjZS5OYXRpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFrZXJBbW91bnQ6IGlzRmlybVF1b3RlKHF1b3RlKSA/IHF1b3RlLm9yZGVyLm1ha2VyQW1vdW50IDogcXVvdGUubWFrZXJBbW91bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IGlzRmlybVF1b3RlKHF1b3RlKSA/IHF1b3RlLm9yZGVyLnRha2VyQW1vdW50IDogcXVvdGUudGFrZXJBbW91bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbGFibGVUYWtlckFtb3VudDogaXNGaXJtUXVvdGUocXVvdGUpID8gcXVvdGUub3JkZXIudGFrZXJBbW91bnQgOiBxdW90ZS50YWtlckFtb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JGUTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWtlclVyaTogcXVvdGUubWFrZXJVcmksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbERhdGE6IGlzRmlybVF1b3RlKHF1b3RlKSA/IHF1b3RlLm9yZGVyIDoge30sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzSW50ZXJtZWRpYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VzRGVsaXZlcmVkOiBFeHRlbmRlZFF1b3RlUmVwb3J0SW5kZXhlZEVudHJ5T3V0Ym91bmRbXSB8IHVuZGVmaW5lZCA9IGxvZ09wdHMuYmVzdFF1b3RlXG4gICAgICAgICAgICAgICAgPyBbXG4gICAgICAgICAgICAgICAgICAgICAganNvbmlmeUZpbGxEYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcXVvdGVFbnRyeUluZGV4OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpc0RlbGl2ZXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGlxdWlkaXR5U291cmNlOiBFUkMyMEJyaWRnZVNvdXJjZS5OYXRpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VyQW1vdW50OiBpc0Zpcm1RdW90ZShsb2dPcHRzLmJlc3RRdW90ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbG9nT3B0cy5iZXN0UXVvdGU/Lm9yZGVyLm1ha2VyQW1vdW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGxvZ09wdHMuYmVzdFF1b3RlPy5tYWtlckFtb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IGlzRmlybVF1b3RlKGxvZ09wdHMuYmVzdFF1b3RlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBsb2dPcHRzLmJlc3RRdW90ZT8ub3JkZXIudGFrZXJBbW91bnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbG9nT3B0cy5iZXN0UXVvdGU/LnRha2VyQW1vdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsYWJsZVRha2VyQW1vdW50OiBpc0Zpcm1RdW90ZShsb2dPcHRzLmJlc3RRdW90ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbG9nT3B0cy5iZXN0UXVvdGU/Lm9yZGVyLnRha2VyQW1vdW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGxvZ09wdHMuYmVzdFF1b3RlPy50YWtlckFtb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSRlE6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VyVXJpOiBsb2dPcHRzLmJlc3RRdW90ZT8ubWFrZXJVcmksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxEYXRhOiBpc0Zpcm1RdW90ZShsb2dPcHRzLmJlc3RRdW90ZSkgPyBsb2dPcHRzLmJlc3RRdW90ZT8ub3JkZXIgOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IGV4dGVuZGVkUXVvdGVSZXBvcnQ6IEV4dGVuZGVkUXVvdGVSZXBvcnRXaXRoRmVlID0ge1xuICAgICAgICAgICAgICAgIHF1b3RlSWQsXG4gICAgICAgICAgICAgICAgdGFrZXI6IGxvZ09wdHMudGFrZXIsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgIGZpcm1RdW90ZVJlcG9ydDogbG9nT3B0cy5pc0Zpcm1RdW90ZSxcbiAgICAgICAgICAgICAgICBzdWJtaXNzaW9uQnk6IGV4dGVuZGVkUXVvdGVSZXBvcnRTdWJtaXNzaW9uQnksXG4gICAgICAgICAgICAgICAgYnV5QW1vdW50OiBsb2dPcHRzLmJ1eUFtb3VudCA/IGxvZ09wdHMuYnV5QW1vdW50LnRvU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgc2VsbEFtb3VudDogbG9nT3B0cy5zZWxsQW1vdW50ID8gbG9nT3B0cy5zZWxsQW1vdW50LnRvU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgYnV5VG9rZW5BZGRyZXNzOiBsb2dPcHRzLmJ1eVRva2VuQWRkcmVzcyxcbiAgICAgICAgICAgICAgICBzZWxsVG9rZW5BZGRyZXNzOiBsb2dPcHRzLnNlbGxUb2tlbkFkZHJlc3MsXG4gICAgICAgICAgICAgICAgaW50ZWdyYXRvcklkOiBsb2dPcHRzLmludGVncmF0b3JJZCxcbiAgICAgICAgICAgICAgICBzbGlwcGFnZUJpcHM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB6ZXJvRXhUcmFuc2FjdGlvbkhhc2g6IG9yZGVySGFzaCxcbiAgICAgICAgICAgICAgICBzb3VyY2VzQ29uc2lkZXJlZDogZmluYWxRdW90ZXMuY29uY2F0KGludGVybWVkaWF0ZVF1b3RlcyksXG4gICAgICAgICAgICAgICAgc291cmNlc0RlbGl2ZXJlZCxcbiAgICAgICAgICAgICAgICBmZWU6IGxvZ09wdHMuZmVlLFxuICAgICAgICAgICAgICAgIGFtbVF1b3RlVW5pcXVlSWQ6IGxvZ09wdHMuYW1tUXVvdGVVbmlxdWVJZCxcbiAgICAgICAgICAgICAgICBpc0xpcXVpZGl0eUF2YWlsYWJsZTogbG9nT3B0cy5pc0xpcXVpZGl0eUF2YWlsYWJsZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBrYWZrYVByb2R1Y2VyLnNlbmQoe1xuICAgICAgICAgICAgICAgIHRvcGljOiBxdW90ZVJlcG9ydFRvcGljLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBKU09OLnN0cmluZ2lmeShleHRlbmRlZFF1b3RlUmVwb3J0KSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcXVvdGVJZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGFzeW5jIHB1Ymxpc2hSZnF0VjJGZWVFdmVudChsb2dPcHRzOiBSZnF0VjJGZWVFdmVudExvZ09wdGlvbnMsIGthZmthUHJvZHVjZXI6IFByb2R1Y2VyLCBmZWVFdmVudFRvcGljPzogc3RyaW5nKSB7XG4gICAgICAgIGlmIChrYWZrYVByb2R1Y2VyICYmIGZlZUV2ZW50VG9waWMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRBdCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhgR2VuZXJhdGluZyBhbmQgcHVzaGluZyBSRlF0IFYyIFF1b3RlIFJlcG9ydGApO1xuXG4gICAgICAgICAgICBsb2dPcHRzLnF1b3Rlcy5tYXAoKHF1b3RlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcXVvdGVSZXBvcnQ6IFJmcXRWMkZlZUV2ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVkQXQsXG4gICAgICAgICAgICAgICAgICAgIG9yZGVySGFzaDogcXVvdGUub3JkZXIuZ2V0SGFzaCgpLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCdXlBbW91bnQ6IGxvZ09wdHMucmVxdWVzdGVkQnV5QW1vdW50LFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRTZWxsQW1vdW50OiBsb2dPcHRzLnJlcXVlc3RlZFNlbGxBbW91bnQsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZFRha2VyQWRkcmVzczogbG9nT3B0cy5yZXF1ZXN0ZWRUYWtlckFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIGZpbGxhYmxlQnV5QW1vdW50OiBxdW90ZS5maWxsYWJsZU1ha2VyQW1vdW50LFxuICAgICAgICAgICAgICAgICAgICBmaWxsYWJsZVNlbGxBbW91bnQ6IHF1b3RlLmZpbGxhYmxlVGFrZXJBbW91bnQsXG4gICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuQWRkcmVzczogbG9nT3B0cy5idXlUb2tlbkFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbkFkZHJlc3M6IGxvZ09wdHMuc2VsbFRva2VuQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgZmVlOiBsb2dPcHRzLmZlZSxcbiAgICAgICAgICAgICAgICAgICAgaW50ZWdyYXRvcklkOiBsb2dPcHRzLmludGVncmF0b3JJZCxcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJJZDogcXVvdGUubWFrZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJVcmk6IHF1b3RlLm1ha2VyVXJpLFxuICAgICAgICAgICAgICAgICAgICBleHBpcnk6IHF1b3RlLm9yZGVyLmV4cGlyeSxcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tOdW1iZXI6IGxvZ09wdHMuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGthZmthUHJvZHVjZXIuc2VuZCh7XG4gICAgICAgICAgICAgICAgICAgIHRvcGljOiBmZWVFdmVudFRvcGljLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBKU09OLnN0cmluZ2lmeShxdW90ZVJlcG9ydCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcblxuZnVuY3Rpb24gaXNGaXJtUXVvdGUocXVvdGU6IEZpcm1PdGNRdW90ZSB8IEluZGljYXRpdmVRdW90ZSk6IHF1b3RlIGlzIEZpcm1PdGNRdW90ZSB7XG4gICAgcmV0dXJuIChxdW90ZSBhcyBGaXJtT3RjUXVvdGUpLm9yZGVyICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogTWlncmF0ZWQgZnJvbSBAMHgvYXNzZXQtc3dhcHBlclxuICovXG5leHBvcnQgZnVuY3Rpb24ganNvbmlmeUZpbGxEYXRhKHNvdXJjZTogRXh0ZW5kZWRRdW90ZVJlcG9ydEluZGV4ZWRFbnRyeSk6IEV4dGVuZGVkUXVvdGVSZXBvcnRJbmRleGVkRW50cnlPdXRib3VuZCB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc291cmNlLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBmaWxsRGF0YTogSlNPTi5zdHJpbmdpZnkoc291cmNlLmZpbGxEYXRhLCAoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdfc2FtcGxlckNvbnRyYWN0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICB9O1xufVxuIl0sInZlcnNpb24iOjN9