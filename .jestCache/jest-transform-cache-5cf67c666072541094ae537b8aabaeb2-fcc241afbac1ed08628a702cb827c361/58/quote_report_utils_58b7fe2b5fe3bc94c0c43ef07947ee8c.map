{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/quote_report_utils.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/quote_report_utils.ts"],"sourcesContent":["import { ERC20BridgeSource, FillData, NativeFillData, RfqOrderFields } from '@0x/asset-swapper';\nimport { BigNumber } from '@0x/utils';\nimport { Producer } from 'kafkajs';\n\nimport { logger } from '../logger';\nimport { FirmOtcQuote, IndicativeQuote, RfqtV2Quote, StoredFee } from '../core/types';\n\nimport { numberUtils } from './number_utils';\n\n/** Migrated from @0x/asset-swapper */\n\nexport interface ExtendedQuoteReport {\n    quoteId?: string;\n    taker?: string;\n    timestamp: number;\n    firmQuoteReport: boolean;\n    submissionBy: 'taker' | 'metaTxn' | 'rfqm' | 'gaslessSwapRfq' | 'gaslessSwapAmm';\n    buyAmount?: string;\n    sellAmount?: string;\n    buyTokenAddress: string;\n    sellTokenAddress: string;\n    integratorId?: string;\n    slippageBips?: number;\n    zeroExTransactionHash?: string;\n    decodedUniqueId?: string;\n    sourcesConsidered: ExtendedQuoteReportIndexedEntryOutbound[];\n    sourcesDelivered: ExtendedQuoteReportIndexedEntryOutbound[] | undefined;\n}\n\nexport interface QuoteReportEntryBase {\n    liquiditySource: ERC20BridgeSource;\n    makerAmount: BigNumber;\n    takerAmount: BigNumber;\n    fillData: FillData;\n}\nexport interface BridgeQuoteReportEntry extends QuoteReportEntryBase {\n    liquiditySource: Exclude<ERC20BridgeSource, ERC20BridgeSource.Native>;\n}\nexport interface MultiHopQuoteReportEntry extends QuoteReportEntryBase {\n    liquiditySource: ERC20BridgeSource.MultiHop;\n    hopSources: ERC20BridgeSource[];\n}\nexport interface NativeLimitOrderQuoteReportEntry extends QuoteReportEntryBase {\n    liquiditySource: ERC20BridgeSource.Native;\n    fillData: NativeFillData;\n    fillableTakerAmount: BigNumber;\n    isRFQ: false;\n}\nexport interface NativeRfqOrderQuoteReportEntry extends QuoteReportEntryBase {\n    liquiditySource: ERC20BridgeSource.Native;\n    fillData: NativeFillData;\n    fillableTakerAmount: BigNumber;\n    isRFQ: true;\n    nativeOrder: RfqOrderFields;\n    makerUri: string;\n    comparisonPrice?: number;\n}\nexport interface IndicativeRfqOrderQuoteReportEntry extends QuoteReportEntryBase {\n    liquiditySource: ERC20BridgeSource.Native;\n    fillableTakerAmount: BigNumber;\n    isRFQ: true;\n    makerUri?: string;\n    comparisonPrice?: number;\n}\n\nexport declare type ExtendedQuoteReportEntry =\n    | BridgeQuoteReportEntry\n    | MultiHopQuoteReportEntry\n    | NativeLimitOrderQuoteReportEntry\n    | NativeRfqOrderQuoteReportEntry\n    | IndicativeRfqOrderQuoteReportEntry;\n\nexport type ExtendedQuoteReportIndexedEntry = ExtendedQuoteReportEntry & {\n    quoteEntryIndex: number;\n    isDelivered: boolean;\n};\n\nexport type ExtendedQuoteReportIndexedEntryOutbound = Omit<ExtendedQuoteReportIndexedEntry, 'fillData'> & {\n    fillData?: string;\n};\n\n/************************************/\n\ntype ExtendedQuoteReportEntryWithIntermediateQuote = ExtendedQuoteReportIndexedEntryOutbound & {\n    isIntermediate: boolean;\n};\n\ntype ExtendedQuoteReportWithIntermediateQuote = Omit<ExtendedQuoteReport, 'sourcesConsidered'> & {\n    sourcesConsidered: ExtendedQuoteReportEntryWithIntermediateQuote[];\n};\n\ntype ExtendedQuoteReportWithFee = ExtendedQuoteReportWithIntermediateQuote & {\n    fee: StoredFee;\n    ammQuoteUniqueId?: string;\n    isLiquidityAvailable?: boolean;\n};\n\ninterface ExtendedQuoteReportForRFQMLogOptions {\n    isFirmQuote: boolean;\n    sellAmount?: BigNumber;\n    buyAmount?: BigNumber;\n    buyTokenAddress: string;\n    sellTokenAddress: string;\n    integratorId?: string;\n    taker?: string;\n    finalQuotes: IndicativeQuote[] | FirmOtcQuote[];\n    intermediateQuotes: IndicativeQuote[];\n    bestQuote: IndicativeQuote | FirmOtcQuote | null;\n    fee: StoredFee;\n    ammQuoteUniqueId?: string;\n    isLiquidityAvailable?: boolean;\n}\n/**\n * RFQt V2 Fee Event Interfaces\n */\ninterface RfqtV2FeeEventLogOptions {\n    requestedBuyAmount: BigNumber | null;\n    requestedSellAmount: BigNumber | null;\n    requestedTakerAddress: string;\n    buyTokenAddress: string;\n    sellTokenAddress: string;\n    integratorId: string;\n    blockNumber?: number;\n    quotes: RfqtV2Quote[];\n    fee: StoredFee;\n}\n\ninterface RfqtV2FeeEvent {\n    createdAt: number;\n    orderHash: string;\n    requestedBuyAmount: BigNumber | null;\n    requestedSellAmount: BigNumber | null;\n    requestedTakerAddress: string;\n    fillableBuyAmount: BigNumber;\n    fillableSellAmount: BigNumber;\n    buyTokenAddress: string;\n    sellTokenAddress: string;\n    fee: StoredFee;\n    integratorId: string;\n    makerId?: string;\n    makerUri?: string;\n    expiry: BigNumber;\n    blockNumber?: number;\n}\n\nexport const quoteReportUtils = {\n    async publishRFQMQuoteReportAsync(\n        logOpts: ExtendedQuoteReportForRFQMLogOptions,\n        kafkaProducer: Producer,\n        quoteReportTopic?: string,\n        extendedQuoteReportSubmissionBy: ExtendedQuoteReport['submissionBy'] = 'rfqm',\n    ): Promise</* quoteId */ string | null> {\n        if (kafkaProducer && quoteReportTopic) {\n            const quoteId = numberUtils.randomHexNumberOfLength(10);\n            logger.info(`Generating and pushing RFQm Quote Report for: ${quoteId}`);\n\n            let orderHash: string | undefined;\n            if (logOpts.bestQuote && isFirmQuote(logOpts.bestQuote)) {\n                orderHash = logOpts.bestQuote.order.getHash();\n            }\n\n            const finalQuotes = logOpts.finalQuotes.map(\n                (quote, index): ExtendedQuoteReportEntryWithIntermediateQuote => {\n                    return {\n                        ...jsonifyFillData({\n                            quoteEntryIndex: index,\n                            isDelivered: false,\n                            liquiditySource: ERC20BridgeSource.Native,\n                            makerAmount: isFirmQuote(quote) ? quote.order.makerAmount : quote.makerAmount,\n                            takerAmount: isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount,\n                            fillableTakerAmount: isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount,\n                            isRFQ: true,\n                            makerUri: quote.makerUri,\n                            fillData: isFirmQuote(quote) ? quote.order : {},\n                        }),\n                        isIntermediate: false,\n                    };\n                },\n            );\n\n            const intermediateQuotes = logOpts.intermediateQuotes.map(\n                (quote, index): ExtendedQuoteReportEntryWithIntermediateQuote => {\n                    return {\n                        ...jsonifyFillData({\n                            quoteEntryIndex: index,\n                            isDelivered: false,\n                            liquiditySource: ERC20BridgeSource.Native,\n                            makerAmount: isFirmQuote(quote) ? quote.order.makerAmount : quote.makerAmount,\n                            takerAmount: isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount,\n                            fillableTakerAmount: isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount,\n                            isRFQ: true,\n                            makerUri: quote.makerUri,\n                            fillData: isFirmQuote(quote) ? quote.order : {},\n                        }),\n                        isIntermediate: true,\n                    };\n                },\n            );\n\n            const sourcesDelivered: ExtendedQuoteReportIndexedEntryOutbound[] | undefined = logOpts.bestQuote\n                ? [\n                      jsonifyFillData({\n                          quoteEntryIndex: 0,\n                          isDelivered: true,\n                          liquiditySource: ERC20BridgeSource.Native,\n                          makerAmount: isFirmQuote(logOpts.bestQuote)\n                              ? logOpts.bestQuote?.order.makerAmount\n                              : logOpts.bestQuote?.makerAmount,\n                          takerAmount: isFirmQuote(logOpts.bestQuote)\n                              ? logOpts.bestQuote?.order.takerAmount\n                              : logOpts.bestQuote?.takerAmount,\n                          fillableTakerAmount: isFirmQuote(logOpts.bestQuote)\n                              ? logOpts.bestQuote?.order.takerAmount\n                              : logOpts.bestQuote?.takerAmount,\n                          isRFQ: true,\n                          makerUri: logOpts.bestQuote?.makerUri,\n                          fillData: isFirmQuote(logOpts.bestQuote) ? logOpts.bestQuote?.order : {},\n                      }),\n                  ]\n                : undefined;\n            const extendedQuoteReport: ExtendedQuoteReportWithFee = {\n                quoteId,\n                taker: logOpts.taker,\n                timestamp: Date.now(),\n                firmQuoteReport: logOpts.isFirmQuote,\n                submissionBy: extendedQuoteReportSubmissionBy,\n                buyAmount: logOpts.buyAmount ? logOpts.buyAmount.toString() : undefined,\n                sellAmount: logOpts.sellAmount ? logOpts.sellAmount.toString() : undefined,\n                buyTokenAddress: logOpts.buyTokenAddress,\n                sellTokenAddress: logOpts.sellTokenAddress,\n                integratorId: logOpts.integratorId,\n                slippageBips: undefined,\n                zeroExTransactionHash: orderHash,\n                sourcesConsidered: finalQuotes.concat(intermediateQuotes),\n                sourcesDelivered,\n                fee: logOpts.fee,\n                ammQuoteUniqueId: logOpts.ammQuoteUniqueId,\n                isLiquidityAvailable: logOpts.isLiquidityAvailable,\n            };\n            kafkaProducer.send({\n                topic: quoteReportTopic,\n                messages: [\n                    {\n                        value: JSON.stringify(extendedQuoteReport),\n                    },\n                ],\n            });\n            return quoteId;\n        }\n        return null;\n    },\n    async publishRfqtV2FeeEvent(logOpts: RfqtV2FeeEventLogOptions, kafkaProducer: Producer, feeEventTopic?: string) {\n        if (kafkaProducer && feeEventTopic) {\n            const createdAt = Date.now();\n            logger.info(`Generating and pushing RFQt V2 Quote Report`);\n\n            logOpts.quotes.map((quote) => {\n                const quoteReport: RfqtV2FeeEvent = {\n                    createdAt,\n                    orderHash: quote.order.getHash(),\n                    requestedBuyAmount: logOpts.requestedBuyAmount,\n                    requestedSellAmount: logOpts.requestedSellAmount,\n                    requestedTakerAddress: logOpts.requestedTakerAddress,\n                    fillableBuyAmount: quote.fillableMakerAmount,\n                    fillableSellAmount: quote.fillableTakerAmount,\n                    buyTokenAddress: logOpts.buyTokenAddress,\n                    sellTokenAddress: logOpts.sellTokenAddress,\n                    fee: logOpts.fee,\n                    integratorId: logOpts.integratorId,\n                    makerId: quote.makerId,\n                    makerUri: quote.makerUri,\n                    expiry: quote.order.expiry,\n                    blockNumber: logOpts.blockNumber,\n                };\n\n                kafkaProducer.send({\n                    topic: feeEventTopic,\n                    messages: [\n                        {\n                            value: JSON.stringify(quoteReport),\n                        },\n                    ],\n                });\n            });\n        }\n    },\n};\n\nfunction isFirmQuote(quote: FirmOtcQuote | IndicativeQuote): quote is FirmOtcQuote {\n    return (quote as FirmOtcQuote).order !== undefined;\n}\n\n/**\n * Migrated from @0x/asset-swapper\n */\nexport function jsonifyFillData(source: ExtendedQuoteReportIndexedEntry): ExtendedQuoteReportIndexedEntryOutbound {\n    return {\n        ...source,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fillData: JSON.stringify(source.fillData, (key: string, value: any) => {\n            if (key === '_samplerContract') {\n                return {};\n            } else {\n                return value;\n            }\n        }),\n    };\n}\n"],"version":3}