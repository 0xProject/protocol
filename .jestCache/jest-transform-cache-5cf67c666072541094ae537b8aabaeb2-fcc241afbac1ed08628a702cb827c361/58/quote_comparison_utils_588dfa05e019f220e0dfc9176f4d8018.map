{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/quote_comparison_utils.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/quote_comparison_utils.ts"],"sourcesContent":["import { Counter } from 'prom-client';\n\nimport { ONE_SECOND_MS } from '../core/constants';\nimport { logger } from '../logger';\nimport { FirmOtcQuote, IndicativeQuote } from '../core/types';\n\nimport { toPairString } from '../core/pair_utils';\nimport { BigNumber } from '@0x/utils';\nimport { V4RFQIndicativeQuote } from '../quote-server/types';\n\nconst RFQM_MAKER_BLOCKED_FOR_LOW_MAKER_BALANCE = new Counter({\n    name: 'rfqm_maker_blocked_for_low_maker_balance',\n    help: 'A maker get blocked because of low maker balance',\n    labelNames: ['maker_uri', 'chain_id', 'pair_key'],\n});\n\n/**\n * Selects the best quote from an array of quotes.\n *\n * Ignores quotes that:\n *  - are for the wrong pair\n *  - cannot fill 100% of the requested amount\n *  - expire in less than the validity window\n *  - cannot be filled by the maker due to insufficient balances, if quotedMakerBalances is present\n *      (only for firm quotes)\n *\n * And selects the one with the best price.\n */\nexport function getBestQuote<T extends IndicativeQuote | FirmOtcQuote>(\n    quotes: T[],\n    isSelling: boolean,\n    takerToken: string,\n    makerToken: string,\n    assetFillAmount: BigNumber,\n    validityWindowMs: number,\n    quotedMakerBalances?: BigNumber[],\n): T | null {\n    // If maker balances are provided, quotes in which maker addresses cannot provide sufficient\n    // balances to fully fill the order are filtered out\n    let isMakerFillablePredicate = (_q: T, _idx: number) => true;\n    if (quotedMakerBalances) {\n        if (quotes.length !== quotedMakerBalances.length) {\n            throw new Error('Quotes do not match with provided maker balances');\n        }\n        isMakerFillablePredicate = (q: T, idx: number) => {\n            if (isFirmQuote(q) && q.order.makerAmount.gt(quotedMakerBalances[idx])) {\n                RFQM_MAKER_BLOCKED_FOR_LOW_MAKER_BALANCE.labels(\n                    q.makerUri,\n                    q.order.chainId.toString(),\n                    toPairString(getMakerToken(q), getTakerToken(q)),\n                ).inc();\n                logger.warn(\n                    {\n                        maker: q.makerUri,\n                        makerBalance: quotedMakerBalances[idx],\n                        order: q.order,\n                    },\n                    'Quote has insufficient maker balance',\n                );\n                return false;\n            }\n            return true;\n        };\n    }\n\n    const validityWindowSeconds = validityWindowMs / ONE_SECOND_MS;\n    const sortedQuotes = quotes\n        .filter(isMakerFillablePredicate)\n        .filter((q) => getTakerToken(q) === takerToken && getMakerToken(q) === makerToken)\n        .filter((q) => {\n            const requestedAmount = isSelling ? getTakerAmount(q) : getMakerAmount(q);\n            return requestedAmount.eq(assetFillAmount);\n        })\n        .filter((q) => !willQuoteExpireIn(q, validityWindowSeconds))\n        .sort((a, b) => {\n            // Want the most amount of maker tokens for each taker token\n            const aPrice = getMakerAmount(a).div(getTakerAmount(a));\n            const bPrice = getMakerAmount(b).div(getTakerAmount(b));\n            return bPrice.minus(aPrice).toNumber();\n        });\n\n    // No quotes found\n    if (sortedQuotes.length === 0) {\n        return null;\n    }\n\n    // Get the best quote\n    return sortedQuotes[0];\n}\n\n/// Private getter functions\n\nconst getTakerToken = (quote: V4RFQIndicativeQuote | FirmOtcQuote): string => {\n    return isFirmQuote(quote) ? quote.order.takerToken : quote.takerToken;\n};\n\nconst getMakerToken = (quote: V4RFQIndicativeQuote | FirmOtcQuote): string => {\n    return isFirmQuote(quote) ? quote.order.makerToken : quote.makerToken;\n};\n\nconst getTakerAmount = (quote: V4RFQIndicativeQuote | FirmOtcQuote): BigNumber => {\n    return isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount;\n};\n\nconst getMakerAmount = (quote: V4RFQIndicativeQuote | FirmOtcQuote): BigNumber => {\n    return isFirmQuote(quote) ? quote.order.makerAmount : quote.makerAmount;\n};\n\nconst willQuoteExpireIn = (quote: V4RFQIndicativeQuote | FirmOtcQuote, secondsFromNow: number): boolean => {\n    if (isFirmQuote(quote)) {\n        return quote.order.willExpire(secondsFromNow);\n    }\n\n    // Handle indicative quote\n    const nowSeconds = new BigNumber(Date.now()).div(ONE_SECOND_MS);\n    const expirationCutoff = nowSeconds.plus(secondsFromNow);\n    return quote.expiry.lt(expirationCutoff);\n};\n\nconst isFirmQuote = (quote: V4RFQIndicativeQuote | FirmOtcQuote): quote is FirmOtcQuote => {\n    return (quote as FirmOtcQuote).order !== undefined;\n};\n"],"version":3}