58bd93758899c45f962866b7d232d584
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBestQuote = void 0;
const prom_client_1 = require("prom-client");
const constants_1 = require("../core/constants");
const logger_1 = require("../logger");
const pair_utils_1 = require("../core/pair_utils");
const utils_1 = require("@0x/utils");
const RFQM_MAKER_BLOCKED_FOR_LOW_MAKER_BALANCE = new prom_client_1.Counter({
    name: 'rfqm_maker_blocked_for_low_maker_balance',
    help: 'A maker get blocked because of low maker balance',
    labelNames: ['maker_uri', 'chain_id', 'pair_key'],
});
/**
 * Selects the best quote from an array of quotes.
 *
 * Ignores quotes that:
 *  - are for the wrong pair
 *  - cannot fill 100% of the requested amount
 *  - expire in less than the validity window
 *  - cannot be filled by the maker due to insufficient balances, if quotedMakerBalances is present
 *      (only for firm quotes)
 *
 * And selects the one with the best price.
 */
function getBestQuote(quotes, isSelling, takerToken, makerToken, assetFillAmount, validityWindowMs, quotedMakerBalances) {
    // If maker balances are provided, quotes in which maker addresses cannot provide sufficient
    // balances to fully fill the order are filtered out
    let isMakerFillablePredicate = (_q, _idx) => true;
    if (quotedMakerBalances) {
        if (quotes.length !== quotedMakerBalances.length) {
            throw new Error('Quotes do not match with provided maker balances');
        }
        isMakerFillablePredicate = (q, idx) => {
            if (isFirmQuote(q) && q.order.makerAmount.gt(quotedMakerBalances[idx])) {
                RFQM_MAKER_BLOCKED_FOR_LOW_MAKER_BALANCE.labels(q.makerUri, q.order.chainId.toString(), (0, pair_utils_1.toPairString)(getMakerToken(q), getTakerToken(q))).inc();
                logger_1.logger.warn({
                    maker: q.makerUri,
                    makerBalance: quotedMakerBalances[idx],
                    order: q.order,
                }, 'Quote has insufficient maker balance');
                return false;
            }
            return true;
        };
    }
    const validityWindowSeconds = validityWindowMs / constants_1.ONE_SECOND_MS;
    const sortedQuotes = quotes
        .filter(isMakerFillablePredicate)
        .filter((q) => getTakerToken(q) === takerToken && getMakerToken(q) === makerToken)
        .filter((q) => {
        const requestedAmount = isSelling ? getTakerAmount(q) : getMakerAmount(q);
        return requestedAmount.eq(assetFillAmount);
    })
        .filter((q) => !willQuoteExpireIn(q, validityWindowSeconds))
        .sort((a, b) => {
        // Want the most amount of maker tokens for each taker token
        const aPrice = getMakerAmount(a).div(getTakerAmount(a));
        const bPrice = getMakerAmount(b).div(getTakerAmount(b));
        return bPrice.minus(aPrice).toNumber();
    });
    // No quotes found
    if (sortedQuotes.length === 0) {
        return null;
    }
    // Get the best quote
    return sortedQuotes[0];
}
exports.getBestQuote = getBestQuote;
/// Private getter functions
const getTakerToken = (quote) => {
    return isFirmQuote(quote) ? quote.order.takerToken : quote.takerToken;
};
const getMakerToken = (quote) => {
    return isFirmQuote(quote) ? quote.order.makerToken : quote.makerToken;
};
const getTakerAmount = (quote) => {
    return isFirmQuote(quote) ? quote.order.takerAmount : quote.takerAmount;
};
const getMakerAmount = (quote) => {
    return isFirmQuote(quote) ? quote.order.makerAmount : quote.makerAmount;
};
const willQuoteExpireIn = (quote, secondsFromNow) => {
    if (isFirmQuote(quote)) {
        return quote.order.willExpire(secondsFromNow);
    }
    // Handle indicative quote
    const nowSeconds = new utils_1.BigNumber(Date.now()).div(constants_1.ONE_SECOND_MS);
    const expirationCutoff = nowSeconds.plus(secondsFromNow);
    return quote.expiry.lt(expirationCutoff);
};
const isFirmQuote = (quote) => {
    return quote.order !== undefined;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,