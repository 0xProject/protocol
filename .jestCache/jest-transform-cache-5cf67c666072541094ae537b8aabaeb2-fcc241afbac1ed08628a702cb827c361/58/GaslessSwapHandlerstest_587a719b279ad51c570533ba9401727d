ac1dc5ab828ef8af97f8a25ae943417e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../../services/GaslessSwapService', () => {
    return {
        GaslessSwapService: jest.fn().mockImplementation(() => {
            return {
                fetchPriceAsync: jest.fn(),
                fetchQuoteAsync: jest.fn(),
                processSubmitAsync: jest.fn(),
                // tslint:disable-next-line: custom-no-magic-numbers
                getTokenDecimalsAsync: jest.fn().mockResolvedValue(18),
            };
        }),
    };
});
jest.mock('../../utils/config_manager', () => {
    return {
        ConfigManager: jest.fn().mockImplementation(() => {
            return {
                getRfqmApiKeyWhitelist: jest.fn().mockReturnValue(new Set(['integrator-api-key'])),
                getIntegratorIdForApiKey: jest.fn().mockReturnValue('integrator-id'),
                getIntegratorByIdOrThrow: jest.fn().mockImplementation((id) => {
                    if (id !== 'integrator-id') {
                        throw new Error();
                    }
                    const integrator = {
                        apiKeys: ['integrator-api-key'],
                        allowedChainIds: [420, 1337],
                        integratorId: 'integrator-id',
                        label: 'test integrator',
                        plp: false,
                        rfqt: false,
                        rfqm: true,
                    };
                    return integrator;
                }),
            };
        }),
    };
});
// tslint:disable: max-file-line-count
const api_utils_1 = require("@0x/api-utils");
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const express = require("express");
const HttpStatus = require("http-status-codes");
const lodash_1 = require("lodash");
const supertest = require("supertest");
const constants_1 = require("../../core/constants");
const types_1 = require("../../core/types");
const error_handling_1 = require("../../middleware/error_handling");
const GaslessSwapRouter_1 = require("../../routers/GaslessSwapRouter");
const GaslessSwapService_1 = require("../../services/GaslessSwapService");
const types_2 = require("../../services/types");
const config_manager_1 = require("../../utils/config_manager");
// tslint:disable: no-object-literal-type-assertion
const mockGaslessSwapService = jest.mocked(new GaslessSwapService_1.GaslessSwapService(0, {}, new URL('http://meta.transaction.service'), {}, {}, {}, {}, {}));
const mockConfigManager = jest.mocked(new config_manager_1.ConfigManager());
// tslint:enable: no-object-literal-type-assertion
const testChainId = 1337;
/**
 * Verifies the proper response to a request using a mocked `GaslessSwapService`.
 *
 * Each case sets up its own little Express app to avoid coupiling this
 * test to the upstream router.
 */
describe('GaslessSwapHandlers', () => {
    const takerAddress = '0x4c42a706410f1190f97d26fe3c999c90070aa40f';
    const takerPrivateKey = '0xd2c2349e10170e4219d9febd1c663ea5c7334f79c38d25f4f52c85af796c7c05';
    const feeRecipient = '0x5fb321349ace5303c82f0d1d491041e042f2ad22';
    const app = express()
        .use(express.json())
        .use(constants_1.ZERO_G_PATH, (0, GaslessSwapRouter_1.createZeroGRouter)(new Map([[testChainId, mockGaslessSwapService]]), mockConfigManager))
        .use(constants_1.ZERO_G_ALIAS_PATH, (0, GaslessSwapRouter_1.createZeroGRouter)(new Map([[testChainId, mockGaslessSwapService]]), mockConfigManager))
        .use(constants_1.TX_RELAY_V1_PATH, (0, GaslessSwapRouter_1.createTxRelayV1Router)(new Map([[testChainId, mockGaslessSwapService]]), mockConfigManager))
        .use(error_handling_1.errorHandler);
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('parameter verification', () => {
        it('throws if a required parameter is missing', async () => {
            const response = await supertest(app)
                .get(`${constants_1.ZERO_G_ALIAS_PATH}/price`)
                .query({ makerToken: '0xmakertoken' })
                .set('Accept', 'application/json');
            expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.RequiredField);
            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
        });
        it('throws if the chain ID is invalid', async () => {
            const response = await supertest(app)
                .get(`${constants_1.ZERO_G_ALIAS_PATH}/price`)
                .set('Content-type', 'application/json')
                .set('0x-api-key', 'integrator-api-key')
                .set('0x-chain-id', '420') // tslint:disable-line: custom-no-magic-numbers
                .query({
                buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                buyAmount: 1000,
                takerAddress,
                intentOnFilling: 'false',
                skipValidation: 'true',
            });
            expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.FieldInvalid);
            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
        });
        describe('zero-g', () => {
            it('throws if the `slippagePercentage` is out of range for /price', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 2.1,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.ValueOutOfRange);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `slippagePercentage` is out of range for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 0.00001,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.ValueOutOfRange);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `slippagePercentage` is invalid for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 'invalid',
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.IncorrectFormat);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
        });
        describe('tx relay v1', () => {
            it('throws if the `slippagePercentage` is out of range for /price', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.TX_RELAY_V1_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 101,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.ValueOutOfRange);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `slippagePercentage` is out of range for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.TX_RELAY_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 0.001,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.ValueOutOfRange);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `slippagePercentage` is invalid for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.TX_RELAY_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 'invalid',
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.IncorrectFormat);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `feeType` is invalid for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.TX_RELAY_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 10,
                    feeType: 'invalid',
                    feeSellTokenPercentage: 10,
                    feeRecipient,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.ValueOutOfRange);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `feeSellTokenPercentage` is undefined when `feeType` is provided for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.TX_RELAY_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 10,
                    feeType: 'volume',
                    feeRecipient,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.RequiredField);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `feeSellTokenPercentage` is out of range for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.TX_RELAY_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 10,
                    feeType: 'volume',
                    feeSellTokenPercentage: 101,
                    feeRecipient,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.ValueOutOfRange);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `feeSellTokenPercentage` is out of range for /price', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.TX_RELAY_V1_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 10,
                    feeType: 'volume',
                    feeSellTokenPercentage: 101,
                    feeRecipient,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.ValueOutOfRange);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
            it('throws if the `feeRecipient` is undefined when `feeType` is provided for /quote', async () => {
                const response = await supertest(app)
                    .get(`${constants_1.TX_RELAY_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337') // tslint:disable-line: custom-no-magic-numbers
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    slippagePercentage: 10,
                    feeType: 'volume',
                    feeSellTokenPercentage: 5,
                });
                expect(response.body.validationErrors[0].code).toEqual(api_utils_1.ValidationErrorCodes.RequiredField);
                expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);
            });
        });
    });
    describe('getPriceAsync', () => {
        describe('zero-g', () => {
            it('responds with an error if the underlying service call fails', async () => {
                mockGaslessSwapService.fetchPriceAsync.mockRejectedValueOnce(new Error('The service blew up'));
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                });
                expect(response.statusCode).toEqual(HttpStatus.INTERNAL_SERVER_ERROR);
            });
            it('passes calls on to Gasless Swap Service', async () => {
                mockGaslessSwapService.fetchPriceAsync.mockResolvedValue(null);
                await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                });
                expect(mockGaslessSwapService.fetchPriceAsync.mock.calls[0]).toMatchInlineSnapshot(`
                    Array [
                      Object {
                        "affiliateAddress": undefined,
                        "buyAmount": "1000",
                        "buyToken": "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
                        "buyTokenDecimals": 18,
                        "feeRecipient": undefined,
                        "feeSellTokenPercentage": undefined,
                        "feeType": undefined,
                        "integrator": Object {
                          "allowedChainIds": Array [
                            420,
                            1337,
                          ],
                          "apiKeys": Array [
                            "integrator-api-key",
                          ],
                          "integratorId": "integrator-id",
                          "label": "test integrator",
                          "plp": false,
                          "rfqm": true,
                          "rfqt": false,
                        },
                        "sellAmount": undefined,
                        "sellToken": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                        "sellTokenDecimals": 18,
                        "slippagePercentage": undefined,
                        "takerAddress": "0x4c42a706410f1190f97d26fe3c999c90070aa40f",
                      },
                      "metatransaction",
                    ]
                `);
            });
            it('returns returns an RFQ Price', async () => {
                const price = {
                    allowanceTarget: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
                    buyAmount: new utils_1.BigNumber(1000),
                    sellAmount: new utils_1.BigNumber(2000),
                    buyTokenAddress: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    gas: new utils_1.BigNumber(1043459),
                    price: new utils_1.BigNumber(2),
                    liquiditySource: 'rfq',
                };
                mockGaslessSwapService.fetchPriceAsync.mockResolvedValue(price);
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                });
                expect(response.body).toStrictEqual({ ...convertBigNumbersToJson(price), liquidityAvailable: true });
                expect(response.statusCode).toEqual(HttpStatus.OK);
            });
            it('returns returns an AMM Price', async () => {
                const price = {
                    allowanceTarget: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
                    buyAmount: new utils_1.BigNumber(1000),
                    sellAmount: new utils_1.BigNumber(2000),
                    buyTokenAddress: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    gas: new utils_1.BigNumber(1043459),
                    price: new utils_1.BigNumber(2),
                    liquiditySource: 'amm',
                };
                mockGaslessSwapService.fetchPriceAsync.mockResolvedValue(price);
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                });
                expect(response.body).toStrictEqual({ ...convertBigNumbersToJson(price), liquidityAvailable: true });
                expect(response.statusCode).toEqual(HttpStatus.OK);
            });
        });
        describe('tx relay v1', () => {
            it('passes calls on to Gasless Swap Service', async () => {
                mockGaslessSwapService.fetchPriceAsync.mockResolvedValue(null);
                await supertest(app)
                    .get(`${constants_1.TX_RELAY_V1_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                    feeType: 'volume',
                    feeSellTokenPercentage: 10,
                    feeRecipient,
                });
                expect(mockGaslessSwapService.fetchPriceAsync.mock.calls[0]).toMatchInlineSnapshot(`
                    Array [
                      Object {
                        "affiliateAddress": undefined,
                        "buyAmount": "1000",
                        "buyToken": "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
                        "buyTokenDecimals": 18,
                        "feeRecipient": "${feeRecipient}",
                        "feeSellTokenPercentage": "10",
                        "feeType": "volume",
                        "integrator": Object {
                          "allowedChainIds": Array [
                            420,
                            1337,
                          ],
                          "apiKeys": Array [
                            "integrator-api-key",
                          ],
                          "integratorId": "integrator-id",
                          "label": "test integrator",
                          "plp": false,
                          "rfqm": true,
                          "rfqt": false,
                        },
                        "sellAmount": undefined,
                        "sellToken": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                        "sellTokenDecimals": 18,
                        "slippagePercentage": undefined,
                        "takerAddress": "0x4c42a706410f1190f97d26fe3c999c90070aa40f",
                      },
                      "metatransaction_v2",
                    ]
                `);
            });
            it('returns returns a meta-transaction price', async () => {
                const price = {
                    allowanceTarget: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
                    buyAmount: new utils_1.BigNumber(1000),
                    sellAmount: new utils_1.BigNumber(2000),
                    buyTokenAddress: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    gas: new utils_1.BigNumber(1043459),
                    price: new utils_1.BigNumber(2),
                    sources: [
                        {
                            name: 'QuickSwap',
                            proportion: new utils_1.BigNumber(0.2308),
                        },
                        {
                            name: 'DODO_V2',
                            proportion: new utils_1.BigNumber(0.07692),
                        },
                        {
                            name: 'Uniswap_V3',
                            proportion: new utils_1.BigNumber(0.6923),
                        },
                    ],
                    fees: {
                        integratorFee: {
                            feeType: 'volume',
                            feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                            feeAmount: new utils_1.BigNumber(100),
                        },
                        zeroExFee: {
                            feeType: 'integrator_share',
                            feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                            feeAmount: new utils_1.BigNumber(10),
                        },
                        gasFee: {
                            feeType: 'gas',
                            feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                            feeAmount: new utils_1.BigNumber(1),
                        },
                    },
                };
                mockGaslessSwapService.fetchPriceAsync.mockResolvedValue(price);
                const response = await supertest(app)
                    .get(`${constants_1.TX_RELAY_V1_PATH}/price`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                });
                expect(response.body).toStrictEqual({ ...convertBigNumbersToJson(price), liquidityAvailable: true });
                expect(response.statusCode).toEqual(HttpStatus.OK);
            });
        });
    });
    describe('getQuoteAsync', () => {
        describe('zero-g', () => {
            it('passes calls on to Gasless Swap Service', async () => {
                mockGaslessSwapService.fetchQuoteAsync.mockResolvedValue(null);
                await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                });
                expect(mockGaslessSwapService.fetchQuoteAsync.mock.calls[0]).toMatchInlineSnapshot(`
                    Array [
                      Object {
                        "affiliateAddress": undefined,
                        "buyAmount": "1000",
                        "buyToken": "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
                        "buyTokenDecimals": 18,
                        "checkApproval": false,
                        "feeRecipient": undefined,
                        "feeSellTokenPercentage": undefined,
                        "feeType": undefined,
                        "integrator": Object {
                          "allowedChainIds": Array [
                            420,
                            1337,
                          ],
                          "apiKeys": Array [
                            "integrator-api-key",
                          ],
                          "integratorId": "integrator-id",
                          "label": "test integrator",
                          "plp": false,
                          "rfqm": true,
                          "rfqt": false,
                        },
                        "sellAmount": undefined,
                        "sellToken": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                        "sellTokenDecimals": 18,
                        "slippagePercentage": undefined,
                        "takerAddress": "0x4c42a706410f1190f97d26fe3c999c90070aa40f",
                      },
                      "metatransaction",
                    ]
                `);
            });
            it('returns an RFQ quote', async () => {
                const quote = {
                    buyAmount: new utils_1.BigNumber('1800054805473'),
                    buyTokenAddress: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    gas: new utils_1.BigNumber('1043459'),
                    order: new protocol_utils_1.OtcOrder({
                        chainId: 1337,
                        expiryAndNonce: new utils_1.BigNumber('62771017353866807638357894232076664161023554444640345128970000000000000000'),
                        maker: '0x2222222222222222222222222222222222222222',
                        makerAmount: new utils_1.BigNumber('0'),
                        makerToken: '0x3333333333333333333333333333333333333333',
                        taker: '0x1111111111111111111111111111111111111111',
                        takerAmount: new utils_1.BigNumber('0'),
                        takerToken: '0x4444444444444444444444444444444444444444',
                        txOrigin: '0x0000000000000000000000000000000000000000',
                        verifyingContract: '0x0000000000000000000000000000000000000000',
                    }),
                    orderHash: '0x69b784087387d37e2361a40146420a5a68b08375238a5ba0329f612d5673b2ea',
                    price: new utils_1.BigNumber('1800.054805'),
                    sellAmount: new utils_1.BigNumber('1000000000000000000000'),
                    sellTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    type: types_1.GaslessTypes.OtcOrder,
                    liquiditySource: 'rfq',
                };
                mockGaslessSwapService.fetchQuoteAsync.mockResolvedValue(quote);
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1800054805473,
                    takerAddress,
                    intentOnFilling: 'true',
                    skipValidation: 'true',
                });
                expect(response.body).toStrictEqual({ ...convertBigNumbersToJson(quote), liquidityAvailable: true });
                expect(response.statusCode).toEqual(HttpStatus.OK);
            });
            it('returns an AMM quote', async () => {
                const quote = {
                    buyAmount: new utils_1.BigNumber('1800054805473'),
                    buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    gas: new utils_1.BigNumber('1043459'),
                    metaTransaction: new protocol_utils_1.MetaTransaction({
                        callData: '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',
                        chainId: 137,
                        expirationTimeSeconds: new utils_1.BigNumber('9990868679'),
                        feeAmount: new utils_1.BigNumber('0'),
                        feeToken: '0x0000000000000000000000000000000000000000',
                        maxGasPrice: new utils_1.BigNumber('4294967296'),
                        minGasPrice: new utils_1.BigNumber('1'),
                        salt: new utils_1.BigNumber('32606650794224190000000000000000000000000000000000000000000000000000000000000'),
                        sender: '0x0000000000000000000000000000000000000000',
                        signer: '0x4c42a706410f1190f97d26fe3c999c90070aa40f',
                        value: new utils_1.BigNumber('0'),
                        verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
                    }),
                    metaTransactionHash: '0xde5a11983edd012047dd3107532f007a73ae488bfb354f35b8a40580e2a775a1',
                    price: new utils_1.BigNumber('1800.054805'),
                    sellAmount: new utils_1.BigNumber('1000000000000000000000'),
                    sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    type: types_1.GaslessTypes.MetaTransaction,
                    liquiditySource: 'amm',
                };
                mockGaslessSwapService.fetchQuoteAsync.mockResolvedValue(quote);
                const response = await supertest(app)
                    .get(`${constants_1.ZERO_G_ALIAS_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1800054805473,
                    takerAddress,
                    intentOnFilling: 'true',
                    skipValidation: 'true',
                });
                expect(response.body).toStrictEqual({ ...convertBigNumbersToJson(quote), liquidityAvailable: true });
                expect(response.statusCode).toEqual(HttpStatus.OK);
            });
        });
        describe('tx relay v1', () => {
            it('passes calls on to Gasless Swap Service', async () => {
                mockGaslessSwapService.fetchQuoteAsync.mockResolvedValue(null);
                await supertest(app)
                    .get(`${constants_1.TX_RELAY_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1000,
                    takerAddress,
                    intentOnFilling: 'false',
                    skipValidation: 'true',
                    feeType: 'volume',
                    feeSellTokenPercentage: 10,
                    feeRecipient,
                });
                expect(mockGaslessSwapService.fetchQuoteAsync.mock.calls[0]).toMatchInlineSnapshot(`
                    Array [
                      Object {
                        "affiliateAddress": undefined,
                        "buyAmount": "1000",
                        "buyToken": "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
                        "buyTokenDecimals": 18,
                        "checkApproval": false,
                        "feeRecipient": "${feeRecipient}",
                        "feeSellTokenPercentage": "10",
                        "feeType": "volume",
                        "integrator": Object {
                          "allowedChainIds": Array [
                            420,
                            1337,
                          ],
                          "apiKeys": Array [
                            "integrator-api-key",
                          ],
                          "integratorId": "integrator-id",
                          "label": "test integrator",
                          "plp": false,
                          "rfqm": true,
                          "rfqt": false,
                        },
                        "sellAmount": undefined,
                        "sellToken": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                        "sellTokenDecimals": 18,
                        "slippagePercentage": undefined,
                        "takerAddress": "0x4c42a706410f1190f97d26fe3c999c90070aa40f",
                      },
                      "metatransaction_v2",
                    ]
                `);
            });
            it('returns a meta-transaction quote', async () => {
                const quote = {
                    buyAmount: new utils_1.BigNumber('1800054805473'),
                    buyTokenAddress: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    gas: new utils_1.BigNumber('1043459'),
                    trade: {
                        kind: types_1.GaslessTypes.MetaTransaction,
                        hash: '0xde5a11983edd012047dd3107532f007a73ae488bfb354f35b8a40580e2a775a1',
                        metaTransaction: new protocol_utils_1.MetaTransaction({
                            callData: '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',
                            chainId: 137,
                            expirationTimeSeconds: new utils_1.BigNumber('9990868679'),
                            feeAmount: new utils_1.BigNumber('0'),
                            feeToken: '0x0000000000000000000000000000000000000000',
                            maxGasPrice: new utils_1.BigNumber('4294967296'),
                            minGasPrice: new utils_1.BigNumber('1'),
                            salt: new utils_1.BigNumber('32606650794224190000000000000000000000000000000000000000000000000000000000000'),
                            sender: '0x0000000000000000000000000000000000000000',
                            signer: '0x4c42a706410f1190f97d26fe3c999c90070aa40f',
                            value: new utils_1.BigNumber('0'),
                            verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
                        }),
                    },
                    price: new utils_1.BigNumber('1800.054805'),
                    sellAmount: new utils_1.BigNumber('1000000000000000000000'),
                    sellTokenAddress: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                    sources: [
                        {
                            name: 'QuickSwap',
                            proportion: new utils_1.BigNumber(0.2308),
                        },
                        {
                            name: 'DODO_V2',
                            proportion: new utils_1.BigNumber(0.07692),
                        },
                        {
                            name: 'Uniswap_V3',
                            proportion: new utils_1.BigNumber(0.6923),
                        },
                    ],
                    fees: {
                        integratorFee: {
                            feeType: 'volume',
                            feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                            feeAmount: new utils_1.BigNumber(100),
                        },
                        zeroExFee: {
                            feeType: 'integrator_share',
                            feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                            feeAmount: new utils_1.BigNumber(10),
                        },
                        gasFee: {
                            feeType: 'gas',
                            feeToken: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
                            feeAmount: new utils_1.BigNumber(1),
                        },
                    },
                };
                mockGaslessSwapService.fetchQuoteAsync.mockResolvedValue(quote);
                const response = await supertest(app)
                    .get(`${constants_1.TX_RELAY_V1_PATH}/quote`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .query({
                    buyToken: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
                    sellToken: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
                    buyAmount: 1800054805473,
                    takerAddress,
                    intentOnFilling: 'true',
                    skipValidation: 'true',
                });
                expect(response.body).toStrictEqual({ ...convertBigNumbersToJson(quote), liquidityAvailable: true });
                expect(response.statusCode).toEqual(HttpStatus.OK);
            });
        });
    });
    describe('processSubmitAsync', () => {
        describe('zero-g', () => {
            it('returns a metatransaction result', async () => {
                const metaTransaction = new protocol_utils_1.MetaTransaction({
                    callData: '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',
                    chainId: 137,
                    expirationTimeSeconds: new utils_1.BigNumber('9990868679'),
                    feeAmount: new utils_1.BigNumber('0'),
                    feeToken: '0x0000000000000000000000000000000000000000',
                    maxGasPrice: new utils_1.BigNumber('4294967296'),
                    minGasPrice: new utils_1.BigNumber('1'),
                    salt: new utils_1.BigNumber('32606650794224190000000000000000000000000000000000000000000000000000000000000'),
                    sender: '0x0000000000000000000000000000000000000000',
                    signer: '0x4c42a706410f1190f97d26fe3c999c90070aa40f',
                    value: new utils_1.BigNumber('0'),
                    verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
                });
                const submitResult = {
                    metaTransactionHash: '0xde5a11983edd012047dd3107532f007a73ae488bfb354f35b8a40580e2a775a1',
                    type: types_1.GaslessTypes.MetaTransaction,
                };
                mockGaslessSwapService.processSubmitAsync.mockResolvedValue(submitResult);
                const response = await supertest(app)
                    .post(`${constants_1.ZERO_G_ALIAS_PATH}/submit`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .send({
                    kind: types_1.GaslessTypes.MetaTransaction,
                    trade: {
                        metaTransaction,
                        type: types_1.GaslessTypes.MetaTransaction,
                        signature: (0, protocol_utils_1.ethSignHashWithKey)(metaTransaction.getHash(), takerPrivateKey),
                    },
                });
                expect(mockGaslessSwapService.processSubmitAsync.mock.calls[0]).toMatchInlineSnapshot(`
                    Array [
                      Object {
                        "kind": "metatransaction",
                        "trade": Object {
                          "metaTransaction": MetaTransaction {
                            "callData": "0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b",
                            "chainId": 137,
                            "expirationTimeSeconds": "9990868679",
                            "feeAmount": "0",
                            "feeToken": "0x0000000000000000000000000000000000000000",
                            "maxGasPrice": "4294967296",
                            "minGasPrice": "1",
                            "salt": "32606650794224190000000000000000000000000000000000000000000000000000000000000",
                            "sender": "0x0000000000000000000000000000000000000000",
                            "signer": "0x4c42a706410f1190f97d26fe3c999c90070aa40f",
                            "value": "0",
                            "verifyingContract": "0xdef1c0ded9bec7f1a1670819833240f027b25eff",
                          },
                          "signature": Object {
                            "r": "0x7247ed156081c767781834b122d4e9317f3cc2d5ed529cb74aaaa11d8b5a93f8",
                            "s": "0x19a0b795609483b9fcbc42b574e4401401308b4c24347b0bda8a2cf2332efd78",
                            "signatureType": 3,
                            "v": 28,
                          },
                          "type": "metatransaction",
                        },
                      },
                      "integrator-id",
                    ]
                `);
                expect(response.statusCode).toEqual(HttpStatus.CREATED);
                expect(response.body).toEqual(submitResult);
            });
        });
        describe('tx relay v1', () => {
            it('returns a metatransaction result', async () => {
                const metaTransaction = new types_2.MetaTransactionV2({
                    callData: '0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b',
                    chainId: 137,
                    expirationTimeSeconds: new utils_1.BigNumber('9990868679'),
                    feeAmount: new utils_1.BigNumber('0'),
                    feeToken: '0x0000000000000000000000000000000000000000',
                    maxGasPrice: new utils_1.BigNumber('4294967296'),
                    minGasPrice: new utils_1.BigNumber('1'),
                    salt: new utils_1.BigNumber('32606650794224190000000000000000000000000000000000000000000000000000000000000'),
                    sender: '0x0000000000000000000000000000000000000000',
                    signer: '0x4c42a706410f1190f97d26fe3c999c90070aa40f',
                    value: new utils_1.BigNumber('0'),
                    verifyingContract: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
                });
                const submitResult = {
                    metaTransactionHash: '0xde5a11983edd012047dd3107532f007a73ae488bfb354f35b8a40580e2a775a1',
                    type: types_1.GaslessTypes.MetaTransactionV2,
                };
                mockGaslessSwapService.processSubmitAsync.mockResolvedValue(submitResult);
                const response = await supertest(app)
                    .post(`${constants_1.TX_RELAY_V1_PATH}/submit`)
                    .set('Content-type', 'application/json')
                    .set('0x-api-key', 'integrator-api-key')
                    .set('0x-chain-id', '1337')
                    .send({
                    kind: types_1.GaslessTypes.MetaTransactionV2,
                    trade: {
                        metaTransaction,
                        type: types_1.GaslessTypes.MetaTransactionV2,
                        signature: (0, protocol_utils_1.ethSignHashWithKey)(metaTransaction.getHash(), takerPrivateKey),
                    },
                });
                expect(mockGaslessSwapService.processSubmitAsync.mock.calls[0]).toMatchInlineSnapshot(`
                    Array [
                      Object {
                        "kind": "metatransaction_v2",
                        "trade": Object {
                          "metaTransaction": MetaTransactionV2 {
                            "callData": "0x415565b00000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000017b9e2a304f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000860000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000002517569636b5377617000000000000000000000000000000000000000000000000000000000000008570b55cfac18858000000000000000000000000000000000000000000000000000000039d0b9efd1000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000002517569636b53776170000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001c94ebec37000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000b446f646f5632000000000000000000000000000000000000000000000000000000000000000000042b85aae7d60c42c00000000000000000000000000000000000000000000000000000001db5156c13000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000400000000000000000000000005333eb1e32522f1893b7c9fea3c263807a02d561000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000000190522016f044a05b0000000000000000000000000000000000000000000000000000000b08217af9400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000c829100b78224ef50000000000000000000000000000000000000000000000000000000570157389f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000427ceb23fd6bc0add59e62ac25578270cff1b9f6190001f41bfd67037b42cf73acf2047067bd4f2c47d9bfd6000bb82791bca1f2de4661ed88a30c99a7a9449aae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000008c611defbd838a13de3a5923693c58a7c1807c6300000000000000000000000000000000000000000000005b89d96b4863067a6b",
                            "chainId": 137,
                            "expirationTimeSeconds": "9990868679",
                            "feeAmount": "0",
                            "feeToken": "0x0000000000000000000000000000000000000000",
                            "maxGasPrice": "4294967296",
                            "minGasPrice": "1",
                            "salt": "32606650794224190000000000000000000000000000000000000000000000000000000000000",
                            "sender": "0x0000000000000000000000000000000000000000",
                            "signer": "0x4c42a706410f1190f97d26fe3c999c90070aa40f",
                            "value": "0",
                            "verifyingContract": "0xdef1c0ded9bec7f1a1670819833240f027b25eff",
                          },
                          "signature": Object {
                            "r": "0x7247ed156081c767781834b122d4e9317f3cc2d5ed529cb74aaaa11d8b5a93f8",
                            "s": "0x19a0b795609483b9fcbc42b574e4401401308b4c24347b0bda8a2cf2332efd78",
                            "signatureType": 3,
                            "v": 28,
                          },
                          "type": "metatransaction_v2",
                        },
                      },
                      "integrator-id",
                    ]
                `);
                expect(response.statusCode).toEqual(HttpStatus.CREATED);
                expect(response.body).toEqual(submitResult);
            });
        });
    });
});
/**
 * Deeply transforms object keys from BigNumber to JSON
 */
// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function convertBigNumbersToJson(x) {
    return (0, lodash_1.mapValues)(x, (v) => {
        if (v instanceof utils_1.BigNumber) {
            return v.toJSON();
        }
        if (v instanceof Array) {
            const jsonArray = [];
            for (const item of v) {
                jsonArray.push(convertBigNumbersToJson(item));
            }
            return jsonArray;
        }
        if (v instanceof Object) {
            return convertBigNumbersToJson(v);
        }
        return v;
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9oYW5kbGVycy9fX3Rlc3RzX18vR2FzbGVzc1N3YXBIYW5kbGVycy50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBa0NBLElBQUksQ0FBQyxJQUFJLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFO0lBQ2hELE9BQU87UUFDSCxrQkFBa0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFO1lBQ2xELE9BQU87Z0JBQ0gsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Z0JBQzFCLGVBQWUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO2dCQUMxQixrQkFBa0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO2dCQUM3QixvREFBb0Q7Z0JBQ3BELHFCQUFxQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7YUFDekQsQ0FBQztRQUNOLENBQUMsQ0FBQztLQUNMLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFO0lBQ3pDLE9BQU87UUFDSCxhQUFhLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtZQUM3QyxPQUFPO2dCQUNILHNCQUFzQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xGLHdCQUF3QixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDO2dCQUNwRSx3QkFBd0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtvQkFDMUQsSUFBSSxFQUFFLEtBQUssZUFBZSxFQUFFO3dCQUN4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QUM7Z0JBQ3hELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ2hELENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDO0FBRUg7O0dBRUc7QUFDSCw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELFNBQVMsdUJBQXVCLENBQUMsQ0FBc0I7SUFDbkQsT0FBTyxJQUFBLGtCQUFTLEVBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDdEIsSUFBSSxDQUFDLFlBQVksaUJBQVMsRUFBRTtZQUN4QixPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNyQjtRQUNELElBQUksQ0FBQyxZQUFZLEtBQUssRUFBRTtZQUNwQixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7WUFDckIsS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLEVBQUU7Z0JBQ2xCLFNBQVMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUNqRDtZQUNELE9BQU8sU0FBUyxDQUFDO1NBQ3BCO1FBQ0QsSUFBSSxDQUFDLFlBQVksTUFBTSxFQUFFO1lBQ3JCLE9BQU8sdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDckM7UUFDRCxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvc3JjL2hhbmRsZXJzL19fdGVzdHNfXy9HYXNsZXNzU3dhcEhhbmRsZXJzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6IG1heC1maWxlLWxpbmUtY291bnRcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvckNvZGVzIH0gZnJvbSAnQDB4L2FwaS11dGlscyc7XG5pbXBvcnQgeyBldGhTaWduSGFzaFdpdGhLZXksIE1ldGFUcmFuc2FjdGlvbiwgT3RjT3JkZXIgfSBmcm9tICdAMHgvcHJvdG9jb2wtdXRpbHMnO1xuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnQDB4L3V0aWxzJztcbmltcG9ydCB7IEF4aW9zSW5zdGFuY2UgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0ICogYXMgSHR0cFN0YXR1cyBmcm9tICdodHRwLXN0YXR1cy1jb2Rlcyc7XG5pbXBvcnQgUmVkaXMgZnJvbSAnaW9yZWRpcyc7XG5pbXBvcnQgeyBtYXBWYWx1ZXMgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgUHJvZHVjZXIgfSBmcm9tICdzcXMtcHJvZHVjZXInO1xuaW1wb3J0ICogYXMgc3VwZXJ0ZXN0IGZyb20gJ3N1cGVydGVzdCc7XG5cbmltcG9ydCB7IEludGVncmF0b3IgfSBmcm9tICcuLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgVFhfUkVMQVlfVjFfUEFUSCwgWkVST19HX0FMSUFTX1BBVEgsIFpFUk9fR19QQVRIIH0gZnJvbSAnLi4vLi4vY29yZS9jb25zdGFudHMnO1xuaW1wb3J0IHsgR2FzbGVzc1R5cGVzIH0gZnJvbSAnLi4vLi4vY29yZS90eXBlcyc7XG5pbXBvcnQgeyBUcnVuY2F0ZWRGZWVzIH0gZnJvbSAnLi4vLi4vY29yZS90eXBlcy9tZXRhX3RyYW5zYWN0aW9uX2ZlZXMnO1xuaW1wb3J0IHsgZXJyb3JIYW5kbGVyIH0gZnJvbSAnLi4vLi4vbWlkZGxld2FyZS9lcnJvcl9oYW5kbGluZyc7XG5pbXBvcnQgeyBjcmVhdGVUeFJlbGF5VjFSb3V0ZXIsIGNyZWF0ZVplcm9HUm91dGVyIH0gZnJvbSAnLi4vLi4vcm91dGVycy9HYXNsZXNzU3dhcFJvdXRlcic7XG5pbXBvcnQgeyBHYXNsZXNzU3dhcFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9HYXNsZXNzU3dhcFNlcnZpY2UnO1xuaW1wb3J0IHsgUmZxbVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9yZnFtX3NlcnZpY2UnO1xuaW1wb3J0IHtcbiAgICBGZXRjaEluZGljYXRpdmVRdW90ZVJlc3BvbnNlLFxuICAgIExpcXVpZGl0eVNvdXJjZSxcbiAgICBNZXRhVHJhbnNhY3Rpb25WMVF1b3RlUmVzcG9uc2UsXG4gICAgTWV0YVRyYW5zYWN0aW9uVjIsXG4gICAgTWV0YVRyYW5zYWN0aW9uVjJRdW90ZVJlc3BvbnNlLFxuICAgIE90Y09yZGVyUmZxbVF1b3RlUmVzcG9uc2UsXG4gICAgU3VibWl0TWV0YVRyYW5zYWN0aW9uU2lnbmVkUXVvdGVSZXNwb25zZSxcbiAgICBTdWJtaXRNZXRhVHJhbnNhY3Rpb25WMlNpZ25lZFF1b3RlUmVzcG9uc2UsXG59IGZyb20gJy4uLy4uL3NlcnZpY2VzL3R5cGVzJztcbmltcG9ydCB7IENvbmZpZ01hbmFnZXIgfSBmcm9tICcuLi8uLi91dGlscy9jb25maWdfbWFuYWdlcic7XG5pbXBvcnQgeyBSZnFtRGJVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzL3JmcW1fZGJfdXRpbHMnO1xuaW1wb3J0IHsgUmZxQmxvY2tjaGFpblV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMvcmZxX2Jsb2NrY2hhaW5fdXRpbHMnO1xuXG5qZXN0Lm1vY2soJy4uLy4uL3NlcnZpY2VzL0dhc2xlc3NTd2FwU2VydmljZScsICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBHYXNsZXNzU3dhcFNlcnZpY2U6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBmZXRjaFByaWNlQXN5bmM6IGplc3QuZm4oKSxcbiAgICAgICAgICAgICAgICBmZXRjaFF1b3RlQXN5bmM6IGplc3QuZm4oKSxcbiAgICAgICAgICAgICAgICBwcm9jZXNzU3VibWl0QXN5bmM6IGplc3QuZm4oKSxcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGN1c3RvbS1uby1tYWdpYy1udW1iZXJzXG4gICAgICAgICAgICAgICAgZ2V0VG9rZW5EZWNpbWFsc0FzeW5jOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoMTgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgfTtcbn0pO1xuXG5qZXN0Lm1vY2soJy4uLy4uL3V0aWxzL2NvbmZpZ19tYW5hZ2VyJywgKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIENvbmZpZ01hbmFnZXI6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBnZXRSZnFtQXBpS2V5V2hpdGVsaXN0OiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKG5ldyBTZXQoWydpbnRlZ3JhdG9yLWFwaS1rZXknXSkpLFxuICAgICAgICAgICAgICAgIGdldEludGVncmF0b3JJZEZvckFwaUtleTogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgnaW50ZWdyYXRvci1pZCcpLFxuICAgICAgICAgICAgICAgIGdldEludGVncmF0b3JCeUlkT3JUaHJvdzogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoaWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkICE9PSAnaW50ZWdyYXRvci1pZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVncmF0b3I6IEludGVncmF0b3IgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGlLZXlzOiBbJ2ludGVncmF0b3ItYXBpLWtleSddLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZENoYWluSWRzOiBbNDIwLCAxMzM3XSwgLy8gdHNsaW50OmRpc2FibGUtbGluZTogY3VzdG9tLW5vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVncmF0b3JJZDogJ2ludGVncmF0b3ItaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICd0ZXN0IGludGVncmF0b3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxwOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJmcXQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmZxbTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGludGVncmF0b3I7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICB9O1xufSk7XG5cbi8vIHRzbGludDpkaXNhYmxlOiBuby1vYmplY3QtbGl0ZXJhbC10eXBlLWFzc2VydGlvblxuY29uc3QgbW9ja0dhc2xlc3NTd2FwU2VydmljZSA9IGplc3QubW9ja2VkKFxuICAgIG5ldyBHYXNsZXNzU3dhcFNlcnZpY2UoXG4gICAgICAgIDAsXG4gICAgICAgIHt9IGFzIFJmcW1TZXJ2aWNlLFxuICAgICAgICBuZXcgVVJMKCdodHRwOi8vbWV0YS50cmFuc2FjdGlvbi5zZXJ2aWNlJyksXG4gICAgICAgIHt9IGFzIEF4aW9zSW5zdGFuY2UsXG4gICAgICAgIHt9IGFzIFJlZGlzLFxuICAgICAgICB7fSBhcyBSZnFtRGJVdGlscyxcbiAgICAgICAge30gYXMgUmZxQmxvY2tjaGFpblV0aWxzLFxuICAgICAgICB7fSBhcyBQcm9kdWNlcixcbiAgICApLFxuKTtcbmNvbnN0IG1vY2tDb25maWdNYW5hZ2VyID0gamVzdC5tb2NrZWQobmV3IENvbmZpZ01hbmFnZXIoKSk7XG4vLyB0c2xpbnQ6ZW5hYmxlOiBuby1vYmplY3QtbGl0ZXJhbC10eXBlLWFzc2VydGlvblxuXG5jb25zdCB0ZXN0Q2hhaW5JZCA9IDEzMzc7XG5cbi8qKlxuICogVmVyaWZpZXMgdGhlIHByb3BlciByZXNwb25zZSB0byBhIHJlcXVlc3QgdXNpbmcgYSBtb2NrZWQgYEdhc2xlc3NTd2FwU2VydmljZWAuXG4gKlxuICogRWFjaCBjYXNlIHNldHMgdXAgaXRzIG93biBsaXR0bGUgRXhwcmVzcyBhcHAgdG8gYXZvaWQgY291cGlsaW5nIHRoaXNcbiAqIHRlc3QgdG8gdGhlIHVwc3RyZWFtIHJvdXRlci5cbiAqL1xuZGVzY3JpYmUoJ0dhc2xlc3NTd2FwSGFuZGxlcnMnLCAoKSA9PiB7XG4gICAgY29uc3QgdGFrZXJBZGRyZXNzID0gJzB4NGM0MmE3MDY0MTBmMTE5MGY5N2QyNmZlM2M5OTljOTAwNzBhYTQwZic7XG4gICAgY29uc3QgdGFrZXJQcml2YXRlS2V5ID0gJzB4ZDJjMjM0OWUxMDE3MGU0MjE5ZDlmZWJkMWM2NjNlYTVjNzMzNGY3OWMzOGQyNWY0ZjUyYzg1YWY3OTZjN2MwNSc7XG4gICAgY29uc3QgZmVlUmVjaXBpZW50ID0gJzB4NWZiMzIxMzQ5YWNlNTMwM2M4MmYwZDFkNDkxMDQxZTA0MmYyYWQyMic7XG4gICAgY29uc3QgYXBwID0gZXhwcmVzcygpXG4gICAgICAgIC51c2UoZXhwcmVzcy5qc29uKCkpXG4gICAgICAgIC51c2UoWkVST19HX1BBVEgsIGNyZWF0ZVplcm9HUm91dGVyKG5ldyBNYXAoW1t0ZXN0Q2hhaW5JZCwgbW9ja0dhc2xlc3NTd2FwU2VydmljZV1dKSwgbW9ja0NvbmZpZ01hbmFnZXIpKVxuICAgICAgICAudXNlKFpFUk9fR19BTElBU19QQVRILCBjcmVhdGVaZXJvR1JvdXRlcihuZXcgTWFwKFtbdGVzdENoYWluSWQsIG1vY2tHYXNsZXNzU3dhcFNlcnZpY2VdXSksIG1vY2tDb25maWdNYW5hZ2VyKSlcbiAgICAgICAgLnVzZShcbiAgICAgICAgICAgIFRYX1JFTEFZX1YxX1BBVEgsXG4gICAgICAgICAgICBjcmVhdGVUeFJlbGF5VjFSb3V0ZXIobmV3IE1hcChbW3Rlc3RDaGFpbklkLCBtb2NrR2FzbGVzc1N3YXBTZXJ2aWNlXV0pLCBtb2NrQ29uZmlnTWFuYWdlciksXG4gICAgICAgIClcbiAgICAgICAgLnVzZShlcnJvckhhbmRsZXIpO1xuXG4gICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgncGFyYW1ldGVyIHZlcmlmaWNhdGlvbicsICgpID0+IHtcbiAgICAgICAgaXQoJ3Rocm93cyBpZiBhIHJlcXVpcmVkIHBhcmFtZXRlciBpcyBtaXNzaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlcnRlc3QoYXBwKVxuICAgICAgICAgICAgICAgIC5nZXQoYCR7WkVST19HX0FMSUFTX1BBVEh9L3ByaWNlYClcbiAgICAgICAgICAgICAgICAucXVlcnkoeyBtYWtlclRva2VuOiAnMHhtYWtlcnRva2VuJyB9KVxuICAgICAgICAgICAgICAgIC5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnZhbGlkYXRpb25FcnJvcnNbMF0uY29kZSkudG9FcXVhbChWYWxpZGF0aW9uRXJyb3JDb2Rlcy5SZXF1aXJlZEZpZWxkKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50b0VxdWFsKEh0dHBTdGF0dXMuQkFEX1JFUVVFU1QpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgndGhyb3dzIGlmIHRoZSBjaGFpbiBJRCBpcyBpbnZhbGlkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlcnRlc3QoYXBwKVxuICAgICAgICAgICAgICAgIC5nZXQoYCR7WkVST19HX0FMSUFTX1BBVEh9L3ByaWNlYClcbiAgICAgICAgICAgICAgICAuc2V0KCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpXG4gICAgICAgICAgICAgICAgLnNldCgnMHgtYXBpLWtleScsICdpbnRlZ3JhdG9yLWFwaS1rZXknKVxuICAgICAgICAgICAgICAgIC5zZXQoJzB4LWNoYWluLWlkJywgJzQyMCcpIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6IGN1c3RvbS1uby1tYWdpYy1udW1iZXJzXG4gICAgICAgICAgICAgICAgLnF1ZXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW46ICcweDdjZUIyM2ZENmJDMGFkRDU5RTYyYWMyNTU3ODI3MGNGZjFiOWY2MTknLFxuICAgICAgICAgICAgICAgICAgICBzZWxsVG9rZW46ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxuICAgICAgICAgICAgICAgICAgICBidXlBbW91bnQ6IDEwMDAsXG4gICAgICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgaW50ZW50T25GaWxsaW5nOiAnZmFsc2UnLFxuICAgICAgICAgICAgICAgICAgICBza2lwVmFsaWRhdGlvbjogJ3RydWUnLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keS52YWxpZGF0aW9uRXJyb3JzWzBdLmNvZGUpLnRvRXF1YWwoVmFsaWRhdGlvbkVycm9yQ29kZXMuRmllbGRJbnZhbGlkKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50b0VxdWFsKEh0dHBTdGF0dXMuQkFEX1JFUVVFU1QpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgnemVyby1nJywgKCkgPT4ge1xuICAgICAgICAgICAgaXQoJ3Rocm93cyBpZiB0aGUgYHNsaXBwYWdlUGVyY2VudGFnZWAgaXMgb3V0IG9mIHJhbmdlIGZvciAvcHJpY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlcnRlc3QoYXBwKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0KGAke1pFUk9fR19BTElBU19QQVRIfS9wcmljZWApXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtYXBpLWtleScsICdpbnRlZ3JhdG9yLWFwaS1rZXknKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1jaGFpbi1pZCcsICcxMzM3JykgLy8gdHNsaW50OmRpc2FibGUtbGluZTogY3VzdG9tLW5vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHg3Y2VCMjNmRDZiQzBhZEQ1OUU2MmFjMjU1NzgyNzBjRmYxYjlmNjE5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXlBbW91bnQ6IDEwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlwcGFnZVBlcmNlbnRhZ2U6IDIuMSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keS52YWxpZGF0aW9uRXJyb3JzWzBdLmNvZGUpLnRvRXF1YWwoVmFsaWRhdGlvbkVycm9yQ29kZXMuVmFsdWVPdXRPZlJhbmdlKTtcbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG9FcXVhbChIdHRwU3RhdHVzLkJBRF9SRVFVRVNUKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgndGhyb3dzIGlmIHRoZSBgc2xpcHBhZ2VQZXJjZW50YWdlYCBpcyBvdXQgb2YgcmFuZ2UgZm9yIC9xdW90ZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVydGVzdChhcHApXG4gICAgICAgICAgICAgICAgICAgIC5nZXQoYCR7WkVST19HX0FMSUFTX1BBVEh9L3F1b3RlYClcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1hcGkta2V5JywgJ2ludGVncmF0b3ItYXBpLWtleScpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJzB4LWNoYWluLWlkJywgJzEzMzcnKSAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOiBjdXN0b20tbm8tbWFnaWMtbnVtYmVyc1xuICAgICAgICAgICAgICAgICAgICAucXVlcnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW46ICcweDdjZUIyM2ZENmJDMGFkRDU5RTYyYWMyNTU3ODI3MGNGZjFiOWY2MTknLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsbFRva2VuOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogMTAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaXBwYWdlUGVyY2VudGFnZTogMC4wMDAwMSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keS52YWxpZGF0aW9uRXJyb3JzWzBdLmNvZGUpLnRvRXF1YWwoVmFsaWRhdGlvbkVycm9yQ29kZXMuVmFsdWVPdXRPZlJhbmdlKTtcbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG9FcXVhbChIdHRwU3RhdHVzLkJBRF9SRVFVRVNUKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgndGhyb3dzIGlmIHRoZSBgc2xpcHBhZ2VQZXJjZW50YWdlYCBpcyBpbnZhbGlkIGZvciAvcXVvdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlcnRlc3QoYXBwKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0KGAke1pFUk9fR19BTElBU19QQVRIfS9xdW90ZWApXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtYXBpLWtleScsICdpbnRlZ3JhdG9yLWFwaS1rZXknKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1jaGFpbi1pZCcsICcxMzM3JykgLy8gdHNsaW50OmRpc2FibGUtbGluZTogY3VzdG9tLW5vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHg3Y2VCMjNmRDZiQzBhZEQ1OUU2MmFjMjU1NzgyNzBjRmYxYjlmNjE5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXlBbW91bnQ6IDEwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlwcGFnZVBlcmNlbnRhZ2U6ICdpbnZhbGlkJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keS52YWxpZGF0aW9uRXJyb3JzWzBdLmNvZGUpLnRvRXF1YWwoVmFsaWRhdGlvbkVycm9yQ29kZXMuSW5jb3JyZWN0Rm9ybWF0KTtcbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG9FcXVhbChIdHRwU3RhdHVzLkJBRF9SRVFVRVNUKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgndHggcmVsYXkgdjEnLCAoKSA9PiB7XG4gICAgICAgICAgICBpdCgndGhyb3dzIGlmIHRoZSBgc2xpcHBhZ2VQZXJjZW50YWdlYCBpcyBvdXQgb2YgcmFuZ2UgZm9yIC9wcmljZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVydGVzdChhcHApXG4gICAgICAgICAgICAgICAgICAgIC5nZXQoYCR7VFhfUkVMQVlfVjFfUEFUSH0vcHJpY2VgKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJzB4LWFwaS1rZXknLCAnaW50ZWdyYXRvci1hcGkta2V5JylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtY2hhaW4taWQnLCAnMTMzNycpIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6IGN1c3RvbS1uby1tYWdpYy1udW1iZXJzXG4gICAgICAgICAgICAgICAgICAgIC5xdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXlUb2tlbjogJzB4N2NlQjIzZkQ2YkMwYWRENTlFNjJhYzI1NTc4MjcwY0ZmMWI5ZjYxOScsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxsVG9rZW46ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV5QW1vdW50OiAxMDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpcHBhZ2VQZXJjZW50YWdlOiAxMDEsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkudmFsaWRhdGlvbkVycm9yc1swXS5jb2RlKS50b0VxdWFsKFZhbGlkYXRpb25FcnJvckNvZGVzLlZhbHVlT3V0T2ZSYW5nZSk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvRXF1YWwoSHR0cFN0YXR1cy5CQURfUkVRVUVTVCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3Rocm93cyBpZiB0aGUgYHNsaXBwYWdlUGVyY2VudGFnZWAgaXMgb3V0IG9mIHJhbmdlIGZvciAvcXVvdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlcnRlc3QoYXBwKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0KGAke1RYX1JFTEFZX1YxX1BBVEh9L3F1b3RlYClcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1hcGkta2V5JywgJ2ludGVncmF0b3ItYXBpLWtleScpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJzB4LWNoYWluLWlkJywgJzEzMzcnKSAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOiBjdXN0b20tbm8tbWFnaWMtbnVtYmVyc1xuICAgICAgICAgICAgICAgICAgICAucXVlcnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW46ICcweDdjZUIyM2ZENmJDMGFkRDU5RTYyYWMyNTU3ODI3MGNGZjFiOWY2MTknLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsbFRva2VuOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogMTAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaXBwYWdlUGVyY2VudGFnZTogMC4wMDEsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkudmFsaWRhdGlvbkVycm9yc1swXS5jb2RlKS50b0VxdWFsKFZhbGlkYXRpb25FcnJvckNvZGVzLlZhbHVlT3V0T2ZSYW5nZSk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvRXF1YWwoSHR0cFN0YXR1cy5CQURfUkVRVUVTVCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3Rocm93cyBpZiB0aGUgYHNsaXBwYWdlUGVyY2VudGFnZWAgaXMgaW52YWxpZCBmb3IgL3F1b3RlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3VwZXJ0ZXN0KGFwcClcbiAgICAgICAgICAgICAgICAgICAgLmdldChgJHtUWF9SRUxBWV9WMV9QQVRIfS9xdW90ZWApXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtYXBpLWtleScsICdpbnRlZ3JhdG9yLWFwaS1rZXknKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1jaGFpbi1pZCcsICcxMzM3JykgLy8gdHNsaW50OmRpc2FibGUtbGluZTogY3VzdG9tLW5vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHg3Y2VCMjNmRDZiQzBhZEQ1OUU2MmFjMjU1NzgyNzBjRmYxYjlmNjE5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXlBbW91bnQ6IDEwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlwcGFnZVBlcmNlbnRhZ2U6ICdpbnZhbGlkJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keS52YWxpZGF0aW9uRXJyb3JzWzBdLmNvZGUpLnRvRXF1YWwoVmFsaWRhdGlvbkVycm9yQ29kZXMuSW5jb3JyZWN0Rm9ybWF0KTtcbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG9FcXVhbChIdHRwU3RhdHVzLkJBRF9SRVFVRVNUKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgndGhyb3dzIGlmIHRoZSBgZmVlVHlwZWAgaXMgaW52YWxpZCBmb3IgL3F1b3RlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3VwZXJ0ZXN0KGFwcClcbiAgICAgICAgICAgICAgICAgICAgLmdldChgJHtUWF9SRUxBWV9WMV9QQVRIfS9xdW90ZWApXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtYXBpLWtleScsICdpbnRlZ3JhdG9yLWFwaS1rZXknKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1jaGFpbi1pZCcsICcxMzM3JykgLy8gdHNsaW50OmRpc2FibGUtbGluZTogY3VzdG9tLW5vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHg3Y2VCMjNmRDZiQzBhZEQ1OUU2MmFjMjU1NzgyNzBjRmYxYjlmNjE5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXlBbW91bnQ6IDEwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlwcGFnZVBlcmNlbnRhZ2U6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmVlVHlwZTogJ2ludmFsaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmVlU2VsbFRva2VuUGVyY2VudGFnZTogMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBmZWVSZWNpcGllbnQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkudmFsaWRhdGlvbkVycm9yc1swXS5jb2RlKS50b0VxdWFsKFZhbGlkYXRpb25FcnJvckNvZGVzLlZhbHVlT3V0T2ZSYW5nZSk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvRXF1YWwoSHR0cFN0YXR1cy5CQURfUkVRVUVTVCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3Rocm93cyBpZiB0aGUgYGZlZVNlbGxUb2tlblBlcmNlbnRhZ2VgIGlzIHVuZGVmaW5lZCB3aGVuIGBmZWVUeXBlYCBpcyBwcm92aWRlZCBmb3IgL3F1b3RlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3VwZXJ0ZXN0KGFwcClcbiAgICAgICAgICAgICAgICAgICAgLmdldChgJHtUWF9SRUxBWV9WMV9QQVRIfS9xdW90ZWApXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtYXBpLWtleScsICdpbnRlZ3JhdG9yLWFwaS1rZXknKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1jaGFpbi1pZCcsICcxMzM3JykgLy8gdHNsaW50OmRpc2FibGUtbGluZTogY3VzdG9tLW5vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHg3Y2VCMjNmRDZiQzBhZEQ1OUU2MmFjMjU1NzgyNzBjRmYxYjlmNjE5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXlBbW91bnQ6IDEwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlwcGFnZVBlcmNlbnRhZ2U6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmVlVHlwZTogJ3ZvbHVtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBmZWVSZWNpcGllbnQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkudmFsaWRhdGlvbkVycm9yc1swXS5jb2RlKS50b0VxdWFsKFZhbGlkYXRpb25FcnJvckNvZGVzLlJlcXVpcmVkRmllbGQpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50b0VxdWFsKEh0dHBTdGF0dXMuQkFEX1JFUVVFU1QpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCd0aHJvd3MgaWYgdGhlIGBmZWVTZWxsVG9rZW5QZXJjZW50YWdlYCBpcyBvdXQgb2YgcmFuZ2UgZm9yIC9xdW90ZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVydGVzdChhcHApXG4gICAgICAgICAgICAgICAgICAgIC5nZXQoYCR7VFhfUkVMQVlfVjFfUEFUSH0vcXVvdGVgKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJzB4LWFwaS1rZXknLCAnaW50ZWdyYXRvci1hcGkta2V5JylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtY2hhaW4taWQnLCAnMTMzNycpIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6IGN1c3RvbS1uby1tYWdpYy1udW1iZXJzXG4gICAgICAgICAgICAgICAgICAgIC5xdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXlUb2tlbjogJzB4N2NlQjIzZkQ2YkMwYWRENTlFNjJhYzI1NTc4MjcwY0ZmMWI5ZjYxOScsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxsVG9rZW46ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV5QW1vdW50OiAxMDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpcHBhZ2VQZXJjZW50YWdlOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlZVR5cGU6ICd2b2x1bWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmVlU2VsbFRva2VuUGVyY2VudGFnZTogMTAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmVlUmVjaXBpZW50LFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnZhbGlkYXRpb25FcnJvcnNbMF0uY29kZSkudG9FcXVhbChWYWxpZGF0aW9uRXJyb3JDb2Rlcy5WYWx1ZU91dE9mUmFuZ2UpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50b0VxdWFsKEh0dHBTdGF0dXMuQkFEX1JFUVVFU1QpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCd0aHJvd3MgaWYgdGhlIGBmZWVTZWxsVG9rZW5QZXJjZW50YWdlYCBpcyBvdXQgb2YgcmFuZ2UgZm9yIC9wcmljZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVydGVzdChhcHApXG4gICAgICAgICAgICAgICAgICAgIC5nZXQoYCR7VFhfUkVMQVlfVjFfUEFUSH0vcHJpY2VgKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJzB4LWFwaS1rZXknLCAnaW50ZWdyYXRvci1hcGkta2V5JylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtY2hhaW4taWQnLCAnMTMzNycpIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6IGN1c3RvbS1uby1tYWdpYy1udW1iZXJzXG4gICAgICAgICAgICAgICAgICAgIC5xdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXlUb2tlbjogJzB4N2NlQjIzZkQ2YkMwYWRENTlFNjJhYzI1NTc4MjcwY0ZmMWI5ZjYxOScsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxsVG9rZW46ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV5QW1vdW50OiAxMDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpcHBhZ2VQZXJjZW50YWdlOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlZVR5cGU6ICd2b2x1bWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmVlU2VsbFRva2VuUGVyY2VudGFnZTogMTAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmVlUmVjaXBpZW50LFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnZhbGlkYXRpb25FcnJvcnNbMF0uY29kZSkudG9FcXVhbChWYWxpZGF0aW9uRXJyb3JDb2Rlcy5WYWx1ZU91dE9mUmFuZ2UpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50b0VxdWFsKEh0dHBTdGF0dXMuQkFEX1JFUVVFU1QpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCd0aHJvd3MgaWYgdGhlIGBmZWVSZWNpcGllbnRgIGlzIHVuZGVmaW5lZCB3aGVuIGBmZWVUeXBlYCBpcyBwcm92aWRlZCBmb3IgL3F1b3RlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3VwZXJ0ZXN0KGFwcClcbiAgICAgICAgICAgICAgICAgICAgLmdldChgJHtUWF9SRUxBWV9WMV9QQVRIfS9xdW90ZWApXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtYXBpLWtleScsICdpbnRlZ3JhdG9yLWFwaS1rZXknKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1jaGFpbi1pZCcsICcxMzM3JykgLy8gdHNsaW50OmRpc2FibGUtbGluZTogY3VzdG9tLW5vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHg3Y2VCMjNmRDZiQzBhZEQ1OUU2MmFjMjU1NzgyNzBjRmYxYjlmNjE5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXlBbW91bnQ6IDEwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlwcGFnZVBlcmNlbnRhZ2U6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmVlVHlwZTogJ3ZvbHVtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBmZWVTZWxsVG9rZW5QZXJjZW50YWdlOiA1LFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnZhbGlkYXRpb25FcnJvcnNbMF0uY29kZSkudG9FcXVhbChWYWxpZGF0aW9uRXJyb3JDb2Rlcy5SZXF1aXJlZEZpZWxkKTtcbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG9FcXVhbChIdHRwU3RhdHVzLkJBRF9SRVFVRVNUKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdnZXRQcmljZUFzeW5jJywgKCkgPT4ge1xuICAgICAgICBkZXNjcmliZSgnemVyby1nJywgKCkgPT4ge1xuICAgICAgICAgICAgaXQoJ3Jlc3BvbmRzIHdpdGggYW4gZXJyb3IgaWYgdGhlIHVuZGVybHlpbmcgc2VydmljZSBjYWxsIGZhaWxzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIG1vY2tHYXNsZXNzU3dhcFNlcnZpY2UuZmV0Y2hQcmljZUFzeW5jLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ1RoZSBzZXJ2aWNlIGJsZXcgdXAnKSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVydGVzdChhcHApXG4gICAgICAgICAgICAgICAgICAgIC5nZXQoYCR7WkVST19HX0FMSUFTX1BBVEh9L3ByaWNlYClcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1hcGkta2V5JywgJ2ludGVncmF0b3ItYXBpLWtleScpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJzB4LWNoYWluLWlkJywgJzEzMzcnKVxuICAgICAgICAgICAgICAgICAgICAucXVlcnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW46ICcweDdjZUIyM2ZENmJDMGFkRDU5RTYyYWMyNTU3ODI3MGNGZjFiOWY2MTknLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsbFRva2VuOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogMTAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVudE9uRmlsbGluZzogJ2ZhbHNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBWYWxpZGF0aW9uOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvRXF1YWwoSHR0cFN0YXR1cy5JTlRFUk5BTF9TRVJWRVJfRVJST1IpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdwYXNzZXMgY2FsbHMgb24gdG8gR2FzbGVzcyBTd2FwIFNlcnZpY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbW9ja0dhc2xlc3NTd2FwU2VydmljZS5mZXRjaFByaWNlQXN5bmMubW9ja1Jlc29sdmVkVmFsdWUobnVsbCk7XG5cbiAgICAgICAgICAgICAgICBhd2FpdCBzdXBlcnRlc3QoYXBwKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0KGAke1pFUk9fR19BTElBU19QQVRIfS9wcmljZWApXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtYXBpLWtleScsICdpbnRlZ3JhdG9yLWFwaS1rZXknKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1jaGFpbi1pZCcsICcxMzM3JylcbiAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHg3Y2VCMjNmRDZiQzBhZEQ1OUU2MmFjMjU1NzgyNzBjRmYxYjlmNjE5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXlBbW91bnQ6IDEwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnRPbkZpbGxpbmc6ICdmYWxzZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwVmFsaWRhdGlvbjogJ3RydWUnLFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrR2FzbGVzc1N3YXBTZXJ2aWNlLmZldGNoUHJpY2VBc3luYy5tb2NrLmNhbGxzWzBdKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgICAgICAgICAgICAgICBBcnJheSBbXG4gICAgICAgICAgICAgICAgICAgICAgT2JqZWN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYWZmaWxpYXRlQWRkcmVzc1wiOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJ1eUFtb3VudFwiOiBcIjEwMDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYnV5VG9rZW5cIjogXCIweDdjZUIyM2ZENmJDMGFkRDU5RTYyYWMyNTU3ODI3MGNGZjFiOWY2MTlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYnV5VG9rZW5EZWNpbWFsc1wiOiAxOCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmVlUmVjaXBpZW50XCI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmVlU2VsbFRva2VuUGVyY2VudGFnZVwiOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZlZVR5cGVcIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpbnRlZ3JhdG9yXCI6IE9iamVjdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxsb3dlZENoYWluSWRzXCI6IEFycmF5IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0MjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTMzNyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcGlLZXlzXCI6IEFycmF5IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImludGVncmF0b3ItYXBpLWtleVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImludGVncmF0b3JJZFwiOiBcImludGVncmF0b3ItaWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcInRlc3QgaW50ZWdyYXRvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInBscFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZnFtXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwicmZxdFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNlbGxBbW91bnRcIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxsVG9rZW5cIjogXCIweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsbFRva2VuRGVjaW1hbHNcIjogMTgsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNsaXBwYWdlUGVyY2VudGFnZVwiOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRha2VyQWRkcmVzc1wiOiBcIjB4NGM0MmE3MDY0MTBmMTE5MGY5N2QyNmZlM2M5OTljOTAwNzBhYTQwZlwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJtZXRhdHJhbnNhY3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIGApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdyZXR1cm5zIHJldHVybnMgYW4gUkZRIFByaWNlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlOiBGZXRjaEluZGljYXRpdmVRdW90ZVJlc3BvbnNlICYgeyBsaXF1aWRpdHlTb3VyY2U6ICdyZnEnIH0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGFsbG93YW5jZVRhcmdldDogJzB4ZGVmMWMwZGVkOWJlYzdmMWExNjcwODE5ODMzMjQwZjAyN2IyNWVmZicsXG4gICAgICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogbmV3IEJpZ051bWJlcigxMDAwKSxcbiAgICAgICAgICAgICAgICAgICAgc2VsbEFtb3VudDogbmV3IEJpZ051bWJlcigyMDAwKSxcbiAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW5BZGRyZXNzOiAnMHg3Y2VCMjNmRDZiQzBhZEQ1OUU2MmFjMjU1NzgyNzBjRmYxYjlmNjE5JyxcbiAgICAgICAgICAgICAgICAgICAgc2VsbFRva2VuQWRkcmVzczogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXG4gICAgICAgICAgICAgICAgICAgIGdhczogbmV3IEJpZ051bWJlcigxMDQzNDU5KSxcbiAgICAgICAgICAgICAgICAgICAgcHJpY2U6IG5ldyBCaWdOdW1iZXIoMiksXG4gICAgICAgICAgICAgICAgICAgIGxpcXVpZGl0eVNvdXJjZTogJ3JmcScsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIG1vY2tHYXNsZXNzU3dhcFNlcnZpY2UuZmV0Y2hQcmljZUFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlKHByaWNlKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3VwZXJ0ZXN0KGFwcClcbiAgICAgICAgICAgICAgICAgICAgLmdldChgJHtaRVJPX0dfQUxJQVNfUEFUSH0vcHJpY2VgKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJzB4LWFwaS1rZXknLCAnaW50ZWdyYXRvci1hcGkta2V5JylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtY2hhaW4taWQnLCAnMTMzNycpXG4gICAgICAgICAgICAgICAgICAgIC5xdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXlUb2tlbjogJzB4N2NlQjIzZkQ2YkMwYWRENTlFNjJhYzI1NTc4MjcwY0ZmMWI5ZjYxOScsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxsVG9rZW46ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV5QW1vdW50OiAxMDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50T25GaWxsaW5nOiAnZmFsc2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFZhbGlkYXRpb246ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9TdHJpY3RFcXVhbCh7IC4uLmNvbnZlcnRCaWdOdW1iZXJzVG9Kc29uKHByaWNlKSwgbGlxdWlkaXR5QXZhaWxhYmxlOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50b0VxdWFsKEh0dHBTdGF0dXMuT0spO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdyZXR1cm5zIHJldHVybnMgYW4gQU1NIFByaWNlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlOiBGZXRjaEluZGljYXRpdmVRdW90ZVJlc3BvbnNlICYgeyBsaXF1aWRpdHlTb3VyY2U6ICdhbW0nIH0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGFsbG93YW5jZVRhcmdldDogJzB4ZGVmMWMwZGVkOWJlYzdmMWExNjcwODE5ODMzMjQwZjAyN2IyNWVmZicsXG4gICAgICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogbmV3IEJpZ051bWJlcigxMDAwKSxcbiAgICAgICAgICAgICAgICAgICAgc2VsbEFtb3VudDogbmV3IEJpZ051bWJlcigyMDAwKSxcbiAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW5BZGRyZXNzOiAnMHg3Y2VCMjNmRDZiQzBhZEQ1OUU2MmFjMjU1NzgyNzBjRmYxYjlmNjE5JyxcbiAgICAgICAgICAgICAgICAgICAgc2VsbFRva2VuQWRkcmVzczogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXG4gICAgICAgICAgICAgICAgICAgIGdhczogbmV3IEJpZ051bWJlcigxMDQzNDU5KSxcbiAgICAgICAgICAgICAgICAgICAgcHJpY2U6IG5ldyBCaWdOdW1iZXIoMiksXG4gICAgICAgICAgICAgICAgICAgIGxpcXVpZGl0eVNvdXJjZTogJ2FtbScsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIG1vY2tHYXNsZXNzU3dhcFNlcnZpY2UuZmV0Y2hQcmljZUFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlKHByaWNlKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3VwZXJ0ZXN0KGFwcClcbiAgICAgICAgICAgICAgICAgICAgLmdldChgJHtaRVJPX0dfQUxJQVNfUEFUSH0vcHJpY2VgKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJzB4LWFwaS1rZXknLCAnaW50ZWdyYXRvci1hcGkta2V5JylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtY2hhaW4taWQnLCAnMTMzNycpXG4gICAgICAgICAgICAgICAgICAgIC5xdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXlUb2tlbjogJzB4N2NlQjIzZkQ2YkMwYWRENTlFNjJhYzI1NTc4MjcwY0ZmMWI5ZjYxOScsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxsVG9rZW46ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV5QW1vdW50OiAxMDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50T25GaWxsaW5nOiAnZmFsc2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFZhbGlkYXRpb246ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9TdHJpY3RFcXVhbCh7IC4uLmNvbnZlcnRCaWdOdW1iZXJzVG9Kc29uKHByaWNlKSwgbGlxdWlkaXR5QXZhaWxhYmxlOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50b0VxdWFsKEh0dHBTdGF0dXMuT0spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCd0eCByZWxheSB2MScsICgpID0+IHtcbiAgICAgICAgICAgIGl0KCdwYXNzZXMgY2FsbHMgb24gdG8gR2FzbGVzcyBTd2FwIFNlcnZpY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbW9ja0dhc2xlc3NTd2FwU2VydmljZS5mZXRjaFByaWNlQXN5bmMubW9ja1Jlc29sdmVkVmFsdWUobnVsbCk7XG5cbiAgICAgICAgICAgICAgICBhd2FpdCBzdXBlcnRlc3QoYXBwKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0KGAke1RYX1JFTEFZX1YxX1BBVEh9L3ByaWNlYClcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1hcGkta2V5JywgJ2ludGVncmF0b3ItYXBpLWtleScpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJzB4LWNoYWluLWlkJywgJzEzMzcnKVxuICAgICAgICAgICAgICAgICAgICAucXVlcnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW46ICcweDdjZUIyM2ZENmJDMGFkRDU5RTYyYWMyNTU3ODI3MGNGZjFiOWY2MTknLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsbFRva2VuOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogMTAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVudE9uRmlsbGluZzogJ2ZhbHNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBWYWxpZGF0aW9uOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBmZWVUeXBlOiAndm9sdW1lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlZVNlbGxUb2tlblBlcmNlbnRhZ2U6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmVlUmVjaXBpZW50LFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrR2FzbGVzc1N3YXBTZXJ2aWNlLmZldGNoUHJpY2VBc3luYy5tb2NrLmNhbGxzWzBdKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgICAgICAgICAgICAgICBBcnJheSBbXG4gICAgICAgICAgICAgICAgICAgICAgT2JqZWN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYWZmaWxpYXRlQWRkcmVzc1wiOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJ1eUFtb3VudFwiOiBcIjEwMDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYnV5VG9rZW5cIjogXCIweDdjZUIyM2ZENmJDMGFkRDU5RTYyYWMyNTU3ODI3MGNGZjFiOWY2MTlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYnV5VG9rZW5EZWNpbWFsc1wiOiAxOCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmVlUmVjaXBpZW50XCI6IFwiJHtmZWVSZWNpcGllbnR9XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZlZVNlbGxUb2tlblBlcmNlbnRhZ2VcIjogXCIxMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmZWVUeXBlXCI6IFwidm9sdW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImludGVncmF0b3JcIjogT2JqZWN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGxvd2VkQ2hhaW5JZHNcIjogQXJyYXkgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQyMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMzM3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImFwaUtleXNcIjogQXJyYXkgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW50ZWdyYXRvci1hcGkta2V5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW50ZWdyYXRvcklkXCI6IFwiaW50ZWdyYXRvci1pZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwidGVzdCBpbnRlZ3JhdG9yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwicGxwXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInJmcW1cIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZnF0XCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsbEFtb3VudFwiOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNlbGxUb2tlblwiOiBcIjB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxsVG9rZW5EZWNpbWFsc1wiOiAxOCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2xpcHBhZ2VQZXJjZW50YWdlXCI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidGFrZXJBZGRyZXNzXCI6IFwiMHg0YzQyYTcwNjQxMGYxMTkwZjk3ZDI2ZmUzYzk5OWM5MDA3MGFhNDBmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBcIm1ldGF0cmFuc2FjdGlvbl92MlwiLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgYCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoJ3JldHVybnMgcmV0dXJucyBhIG1ldGEtdHJhbnNhY3Rpb24gcHJpY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJpY2U6IEZldGNoSW5kaWNhdGl2ZVF1b3RlUmVzcG9uc2UgJiB7IHNvdXJjZXM6IExpcXVpZGl0eVNvdXJjZVtdOyBmZWVzPzogVHJ1bmNhdGVkRmVlcyB9ID0ge1xuICAgICAgICAgICAgICAgICAgICBhbGxvd2FuY2VUYXJnZXQ6ICcweGRlZjFjMGRlZDliZWM3ZjFhMTY3MDgxOTgzMzI0MGYwMjdiMjVlZmYnLFxuICAgICAgICAgICAgICAgICAgICBidXlBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMTAwMCksXG4gICAgICAgICAgICAgICAgICAgIHNlbGxBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMjAwMCksXG4gICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuQWRkcmVzczogJzB4N2NlQjIzZkQ2YkMwYWRENTlFNjJhYzI1NTc4MjcwY0ZmMWI5ZjYxOScsXG4gICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbkFkZHJlc3M6ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxuICAgICAgICAgICAgICAgICAgICBnYXM6IG5ldyBCaWdOdW1iZXIoMTA0MzQ1OSksXG4gICAgICAgICAgICAgICAgICAgIHByaWNlOiBuZXcgQmlnTnVtYmVyKDIpLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1F1aWNrU3dhcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9ydGlvbjogbmV3IEJpZ051bWJlcigwLjIzMDgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnRE9ET19WMicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9ydGlvbjogbmV3IEJpZ051bWJlcigwLjA3NjkyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1VuaXN3YXBfVjMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BvcnRpb246IG5ldyBCaWdOdW1iZXIoMC42OTIzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGZlZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVncmF0b3JGZWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWVUeXBlOiAndm9sdW1lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWVUb2tlbjogJzB4N2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVlQW1vdW50OiBuZXcgQmlnTnVtYmVyKDEwMCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgemVyb0V4RmVlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVlVHlwZTogJ2ludGVncmF0b3Jfc2hhcmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlZVRva2VuOiAnMHg3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWVBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhc0ZlZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlZVR5cGU6ICdnYXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlZVRva2VuOiAnMHg3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWVBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBtb2NrR2FzbGVzc1N3YXBTZXJ2aWNlLmZldGNoUHJpY2VBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZShwcmljZSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVydGVzdChhcHApXG4gICAgICAgICAgICAgICAgICAgIC5nZXQoYCR7VFhfUkVMQVlfVjFfUEFUSH0vcHJpY2VgKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJzB4LWFwaS1rZXknLCAnaW50ZWdyYXRvci1hcGkta2V5JylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtY2hhaW4taWQnLCAnMTMzNycpXG4gICAgICAgICAgICAgICAgICAgIC5xdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXlUb2tlbjogJzB4N2NlQjIzZkQ2YkMwYWRENTlFNjJhYzI1NTc4MjcwY0ZmMWI5ZjYxOScsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxsVG9rZW46ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV5QW1vdW50OiAxMDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50T25GaWxsaW5nOiAnZmFsc2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFZhbGlkYXRpb246ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9TdHJpY3RFcXVhbCh7IC4uLmNvbnZlcnRCaWdOdW1iZXJzVG9Kc29uKHByaWNlKSwgbGlxdWlkaXR5QXZhaWxhYmxlOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50b0VxdWFsKEh0dHBTdGF0dXMuT0spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2dldFF1b3RlQXN5bmMnLCAoKSA9PiB7XG4gICAgICAgIGRlc2NyaWJlKCd6ZXJvLWcnLCAoKSA9PiB7XG4gICAgICAgICAgICBpdCgncGFzc2VzIGNhbGxzIG9uIHRvIEdhc2xlc3MgU3dhcCBTZXJ2aWNlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIG1vY2tHYXNsZXNzU3dhcFNlcnZpY2UuZmV0Y2hRdW90ZUFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuXG4gICAgICAgICAgICAgICAgYXdhaXQgc3VwZXJ0ZXN0KGFwcClcbiAgICAgICAgICAgICAgICAgICAgLmdldChgJHtaRVJPX0dfQUxJQVNfUEFUSH0vcXVvdGVgKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJzB4LWFwaS1rZXknLCAnaW50ZWdyYXRvci1hcGkta2V5JylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtY2hhaW4taWQnLCAnMTMzNycpXG4gICAgICAgICAgICAgICAgICAgIC5xdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXlUb2tlbjogJzB4N2NlQjIzZkQ2YkMwYWRENTlFNjJhYzI1NTc4MjcwY0ZmMWI5ZjYxOScsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxsVG9rZW46ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV5QW1vdW50OiAxMDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50T25GaWxsaW5nOiAnZmFsc2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFZhbGlkYXRpb246ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QobW9ja0dhc2xlc3NTd2FwU2VydmljZS5mZXRjaFF1b3RlQXN5bmMubW9jay5jYWxsc1swXSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkgW1xuICAgICAgICAgICAgICAgICAgICAgIE9iamVjdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImFmZmlsaWF0ZUFkZHJlc3NcIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJidXlBbW91bnRcIjogXCIxMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJ1eVRva2VuXCI6IFwiMHg3Y2VCMjNmRDZiQzBhZEQ1OUU2MmFjMjU1NzgyNzBjRmYxYjlmNjE5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJ1eVRva2VuRGVjaW1hbHNcIjogMTgsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNoZWNrQXBwcm92YWxcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZlZVJlY2lwaWVudFwiOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZlZVNlbGxUb2tlblBlcmNlbnRhZ2VcIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmZWVUeXBlXCI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaW50ZWdyYXRvclwiOiBPYmplY3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImFsbG93ZWRDaGFpbklkc1wiOiBBcnJheSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNDIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEzMzcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXBpS2V5c1wiOiBBcnJheSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbnRlZ3JhdG9yLWFwaS1rZXlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbnRlZ3JhdG9ySWRcIjogXCJpbnRlZ3JhdG9yLWlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJ0ZXN0IGludGVncmF0b3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwbHBcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwicmZxbVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInJmcXRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxsQW1vdW50XCI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsbFRva2VuXCI6IFwiMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNlbGxUb2tlbkRlY2ltYWxzXCI6IDE4LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzbGlwcGFnZVBlcmNlbnRhZ2VcIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0YWtlckFkZHJlc3NcIjogXCIweDRjNDJhNzA2NDEwZjExOTBmOTdkMjZmZTNjOTk5YzkwMDcwYWE0MGZcIixcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwibWV0YXRyYW5zYWN0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdCgncmV0dXJucyBhbiBSRlEgcXVvdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcXVvdGU6IE90Y09yZGVyUmZxbVF1b3RlUmVzcG9uc2UgJiB7IGxpcXVpZGl0eVNvdXJjZTogJ3JmcScgfSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYnV5QW1vdW50OiBuZXcgQmlnTnVtYmVyKCcxODAwMDU0ODA1NDczJyksXG4gICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuQWRkcmVzczogJzB4N2NlQjIzZkQ2YkMwYWRENTlFNjJhYzI1NTc4MjcwY0ZmMWI5ZjYxOScsXG4gICAgICAgICAgICAgICAgICAgIGdhczogbmV3IEJpZ051bWJlcignMTA0MzQ1OScpLFxuICAgICAgICAgICAgICAgICAgICBvcmRlcjogbmV3IE90Y09yZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IDEzMzcsXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBpcnlBbmROb25jZTogbmV3IEJpZ051bWJlcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnNjI3NzEwMTczNTM4NjY4MDc2MzgzNTc4OTQyMzIwNzY2NjQxNjEwMjM1NTQ0NDQ2NDAzNDUxMjg5NzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VyOiAnMHgyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VyQW1vdW50OiBuZXcgQmlnTnVtYmVyKCcwJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWtlclRva2VuOiAnMHgzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRha2VyOiAnMHgxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRha2VyQW1vdW50OiBuZXcgQmlnTnVtYmVyKCcwJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWtlclRva2VuOiAnMHg0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR4T3JpZ2luOiAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmeWluZ0NvbnRyYWN0OiAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG9yZGVySGFzaDogJzB4NjliNzg0MDg3Mzg3ZDM3ZTIzNjFhNDAxNDY0MjBhNWE2OGIwODM3NTIzOGE1YmEwMzI5ZjYxMmQ1NjczYjJlYScsXG4gICAgICAgICAgICAgICAgICAgIHByaWNlOiBuZXcgQmlnTnVtYmVyKCcxODAwLjA1NDgwNScpLFxuICAgICAgICAgICAgICAgICAgICBzZWxsQW1vdW50OiBuZXcgQmlnTnVtYmVyKCcxMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyksXG4gICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbkFkZHJlc3M6ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBHYXNsZXNzVHlwZXMuT3RjT3JkZXIsXG4gICAgICAgICAgICAgICAgICAgIGxpcXVpZGl0eVNvdXJjZTogJ3JmcScsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBtb2NrR2FzbGVzc1N3YXBTZXJ2aWNlLmZldGNoUXVvdGVBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZShxdW90ZSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVydGVzdChhcHApXG4gICAgICAgICAgICAgICAgICAgIC5nZXQoYCR7WkVST19HX0FMSUFTX1BBVEh9L3F1b3RlYClcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1hcGkta2V5JywgJ2ludGVncmF0b3ItYXBpLWtleScpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJzB4LWNoYWluLWlkJywgJzEzMzcnKVxuICAgICAgICAgICAgICAgICAgICAucXVlcnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW46ICcweDdjZUIyM2ZENmJDMGFkRDU5RTYyYWMyNTU3ODI3MGNGZjFiOWY2MTknLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsbFRva2VuOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogMTgwMDA1NDgwNTQ3MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVudE9uRmlsbGluZzogJ3RydWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFZhbGlkYXRpb246ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9TdHJpY3RFcXVhbCh7IC4uLmNvbnZlcnRCaWdOdW1iZXJzVG9Kc29uKHF1b3RlKSwgbGlxdWlkaXR5QXZhaWxhYmxlOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50b0VxdWFsKEh0dHBTdGF0dXMuT0spO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdyZXR1cm5zIGFuIEFNTSBxdW90ZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBxdW90ZTogTWV0YVRyYW5zYWN0aW9uVjFRdW90ZVJlc3BvbnNlICYgeyBsaXF1aWRpdHlTb3VyY2U6ICdhbW0nIH0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogbmV3IEJpZ051bWJlcignMTgwMDA1NDgwNTQ3MycpLFxuICAgICAgICAgICAgICAgICAgICBidXlUb2tlbkFkZHJlc3M6ICcweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzQnLFxuICAgICAgICAgICAgICAgICAgICBnYXM6IG5ldyBCaWdOdW1iZXIoJzEwNDM0NTknKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YVRyYW5zYWN0aW9uOiBuZXcgTWV0YVRyYW5zYWN0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxEYXRhOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcweDQxNTU2NWIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzYzNWM5YWRjNWRlYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxN2I5ZTJhMzA0ZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA5NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4YTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4NjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzNjM1YzlhZGM1ZGVhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDM0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI1MTc1Njk2MzZiNTM3NzYxNzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODU3MGI1NWNmYWMxODg1ODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzOWQwYjllZmQxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhNWUwODI5Y2FjZWQ4ZmZkZDRkZTNjNDM2OTZjNTdmN2Q3YTY3OGZmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjc5MWJjYTFmMmRlNDY2MWVkODhhMzBjOTlhN2E5NDQ5YWE4NDE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNTE3NTY5NjM2YjUzNzc2MTcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQyYjg1YWFlN2Q2MGM0MmMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWM5NGViZWMzNzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTVlMDgyOWNhY2VkOGZmZGQ0ZGUzYzQzNjk2YzU3ZjdkN2E2NzhmZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBkNTAwYjFkOGU4ZWYzMWUyMWM5OWQxZGI5YTY0NDRkM2FkZjEyNzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGI0NDZmNjQ2ZjU2MzIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDJiODVhYWU3ZDYwYzQyYzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZGI1MTU2YzEzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MzMzZWIxZTMyNTIyZjE4OTNiN2M5ZmVhM2MyNjM4MDdhMDJkNTYxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEyNTU2ZTY5NzM3NzYxNzA1NjMzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTkwNTIyMDE2ZjA0NGEwNWIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYjA4MjE3YWY5NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZTU5MjQyN2EwYWVjZTkyZGUzZWRlZTFmMThlMDE1N2MwNTg2MTU2NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTI1NTZlNjk3Mzc3NjE3MDU2MzMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYzgyOTEwMGI3ODIyNGVmNTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1NzAxNTczODlmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBlNTkyNDI3YTBhZWNlOTJkZTNlZGVlMWYxOGUwMTU3YzA1ODYxNTY0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDI3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMWY0MWJmZDY3MDM3YjQyY2Y3M2FjZjIwNDcwNjdiZDRmMmM0N2Q5YmZkNjAwMGJiODI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODY5NTg0Y2QwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4YzYxMWRlZmJkODM4YTEzZGUzYTU5MjM2OTNjNThhN2MxODA3YzYzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDViODlkOTZiNDg2MzA2N2E2YicsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiAxMzcsXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBpcmF0aW9uVGltZVNlY29uZHM6IG5ldyBCaWdOdW1iZXIoJzk5OTA4Njg2NzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlZUFtb3VudDogbmV3IEJpZ051bWJlcignMCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmVlVG9rZW46ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4R2FzUHJpY2U6IG5ldyBCaWdOdW1iZXIoJzQyOTQ5NjcyOTYnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkdhc1ByaWNlOiBuZXcgQmlnTnVtYmVyKCcxJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBzYWx0OiBuZXcgQmlnTnVtYmVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICczMjYwNjY1MDc5NDIyNDE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZGVyOiAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25lcjogJzB4NGM0MmE3MDY0MTBmMTE5MGY5N2QyNmZlM2M5OTljOTAwNzBhYTQwZicsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IEJpZ051bWJlcignMCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyaWZ5aW5nQ29udHJhY3Q6ICcweGRlZjFjMGRlZDliZWM3ZjFhMTY3MDgxOTgzMzI0MGYwMjdiMjVlZmYnLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YVRyYW5zYWN0aW9uSGFzaDogJzB4ZGU1YTExOTgzZWRkMDEyMDQ3ZGQzMTA3NTMyZjAwN2E3M2FlNDg4YmZiMzU0ZjM1YjhhNDA1ODBlMmE3NzVhMScsXG4gICAgICAgICAgICAgICAgICAgIHByaWNlOiBuZXcgQmlnTnVtYmVyKCcxODAwLjA1NDgwNScpLFxuICAgICAgICAgICAgICAgICAgICBzZWxsQW1vdW50OiBuZXcgQmlnTnVtYmVyKCcxMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyksXG4gICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbkFkZHJlc3M6ICcweDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTknLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBHYXNsZXNzVHlwZXMuTWV0YVRyYW5zYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBsaXF1aWRpdHlTb3VyY2U6ICdhbW0nLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbW9ja0dhc2xlc3NTd2FwU2VydmljZS5mZXRjaFF1b3RlQXN5bmMubW9ja1Jlc29sdmVkVmFsdWUocXVvdGUpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlcnRlc3QoYXBwKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0KGAke1pFUk9fR19BTElBU19QQVRIfS9xdW90ZWApXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtYXBpLWtleScsICdpbnRlZ3JhdG9yLWFwaS1rZXknKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1jaGFpbi1pZCcsICcxMzM3JylcbiAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHg3Y2VCMjNmRDZiQzBhZEQ1OUU2MmFjMjU1NzgyNzBjRmYxYjlmNjE5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXlBbW91bnQ6IDE4MDAwNTQ4MDU0NzMsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnRPbkZpbGxpbmc6ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBWYWxpZGF0aW9uOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvU3RyaWN0RXF1YWwoeyAuLi5jb252ZXJ0QmlnTnVtYmVyc1RvSnNvbihxdW90ZSksIGxpcXVpZGl0eUF2YWlsYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG9FcXVhbChIdHRwU3RhdHVzLk9LKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgndHggcmVsYXkgdjEnLCAoKSA9PiB7XG4gICAgICAgICAgICBpdCgncGFzc2VzIGNhbGxzIG9uIHRvIEdhc2xlc3MgU3dhcCBTZXJ2aWNlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIG1vY2tHYXNsZXNzU3dhcFNlcnZpY2UuZmV0Y2hRdW90ZUFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuXG4gICAgICAgICAgICAgICAgYXdhaXQgc3VwZXJ0ZXN0KGFwcClcbiAgICAgICAgICAgICAgICAgICAgLmdldChgJHtUWF9SRUxBWV9WMV9QQVRIfS9xdW90ZWApXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtYXBpLWtleScsICdpbnRlZ3JhdG9yLWFwaS1rZXknKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1jaGFpbi1pZCcsICcxMzM3JylcbiAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eVRva2VuOiAnMHg3Y2VCMjNmRDZiQzBhZEQ1OUU2MmFjMjU1NzgyNzBjRmYxYjlmNjE5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGxUb2tlbjogJzB4Mjc5MUJjYTFmMmRlNDY2MUVEODhBMzBDOTlBN2E5NDQ5QWE4NDE3NCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXlBbW91bnQ6IDEwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnRPbkZpbGxpbmc6ICdmYWxzZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwVmFsaWRhdGlvbjogJ3RydWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmVlVHlwZTogJ3ZvbHVtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBmZWVTZWxsVG9rZW5QZXJjZW50YWdlOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlZVJlY2lwaWVudCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QobW9ja0dhc2xlc3NTd2FwU2VydmljZS5mZXRjaFF1b3RlQXN5bmMubW9jay5jYWxsc1swXSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkgW1xuICAgICAgICAgICAgICAgICAgICAgIE9iamVjdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImFmZmlsaWF0ZUFkZHJlc3NcIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJidXlBbW91bnRcIjogXCIxMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJ1eVRva2VuXCI6IFwiMHg3Y2VCMjNmRDZiQzBhZEQ1OUU2MmFjMjU1NzgyNzBjRmYxYjlmNjE5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJ1eVRva2VuRGVjaW1hbHNcIjogMTgsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNoZWNrQXBwcm92YWxcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZlZVJlY2lwaWVudFwiOiBcIiR7ZmVlUmVjaXBpZW50fVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmZWVTZWxsVG9rZW5QZXJjZW50YWdlXCI6IFwiMTBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmVlVHlwZVwiOiBcInZvbHVtZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpbnRlZ3JhdG9yXCI6IE9iamVjdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxsb3dlZENoYWluSWRzXCI6IEFycmF5IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0MjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTMzNyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcGlLZXlzXCI6IEFycmF5IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImludGVncmF0b3ItYXBpLWtleVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImludGVncmF0b3JJZFwiOiBcImludGVncmF0b3ItaWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcInRlc3QgaW50ZWdyYXRvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInBscFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZnFtXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwicmZxdFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNlbGxBbW91bnRcIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxsVG9rZW5cIjogXCIweDI3OTFCY2ExZjJkZTQ2NjFFRDg4QTMwQzk5QTdhOTQ0OUFhODQxNzRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsbFRva2VuRGVjaW1hbHNcIjogMTgsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNsaXBwYWdlUGVyY2VudGFnZVwiOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRha2VyQWRkcmVzc1wiOiBcIjB4NGM0MmE3MDY0MTBmMTE5MGY5N2QyNmZlM2M5OTljOTAwNzBhYTQwZlwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJtZXRhdHJhbnNhY3Rpb25fdjJcIixcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIGApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdyZXR1cm5zIGEgbWV0YS10cmFuc2FjdGlvbiBxdW90ZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBxdW90ZTogTWV0YVRyYW5zYWN0aW9uVjJRdW90ZVJlc3BvbnNlID0ge1xuICAgICAgICAgICAgICAgICAgICBidXlBbW91bnQ6IG5ldyBCaWdOdW1iZXIoJzE4MDAwNTQ4MDU0NzMnKSxcbiAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW5BZGRyZXNzOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcbiAgICAgICAgICAgICAgICAgICAgZ2FzOiBuZXcgQmlnTnVtYmVyKCcxMDQzNDU5JyksXG4gICAgICAgICAgICAgICAgICAgIHRyYWRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBraW5kOiBHYXNsZXNzVHlwZXMuTWV0YVRyYW5zYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzaDogJzB4ZGU1YTExOTgzZWRkMDEyMDQ3ZGQzMTA3NTMyZjAwN2E3M2FlNDg4YmZiMzU0ZjM1YjhhNDA1ODBlMmE3NzVhMScsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhVHJhbnNhY3Rpb246IG5ldyBNZXRhVHJhbnNhY3Rpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxEYXRhOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMHg0MTU1NjViMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDM2MzVjOWFkYzVkZWEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTdiOWUyYTMwNGYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOTQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjc5MWJjYTFmMmRlNDY2MWVkODhhMzBjOTlhN2E5NDQ5YWE4NDE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDg2MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3YzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzYzNWM5YWRjNWRlYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDFlMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDUyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNTE3NTY5NjM2YjUzNzc2MTcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDg1NzBiNTVjZmFjMTg4NTgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzlkMGI5ZWZkMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTVlMDgyOWNhY2VkOGZmZGQ0ZGUzYzQzNjk2YzU3ZjdkN2E2NzhmZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjUxNzU2OTYzNmI1Mzc3NjE3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MmI4NWFhZTdkNjBjNDJjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDFjOTRlYmVjMzcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGE1ZTA4MjljYWNlZDhmZmRkNGRlM2M0MzY5NmM1N2Y3ZDdhNjc4ZmYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZDUwMGIxZDhlOGVmMzFlMjFjOTlkMWRiOWE2NDQ0ZDNhZGYxMjcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjc5MWJjYTFmMmRlNDY2MWVkODhhMzBjOTlhN2E5NDQ5YWE4NDE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBiNDQ2ZjY0NmY1NjMyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQyYjg1YWFlN2Q2MGM0MmMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWRiNTE1NmMxMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTMzM2ViMWUzMjUyMmYxODkzYjdjOWZlYTNjMjYzODA3YTAyZDU2MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMjU1NmU2OTczNzc2MTcwNTYzMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDE5MDUyMjAxNmYwNDRhMDViMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGIwODIxN2FmOTQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA2MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGU1OTI0MjdhMGFlY2U5MmRlM2VkZWUxZjE4ZTAxNTdjMDU4NjE1NjQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEyNTU2ZTY5NzM3NzYxNzA1NjMzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGM4MjkxMDBiNzgyMjRlZjUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTcwMTU3Mzg5ZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZTU5MjQyN2EwYWVjZTkyZGUzZWRlZTFmMThlMDE1N2MwNTg2MTU2NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQyN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDFmNDFiZmQ2NzAzN2I0MmNmNzNhY2YyMDQ3MDY3YmQ0ZjJjNDdkOWJmZDYwMDBiYjgyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDg2OTU4NGNkMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOGM2MTFkZWZiZDgzOGExM2RlM2E1OTIzNjkzYzU4YTdjMTgwN2M2MzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1Yjg5ZDk2YjQ4NjMwNjdhNmInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IDEzNyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBpcmF0aW9uVGltZVNlY29uZHM6IG5ldyBCaWdOdW1iZXIoJzk5OTA4Njg2NzknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWVBbW91bnQ6IG5ldyBCaWdOdW1iZXIoJzAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWVUb2tlbjogJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4R2FzUHJpY2U6IG5ldyBCaWdOdW1iZXIoJzQyOTQ5NjcyOTYnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5HYXNQcmljZTogbmV3IEJpZ051bWJlcignMScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbHQ6IG5ldyBCaWdOdW1iZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICczMjYwNjY1MDc5NDIyNDE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kZXI6ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25lcjogJzB4NGM0MmE3MDY0MTBmMTE5MGY5N2QyNmZlM2M5OTljOTAwNzBhYTQwZicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBCaWdOdW1iZXIoJzAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZnlpbmdDb250cmFjdDogJzB4ZGVmMWMwZGVkOWJlYzdmMWExNjcwODE5ODMzMjQwZjAyN2IyNWVmZicsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcHJpY2U6IG5ldyBCaWdOdW1iZXIoJzE4MDAuMDU0ODA1JyksXG4gICAgICAgICAgICAgICAgICAgIHNlbGxBbW91bnQ6IG5ldyBCaWdOdW1iZXIoJzEwMDAwMDAwMDAwMDAwMDAwMDAwMDAnKSxcbiAgICAgICAgICAgICAgICAgICAgc2VsbFRva2VuQWRkcmVzczogJzB4N2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOScsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnUXVpY2tTd2FwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3J0aW9uOiBuZXcgQmlnTnVtYmVyKDAuMjMwOCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdET0RPX1YyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3J0aW9uOiBuZXcgQmlnTnVtYmVyKDAuMDc2OTIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnVW5pc3dhcF9WMycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9ydGlvbjogbmV3IEJpZ051bWJlcigwLjY5MjMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgZmVlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZWdyYXRvckZlZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlZVR5cGU6ICd2b2x1bWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlZVRva2VuOiAnMHg3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWVBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMTAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB6ZXJvRXhGZWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWVUeXBlOiAnaW50ZWdyYXRvcl9zaGFyZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVlVG9rZW46ICcweDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlZUFtb3VudDogbmV3IEJpZ051bWJlcigxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FzRmVlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVlVHlwZTogJ2dhcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVlVG9rZW46ICcweDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlZUFtb3VudDogbmV3IEJpZ051bWJlcigxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBtb2NrR2FzbGVzc1N3YXBTZXJ2aWNlLmZldGNoUXVvdGVBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZShxdW90ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlcnRlc3QoYXBwKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0KGAke1RYX1JFTEFZX1YxX1BBVEh9L3F1b3RlYClcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1hcGkta2V5JywgJ2ludGVncmF0b3ItYXBpLWtleScpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJzB4LWNoYWluLWlkJywgJzEzMzcnKVxuICAgICAgICAgICAgICAgICAgICAucXVlcnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV5VG9rZW46ICcweDdjZUIyM2ZENmJDMGFkRDU5RTYyYWMyNTU3ODI3MGNGZjFiOWY2MTknLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsbFRva2VuOiAnMHgyNzkxQmNhMWYyZGU0NjYxRUQ4OEEzMEM5OUE3YTk0NDlBYTg0MTc0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eUFtb3VudDogMTgwMDA1NDgwNTQ3MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVudE9uRmlsbGluZzogJ3RydWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcFZhbGlkYXRpb246ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9TdHJpY3RFcXVhbCh7IC4uLmNvbnZlcnRCaWdOdW1iZXJzVG9Kc29uKHF1b3RlKSwgbGlxdWlkaXR5QXZhaWxhYmxlOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50b0VxdWFsKEh0dHBTdGF0dXMuT0spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3Byb2Nlc3NTdWJtaXRBc3luYycsICgpID0+IHtcbiAgICAgICAgZGVzY3JpYmUoJ3plcm8tZycsICgpID0+IHtcbiAgICAgICAgICAgIGl0KCdyZXR1cm5zIGEgbWV0YXRyYW5zYWN0aW9uIHJlc3VsdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhVHJhbnNhY3Rpb24gPSBuZXcgTWV0YVRyYW5zYWN0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbERhdGE6XG4gICAgICAgICAgICAgICAgICAgICAgICAnMHg0MTU1NjViMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDM2MzVjOWFkYzVkZWEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTdiOWUyYTMwNGYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOTQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjc5MWJjYTFmMmRlNDY2MWVkODhhMzBjOTlhN2E5NDQ5YWE4NDE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDg2MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3YzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzYzNWM5YWRjNWRlYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDFlMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDUyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNTE3NTY5NjM2YjUzNzc2MTcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDg1NzBiNTVjZmFjMTg4NTgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzlkMGI5ZWZkMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTVlMDgyOWNhY2VkOGZmZGQ0ZGUzYzQzNjk2YzU3ZjdkN2E2NzhmZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjUxNzU2OTYzNmI1Mzc3NjE3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MmI4NWFhZTdkNjBjNDJjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDFjOTRlYmVjMzcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGE1ZTA4MjljYWNlZDhmZmRkNGRlM2M0MzY5NmM1N2Y3ZDdhNjc4ZmYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZDUwMGIxZDhlOGVmMzFlMjFjOTlkMWRiOWE2NDQ0ZDNhZGYxMjcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjc5MWJjYTFmMmRlNDY2MWVkODhhMzBjOTlhN2E5NDQ5YWE4NDE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBiNDQ2ZjY0NmY1NjMyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQyYjg1YWFlN2Q2MGM0MmMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWRiNTE1NmMxMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTMzM2ViMWUzMjUyMmYxODkzYjdjOWZlYTNjMjYzODA3YTAyZDU2MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMjU1NmU2OTczNzc2MTcwNTYzMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDE5MDUyMjAxNmYwNDRhMDViMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGIwODIxN2FmOTQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA2MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGU1OTI0MjdhMGFlY2U5MmRlM2VkZWUxZjE4ZTAxNTdjMDU4NjE1NjQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEyNTU2ZTY5NzM3NzYxNzA1NjMzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGM4MjkxMDBiNzgyMjRlZjUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTcwMTU3Mzg5ZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZTU5MjQyN2EwYWVjZTkyZGUzZWRlZTFmMThlMDE1N2MwNTg2MTU2NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQyN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDFmNDFiZmQ2NzAzN2I0MmNmNzNhY2YyMDQ3MDY3YmQ0ZjJjNDdkOWJmZDYwMDBiYjgyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDg2OTU4NGNkMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOGM2MTFkZWZiZDgzOGExM2RlM2E1OTIzNjkzYzU4YTdjMTgwN2M2MzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1Yjg5ZDk2YjQ4NjMwNjdhNmInLFxuICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiAxMzcsXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyYXRpb25UaW1lU2Vjb25kczogbmV3IEJpZ051bWJlcignOTk5MDg2ODY3OScpLFxuICAgICAgICAgICAgICAgICAgICBmZWVBbW91bnQ6IG5ldyBCaWdOdW1iZXIoJzAnKSxcbiAgICAgICAgICAgICAgICAgICAgZmVlVG9rZW46ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICAgICAgICAgICAgICAgICBtYXhHYXNQcmljZTogbmV3IEJpZ051bWJlcignNDI5NDk2NzI5NicpLFxuICAgICAgICAgICAgICAgICAgICBtaW5HYXNQcmljZTogbmV3IEJpZ051bWJlcignMScpLFxuICAgICAgICAgICAgICAgICAgICBzYWx0OiBuZXcgQmlnTnVtYmVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgJzMyNjA2NjUwNzk0MjI0MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgc2VuZGVyOiAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAgICAgICAgICAgICAgICAgc2lnbmVyOiAnMHg0YzQyYTcwNjQxMGYxMTkwZjk3ZDI2ZmUzYzk5OWM5MDA3MGFhNDBmJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBCaWdOdW1iZXIoJzAnKSxcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5aW5nQ29udHJhY3Q6ICcweGRlZjFjMGRlZDliZWM3ZjFhMTY3MDgxOTgzMzI0MGYwMjdiMjVlZmYnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1Ym1pdFJlc3VsdDogU3VibWl0TWV0YVRyYW5zYWN0aW9uU2lnbmVkUXVvdGVSZXNwb25zZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbWV0YVRyYW5zYWN0aW9uSGFzaDogJzB4ZGU1YTExOTgzZWRkMDEyMDQ3ZGQzMTA3NTMyZjAwN2E3M2FlNDg4YmZiMzU0ZjM1YjhhNDA1ODBlMmE3NzVhMScsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEdhc2xlc3NUeXBlcy5NZXRhVHJhbnNhY3Rpb24sXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIG1vY2tHYXNsZXNzU3dhcFNlcnZpY2UucHJvY2Vzc1N1Ym1pdEFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlKHN1Ym1pdFJlc3VsdCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVydGVzdChhcHApXG4gICAgICAgICAgICAgICAgICAgIC5wb3N0KGAke1pFUk9fR19BTElBU19QQVRIfS9zdWJtaXRgKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJzB4LWFwaS1rZXknLCAnaW50ZWdyYXRvci1hcGkta2V5JylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtY2hhaW4taWQnLCAnMTMzNycpXG4gICAgICAgICAgICAgICAgICAgIC5zZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6IEdhc2xlc3NUeXBlcy5NZXRhVHJhbnNhY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFkZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFUcmFuc2FjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBHYXNsZXNzVHlwZXMuTWV0YVRyYW5zYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogZXRoU2lnbkhhc2hXaXRoS2V5KG1ldGFUcmFuc2FjdGlvbi5nZXRIYXNoKCksIHRha2VyUHJpdmF0ZUtleSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrR2FzbGVzc1N3YXBTZXJ2aWNlLnByb2Nlc3NTdWJtaXRBc3luYy5tb2NrLmNhbGxzWzBdKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgICAgICAgICAgICAgICBBcnJheSBbXG4gICAgICAgICAgICAgICAgICAgICAgT2JqZWN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwia2luZFwiOiBcIm1ldGF0cmFuc2FjdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0cmFkZVwiOiBPYmplY3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1ldGFUcmFuc2FjdGlvblwiOiBNZXRhVHJhbnNhY3Rpb24ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2FsbERhdGFcIjogXCIweDQxNTU2NWIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzYzNWM5YWRjNWRlYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxN2I5ZTJhMzA0ZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA5NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4YTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4NjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzNjM1YzlhZGM1ZGVhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDM0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI1MTc1Njk2MzZiNTM3NzYxNzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODU3MGI1NWNmYWMxODg1ODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzOWQwYjllZmQxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhNWUwODI5Y2FjZWQ4ZmZkZDRkZTNjNDM2OTZjNTdmN2Q3YTY3OGZmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjc5MWJjYTFmMmRlNDY2MWVkODhhMzBjOTlhN2E5NDQ5YWE4NDE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNTE3NTY5NjM2YjUzNzc2MTcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQyYjg1YWFlN2Q2MGM0MmMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWM5NGViZWMzNzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTVlMDgyOWNhY2VkOGZmZGQ0ZGUzYzQzNjk2YzU3ZjdkN2E2NzhmZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBkNTAwYjFkOGU4ZWYzMWUyMWM5OWQxZGI5YTY0NDRkM2FkZjEyNzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGI0NDZmNjQ2ZjU2MzIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDJiODVhYWU3ZDYwYzQyYzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZGI1MTU2YzEzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MzMzZWIxZTMyNTIyZjE4OTNiN2M5ZmVhM2MyNjM4MDdhMDJkNTYxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEyNTU2ZTY5NzM3NzYxNzA1NjMzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTkwNTIyMDE2ZjA0NGEwNWIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYjA4MjE3YWY5NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZTU5MjQyN2EwYWVjZTkyZGUzZWRlZTFmMThlMDE1N2MwNTg2MTU2NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTI1NTZlNjk3Mzc3NjE3MDU2MzMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYzgyOTEwMGI3ODIyNGVmNTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1NzAxNTczODlmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBlNTkyNDI3YTBhZWNlOTJkZTNlZGVlMWYxOGUwMTU3YzA1ODYxNTY0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDI3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMWY0MWJmZDY3MDM3YjQyY2Y3M2FjZjIwNDcwNjdiZDRmMmM0N2Q5YmZkNjAwMGJiODI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODY5NTg0Y2QwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4YzYxMWRlZmJkODM4YTEzZGUzYTU5MjM2OTNjNThhN2MxODA3YzYzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDViODlkOTZiNDg2MzA2N2E2YlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2hhaW5JZFwiOiAxMzcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJleHBpcmF0aW9uVGltZVNlY29uZHNcIjogXCI5OTkwODY4Njc5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmZWVBbW91bnRcIjogXCIwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmZWVUb2tlblwiOiBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWF4R2FzUHJpY2VcIjogXCI0Mjk0OTY3Mjk2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtaW5HYXNQcmljZVwiOiBcIjFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNhbHRcIjogXCIzMjYwNjY1MDc5NDIyNDE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VuZGVyXCI6IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzaWduZXJcIjogXCIweDRjNDJhNzA2NDEwZjExOTBmOTdkMjZmZTNjOTk5YzkwMDcwYWE0MGZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidmVyaWZ5aW5nQ29udHJhY3RcIjogXCIweGRlZjFjMGRlZDliZWM3ZjFhMTY3MDgxOTgzMzI0MGYwMjdiMjVlZmZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzaWduYXR1cmVcIjogT2JqZWN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJcIjogXCIweDcyNDdlZDE1NjA4MWM3Njc3ODE4MzRiMTIyZDRlOTMxN2YzY2MyZDVlZDUyOWNiNzRhYWFhMTFkOGI1YTkzZjhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNcIjogXCIweDE5YTBiNzk1NjA5NDgzYjlmY2JjNDJiNTc0ZTQ0MDE0MDEzMDhiNGMyNDM0N2IwYmRhOGEyY2YyMzMyZWZkNzhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNpZ25hdHVyZVR5cGVcIjogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZcIjogMjgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm1ldGF0cmFuc2FjdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwiaW50ZWdyYXRvci1pZFwiLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgYCk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvRXF1YWwoSHR0cFN0YXR1cy5DUkVBVEVEKTtcbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9FcXVhbChzdWJtaXRSZXN1bHQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCd0eCByZWxheSB2MScsICgpID0+IHtcbiAgICAgICAgICAgIGl0KCdyZXR1cm5zIGEgbWV0YXRyYW5zYWN0aW9uIHJlc3VsdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhVHJhbnNhY3Rpb24gPSBuZXcgTWV0YVRyYW5zYWN0aW9uVjIoe1xuICAgICAgICAgICAgICAgICAgICBjYWxsRGF0YTpcbiAgICAgICAgICAgICAgICAgICAgICAgICcweDQxNTU2NWIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzYzNWM5YWRjNWRlYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxN2I5ZTJhMzA0ZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA5NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4YTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4NjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzNjM1YzlhZGM1ZGVhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDM0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNTIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI1MTc1Njk2MzZiNTM3NzYxNzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODU3MGI1NWNmYWMxODg1ODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzOWQwYjllZmQxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhNWUwODI5Y2FjZWQ4ZmZkZDRkZTNjNDM2OTZjNTdmN2Q3YTY3OGZmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjc5MWJjYTFmMmRlNDY2MWVkODhhMzBjOTlhN2E5NDQ5YWE4NDE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNTE3NTY5NjM2YjUzNzc2MTcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQyYjg1YWFlN2Q2MGM0MmMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWM5NGViZWMzNzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTVlMDgyOWNhY2VkOGZmZGQ0ZGUzYzQzNjk2YzU3ZjdkN2E2NzhmZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBkNTAwYjFkOGU4ZWYzMWUyMWM5OWQxZGI5YTY0NDRkM2FkZjEyNzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGI0NDZmNjQ2ZjU2MzIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDJiODVhYWU3ZDYwYzQyYzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZGI1MTU2YzEzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MzMzZWIxZTMyNTIyZjE4OTNiN2M5ZmVhM2MyNjM4MDdhMDJkNTYxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEyNTU2ZTY5NzM3NzYxNzA1NjMzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTkwNTIyMDE2ZjA0NGEwNWIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYjA4MjE3YWY5NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZTU5MjQyN2EwYWVjZTkyZGUzZWRlZTFmMThlMDE1N2MwNTg2MTU2NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTI1NTZlNjk3Mzc3NjE3MDU2MzMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYzgyOTEwMGI3ODIyNGVmNTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1NzAxNTczODlmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBlNTkyNDI3YTBhZWNlOTJkZTNlZGVlMWYxOGUwMTU3YzA1ODYxNTY0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDI3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMWY0MWJmZDY3MDM3YjQyY2Y3M2FjZjIwNDcwNjdiZDRmMmM0N2Q5YmZkNjAwMGJiODI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODY5NTg0Y2QwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4YzYxMWRlZmJkODM4YTEzZGUzYTU5MjM2OTNjNThhN2MxODA3YzYzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDViODlkOTZiNDg2MzA2N2E2YicsXG4gICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IDEzNyxcbiAgICAgICAgICAgICAgICAgICAgZXhwaXJhdGlvblRpbWVTZWNvbmRzOiBuZXcgQmlnTnVtYmVyKCc5OTkwODY4Njc5JyksXG4gICAgICAgICAgICAgICAgICAgIGZlZUFtb3VudDogbmV3IEJpZ051bWJlcignMCcpLFxuICAgICAgICAgICAgICAgICAgICBmZWVUb2tlbjogJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgICAgICAgICAgICAgICAgIG1heEdhc1ByaWNlOiBuZXcgQmlnTnVtYmVyKCc0Mjk0OTY3Mjk2JyksXG4gICAgICAgICAgICAgICAgICAgIG1pbkdhc1ByaWNlOiBuZXcgQmlnTnVtYmVyKCcxJyksXG4gICAgICAgICAgICAgICAgICAgIHNhbHQ6IG5ldyBCaWdOdW1iZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAnMzI2MDY2NTA3OTQyMjQxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBzZW5kZXI6ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICAgICAgICAgICAgICAgICBzaWduZXI6ICcweDRjNDJhNzA2NDEwZjExOTBmOTdkMjZmZTNjOTk5YzkwMDcwYWE0MGYnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IEJpZ051bWJlcignMCcpLFxuICAgICAgICAgICAgICAgICAgICB2ZXJpZnlpbmdDb250cmFjdDogJzB4ZGVmMWMwZGVkOWJlYzdmMWExNjcwODE5ODMzMjQwZjAyN2IyNWVmZicsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VibWl0UmVzdWx0OiBTdWJtaXRNZXRhVHJhbnNhY3Rpb25WMlNpZ25lZFF1b3RlUmVzcG9uc2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGFUcmFuc2FjdGlvbkhhc2g6ICcweGRlNWExMTk4M2VkZDAxMjA0N2RkMzEwNzUzMmYwMDdhNzNhZTQ4OGJmYjM1NGYzNWI4YTQwNTgwZTJhNzc1YTEnLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBHYXNsZXNzVHlwZXMuTWV0YVRyYW5zYWN0aW9uVjIsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIG1vY2tHYXNsZXNzU3dhcFNlcnZpY2UucHJvY2Vzc1N1Ym1pdEFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlKHN1Ym1pdFJlc3VsdCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVydGVzdChhcHApXG4gICAgICAgICAgICAgICAgICAgIC5wb3N0KGAke1RYX1JFTEFZX1YxX1BBVEh9L3N1Ym1pdGApXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgICAgICAgICAgICAgICAgLnNldCgnMHgtYXBpLWtleScsICdpbnRlZ3JhdG9yLWFwaS1rZXknKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCcweC1jaGFpbi1pZCcsICcxMzM3JylcbiAgICAgICAgICAgICAgICAgICAgLnNlbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAga2luZDogR2FzbGVzc1R5cGVzLk1ldGFUcmFuc2FjdGlvblYyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhVHJhbnNhY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogR2FzbGVzc1R5cGVzLk1ldGFUcmFuc2FjdGlvblYyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogZXRoU2lnbkhhc2hXaXRoS2V5KG1ldGFUcmFuc2FjdGlvbi5nZXRIYXNoKCksIHRha2VyUHJpdmF0ZUtleSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrR2FzbGVzc1N3YXBTZXJ2aWNlLnByb2Nlc3NTdWJtaXRBc3luYy5tb2NrLmNhbGxzWzBdKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgICAgICAgICAgICAgICBBcnJheSBbXG4gICAgICAgICAgICAgICAgICAgICAgT2JqZWN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwia2luZFwiOiBcIm1ldGF0cmFuc2FjdGlvbl92MlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0cmFkZVwiOiBPYmplY3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1ldGFUcmFuc2FjdGlvblwiOiBNZXRhVHJhbnNhY3Rpb25WMiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjYWxsRGF0YVwiOiBcIjB4NDE1NTY1YjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjc5MWJjYTFmMmRlNDY2MWVkODhhMzBjOTlhN2E5NDQ5YWE4NDE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzNjM1YzlhZGM1ZGVhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDE3YjllMmEzMDRmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDk0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDhhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2NlYjIzZmQ2YmMwYWRkNTllNjJhYzI1NTc4MjcwY2ZmMWI5ZjYxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDg2MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4NjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwN2MwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDM2MzVjOWFkYzVkZWEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxZTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1MjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjUxNzU2OTYzNmI1Mzc3NjE3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4NTcwYjU1Y2ZhYzE4ODU4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDM5ZDBiOWVmZDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGE1ZTA4MjljYWNlZDhmZmRkNGRlM2M0MzY5NmM1N2Y3ZDdhNjc4ZmYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyNzkxYmNhMWYyZGU0NjYxZWQ4OGEzMGM5OWE3YTk0NDlhYTg0MTc0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI1MTc1Njk2MzZiNTM3NzYxNzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDJiODVhYWU3ZDYwYzQyYzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxYzk0ZWJlYzM3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhNWUwODI5Y2FjZWQ4ZmZkZDRkZTNjNDM2OTZjNTdmN2Q3YTY3OGZmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGQ1MDBiMWQ4ZThlZjMxZTIxYzk5ZDFkYjlhNjQ0NGQzYWRmMTI3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI3OTFiY2ExZjJkZTQ2NjFlZDg4YTMwYzk5YTdhOTQ0OWFhODQxNzQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYjQ0NmY2NDZmNTYzMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MmI4NWFhZTdkNjBjNDJjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDFkYjUxNTZjMTMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDUzMzNlYjFlMzI1MjJmMTg5M2I3YzlmZWEzYzI2MzgwN2EwMmQ1NjEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTI1NTZlNjk3Mzc3NjE3MDU2MzMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxOTA1MjIwMTZmMDQ0YTA1YjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBiMDgyMTdhZjk0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBlNTkyNDI3YTBhZWNlOTJkZTNlZGVlMWYxOGUwMTU3YzA1ODYxNTY0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMjU1NmU2OTczNzc2MTcwNTYzMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBjODI5MTAwYjc4MjI0ZWY1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDU3MDE1NzM4OWYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGU1OTI0MjdhMGFlY2U5MmRlM2VkZWUxZjE4ZTAxNTdjMDU4NjE1NjQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0MjdjZWIyM2ZkNmJjMGFkZDU5ZTYyYWMyNTU3ODI3MGNmZjFiOWY2MTkwMDAxZjQxYmZkNjcwMzdiNDJjZjczYWNmMjA0NzA2N2JkNGYyYzQ3ZDliZmQ2MDAwYmI4Mjc5MWJjYTFmMmRlNDY2MWVkODhhMzBjOTlhN2E5NDQ5YWE4NDE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDUwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBlMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA3Y2ViMjNmZDZiYzBhZGQ1OWU2MmFjMjU1NzgyNzBjZmYxYjlmNjE5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4Njk1ODRjZDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDhjNjExZGVmYmQ4MzhhMTNkZTNhNTkyMzY5M2M1OGE3YzE4MDdjNjMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNWI4OWQ5NmI0ODYzMDY3YTZiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjaGFpbklkXCI6IDEzNyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImV4cGlyYXRpb25UaW1lU2Vjb25kc1wiOiBcIjk5OTA4Njg2NzlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZlZUFtb3VudFwiOiBcIjBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZlZVRva2VuXCI6IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtYXhHYXNQcmljZVwiOiBcIjQyOTQ5NjcyOTZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1pbkdhc1ByaWNlXCI6IFwiMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2FsdFwiOiBcIjMyNjA2NjUwNzk0MjI0MTkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZW5kZXJcIjogXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNpZ25lclwiOiBcIjB4NGM0MmE3MDY0MTBmMTE5MGY5N2QyNmZlM2M5OTljOTAwNzBhYTQwZlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCIwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ2ZXJpZnlpbmdDb250cmFjdFwiOiBcIjB4ZGVmMWMwZGVkOWJlYzdmMWExNjcwODE5ODMzMjQwZjAyN2IyNWVmZlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInNpZ25hdHVyZVwiOiBPYmplY3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiclwiOiBcIjB4NzI0N2VkMTU2MDgxYzc2Nzc4MTgzNGIxMjJkNGU5MzE3ZjNjYzJkNWVkNTI5Y2I3NGFhYWExMWQ4YjVhOTNmOFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic1wiOiBcIjB4MTlhMGI3OTU2MDk0ODNiOWZjYmM0MmI1NzRlNDQwMTQwMTMwOGI0YzI0MzQ3YjBiZGE4YTJjZjIzMzJlZmQ3OFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2lnbmF0dXJlVHlwZVwiOiAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidlwiOiAyOCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwibWV0YXRyYW5zYWN0aW9uX3YyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJpbnRlZ3JhdG9yLWlkXCIsXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBgKTtcbiAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG9FcXVhbChIdHRwU3RhdHVzLkNSRUFURUQpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0VxdWFsKHN1Ym1pdFJlc3VsdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcblxuLyoqXG4gKiBEZWVwbHkgdHJhbnNmb3JtcyBvYmplY3Qga2V5cyBmcm9tIEJpZ051bWJlciB0byBKU09OXG4gKi9cbi8vICRlc2xpbnQtZml4LW1lIGh0dHBzOi8vZ2l0aHViLmNvbS9yaGlub2RhdmlkL2VzbGludC1maXgtbWVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBjb252ZXJ0QmlnTnVtYmVyc1RvSnNvbih4OiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogUmVjb3JkPHN0cmluZywgYW55PiB7XG4gICAgcmV0dXJuIG1hcFZhbHVlcyh4LCAodikgPT4ge1xuICAgICAgICBpZiAodiBpbnN0YW5jZW9mIEJpZ051bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIHYudG9KU09OKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHYgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgY29uc3QganNvbkFycmF5ID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygdikge1xuICAgICAgICAgICAgICAgIGpzb25BcnJheS5wdXNoKGNvbnZlcnRCaWdOdW1iZXJzVG9Kc29uKGl0ZW0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBqc29uQXJyYXk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHYgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBjb252ZXJ0QmlnTnVtYmVyc1RvSnNvbih2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdjtcbiAgICB9KTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==