{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/quote_comparison_utils_test.ts","mappings":";;AAAA,yCAAyC;AACzC,0BAA0B;AAC1B,qCAAqC;AAErC,qDAAkD;AAClD,gGAAiG;AACjG,uDAA8C;AAC9C,qCAAsC;AACtC,+BAA8B;AAE9B,wDAAgF;AAEhF,mFAAsE;AAEtE,6DAA6D;AAC7D,mEAAmE;AACnE,MAAM,aAAa,GAAG,IAAI,iBAAS,CAAC,gBAAgB,CAAC,CAAC;AAEtD,SAAS,eAAe;IACpB,OAAO;QACH,KAAK,EAAE,IAAI,yBAAQ,CAAC;YAChB,WAAW,EAAE,gBAAI;YACjB,WAAW,EAAE,gBAAI;SACpB,CAAC;QACF,IAAI,EAAE,KAAK;QACX,cAAc,EAAE;YACZ,aAAa,EAAE,6BAAa,CAAC,OAAO;YACpC,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,KAAK;YACR,CAAC,EAAE,KAAK;SACX;QACD,QAAQ,EAAE,aAAa;KAC1B,CAAC;AACN,CAAC;AACD,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACpC,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC1B,MAAM,UAAU,GAAG,KAAK,CAAC;QACzB,MAAM,UAAU,GAAG,MAAM,CAAC;QAC1B,MAAM,eAAe,GAAG,IAAI,iBAAS,CAAC,GAAG,CAAC,CAAC;QAC3C,MAAM,gBAAgB,GAAG,0CAA8B,CAAC;QACxD,MAAM,eAAe,GAAG,IAAI,iBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,yBAAa,GAAG,EAAE,CAAC,GAAG,yBAAa,CAAC,CAAC,CAAC;QAErG,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;YAC3C,QAAQ;YACR,MAAM,qBAAqB,GAAG;gBAC1B,QAAQ,EAAE,iBAAiB;gBAC3B,KAAK,EAAE,SAAS;gBAChB,UAAU;gBACV,UAAU;gBACV,MAAM,EAAE,aAAa;aACxB,CAAC;YAEF,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;gBACnB,MAAM,SAAS,GAAG,IAAI,CAAC;gBACvB,MAAM,gBAAgB,GAAoB;oBACtC,GAAG,qBAAqB;oBACxB,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;oBAC9B,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;iBACjC,CAAC;gBAEF,MAAM,mBAAmB,GAAoB;oBACzC,GAAG,qBAAqB;oBACxB,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;oBAC9B,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;iBAClC,CAAC;gBAEF,MAAM,kBAAkB,GAAoB;oBACxC,GAAG,qBAAqB;oBACxB,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;oBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;iBAClC,CAAC;gBAEF,MAAM,qBAAqB,GAAoB;oBAC3C,GAAG,qBAAqB;oBACxB,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;oBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;iBAClC,CAAC;gBAEF,MAAM,SAAS,GAAoB;oBAC/B,GAAG,qBAAqB;oBACxB,MAAM,EAAE,aAAa;oBACrB,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;oBAC/B,UAAU,EAAE,UAAU;oBACtB,QAAQ,EAAE,iBAAiB;oBAC3B,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;oBAC/B,UAAU,EAAE,UAAU;iBACzB,CAAC;gBAEF,MAAM,kBAAkB,GAAoB;oBACxC,GAAG,qBAAqB;oBACxB,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;oBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;oBAC/B,MAAM,EAAE,eAAe;iBAC1B,CAAC;gBAEF,MAAM,KAAK,GAAG;oBACV;wBACI,IAAI,EAAE,yCAAyC;wBAC/C,MAAM,EAAE,CAAC,gBAAgB,CAAC;wBAC1B,YAAY,EAAE;4BACV,MAAM,EAAE,IAAI;4BACZ,WAAW,EAAE,SAAS;4BACtB,WAAW,EAAE,SAAS;yBACzB;qBACJ;oBACD;wBACI,IAAI,EAAE,gDAAgD;wBACtD,MAAM,EAAE,CAAC,gBAAgB,EAAE,mBAAmB,CAAC;wBAC/C,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,EAAE;4BACf,WAAW,EAAE,GAAG;yBACnB;qBACJ;oBACD;wBACI,IAAI,EAAE,uCAAuC;wBAC7C,MAAM,EAAE,CAAC,mBAAmB,EAAE,qBAAqB,EAAE,kBAAkB,CAAC;wBACxE,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,GAAG;4BAChB,WAAW,EAAE,GAAG;yBACnB;qBACJ;oBACD;wBACI,IAAI,EAAE,0CAA0C;wBAChD,MAAM,EAAE,CAAC,mBAAmB,EAAE,SAAS,CAAC;wBACxC,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,EAAE;4BACf,WAAW,EAAE,GAAG;yBACnB;qBACJ;oBACD;wBACI,IAAI,EAAE,2CAA2C;wBACjD,MAAM,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,CAAC;wBACjD,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,EAAE;4BACf,WAAW,EAAE,GAAG;yBACnB;qBACJ;iBACJ,CAAC;gBAEF,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,EAAE,EAAE;oBAC7C,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE;wBACV,MAAM,SAAS,GAAG,IAAA,qCAAY,EAC1B,MAAM,EACN,SAAS,EACT,UAAU,EACV,UAAU,EACV,eAAe,EACf,gBAAgB,CACnB,CAAC;wBAEF,IAAI,SAAS,KAAK,IAAI,EAAE;4BACpB,IAAA,aAAM,EAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;4BAC5C,OAAO;yBACV;wBAED,IAAA,aAAM,EAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBAC7C,IAAA,aAAM,EAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,WAAW,CAAC,CAAC;wBAC7E,IAAA,aAAM,EAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,WAAW,CAAC,CAAC;oBACjF,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;gBAClB,MAAM,SAAS,GAAG,KAAK,CAAC;gBACxB,MAAM,gBAAgB,GAAoB;oBACtC,GAAG,qBAAqB;oBACxB,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;oBAC9B,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;iBACjC,CAAC;gBAEF,MAAM,mBAAmB,GAAoB;oBACzC,GAAG,qBAAqB;oBACxB,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;oBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;iBAClC,CAAC;gBAEF,MAAM,kBAAkB,GAAoB;oBACxC,GAAG,qBAAqB;oBACxB,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;oBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;iBAClC,CAAC;gBAEF,MAAM,qBAAqB,GAAoB;oBAC3C,GAAG,qBAAqB;oBACxB,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;oBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;iBACjC,CAAC;gBAEF,MAAM,SAAS,GAAoB;oBAC/B,GAAG,qBAAqB;oBACxB,UAAU,EAAE,UAAU;oBACtB,UAAU,EAAE,UAAU;oBACtB,MAAM,EAAE,aAAa;oBACrB,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;oBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;iBACjC,CAAC;gBAEF,MAAM,kBAAkB,GAAG;oBACvB,GAAG,qBAAqB;oBACxB,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;oBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;oBAC9B,MAAM,EAAE,eAAe;iBAC1B,CAAC;gBAEF,MAAM,KAAK,GAAG;oBACV;wBACI,IAAI,EAAE,yCAAyC;wBAC/C,MAAM,EAAE,CAAC,gBAAgB,CAAC;wBAC1B,YAAY,EAAE;4BACV,MAAM,EAAE,IAAI;4BACZ,WAAW,EAAE,SAAS;4BACtB,WAAW,EAAE,SAAS;yBACzB;qBACJ;oBACD;wBACI,IAAI,EAAE,gDAAgD;wBACtD,MAAM,EAAE,CAAC,gBAAgB,EAAE,mBAAmB,CAAC;wBAC/C,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,GAAG;4BAChB,WAAW,EAAE,GAAG;yBACnB;qBACJ;oBACD;wBACI,IAAI,EAAE,uCAAuC;wBAC7C,MAAM,EAAE,CAAC,mBAAmB,EAAE,qBAAqB,EAAE,kBAAkB,CAAC;wBACxE,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,GAAG;4BAChB,WAAW,EAAE,EAAE;yBAClB;qBACJ;oBACD;wBACI,IAAI,EAAE,0CAA0C;wBAChD,MAAM,EAAE,CAAC,mBAAmB,EAAE,SAAS,CAAC;wBACxC,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,GAAG;4BAChB,WAAW,EAAE,GAAG;yBACnB;qBACJ;oBACD;wBACI,IAAI,EAAE,2CAA2C;wBACjD,MAAM,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,CAAC;wBACjD,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,GAAG;4BAChB,WAAW,EAAE,GAAG;yBACnB;qBACJ;iBACJ,CAAC;gBAEF,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,EAAE,EAAE;oBAC7C,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE;wBACV,MAAM,SAAS,GAAG,IAAA,qCAAY,EAC1B,MAAM,EACN,SAAS,EACT,UAAU,EACV,UAAU,EACV,eAAe,EACf,gBAAgB,CACnB,CAAC;wBAEF,IAAI,SAAS,KAAK,IAAI,EAAE;4BACpB,IAAA,aAAM,EAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;4BAC5C,OAAO;yBACV;wBAED,IAAA,aAAM,EAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBAC7C,IAAA,aAAM,EAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,WAAW,CAAC,CAAC;wBAC7E,IAAA,aAAM,EAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,WAAW,CAAC,CAAC;oBACjF,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;YACxB,QAAQ;YACR,MAAM,UAAU,GAAG,eAAe,EAAE,CAAC;YAErC,MAAM,UAAU,GAAG,IAAI,yBAAQ,CAAC;gBAC5B,UAAU;gBACV,UAAU;gBACV,cAAc,EAAE,yBAAQ,CAAC,oBAAoB,CAAC,aAAa,EAAE,gBAAI,EAAE,gBAAI,CAAC;aAC3E,CAAC,CAAC;YAEH,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;gBACnB,MAAM,SAAS,GAAG,IAAI,CAAC;gBACvB,MAAM,gBAAgB,GAAiB;oBACnC,GAAG,UAAU;oBACb,KAAK,EAAE,IAAI,yBAAQ,CAAC;wBAChB,GAAG,UAAU;wBACb,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;wBAC9B,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;qBACjC,CAAC;iBACL,CAAC;gBAEF,MAAM,mBAAmB,GAAiB;oBACtC,GAAG,UAAU;oBACb,KAAK,EAAE,IAAI,yBAAQ,CAAC;wBAChB,GAAG,UAAU;wBACb,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;wBAC9B,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;qBAClC,CAAC;iBACL,CAAC;gBAEF,MAAM,kBAAkB,GAAiB;oBACrC,GAAG,UAAU;oBACb,KAAK,EAAE,IAAI,yBAAQ,CAAC;wBAChB,GAAG,UAAU;wBACb,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;wBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;qBAClC,CAAC;iBACL,CAAC;gBAEF,MAAM,qBAAqB,GAAiB;oBACxC,GAAG,UAAU;oBACb,KAAK,EAAE,IAAI,yBAAQ,CAAC;wBAChB,GAAG,UAAU;wBACb,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;wBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;qBAClC,CAAC;iBACL,CAAC;gBAEF,MAAM,SAAS,GAAiB;oBAC5B,GAAG,UAAU;oBACb,KAAK,EAAE,IAAI,yBAAQ,CAAC;wBAChB,GAAG,UAAU;wBACb,UAAU,EAAE,UAAU;wBACtB,UAAU,EAAE,UAAU;wBACtB,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;wBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;qBAClC,CAAC;iBACL,CAAC;gBAEF,MAAM,kBAAkB,GAAiB;oBACrC,GAAG,UAAU;oBACb,KAAK,EAAE,IAAI,yBAAQ,CAAC;wBAChB,GAAG,UAAU;wBACb,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;wBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;wBAC/B,cAAc,EAAE,yBAAQ,CAAC,oBAAoB,CAAC,eAAe,EAAE,gBAAI,EAAE,gBAAI,CAAC;qBAC7E,CAAC;iBACL,CAAC;gBAEF,mDAAmD;gBACnD,MAAM,kBAAkB,GAAgB,CAAC,IAAI,iBAAS,CAAC,GAAG,CAAC,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC,CAAC,CAAC;gBACjF,MAAM,oBAAoB,GAAgB,CAAC,IAAI,iBAAS,CAAC,GAAG,CAAC,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC,CAAC,CAAC;gBAElF,MAAM,KAAK,GAAG;oBACV;wBACI,IAAI,EAAE,yCAAyC;wBAC/C,IAAI,EAAE;4BACF,MAAM,EAAE,CAAC,gBAAgB,CAAC;yBAC7B;wBACD,YAAY,EAAE;4BACV,MAAM,EAAE,IAAI;4BACZ,WAAW,EAAE,SAAS;4BACtB,WAAW,EAAE,SAAS;yBACzB;qBACJ;oBACD;wBACI,IAAI,EAAE,gDAAgD;wBACtD,IAAI,EAAE;4BACF,MAAM,EAAE,CAAC,gBAAgB,EAAE,mBAAmB,CAAC;yBAClD;wBACD,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,EAAE;4BACf,WAAW,EAAE,GAAG;yBACnB;qBACJ;oBACD;wBACI,IAAI,EAAE,uCAAuC;wBAC7C,IAAI,EAAE;4BACF,MAAM,EAAE,CAAC,mBAAmB,EAAE,qBAAqB,EAAE,kBAAkB,CAAC;yBAC3E;wBACD,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,GAAG;4BAChB,WAAW,EAAE,GAAG;yBACnB;qBACJ;oBACD;wBACI,IAAI,EAAE,0CAA0C;wBAChD,IAAI,EAAE;4BACF,MAAM,EAAE,CAAC,mBAAmB,EAAE,SAAS,CAAC;yBAC3C;wBACD,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,EAAE;4BACf,WAAW,EAAE,GAAG;yBACnB;qBACJ;oBACD;wBACI,IAAI,EAAE,2CAA2C;wBACjD,IAAI,EAAE;4BACF,MAAM,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,CAAC;yBACpD;wBACD,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,EAAE;4BACf,WAAW,EAAE,GAAG;yBACnB;qBACJ;oBACD,mDAAmD;oBACnD;wBACI,IAAI,EAAE,yDAAyD;wBAC/D,IAAI,EAAE;4BACF,MAAM,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,CAAC;4BACjD,mBAAmB,EAAE,kBAAkB;yBAC1C;wBACD,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,GAAG;4BAChB,WAAW,EAAE,GAAG;yBACnB;qBACJ;oBACD;wBACI,IAAI,EAAE,4DAA4D;wBAClE,IAAI,EAAE;4BACF,MAAM,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,CAAC;4BACjD,mBAAmB,EAAE,oBAAoB;yBAC5C;wBACD,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,EAAE;4BACf,WAAW,EAAE,GAAG;yBACnB;qBACJ;iBACJ,CAAC;gBAEF,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,EAAE,EAAE,EAAE;oBAC3C,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE;wBACV,MAAM,SAAS,GAAG,IAAA,qCAAY,EAC1B,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,EACZ,SAAS,EACT,UAAU,EACV,UAAU,EACV,eAAe,EACf,gBAAgB,EAChB,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,mBAAmB,CAC5B,CAAC;wBAEF,IAAI,SAAS,KAAK,IAAI,EAAE;4BACpB,IAAA,aAAM,EAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;4BAC5C,OAAO;yBACV;wBAED,IAAA,aAAM,EAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBAC7C,IAAA,aAAM,EAAC,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,WAAW,CAAC,CAAC;wBACnF,IAAA,aAAM,EAAC,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,WAAW,CAAC,CAAC;oBACvF,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;gBAClB,MAAM,SAAS,GAAG,KAAK,CAAC;gBACxB,MAAM,gBAAgB,GAAiB;oBACnC,GAAG,UAAU;oBACb,KAAK,EAAE,IAAI,yBAAQ,CAAC;wBAChB,GAAG,UAAU;wBACb,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;wBAC9B,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;qBACjC,CAAC;iBACL,CAAC;gBACF,MAAM,mBAAmB,GAAiB;oBACtC,GAAG,UAAU;oBACb,KAAK,EAAE,IAAI,yBAAQ,CAAC;wBAChB,GAAG,UAAU;wBACb,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;wBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;qBAClC,CAAC;iBACL,CAAC;gBAEF,MAAM,kBAAkB,GAAiB;oBACrC,GAAG,UAAU;oBACb,KAAK,EAAE,IAAI,yBAAQ,CAAC;wBAChB,GAAG,UAAU;wBACb,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;wBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;qBAClC,CAAC;iBACL,CAAC;gBAEF,MAAM,qBAAqB,GAAiB;oBACxC,GAAG,UAAU;oBACb,KAAK,EAAE,IAAI,yBAAQ,CAAC;wBAChB,GAAG,UAAU;wBACb,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;wBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;qBACjC,CAAC;iBACL,CAAC;gBAEF,MAAM,SAAS,GAAiB;oBAC5B,GAAG,UAAU;oBACb,KAAK,EAAE,IAAI,yBAAQ,CAAC;wBAChB,GAAG,UAAU;wBACb,UAAU,EAAE,UAAU;wBACtB,UAAU,EAAE,UAAU;wBACtB,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;wBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;qBACjC,CAAC;iBACL,CAAC;gBAEF,MAAM,kBAAkB,GAAiB;oBACrC,GAAG,UAAU;oBACb,KAAK,EAAE,IAAI,yBAAQ,CAAC;wBAChB,GAAG,UAAU;wBACb,WAAW,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC;wBAC/B,WAAW,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC;wBAC9B,cAAc,EAAE,yBAAQ,CAAC,oBAAoB,CAAC,eAAe,EAAE,gBAAI,EAAE,gBAAI,CAAC;qBAC7E,CAAC;iBACL,CAAC;gBAEF,mDAAmD;gBACnD,MAAM,kBAAkB,GAAgB,CAAC,IAAI,iBAAS,CAAC,GAAG,CAAC,EAAE,IAAI,iBAAS,CAAC,GAAG,CAAC,CAAC,CAAC;gBACjF,MAAM,oBAAoB,GAAgB,CAAC,IAAI,iBAAS,CAAC,GAAG,CAAC,EAAE,IAAI,iBAAS,CAAC,EAAE,CAAC,CAAC,CAAC;gBAElF,MAAM,KAAK,GAAG;oBACV;wBACI,IAAI,EAAE,yCAAyC;wBAC/C,IAAI,EAAE;4BACF,MAAM,EAAE,CAAC,gBAAgB,CAAC;yBAC7B;wBACD,YAAY,EAAE;4BACV,MAAM,EAAE,IAAI;4BACZ,WAAW,EAAE,SAAS;4BACtB,WAAW,EAAE,SAAS;yBACzB;qBACJ;oBACD;wBACI,IAAI,EAAE,gDAAgD;wBACtD,IAAI,EAAE;4BACF,MAAM,EAAE,CAAC,gBAAgB,EAAE,mBAAmB,CAAC;yBAClD;wBACD,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,GAAG;4BAChB,WAAW,EAAE,GAAG;yBACnB;qBACJ;oBACD;wBACI,IAAI,EAAE,uCAAuC;wBAC7C,IAAI,EAAE;4BACF,MAAM,EAAE,CAAC,mBAAmB,EAAE,qBAAqB,EAAE,kBAAkB,CAAC;yBAC3E;wBACD,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,GAAG;4BAChB,WAAW,EAAE,EAAE;yBAClB;qBACJ;oBACD;wBACI,IAAI,EAAE,0CAA0C;wBAChD,IAAI,EAAE;4BACF,MAAM,EAAE,CAAC,mBAAmB,EAAE,SAAS,CAAC;yBAC3C;wBACD,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,GAAG;4BAChB,WAAW,EAAE,GAAG;yBACnB;qBACJ;oBACD;wBACI,IAAI,EAAE,2CAA2C;wBACjD,IAAI,EAAE;4BACF,MAAM,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,CAAC;yBACpD;wBACD,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,GAAG;4BAChB,WAAW,EAAE,GAAG;yBACnB;qBACJ;oBACD,mDAAmD;oBACnD;wBACI,IAAI,EAAE,yDAAyD;wBAC/D,IAAI,EAAE;4BACF,MAAM,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,CAAC;4BACjD,mBAAmB,EAAE,kBAAkB;yBAC1C;wBACD,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,GAAG;4BAChB,WAAW,EAAE,GAAG;yBACnB;qBACJ;oBACD;wBACI,IAAI,EAAE,4DAA4D;wBAClE,IAAI,EAAE;4BACF,MAAM,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,CAAC;4BACjD,mBAAmB,EAAE,oBAAoB;yBAC5C;wBACD,YAAY,EAAE;4BACV,MAAM,EAAE,KAAK;4BACb,WAAW,EAAE,GAAG;4BAChB,WAAW,EAAE,GAAG;yBACnB;qBACJ;iBACJ,CAAC;gBAEF,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,EAAE,EAAE,EAAE;oBAC3C,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE;wBACV,MAAM,SAAS,GAAG,IAAA,qCAAY,EAC1B,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,EACZ,SAAS,EACT,UAAU,EACV,UAAU,EACV,eAAe,EACf,gBAAgB,EAChB,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,mBAAmB,CAC5B,CAAC;wBAEF,IAAI,SAAS,KAAK,IAAI,EAAE;4BACpB,IAAA,aAAM,EAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;4BAC5C,OAAO;yBACV;wBAED,IAAA,aAAM,EAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBAC7C,IAAA,aAAM,EAAC,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,WAAW,CAAC,CAAC;wBACnF,IAAA,aAAM,EAAC,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,WAAW,CAAC,CAAC;oBACvF,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/quote_comparison_utils_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\r\n// tslint:disable:no-empty\r\n// tslint:disable:max-file-line-count\r\n\r\nimport { SignatureType } from '@0x/asset-swapper';\r\nimport { ONE_SECOND_MS } from '@0x/asset-swapper/lib/src/utils/market_operation_utils/constants';\r\nimport { OtcOrder } from '@0x/protocol-utils';\r\nimport { BigNumber } from '@0x/utils';\r\nimport { expect } from 'chai';\r\n\r\nimport { DEFAULT_MIN_EXPIRY_DURATION_MS, ZERO } from '../../src/core/constants';\r\nimport { FirmOtcQuote, IndicativeQuote } from '../../src/core/types';\r\nimport { getBestQuote } from '../../src/utils/quote_comparison_utils';\r\n\r\n// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n// eslint-disable-next-line @typescript-eslint/no-loss-of-precision\r\nconst NEVER_EXPIRES = new BigNumber(9999999999999999);\r\n\r\nfunction createBaseQuote(): FirmOtcQuote {\r\n    return {\r\n        order: new OtcOrder({\r\n            makerAmount: ZERO,\r\n            takerAmount: ZERO,\r\n        }),\r\n        kind: 'otc',\r\n        makerSignature: {\r\n            signatureType: SignatureType.Invalid,\r\n            v: 0,\r\n            r: '0x1',\r\n            s: '0x2',\r\n        },\r\n        makerUri: 'someuri.xyz',\r\n    };\r\n}\r\ndescribe('Quote Comparison Utils', () => {\r\n    describe('getBestQuote', () => {\r\n        const makerToken = 'DAI';\r\n        const takerToken = 'SUSD';\r\n        const assetFillAmount = new BigNumber(100);\r\n        const validityWindowMs = DEFAULT_MIN_EXPIRY_DURATION_MS;\r\n        const inThirtySeconds = new BigNumber(Math.round((Date.now() + ONE_SECOND_MS * 30) / ONE_SECOND_MS));\r\n\r\n        describe('IndicativeQuotes when selling', () => {\r\n            // Given\r\n            const BASE_INDICATIVE_QUOTE = {\r\n                makerUri: 'http://makeruri',\r\n                maker: '0xmaker',\r\n                makerToken,\r\n                takerToken,\r\n                expiry: NEVER_EXPIRES,\r\n            };\r\n\r\n            describe('sells', () => {\r\n                const isSelling = true;\r\n                const partialFillQuote: IndicativeQuote = {\r\n                    ...BASE_INDICATIVE_QUOTE,\r\n                    makerAmount: new BigNumber(55),\r\n                    takerAmount: new BigNumber(50),\r\n                };\r\n\r\n                const fullQuoteBadPricing: IndicativeQuote = {\r\n                    ...BASE_INDICATIVE_QUOTE,\r\n                    makerAmount: new BigNumber(99),\r\n                    takerAmount: new BigNumber(100),\r\n                };\r\n\r\n                const fullQuoteOkPricing: IndicativeQuote = {\r\n                    ...BASE_INDICATIVE_QUOTE,\r\n                    makerAmount: new BigNumber(105),\r\n                    takerAmount: new BigNumber(100),\r\n                };\r\n\r\n                const fullQuoteGreatPricing: IndicativeQuote = {\r\n                    ...BASE_INDICATIVE_QUOTE,\r\n                    makerAmount: new BigNumber(125),\r\n                    takerAmount: new BigNumber(100),\r\n                };\r\n\r\n                const wrongPair: IndicativeQuote = {\r\n                    ...BASE_INDICATIVE_QUOTE,\r\n                    expiry: NEVER_EXPIRES,\r\n                    makerAmount: new BigNumber(125),\r\n                    makerToken: takerToken,\r\n                    makerUri: 'http://makeruri',\r\n                    takerAmount: new BigNumber(100),\r\n                    takerToken: makerToken,\r\n                };\r\n\r\n                const expiresInOneMinute: IndicativeQuote = {\r\n                    ...BASE_INDICATIVE_QUOTE,\r\n                    makerAmount: new BigNumber(125),\r\n                    takerAmount: new BigNumber(100),\r\n                    expiry: inThirtySeconds,\r\n                };\r\n\r\n                const tests = [\r\n                    {\r\n                        name: 'should return null when no quotes valid',\r\n                        quotes: [partialFillQuote],\r\n                        expectations: {\r\n                            isNull: true,\r\n                            makerAmount: undefined,\r\n                            takerAmount: undefined,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should only select quotes that are 100% filled',\r\n                        quotes: [partialFillQuote, fullQuoteBadPricing],\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 99,\r\n                            takerAmount: 100,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should select quote with best pricing',\r\n                        quotes: [fullQuoteBadPricing, fullQuoteGreatPricing, fullQuoteOkPricing],\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 125,\r\n                            takerAmount: 100,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should ignore quotes with the wrong pair',\r\n                        quotes: [fullQuoteBadPricing, wrongPair],\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 99,\r\n                            takerAmount: 100,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should ignore quotes that expire too soon',\r\n                        quotes: [fullQuoteBadPricing, expiresInOneMinute],\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 99,\r\n                            takerAmount: 100,\r\n                        },\r\n                    },\r\n                ];\r\n\r\n                tests.forEach(({ name, quotes, expectations }) => {\r\n                    it(name, () => {\r\n                        const bestQuote = getBestQuote<IndicativeQuote>(\r\n                            quotes,\r\n                            isSelling,\r\n                            takerToken,\r\n                            makerToken,\r\n                            assetFillAmount,\r\n                            validityWindowMs,\r\n                        );\r\n\r\n                        if (bestQuote === null) {\r\n                            expect(expectations?.isNull).to.equal(true);\r\n                            return;\r\n                        }\r\n\r\n                        expect(expectations?.isNull).to.equal(false);\r\n                        expect(bestQuote.makerAmount.toNumber()).to.be.eq(expectations?.makerAmount);\r\n                        expect(bestQuote.takerAmount.toNumber()).to.be.eq(expectations?.takerAmount);\r\n                    });\r\n                });\r\n            });\r\n\r\n            describe('buys', () => {\r\n                const isSelling = false;\r\n                const partialFillQuote: IndicativeQuote = {\r\n                    ...BASE_INDICATIVE_QUOTE,\r\n                    makerAmount: new BigNumber(55),\r\n                    takerAmount: new BigNumber(50),\r\n                };\r\n\r\n                const fullQuoteBadPricing: IndicativeQuote = {\r\n                    ...BASE_INDICATIVE_QUOTE,\r\n                    makerAmount: new BigNumber(100),\r\n                    takerAmount: new BigNumber(125),\r\n                };\r\n\r\n                const fullQuoteOkPricing: IndicativeQuote = {\r\n                    ...BASE_INDICATIVE_QUOTE,\r\n                    makerAmount: new BigNumber(100),\r\n                    takerAmount: new BigNumber(120),\r\n                };\r\n\r\n                const fullQuoteGreatPricing: IndicativeQuote = {\r\n                    ...BASE_INDICATIVE_QUOTE,\r\n                    makerAmount: new BigNumber(100),\r\n                    takerAmount: new BigNumber(80),\r\n                };\r\n\r\n                const wrongPair: IndicativeQuote = {\r\n                    ...BASE_INDICATIVE_QUOTE,\r\n                    makerToken: takerToken,\r\n                    takerToken: makerToken,\r\n                    expiry: NEVER_EXPIRES,\r\n                    makerAmount: new BigNumber(100),\r\n                    takerAmount: new BigNumber(80),\r\n                };\r\n\r\n                const expiresInOneMinute = {\r\n                    ...BASE_INDICATIVE_QUOTE,\r\n                    makerAmount: new BigNumber(100),\r\n                    takerAmount: new BigNumber(80),\r\n                    expiry: inThirtySeconds,\r\n                };\r\n\r\n                const tests = [\r\n                    {\r\n                        name: 'should return null when no quotes valid',\r\n                        quotes: [partialFillQuote],\r\n                        expectations: {\r\n                            isNull: true,\r\n                            makerAmount: undefined,\r\n                            takerAmount: undefined,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should only select quotes that are 100% filled',\r\n                        quotes: [partialFillQuote, fullQuoteBadPricing],\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 100,\r\n                            takerAmount: 125,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should select quote with best pricing',\r\n                        quotes: [fullQuoteBadPricing, fullQuoteGreatPricing, fullQuoteOkPricing],\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 100,\r\n                            takerAmount: 80,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should ignore quotes with the wrong pair',\r\n                        quotes: [fullQuoteBadPricing, wrongPair],\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 100,\r\n                            takerAmount: 125,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should ignore quotes that expire too soon',\r\n                        quotes: [fullQuoteBadPricing, expiresInOneMinute],\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 100,\r\n                            takerAmount: 125,\r\n                        },\r\n                    },\r\n                ];\r\n\r\n                tests.forEach(({ name, quotes, expectations }) => {\r\n                    it(name, () => {\r\n                        const bestQuote = getBestQuote<IndicativeQuote>(\r\n                            quotes,\r\n                            isSelling,\r\n                            takerToken,\r\n                            makerToken,\r\n                            assetFillAmount,\r\n                            validityWindowMs,\r\n                        );\r\n\r\n                        if (bestQuote === null) {\r\n                            expect(expectations?.isNull).to.equal(true);\r\n                            return;\r\n                        }\r\n\r\n                        expect(expectations?.isNull).to.equal(false);\r\n                        expect(bestQuote.makerAmount.toNumber()).to.be.eq(expectations?.makerAmount);\r\n                        expect(bestQuote.takerAmount.toNumber()).to.be.eq(expectations?.takerAmount);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n\r\n        describe('FirmQuotes', () => {\r\n            // Given\r\n            const BASE_QUOTE = createBaseQuote();\r\n\r\n            const BASE_ORDER = new OtcOrder({\r\n                makerToken,\r\n                takerToken,\r\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(NEVER_EXPIRES, ZERO, ZERO),\r\n            });\r\n\r\n            describe('sells', () => {\r\n                const isSelling = true;\r\n                const partialFillQuote: FirmOtcQuote = {\r\n                    ...BASE_QUOTE,\r\n                    order: new OtcOrder({\r\n                        ...BASE_ORDER,\r\n                        makerAmount: new BigNumber(55),\r\n                        takerAmount: new BigNumber(50),\r\n                    }),\r\n                };\r\n\r\n                const fullQuoteBadPricing: FirmOtcQuote = {\r\n                    ...BASE_QUOTE,\r\n                    order: new OtcOrder({\r\n                        ...BASE_ORDER,\r\n                        makerAmount: new BigNumber(99),\r\n                        takerAmount: new BigNumber(100),\r\n                    }),\r\n                };\r\n\r\n                const fullQuoteOkPricing: FirmOtcQuote = {\r\n                    ...BASE_QUOTE,\r\n                    order: new OtcOrder({\r\n                        ...BASE_ORDER,\r\n                        makerAmount: new BigNumber(105),\r\n                        takerAmount: new BigNumber(100),\r\n                    }),\r\n                };\r\n\r\n                const fullQuoteGreatPricing: FirmOtcQuote = {\r\n                    ...BASE_QUOTE,\r\n                    order: new OtcOrder({\r\n                        ...BASE_ORDER,\r\n                        makerAmount: new BigNumber(125),\r\n                        takerAmount: new BigNumber(100),\r\n                    }),\r\n                };\r\n\r\n                const wrongPair: FirmOtcQuote = {\r\n                    ...BASE_QUOTE,\r\n                    order: new OtcOrder({\r\n                        ...BASE_ORDER,\r\n                        makerToken: takerToken,\r\n                        takerToken: makerToken,\r\n                        makerAmount: new BigNumber(125),\r\n                        takerAmount: new BigNumber(100),\r\n                    }),\r\n                };\r\n\r\n                const expiresInOneMinute: FirmOtcQuote = {\r\n                    ...BASE_QUOTE,\r\n                    order: new OtcOrder({\r\n                        ...BASE_ORDER,\r\n                        makerAmount: new BigNumber(125),\r\n                        takerAmount: new BigNumber(100),\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(inThirtySeconds, ZERO, ZERO),\r\n                    }),\r\n                };\r\n\r\n                // TODO (MKR-671): uncomment once filter is enabled\r\n                const validMakerBalances: BigNumber[] = [new BigNumber(150), new BigNumber(150)];\r\n                const invalidMakerBalances: BigNumber[] = [new BigNumber(150), new BigNumber(50)];\r\n\r\n                const tests = [\r\n                    {\r\n                        name: 'should return null when no quotes valid',\r\n                        args: {\r\n                            quotes: [partialFillQuote],\r\n                        },\r\n                        expectations: {\r\n                            isNull: true,\r\n                            makerAmount: undefined,\r\n                            takerAmount: undefined,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should only select quotes that are 100% filled',\r\n                        args: {\r\n                            quotes: [partialFillQuote, fullQuoteBadPricing],\r\n                        },\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 99,\r\n                            takerAmount: 100,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should select quote with best pricing',\r\n                        args: {\r\n                            quotes: [fullQuoteBadPricing, fullQuoteGreatPricing, fullQuoteOkPricing],\r\n                        },\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 125,\r\n                            takerAmount: 100,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should ignore quotes with the wrong pair',\r\n                        args: {\r\n                            quotes: [fullQuoteBadPricing, wrongPair],\r\n                        },\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 99,\r\n                            takerAmount: 100,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should ignore quotes that expire too soon',\r\n                        args: {\r\n                            quotes: [fullQuoteBadPricing, expiresInOneMinute],\r\n                        },\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 99,\r\n                            takerAmount: 100,\r\n                        },\r\n                    },\r\n                    // TODO (MKR-671): uncomment once filter is enabled\r\n                    {\r\n                        name: 'should not ignore quotes if makers have enough balances',\r\n                        args: {\r\n                            quotes: [fullQuoteBadPricing, fullQuoteOkPricing],\r\n                            quotedMakerBalances: validMakerBalances,\r\n                        },\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 105,\r\n                            takerAmount: 100,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should ignore quotes if makers do not have enough balances',\r\n                        args: {\r\n                            quotes: [fullQuoteBadPricing, fullQuoteOkPricing],\r\n                            quotedMakerBalances: invalidMakerBalances,\r\n                        },\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 99,\r\n                            takerAmount: 100,\r\n                        },\r\n                    },\r\n                ];\r\n\r\n                tests.forEach(({ name, args, expectations }) => {\r\n                    it(name, () => {\r\n                        const bestQuote = getBestQuote(\r\n                            args?.quotes,\r\n                            isSelling,\r\n                            takerToken,\r\n                            makerToken,\r\n                            assetFillAmount,\r\n                            validityWindowMs,\r\n                            args?.quotedMakerBalances,\r\n                        );\r\n\r\n                        if (bestQuote === null) {\r\n                            expect(expectations?.isNull).to.equal(true);\r\n                            return;\r\n                        }\r\n\r\n                        expect(expectations?.isNull).to.equal(false);\r\n                        expect(bestQuote.order.makerAmount.toNumber()).to.be.eq(expectations?.makerAmount);\r\n                        expect(bestQuote.order.takerAmount.toNumber()).to.be.eq(expectations?.takerAmount);\r\n                    });\r\n                });\r\n            });\r\n\r\n            describe('buys', () => {\r\n                const isSelling = false;\r\n                const partialFillQuote: FirmOtcQuote = {\r\n                    ...BASE_QUOTE,\r\n                    order: new OtcOrder({\r\n                        ...BASE_ORDER,\r\n                        makerAmount: new BigNumber(55),\r\n                        takerAmount: new BigNumber(50),\r\n                    }),\r\n                };\r\n                const fullQuoteBadPricing: FirmOtcQuote = {\r\n                    ...BASE_QUOTE,\r\n                    order: new OtcOrder({\r\n                        ...BASE_ORDER,\r\n                        makerAmount: new BigNumber(100),\r\n                        takerAmount: new BigNumber(125),\r\n                    }),\r\n                };\r\n\r\n                const fullQuoteOkPricing: FirmOtcQuote = {\r\n                    ...BASE_QUOTE,\r\n                    order: new OtcOrder({\r\n                        ...BASE_ORDER,\r\n                        makerAmount: new BigNumber(100),\r\n                        takerAmount: new BigNumber(120),\r\n                    }),\r\n                };\r\n\r\n                const fullQuoteGreatPricing: FirmOtcQuote = {\r\n                    ...BASE_QUOTE,\r\n                    order: new OtcOrder({\r\n                        ...BASE_ORDER,\r\n                        makerAmount: new BigNumber(100),\r\n                        takerAmount: new BigNumber(80),\r\n                    }),\r\n                };\r\n\r\n                const wrongPair: FirmOtcQuote = {\r\n                    ...BASE_QUOTE,\r\n                    order: new OtcOrder({\r\n                        ...BASE_ORDER,\r\n                        makerToken: takerToken,\r\n                        takerToken: makerToken,\r\n                        makerAmount: new BigNumber(100),\r\n                        takerAmount: new BigNumber(80),\r\n                    }),\r\n                };\r\n\r\n                const expiresInOneMinute: FirmOtcQuote = {\r\n                    ...BASE_QUOTE,\r\n                    order: new OtcOrder({\r\n                        ...BASE_ORDER,\r\n                        makerAmount: new BigNumber(100),\r\n                        takerAmount: new BigNumber(80),\r\n                        expiryAndNonce: OtcOrder.encodeExpiryAndNonce(inThirtySeconds, ZERO, ZERO),\r\n                    }),\r\n                };\r\n\r\n                // TODO (MKR-671): uncomment once filter is enabled\r\n                const validMakerBalances: BigNumber[] = [new BigNumber(150), new BigNumber(150)];\r\n                const invalidMakerBalances: BigNumber[] = [new BigNumber(150), new BigNumber(50)];\r\n\r\n                const tests = [\r\n                    {\r\n                        name: 'should return null when no quotes valid',\r\n                        args: {\r\n                            quotes: [partialFillQuote],\r\n                        },\r\n                        expectations: {\r\n                            isNull: true,\r\n                            makerAmount: undefined,\r\n                            takerAmount: undefined,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should only select quotes that are 100% filled',\r\n                        args: {\r\n                            quotes: [partialFillQuote, fullQuoteBadPricing],\r\n                        },\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 100,\r\n                            takerAmount: 125,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should select quote with best pricing',\r\n                        args: {\r\n                            quotes: [fullQuoteBadPricing, fullQuoteGreatPricing, fullQuoteOkPricing],\r\n                        },\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 100,\r\n                            takerAmount: 80,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should ignore quotes with the wrong pair',\r\n                        args: {\r\n                            quotes: [fullQuoteBadPricing, wrongPair],\r\n                        },\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 100,\r\n                            takerAmount: 125,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should ignore quotes that expire too soon',\r\n                        args: {\r\n                            quotes: [fullQuoteBadPricing, expiresInOneMinute],\r\n                        },\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 100,\r\n                            takerAmount: 125,\r\n                        },\r\n                    },\r\n                    // TODO (MKR-671): uncomment once filter is enabled\r\n                    {\r\n                        name: 'should not ignore quotes if makers have enough balances',\r\n                        args: {\r\n                            quotes: [fullQuoteBadPricing, fullQuoteOkPricing],\r\n                            quotedMakerBalances: validMakerBalances,\r\n                        },\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 100,\r\n                            takerAmount: 120,\r\n                        },\r\n                    },\r\n                    {\r\n                        name: 'should ignore quotes if makers do not have enough balances',\r\n                        args: {\r\n                            quotes: [fullQuoteBadPricing, fullQuoteOkPricing],\r\n                            quotedMakerBalances: invalidMakerBalances,\r\n                        },\r\n                        expectations: {\r\n                            isNull: false,\r\n                            makerAmount: 100,\r\n                            takerAmount: 125,\r\n                        },\r\n                    },\r\n                ];\r\n\r\n                tests.forEach(({ name, args, expectations }) => {\r\n                    it(name, () => {\r\n                        const bestQuote = getBestQuote(\r\n                            args?.quotes,\r\n                            isSelling,\r\n                            takerToken,\r\n                            makerToken,\r\n                            assetFillAmount,\r\n                            validityWindowMs,\r\n                            args?.quotedMakerBalances,\r\n                        );\r\n\r\n                        if (bestQuote === null) {\r\n                            expect(expectations?.isNull).to.equal(true);\r\n                            return;\r\n                        }\r\n\r\n                        expect(expectations?.isNull).to.equal(false);\r\n                        expect(bestQuote.order.makerAmount.toNumber()).to.be.eq(expectations?.makerAmount);\r\n                        expect(bestQuote.order.takerAmount.toNumber()).to.be.eq(expectations?.takerAmount);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n});\r\n"],"version":3}