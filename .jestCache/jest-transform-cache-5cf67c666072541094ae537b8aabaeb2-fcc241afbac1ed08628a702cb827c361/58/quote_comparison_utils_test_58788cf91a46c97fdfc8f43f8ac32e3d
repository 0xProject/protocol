1e2f0f92dbf6da810e90dcea6904a537
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:custom-no-magic-numbers
// tslint:disable:no-empty
// tslint:disable:max-file-line-count
const asset_swapper_1 = require("@0x/asset-swapper");
const constants_1 = require("@0x/asset-swapper/lib/src/utils/market_operation_utils/constants");
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const chai_1 = require("chai");
const constants_2 = require("../../src/core/constants");
const quote_comparison_utils_1 = require("../../src/utils/quote_comparison_utils");
// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
// eslint-disable-next-line @typescript-eslint/no-loss-of-precision
const NEVER_EXPIRES = new utils_1.BigNumber(9999999999999999);
function createBaseQuote() {
    return {
        order: new protocol_utils_1.OtcOrder({
            makerAmount: constants_2.ZERO,
            takerAmount: constants_2.ZERO,
        }),
        kind: 'otc',
        makerSignature: {
            signatureType: asset_swapper_1.SignatureType.Invalid,
            v: 0,
            r: '0x1',
            s: '0x2',
        },
        makerUri: 'someuri.xyz',
    };
}
describe('Quote Comparison Utils', () => {
    describe('getBestQuote', () => {
        const makerToken = 'DAI';
        const takerToken = 'SUSD';
        const assetFillAmount = new utils_1.BigNumber(100);
        const validityWindowMs = constants_2.DEFAULT_MIN_EXPIRY_DURATION_MS;
        const inThirtySeconds = new utils_1.BigNumber(Math.round((Date.now() + constants_1.ONE_SECOND_MS * 30) / constants_1.ONE_SECOND_MS));
        describe('IndicativeQuotes when selling', () => {
            // Given
            const BASE_INDICATIVE_QUOTE = {
                makerUri: 'http://makeruri',
                maker: '0xmaker',
                makerToken,
                takerToken,
                expiry: NEVER_EXPIRES,
            };
            describe('sells', () => {
                const isSelling = true;
                const partialFillQuote = {
                    ...BASE_INDICATIVE_QUOTE,
                    makerAmount: new utils_1.BigNumber(55),
                    takerAmount: new utils_1.BigNumber(50),
                };
                const fullQuoteBadPricing = {
                    ...BASE_INDICATIVE_QUOTE,
                    makerAmount: new utils_1.BigNumber(99),
                    takerAmount: new utils_1.BigNumber(100),
                };
                const fullQuoteOkPricing = {
                    ...BASE_INDICATIVE_QUOTE,
                    makerAmount: new utils_1.BigNumber(105),
                    takerAmount: new utils_1.BigNumber(100),
                };
                const fullQuoteGreatPricing = {
                    ...BASE_INDICATIVE_QUOTE,
                    makerAmount: new utils_1.BigNumber(125),
                    takerAmount: new utils_1.BigNumber(100),
                };
                const wrongPair = {
                    ...BASE_INDICATIVE_QUOTE,
                    expiry: NEVER_EXPIRES,
                    makerAmount: new utils_1.BigNumber(125),
                    makerToken: takerToken,
                    makerUri: 'http://makeruri',
                    takerAmount: new utils_1.BigNumber(100),
                    takerToken: makerToken,
                };
                const expiresInOneMinute = {
                    ...BASE_INDICATIVE_QUOTE,
                    makerAmount: new utils_1.BigNumber(125),
                    takerAmount: new utils_1.BigNumber(100),
                    expiry: inThirtySeconds,
                };
                const tests = [
                    {
                        name: 'should return null when no quotes valid',
                        quotes: [partialFillQuote],
                        expectations: {
                            isNull: true,
                            makerAmount: undefined,
                            takerAmount: undefined,
                        },
                    },
                    {
                        name: 'should only select quotes that are 100% filled',
                        quotes: [partialFillQuote, fullQuoteBadPricing],
                        expectations: {
                            isNull: false,
                            makerAmount: 99,
                            takerAmount: 100,
                        },
                    },
                    {
                        name: 'should select quote with best pricing',
                        quotes: [fullQuoteBadPricing, fullQuoteGreatPricing, fullQuoteOkPricing],
                        expectations: {
                            isNull: false,
                            makerAmount: 125,
                            takerAmount: 100,
                        },
                    },
                    {
                        name: 'should ignore quotes with the wrong pair',
                        quotes: [fullQuoteBadPricing, wrongPair],
                        expectations: {
                            isNull: false,
                            makerAmount: 99,
                            takerAmount: 100,
                        },
                    },
                    {
                        name: 'should ignore quotes that expire too soon',
                        quotes: [fullQuoteBadPricing, expiresInOneMinute],
                        expectations: {
                            isNull: false,
                            makerAmount: 99,
                            takerAmount: 100,
                        },
                    },
                ];
                tests.forEach(({ name, quotes, expectations }) => {
                    it(name, () => {
                        const bestQuote = (0, quote_comparison_utils_1.getBestQuote)(quotes, isSelling, takerToken, makerToken, assetFillAmount, validityWindowMs);
                        if (bestQuote === null) {
                            (0, chai_1.expect)(expectations === null || expectations === void 0 ? void 0 : expectations.isNull).to.equal(true);
                            return;
                        }
                        (0, chai_1.expect)(expectations === null || expectations === void 0 ? void 0 : expectations.isNull).to.equal(false);
                        (0, chai_1.expect)(bestQuote.makerAmount.toNumber()).to.be.eq(expectations === null || expectations === void 0 ? void 0 : expectations.makerAmount);
                        (0, chai_1.expect)(bestQuote.takerAmount.toNumber()).to.be.eq(expectations === null || expectations === void 0 ? void 0 : expectations.takerAmount);
                    });
                });
            });
            describe('buys', () => {
                const isSelling = false;
                const partialFillQuote = {
                    ...BASE_INDICATIVE_QUOTE,
                    makerAmount: new utils_1.BigNumber(55),
                    takerAmount: new utils_1.BigNumber(50),
                };
                const fullQuoteBadPricing = {
                    ...BASE_INDICATIVE_QUOTE,
                    makerAmount: new utils_1.BigNumber(100),
                    takerAmount: new utils_1.BigNumber(125),
                };
                const fullQuoteOkPricing = {
                    ...BASE_INDICATIVE_QUOTE,
                    makerAmount: new utils_1.BigNumber(100),
                    takerAmount: new utils_1.BigNumber(120),
                };
                const fullQuoteGreatPricing = {
                    ...BASE_INDICATIVE_QUOTE,
                    makerAmount: new utils_1.BigNumber(100),
                    takerAmount: new utils_1.BigNumber(80),
                };
                const wrongPair = {
                    ...BASE_INDICATIVE_QUOTE,
                    makerToken: takerToken,
                    takerToken: makerToken,
                    expiry: NEVER_EXPIRES,
                    makerAmount: new utils_1.BigNumber(100),
                    takerAmount: new utils_1.BigNumber(80),
                };
                const expiresInOneMinute = {
                    ...BASE_INDICATIVE_QUOTE,
                    makerAmount: new utils_1.BigNumber(100),
                    takerAmount: new utils_1.BigNumber(80),
                    expiry: inThirtySeconds,
                };
                const tests = [
                    {
                        name: 'should return null when no quotes valid',
                        quotes: [partialFillQuote],
                        expectations: {
                            isNull: true,
                            makerAmount: undefined,
                            takerAmount: undefined,
                        },
                    },
                    {
                        name: 'should only select quotes that are 100% filled',
                        quotes: [partialFillQuote, fullQuoteBadPricing],
                        expectations: {
                            isNull: false,
                            makerAmount: 100,
                            takerAmount: 125,
                        },
                    },
                    {
                        name: 'should select quote with best pricing',
                        quotes: [fullQuoteBadPricing, fullQuoteGreatPricing, fullQuoteOkPricing],
                        expectations: {
                            isNull: false,
                            makerAmount: 100,
                            takerAmount: 80,
                        },
                    },
                    {
                        name: 'should ignore quotes with the wrong pair',
                        quotes: [fullQuoteBadPricing, wrongPair],
                        expectations: {
                            isNull: false,
                            makerAmount: 100,
                            takerAmount: 125,
                        },
                    },
                    {
                        name: 'should ignore quotes that expire too soon',
                        quotes: [fullQuoteBadPricing, expiresInOneMinute],
                        expectations: {
                            isNull: false,
                            makerAmount: 100,
                            takerAmount: 125,
                        },
                    },
                ];
                tests.forEach(({ name, quotes, expectations }) => {
                    it(name, () => {
                        const bestQuote = (0, quote_comparison_utils_1.getBestQuote)(quotes, isSelling, takerToken, makerToken, assetFillAmount, validityWindowMs);
                        if (bestQuote === null) {
                            (0, chai_1.expect)(expectations === null || expectations === void 0 ? void 0 : expectations.isNull).to.equal(true);
                            return;
                        }
                        (0, chai_1.expect)(expectations === null || expectations === void 0 ? void 0 : expectations.isNull).to.equal(false);
                        (0, chai_1.expect)(bestQuote.makerAmount.toNumber()).to.be.eq(expectations === null || expectations === void 0 ? void 0 : expectations.makerAmount);
                        (0, chai_1.expect)(bestQuote.takerAmount.toNumber()).to.be.eq(expectations === null || expectations === void 0 ? void 0 : expectations.takerAmount);
                    });
                });
            });
        });
        describe('FirmQuotes', () => {
            // Given
            const BASE_QUOTE = createBaseQuote();
            const BASE_ORDER = new protocol_utils_1.OtcOrder({
                makerToken,
                takerToken,
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(NEVER_EXPIRES, constants_2.ZERO, constants_2.ZERO),
            });
            describe('sells', () => {
                const isSelling = true;
                const partialFillQuote = {
                    ...BASE_QUOTE,
                    order: new protocol_utils_1.OtcOrder({
                        ...BASE_ORDER,
                        makerAmount: new utils_1.BigNumber(55),
                        takerAmount: new utils_1.BigNumber(50),
                    }),
                };
                const fullQuoteBadPricing = {
                    ...BASE_QUOTE,
                    order: new protocol_utils_1.OtcOrder({
                        ...BASE_ORDER,
                        makerAmount: new utils_1.BigNumber(99),
                        takerAmount: new utils_1.BigNumber(100),
                    }),
                };
                const fullQuoteOkPricing = {
                    ...BASE_QUOTE,
                    order: new protocol_utils_1.OtcOrder({
                        ...BASE_ORDER,
                        makerAmount: new utils_1.BigNumber(105),
                        takerAmount: new utils_1.BigNumber(100),
                    }),
                };
                const fullQuoteGreatPricing = {
                    ...BASE_QUOTE,
                    order: new protocol_utils_1.OtcOrder({
                        ...BASE_ORDER,
                        makerAmount: new utils_1.BigNumber(125),
                        takerAmount: new utils_1.BigNumber(100),
                    }),
                };
                const wrongPair = {
                    ...BASE_QUOTE,
                    order: new protocol_utils_1.OtcOrder({
                        ...BASE_ORDER,
                        makerToken: takerToken,
                        takerToken: makerToken,
                        makerAmount: new utils_1.BigNumber(125),
                        takerAmount: new utils_1.BigNumber(100),
                    }),
                };
                const expiresInOneMinute = {
                    ...BASE_QUOTE,
                    order: new protocol_utils_1.OtcOrder({
                        ...BASE_ORDER,
                        makerAmount: new utils_1.BigNumber(125),
                        takerAmount: new utils_1.BigNumber(100),
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(inThirtySeconds, constants_2.ZERO, constants_2.ZERO),
                    }),
                };
                // TODO (MKR-671): uncomment once filter is enabled
                const validMakerBalances = [new utils_1.BigNumber(150), new utils_1.BigNumber(150)];
                const invalidMakerBalances = [new utils_1.BigNumber(150), new utils_1.BigNumber(50)];
                const tests = [
                    {
                        name: 'should return null when no quotes valid',
                        args: {
                            quotes: [partialFillQuote],
                        },
                        expectations: {
                            isNull: true,
                            makerAmount: undefined,
                            takerAmount: undefined,
                        },
                    },
                    {
                        name: 'should only select quotes that are 100% filled',
                        args: {
                            quotes: [partialFillQuote, fullQuoteBadPricing],
                        },
                        expectations: {
                            isNull: false,
                            makerAmount: 99,
                            takerAmount: 100,
                        },
                    },
                    {
                        name: 'should select quote with best pricing',
                        args: {
                            quotes: [fullQuoteBadPricing, fullQuoteGreatPricing, fullQuoteOkPricing],
                        },
                        expectations: {
                            isNull: false,
                            makerAmount: 125,
                            takerAmount: 100,
                        },
                    },
                    {
                        name: 'should ignore quotes with the wrong pair',
                        args: {
                            quotes: [fullQuoteBadPricing, wrongPair],
                        },
                        expectations: {
                            isNull: false,
                            makerAmount: 99,
                            takerAmount: 100,
                        },
                    },
                    {
                        name: 'should ignore quotes that expire too soon',
                        args: {
                            quotes: [fullQuoteBadPricing, expiresInOneMinute],
                        },
                        expectations: {
                            isNull: false,
                            makerAmount: 99,
                            takerAmount: 100,
                        },
                    },
                    // TODO (MKR-671): uncomment once filter is enabled
                    {
                        name: 'should not ignore quotes if makers have enough balances',
                        args: {
                            quotes: [fullQuoteBadPricing, fullQuoteOkPricing],
                            quotedMakerBalances: validMakerBalances,
                        },
                        expectations: {
                            isNull: false,
                            makerAmount: 105,
                            takerAmount: 100,
                        },
                    },
                    {
                        name: 'should ignore quotes if makers do not have enough balances',
                        args: {
                            quotes: [fullQuoteBadPricing, fullQuoteOkPricing],
                            quotedMakerBalances: invalidMakerBalances,
                        },
                        expectations: {
                            isNull: false,
                            makerAmount: 99,
                            takerAmount: 100,
                        },
                    },
                ];
                tests.forEach(({ name, args, expectations }) => {
                    it(name, () => {
                        const bestQuote = (0, quote_comparison_utils_1.getBestQuote)(args === null || args === void 0 ? void 0 : args.quotes, isSelling, takerToken, makerToken, assetFillAmount, validityWindowMs, args === null || args === void 0 ? void 0 : args.quotedMakerBalances);
                        if (bestQuote === null) {
                            (0, chai_1.expect)(expectations === null || expectations === void 0 ? void 0 : expectations.isNull).to.equal(true);
                            return;
                        }
                        (0, chai_1.expect)(expectations === null || expectations === void 0 ? void 0 : expectations.isNull).to.equal(false);
                        (0, chai_1.expect)(bestQuote.order.makerAmount.toNumber()).to.be.eq(expectations === null || expectations === void 0 ? void 0 : expectations.makerAmount);
                        (0, chai_1.expect)(bestQuote.order.takerAmount.toNumber()).to.be.eq(expectations === null || expectations === void 0 ? void 0 : expectations.takerAmount);
                    });
                });
            });
            describe('buys', () => {
                const isSelling = false;
                const partialFillQuote = {
                    ...BASE_QUOTE,
                    order: new protocol_utils_1.OtcOrder({
                        ...BASE_ORDER,
                        makerAmount: new utils_1.BigNumber(55),
                        takerAmount: new utils_1.BigNumber(50),
                    }),
                };
                const fullQuoteBadPricing = {
                    ...BASE_QUOTE,
                    order: new protocol_utils_1.OtcOrder({
                        ...BASE_ORDER,
                        makerAmount: new utils_1.BigNumber(100),
                        takerAmount: new utils_1.BigNumber(125),
                    }),
                };
                const fullQuoteOkPricing = {
                    ...BASE_QUOTE,
                    order: new protocol_utils_1.OtcOrder({
                        ...BASE_ORDER,
                        makerAmount: new utils_1.BigNumber(100),
                        takerAmount: new utils_1.BigNumber(120),
                    }),
                };
                const fullQuoteGreatPricing = {
                    ...BASE_QUOTE,
                    order: new protocol_utils_1.OtcOrder({
                        ...BASE_ORDER,
                        makerAmount: new utils_1.BigNumber(100),
                        takerAmount: new utils_1.BigNumber(80),
                    }),
                };
                const wrongPair = {
                    ...BASE_QUOTE,
                    order: new protocol_utils_1.OtcOrder({
                        ...BASE_ORDER,
                        makerToken: takerToken,
                        takerToken: makerToken,
                        makerAmount: new utils_1.BigNumber(100),
                        takerAmount: new utils_1.BigNumber(80),
                    }),
                };
                const expiresInOneMinute = {
                    ...BASE_QUOTE,
                    order: new protocol_utils_1.OtcOrder({
                        ...BASE_ORDER,
                        makerAmount: new utils_1.BigNumber(100),
                        takerAmount: new utils_1.BigNumber(80),
                        expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(inThirtySeconds, constants_2.ZERO, constants_2.ZERO),
                    }),
                };
                // TODO (MKR-671): uncomment once filter is enabled
                const validMakerBalances = [new utils_1.BigNumber(150), new utils_1.BigNumber(150)];
                const invalidMakerBalances = [new utils_1.BigNumber(150), new utils_1.BigNumber(50)];
                const tests = [
                    {
                        name: 'should return null when no quotes valid',
                        args: {
                            quotes: [partialFillQuote],
                        },
                        expectations: {
                            isNull: true,
                            makerAmount: undefined,
                            takerAmount: undefined,
                        },
                    },
                    {
                        name: 'should only select quotes that are 100% filled',
                        args: {
                            quotes: [partialFillQuote, fullQuoteBadPricing],
                        },
                        expectations: {
                            isNull: false,
                            makerAmount: 100,
                            takerAmount: 125,
                        },
                    },
                    {
                        name: 'should select quote with best pricing',
                        args: {
                            quotes: [fullQuoteBadPricing, fullQuoteGreatPricing, fullQuoteOkPricing],
                        },
                        expectations: {
                            isNull: false,
                            makerAmount: 100,
                            takerAmount: 80,
                        },
                    },
                    {
                        name: 'should ignore quotes with the wrong pair',
                        args: {
                            quotes: [fullQuoteBadPricing, wrongPair],
                        },
                        expectations: {
                            isNull: false,
                            makerAmount: 100,
                            takerAmount: 125,
                        },
                    },
                    {
                        name: 'should ignore quotes that expire too soon',
                        args: {
                            quotes: [fullQuoteBadPricing, expiresInOneMinute],
                        },
                        expectations: {
                            isNull: false,
                            makerAmount: 100,
                            takerAmount: 125,
                        },
                    },
                    // TODO (MKR-671): uncomment once filter is enabled
                    {
                        name: 'should not ignore quotes if makers have enough balances',
                        args: {
                            quotes: [fullQuoteBadPricing, fullQuoteOkPricing],
                            quotedMakerBalances: validMakerBalances,
                        },
                        expectations: {
                            isNull: false,
                            makerAmount: 100,
                            takerAmount: 120,
                        },
                    },
                    {
                        name: 'should ignore quotes if makers do not have enough balances',
                        args: {
                            quotes: [fullQuoteBadPricing, fullQuoteOkPricing],
                            quotedMakerBalances: invalidMakerBalances,
                        },
                        expectations: {
                            isNull: false,
                            makerAmount: 100,
                            takerAmount: 125,
                        },
                    },
                ];
                tests.forEach(({ name, args, expectations }) => {
                    it(name, () => {
                        const bestQuote = (0, quote_comparison_utils_1.getBestQuote)(args === null || args === void 0 ? void 0 : args.quotes, isSelling, takerToken, makerToken, assetFillAmount, validityWindowMs, args === null || args === void 0 ? void 0 : args.quotedMakerBalances);
                        if (bestQuote === null) {
                            (0, chai_1.expect)(expectations === null || expectations === void 0 ? void 0 : expectations.isNull).to.equal(true);
                            return;
                        }
                        (0, chai_1.expect)(expectations === null || expectations === void 0 ? void 0 : expectations.isNull).to.equal(false);
                        (0, chai_1.expect)(bestQuote.order.makerAmount.toNumber()).to.be.eq(expectations === null || expectations === void 0 ? void 0 : expectations.makerAmount);
                        (0, chai_1.expect)(bestQuote.order.takerAmount.toNumber()).to.be.eq(expectations === null || expectations === void 0 ? void 0 : expectations.takerAmount);
                    });
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,