e633391326f7d5a323c586de5a5402e2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:custom-no-magic-numbers
const bullmq_1 = require("bullmq");
const ioredis_1 = require("ioredis");
const no_op_1 = require("../src/background-jobs/no_op");
const config_1 = require("../src/config");
const constants_1 = require("../src/core/constants");
const scheduler_1 = require("../src/scheduler");
const runner_utils_1 = require("../src/utils/runner_utils");
const deployment_1 = require("./test_utils/deployment");
jest.setTimeout(constants_1.ONE_SECOND_MS * 60);
let teardownDependencies;
let redisConnections = [];
let workers = [];
let scheduler;
describe('Background jobs integration tests', () => {
    beforeEach(async () => {
        teardownDependencies = await (0, deployment_1.setupDependenciesAsync)(['redis']);
    });
    afterEach(async () => {
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const connection = new ioredis_1.default(config_1.REDIS_BACKGROUND_JOB_URI);
        const keys = await connection.keys('bull:*');
        if (keys.length) {
            await connection.del(keys);
        }
        await (0, runner_utils_1.closeWorkersAsync)(workers);
        await (0, runner_utils_1.closeRedisConnectionsAsync)(redisConnections);
        redisConnections = [];
        workers = [];
        await scheduler_1.Scheduler.shutdownAsync();
        if (!teardownDependencies()) {
            throw new Error('Failed to tear down dependencies');
        }
    });
    describe('no-op job', () => {
        it('no-op job should be scheduled and processed', async () => {
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const connection = new ioredis_1.default(config_1.REDIS_BACKGROUND_JOB_URI, {
                maxRetriesPerRequest: null,
                enableReadyCheck: false,
            });
            // clean up keys related to bullmq
            const keys = await connection.keys('bull:*');
            if (keys.length) {
                await connection.del(keys);
            }
            const noOpBackgroundJobQueue = new bullmq_1.Queue(no_op_1.default.queueName, { connection });
            const schedule = [
                {
                    schedule: no_op_1.default.schedule,
                    func: async () => {
                        await no_op_1.default.createAsync(noOpBackgroundJobQueue, { timestamp: Date.now() });
                    },
                },
            ];
            scheduler = new scheduler_1.Scheduler(schedule);
            scheduler.start();
            const { queueName, processAsync } = no_op_1.default;
            const worker = new bullmq_1.Worker(queueName, processAsync, { connection });
            redisConnections = [connection];
            workers = [worker];
            await new Promise((resolve) => setTimeout(resolve, constants_1.ONE_SECOND_MS * 15));
            expect(await noOpBackgroundJobQueue.getCompletedCount()).toEqual(1);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvYmFja2dyb3VuZF9qb2JzX2ludGVncmF0aW9uX3Rlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBeUM7QUFDekMsbUNBQXVDO0FBQ3ZDLHFDQUE0QjtBQUU1Qix3REFBNkQ7QUFDN0QsMENBQXlEO0FBQ3pELHFEQUFzRDtBQUN0RCxnREFBcUU7QUFDckUsNERBQTBGO0FBRTFGLHdEQUFxRztBQUVyRyxJQUFJLENBQUMsVUFBVSxDQUFDLHlCQUFhLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDcEMsSUFBSSxvQkFBd0QsQ0FBQztBQUM3RCxJQUFJLGdCQUFnQixHQUFZLEVBQUUsQ0FBQztBQUNuQyxJQUFJLE9BQU8sR0FBYSxFQUFFLENBQUM7QUFDM0IsSUFBSSxTQUFvQixDQUFDO0FBRXpCLFFBQVEsQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7SUFDL0MsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2xCLG9CQUFvQixHQUFHLE1BQU0sSUFBQSxtQ0FBc0IsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDakIsNkRBQTZEO1FBQzdELG9FQUFvRTtRQUNwRSxNQUFNLFVBQVUsR0FBRyxJQUFJLGlCQUFLLENBQUMsaUNBQXlCLENBQUMsQ0FBQztRQUN4RCxNQUFNLElBQUksR0FBRyxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0MsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2IsTUFBTSxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCO1FBQ0QsTUFBTSxJQUFBLGdDQUFpQixFQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sSUFBQSx5Q0FBMEIsRUFBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ25ELGdCQUFnQixHQUFHLEVBQUUsQ0FBQztRQUN0QixPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsTUFBTSxxQkFBUyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztTQUN2RDtJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUU7UUFDdkIsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3pELDZEQUE2RDtZQUM3RCxvRUFBb0U7WUFDcEUsTUFBTSxVQUFVLEdBQUcsSUFBSSxpQkFBSyxDQUFDLGlDQUF5QixFQUFFO2dCQUNwRCxvQkFBb0IsRUFBRSxJQUFJO2dCQUMxQixnQkFBZ0IsRUFBRSxLQUFLO2FBQzFCLENBQUMsQ0FBQztZQUNILGtDQUFrQztZQUNsQyxNQUFNLElBQUksR0FBRyxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDN0MsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNiLE1BQU0sVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM5QjtZQUVELE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxjQUFLLENBQUMsZUFBaUIsQ0FBQyxTQUFTLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1lBRXRGLE1BQU0sUUFBUSxHQUE2QjtnQkFDdkM7b0JBQ0ksUUFBUSxFQUFFLGVBQWlCLENBQUMsUUFBUTtvQkFDcEMsSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFO3dCQUNiLE1BQU0sZUFBaUIsQ0FBQyxXQUFXLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFDM0YsQ0FBQztpQkFDSjthQUNKLENBQUM7WUFFRixTQUFTLEdBQUcsSUFBSSxxQkFBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNsQixNQUFNLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxHQUFHLGVBQWlCLENBQUM7WUFDdEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFFbkUsZ0JBQWdCLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNoQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVuQixNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLHlCQUFhLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN4RSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvdGVzdC9iYWNrZ3JvdW5kX2pvYnNfaW50ZWdyYXRpb25fdGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTpjdXN0b20tbm8tbWFnaWMtbnVtYmVyc1xyXG5pbXBvcnQgeyBRdWV1ZSwgV29ya2VyIH0gZnJvbSAnYnVsbG1xJztcclxuaW1wb3J0IFJlZGlzIGZyb20gJ2lvcmVkaXMnO1xyXG5cclxuaW1wb3J0IGJhY2tncm91bmRKb2JOb09wIGZyb20gJy4uL3NyYy9iYWNrZ3JvdW5kLWpvYnMvbm9fb3AnO1xyXG5pbXBvcnQgeyBSRURJU19CQUNLR1JPVU5EX0pPQl9VUkkgfSBmcm9tICcuLi9zcmMvY29uZmlnJztcclxuaW1wb3J0IHsgT05FX1NFQ09ORF9NUyB9IGZyb20gJy4uL3NyYy9jb3JlL2NvbnN0YW50cyc7XHJcbmltcG9ydCB7IFNjaGVkdWxlZEJhY2tncm91bmRKb2IsIFNjaGVkdWxlciB9IGZyb20gJy4uL3NyYy9zY2hlZHVsZXInO1xyXG5pbXBvcnQgeyBjbG9zZVJlZGlzQ29ubmVjdGlvbnNBc3luYywgY2xvc2VXb3JrZXJzQXN5bmMgfSBmcm9tICcuLi9zcmMvdXRpbHMvcnVubmVyX3V0aWxzJztcclxuXHJcbmltcG9ydCB7IHNldHVwRGVwZW5kZW5jaWVzQXN5bmMsIFRlYXJkb3duRGVwZW5kZW5jaWVzRnVuY3Rpb25IYW5kbGUgfSBmcm9tICcuL3Rlc3RfdXRpbHMvZGVwbG95bWVudCc7XHJcblxyXG5qZXN0LnNldFRpbWVvdXQoT05FX1NFQ09ORF9NUyAqIDYwKTtcclxubGV0IHRlYXJkb3duRGVwZW5kZW5jaWVzOiBUZWFyZG93bkRlcGVuZGVuY2llc0Z1bmN0aW9uSGFuZGxlO1xyXG5sZXQgcmVkaXNDb25uZWN0aW9uczogUmVkaXNbXSA9IFtdO1xyXG5sZXQgd29ya2VyczogV29ya2VyW10gPSBbXTtcclxubGV0IHNjaGVkdWxlcjogU2NoZWR1bGVyO1xyXG5cclxuZGVzY3JpYmUoJ0JhY2tncm91bmQgam9icyBpbnRlZ3JhdGlvbiB0ZXN0cycsICgpID0+IHtcclxuICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIHRlYXJkb3duRGVwZW5kZW5jaWVzID0gYXdhaXQgc2V0dXBEZXBlbmRlbmNpZXNBc3luYyhbJ3JlZGlzJ10pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcclxuICAgICAgICAvLyAkZXNsaW50LWZpeC1tZSBodHRwczovL2dpdGh1Yi5jb20vcmhpbm9kYXZpZC9lc2xpbnQtZml4LW1lXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cclxuICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gbmV3IFJlZGlzKFJFRElTX0JBQ0tHUk9VTkRfSk9CX1VSSSEpO1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBhd2FpdCBjb25uZWN0aW9uLmtleXMoJ2J1bGw6KicpO1xyXG4gICAgICAgIGlmIChrZXlzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBhd2FpdCBjb25uZWN0aW9uLmRlbChrZXlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgY2xvc2VXb3JrZXJzQXN5bmMod29ya2Vycyk7XHJcbiAgICAgICAgYXdhaXQgY2xvc2VSZWRpc0Nvbm5lY3Rpb25zQXN5bmMocmVkaXNDb25uZWN0aW9ucyk7XHJcbiAgICAgICAgcmVkaXNDb25uZWN0aW9ucyA9IFtdO1xyXG4gICAgICAgIHdvcmtlcnMgPSBbXTtcclxuICAgICAgICBhd2FpdCBTY2hlZHVsZXIuc2h1dGRvd25Bc3luYygpO1xyXG4gICAgICAgIGlmICghdGVhcmRvd25EZXBlbmRlbmNpZXMoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byB0ZWFyIGRvd24gZGVwZW5kZW5jaWVzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZGVzY3JpYmUoJ25vLW9wIGpvYicsICgpID0+IHtcclxuICAgICAgICBpdCgnbm8tb3Agam9iIHNob3VsZCBiZSBzY2hlZHVsZWQgYW5kIHByb2Nlc3NlZCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgLy8gJGVzbGludC1maXgtbWUgaHR0cHM6Ly9naXRodWIuY29tL3JoaW5vZGF2aWQvZXNsaW50LWZpeC1tZVxyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxyXG4gICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gbmV3IFJlZGlzKFJFRElTX0JBQ0tHUk9VTkRfSk9CX1VSSSEsIHtcclxuICAgICAgICAgICAgICAgIG1heFJldHJpZXNQZXJSZXF1ZXN0OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgZW5hYmxlUmVhZHlDaGVjazogZmFsc2UsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBjbGVhbiB1cCBrZXlzIHJlbGF0ZWQgdG8gYnVsbG1xXHJcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBhd2FpdCBjb25uZWN0aW9uLmtleXMoJ2J1bGw6KicpO1xyXG4gICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uZGVsKGtleXMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBub09wQmFja2dyb3VuZEpvYlF1ZXVlID0gbmV3IFF1ZXVlKGJhY2tncm91bmRKb2JOb09wLnF1ZXVlTmFtZSwgeyBjb25uZWN0aW9uIH0pO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2NoZWR1bGU6IFNjaGVkdWxlZEJhY2tncm91bmRKb2JbXSA9IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZTogYmFja2dyb3VuZEpvYk5vT3Auc2NoZWR1bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuYzogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBiYWNrZ3JvdW5kSm9iTm9PcC5jcmVhdGVBc3luYyhub09wQmFja2dyb3VuZEpvYlF1ZXVlLCB7IHRpbWVzdGFtcDogRGF0ZS5ub3coKSB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IG5ldyBTY2hlZHVsZXIoc2NoZWR1bGUpO1xyXG4gICAgICAgICAgICBzY2hlZHVsZXIuc3RhcnQoKTtcclxuICAgICAgICAgICAgY29uc3QgeyBxdWV1ZU5hbWUsIHByb2Nlc3NBc3luYyB9ID0gYmFja2dyb3VuZEpvYk5vT3A7XHJcbiAgICAgICAgICAgIGNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIocXVldWVOYW1lLCBwcm9jZXNzQXN5bmMsIHsgY29ubmVjdGlvbiB9KTtcclxuXHJcbiAgICAgICAgICAgIHJlZGlzQ29ubmVjdGlvbnMgPSBbY29ubmVjdGlvbl07XHJcbiAgICAgICAgICAgIHdvcmtlcnMgPSBbd29ya2VyXTtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIE9ORV9TRUNPTkRfTVMgKiAxNSkpO1xyXG4gICAgICAgICAgICBleHBlY3QoYXdhaXQgbm9PcEJhY2tncm91bmRKb2JRdWV1ZS5nZXRDb21wbGV0ZWRDb3VudCgpKS50b0VxdWFsKDEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=