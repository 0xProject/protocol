{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfqm_gas_estimate_utils_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfqm_gas_estimate_utils_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\r\n// tslint:disable:max-file-line-count\r\n\r\nimport { expect } from 'chai';\r\n\r\nimport { RFQM_TX_GAS_ESTIMATE } from '../../src/core/constants';\r\nimport { calculateGasEstimate } from '../../src/utils/rfqm_gas_estimate_utils';\r\n\r\ndescribe('RFQM Gas Estimate utils', () => {\r\n    describe('calculateGasEstimate', () => {\r\n        it('should return base gas estimate if neither tokens have premiums', () => {\r\n            const makerToken = '';\r\n            const takerToken = '';\r\n\r\n            const result = calculateGasEstimate(makerToken, takerToken, 'rfq', false);\r\n\r\n            expect(result).to.equal(RFQM_TX_GAS_ESTIMATE);\r\n        });\r\n\r\n        it('should add a token premium for maker token', () => {\r\n            const makerToken = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';\r\n            const takerToken = '';\r\n\r\n            const result = calculateGasEstimate(makerToken, takerToken, 'rfq', false);\r\n\r\n            expect(result).to.be.greaterThan(RFQM_TX_GAS_ESTIMATE);\r\n        });\r\n\r\n        it('should add a token premium for taker token', () => {\r\n            const makerToken = '';\r\n            const takerToken = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';\r\n\r\n            const result = calculateGasEstimate(makerToken, takerToken, 'rfq', false);\r\n\r\n            expect(result).to.be.greaterThan(RFQM_TX_GAS_ESTIMATE);\r\n        });\r\n\r\n        it('token premiums for maker and taker token should be additive', () => {\r\n            const unknown = '';\r\n            const USDC = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';\r\n            const USDT = '0xdac17f958d2ee523a2206206994597c13d831ec7';\r\n\r\n            const result1 = calculateGasEstimate(USDC, unknown, 'rfq', false);\r\n            const result2 = calculateGasEstimate(USDC, USDT, 'rfq', false);\r\n\r\n            expect(result2).to.be.greaterThan(result1);\r\n        });\r\n\r\n        it('should be case insensitive to the input tokens', () => {\r\n            const unknown = '';\r\n            const USDC_uppercase = '0xA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48';\r\n            const USDT_uppercase = '0xDAC17F958D2EE523A2206206994597C13D831EC7';\r\n\r\n            const result0 = calculateGasEstimate(unknown, unknown, 'rfq', false);\r\n            const result1 = calculateGasEstimate(USDC_uppercase, unknown, 'rfq', false);\r\n            const result2 = calculateGasEstimate(USDC_uppercase, USDT_uppercase, 'rfq', false);\r\n\r\n            expect(result1).to.be.greaterThan(result0);\r\n            expect(result2).to.be.greaterThan(result1);\r\n        });\r\n    });\r\n});\r\n"],"version":3}