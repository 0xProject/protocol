{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasStationAttendantUtils.ts","mappings":";;;AAKA,2CAAwC;AAExC,+EAA4E;AAC5E,6EAA0E;AAC1E,6EAA0E;AAE1E,SAAgB,sBAAsB,CAClC,KAAyB,EACzB,aAA4B,EAC5B,gBAAkC;IAElC,IAAI,SAAoB,CAAC;IACzB,0CAA0C;IAC1C,QAAQ,KAAK,CAAC,OAAO,EAAE;QACnB,KAAK,cAAc,CAAC,CAAC;YACjB,SAAS,GAAG,qBAAS,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;YACjE,OAAO,IAAI,yDAA2B,CAAC,SAAS,CAAC,CAAC;QACtD,KAAK,aAAa,CAAC,CAAC;YAChB,OAAO,IAAI,uDAA0B,CAAC,gBAAgB,CAAC,CAAC;QAC5D,KAAK,aAAa,CAAC,IAAI;YACnB,SAAS,GAAG,qBAAS,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;YACjE,OAAO,IAAI,yDAA2B,CAAC,SAAS,CAAC,CAAC;QACtD,KAAK,aAAa,CAAC,GAAG;YAClB,OAAO,IAAI,uDAA0B,CAAC,gBAAgB,CAAC,CAAC;QAC5D,KAAK,YAAY,CAAC,KAAK;YACnB,OAAO,IAAI,uDAA0B,CAAC,gBAAgB,CAAC,CAAC;QAC5D;YACI,MAAM,IAAI,KAAK,CAAC,mDAAmD,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;KACxF;IACD,yCAAyC;AAC7C,CAAC;AAxBD,wDAwBC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasStationAttendantUtils.ts"],"sourcesContent":["import { ProtocolFeeUtils } from '@0x/asset-swapper';\r\nimport { AxiosInstance } from 'axios';\r\n\r\nimport { ChainConfiguration } from '../config';\r\n\r\nimport { GasOracle } from './GasOracle';\r\nimport { GasStationAttendant } from './GasStationAttendant';\r\nimport { GasStationAttendantEthereum } from './GasStationAttendantEthereum';\r\nimport { GasStationAttendantPolygon } from './GasStationAttendantPolygon';\r\nimport { GasStationAttendantRopsten } from './GasStationAttendantRopsten';\r\n\r\nexport function getGasStationAttendant(\r\n    chain: ChainConfiguration,\r\n    axiosInstance: AxiosInstance,\r\n    protocolFeeUtils: ProtocolFeeUtils,\r\n): GasStationAttendant {\r\n    let gasOracle: GasOracle;\r\n    // tslint:disable: custom-no-magic-numbers\r\n    switch (chain.chainId) {\r\n        case /* ethereum */ 1:\r\n            gasOracle = GasOracle.create(chain.gasStationUrl, axiosInstance);\r\n            return new GasStationAttendantEthereum(gasOracle);\r\n        case /* ropsten */ 3:\r\n            return new GasStationAttendantRopsten(protocolFeeUtils);\r\n        case /* ganache */ 1337:\r\n            gasOracle = GasOracle.create(chain.gasStationUrl, axiosInstance);\r\n            return new GasStationAttendantEthereum(gasOracle);\r\n        case /* polygon */ 137:\r\n            return new GasStationAttendantPolygon(protocolFeeUtils);\r\n        case /* mumbai */ 80001:\r\n            return new GasStationAttendantPolygon(protocolFeeUtils);\r\n        default:\r\n            throw new Error(`Gas station attendant not configured for chain: ${chain.name}`);\r\n    }\r\n    // tslint:enable: custom-no-magic-numbers\r\n}\r\n"],"version":3}