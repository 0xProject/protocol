adde9f5e5295d27a1176b2f7909b968c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqmService = void 0;
// tslint:disable:max-file-line-count
const api_utils_1 = require("@0x/api-utils");
const protocol_utils_1 = require("@0x/protocol-utils");
const token_metadata_1 = require("@0x/token-metadata");
const utils_1 = require("@0x/utils");
const web3_wrapper_1 = require("@0x/web3-wrapper");
const attempt_1 = require("@lifeomic/attempt");
const _ = require("lodash");
const prom_client_1 = require("prom-client");
const config_1 = require("../config");
const constants_1 = require("../core/constants");
const types_1 = require("../entities/types");
const config_2 = require("../config");
const errors_1 = require("../core/errors");
const logger_1 = require("../logger");
const fee_utils_1 = require("../core/fee_utils");
const pair_utils_1 = require("../core/pair_utils");
const types_2 = require("../core/types");
const quote_comparison_utils_1 = require("../utils/quote_comparison_utils");
const quote_report_utils_1 = require("../utils/quote_report_utils");
const quote_server_client_1 = require("../utils/quote_server_client");
const rfqm_db_utils_1 = require("../utils/rfqm_db_utils");
const rfqm_health_check_1 = require("../utils/rfqm_health_check");
const signature_utils_1 = require("../utils/signature_utils");
const types_3 = require("@0x/types");
const RFQM_QUOTE_INSERTED = new prom_client_1.Counter({
    name: 'rfqm_quote_inserted',
    help: 'An RfqmQuote was inserted in the DB',
    labelNames: ['apiKey', 'integratorId', 'makerUri'],
});
const RFQM_SIGNED_QUOTE_NOT_FOUND = new prom_client_1.Counter({
    name: 'rfqm_signed_quote_not_found',
    labelNames: ['chain_id'],
    help: 'A submitted quote did not match any stored quotes',
});
const RFQM_TAKER_AND_TAKERTOKEN_TRADE_EXISTS = new prom_client_1.Counter({
    name: 'rfqm_signed_quote_taker_and_takertoken_trade_exists',
    labelNames: ['chain_id'],
    help: 'A trade was submitted when the system already had a pending trade for the same taker and takertoken',
});
const RFQM_SUBMIT_BALANCE_CHECK_FAILED = new prom_client_1.Counter({
    name: 'rfqm_submit_balance_check_failed',
    labelNames: ['makerAddress', 'chain_id'],
    help: 'A trade was submitted but our on-chain balance check failed',
});
const RFQM_MAKER_BLOCKED_FOR_LLR_COOLDOWN = new prom_client_1.Counter({
    name: 'rfqm_maker_blocked_for_llr_cooldown',
    help: 'A maker get blocked because of LLR cooldown',
    labelNames: ['maker_id', 'chain_id', 'pair_key'],
});
const RFQM_MM_RETURNED_DIFFERENT_AMOUNT = new prom_client_1.Counter({
    name: 'rfqm_mm_returned_different_amount_total',
    help: 'A maker responded a quote with different amount than requested',
    labelNames: ['maker_uri', 'chain_id', 'modification_type'],
});
const PRICE_DECIMAL_PLACES = 6;
const getTokenAddressFromSymbol = (symbol, chainId) => {
    return (0, token_metadata_1.getTokenMetadataIfExists)(symbol, chainId).tokenAddress;
};
/**
 * RfqmService is the coordination layer for HTTP based RFQM flows.
 */
class RfqmService {
    constructor(_chainId, _feeService, _feeModelVersion, _contractAddresses, _registryAddress, _blockchainUtils, _dbUtils, _sqsProducer, _quoteServerClient, _minExpiryDurationMs, _cacheClient, _rfqMakerBalanceCacheService, _rfqMakerManager, _tokenMetadataManager, _kafkaProducer, _quoteReportTopic) {
        this._chainId = _chainId;
        this._feeService = _feeService;
        this._feeModelVersion = _feeModelVersion;
        this._contractAddresses = _contractAddresses;
        this._registryAddress = _registryAddress;
        this._blockchainUtils = _blockchainUtils;
        this._dbUtils = _dbUtils;
        this._sqsProducer = _sqsProducer;
        this._quoteServerClient = _quoteServerClient;
        this._minExpiryDurationMs = _minExpiryDurationMs;
        this._cacheClient = _cacheClient;
        this._rfqMakerBalanceCacheService = _rfqMakerBalanceCacheService;
        this._rfqMakerManager = _rfqMakerManager;
        this._tokenMetadataManager = _tokenMetadataManager;
        this._kafkaProducer = _kafkaProducer;
        this._quoteReportTopic = _quoteReportTopic;
        this._nativeTokenSymbol = (0, token_metadata_1.nativeTokenSymbol)(this._chainId);
        this._nativeTokenAddress = getTokenAddressFromSymbol(this._nativeTokenSymbol, this._chainId);
        this._nativeWrappedTokenSymbol = (0, token_metadata_1.nativeWrappedTokenSymbol)(this._chainId);
        this._nativeWrappedTokenAddress = getTokenAddressFromSymbol(this._nativeWrappedTokenSymbol, this._chainId);
    }
    static _getSellAmountGivenBuyAmountAndQuote(buyAmount, quotedTakerAmount, quotedMakerAmount) {
        // Solving for x given the following proportion:
        // x / buyAmount = quotedTakerAmount / quotedMakerAmount
        return quotedTakerAmount.div(quotedMakerAmount).times(buyAmount).decimalPlaces(0);
    }
    static _getBuyAmountGivenSellAmountAndQuote(sellAmount, quotedTakerAmount, quotedMakerAmount) {
        // Solving for y given the following proportion:
        // y / sellAmount =  quotedMakerAmount / quotedTakerAmount
        return quotedMakerAmount.div(quotedTakerAmount).times(sellAmount).decimalPlaces(0);
    }
    /**
     * Transform a transaction submission to type `TransactionDetails`.
     *
     * @returns Corresponding `TransactionDetails` or null if transaction hash is not available.
     */
    static _transformTransactionSubmission(transactionSubmission) {
        const { transactionHash: hash, createdAt } = transactionSubmission;
        return hash ? { hash, timestamp: createdAt.getTime() } : null;
    }
    /**
     * Get details of the successful transaction submission (there will only be one).
     *
     * @param opts Options object that contains:
     *             - `hash`: The hash of the order or metatransaction.
     *             - `type`: The type of the transaction submissions.
     *             - `transactionSubmssions`: List of transaction submissions to filter.
     * @returns The details (hash and timestamp) of the successful transaction submission.
     * @throws - When the number of the successful transaction submission is not 1
     *         - The successful transaction submission does not have transaction hash
     */
    static _getSuccessfulTransactionSubmissionDetails(opts) {
        const { hash, type, transactionSubmssions } = opts;
        const successfulTransactionSubmissions = transactionSubmssions.filter((s) => s.status === types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed ||
            s.status === types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed);
        if (successfulTransactionSubmissions.length !== 1) {
            throw new Error(`Expected exactly one successful transaction submission of type ${type} for hash ${hash}; found ${successfulTransactionSubmissions.length}`);
        }
        const successfulTransactionSubmission = successfulTransactionSubmissions[0];
        const successfulTransactionSubmissionDetails = this._transformTransactionSubmission(successfulTransactionSubmission);
        if (!successfulTransactionSubmissionDetails) {
            throw new Error(`Successful transaction of type ${type} does not have a hash ${hash}`);
        }
        return successfulTransactionSubmissionDetails;
    }
    static _jobFailureStatusToReason(failureStatus) {
        switch (failureStatus) {
            case types_1.RfqmJobStatus.FailedEthCallFailed:
                return types_1.JobFailureReason.TransactionSimulationFailed;
            case types_1.RfqmJobStatus.FailedExpired:
                return types_1.JobFailureReason.OrderExpired;
            case types_1.RfqmJobStatus.FailedLastLookDeclined:
                return types_1.JobFailureReason.LastLookDeclined;
            case types_1.RfqmJobStatus.FailedSignFailed:
                return types_1.JobFailureReason.MarketMakerSignatureError;
            case types_1.RfqmJobStatus.FailedRevertedConfirmed:
            case types_1.RfqmJobStatus.FailedRevertedUnconfirmed:
                return types_1.JobFailureReason.TransactionReverted;
            default:
                return types_1.JobFailureReason.InternalError;
        }
    }
    /**
     * Passthrough to TokenMetadataManager's `getTokenDecimalsAsync` method
     */
    async getTokenDecimalsAsync(tokenAddress) {
        return this._tokenMetadataManager.getTokenDecimalsAsync(tokenAddress);
    }
    /**
     * Fetch the best indicative quote available. Returns null if no valid quotes found
     */
    async fetchIndicativeQuoteAsync(params, extendedQuoteReportSubmissionBy = 'rfqm') {
        var _a;
        const affiliateAddress = (_a = params.affiliateAddress) !== null && _a !== void 0 ? _a : params.integrator.affiliateAddress;
        // Retrieve quote context
        const quoteContext = this._retrieveQuoteContext({ ...params, affiliateAddress }, /* isFirm */ false);
        const { isFirm, takerAmount, makerAmount, takerToken, makerToken, originalMakerToken, takerTokenDecimals, makerTokenDecimals, takerAddress, isSelling, assetFillAmount, integrator, } = quoteContext;
        // (Optimization) When `quotesWithGasFee` is returned, we can use this value and revise it, to avoid another fetch to MMs
        const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await this._feeService.calculateFeeAsync(quoteContext, this._fetchIndicativeQuotesAsync.bind(this));
        // Calculate fees (other than gas fee) to charge MMs
        const otherFeesAmount = feeWithDetails.amount.minus(feeWithDetails.details.gasFeeAmount);
        const finalQuotes = quotesWithGasFee
            ? await this._feeService.reviseQuotesAsync(quotesWithGasFee, otherFeesAmount, quoteContext)
            : await this._fetchIndicativeQuotesAsync(quoteContext, feeWithDetails);
        // (Quote Report) If otherFees > 0, then we "revised" the quotes from MMs. We want to save both the original quotes (aka intermediateQuotes) and the revised (finalQuotes)
        const intermediateQuotes = quotesWithGasFee && otherFeesAmount.gt(protocol_utils_1.ZERO) ? quotesWithGasFee : [];
        // Get the best quote
        const bestQuote = (0, quote_comparison_utils_1.getBestQuote)(finalQuotes, isSelling, takerToken, makerToken, assetFillAmount, this._minExpiryDurationMs);
        const isLiquidityAvailable = bestQuote !== null;
        // Quote Report
        if (this._kafkaProducer) {
            await quote_report_utils_1.quoteReportUtils.publishRFQMQuoteReportAsync({
                isFirmQuote: isFirm,
                taker: takerAddress,
                buyTokenAddress: originalMakerToken,
                sellTokenAddress: takerToken,
                buyAmount: makerAmount,
                sellAmount: takerAmount,
                integratorId: integrator === null || integrator === void 0 ? void 0 : integrator.integratorId,
                finalQuotes,
                intermediateQuotes,
                bestQuote,
                fee: (0, fee_utils_1.feeToStoredFee)(feeWithDetails),
                ammQuoteUniqueId,
                isLiquidityAvailable,
            }, this._kafkaProducer, this._quoteReportTopic, extendedQuoteReportSubmissionBy);
        }
        // No quotes found
        if (!isLiquidityAvailable) {
            return null;
        }
        // Prepare the price
        const makerAmountInUnit = web3_wrapper_1.Web3Wrapper.toUnitAmount(bestQuote.makerAmount, makerTokenDecimals);
        const takerAmountInUnit = web3_wrapper_1.Web3Wrapper.toUnitAmount(bestQuote.takerAmount, takerTokenDecimals);
        const price = isSelling ? makerAmountInUnit.div(takerAmountInUnit) : takerAmountInUnit.div(makerAmountInUnit);
        // The way the BigNumber round down behavior (https://mikemcl.github.io/bignumber.js/#dp) works requires us
        // to add 1 to PRICE_DECIMAL_PLACES in order to actually come out with the decimal places specified.
        const roundedPrice = price.decimalPlaces(PRICE_DECIMAL_PLACES + 1, utils_1.BigNumber.ROUND_DOWN);
        // Prepare response
        return {
            price: roundedPrice,
            gas: feeWithDetails.details.gasPrice,
            buyAmount: bestQuote.makerAmount,
            buyTokenAddress: originalMakerToken,
            sellAmount: bestQuote.takerAmount,
            sellTokenAddress: bestQuote.takerToken,
            allowanceTarget: this._contractAddresses.exchangeProxy,
        };
    }
    /**
     * Fetch the best firm quote available, including a metatransaction. Returns null if no valid quotes found
     */
    async fetchFirmQuoteAsync(params, extendedQuoteReportSubmissionBy = 'rfqm') {
        var _a;
        const affiliateAddress = (_a = params.affiliateAddress) !== null && _a !== void 0 ? _a : params.integrator.affiliateAddress;
        // Retrieve quote context
        const quoteContext = this._retrieveQuoteContext({ ...params, affiliateAddress }, /* isFirm */ true);
        const { isFirm, takerAmount, makerAmount, takerToken, makerToken, originalMakerToken, takerTokenDecimals, makerTokenDecimals, takerAddress, integrator, isUnwrap, isSelling, assetFillAmount, } = quoteContext;
        // (Optimization) When `quotesWithGasFee` is returned, we can sometimes reuse it, to avoid another fetch to MMs
        // NOTE: this optimization differs from the optimization for indicative quotes because we do NOT revise firm quotes
        const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await this._feeService.calculateFeeAsync(quoteContext, this._fetchIndicativeQuotesAsync.bind(this));
        // Calculate fees (other than gas fee) to charge MMs. If there are other fees, we don't reuse `quotesWithGasFee`
        const otherFeesAmount = feeWithDetails.amount.minus(feeWithDetails.details.gasFeeAmount);
        // If `quotesWithGasFee` have been obtained and there are no other fees, reuse the quotes. Otherwise call MMs with full fee to get new quotes.
        const finalQuotes = quotesWithGasFee && otherFeesAmount.eq(protocol_utils_1.ZERO)
            ? await this._convertToFirmQuotesAsync(quotesWithGasFee, quoteContext)
            : await this._fetchFirmQuotesAsync(quoteContext, feeWithDetails);
        // (Quote Report) If `quotesWithGasFee` have not been reused, save them as intermediate quotes
        const intermediateQuotes = quotesWithGasFee && otherFeesAmount.gt(protocol_utils_1.ZERO) ? quotesWithGasFee : [];
        // (Maker Balance Cache) Fetch maker balances to validate whether quotes are fully fillable
        let quotedMakerBalances;
        const quotedERC20Owners = finalQuotes.map((quote) => {
            return {
                owner: quote.order.maker,
                token: makerToken,
            };
        });
        try {
            quotedMakerBalances = await this._rfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(this._chainId, quotedERC20Owners);
        }
        catch (e) {
            logger_1.logger.error({ chainId: this._chainId, quotedERC20Owners, errorMessage: e.message }, 'Failed to fetch maker balances to validate firm quotes');
        }
        // Get the best quote
        const bestQuote = (0, quote_comparison_utils_1.getBestQuote)(finalQuotes, isSelling, takerToken, makerToken, assetFillAmount, this._minExpiryDurationMs, quotedMakerBalances);
        const isLiquidityAvailable = bestQuote !== null;
        const storedFeeWithDetails = (0, fee_utils_1.feeToStoredFee)(feeWithDetails);
        let quoteReportId = null;
        // Quote Report
        if (this._kafkaProducer) {
            quoteReportId = await quote_report_utils_1.quoteReportUtils.publishRFQMQuoteReportAsync({
                isFirmQuote: isFirm,
                taker: takerAddress,
                buyTokenAddress: originalMakerToken,
                sellTokenAddress: takerToken,
                buyAmount: makerAmount,
                sellAmount: takerAmount,
                integratorId: integrator === null || integrator === void 0 ? void 0 : integrator.integratorId,
                finalQuotes,
                intermediateQuotes,
                bestQuote,
                fee: storedFeeWithDetails,
                ammQuoteUniqueId,
                isLiquidityAvailable,
            }, this._kafkaProducer, this._quoteReportTopic, extendedQuoteReportSubmissionBy);
        }
        // No quote found
        if (!isLiquidityAvailable) {
            return { quote: null, quoteReportId };
        }
        // Get the makerUri
        const makerUri = bestQuote.makerUri;
        if (makerUri === undefined) {
            logger_1.logger.error({ makerAddress: bestQuote.order.maker }, 'makerUri unknown for maker address');
            throw new Error(`makerUri unknown for maker address ${bestQuote.order.maker}`);
        }
        // Prepare the price
        const makerAmountInUnit = web3_wrapper_1.Web3Wrapper.toUnitAmount(bestQuote.order.makerAmount, makerTokenDecimals);
        const takerAmountInUnit = web3_wrapper_1.Web3Wrapper.toUnitAmount(bestQuote.order.takerAmount, takerTokenDecimals);
        const price = isSelling ? makerAmountInUnit.div(takerAmountInUnit) : takerAmountInUnit.div(makerAmountInUnit);
        // The way the BigNumber round down behavior (https://mikemcl.github.io/bignumber.js/#dp) works requires us
        // to add 1 to PRICE_DECIMAL_PLACES in order to actually come out with the decimal places specified.
        const roundedPrice = price.decimalPlaces(PRICE_DECIMAL_PLACES + 1, utils_1.BigNumber.ROUND_DOWN);
        // Prepare the final takerAmount and makerAmount
        const sellAmount = isSelling
            ? // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                takerAmount
            : RfqmService._getSellAmountGivenBuyAmountAndQuote(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            makerAmount, bestQuote.order.takerAmount, bestQuote.order.makerAmount);
        const buyAmount = isSelling
            ? RfqmService._getBuyAmountGivenSellAmountAndQuote(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            takerAmount, bestQuote.order.takerAmount, bestQuote.order.makerAmount)
            : // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                makerAmount;
        // Get the Order and its hash
        const orderHash = bestQuote.order.getHash();
        const otcOrder = bestQuote.order;
        await this._dbUtils.writeV2QuoteAsync({
            orderHash,
            chainId: this._chainId,
            fee: storedFeeWithDetails,
            order: (0, rfqm_db_utils_1.otcOrderToStoredOtcOrder)(otcOrder),
            makerUri,
            affiliateAddress,
            integratorId: integrator.integratorId,
            isUnwrap,
            takerSpecifiedSide: params.sellAmount ? 'takerToken' : 'makerToken',
        });
        const approval = params.checkApproval
            ? // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                await this.getGaslessApprovalResponseAsync(takerAddress, takerToken, sellAmount)
            : null;
        RFQM_QUOTE_INSERTED.labels(integrator.integratorId, integrator.integratorId, makerUri).inc();
        return {
            quote: {
                type: types_2.GaslessTypes.OtcOrder,
                price: roundedPrice,
                gas: feeWithDetails.details.gasPrice,
                buyAmount,
                buyTokenAddress: originalMakerToken,
                sellAmount,
                sellTokenAddress: bestQuote.order.takerToken,
                allowanceTarget: this._contractAddresses.exchangeProxy,
                order: bestQuote.order,
                orderHash,
                // use approval variable directly is not ideal as we don't want to include approval field if `approval` is null
                ...(approval && { approval }),
            },
            quoteReportId,
        };
    }
    /**
     * Get the value of the approval response in firm quote responses. The approval response contains whether an approval is required, is gasless approval
     * is available for the token (optional), the type of the gasless approval (optional) and the EIP712 context (optional).
     *
     * @param takerAddress The address of the taker.
     * @param tokenToApprove Token address to be approved.
     * @param sellAmount Amount of token to sell in base unit.
     * @returns The approval response.
     */
    async getGaslessApprovalResponseAsync(takerAddress, tokenToApprove, sellAmount) {
        const allowance = await this._blockchainUtils.getAllowanceAsync(tokenToApprove, takerAddress, this._blockchainUtils.getExchangeProxyAddress());
        const isRequired = allowance.lte(sellAmount);
        if (!isRequired) {
            return {
                isRequired,
            };
        }
        const gaslessApproval = await this._blockchainUtils.getGaslessApprovalAsync(this._chainId, tokenToApprove, takerAddress);
        const isGaslessAvailable = gaslessApproval !== null;
        if (!isGaslessAvailable) {
            return {
                isRequired,
                isGaslessAvailable,
            };
        }
        return {
            isRequired,
            isGaslessAvailable,
            type: gaslessApproval.kind,
            eip712: gaslessApproval.eip712,
        };
    }
    async getStatusAsync(tradeHash) {
        const transformSubmissions = (submissions) => {
            // `_transformTransactionSubmission` is a static method so no-unbound-method does not apply here
            // tslint:disable-next-line:no-unbound-method
            return submissions.map(RfqmService._transformTransactionSubmission).flatMap((s) => (s ? s : []));
        };
        const job = await Promise.all([
            this._dbUtils.findV2JobByOrderHashAsync(tradeHash),
            this._dbUtils.findMetaTransactionJobByMetaTransactionHashAsync(tradeHash),
        ]).then((jobs) => jobs.find((x) => x));
        if (!job) {
            return null;
        }
        const { status, expiry } = job;
        if (status === types_1.RfqmJobStatus.PendingEnqueued && expiry.multipliedBy(constants_1.ONE_SECOND_MS).lt(Date.now())) {
            // the workers are dead/on vacation and the expiration time has passed
            return {
                status: 'failed',
                transactions: [],
                ...(config_2.REASON_ON_STATUS_ERROR_RESPONSE_ENABLED && {
                    reason: types_1.JobFailureReason.OrderExpired,
                }),
            };
        }
        const tradeTransactionSubmissions = job.kind === 'rfqm_v2_job'
            ? await this._dbUtils.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Trade)
            : await this._dbUtils.findMetaTransactionSubmissionsByJobIdAsync(job.id, types_1.RfqmTransactionSubmissionType.Trade);
        const shouldIncludeApproval = !!job.approval;
        let approvalTransactionSubmissions = [];
        if (shouldIncludeApproval) {
            approvalTransactionSubmissions =
                job.kind === 'rfqm_v2_job'
                    ? await this._dbUtils.findV2TransactionSubmissionsByOrderHashAsync(job.orderHash, types_1.RfqmTransactionSubmissionType.Approval)
                    : await this._dbUtils.findMetaTransactionSubmissionsByJobIdAsync(job.id, types_1.RfqmTransactionSubmissionType.Approval);
        }
        switch (status) {
            case types_1.RfqmJobStatus.PendingEnqueued:
            case types_1.RfqmJobStatus.PendingProcessing:
            case types_1.RfqmJobStatus.PendingLastLookAccepted:
                return { status: 'pending', transactions: [] };
            case types_1.RfqmJobStatus.PendingSubmitted:
                return {
                    status: 'submitted',
                    transactions: transformSubmissions(tradeTransactionSubmissions),
                    ...(shouldIncludeApproval && {
                        approvalTransactions: transformSubmissions(approvalTransactionSubmissions),
                    }),
                };
            case types_1.RfqmJobStatus.FailedEthCallFailed:
            case types_1.RfqmJobStatus.FailedExpired:
            case types_1.RfqmJobStatus.FailedLastLookDeclined:
            case types_1.RfqmJobStatus.FailedPresignValidationFailed:
            case types_1.RfqmJobStatus.FailedRevertedConfirmed:
            case types_1.RfqmJobStatus.FailedRevertedUnconfirmed:
            case types_1.RfqmJobStatus.FailedSignFailed:
            case types_1.RfqmJobStatus.FailedSubmitFailed:
            case types_1.RfqmJobStatus.FailedValidationNoCallData:
            case types_1.RfqmJobStatus.FailedValidationNoFee:
            case types_1.RfqmJobStatus.FailedValidationNoMakerUri:
            case types_1.RfqmJobStatus.FailedValidationNoOrder:
            case types_1.RfqmJobStatus.FailedValidationNoTakerSignature:
                return {
                    status: 'failed',
                    transactions: transformSubmissions(tradeTransactionSubmissions),
                    ...(shouldIncludeApproval && {
                        approvalTransactions: transformSubmissions(approvalTransactionSubmissions),
                    }),
                    ...(config_2.REASON_ON_STATUS_ERROR_RESPONSE_ENABLED && {
                        reason: RfqmService._jobFailureStatusToReason(status),
                    }),
                };
            case types_1.RfqmJobStatus.SucceededConfirmed:
            case types_1.RfqmJobStatus.SucceededUnconfirmed:
                return {
                    status: status === types_1.RfqmJobStatus.SucceededUnconfirmed ? 'succeeded' : 'confirmed',
                    transactions: [
                        RfqmService._getSuccessfulTransactionSubmissionDetails({
                            hash: job.getHash(),
                            type: types_1.RfqmTransactionSubmissionType.Trade,
                            transactionSubmssions: tradeTransactionSubmissions,
                        }),
                    ],
                    ...(shouldIncludeApproval && {
                        approvalTransactions: [
                            RfqmService._getSuccessfulTransactionSubmissionDetails({
                                hash: job.getHash(),
                                type: types_1.RfqmTransactionSubmissionType.Approval,
                                transactionSubmssions: approvalTransactionSubmissions,
                            }),
                        ],
                    }),
                };
            default:
                ((_x) => {
                    throw new Error('Unreachable');
                })(status);
        }
    }
    /**
     * Runs checks to determine the health of the RFQm system. The results may be distilled to a format needed by integrators.
     */
    async runHealthCheckAsync() {
        const heartbeats = await this._dbUtils.findRfqmWorkerHeartbeatsAsync(this._chainId);
        let gasPrice;
        try {
            gasPrice = await this._feeService.getGasPriceEstimationAsync();
        }
        catch (error) {
            logger_1.logger.warn({ errorMessage: error.message }, 'Failed to get gas price for health check');
        }
        return (0, rfqm_health_check_1.computeHealthCheckAsync)(config_1.RFQM_MAINTENANCE_MODE, this._rfqMakerManager.getRfqmV2MakerOfferings(), this._sqsProducer, heartbeats, this._chainId, gasPrice);
    }
    /**
     * Validates and enqueues the Taker Signed Otc Order with approval for submission.
     * Can also be used to submit order without approval if approval params are not supplied.
     */
    async submitTakerSignedOtcOrderWithApprovalAsync(params) {
        let submitRfqmSignedQuoteWithApprovalRes;
        const { approval, trade } = params;
        const rfqmApprovalOpts = approval
            ? await this.createApprovalAsync(approval, trade.order.getHash(), trade.order.takerToken)
            : undefined;
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line prefer-const
        submitRfqmSignedQuoteWithApprovalRes = await this.submitTakerSignedOtcOrderAsync(trade, rfqmApprovalOpts);
        return submitRfqmSignedQuoteWithApprovalRes;
    }
    /**
     * Processes a signed approval sent to the submission endpoint in order to
     * create the approval data needed by the job.
     */
    async createApprovalAsync(approval, tradeHash, takerToken) {
        let { signature } = approval;
        // validate and convert EIP712 context to corresponding Approval object
        const parsedApproval = this._convertEIP712ContextToApproval(approval.eip712, tradeHash);
        // pad approval signature if there are missing bytes
        const paddedSignature = (0, signature_utils_1.padSignature)(signature);
        if (paddedSignature.r !== signature.r || paddedSignature.s !== signature.s) {
            logger_1.logger.warn({ tradeHash, r: paddedSignature.r, s: paddedSignature.s }, 'Got approval signature with missing bytes');
            signature = paddedSignature;
        }
        // perform an eth_call on the approval object and signature
        try {
            const approvalCalldata = await this._blockchainUtils.generateApprovalCalldataAsync(takerToken, parsedApproval, signature);
            await (0, attempt_1.retry)(async () => {
                // Use `estimateGasForAsync` to simulate the transaction. In ethers.js, provider.call and
                // provider.send('eth_call', ...) might not throw exception and the behavior might be dependent
                // on providers. Revisit this later
                return this._blockchainUtils.estimateGasForAsync({ to: takerToken, data: approvalCalldata });
            }, {
                delay: constants_1.ONE_SECOND_MS,
                factor: 1,
                maxAttempts: 3,
                handleError: (error, context, _options) => {
                    const { attemptNum: attemptNumber, attemptsRemaining } = context;
                    logger_1.logger.warn({
                        attemptNumber,
                        attemptsRemaining,
                        errorMessage: error.message,
                        stack: error.stack,
                        tradeHash,
                    }, 'Error during eth_call approval validation. Retrying.');
                },
            });
        }
        catch (error) {
            logger_1.logger.error({ errorMessage: error.message }, 'Eth call approval validation failed');
            throw new Error('Eth call approval validation failed');
        }
        return {
            approval: parsedApproval,
            approvalSignature: signature,
        };
    }
    /**
     * Validates and enqueues the Taker Signed Otc Order for submission
     */
    async submitTakerSignedOtcOrderAsync(params, rfqmApprovalOpts) {
        const { order } = params;
        let { signature: takerSignature } = params;
        const orderHash = order.getHash();
        const takerAddress = order.taker.toLowerCase();
        const makerAddress = order.maker.toLowerCase();
        const takerToken = order.takerToken.toLowerCase();
        const makerToken = order.makerToken.toLowerCase();
        // check that the orderHash is indeed a recognized quote
        const quote = await this._dbUtils.findV2QuoteByOrderHashAsync(orderHash);
        if (!quote) {
            RFQM_SIGNED_QUOTE_NOT_FOUND.inc();
            throw new errors_1.NotFoundError('quote not found');
        }
        // validate that the expiration window is long enough to fill quote
        const currentTimeMs = new Date().getTime();
        if (!order.expiry.times(constants_1.ONE_SECOND_MS).isGreaterThan(currentTimeMs + this._minExpiryDurationMs)) {
            throw new errors_1.ValidationError([
                {
                    field: 'expiryAndNonce',
                    code: errors_1.ValidationErrorCodes.FieldInvalid,
                    reason: `order will expire too soon`,
                },
            ]);
        }
        // validate that there is not a pending transaction for this taker and taker token
        const pendingJobs = await this._dbUtils.findV2JobsWithStatusesAsync([
            types_1.RfqmJobStatus.PendingEnqueued,
            types_1.RfqmJobStatus.PendingProcessing,
            types_1.RfqmJobStatus.PendingLastLookAccepted,
            types_1.RfqmJobStatus.PendingSubmitted,
        ]);
        if (pendingJobs.some((job) => {
            var _a, _b, _c, _d;
            return ((_a = job.order) === null || _a === void 0 ? void 0 : _a.order.taker.toLowerCase()) === ((_b = quote.order) === null || _b === void 0 ? void 0 : _b.order.taker.toLowerCase()) &&
                ((_c = job.order) === null || _c === void 0 ? void 0 : _c.order.takerToken.toLowerCase()) === ((_d = quote.order) === null || _d === void 0 ? void 0 : _d.order.takerToken.toLowerCase()) &&
                // Other logic handles the case where the same order is submitted twice
                job.orderHash !== quote.orderHash;
        })) {
            RFQM_TAKER_AND_TAKERTOKEN_TRADE_EXISTS.labels(this._chainId.toString()).inc();
            throw new api_utils_1.TooManyRequestsError('a pending trade for this taker and takertoken already exists');
        }
        // In the unlikely event that takers submit a signature with a missing byte, pad the signature.
        const paddedSignature = (0, signature_utils_1.padSignature)(takerSignature);
        if (paddedSignature.r !== takerSignature.r || paddedSignature.s !== takerSignature.s) {
            logger_1.logger.warn({ orderHash, r: paddedSignature.r, s: paddedSignature.s }, 'Got taker signature with missing bytes');
            takerSignature = paddedSignature;
        }
        // validate that the given taker signature is valid
        const signerAddress = (0, signature_utils_1.getSignerFromHash)(orderHash, takerSignature).toLowerCase();
        if (signerAddress !== takerAddress) {
            logger_1.logger.warn({ signerAddress, takerAddress, orderHash }, 'Signature is invalid');
            throw new errors_1.ValidationError([
                {
                    field: 'signature',
                    code: errors_1.ValidationErrorCodes.InvalidSignatureOrHash,
                    reason: `signature is not valid`,
                },
            ]);
        }
        // Validate that order is fillable by both the maker and the taker according to balances and/or allowances.
        // If rfqmApprovalOpts is not passed, allowances are not checked at this stage since gasless approval has not been done yet.
        const [makerBalance] = await this._rfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(this._chainId, [
            {
                owner: makerAddress,
                token: makerToken,
            },
        ]);
        const [takerBalance] = rfqmApprovalOpts
            ? await this._blockchainUtils.getTokenBalancesAsync({ owner: takerAddress, token: takerToken })
            : await this._blockchainUtils.getMinOfBalancesAndAllowancesAsync({
                owner: takerAddress,
                token: takerToken,
            });
        if (makerBalance.lt(order.makerAmount) || takerBalance.lt(order.takerAmount)) {
            RFQM_SUBMIT_BALANCE_CHECK_FAILED.labels(makerAddress, this._chainId.toString()).inc();
            logger_1.logger.warn({
                makerBalance,
                takerBalance,
                makerAddress,
                takerAddress,
                orderHash,
                order,
            }, 'Balance check failed while user was submitting');
            throw new errors_1.ValidationError([
                {
                    field: 'n/a',
                    code: errors_1.ValidationErrorCodes.InvalidOrder,
                    reason: `order is not fillable`,
                },
            ]);
        }
        // prepare the job
        let rfqmJobOpts = {
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            orderHash: quote.orderHash,
            createdAt: new Date(),
            expiry: order.expiry,
            chainId: this._chainId,
            integratorId: quote.integratorId ? quote.integratorId : null,
            makerUri: quote.makerUri,
            status: types_1.RfqmJobStatus.PendingEnqueued,
            fee: quote.fee,
            order: quote.order,
            takerSignature,
            affiliateAddress: quote.affiliateAddress,
            isUnwrap: quote.isUnwrap,
            takerSpecifiedSide: quote.takerSpecifiedSide,
        };
        // if approval opts are supplied, add params to job table
        if (rfqmApprovalOpts) {
            rfqmJobOpts = {
                ...rfqmJobOpts,
                ...rfqmApprovalOpts,
            };
        }
        // this insert will fail if a job has already been created, ensuring
        // that a signed quote cannot be queued twice
        try {
            // make sure job data is persisted to Postgres before queueing task
            await this._dbUtils.writeV2JobAsync(rfqmJobOpts);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            await this._enqueueJobAsync(quote.orderHash, types_2.GaslessTypes.OtcOrder);
        }
        catch (error) {
            logger_1.logger.error({ errorMessage: error.message }, 'Failed to queue the quote for submission.');
            throw new errors_1.InternalServerError(`failed to queue the quote for submission, it may have already been submitted`);
        }
        return {
            type: types_2.GaslessTypes.OtcOrder,
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            orderHash: quote.orderHash,
        };
    }
    /**
     * Internal method to retrieve quote context, based on either indicative or firm quote parameters
     */
    _retrieveQuoteContext(params, isFirm) {
        const { sellAmount: takerAmount, buyAmount: makerAmount, sellToken: takerToken, buyToken: originalMakerToken, takerAddress, sellTokenDecimals: takerTokenDecimals, buyTokenDecimals: makerTokenDecimals, integrator, affiliateAddress, } = params;
        const isUnwrap = originalMakerToken === this._nativeTokenAddress;
        const isSelling = takerAmount !== undefined;
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const assetFillAmount = isSelling ? takerAmount : makerAmount;
        let makerToken = originalMakerToken;
        // If the originalMakerToken is the native token, we will trade the wrapped version and unwrap at the end
        if (isUnwrap) {
            makerToken = this._nativeWrappedTokenAddress;
        }
        return {
            workflow: 'rfqm',
            chainId: this._chainId,
            isFirm,
            takerAmount,
            makerAmount,
            takerToken,
            makerToken,
            originalMakerToken,
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            takerAddress: takerAddress,
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            trader: takerAddress,
            txOrigin: this._registryAddress,
            takerTokenDecimals,
            makerTokenDecimals,
            integrator,
            affiliateAddress,
            isUnwrap,
            isSelling,
            assetFillAmount,
            feeModelVersion: this._feeModelVersion,
        };
    }
    /**
     * Internal method to fetch indicative quotes.
     */
    async _fetchIndicativeQuotesAsync(quoteContext, fee) {
        // Extract quote context
        const { isSelling, assetFillAmount, takerToken, makerToken, integrator } = quoteContext;
        // Create Otc Order request options
        const otcOrderParams = quote_server_client_1.QuoteServerClient.makeQueryParameters({
            chainId: this._chainId,
            txOrigin: this._registryAddress,
            takerAddress: constants_1.NULL_ADDRESS,
            marketOperation: isSelling ? types_3.MarketOperation.Sell : types_3.MarketOperation.Buy,
            buyTokenAddress: makerToken,
            sellTokenAddress: takerToken,
            assetFillAmount,
            isLastLook: true,
            fee,
        });
        // If LLR Cooldown is enabled, filter out makers in cooldown before querying the quote server
        let makerIdsInCooldown;
        if (config_1.ENABLE_LLR_COOLDOWN) {
            try {
                makerIdsInCooldown = await this._cacheClient.getMakersInCooldownForPairAsync(this._chainId, makerToken, takerToken);
                // log blocked maker ids
                makerIdsInCooldown.map((makerId) => {
                    RFQM_MAKER_BLOCKED_FOR_LLR_COOLDOWN.labels(makerId, this._chainId.toString(), (0, pair_utils_1.toPairString)(makerToken, takerToken)).inc();
                    logger_1.logger.warn({
                        makerId,
                        makerToken,
                        takerToken,
                        timestamp: Date.now(),
                    }, 'Maker is on cooldown due to a bad last look reject');
                });
            }
            catch (e) {
                logger_1.logger.error({ chainId: this._chainId, makerToken, takerToken, errorMessage: e.message }, 'Encountered an error while filtering makers on LLR cooldown');
            }
        }
        const otcOrderMakerUris = this._rfqMakerManager.getRfqmV2MakerUrisForPair(makerToken, takerToken, integrator.whitelistMakerIds || null, makerIdsInCooldown || null);
        logger_1.logger.info({
            otcOrderParams,
        }, 'otcOrderParams for `batchGetPriceV2Async`');
        const quotes = await this._quoteServerClient.batchGetPriceV2Async(otcOrderMakerUris, integrator, otcOrderParams);
        // Log any quotes that are for the incorrect amount
        quotes.forEach((quote) => {
            const quotedAmount = isSelling ? quote.takerAmount : quote.makerAmount;
            if (quotedAmount.eq(assetFillAmount)) {
                return;
            }
            const modificationType = quotedAmount.gt(assetFillAmount) ? 'overfill' : 'underfill';
            logger_1.logger.warn({
                isSelling,
                overOrUnder: modificationType,
                requestedAmount: assetFillAmount,
                quotedAmount,
                quote,
            }, 'Maker returned an incorrect amount');
            RFQM_MM_RETURNED_DIFFERENT_AMOUNT.labels(quote.makerUri, this._chainId.toString(), modificationType).inc();
        });
        return quotes;
    }
    /**
     * Internal method to fetch firm quotes.
     */
    async _fetchFirmQuotesAsync(quoteContext, fee) {
        const quotes = await this._fetchIndicativeQuotesAsync(quoteContext, fee);
        return this._convertToFirmQuotesAsync(quotes, quoteContext);
    }
    /**
     * Internal method to convert indicative quotes to firm quotes.
     */
    async _convertToFirmQuotesAsync(quotes, quoteContext) {
        const { takerAddress } = quoteContext;
        const currentBucket = (await this._cacheClient.getNextOtcOrderBucketAsync(this._chainId)) % constants_1.GASLESS_OTC_ORDER_NUM_BUCKETS;
        const nowSeconds = Math.floor(Date.now() / constants_1.ONE_SECOND_MS);
        const otcQuotes = quotes.map((q) => this._mapIndicativeQuoteToFirmOtcQuote(q, 
        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        takerAddress, new utils_1.BigNumber(currentBucket), new utils_1.BigNumber(nowSeconds)));
        const firmQuotesWithCorrectChainId = otcQuotes.filter((quote) => {
            if (quote.order.chainId !== this._chainId) {
                logger_1.logger.error({ quote }, 'Received a quote with incorrect chain id');
                return false;
            }
            return true;
        });
        return firmQuotesWithCorrectChainId;
    }
    async _enqueueJobAsync(orderHash, type) {
        await this._sqsProducer.send({
            // wait, it's all order hash?
            // always has been.
            groupId: orderHash,
            id: orderHash,
            body: JSON.stringify({ orderHash, type }),
            deduplicationId: orderHash,
        });
    }
    /**
     * Maps an IndicativeQuote to a FirmOtcQuote. Handles txOrigin, chainId, expiryAndNonce, etc
     */
    _mapIndicativeQuoteToFirmOtcQuote(q, takerAddress, nonceBucket, nonce) {
        return {
            kind: 'otc',
            makerUri: q.makerUri,
            order: new protocol_utils_1.OtcOrder({
                txOrigin: this._registryAddress,
                expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(q.expiry, nonceBucket, nonce),
                maker: q.maker,
                taker: takerAddress,
                makerToken: q.makerToken,
                takerToken: q.takerToken,
                makerAmount: q.makerAmount,
                takerAmount: q.takerAmount,
                chainId: this._chainId,
                verifyingContract: this._contractAddresses.exchangeProxy,
            }),
        };
    }
    /**
     * Validates and converts EIP-712 context to an Approval object.
     * @param kind Type of gasless approval
     * @param eip712 EIP-712 context parsed from the handler
     * @param tradeHash The order hash or metatransaction hash,
     *  only used for logging in case of validation error
     * @returns The Approval object
     */
    // tslint:disable-next-line: prefer-function-over-method
    _convertEIP712ContextToApproval(eip712, tradeHash) {
        const { types, primaryType, domain, message } = eip712;
        switch (primaryType) {
            case 'MetaTransaction': {
                if (!_.isEqual(_.keys(message).sort(), types.MetaTransaction.map((dataField) => dataField.name).sort())) {
                    logger_1.logger.warn({ primaryType, tradeHash }, 'Invalid message field provided for Approval');
                    throw new errors_1.ValidationError([
                        {
                            field: 'message',
                            code: errors_1.ValidationErrorCodes.FieldInvalid,
                            reason: `Invalid message field provided for Approval of primaryType ${primaryType}`,
                        },
                    ]);
                }
                const executeMetaTransactionApproval = {
                    kind: types_2.GaslessApprovalTypes.ExecuteMetaTransaction,
                    eip712: {
                        types,
                        primaryType,
                        domain,
                        message: {
                            nonce: message.nonce,
                            from: message.from,
                            functionSignature: message.functionSignature,
                        },
                    },
                };
                return executeMetaTransactionApproval;
            }
            case 'Permit': {
                if (!_.isEqual(_.keys(message).sort(), types.Permit.map((dataField) => dataField.name).sort())) {
                    logger_1.logger.warn({ primaryType, tradeHash }, 'Invalid message field provided for Approval');
                    throw new errors_1.ValidationError([
                        {
                            field: 'message',
                            code: errors_1.ValidationErrorCodes.FieldInvalid,
                            reason: `Invalid message field provided for Approval of primaryType ${primaryType}`,
                        },
                    ]);
                }
                const permitApproval = {
                    kind: types_2.GaslessApprovalTypes.Permit,
                    eip712: {
                        types,
                        primaryType,
                        domain,
                        message: {
                            owner: message.owner,
                            spender: message.spender,
                            value: message.value,
                            nonce: message.nonce,
                            deadline: message.deadline,
                        },
                    },
                };
                return permitApproval;
            }
            default:
                ((_x) => {
                    throw new Error('unreachable');
                })(primaryType);
        }
    }
}
exports.RfqmService = RfqmService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,