{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/services/rfqm_service.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/services/rfqm_service.ts"],"sourcesContent":["// tslint:disable:max-file-line-count\nimport { TooManyRequestsError } from '@0x/api-utils';\nimport { AssetSwapperContractAddresses } from '@0x/asset-swapper';\nimport { OtcOrder, ZERO } from '@0x/protocol-utils';\nimport {\n    getTokenMetadataIfExists,\n    nativeTokenSymbol,\n    nativeWrappedTokenSymbol,\n    TokenMetadata,\n} from '@0x/token-metadata';\nimport { BigNumber } from '@0x/utils';\nimport { Web3Wrapper } from '@0x/web3-wrapper';\nimport { retry } from '@lifeomic/attempt';\nimport { Producer as KafkaProducer } from 'kafkajs';\nimport * as _ from 'lodash';\nimport { Counter } from 'prom-client';\nimport { Producer } from 'sqs-producer';\n\nimport { ENABLE_LLR_COOLDOWN, RFQM_MAINTENANCE_MODE } from '../config';\nimport { GASLESS_OTC_ORDER_NUM_BUCKETS, NULL_ADDRESS, ONE_SECOND_MS } from '../core/constants';\nimport { MetaTransactionSubmissionEntity, RfqmV2TransactionSubmissionEntity } from '../entities';\nimport { RfqmV2JobApprovalOpts, RfqmV2JobConstructorOpts } from '../entities/RfqmV2JobEntity';\nimport {\n    JobFailureReason,\n    RfqmJobStatus,\n    RfqmTransactionSubmissionStatus,\n    RfqmTransactionSubmissionType,\n} from '../entities/types';\nimport { REASON_ON_STATUS_ERROR_RESPONSE_ENABLED } from '../config';\nimport { InternalServerError, NotFoundError, ValidationError, ValidationErrorCodes } from '../core/errors';\nimport { logger } from '../logger';\nimport { feeToStoredFee } from '../core/fee_utils';\nimport { toPairString } from '../core/pair_utils';\nimport {\n    Eip712DataField,\n    ExecuteMetaTransactionApproval,\n    ExecuteMetaTransactionEip712Context,\n    Fee,\n    FeeModelVersion,\n    FirmOtcQuote,\n    GaslessApprovalTypes,\n    GaslessTypes,\n    IndicativeQuote,\n    PermitApproval,\n    PermitEip712Context,\n} from '../core/types';\nimport { CacheClient } from '../utils/cache_client';\nimport { getBestQuote } from '../utils/quote_comparison_utils';\nimport { ExtendedQuoteReport, quoteReportUtils } from '../utils/quote_report_utils';\nimport { QuoteServerClient } from '../utils/quote_server_client';\nimport { otcOrderToStoredOtcOrder, RfqmDbUtils } from '../utils/rfqm_db_utils';\nimport { computeHealthCheckAsync, HealthCheckResult } from '../utils/rfqm_health_check';\nimport { RfqBlockchainUtils } from '../utils/rfq_blockchain_utils';\nimport { RfqMakerManager } from '../utils/rfq_maker_manager';\nimport { getSignerFromHash, padSignature } from '../utils/signature_utils';\nimport { TokenMetadataManager } from '../utils/TokenMetadataManager';\n\nimport { FeeService } from './fee_service';\nimport { RfqMakerBalanceCacheService } from './rfq_maker_balance_cache_service';\nimport {\n    ApprovalResponse,\n    FetchFirmQuoteParams,\n    FetchIndicativeQuoteParams,\n    FetchIndicativeQuoteResponse,\n    OtcOrderRfqmQuoteResponse,\n    OtcOrderSubmitRfqmSignedQuoteParams,\n    OtcOrderSubmitRfqmSignedQuoteResponse,\n    QuoteContext,\n    StatusResponse,\n    SubmitApprovalParams,\n    SubmitRfqmSignedQuoteWithApprovalParams,\n    SubmitRfqmSignedQuoteWithApprovalResponse,\n    TransactionDetails,\n} from './types';\nimport { MarketOperation } from '@0x/types';\n\nconst RFQM_QUOTE_INSERTED = new Counter({\n    name: 'rfqm_quote_inserted',\n    help: 'An RfqmQuote was inserted in the DB',\n    labelNames: ['apiKey', 'integratorId', 'makerUri'],\n});\n\nconst RFQM_SIGNED_QUOTE_NOT_FOUND = new Counter({\n    name: 'rfqm_signed_quote_not_found',\n    labelNames: ['chain_id'],\n    help: 'A submitted quote did not match any stored quotes',\n});\nconst RFQM_TAKER_AND_TAKERTOKEN_TRADE_EXISTS = new Counter({\n    name: 'rfqm_signed_quote_taker_and_takertoken_trade_exists',\n    labelNames: ['chain_id'],\n    help: 'A trade was submitted when the system already had a pending trade for the same taker and takertoken',\n});\nconst RFQM_SUBMIT_BALANCE_CHECK_FAILED = new Counter({\n    name: 'rfqm_submit_balance_check_failed',\n    labelNames: ['makerAddress', 'chain_id'],\n    help: 'A trade was submitted but our on-chain balance check failed',\n});\n\nconst RFQM_MAKER_BLOCKED_FOR_LLR_COOLDOWN = new Counter({\n    name: 'rfqm_maker_blocked_for_llr_cooldown',\n    help: 'A maker get blocked because of LLR cooldown',\n    labelNames: ['maker_id', 'chain_id', 'pair_key'],\n});\n\nconst RFQM_MM_RETURNED_DIFFERENT_AMOUNT = new Counter({\n    name: 'rfqm_mm_returned_different_amount_total',\n    help: 'A maker responded a quote with different amount than requested',\n    labelNames: ['maker_uri', 'chain_id', 'modification_type'],\n});\n\nconst PRICE_DECIMAL_PLACES = 6;\n\nconst getTokenAddressFromSymbol = (symbol: string, chainId: number): string => {\n    return (getTokenMetadataIfExists(symbol, chainId) as TokenMetadata).tokenAddress;\n};\n\n/**\n * RfqmService is the coordination layer for HTTP based RFQM flows.\n */\nexport class RfqmService {\n    private readonly _nativeTokenAddress: string;\n    private readonly _nativeTokenSymbol: string;\n    private readonly _nativeWrappedTokenSymbol: string;\n    private readonly _nativeWrappedTokenAddress: string;\n\n    private static _getSellAmountGivenBuyAmountAndQuote(\n        buyAmount: BigNumber,\n        quotedTakerAmount: BigNumber,\n        quotedMakerAmount: BigNumber,\n    ): BigNumber {\n        // Solving for x given the following proportion:\n        // x / buyAmount = quotedTakerAmount / quotedMakerAmount\n        return quotedTakerAmount.div(quotedMakerAmount).times(buyAmount).decimalPlaces(0);\n    }\n\n    private static _getBuyAmountGivenSellAmountAndQuote(\n        sellAmount: BigNumber,\n        quotedTakerAmount: BigNumber,\n        quotedMakerAmount: BigNumber,\n    ): BigNumber {\n        // Solving for y given the following proportion:\n        // y / sellAmount =  quotedMakerAmount / quotedTakerAmount\n        return quotedMakerAmount.div(quotedTakerAmount).times(sellAmount).decimalPlaces(0);\n    }\n\n    /**\n     * Transform a transaction submission to type `TransactionDetails`.\n     *\n     * @returns Corresponding `TransactionDetails` or null if transaction hash is not available.\n     */\n    private static _transformTransactionSubmission(\n        transactionSubmission: Pick<\n            RfqmV2TransactionSubmissionEntity | MetaTransactionSubmissionEntity,\n            'createdAt' | 'transactionHash'\n        >,\n    ): TransactionDetails | null {\n        const { transactionHash: hash, createdAt } = transactionSubmission;\n        return hash ? { hash, timestamp: createdAt.getTime() } : null;\n    }\n\n    /**\n     * Get details of the successful transaction submission (there will only be one).\n     *\n     * @param opts Options object that contains:\n     *             - `hash`: The hash of the order or metatransaction.\n     *             - `type`: The type of the transaction submissions.\n     *             - `transactionSubmssions`: List of transaction submissions to filter.\n     * @returns The details (hash and timestamp) of the successful transaction submission.\n     * @throws - When the number of the successful transaction submission is not 1\n     *         - The successful transaction submission does not have transaction hash\n     */\n    private static _getSuccessfulTransactionSubmissionDetails(opts: {\n        hash: string;\n        type: RfqmTransactionSubmissionType;\n        transactionSubmssions: Pick<\n            RfqmV2TransactionSubmissionEntity | MetaTransactionSubmissionEntity,\n            'createdAt' | 'status' | 'transactionHash'\n        >[];\n    }): TransactionDetails {\n        const { hash, type, transactionSubmssions } = opts;\n        const successfulTransactionSubmissions = transactionSubmssions.filter(\n            (s) =>\n                s.status === RfqmTransactionSubmissionStatus.SucceededUnconfirmed ||\n                s.status === RfqmTransactionSubmissionStatus.SucceededConfirmed,\n        );\n        if (successfulTransactionSubmissions.length !== 1) {\n            throw new Error(\n                `Expected exactly one successful transaction submission of type ${type} for hash ${hash}; found ${successfulTransactionSubmissions.length}`,\n            );\n        }\n        const successfulTransactionSubmission = successfulTransactionSubmissions[0];\n        const successfulTransactionSubmissionDetails = this._transformTransactionSubmission(\n            successfulTransactionSubmission,\n        );\n        if (!successfulTransactionSubmissionDetails) {\n            throw new Error(`Successful transaction of type ${type} does not have a hash ${hash}`);\n        }\n\n        return successfulTransactionSubmissionDetails;\n    }\n\n    private static _jobFailureStatusToReason(failureStatus: RfqmJobStatus): JobFailureReason {\n        switch (failureStatus) {\n            case RfqmJobStatus.FailedEthCallFailed:\n                return JobFailureReason.TransactionSimulationFailed;\n            case RfqmJobStatus.FailedExpired:\n                return JobFailureReason.OrderExpired;\n            case RfqmJobStatus.FailedLastLookDeclined:\n                return JobFailureReason.LastLookDeclined;\n            case RfqmJobStatus.FailedSignFailed:\n                return JobFailureReason.MarketMakerSignatureError;\n            case RfqmJobStatus.FailedRevertedConfirmed:\n            case RfqmJobStatus.FailedRevertedUnconfirmed:\n                return JobFailureReason.TransactionReverted;\n            default:\n                return JobFailureReason.InternalError;\n        }\n    }\n\n    constructor(\n        private readonly _chainId: number,\n        private readonly _feeService: FeeService,\n        private readonly _feeModelVersion: FeeModelVersion,\n        private readonly _contractAddresses: AssetSwapperContractAddresses,\n        private readonly _registryAddress: string,\n        private readonly _blockchainUtils: RfqBlockchainUtils,\n        private readonly _dbUtils: RfqmDbUtils,\n        private readonly _sqsProducer: Producer,\n        private readonly _quoteServerClient: QuoteServerClient,\n        private readonly _minExpiryDurationMs: number,\n        private readonly _cacheClient: CacheClient,\n        private readonly _rfqMakerBalanceCacheService: RfqMakerBalanceCacheService,\n        private readonly _rfqMakerManager: RfqMakerManager,\n        private readonly _tokenMetadataManager: TokenMetadataManager,\n        private readonly _kafkaProducer?: KafkaProducer,\n        private readonly _quoteReportTopic?: string,\n    ) {\n        this._nativeTokenSymbol = nativeTokenSymbol(this._chainId);\n        this._nativeTokenAddress = getTokenAddressFromSymbol(this._nativeTokenSymbol, this._chainId);\n        this._nativeWrappedTokenSymbol = nativeWrappedTokenSymbol(this._chainId);\n        this._nativeWrappedTokenAddress = getTokenAddressFromSymbol(this._nativeWrappedTokenSymbol, this._chainId);\n    }\n\n    /**\n     * Passthrough to TokenMetadataManager's `getTokenDecimalsAsync` method\n     */\n    public async getTokenDecimalsAsync(tokenAddress: string): Promise<number> {\n        return this._tokenMetadataManager.getTokenDecimalsAsync(tokenAddress);\n    }\n\n    /**\n     * Fetch the best indicative quote available. Returns null if no valid quotes found\n     */\n    public async fetchIndicativeQuoteAsync(\n        params: FetchIndicativeQuoteParams,\n        extendedQuoteReportSubmissionBy: ExtendedQuoteReport['submissionBy'] = 'rfqm',\n    ): Promise<FetchIndicativeQuoteResponse | null> {\n        const affiliateAddress = params.affiliateAddress ?? params.integrator.affiliateAddress;\n\n        // Retrieve quote context\n        const quoteContext = this._retrieveQuoteContext({ ...params, affiliateAddress }, /* isFirm */ false);\n        const {\n            isFirm,\n            takerAmount,\n            makerAmount,\n            takerToken,\n            makerToken,\n            originalMakerToken,\n            takerTokenDecimals,\n            makerTokenDecimals,\n            takerAddress,\n            isSelling,\n            assetFillAmount,\n            integrator,\n        } = quoteContext;\n\n        // (Optimization) When `quotesWithGasFee` is returned, we can use this value and revise it, to avoid another fetch to MMs\n        const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await this._feeService.calculateFeeAsync(\n            quoteContext,\n            this._fetchIndicativeQuotesAsync.bind(this),\n        );\n\n        // Calculate fees (other than gas fee) to charge MMs\n        const otherFeesAmount = feeWithDetails.amount.minus(feeWithDetails.details.gasFeeAmount);\n\n        const finalQuotes = quotesWithGasFee\n            ? await this._feeService.reviseQuotesAsync(quotesWithGasFee, otherFeesAmount, quoteContext)\n            : await this._fetchIndicativeQuotesAsync(quoteContext, feeWithDetails);\n\n        // (Quote Report) If otherFees > 0, then we \"revised\" the quotes from MMs. We want to save both the original quotes (aka intermediateQuotes) and the revised (finalQuotes)\n        const intermediateQuotes = quotesWithGasFee && otherFeesAmount.gt(ZERO) ? quotesWithGasFee : [];\n\n        // Get the best quote\n        const bestQuote = getBestQuote(\n            finalQuotes,\n            isSelling,\n            takerToken,\n            makerToken,\n            assetFillAmount,\n            this._minExpiryDurationMs,\n        );\n\n        const isLiquidityAvailable = bestQuote !== null;\n\n        // Quote Report\n        if (this._kafkaProducer) {\n            await quoteReportUtils.publishRFQMQuoteReportAsync(\n                {\n                    isFirmQuote: isFirm,\n                    taker: takerAddress,\n                    buyTokenAddress: originalMakerToken,\n                    sellTokenAddress: takerToken,\n                    buyAmount: makerAmount,\n                    sellAmount: takerAmount,\n                    integratorId: integrator?.integratorId,\n                    finalQuotes,\n                    intermediateQuotes,\n                    bestQuote,\n                    fee: feeToStoredFee(feeWithDetails),\n                    ammQuoteUniqueId,\n                    isLiquidityAvailable,\n                },\n                this._kafkaProducer,\n                this._quoteReportTopic,\n                extendedQuoteReportSubmissionBy,\n            );\n        }\n\n        // No quotes found\n        if (!isLiquidityAvailable) {\n            return null;\n        }\n\n        // Prepare the price\n        const makerAmountInUnit = Web3Wrapper.toUnitAmount(bestQuote.makerAmount, makerTokenDecimals);\n        const takerAmountInUnit = Web3Wrapper.toUnitAmount(bestQuote.takerAmount, takerTokenDecimals);\n        const price = isSelling ? makerAmountInUnit.div(takerAmountInUnit) : takerAmountInUnit.div(makerAmountInUnit);\n        // The way the BigNumber round down behavior (https://mikemcl.github.io/bignumber.js/#dp) works requires us\n        // to add 1 to PRICE_DECIMAL_PLACES in order to actually come out with the decimal places specified.\n        const roundedPrice = price.decimalPlaces(PRICE_DECIMAL_PLACES + 1, BigNumber.ROUND_DOWN);\n\n        // Prepare response\n        return {\n            price: roundedPrice,\n            gas: feeWithDetails.details.gasPrice,\n            buyAmount: bestQuote.makerAmount,\n            buyTokenAddress: originalMakerToken,\n            sellAmount: bestQuote.takerAmount,\n            sellTokenAddress: bestQuote.takerToken,\n            allowanceTarget: this._contractAddresses.exchangeProxy,\n        };\n    }\n\n    /**\n     * Fetch the best firm quote available, including a metatransaction. Returns null if no valid quotes found\n     */\n    public async fetchFirmQuoteAsync(\n        params: FetchFirmQuoteParams,\n        extendedQuoteReportSubmissionBy: ExtendedQuoteReport['submissionBy'] = 'rfqm',\n    ): Promise<{ quote: OtcOrderRfqmQuoteResponse | null; quoteReportId: string | null }> {\n        const affiliateAddress = params.affiliateAddress ?? params.integrator.affiliateAddress;\n        // Retrieve quote context\n        const quoteContext = this._retrieveQuoteContext({ ...params, affiliateAddress }, /* isFirm */ true);\n        const {\n            isFirm,\n            takerAmount,\n            makerAmount,\n            takerToken,\n            makerToken,\n            originalMakerToken,\n            takerTokenDecimals,\n            makerTokenDecimals,\n            takerAddress,\n            integrator,\n            isUnwrap,\n            isSelling,\n            assetFillAmount,\n        } = quoteContext;\n\n        // (Optimization) When `quotesWithGasFee` is returned, we can sometimes reuse it, to avoid another fetch to MMs\n        // NOTE: this optimization differs from the optimization for indicative quotes because we do NOT revise firm quotes\n        const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await this._feeService.calculateFeeAsync(\n            quoteContext,\n            this._fetchIndicativeQuotesAsync.bind(this),\n        );\n\n        // Calculate fees (other than gas fee) to charge MMs. If there are other fees, we don't reuse `quotesWithGasFee`\n        const otherFeesAmount = feeWithDetails.amount.minus(feeWithDetails.details.gasFeeAmount);\n\n        // If `quotesWithGasFee` have been obtained and there are no other fees, reuse the quotes. Otherwise call MMs with full fee to get new quotes.\n        const finalQuotes =\n            quotesWithGasFee && otherFeesAmount.eq(ZERO)\n                ? await this._convertToFirmQuotesAsync(quotesWithGasFee, quoteContext)\n                : await this._fetchFirmQuotesAsync(quoteContext, feeWithDetails);\n\n        // (Quote Report) If `quotesWithGasFee` have not been reused, save them as intermediate quotes\n        const intermediateQuotes = quotesWithGasFee && otherFeesAmount.gt(ZERO) ? quotesWithGasFee : [];\n\n        // (Maker Balance Cache) Fetch maker balances to validate whether quotes are fully fillable\n        let quotedMakerBalances: BigNumber[] | undefined;\n        const quotedERC20Owners = finalQuotes.map((quote) => {\n            return {\n                owner: quote.order.maker,\n                token: makerToken,\n            };\n        });\n        try {\n            quotedMakerBalances = await this._rfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(\n                this._chainId,\n                quotedERC20Owners,\n            );\n        } catch (e) {\n            logger.error(\n                { chainId: this._chainId, quotedERC20Owners, errorMessage: e.message },\n                'Failed to fetch maker balances to validate firm quotes',\n            );\n        }\n\n        // Get the best quote\n        const bestQuote = getBestQuote(\n            finalQuotes,\n            isSelling,\n            takerToken,\n            makerToken,\n            assetFillAmount,\n            this._minExpiryDurationMs,\n            quotedMakerBalances,\n        );\n\n        const isLiquidityAvailable = bestQuote !== null;\n\n        const storedFeeWithDetails = feeToStoredFee(feeWithDetails);\n\n        let quoteReportId: string | null = null;\n        // Quote Report\n        if (this._kafkaProducer) {\n            quoteReportId = await quoteReportUtils.publishRFQMQuoteReportAsync(\n                {\n                    isFirmQuote: isFirm,\n                    taker: takerAddress,\n                    buyTokenAddress: originalMakerToken,\n                    sellTokenAddress: takerToken,\n                    buyAmount: makerAmount,\n                    sellAmount: takerAmount,\n                    integratorId: integrator?.integratorId,\n                    finalQuotes,\n                    intermediateQuotes,\n                    bestQuote,\n                    fee: storedFeeWithDetails,\n                    ammQuoteUniqueId,\n                    isLiquidityAvailable,\n                },\n                this._kafkaProducer,\n                this._quoteReportTopic,\n                extendedQuoteReportSubmissionBy,\n            );\n        }\n\n        // No quote found\n        if (!isLiquidityAvailable) {\n            return { quote: null, quoteReportId };\n        }\n\n        // Get the makerUri\n        const makerUri = bestQuote.makerUri;\n        if (makerUri === undefined) {\n            logger.error({ makerAddress: bestQuote.order.maker }, 'makerUri unknown for maker address');\n            throw new Error(`makerUri unknown for maker address ${bestQuote.order.maker}`);\n        }\n\n        // Prepare the price\n        const makerAmountInUnit = Web3Wrapper.toUnitAmount(bestQuote.order.makerAmount, makerTokenDecimals);\n        const takerAmountInUnit = Web3Wrapper.toUnitAmount(bestQuote.order.takerAmount, takerTokenDecimals);\n        const price = isSelling ? makerAmountInUnit.div(takerAmountInUnit) : takerAmountInUnit.div(makerAmountInUnit);\n        // The way the BigNumber round down behavior (https://mikemcl.github.io/bignumber.js/#dp) works requires us\n        // to add 1 to PRICE_DECIMAL_PLACES in order to actually come out with the decimal places specified.\n        const roundedPrice = price.decimalPlaces(PRICE_DECIMAL_PLACES + 1, BigNumber.ROUND_DOWN);\n\n        // Prepare the final takerAmount and makerAmount\n        const sellAmount = isSelling\n            ? // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              takerAmount!\n            : RfqmService._getSellAmountGivenBuyAmountAndQuote(\n                  // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                  makerAmount!,\n                  bestQuote.order.takerAmount,\n                  bestQuote.order.makerAmount,\n              );\n\n        const buyAmount = isSelling\n            ? RfqmService._getBuyAmountGivenSellAmountAndQuote(\n                  // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                  takerAmount!,\n                  bestQuote.order.takerAmount,\n                  bestQuote.order.makerAmount,\n              )\n            : // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              makerAmount!;\n\n        // Get the Order and its hash\n        const orderHash = bestQuote.order.getHash();\n\n        const otcOrder = bestQuote.order;\n        await this._dbUtils.writeV2QuoteAsync({\n            orderHash,\n            chainId: this._chainId,\n            fee: storedFeeWithDetails,\n            order: otcOrderToStoredOtcOrder(otcOrder),\n            makerUri,\n            affiliateAddress,\n            integratorId: integrator.integratorId,\n            isUnwrap,\n            takerSpecifiedSide: params.sellAmount ? 'takerToken' : 'makerToken',\n        });\n\n        const approval = params.checkApproval\n            ? // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              await this.getGaslessApprovalResponseAsync(takerAddress!, takerToken, sellAmount)\n            : null;\n\n        RFQM_QUOTE_INSERTED.labels(integrator.integratorId, integrator.integratorId, makerUri).inc();\n        return {\n            quote: {\n                type: GaslessTypes.OtcOrder,\n                price: roundedPrice,\n                gas: feeWithDetails.details.gasPrice,\n                buyAmount,\n                buyTokenAddress: originalMakerToken,\n                sellAmount,\n                sellTokenAddress: bestQuote.order.takerToken,\n                allowanceTarget: this._contractAddresses.exchangeProxy,\n                order: bestQuote.order,\n                orderHash,\n                // use approval variable directly is not ideal as we don't want to include approval field if `approval` is null\n                ...(approval && { approval }),\n            },\n            quoteReportId,\n        };\n    }\n\n    /**\n     * Get the value of the approval response in firm quote responses. The approval response contains whether an approval is required, is gasless approval\n     * is available for the token (optional), the type of the gasless approval (optional) and the EIP712 context (optional).\n     *\n     * @param takerAddress The address of the taker.\n     * @param tokenToApprove Token address to be approved.\n     * @param sellAmount Amount of token to sell in base unit.\n     * @returns The approval response.\n     */\n    public async getGaslessApprovalResponseAsync(\n        takerAddress: string,\n        tokenToApprove: string,\n        sellAmount: BigNumber,\n    ): Promise<ApprovalResponse> {\n        const allowance = await this._blockchainUtils.getAllowanceAsync(\n            tokenToApprove,\n            takerAddress,\n            this._blockchainUtils.getExchangeProxyAddress(),\n        );\n        const isRequired = allowance.lte(sellAmount);\n        if (!isRequired) {\n            return {\n                isRequired,\n            };\n        }\n\n        const gaslessApproval = await this._blockchainUtils.getGaslessApprovalAsync(\n            this._chainId,\n            tokenToApprove,\n            takerAddress,\n        );\n        const isGaslessAvailable = gaslessApproval !== null;\n        if (!isGaslessAvailable) {\n            return {\n                isRequired,\n                isGaslessAvailable,\n            };\n        }\n\n        return {\n            isRequired,\n            isGaslessAvailable,\n            type: gaslessApproval.kind,\n            eip712: gaslessApproval.eip712,\n        };\n    }\n\n    public async getStatusAsync(tradeHash: string): Promise<StatusResponse | null> {\n        const transformSubmissions = (\n            submissions: RfqmV2TransactionSubmissionEntity[] | MetaTransactionSubmissionEntity[],\n        ) => {\n            // `_transformTransactionSubmission` is a static method so no-unbound-method does not apply here\n            // tslint:disable-next-line:no-unbound-method\n            return submissions.map(RfqmService._transformTransactionSubmission).flatMap((s) => (s ? s : []));\n        };\n\n        const job = await Promise.all([\n            this._dbUtils.findV2JobByOrderHashAsync(tradeHash),\n            this._dbUtils.findMetaTransactionJobByMetaTransactionHashAsync(tradeHash),\n        ]).then((jobs) => jobs.find((x) => x));\n\n        if (!job) {\n            return null;\n        }\n\n        const { status, expiry } = job;\n\n        if (status === RfqmJobStatus.PendingEnqueued && expiry.multipliedBy(ONE_SECOND_MS).lt(Date.now())) {\n            // the workers are dead/on vacation and the expiration time has passed\n            return {\n                status: 'failed',\n                transactions: [],\n                ...(REASON_ON_STATUS_ERROR_RESPONSE_ENABLED && {\n                    reason: JobFailureReason.OrderExpired,\n                }),\n            };\n        }\n\n        const tradeTransactionSubmissions =\n            job.kind === 'rfqm_v2_job'\n                ? await this._dbUtils.findV2TransactionSubmissionsByOrderHashAsync(\n                      job.orderHash,\n                      RfqmTransactionSubmissionType.Trade,\n                  )\n                : await this._dbUtils.findMetaTransactionSubmissionsByJobIdAsync(\n                      job.id,\n                      RfqmTransactionSubmissionType.Trade,\n                  );\n        const shouldIncludeApproval = !!job.approval;\n        let approvalTransactionSubmissions: RfqmV2TransactionSubmissionEntity[] | MetaTransactionSubmissionEntity[] =\n            [];\n        if (shouldIncludeApproval) {\n            approvalTransactionSubmissions =\n                job.kind === 'rfqm_v2_job'\n                    ? await this._dbUtils.findV2TransactionSubmissionsByOrderHashAsync(\n                          job.orderHash,\n                          RfqmTransactionSubmissionType.Approval,\n                      )\n                    : await this._dbUtils.findMetaTransactionSubmissionsByJobIdAsync(\n                          job.id,\n                          RfqmTransactionSubmissionType.Approval,\n                      );\n        }\n\n        switch (status) {\n            case RfqmJobStatus.PendingEnqueued:\n            case RfqmJobStatus.PendingProcessing:\n            case RfqmJobStatus.PendingLastLookAccepted:\n                return { status: 'pending', transactions: [] };\n            case RfqmJobStatus.PendingSubmitted:\n                return {\n                    status: 'submitted',\n                    transactions: transformSubmissions(tradeTransactionSubmissions),\n                    ...(shouldIncludeApproval && {\n                        approvalTransactions: transformSubmissions(approvalTransactionSubmissions),\n                    }),\n                };\n            case RfqmJobStatus.FailedEthCallFailed:\n            case RfqmJobStatus.FailedExpired:\n            case RfqmJobStatus.FailedLastLookDeclined:\n            case RfqmJobStatus.FailedPresignValidationFailed:\n            case RfqmJobStatus.FailedRevertedConfirmed:\n            case RfqmJobStatus.FailedRevertedUnconfirmed:\n            case RfqmJobStatus.FailedSignFailed:\n            case RfqmJobStatus.FailedSubmitFailed:\n            case RfqmJobStatus.FailedValidationNoCallData:\n            case RfqmJobStatus.FailedValidationNoFee:\n            case RfqmJobStatus.FailedValidationNoMakerUri:\n            case RfqmJobStatus.FailedValidationNoOrder:\n            case RfqmJobStatus.FailedValidationNoTakerSignature:\n                return {\n                    status: 'failed',\n                    transactions: transformSubmissions(tradeTransactionSubmissions),\n                    ...(shouldIncludeApproval && {\n                        approvalTransactions: transformSubmissions(approvalTransactionSubmissions),\n                    }),\n                    ...(REASON_ON_STATUS_ERROR_RESPONSE_ENABLED && {\n                        reason: RfqmService._jobFailureStatusToReason(status),\n                    }),\n                };\n            case RfqmJobStatus.SucceededConfirmed:\n            case RfqmJobStatus.SucceededUnconfirmed:\n                return {\n                    status: status === RfqmJobStatus.SucceededUnconfirmed ? 'succeeded' : 'confirmed',\n                    transactions: [\n                        RfqmService._getSuccessfulTransactionSubmissionDetails({\n                            hash: job.getHash(),\n                            type: RfqmTransactionSubmissionType.Trade,\n                            transactionSubmssions: tradeTransactionSubmissions,\n                        }),\n                    ],\n                    ...(shouldIncludeApproval && {\n                        approvalTransactions: [\n                            RfqmService._getSuccessfulTransactionSubmissionDetails({\n                                hash: job.getHash(),\n                                type: RfqmTransactionSubmissionType.Approval,\n                                transactionSubmssions: approvalTransactionSubmissions,\n                            }),\n                        ],\n                    }),\n                };\n            default:\n                ((_x: never): never => {\n                    throw new Error('Unreachable');\n                })(status);\n        }\n    }\n\n    /**\n     * Runs checks to determine the health of the RFQm system. The results may be distilled to a format needed by integrators.\n     */\n    public async runHealthCheckAsync(): Promise<HealthCheckResult> {\n        const heartbeats = await this._dbUtils.findRfqmWorkerHeartbeatsAsync(this._chainId);\n        let gasPrice: BigNumber | undefined;\n        try {\n            gasPrice = await this._feeService.getGasPriceEstimationAsync();\n        } catch (error) {\n            logger.warn({ errorMessage: error.message }, 'Failed to get gas price for health check');\n        }\n        return computeHealthCheckAsync(\n            RFQM_MAINTENANCE_MODE,\n            this._rfqMakerManager.getRfqmV2MakerOfferings(),\n            this._sqsProducer,\n            heartbeats,\n            this._chainId,\n            gasPrice,\n        );\n    }\n\n    /**\n     * Validates and enqueues the Taker Signed Otc Order with approval for submission.\n     * Can also be used to submit order without approval if approval params are not supplied.\n     */\n    public async submitTakerSignedOtcOrderWithApprovalAsync<\n        T extends ExecuteMetaTransactionEip712Context | PermitEip712Context,\n    >(params: SubmitRfqmSignedQuoteWithApprovalParams<T>): Promise<SubmitRfqmSignedQuoteWithApprovalResponse> {\n        let submitRfqmSignedQuoteWithApprovalRes: SubmitRfqmSignedQuoteWithApprovalResponse;\n        const { approval, trade } = params;\n\n        const rfqmApprovalOpts = approval\n            ? await this.createApprovalAsync(approval, trade.order.getHash(), trade.order.takerToken)\n            : undefined;\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line prefer-const\n        submitRfqmSignedQuoteWithApprovalRes = await this.submitTakerSignedOtcOrderAsync(trade, rfqmApprovalOpts);\n\n        return submitRfqmSignedQuoteWithApprovalRes;\n    }\n\n    /**\n     * Processes a signed approval sent to the submission endpoint in order to\n     * create the approval data needed by the job.\n     */\n    public async createApprovalAsync<T extends ExecuteMetaTransactionEip712Context | PermitEip712Context>(\n        approval: SubmitApprovalParams<T>,\n        tradeHash: string,\n        takerToken: string,\n    ): Promise<RfqmV2JobApprovalOpts> {\n        let { signature } = approval;\n\n        // validate and convert EIP712 context to corresponding Approval object\n        const parsedApproval = this._convertEIP712ContextToApproval(approval.eip712, tradeHash);\n\n        // pad approval signature if there are missing bytes\n        const paddedSignature = padSignature(signature);\n        if (paddedSignature.r !== signature.r || paddedSignature.s !== signature.s) {\n            logger.warn(\n                { tradeHash, r: paddedSignature.r, s: paddedSignature.s },\n                'Got approval signature with missing bytes',\n            );\n            signature = paddedSignature;\n        }\n\n        // perform an eth_call on the approval object and signature\n        try {\n            const approvalCalldata = await this._blockchainUtils.generateApprovalCalldataAsync(\n                takerToken,\n                parsedApproval,\n                signature,\n            );\n            await retry(\n                async () => {\n                    // Use `estimateGasForAsync` to simulate the transaction. In ethers.js, provider.call and\n                    // provider.send('eth_call', ...) might not throw exception and the behavior might be dependent\n                    // on providers. Revisit this later\n                    return this._blockchainUtils.estimateGasForAsync({ to: takerToken, data: approvalCalldata });\n                },\n                {\n                    delay: ONE_SECOND_MS,\n                    factor: 1,\n                    maxAttempts: 3,\n                    handleError: (error, context, _options) => {\n                        const { attemptNum: attemptNumber, attemptsRemaining } = context;\n                        logger.warn(\n                            {\n                                attemptNumber,\n                                attemptsRemaining,\n                                errorMessage: error.message,\n                                stack: error.stack,\n                                tradeHash,\n                            },\n                            'Error during eth_call approval validation. Retrying.',\n                        );\n                    },\n                },\n            );\n        } catch (error) {\n            logger.error({ errorMessage: error.message }, 'Eth call approval validation failed');\n            throw new Error('Eth call approval validation failed');\n        }\n\n        return {\n            approval: parsedApproval,\n            approvalSignature: signature,\n        };\n    }\n\n    /**\n     * Validates and enqueues the Taker Signed Otc Order for submission\n     */\n    public async submitTakerSignedOtcOrderAsync(\n        params: OtcOrderSubmitRfqmSignedQuoteParams,\n        rfqmApprovalOpts?: RfqmV2JobApprovalOpts,\n    ): Promise<OtcOrderSubmitRfqmSignedQuoteResponse> {\n        const { order } = params;\n        let { signature: takerSignature } = params;\n        const orderHash = order.getHash();\n        const takerAddress = order.taker.toLowerCase();\n        const makerAddress = order.maker.toLowerCase();\n        const takerToken = order.takerToken.toLowerCase();\n        const makerToken = order.makerToken.toLowerCase();\n        // check that the orderHash is indeed a recognized quote\n        const quote = await this._dbUtils.findV2QuoteByOrderHashAsync(orderHash);\n        if (!quote) {\n            RFQM_SIGNED_QUOTE_NOT_FOUND.inc();\n            throw new NotFoundError('quote not found');\n        }\n\n        // validate that the expiration window is long enough to fill quote\n        const currentTimeMs = new Date().getTime();\n        if (!order.expiry.times(ONE_SECOND_MS).isGreaterThan(currentTimeMs + this._minExpiryDurationMs)) {\n            throw new ValidationError([\n                {\n                    field: 'expiryAndNonce',\n                    code: ValidationErrorCodes.FieldInvalid,\n                    reason: `order will expire too soon`,\n                },\n            ]);\n        }\n\n        // validate that there is not a pending transaction for this taker and taker token\n        const pendingJobs = await this._dbUtils.findV2JobsWithStatusesAsync([\n            RfqmJobStatus.PendingEnqueued,\n            RfqmJobStatus.PendingProcessing,\n            RfqmJobStatus.PendingLastLookAccepted,\n            RfqmJobStatus.PendingSubmitted,\n        ]);\n\n        if (\n            pendingJobs.some(\n                (job) =>\n                    job.order?.order.taker.toLowerCase() === quote.order?.order.taker.toLowerCase() &&\n                    job.order?.order.takerToken.toLowerCase() === quote.order?.order.takerToken.toLowerCase() &&\n                    // Other logic handles the case where the same order is submitted twice\n                    job.orderHash !== quote.orderHash,\n            )\n        ) {\n            RFQM_TAKER_AND_TAKERTOKEN_TRADE_EXISTS.labels(this._chainId.toString()).inc();\n            throw new TooManyRequestsError('a pending trade for this taker and takertoken already exists');\n        }\n\n        // In the unlikely event that takers submit a signature with a missing byte, pad the signature.\n        const paddedSignature = padSignature(takerSignature);\n        if (paddedSignature.r !== takerSignature.r || paddedSignature.s !== takerSignature.s) {\n            logger.warn(\n                { orderHash, r: paddedSignature.r, s: paddedSignature.s },\n                'Got taker signature with missing bytes',\n            );\n            takerSignature = paddedSignature;\n        }\n\n        // validate that the given taker signature is valid\n        const signerAddress = getSignerFromHash(orderHash, takerSignature).toLowerCase();\n        if (signerAddress !== takerAddress) {\n            logger.warn({ signerAddress, takerAddress, orderHash }, 'Signature is invalid');\n            throw new ValidationError([\n                {\n                    field: 'signature',\n                    code: ValidationErrorCodes.InvalidSignatureOrHash,\n                    reason: `signature is not valid`,\n                },\n            ]);\n        }\n\n        // Validate that order is fillable by both the maker and the taker according to balances and/or allowances.\n        // If rfqmApprovalOpts is not passed, allowances are not checked at this stage since gasless approval has not been done yet.\n        const [makerBalance] = await this._rfqMakerBalanceCacheService.getERC20OwnerBalancesAsync(this._chainId, [\n            {\n                owner: makerAddress,\n                token: makerToken,\n            },\n        ]);\n        const [takerBalance] = rfqmApprovalOpts\n            ? await this._blockchainUtils.getTokenBalancesAsync({ owner: takerAddress, token: takerToken })\n            : await this._blockchainUtils.getMinOfBalancesAndAllowancesAsync({\n                  owner: takerAddress,\n                  token: takerToken,\n              });\n\n        if (makerBalance.lt(order.makerAmount) || takerBalance.lt(order.takerAmount)) {\n            RFQM_SUBMIT_BALANCE_CHECK_FAILED.labels(makerAddress, this._chainId.toString()).inc();\n            logger.warn(\n                {\n                    makerBalance,\n                    takerBalance,\n                    makerAddress,\n                    takerAddress,\n                    orderHash,\n                    order,\n                },\n                'Balance check failed while user was submitting',\n            );\n            throw new ValidationError([\n                {\n                    field: 'n/a',\n                    code: ValidationErrorCodes.InvalidOrder,\n                    reason: `order is not fillable`,\n                },\n            ]);\n        }\n\n        // prepare the job\n        let rfqmJobOpts: RfqmV2JobConstructorOpts = {\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            orderHash: quote.orderHash!,\n            createdAt: new Date(),\n            expiry: order.expiry,\n            chainId: this._chainId,\n            integratorId: quote.integratorId ? quote.integratorId : null,\n            makerUri: quote.makerUri,\n            status: RfqmJobStatus.PendingEnqueued,\n            fee: quote.fee,\n            order: quote.order,\n            takerSignature,\n            affiliateAddress: quote.affiliateAddress,\n            isUnwrap: quote.isUnwrap,\n            takerSpecifiedSide: quote.takerSpecifiedSide,\n        };\n\n        // if approval opts are supplied, add params to job table\n        if (rfqmApprovalOpts) {\n            rfqmJobOpts = {\n                ...rfqmJobOpts,\n                ...rfqmApprovalOpts,\n            };\n        }\n\n        // this insert will fail if a job has already been created, ensuring\n        // that a signed quote cannot be queued twice\n        try {\n            // make sure job data is persisted to Postgres before queueing task\n            await this._dbUtils.writeV2JobAsync(rfqmJobOpts);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            await this._enqueueJobAsync(quote.orderHash!, GaslessTypes.OtcOrder);\n        } catch (error) {\n            logger.error({ errorMessage: error.message }, 'Failed to queue the quote for submission.');\n            throw new InternalServerError(\n                `failed to queue the quote for submission, it may have already been submitted`,\n            );\n        }\n\n        return {\n            type: GaslessTypes.OtcOrder,\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            orderHash: quote.orderHash!,\n        };\n    }\n\n    /**\n     * Internal method to retrieve quote context, based on either indicative or firm quote parameters\n     */\n    private _retrieveQuoteContext(\n        params: FetchIndicativeQuoteParams | FetchFirmQuoteParams,\n        isFirm: boolean,\n    ): QuoteContext {\n        const {\n            sellAmount: takerAmount,\n            buyAmount: makerAmount,\n            sellToken: takerToken,\n            buyToken: originalMakerToken,\n            takerAddress,\n            sellTokenDecimals: takerTokenDecimals,\n            buyTokenDecimals: makerTokenDecimals,\n            integrator,\n            affiliateAddress,\n        } = params;\n\n        const isUnwrap = originalMakerToken === this._nativeTokenAddress;\n        const isSelling = takerAmount !== undefined;\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const assetFillAmount = isSelling ? takerAmount! : makerAmount!;\n\n        let makerToken = originalMakerToken;\n\n        // If the originalMakerToken is the native token, we will trade the wrapped version and unwrap at the end\n        if (isUnwrap) {\n            makerToken = this._nativeWrappedTokenAddress;\n        }\n\n        return {\n            workflow: 'rfqm',\n            chainId: this._chainId,\n            isFirm,\n            takerAmount,\n            makerAmount,\n            takerToken,\n            makerToken,\n            originalMakerToken,\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            takerAddress: takerAddress!,\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            trader: takerAddress!,\n            txOrigin: this._registryAddress,\n            takerTokenDecimals,\n            makerTokenDecimals,\n            integrator,\n            affiliateAddress,\n            isUnwrap,\n            isSelling,\n            assetFillAmount,\n            feeModelVersion: this._feeModelVersion,\n        };\n    }\n\n    /**\n     * Internal method to fetch indicative quotes.\n     */\n    private async _fetchIndicativeQuotesAsync(quoteContext: QuoteContext, fee: Fee): Promise<IndicativeQuote[]> {\n        // Extract quote context\n        const { isSelling, assetFillAmount, takerToken, makerToken, integrator } = quoteContext;\n\n        // Create Otc Order request options\n        const otcOrderParams = QuoteServerClient.makeQueryParameters({\n            chainId: this._chainId,\n            txOrigin: this._registryAddress,\n            takerAddress: NULL_ADDRESS,\n            marketOperation: isSelling ? MarketOperation.Sell : MarketOperation.Buy,\n            buyTokenAddress: makerToken,\n            sellTokenAddress: takerToken,\n            assetFillAmount,\n            isLastLook: true,\n            fee,\n        });\n\n        // If LLR Cooldown is enabled, filter out makers in cooldown before querying the quote server\n        let makerIdsInCooldown: string[] | undefined;\n        if (ENABLE_LLR_COOLDOWN) {\n            try {\n                makerIdsInCooldown = await this._cacheClient.getMakersInCooldownForPairAsync(\n                    this._chainId,\n                    makerToken,\n                    takerToken,\n                );\n                // log blocked maker ids\n                makerIdsInCooldown.map((makerId) => {\n                    RFQM_MAKER_BLOCKED_FOR_LLR_COOLDOWN.labels(\n                        makerId,\n                        this._chainId.toString(),\n                        toPairString(makerToken, takerToken),\n                    ).inc();\n                    logger.warn(\n                        {\n                            makerId,\n                            makerToken,\n                            takerToken,\n                            timestamp: Date.now(),\n                        },\n                        'Maker is on cooldown due to a bad last look reject',\n                    );\n                });\n            } catch (e) {\n                logger.error(\n                    { chainId: this._chainId, makerToken, takerToken, errorMessage: e.message },\n                    'Encountered an error while filtering makers on LLR cooldown',\n                );\n            }\n        }\n\n        const otcOrderMakerUris = this._rfqMakerManager.getRfqmV2MakerUrisForPair(\n            makerToken,\n            takerToken,\n            integrator.whitelistMakerIds || null,\n            makerIdsInCooldown || null,\n        );\n\n        logger.info(\n            {\n                otcOrderParams,\n            },\n            'otcOrderParams for `batchGetPriceV2Async`',\n        );\n        const quotes = await this._quoteServerClient.batchGetPriceV2Async(\n            otcOrderMakerUris,\n            integrator,\n            otcOrderParams,\n        );\n\n        // Log any quotes that are for the incorrect amount\n        quotes.forEach((quote) => {\n            const quotedAmount = isSelling ? quote.takerAmount : quote.makerAmount;\n            if (quotedAmount.eq(assetFillAmount)) {\n                return;\n            }\n            const modificationType = quotedAmount.gt(assetFillAmount) ? 'overfill' : 'underfill';\n            logger.warn(\n                {\n                    isSelling,\n                    overOrUnder: modificationType,\n                    requestedAmount: assetFillAmount,\n                    quotedAmount,\n                    quote,\n                },\n                'Maker returned an incorrect amount',\n            );\n            RFQM_MM_RETURNED_DIFFERENT_AMOUNT.labels(quote.makerUri, this._chainId.toString(), modificationType).inc();\n        });\n\n        return quotes;\n    }\n\n    /**\n     * Internal method to fetch firm quotes.\n     */\n    private async _fetchFirmQuotesAsync(quoteContext: QuoteContext, fee: Fee): Promise<FirmOtcQuote[]> {\n        const quotes = await this._fetchIndicativeQuotesAsync(quoteContext, fee);\n        return this._convertToFirmQuotesAsync(quotes, quoteContext);\n    }\n\n    /**\n     * Internal method to convert indicative quotes to firm quotes.\n     */\n    private async _convertToFirmQuotesAsync(\n        quotes: IndicativeQuote[],\n        quoteContext: QuoteContext,\n    ): Promise<FirmOtcQuote[]> {\n        const { takerAddress } = quoteContext;\n        const currentBucket =\n            (await this._cacheClient.getNextOtcOrderBucketAsync(this._chainId)) % GASLESS_OTC_ORDER_NUM_BUCKETS;\n        const nowSeconds = Math.floor(Date.now() / ONE_SECOND_MS);\n        const otcQuotes = quotes.map((q) =>\n            this._mapIndicativeQuoteToFirmOtcQuote(\n                q,\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                takerAddress!,\n                new BigNumber(currentBucket),\n                new BigNumber(nowSeconds),\n            ),\n        );\n\n        const firmQuotesWithCorrectChainId = otcQuotes.filter((quote) => {\n            if (quote.order.chainId !== this._chainId) {\n                logger.error({ quote }, 'Received a quote with incorrect chain id');\n                return false;\n            }\n            return true;\n        });\n\n        return firmQuotesWithCorrectChainId;\n    }\n\n    private async _enqueueJobAsync(orderHash: string, type: GaslessTypes): Promise<void> {\n        await this._sqsProducer.send({\n            // wait, it's all order hash?\n            // always has been.\n            groupId: orderHash,\n            id: orderHash,\n            body: JSON.stringify({ orderHash, type }),\n            deduplicationId: orderHash,\n        });\n    }\n\n    /**\n     * Maps an IndicativeQuote to a FirmOtcQuote. Handles txOrigin, chainId, expiryAndNonce, etc\n     */\n    private _mapIndicativeQuoteToFirmOtcQuote(\n        q: IndicativeQuote,\n        takerAddress: string,\n        nonceBucket: BigNumber,\n        nonce: BigNumber,\n    ): FirmOtcQuote {\n        return {\n            kind: 'otc',\n            makerUri: q.makerUri,\n            order: new OtcOrder({\n                txOrigin: this._registryAddress,\n                expiryAndNonce: OtcOrder.encodeExpiryAndNonce(q.expiry, nonceBucket, nonce),\n                maker: q.maker,\n                taker: takerAddress,\n                makerToken: q.makerToken,\n                takerToken: q.takerToken,\n                makerAmount: q.makerAmount,\n                takerAmount: q.takerAmount,\n                chainId: this._chainId,\n                verifyingContract: this._contractAddresses.exchangeProxy,\n            }),\n        };\n    }\n\n    /**\n     * Validates and converts EIP-712 context to an Approval object.\n     * @param kind Type of gasless approval\n     * @param eip712 EIP-712 context parsed from the handler\n     * @param tradeHash The order hash or metatransaction hash,\n     *  only used for logging in case of validation error\n     * @returns The Approval object\n     */\n    // tslint:disable-next-line: prefer-function-over-method\n    private _convertEIP712ContextToApproval<T extends ExecuteMetaTransactionEip712Context | PermitEip712Context>(\n        eip712: T,\n        tradeHash: string,\n    ): T extends ExecuteMetaTransactionEip712Context ? ExecuteMetaTransactionApproval : PermitApproval {\n        const { types, primaryType, domain, message } = eip712;\n        switch (primaryType) {\n            case 'MetaTransaction': {\n                if (\n                    !_.isEqual(\n                        _.keys(message).sort(),\n                        types.MetaTransaction.map((dataField: Eip712DataField) => dataField.name).sort(),\n                    )\n                ) {\n                    logger.warn({ primaryType, tradeHash }, 'Invalid message field provided for Approval');\n                    throw new ValidationError([\n                        {\n                            field: 'message',\n                            code: ValidationErrorCodes.FieldInvalid,\n                            reason: `Invalid message field provided for Approval of primaryType ${primaryType}`,\n                        },\n                    ]);\n                }\n                const executeMetaTransactionApproval: ExecuteMetaTransactionApproval = {\n                    kind: GaslessApprovalTypes.ExecuteMetaTransaction,\n                    eip712: {\n                        types,\n                        primaryType,\n                        domain,\n                        message: {\n                            nonce: message.nonce,\n                            from: message.from,\n                            functionSignature: message.functionSignature,\n                        },\n                    },\n                };\n                return executeMetaTransactionApproval as T extends ExecuteMetaTransactionEip712Context\n                    ? ExecuteMetaTransactionApproval\n                    : PermitApproval;\n            }\n            case 'Permit': {\n                if (\n                    !_.isEqual(\n                        _.keys(message).sort(),\n                        types.Permit.map((dataField: Eip712DataField) => dataField.name).sort(),\n                    )\n                ) {\n                    logger.warn({ primaryType, tradeHash }, 'Invalid message field provided for Approval');\n                    throw new ValidationError([\n                        {\n                            field: 'message',\n                            code: ValidationErrorCodes.FieldInvalid,\n                            reason: `Invalid message field provided for Approval of primaryType ${primaryType}`,\n                        },\n                    ]);\n                }\n                const permitApproval: PermitApproval = {\n                    kind: GaslessApprovalTypes.Permit,\n                    eip712: {\n                        types,\n                        primaryType,\n                        domain,\n                        message: {\n                            owner: message.owner,\n                            spender: message.spender,\n                            value: message.value,\n                            nonce: message.nonce,\n                            deadline: message.deadline,\n                        },\n                    },\n                };\n\n                return permitApproval as T extends ExecuteMetaTransactionEip712Context\n                    ? ExecuteMetaTransactionApproval\n                    : PermitApproval;\n            }\n            default:\n                ((_x: never) => {\n                    throw new Error('unreachable');\n                })(primaryType);\n        }\n    }\n}\n"],"version":3}