e531b0b156245912f4344be03d801507
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGasStationAttendant = void 0;
const GasOracle_1 = require("./GasOracle");
const GasStationAttendantEthereum_1 = require("./GasStationAttendantEthereum");
const GasStationAttendantPolygon_1 = require("./GasStationAttendantPolygon");
const GasStationAttendantRopsten_1 = require("./GasStationAttendantRopsten");
function getGasStationAttendant(chain, axiosInstance, protocolFeeUtils) {
    let gasOracle;
    // tslint:disable: custom-no-magic-numbers
    switch (chain.chainId) {
        case /* ethereum */ 1:
            gasOracle = GasOracle_1.GasOracle.create(chain.gasStationUrl, axiosInstance);
            return new GasStationAttendantEthereum_1.GasStationAttendantEthereum(gasOracle);
        case /* ropsten */ 3:
            return new GasStationAttendantRopsten_1.GasStationAttendantRopsten(protocolFeeUtils);
        case /* ganache */ 1337:
            gasOracle = GasOracle_1.GasOracle.create(chain.gasStationUrl, axiosInstance);
            return new GasStationAttendantEthereum_1.GasStationAttendantEthereum(gasOracle);
        case /* polygon */ 137:
            return new GasStationAttendantPolygon_1.GasStationAttendantPolygon(protocolFeeUtils);
        case /* mumbai */ 80001:
            return new GasStationAttendantPolygon_1.GasStationAttendantPolygon(protocolFeeUtils);
        default:
            throw new Error(`Gas station attendant not configured for chain: ${chain.name}`);
    }
    // tslint:enable: custom-no-magic-numbers
}
exports.getGasStationAttendant = getGasStationAttendant;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9HYXNTdGF0aW9uQXR0ZW5kYW50VXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBS0EsMkNBQXdDO0FBRXhDLCtFQUE0RTtBQUM1RSw2RUFBMEU7QUFDMUUsNkVBQTBFO0FBRTFFLFNBQWdCLHNCQUFzQixDQUNsQyxLQUF5QixFQUN6QixhQUE0QixFQUM1QixnQkFBa0M7SUFFbEMsSUFBSSxTQUFvQixDQUFDO0lBQ3pCLDBDQUEwQztJQUMxQyxRQUFRLEtBQUssQ0FBQyxPQUFPLEVBQUU7UUFDbkIsS0FBSyxjQUFjLENBQUMsQ0FBQztZQUNqQixTQUFTLEdBQUcscUJBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUNqRSxPQUFPLElBQUkseURBQTJCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEQsS0FBSyxhQUFhLENBQUMsQ0FBQztZQUNoQixPQUFPLElBQUksdURBQTBCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM1RCxLQUFLLGFBQWEsQ0FBQyxJQUFJO1lBQ25CLFNBQVMsR0FBRyxxQkFBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQ2pFLE9BQU8sSUFBSSx5REFBMkIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0RCxLQUFLLGFBQWEsQ0FBQyxHQUFHO1lBQ2xCLE9BQU8sSUFBSSx1REFBMEIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzVELEtBQUssWUFBWSxDQUFDLEtBQUs7WUFDbkIsT0FBTyxJQUFJLHVEQUEwQixDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDNUQ7WUFDSSxNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUN4RjtJQUNELHlDQUF5QztBQUM3QyxDQUFDO0FBeEJELHdEQXdCQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvc3JjL3V0aWxzL0dhc1N0YXRpb25BdHRlbmRhbnRVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm90b2NvbEZlZVV0aWxzIH0gZnJvbSAnQDB4L2Fzc2V0LXN3YXBwZXInO1xyXG5pbXBvcnQgeyBBeGlvc0luc3RhbmNlIH0gZnJvbSAnYXhpb3MnO1xyXG5cclxuaW1wb3J0IHsgQ2hhaW5Db25maWd1cmF0aW9uIH0gZnJvbSAnLi4vY29uZmlnJztcclxuXHJcbmltcG9ydCB7IEdhc09yYWNsZSB9IGZyb20gJy4vR2FzT3JhY2xlJztcclxuaW1wb3J0IHsgR2FzU3RhdGlvbkF0dGVuZGFudCB9IGZyb20gJy4vR2FzU3RhdGlvbkF0dGVuZGFudCc7XHJcbmltcG9ydCB7IEdhc1N0YXRpb25BdHRlbmRhbnRFdGhlcmV1bSB9IGZyb20gJy4vR2FzU3RhdGlvbkF0dGVuZGFudEV0aGVyZXVtJztcclxuaW1wb3J0IHsgR2FzU3RhdGlvbkF0dGVuZGFudFBvbHlnb24gfSBmcm9tICcuL0dhc1N0YXRpb25BdHRlbmRhbnRQb2x5Z29uJztcclxuaW1wb3J0IHsgR2FzU3RhdGlvbkF0dGVuZGFudFJvcHN0ZW4gfSBmcm9tICcuL0dhc1N0YXRpb25BdHRlbmRhbnRSb3BzdGVuJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRHYXNTdGF0aW9uQXR0ZW5kYW50KFxyXG4gICAgY2hhaW46IENoYWluQ29uZmlndXJhdGlvbixcclxuICAgIGF4aW9zSW5zdGFuY2U6IEF4aW9zSW5zdGFuY2UsXHJcbiAgICBwcm90b2NvbEZlZVV0aWxzOiBQcm90b2NvbEZlZVV0aWxzLFxyXG4pOiBHYXNTdGF0aW9uQXR0ZW5kYW50IHtcclxuICAgIGxldCBnYXNPcmFjbGU6IEdhc09yYWNsZTtcclxuICAgIC8vIHRzbGludDpkaXNhYmxlOiBjdXN0b20tbm8tbWFnaWMtbnVtYmVyc1xyXG4gICAgc3dpdGNoIChjaGFpbi5jaGFpbklkKSB7XHJcbiAgICAgICAgY2FzZSAvKiBldGhlcmV1bSAqLyAxOlxyXG4gICAgICAgICAgICBnYXNPcmFjbGUgPSBHYXNPcmFjbGUuY3JlYXRlKGNoYWluLmdhc1N0YXRpb25VcmwsIGF4aW9zSW5zdGFuY2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEdhc1N0YXRpb25BdHRlbmRhbnRFdGhlcmV1bShnYXNPcmFjbGUpO1xyXG4gICAgICAgIGNhc2UgLyogcm9wc3RlbiAqLyAzOlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEdhc1N0YXRpb25BdHRlbmRhbnRSb3BzdGVuKHByb3RvY29sRmVlVXRpbHMpO1xyXG4gICAgICAgIGNhc2UgLyogZ2FuYWNoZSAqLyAxMzM3OlxyXG4gICAgICAgICAgICBnYXNPcmFjbGUgPSBHYXNPcmFjbGUuY3JlYXRlKGNoYWluLmdhc1N0YXRpb25VcmwsIGF4aW9zSW5zdGFuY2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEdhc1N0YXRpb25BdHRlbmRhbnRFdGhlcmV1bShnYXNPcmFjbGUpO1xyXG4gICAgICAgIGNhc2UgLyogcG9seWdvbiAqLyAxMzc6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgR2FzU3RhdGlvbkF0dGVuZGFudFBvbHlnb24ocHJvdG9jb2xGZWVVdGlscyk7XHJcbiAgICAgICAgY2FzZSAvKiBtdW1iYWkgKi8gODAwMDE6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgR2FzU3RhdGlvbkF0dGVuZGFudFBvbHlnb24ocHJvdG9jb2xGZWVVdGlscyk7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBHYXMgc3RhdGlvbiBhdHRlbmRhbnQgbm90IGNvbmZpZ3VyZWQgZm9yIGNoYWluOiAke2NoYWluLm5hbWV9YCk7XHJcbiAgICB9XHJcbiAgICAvLyB0c2xpbnQ6ZW5hYmxlOiBjdXN0b20tbm8tbWFnaWMtbnVtYmVyc1xyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==