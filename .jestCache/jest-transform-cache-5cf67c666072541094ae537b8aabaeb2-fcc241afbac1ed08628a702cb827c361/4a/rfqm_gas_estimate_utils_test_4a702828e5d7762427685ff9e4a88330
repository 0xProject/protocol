32f8f0583e4a00fbbad02ffb2ec6ff5a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:custom-no-magic-numbers
// tslint:disable:max-file-line-count
const chai_1 = require("chai");
const constants_1 = require("../../src/core/constants");
const rfqm_gas_estimate_utils_1 = require("../../src/utils/rfqm_gas_estimate_utils");
describe('RFQM Gas Estimate utils', () => {
    describe('calculateGasEstimate', () => {
        it('should return base gas estimate if neither tokens have premiums', () => {
            const makerToken = '';
            const takerToken = '';
            const result = (0, rfqm_gas_estimate_utils_1.calculateGasEstimate)(makerToken, takerToken, 'rfq', false);
            (0, chai_1.expect)(result).to.equal(constants_1.RFQM_TX_GAS_ESTIMATE);
        });
        it('should add a token premium for maker token', () => {
            const makerToken = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';
            const takerToken = '';
            const result = (0, rfqm_gas_estimate_utils_1.calculateGasEstimate)(makerToken, takerToken, 'rfq', false);
            (0, chai_1.expect)(result).to.be.greaterThan(constants_1.RFQM_TX_GAS_ESTIMATE);
        });
        it('should add a token premium for taker token', () => {
            const makerToken = '';
            const takerToken = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';
            const result = (0, rfqm_gas_estimate_utils_1.calculateGasEstimate)(makerToken, takerToken, 'rfq', false);
            (0, chai_1.expect)(result).to.be.greaterThan(constants_1.RFQM_TX_GAS_ESTIMATE);
        });
        it('token premiums for maker and taker token should be additive', () => {
            const unknown = '';
            const USDC = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';
            const USDT = '0xdac17f958d2ee523a2206206994597c13d831ec7';
            const result1 = (0, rfqm_gas_estimate_utils_1.calculateGasEstimate)(USDC, unknown, 'rfq', false);
            const result2 = (0, rfqm_gas_estimate_utils_1.calculateGasEstimate)(USDC, USDT, 'rfq', false);
            (0, chai_1.expect)(result2).to.be.greaterThan(result1);
        });
        it('should be case insensitive to the input tokens', () => {
            const unknown = '';
            const USDC_uppercase = '0xA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48';
            const USDT_uppercase = '0xDAC17F958D2EE523A2206206994597C13D831EC7';
            const result0 = (0, rfqm_gas_estimate_utils_1.calculateGasEstimate)(unknown, unknown, 'rfq', false);
            const result1 = (0, rfqm_gas_estimate_utils_1.calculateGasEstimate)(USDC_uppercase, unknown, 'rfq', false);
            const result2 = (0, rfqm_gas_estimate_utils_1.calculateGasEstimate)(USDC_uppercase, USDT_uppercase, 'rfq', false);
            (0, chai_1.expect)(result1).to.be.greaterThan(result0);
            (0, chai_1.expect)(result2).to.be.greaterThan(result1);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvcmZxbV9nYXNfZXN0aW1hdGVfdXRpbHNfdGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLHlDQUF5QztBQUN6QyxxQ0FBcUM7QUFFckMsK0JBQThCO0FBRTlCLHdEQUFnRTtBQUNoRSxxRkFBK0U7QUFFL0UsUUFBUSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUNyQyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1FBQ2xDLEVBQUUsQ0FBQyxpRUFBaUUsRUFBRSxHQUFHLEVBQUU7WUFDdkUsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO1lBQ3RCLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztZQUV0QixNQUFNLE1BQU0sR0FBRyxJQUFBLDhDQUFvQixFQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRTFFLElBQUEsYUFBTSxFQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0NBQW9CLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxHQUFHLEVBQUU7WUFDbEQsTUFBTSxVQUFVLEdBQUcsNENBQTRDLENBQUM7WUFDaEUsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO1lBRXRCLE1BQU0sTUFBTSxHQUFHLElBQUEsOENBQW9CLEVBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFMUUsSUFBQSxhQUFNLEVBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsZ0NBQW9CLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxHQUFHLEVBQUU7WUFDbEQsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO1lBQ3RCLE1BQU0sVUFBVSxHQUFHLDRDQUE0QyxDQUFDO1lBRWhFLE1BQU0sTUFBTSxHQUFHLElBQUEsOENBQW9CLEVBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFMUUsSUFBQSxhQUFNLEVBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsZ0NBQW9CLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw2REFBNkQsRUFBRSxHQUFHLEVBQUU7WUFDbkUsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ25CLE1BQU0sSUFBSSxHQUFHLDRDQUE0QyxDQUFDO1lBQzFELE1BQU0sSUFBSSxHQUFHLDRDQUE0QyxDQUFDO1lBRTFELE1BQU0sT0FBTyxHQUFHLElBQUEsOENBQW9CLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDbEUsTUFBTSxPQUFPLEdBQUcsSUFBQSw4Q0FBb0IsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztZQUUvRCxJQUFBLGFBQU0sRUFBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxHQUFHLEVBQUU7WUFDdEQsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ25CLE1BQU0sY0FBYyxHQUFHLDRDQUE0QyxDQUFDO1lBQ3BFLE1BQU0sY0FBYyxHQUFHLDRDQUE0QyxDQUFDO1lBRXBFLE1BQU0sT0FBTyxHQUFHLElBQUEsOENBQW9CLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDckUsTUFBTSxPQUFPLEdBQUcsSUFBQSw4Q0FBb0IsRUFBQyxjQUFjLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM1RSxNQUFNLE9BQU8sR0FBRyxJQUFBLDhDQUFvQixFQUFDLGNBQWMsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRW5GLElBQUEsYUFBTSxFQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzNDLElBQUEsYUFBTSxFQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvdGVzdC91dGlscy9yZnFtX2dhc19lc3RpbWF0ZV91dGlsc190ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOmN1c3RvbS1uby1tYWdpYy1udW1iZXJzXHJcbi8vIHRzbGludDpkaXNhYmxlOm1heC1maWxlLWxpbmUtY291bnRcclxuXHJcbmltcG9ydCB7IGV4cGVjdCB9IGZyb20gJ2NoYWknO1xyXG5cclxuaW1wb3J0IHsgUkZRTV9UWF9HQVNfRVNUSU1BVEUgfSBmcm9tICcuLi8uLi9zcmMvY29yZS9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBjYWxjdWxhdGVHYXNFc3RpbWF0ZSB9IGZyb20gJy4uLy4uL3NyYy91dGlscy9yZnFtX2dhc19lc3RpbWF0ZV91dGlscyc7XHJcblxyXG5kZXNjcmliZSgnUkZRTSBHYXMgRXN0aW1hdGUgdXRpbHMnLCAoKSA9PiB7XHJcbiAgICBkZXNjcmliZSgnY2FsY3VsYXRlR2FzRXN0aW1hdGUnLCAoKSA9PiB7XHJcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYmFzZSBnYXMgZXN0aW1hdGUgaWYgbmVpdGhlciB0b2tlbnMgaGF2ZSBwcmVtaXVtcycsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbWFrZXJUb2tlbiA9ICcnO1xyXG4gICAgICAgICAgICBjb25zdCB0YWtlclRva2VuID0gJyc7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxjdWxhdGVHYXNFc3RpbWF0ZShtYWtlclRva2VuLCB0YWtlclRva2VuLCAncmZxJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8uZXF1YWwoUkZRTV9UWF9HQVNfRVNUSU1BVEUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIGFkZCBhIHRva2VuIHByZW1pdW0gZm9yIG1ha2VyIHRva2VuJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBtYWtlclRva2VuID0gJzB4YTBiODY5OTFjNjIxOGIzNmMxZDE5ZDRhMmU5ZWIwY2UzNjA2ZWI0OCc7XHJcbiAgICAgICAgICAgIGNvbnN0IHRha2VyVG9rZW4gPSAnJztcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbGN1bGF0ZUdhc0VzdGltYXRlKG1ha2VyVG9rZW4sIHRha2VyVG9rZW4sICdyZnEnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0KS50by5iZS5ncmVhdGVyVGhhbihSRlFNX1RYX0dBU19FU1RJTUFURSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdzaG91bGQgYWRkIGEgdG9rZW4gcHJlbWl1bSBmb3IgdGFrZXIgdG9rZW4nLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ha2VyVG9rZW4gPSAnJztcclxuICAgICAgICAgICAgY29uc3QgdGFrZXJUb2tlbiA9ICcweGEwYjg2OTkxYzYyMThiMzZjMWQxOWQ0YTJlOWViMGNlMzYwNmViNDgnO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FsY3VsYXRlR2FzRXN0aW1hdGUobWFrZXJUb2tlbiwgdGFrZXJUb2tlbiwgJ3JmcScsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLmdyZWF0ZXJUaGFuKFJGUU1fVFhfR0FTX0VTVElNQVRFKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Rva2VuIHByZW1pdW1zIGZvciBtYWtlciBhbmQgdGFrZXIgdG9rZW4gc2hvdWxkIGJlIGFkZGl0aXZlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB1bmtub3duID0gJyc7XHJcbiAgICAgICAgICAgIGNvbnN0IFVTREMgPSAnMHhhMGI4Njk5MWM2MjE4YjM2YzFkMTlkNGEyZTllYjBjZTM2MDZlYjQ4JztcclxuICAgICAgICAgICAgY29uc3QgVVNEVCA9ICcweGRhYzE3Zjk1OGQyZWU1MjNhMjIwNjIwNjk5NDU5N2MxM2Q4MzFlYzcnO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0MSA9IGNhbGN1bGF0ZUdhc0VzdGltYXRlKFVTREMsIHVua25vd24sICdyZnEnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdDIgPSBjYWxjdWxhdGVHYXNFc3RpbWF0ZShVU0RDLCBVU0RULCAncmZxJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdDIpLnRvLmJlLmdyZWF0ZXJUaGFuKHJlc3VsdDEpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIGJlIGNhc2UgaW5zZW5zaXRpdmUgdG8gdGhlIGlucHV0IHRva2VucycsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdW5rbm93biA9ICcnO1xyXG4gICAgICAgICAgICBjb25zdCBVU0RDX3VwcGVyY2FzZSA9ICcweEEwQjg2OTkxQzYyMThCMzZDMUQxOUQ0QTJFOUVCMENFMzYwNkVCNDgnO1xyXG4gICAgICAgICAgICBjb25zdCBVU0RUX3VwcGVyY2FzZSA9ICcweERBQzE3Rjk1OEQyRUU1MjNBMjIwNjIwNjk5NDU5N0MxM0Q4MzFFQzcnO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0MCA9IGNhbGN1bGF0ZUdhc0VzdGltYXRlKHVua25vd24sIHVua25vd24sICdyZnEnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdDEgPSBjYWxjdWxhdGVHYXNFc3RpbWF0ZShVU0RDX3VwcGVyY2FzZSwgdW5rbm93biwgJ3JmcScsIGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0MiA9IGNhbGN1bGF0ZUdhc0VzdGltYXRlKFVTRENfdXBwZXJjYXNlLCBVU0RUX3VwcGVyY2FzZSwgJ3JmcScsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQxKS50by5iZS5ncmVhdGVyVGhhbihyZXN1bHQwKTtcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdDIpLnRvLmJlLmdyZWF0ZXJUaGFuKHJlc3VsdDEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=