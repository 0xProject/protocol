{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/GasOracleType2Test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/GasOracleType2Test.ts"],"sourcesContent":["import Axios, { AxiosInstance } from 'axios';\nimport AxiosMockAdapter from 'axios-mock-adapter';\nimport * as HttpStatus from 'http-status-codes';\n\nimport { GasOracleType2 } from '../../src/utils/GasOracleType2';\n\nconst fakeEip1559Response = {\n    result: {\n        source: 'MEDIAN',\n        timestamp: 1649113582,\n        instant: {\n            price: 80000000000,\n            maxPriorityFeePerGas: 2000000000,\n            maxFeePerGas: 158770000000,\n            baseFeePerGas: 78383362949,\n        },\n        fast: {\n            price: 79000000000,\n            maxPriorityFeePerGas: 1500000000,\n            maxFeePerGas: 158270000000,\n            baseFeePerGas: 78383362949,\n        },\n        standard: {\n            price: 79000000000,\n            maxPriorityFeePerGas: 1500000000,\n            maxFeePerGas: 158270000000,\n            baseFeePerGas: 78383362949,\n        },\n        low: {\n            price: 79000000000,\n            maxPriorityFeePerGas: 1240000000,\n            maxFeePerGas: 158000000000,\n            baseFeePerGas: 78383362949,\n        },\n    },\n};\n\nlet axiosClient: AxiosInstance;\nlet axiosMock: AxiosMockAdapter;\n\ndescribe('GasOracleType2', () => {\n    beforeAll(() => {\n        axiosClient = Axios.create();\n        axiosMock = new AxiosMockAdapter(axiosClient);\n    });\n\n    describe('create', () => {\n        it('fails for non-default output formats', async () => {\n            expect(() =>\n                GasOracleType2.create(\n                    'http://gas-price-oracle-svc.gas-price-oracle/v2/source/median?output=eth_gas_station',\n                    axiosClient,\n                ),\n            ).toThrow();\n        });\n        it('fails for a v0 URL', async () => {\n            expect(() =>\n                GasOracleType2.create('http://gas-price-oracle-svc.gas-price-oracle/source/median', axiosClient),\n            ).toThrow();\n        });\n    });\n\n    describe('getBaseFeePerGasWeiAsync', () => {\n        it('gets the base fee', async () => {\n            axiosMock\n                .onGet(`http://gas-price-oracle-svc.gas-price-oracle/v2/source/median`)\n                .replyOnce(HttpStatus.OK, fakeEip1559Response);\n\n            const gasOracle = GasOracleType2.create(\n                'http://gas-price-oracle-svc.gas-price-oracle/v2/source/median',\n                axiosClient,\n            );\n\n            const baseFee = await gasOracle.getBaseFeePerGasWeiAsync();\n            expect(baseFee.toString()).toEqual('78383362949');\n        });\n    });\n\n    describe('getMaxPriorityFeePerGasWeiAsync', () => {\n        it('gets the max priority fee', async () => {\n            axiosMock\n                .onGet(`http://gas-price-oracle-svc.gas-price-oracle/v2/source/median`)\n                .replyOnce(HttpStatus.OK, fakeEip1559Response);\n\n            const gasOracle = GasOracleType2.create(\n                'http://gas-price-oracle-svc.gas-price-oracle/v2/source/median',\n                axiosClient,\n            );\n\n            const baseFee = await gasOracle.getMaxPriorityFeePerGasWeiAsync('low');\n            expect(baseFee.toString()).toEqual('1240000000');\n        });\n    });\n});\n"],"version":3}