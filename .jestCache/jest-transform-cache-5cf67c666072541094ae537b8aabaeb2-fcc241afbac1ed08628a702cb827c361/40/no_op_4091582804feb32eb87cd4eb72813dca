27d4028134341226c2e48996c8340123
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const prom_client_1 = require("prom-client");
const constants_1 = require("../core/constants");
const logger_1 = require("../logger");
const QUEUE_NAME = 'no-op';
const REMOVE_ON_COMPLETE_OPS = {
    count: 100,
};
const REMOVE_ON_FAILURE_OPS = {
    count: 100,
};
const NO_OP_SCHEDULE = '*/5 * * * *'; // job will be scheduled at every 5 minutes
const DESCRIPTION = 'A no-op background job that would sleep and increase the counter. This job is used for testing';
const backgroundJobNoOp = {
    queueName: QUEUE_NAME,
    schedule: NO_OP_SCHEDULE,
    description: DESCRIPTION,
    createAsync,
    processAsync,
};
// tslint:disable-next-line: no-default-export
exports.default = backgroundJobNoOp;
const NO_OP_PROCESS_COUNT = new prom_client_1.Counter({
    name: 'rfq_background_job_no_op_process_total',
    help: 'Number of times the processor method of the no-op background job is triggered',
});
/**
 * Create a no-op background job by pushing a message to the correponding queue with associated data.
 *
 * @param queue Queue to push the message.
 * @param data Necessary data for processor to execute the no-op background job.
 * @returns Promise of the no-op background job.
 */
async function createAsync(queue, data) {
    logger_1.logger.info({ queue: QUEUE_NAME, data }, 'Creating the no-op background job on queue');
    return queue.add(`${QUEUE_NAME}.${data.timestamp}`, data, {
        removeOnComplete: REMOVE_ON_COMPLETE_OPS,
        removeOnFail: REMOVE_ON_FAILURE_OPS,
    });
}
/**
 * Processor method for the no-op background job. Print log, sleep and increase the counter.
 *
 * @param job The no-op background job to process.
 * @returns Result of the no-op background job.
 */
async function processAsync(job) {
    await job.updateProgress(0);
    logger_1.logger.info({ jobName: job.name, queue: job.queueName, data: job.data, timestamp: Date.now() }, 'Processing the no-op background job on queue');
    // tslint:disable:custom-no-magic-numbers
    // sleep for 5 seconds
    await new Promise((resolve) => setTimeout(resolve, constants_1.ONE_SECOND_MS * 5));
    await job.updateProgress(50);
    // sleep for 5 seconds
    await new Promise((resolve) => setTimeout(resolve, constants_1.ONE_SECOND_MS * 5));
    NO_OP_PROCESS_COUNT.inc();
    await job.updateProgress(100);
    return {
        jobName: job.name,
        timestamp: Date.now(),
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9iYWNrZ3JvdW5kLWpvYnMvbm9fb3AudHMiLCJtYXBwaW5ncyI6Ijs7QUFDQSw2Q0FBc0M7QUFFdEMsaURBQWtEO0FBQ2xELHNDQUFtQztBQUluQyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUM7QUFDM0IsTUFBTSxzQkFBc0IsR0FBRztJQUMzQixLQUFLLEVBQUUsR0FBRztDQUNiLENBQUM7QUFDRixNQUFNLHFCQUFxQixHQUFHO0lBQzFCLEtBQUssRUFBRSxHQUFHO0NBQ2IsQ0FBQztBQUNGLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxDQUFDLDJDQUEyQztBQUNqRixNQUFNLFdBQVcsR0FBRyxnR0FBZ0csQ0FBQztBQVdySCxNQUFNLGlCQUFpQixHQUEyRTtJQUM5RixTQUFTLEVBQUUsVUFBVTtJQUNyQixRQUFRLEVBQUUsY0FBYztJQUN4QixXQUFXLEVBQUUsV0FBVztJQUN4QixXQUFXO0lBQ1gsWUFBWTtDQUNmLENBQUM7QUFDRiw4Q0FBOEM7QUFDOUMsa0JBQWUsaUJBQWlCLENBQUM7QUFFakMsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLHFCQUFPLENBQUM7SUFDcEMsSUFBSSxFQUFFLHdDQUF3QztJQUM5QyxJQUFJLEVBQUUsK0VBQStFO0NBQ3hGLENBQUMsQ0FBQztBQUVIOzs7Ozs7R0FNRztBQUNILEtBQUssVUFBVSxXQUFXLENBQ3RCLEtBQVksRUFDWixJQUEyQjtJQUUzQixlQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRSw0Q0FBNEMsQ0FBQyxDQUFDO0lBQ3ZGLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFO1FBQ3RELGdCQUFnQixFQUFFLHNCQUFzQjtRQUN4QyxZQUFZLEVBQUUscUJBQXFCO0tBQ3RDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILEtBQUssVUFBVSxZQUFZLENBQ3ZCLEdBQXdEO0lBRXhELE1BQU0sR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QixlQUFNLENBQUMsSUFBSSxDQUNQLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUNsRiw4Q0FBOEMsQ0FDakQsQ0FBQztJQUNGLHlDQUF5QztJQUN6QyxzQkFBc0I7SUFDdEIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSx5QkFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkUsTUFBTSxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLHNCQUFzQjtJQUN0QixNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLHlCQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RSxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMxQixNQUFNLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsT0FBTztRQUNILE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSTtRQUNqQixTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtLQUN4QixDQUFDO0FBQ04sQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvc3JjL2JhY2tncm91bmQtam9icy9ub19vcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKb2IsIFF1ZXVlIH0gZnJvbSAnYnVsbG1xJztcbmltcG9ydCB7IENvdW50ZXIgfSBmcm9tICdwcm9tLWNsaWVudCc7XG5cbmltcG9ydCB7IE9ORV9TRUNPTkRfTVMgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi9sb2dnZXInO1xuXG5pbXBvcnQgeyBCYWNrZ3JvdW5kSm9iQmx1ZXByaW50IH0gZnJvbSAnLi9ibHVlcHJpbnQnO1xuXG5jb25zdCBRVUVVRV9OQU1FID0gJ25vLW9wJztcbmNvbnN0IFJFTU9WRV9PTl9DT01QTEVURV9PUFMgPSB7XG4gICAgY291bnQ6IDEwMCxcbn07XG5jb25zdCBSRU1PVkVfT05fRkFJTFVSRV9PUFMgPSB7XG4gICAgY291bnQ6IDEwMCxcbn07XG5jb25zdCBOT19PUF9TQ0hFRFVMRSA9ICcqLzUgKiAqICogKic7IC8vIGpvYiB3aWxsIGJlIHNjaGVkdWxlZCBhdCBldmVyeSA1IG1pbnV0ZXNcbmNvbnN0IERFU0NSSVBUSU9OID0gJ0Egbm8tb3AgYmFja2dyb3VuZCBqb2IgdGhhdCB3b3VsZCBzbGVlcCBhbmQgaW5jcmVhc2UgdGhlIGNvdW50ZXIuIFRoaXMgam9iIGlzIHVzZWQgZm9yIHRlc3RpbmcnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJhY2tncm91bmRKb2JOb09wRGF0YSB7XG4gICAgdGltZXN0YW1wOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFja2dyb3VuZEpvYk5vT3BSZXN1bHQge1xuICAgIGpvYk5hbWU6IHN0cmluZztcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcbn1cblxuY29uc3QgYmFja2dyb3VuZEpvYk5vT3A6IEJhY2tncm91bmRKb2JCbHVlcHJpbnQ8QmFja2dyb3VuZEpvYk5vT3BEYXRhLCBCYWNrZ3JvdW5kSm9iTm9PcFJlc3VsdD4gPSB7XG4gICAgcXVldWVOYW1lOiBRVUVVRV9OQU1FLFxuICAgIHNjaGVkdWxlOiBOT19PUF9TQ0hFRFVMRSxcbiAgICBkZXNjcmlwdGlvbjogREVTQ1JJUFRJT04sXG4gICAgY3JlYXRlQXN5bmMsXG4gICAgcHJvY2Vzc0FzeW5jLFxufTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBkZWZhdWx0IGJhY2tncm91bmRKb2JOb09wO1xuXG5jb25zdCBOT19PUF9QUk9DRVNTX0NPVU5UID0gbmV3IENvdW50ZXIoe1xuICAgIG5hbWU6ICdyZnFfYmFja2dyb3VuZF9qb2Jfbm9fb3BfcHJvY2Vzc190b3RhbCcsXG4gICAgaGVscDogJ051bWJlciBvZiB0aW1lcyB0aGUgcHJvY2Vzc29yIG1ldGhvZCBvZiB0aGUgbm8tb3AgYmFja2dyb3VuZCBqb2IgaXMgdHJpZ2dlcmVkJyxcbn0pO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5vLW9wIGJhY2tncm91bmQgam9iIGJ5IHB1c2hpbmcgYSBtZXNzYWdlIHRvIHRoZSBjb3JyZXBvbmRpbmcgcXVldWUgd2l0aCBhc3NvY2lhdGVkIGRhdGEuXG4gKlxuICogQHBhcmFtIHF1ZXVlIFF1ZXVlIHRvIHB1c2ggdGhlIG1lc3NhZ2UuXG4gKiBAcGFyYW0gZGF0YSBOZWNlc3NhcnkgZGF0YSBmb3IgcHJvY2Vzc29yIHRvIGV4ZWN1dGUgdGhlIG5vLW9wIGJhY2tncm91bmQgam9iLlxuICogQHJldHVybnMgUHJvbWlzZSBvZiB0aGUgbm8tb3AgYmFja2dyb3VuZCBqb2IuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFzeW5jKFxuICAgIHF1ZXVlOiBRdWV1ZSxcbiAgICBkYXRhOiBCYWNrZ3JvdW5kSm9iTm9PcERhdGEsXG4pOiBQcm9taXNlPEpvYjxCYWNrZ3JvdW5kSm9iTm9PcERhdGEsIEJhY2tncm91bmRKb2JOb09wUmVzdWx0Pj4ge1xuICAgIGxvZ2dlci5pbmZvKHsgcXVldWU6IFFVRVVFX05BTUUsIGRhdGEgfSwgJ0NyZWF0aW5nIHRoZSBuby1vcCBiYWNrZ3JvdW5kIGpvYiBvbiBxdWV1ZScpO1xuICAgIHJldHVybiBxdWV1ZS5hZGQoYCR7UVVFVUVfTkFNRX0uJHtkYXRhLnRpbWVzdGFtcH1gLCBkYXRhLCB7XG4gICAgICAgIHJlbW92ZU9uQ29tcGxldGU6IFJFTU9WRV9PTl9DT01QTEVURV9PUFMsXG4gICAgICAgIHJlbW92ZU9uRmFpbDogUkVNT1ZFX09OX0ZBSUxVUkVfT1BTLFxuICAgIH0pO1xufVxuXG4vKipcbiAqIFByb2Nlc3NvciBtZXRob2QgZm9yIHRoZSBuby1vcCBiYWNrZ3JvdW5kIGpvYi4gUHJpbnQgbG9nLCBzbGVlcCBhbmQgaW5jcmVhc2UgdGhlIGNvdW50ZXIuXG4gKlxuICogQHBhcmFtIGpvYiBUaGUgbm8tb3AgYmFja2dyb3VuZCBqb2IgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIFJlc3VsdCBvZiB0aGUgbm8tb3AgYmFja2dyb3VuZCBqb2IuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NBc3luYyhcbiAgICBqb2I6IEpvYjxCYWNrZ3JvdW5kSm9iTm9PcERhdGEsIEJhY2tncm91bmRKb2JOb09wUmVzdWx0Pixcbik6IFByb21pc2U8QmFja2dyb3VuZEpvYk5vT3BSZXN1bHQ+IHtcbiAgICBhd2FpdCBqb2IudXBkYXRlUHJvZ3Jlc3MoMCk7XG4gICAgbG9nZ2VyLmluZm8oXG4gICAgICAgIHsgam9iTmFtZTogam9iLm5hbWUsIHF1ZXVlOiBqb2IucXVldWVOYW1lLCBkYXRhOiBqb2IuZGF0YSwgdGltZXN0YW1wOiBEYXRlLm5vdygpIH0sXG4gICAgICAgICdQcm9jZXNzaW5nIHRoZSBuby1vcCBiYWNrZ3JvdW5kIGpvYiBvbiBxdWV1ZScsXG4gICAgKTtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpjdXN0b20tbm8tbWFnaWMtbnVtYmVyc1xuICAgIC8vIHNsZWVwIGZvciA1IHNlY29uZHNcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBPTkVfU0VDT05EX01TICogNSkpO1xuICAgIGF3YWl0IGpvYi51cGRhdGVQcm9ncmVzcyg1MCk7XG4gICAgLy8gc2xlZXAgZm9yIDUgc2Vjb25kc1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIE9ORV9TRUNPTkRfTVMgKiA1KSk7XG4gICAgTk9fT1BfUFJPQ0VTU19DT1VOVC5pbmMoKTtcbiAgICBhd2FpdCBqb2IudXBkYXRlUHJvZ3Jlc3MoMTAwKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBqb2JOYW1lOiBqb2IubmFtZSxcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgIH07XG59XG4iXSwidmVyc2lvbiI6M30=