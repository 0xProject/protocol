{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/background-jobs/no_op.ts","mappings":";;AACA,6CAAsC;AAEtC,iDAAkD;AAClD,sCAAmC;AAInC,MAAM,UAAU,GAAG,OAAO,CAAC;AAC3B,MAAM,sBAAsB,GAAG;IAC3B,KAAK,EAAE,GAAG;CACb,CAAC;AACF,MAAM,qBAAqB,GAAG;IAC1B,KAAK,EAAE,GAAG;CACb,CAAC;AACF,MAAM,cAAc,GAAG,aAAa,CAAC,CAAC,2CAA2C;AACjF,MAAM,WAAW,GAAG,gGAAgG,CAAC;AAWrH,MAAM,iBAAiB,GAA2E;IAC9F,SAAS,EAAE,UAAU;IACrB,QAAQ,EAAE,cAAc;IACxB,WAAW,EAAE,WAAW;IACxB,WAAW;IACX,YAAY;CACf,CAAC;AACF,8CAA8C;AAC9C,kBAAe,iBAAiB,CAAC;AAEjC,MAAM,mBAAmB,GAAG,IAAI,qBAAO,CAAC;IACpC,IAAI,EAAE,wCAAwC;IAC9C,IAAI,EAAE,+EAA+E;CACxF,CAAC,CAAC;AAEH;;;;;;GAMG;AACH,KAAK,UAAU,WAAW,CACtB,KAAY,EACZ,IAA2B;IAE3B,eAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,4CAA4C,CAAC,CAAC;IACvF,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,UAAU,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE;QACtD,gBAAgB,EAAE,sBAAsB;QACxC,YAAY,EAAE,qBAAqB;KACtC,CAAC,CAAC;AACP,CAAC;AAED;;;;;GAKG;AACH,KAAK,UAAU,YAAY,CACvB,GAAwD;IAExD,MAAM,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;IAC5B,eAAM,CAAC,IAAI,CACP,EAAE,OAAO,EAAE,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,EAClF,8CAA8C,CACjD,CAAC;IACF,yCAAyC;IACzC,sBAAsB;IACtB,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,yBAAa,GAAG,CAAC,CAAC,CAAC,CAAC;IACvE,MAAM,GAAG,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IAC7B,sBAAsB;IACtB,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,yBAAa,GAAG,CAAC,CAAC,CAAC,CAAC;IACvE,mBAAmB,CAAC,GAAG,EAAE,CAAC;IAC1B,MAAM,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;IAC9B,OAAO;QACH,OAAO,EAAE,GAAG,CAAC,IAAI;QACjB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;KACxB,CAAC;AACN,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/background-jobs/no_op.ts"],"sourcesContent":["import { Job, Queue } from 'bullmq';\nimport { Counter } from 'prom-client';\n\nimport { ONE_SECOND_MS } from '../core/constants';\nimport { logger } from '../logger';\n\nimport { BackgroundJobBlueprint } from './blueprint';\n\nconst QUEUE_NAME = 'no-op';\nconst REMOVE_ON_COMPLETE_OPS = {\n    count: 100,\n};\nconst REMOVE_ON_FAILURE_OPS = {\n    count: 100,\n};\nconst NO_OP_SCHEDULE = '*/5 * * * *'; // job will be scheduled at every 5 minutes\nconst DESCRIPTION = 'A no-op background job that would sleep and increase the counter. This job is used for testing';\n\nexport interface BackgroundJobNoOpData {\n    timestamp: number;\n}\n\nexport interface BackgroundJobNoOpResult {\n    jobName: string;\n    timestamp: number;\n}\n\nconst backgroundJobNoOp: BackgroundJobBlueprint<BackgroundJobNoOpData, BackgroundJobNoOpResult> = {\n    queueName: QUEUE_NAME,\n    schedule: NO_OP_SCHEDULE,\n    description: DESCRIPTION,\n    createAsync,\n    processAsync,\n};\n// tslint:disable-next-line: no-default-export\nexport default backgroundJobNoOp;\n\nconst NO_OP_PROCESS_COUNT = new Counter({\n    name: 'rfq_background_job_no_op_process_total',\n    help: 'Number of times the processor method of the no-op background job is triggered',\n});\n\n/**\n * Create a no-op background job by pushing a message to the correponding queue with associated data.\n *\n * @param queue Queue to push the message.\n * @param data Necessary data for processor to execute the no-op background job.\n * @returns Promise of the no-op background job.\n */\nasync function createAsync(\n    queue: Queue,\n    data: BackgroundJobNoOpData,\n): Promise<Job<BackgroundJobNoOpData, BackgroundJobNoOpResult>> {\n    logger.info({ queue: QUEUE_NAME, data }, 'Creating the no-op background job on queue');\n    return queue.add(`${QUEUE_NAME}.${data.timestamp}`, data, {\n        removeOnComplete: REMOVE_ON_COMPLETE_OPS,\n        removeOnFail: REMOVE_ON_FAILURE_OPS,\n    });\n}\n\n/**\n * Processor method for the no-op background job. Print log, sleep and increase the counter.\n *\n * @param job The no-op background job to process.\n * @returns Result of the no-op background job.\n */\nasync function processAsync(\n    job: Job<BackgroundJobNoOpData, BackgroundJobNoOpResult>,\n): Promise<BackgroundJobNoOpResult> {\n    await job.updateProgress(0);\n    logger.info(\n        { jobName: job.name, queue: job.queueName, data: job.data, timestamp: Date.now() },\n        'Processing the no-op background job on queue',\n    );\n    // tslint:disable:custom-no-magic-numbers\n    // sleep for 5 seconds\n    await new Promise((resolve) => setTimeout(resolve, ONE_SECOND_MS * 5));\n    await job.updateProgress(50);\n    // sleep for 5 seconds\n    await new Promise((resolve) => setTimeout(resolve, ONE_SECOND_MS * 5));\n    NO_OP_PROCESS_COUNT.inc();\n    await job.updateProgress(100);\n    return {\n        jobName: job.name,\n        timestamp: Date.now(),\n    };\n}\n"],"version":3}