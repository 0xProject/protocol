{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfqm_worker_test.ts","mappings":";;AAKA,mDAA+C;AAC/C,+BAA8B;AAC9B,mDAAmD;AACnD,mCAAmC;AACnC,2CAA4D;AAE5D,wDAA8E;AAC9E,yFAAsF;AAEtF,IAAI,YAAgC,CAAC;AAErC,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACvC,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACvC,UAAU,CAAC,GAAG,EAAE;YACZ,YAAY,GAAG,IAAA,iBAAI,EAAC,kBAAS,CAAC,YAAY,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAChD,IAAA,iBAAI,EAAC,YAAY,CAAC,mBAAmB,CAAC,wBAAY,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACpE,IAAA,iBAAI,EAAC,YAAY,CAAC,mBAAmB,CAAC,wBAAY,EAAE,IAAA,qBAAQ,GAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAChF,MAAM,KAAK,GAAsC;gBAC7C,CAAC,0BAAW,CAAC,gBAAgB,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,0BAAW,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;gBACnF,CAAC,0BAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,0BAAW,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC;gBACrF,CAAC,0BAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,0BAAW,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;aACvF,CAAC;YACF,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACtB,MAAM,CAAC,OAAO,EAAE,QAAQ,EAAE,YAAY,CAAC,GAAG,IAAI,CAAC;gBAC/C,IAAA,aAAM,EACF,MAAM,IAAA,qDAAyB,EAC3B,IAAA,qBAAQ,EAAC,YAAY,CAAC,EACtB,wBAAY,EACZ,OAAO,EACP,QAAQ,EACR,gCAAoB,CACvB,CACJ,CAAC,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;aAC1B;QACL,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YACzD,IAAA,iBAAI,EAAC,YAAY,CAAC,mBAAmB,CAAC,wBAAY,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACpE,IAAA,iBAAI,EAAC,YAAY,CAAC,mBAAmB,CAAC,wBAAY,EAAE,kCAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAE/F,IAAA,aAAM,EACF,MAAM,IAAA,qDAAyB,EAC3B,IAAA,qBAAQ,EAAC,YAAY,CAAC,EACtB,wBAAY,EACZ,0BAAW,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,EACpC,0BAAW,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,CAAC,EACpC,gCAAoB,CACvB,CACJ,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfqm_worker_test.ts"],"sourcesContent":["// tslint:disable:custom-no-magic-numbers\n// tslint:disable:no-empty\n// tslint:disable:max-file-line-count\n\nimport { BigNumber } from '@0x/utils';\nimport { Web3Wrapper } from '@0x/web3-wrapper';\nimport { expect } from 'chai';\nimport { BlockParamLiteral } from 'ethereum-types';\nimport { providers } from 'ethers';\nimport { anything, instance, mock, when } from 'ts-mockito';\n\nimport { NULL_ADDRESS, RFQM_TX_GAS_ESTIMATE } from '../../src/core/constants';\nimport { isWorkerReadyAndAbleAsync } from '../../src/utils/rfqm_worker_balance_utils';\n\nlet providerMock: providers.Provider;\n\ndescribe('RFQM Worker balance utils', () => {\n    describe('isWorkerReadyAndAbleAsync', () => {\n        beforeEach(() => {\n            providerMock = mock(providers.Web3Provider);\n        });\n        it('should assess the balance to trade', async () => {\n            when(providerMock.getTransactionCount(NULL_ADDRESS)).thenResolve(0);\n            when(providerMock.getTransactionCount(NULL_ADDRESS, anything())).thenResolve(0);\n            const tests: [BigNumber, BigNumber, boolean][] = [\n                [Web3Wrapper.toBaseUnitAmount(0.5, 18), Web3Wrapper.toBaseUnitAmount(120, 9), true],\n                [Web3Wrapper.toBaseUnitAmount(0.05, 18), Web3Wrapper.toBaseUnitAmount(120, 9), false],\n                [Web3Wrapper.toBaseUnitAmount(0.05, 18), Web3Wrapper.toBaseUnitAmount(100, 9), true],\n            ];\n            for (const test of tests) {\n                const [balance, gasPrice, isSuccessful] = test;\n                expect(\n                    await isWorkerReadyAndAbleAsync(\n                        instance(providerMock),\n                        NULL_ADDRESS,\n                        balance,\n                        gasPrice,\n                        RFQM_TX_GAS_ESTIMATE,\n                    ),\n                ).to.eql(isSuccessful);\n            }\n        });\n        it('should fail with an outstanding transaction', async () => {\n            when(providerMock.getTransactionCount(NULL_ADDRESS)).thenResolve(0);\n            when(providerMock.getTransactionCount(NULL_ADDRESS, BlockParamLiteral.Pending)).thenResolve(1);\n\n            expect(\n                await isWorkerReadyAndAbleAsync(\n                    instance(providerMock),\n                    NULL_ADDRESS,\n                    Web3Wrapper.toBaseUnitAmount(10, 18),\n                    Web3Wrapper.toBaseUnitAmount(120, 9),\n                    RFQM_TX_GAS_ESTIMATE,\n                ),\n            ).to.eql(false);\n        });\n    });\n});\n"],"version":3}