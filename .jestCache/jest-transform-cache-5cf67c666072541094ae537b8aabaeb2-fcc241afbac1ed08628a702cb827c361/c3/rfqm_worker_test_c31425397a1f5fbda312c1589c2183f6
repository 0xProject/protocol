2c02522ae12750fb3ffbc02afb19d9da
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const web3_wrapper_1 = require("@0x/web3-wrapper");
const chai_1 = require("chai");
const ethereum_types_1 = require("ethereum-types");
const ethers_1 = require("ethers");
const ts_mockito_1 = require("ts-mockito");
const constants_1 = require("../../src/core/constants");
const rfqm_worker_balance_utils_1 = require("../../src/utils/rfqm_worker_balance_utils");
let providerMock;
describe('RFQM Worker balance utils', () => {
    describe('isWorkerReadyAndAbleAsync', () => {
        beforeEach(() => {
            providerMock = (0, ts_mockito_1.mock)(ethers_1.providers.Web3Provider);
        });
        it('should assess the balance to trade', async () => {
            (0, ts_mockito_1.when)(providerMock.getTransactionCount(constants_1.NULL_ADDRESS)).thenResolve(0);
            (0, ts_mockito_1.when)(providerMock.getTransactionCount(constants_1.NULL_ADDRESS, (0, ts_mockito_1.anything)())).thenResolve(0);
            const tests = [
                [web3_wrapper_1.Web3Wrapper.toBaseUnitAmount(0.5, 18), web3_wrapper_1.Web3Wrapper.toBaseUnitAmount(120, 9), true],
                [web3_wrapper_1.Web3Wrapper.toBaseUnitAmount(0.05, 18), web3_wrapper_1.Web3Wrapper.toBaseUnitAmount(120, 9), false],
                [web3_wrapper_1.Web3Wrapper.toBaseUnitAmount(0.05, 18), web3_wrapper_1.Web3Wrapper.toBaseUnitAmount(100, 9), true],
            ];
            for (const test of tests) {
                const [balance, gasPrice, isSuccessful] = test;
                (0, chai_1.expect)(await (0, rfqm_worker_balance_utils_1.isWorkerReadyAndAbleAsync)((0, ts_mockito_1.instance)(providerMock), constants_1.NULL_ADDRESS, balance, gasPrice, constants_1.RFQM_TX_GAS_ESTIMATE)).to.eql(isSuccessful);
            }
        });
        it('should fail with an outstanding transaction', async () => {
            (0, ts_mockito_1.when)(providerMock.getTransactionCount(constants_1.NULL_ADDRESS)).thenResolve(0);
            (0, ts_mockito_1.when)(providerMock.getTransactionCount(constants_1.NULL_ADDRESS, ethereum_types_1.BlockParamLiteral.Pending)).thenResolve(1);
            (0, chai_1.expect)(await (0, rfqm_worker_balance_utils_1.isWorkerReadyAndAbleAsync)((0, ts_mockito_1.instance)(providerMock), constants_1.NULL_ADDRESS, web3_wrapper_1.Web3Wrapper.toBaseUnitAmount(10, 18), web3_wrapper_1.Web3Wrapper.toBaseUnitAmount(120, 9), constants_1.RFQM_TX_GAS_ESTIMATE)).to.eql(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvcmZxbV93b3JrZXJfdGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUtBLG1EQUErQztBQUMvQywrQkFBOEI7QUFDOUIsbURBQW1EO0FBQ25ELG1DQUFtQztBQUNuQywyQ0FBNEQ7QUFFNUQsd0RBQThFO0FBQzlFLHlGQUFzRjtBQUV0RixJQUFJLFlBQWdDLENBQUM7QUFFckMsUUFBUSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtJQUN2QyxRQUFRLENBQUMsMkJBQTJCLEVBQUUsR0FBRyxFQUFFO1FBQ3ZDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDWixZQUFZLEdBQUcsSUFBQSxpQkFBSSxFQUFDLGtCQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsb0NBQW9DLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDaEQsSUFBQSxpQkFBSSxFQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyx3QkFBWSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEUsSUFBQSxpQkFBSSxFQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyx3QkFBWSxFQUFFLElBQUEscUJBQVEsR0FBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEYsTUFBTSxLQUFLLEdBQXNDO2dCQUM3QyxDQUFDLDBCQUFXLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLDBCQUFXLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQztnQkFDbkYsQ0FBQywwQkFBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSwwQkFBVyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUM7Z0JBQ3JGLENBQUMsMEJBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsMEJBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDO2FBQ3ZGLENBQUM7WUFDRixLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtnQkFDdEIsTUFBTSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDO2dCQUMvQyxJQUFBLGFBQU0sRUFDRixNQUFNLElBQUEscURBQXlCLEVBQzNCLElBQUEscUJBQVEsRUFBQyxZQUFZLENBQUMsRUFDdEIsd0JBQVksRUFDWixPQUFPLEVBQ1AsUUFBUSxFQUNSLGdDQUFvQixDQUN2QixDQUNKLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUMxQjtRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3pELElBQUEsaUJBQUksRUFBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsd0JBQVksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BFLElBQUEsaUJBQUksRUFBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsd0JBQVksRUFBRSxrQ0FBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUUvRixJQUFBLGFBQU0sRUFDRixNQUFNLElBQUEscURBQXlCLEVBQzNCLElBQUEscUJBQVEsRUFBQyxZQUFZLENBQUMsRUFDdEIsd0JBQVksRUFDWiwwQkFBVyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFDcEMsMEJBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQ3BDLGdDQUFvQixDQUN2QixDQUNKLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvcmZxbV93b3JrZXJfdGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTpjdXN0b20tbm8tbWFnaWMtbnVtYmVyc1xuLy8gdHNsaW50OmRpc2FibGU6bm8tZW1wdHlcbi8vIHRzbGludDpkaXNhYmxlOm1heC1maWxlLWxpbmUtY291bnRcblxuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnQDB4L3V0aWxzJztcbmltcG9ydCB7IFdlYjNXcmFwcGVyIH0gZnJvbSAnQDB4L3dlYjMtd3JhcHBlcic7XG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICdjaGFpJztcbmltcG9ydCB7IEJsb2NrUGFyYW1MaXRlcmFsIH0gZnJvbSAnZXRoZXJldW0tdHlwZXMnO1xuaW1wb3J0IHsgcHJvdmlkZXJzIH0gZnJvbSAnZXRoZXJzJztcbmltcG9ydCB7IGFueXRoaW5nLCBpbnN0YW5jZSwgbW9jaywgd2hlbiB9IGZyb20gJ3RzLW1vY2tpdG8nO1xuXG5pbXBvcnQgeyBOVUxMX0FERFJFU1MsIFJGUU1fVFhfR0FTX0VTVElNQVRFIH0gZnJvbSAnLi4vLi4vc3JjL2NvcmUvY29uc3RhbnRzJztcbmltcG9ydCB7IGlzV29ya2VyUmVhZHlBbmRBYmxlQXN5bmMgfSBmcm9tICcuLi8uLi9zcmMvdXRpbHMvcmZxbV93b3JrZXJfYmFsYW5jZV91dGlscyc7XG5cbmxldCBwcm92aWRlck1vY2s6IHByb3ZpZGVycy5Qcm92aWRlcjtcblxuZGVzY3JpYmUoJ1JGUU0gV29ya2VyIGJhbGFuY2UgdXRpbHMnLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJ2lzV29ya2VyUmVhZHlBbmRBYmxlQXN5bmMnLCAoKSA9PiB7XG4gICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgcHJvdmlkZXJNb2NrID0gbW9jayhwcm92aWRlcnMuV2ViM1Byb3ZpZGVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgYXNzZXNzIHRoZSBiYWxhbmNlIHRvIHRyYWRlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgd2hlbihwcm92aWRlck1vY2suZ2V0VHJhbnNhY3Rpb25Db3VudChOVUxMX0FERFJFU1MpKS50aGVuUmVzb2x2ZSgwKTtcbiAgICAgICAgICAgIHdoZW4ocHJvdmlkZXJNb2NrLmdldFRyYW5zYWN0aW9uQ291bnQoTlVMTF9BRERSRVNTLCBhbnl0aGluZygpKSkudGhlblJlc29sdmUoMCk7XG4gICAgICAgICAgICBjb25zdCB0ZXN0czogW0JpZ051bWJlciwgQmlnTnVtYmVyLCBib29sZWFuXVtdID0gW1xuICAgICAgICAgICAgICAgIFtXZWIzV3JhcHBlci50b0Jhc2VVbml0QW1vdW50KDAuNSwgMTgpLCBXZWIzV3JhcHBlci50b0Jhc2VVbml0QW1vdW50KDEyMCwgOSksIHRydWVdLFxuICAgICAgICAgICAgICAgIFtXZWIzV3JhcHBlci50b0Jhc2VVbml0QW1vdW50KDAuMDUsIDE4KSwgV2ViM1dyYXBwZXIudG9CYXNlVW5pdEFtb3VudCgxMjAsIDkpLCBmYWxzZV0sXG4gICAgICAgICAgICAgICAgW1dlYjNXcmFwcGVyLnRvQmFzZVVuaXRBbW91bnQoMC4wNSwgMTgpLCBXZWIzV3JhcHBlci50b0Jhc2VVbml0QW1vdW50KDEwMCwgOSksIHRydWVdLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdGVzdCBvZiB0ZXN0cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtiYWxhbmNlLCBnYXNQcmljZSwgaXNTdWNjZXNzZnVsXSA9IHRlc3Q7XG4gICAgICAgICAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBpc1dvcmtlclJlYWR5QW5kQWJsZUFzeW5jKFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UocHJvdmlkZXJNb2NrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE5VTExfQUREUkVTUyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBnYXNQcmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJGUU1fVFhfR0FTX0VTVElNQVRFLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICkudG8uZXFsKGlzU3VjY2Vzc2Z1bCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGZhaWwgd2l0aCBhbiBvdXRzdGFuZGluZyB0cmFuc2FjdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHdoZW4ocHJvdmlkZXJNb2NrLmdldFRyYW5zYWN0aW9uQ291bnQoTlVMTF9BRERSRVNTKSkudGhlblJlc29sdmUoMCk7XG4gICAgICAgICAgICB3aGVuKHByb3ZpZGVyTW9jay5nZXRUcmFuc2FjdGlvbkNvdW50KE5VTExfQUREUkVTUywgQmxvY2tQYXJhbUxpdGVyYWwuUGVuZGluZykpLnRoZW5SZXNvbHZlKDEpO1xuXG4gICAgICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICAgICAgYXdhaXQgaXNXb3JrZXJSZWFkeUFuZEFibGVBc3luYyhcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UocHJvdmlkZXJNb2NrKSxcbiAgICAgICAgICAgICAgICAgICAgTlVMTF9BRERSRVNTLFxuICAgICAgICAgICAgICAgICAgICBXZWIzV3JhcHBlci50b0Jhc2VVbml0QW1vdW50KDEwLCAxOCksXG4gICAgICAgICAgICAgICAgICAgIFdlYjNXcmFwcGVyLnRvQmFzZVVuaXRBbW91bnQoMTIwLCA5KSxcbiAgICAgICAgICAgICAgICAgICAgUkZRTV9UWF9HQVNfRVNUSU1BVEUsXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICkudG8uZXFsKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==