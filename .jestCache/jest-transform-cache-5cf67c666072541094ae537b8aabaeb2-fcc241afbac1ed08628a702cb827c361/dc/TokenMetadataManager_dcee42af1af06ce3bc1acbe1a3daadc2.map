{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/TokenMetadataManager.ts","mappings":";;;AAAA,uDAA8D;AAC9D,sCAAmC;AAGnC,MAAa,oBAAoB;IAG7B,YAAoC,QAAgB,EAAmB,gBAAoC;QAAvE,aAAQ,GAAR,QAAQ,CAAQ;QAAmB,qBAAgB,GAAhB,gBAAgB,CAAoB;QAF1F,wBAAmB,GAAwB,IAAI,GAAG,EAAE,CAAC;IAEwC,CAAC;IAE/G;;;;;;;;OAQG;IACI,KAAK,CAAC,qBAAqB,CAAC,YAAoB;QACnD,MAAM,aAAa,GAAG,IAAA,yCAAwB,EAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5E,IAAI,aAAa,EAAE;YACf,OAAO,aAAa,CAAC,QAAQ,CAAC;SACjC;QACD,MAAM,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAClE,IAAI,cAAc,EAAE;YAChB,OAAO,cAAc,CAAC;SACzB;QACD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;QACxF,eAAM,CAAC,IAAI,CACP,EAAE,YAAY,EAAE,QAAQ,EAAE,eAAe,EAAE,SAAS,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,EACrF,wCAAwC,CAC3C,CAAC;QACF,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;QAC5D,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AA/BD,oDA+BC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/TokenMetadataManager.ts"],"sourcesContent":["import { getTokenMetadataIfExists } from '@0x/token-metadata';\nimport { logger } from '../logger';\nimport { RfqBlockchainUtils } from './rfq_blockchain_utils';\n\nexport class TokenMetadataManager {\n    private readonly _tokenDecimalsCache: Map<string, number> = new Map();\n\n    public constructor(private readonly _chainId: number, private readonly _blockchainUtils: RfqBlockchainUtils) {}\n\n    /**\n     * Utility function to get the decimals for an ERC20 token by its address.\n     * First checks 0x/token-metadata for the information, and if not present,\n     * queries the data from the blockchain.\n     *\n     * Uses an in-memory cache to store previously-fetched values.\n     *\n     * Throws if there is a problem fetching the data from on chain.\n     */\n    public async getTokenDecimalsAsync(tokenAddress: string): Promise<number> {\n        const localMetadata = getTokenMetadataIfExists(tokenAddress, this._chainId);\n        if (localMetadata) {\n            return localMetadata.decimals;\n        }\n        const cachedDecimals = this._tokenDecimalsCache.get(tokenAddress);\n        if (cachedDecimals) {\n            return cachedDecimals;\n        }\n        const onchainDecimals = await this._blockchainUtils.getTokenDecimalsAsync(tokenAddress);\n        logger.info(\n            { tokenAddress, decimals: onchainDecimals, cacheSize: this._tokenDecimalsCache.size },\n            'Token decimals fetched from blockchain',\n        );\n        this._tokenDecimalsCache.set(tokenAddress, onchainDecimals);\n        return onchainDecimals;\n    }\n}\n"],"version":3}