d0330e55260c31efb94d1cd08c92cfb9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetQuoteResponseJSON = exports.GetQuoteRequestJSON = exports.MetaTransactionJSON = exports.QuoteJSON = exports.LiquiditySourceJSON = exports.GetQuoteResponse = exports.GetQuoteRequest = exports.MetaTransaction = exports.Quote = exports.LiquiditySource = exports.createMetaTransactionService = exports.GetQuoteJSON = exports.GetQuote = exports.MIN_SUPPORTED_VERSION_0_0_56 = void 0;
const protoscript_1 = require("protoscript");
const twirpscript_1 = require("twirpscript");
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
var twirpscript_2 = require("twirpscript");
Object.defineProperty(exports, "MIN_SUPPORTED_VERSION_0_0_56", { enumerable: true, get: function () { return twirpscript_2.MIN_SUPPORTED_VERSION_0_0_56; } });
const big_number_js_pb_1 = require("./big_number_js.pb");
//========================================//
// MetaTransactionService Protobuf Client //
//========================================//
async function GetQuote(getQuoteRequest, config) {
    const response = await (0, twirpscript_1.PBrequest)("/MetaTransactionService/GetQuote", exports.GetQuoteRequest.encode(getQuoteRequest), config);
    return exports.GetQuoteResponse.decode(response);
}
exports.GetQuote = GetQuote;
//========================================//
//   MetaTransactionService JSON Client   //
//========================================//
async function GetQuoteJSON(getQuoteRequest, config) {
    const response = await (0, twirpscript_1.JSONrequest)("/MetaTransactionService/GetQuote", exports.GetQuoteRequestJSON.encode(getQuoteRequest), config);
    return exports.GetQuoteResponseJSON.decode(response);
}
exports.GetQuoteJSON = GetQuoteJSON;
function createMetaTransactionService(service) {
    return {
        name: "MetaTransactionService",
        methods: {
            GetQuote: {
                name: "GetQuote",
                handler: service.GetQuote,
                input: { protobuf: exports.GetQuoteRequest, json: exports.GetQuoteRequestJSON },
                output: { protobuf: exports.GetQuoteResponse, json: exports.GetQuoteResponseJSON },
            },
        },
    };
}
exports.createMetaTransactionService = createMetaTransactionService;
//========================================//
//        Protobuf Encode / Decode        //
//========================================//
exports.LiquiditySource = {
    /**
     * Serializes LiquiditySource to protobuf.
     */
    encode: function (msg) {
        return exports.LiquiditySource._writeMessage(msg, new protoscript_1.BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes LiquiditySource from protobuf.
     */
    decode: function (bytes) {
        return exports.LiquiditySource._readMessage(exports.LiquiditySource.initialize(), new protoscript_1.BinaryReader(bytes));
    },
    /**
     * Initializes LiquiditySource with all fields set to their default value.
     */
    initialize: function () {
        return {
            name: "",
            proportion: big_number_js_pb_1.BigNumberJs.initialize(),
            intermediateToken: undefined,
            hops: [],
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        var _a;
        if (msg.name) {
            writer.writeString(1, msg.name);
        }
        if (msg.proportion) {
            writer.writeMessage(2, msg.proportion, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.intermediateToken != undefined) {
            writer.writeString(3, msg.intermediateToken);
        }
        if ((_a = msg.hops) === null || _a === void 0 ? void 0 : _a.length) {
            writer.writeRepeatedString(4, msg.hops);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.name = reader.readString();
                    break;
                }
                case 2: {
                    reader.readMessage(msg.proportion, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 3: {
                    msg.intermediateToken = reader.readString();
                    break;
                }
                case 4: {
                    msg.hops.push(reader.readString());
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
exports.Quote = {
    /**
     * Serializes Quote to protobuf.
     */
    encode: function (msg) {
        return exports.Quote._writeMessage(msg, new protoscript_1.BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes Quote from protobuf.
     */
    decode: function (bytes) {
        return exports.Quote._readMessage(exports.Quote.initialize(), new protoscript_1.BinaryReader(bytes));
    },
    /**
     * Initializes Quote with all fields set to their default value.
     */
    initialize: function () {
        return {
            sellTokenAddress: "",
            sellAmount: big_number_js_pb_1.BigNumberJs.initialize(),
            buyTokenAddress: "",
            buyAmount: big_number_js_pb_1.BigNumberJs.initialize(),
            price: big_number_js_pb_1.BigNumberJs.initialize(),
            estimatedPriceImpact: undefined,
            sellTokenToNativeTokenRate: big_number_js_pb_1.BigNumberJs.initialize(),
            buyTokenToNativeTokenRate: big_number_js_pb_1.BigNumberJs.initialize(),
            chainId: 0,
            gas: big_number_js_pb_1.BigNumberJs.initialize(),
            estimatedGas: big_number_js_pb_1.BigNumberJs.initialize(),
            gasPrice: big_number_js_pb_1.BigNumberJs.initialize(),
            value: big_number_js_pb_1.BigNumberJs.initialize(),
            protocolFee: big_number_js_pb_1.BigNumberJs.initialize(),
            minimumProtocolFee: big_number_js_pb_1.BigNumberJs.initialize(),
            allowanceTarget: "",
            liquiditySources: [],
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        var _a;
        if (msg.sellTokenAddress) {
            writer.writeString(1, msg.sellTokenAddress);
        }
        if (msg.sellAmount) {
            writer.writeMessage(2, msg.sellAmount, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.buyTokenAddress) {
            writer.writeString(3, msg.buyTokenAddress);
        }
        if (msg.buyAmount) {
            writer.writeMessage(4, msg.buyAmount, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.price) {
            writer.writeMessage(5, msg.price, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.estimatedPriceImpact != undefined) {
            writer.writeMessage(6, msg.estimatedPriceImpact, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.sellTokenToNativeTokenRate) {
            writer.writeMessage(7, msg.sellTokenToNativeTokenRate, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.buyTokenToNativeTokenRate) {
            writer.writeMessage(8, msg.buyTokenToNativeTokenRate, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.chainId) {
            writer.writeInt32(9, msg.chainId);
        }
        if (msg.gas) {
            writer.writeMessage(10, msg.gas, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.estimatedGas) {
            writer.writeMessage(11, msg.estimatedGas, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.gasPrice) {
            writer.writeMessage(12, msg.gasPrice, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.value) {
            writer.writeMessage(13, msg.value, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.protocolFee) {
            writer.writeMessage(14, msg.protocolFee, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.minimumProtocolFee) {
            writer.writeMessage(15, msg.minimumProtocolFee, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.allowanceTarget) {
            writer.writeString(16, msg.allowanceTarget);
        }
        if ((_a = msg.liquiditySources) === null || _a === void 0 ? void 0 : _a.length) {
            writer.writeRepeatedMessage(17, msg.liquiditySources, exports.LiquiditySource._writeMessage);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.sellTokenAddress = reader.readString();
                    break;
                }
                case 2: {
                    reader.readMessage(msg.sellAmount, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 3: {
                    msg.buyTokenAddress = reader.readString();
                    break;
                }
                case 4: {
                    reader.readMessage(msg.buyAmount, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 5: {
                    reader.readMessage(msg.price, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 6: {
                    msg.estimatedPriceImpact = big_number_js_pb_1.BigNumberJs.initialize();
                    reader.readMessage(msg.estimatedPriceImpact, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 7: {
                    reader.readMessage(msg.sellTokenToNativeTokenRate, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 8: {
                    reader.readMessage(msg.buyTokenToNativeTokenRate, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 9: {
                    msg.chainId = reader.readInt32();
                    break;
                }
                case 10: {
                    reader.readMessage(msg.gas, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 11: {
                    reader.readMessage(msg.estimatedGas, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 12: {
                    reader.readMessage(msg.gasPrice, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 13: {
                    reader.readMessage(msg.value, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 14: {
                    reader.readMessage(msg.protocolFee, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 15: {
                    reader.readMessage(msg.minimumProtocolFee, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 16: {
                    msg.allowanceTarget = reader.readString();
                    break;
                }
                case 17: {
                    const m = exports.LiquiditySource.initialize();
                    reader.readMessage(m, exports.LiquiditySource._readMessage);
                    msg.liquiditySources.push(m);
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
exports.MetaTransaction = {
    /**
     * Serializes MetaTransaction to protobuf.
     */
    encode: function (msg) {
        return exports.MetaTransaction._writeMessage(msg, new protoscript_1.BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes MetaTransaction from protobuf.
     */
    decode: function (bytes) {
        return exports.MetaTransaction._readMessage(exports.MetaTransaction.initialize(), new protoscript_1.BinaryReader(bytes));
    },
    /**
     * Initializes MetaTransaction with all fields set to their default value.
     */
    initialize: function () {
        return {
            signerAddress: "",
            senderAddress: "",
            minGasPrice: big_number_js_pb_1.BigNumberJs.initialize(),
            maxGasPrice: big_number_js_pb_1.BigNumberJs.initialize(),
            expirationTimeSeconds: big_number_js_pb_1.BigNumberJs.initialize(),
            salt: big_number_js_pb_1.BigNumberJs.initialize(),
            callData: "",
            value: big_number_js_pb_1.BigNumberJs.initialize(),
            feeTokenAddress: "",
            feeAmount: big_number_js_pb_1.BigNumberJs.initialize(),
            chainId: 0,
            verifyingContract: "",
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.signerAddress) {
            writer.writeString(1, msg.signerAddress);
        }
        if (msg.senderAddress) {
            writer.writeString(2, msg.senderAddress);
        }
        if (msg.minGasPrice) {
            writer.writeMessage(3, msg.minGasPrice, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.maxGasPrice) {
            writer.writeMessage(4, msg.maxGasPrice, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.expirationTimeSeconds) {
            writer.writeMessage(5, msg.expirationTimeSeconds, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.salt) {
            writer.writeMessage(6, msg.salt, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.callData) {
            writer.writeString(7, msg.callData);
        }
        if (msg.value) {
            writer.writeMessage(8, msg.value, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.feeTokenAddress) {
            writer.writeString(9, msg.feeTokenAddress);
        }
        if (msg.feeAmount) {
            writer.writeMessage(10, msg.feeAmount, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.chainId) {
            writer.writeInt32(11, msg.chainId);
        }
        if (msg.verifyingContract) {
            writer.writeString(12, msg.verifyingContract);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.signerAddress = reader.readString();
                    break;
                }
                case 2: {
                    msg.senderAddress = reader.readString();
                    break;
                }
                case 3: {
                    reader.readMessage(msg.minGasPrice, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 4: {
                    reader.readMessage(msg.maxGasPrice, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 5: {
                    reader.readMessage(msg.expirationTimeSeconds, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 6: {
                    reader.readMessage(msg.salt, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 7: {
                    msg.callData = reader.readString();
                    break;
                }
                case 8: {
                    reader.readMessage(msg.value, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 9: {
                    msg.feeTokenAddress = reader.readString();
                    break;
                }
                case 10: {
                    reader.readMessage(msg.feeAmount, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 11: {
                    msg.chainId = reader.readInt32();
                    break;
                }
                case 12: {
                    msg.verifyingContract = reader.readString();
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
exports.GetQuoteRequest = {
    /**
     * Serializes GetQuoteRequest to protobuf.
     */
    encode: function (msg) {
        return exports.GetQuoteRequest._writeMessage(msg, new protoscript_1.BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes GetQuoteRequest from protobuf.
     */
    decode: function (bytes) {
        return exports.GetQuoteRequest._readMessage(exports.GetQuoteRequest.initialize(), new protoscript_1.BinaryReader(bytes));
    },
    /**
     * Initializes GetQuoteRequest with all fields set to their default value.
     */
    initialize: function () {
        return {
            sellTokenAddress: "",
            buyTokenAddress: "",
            sellAmount: undefined,
            buyAmount: undefined,
            chainId: 0,
            takerAddress: "",
            integratorId: "",
            affiliateAddress: undefined,
            slippagePercentage: undefined,
            quoteUniqueId: undefined,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.sellTokenAddress) {
            writer.writeString(1, msg.sellTokenAddress);
        }
        if (msg.buyTokenAddress) {
            writer.writeString(2, msg.buyTokenAddress);
        }
        if (msg.sellAmount != undefined) {
            writer.writeMessage(3, msg.sellAmount, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.buyAmount != undefined) {
            writer.writeMessage(4, msg.buyAmount, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.chainId) {
            writer.writeInt32(5, msg.chainId);
        }
        if (msg.takerAddress) {
            writer.writeString(6, msg.takerAddress);
        }
        if (msg.integratorId) {
            writer.writeString(7, msg.integratorId);
        }
        if (msg.affiliateAddress != undefined) {
            writer.writeString(8, msg.affiliateAddress);
        }
        if (msg.slippagePercentage != undefined) {
            writer.writeMessage(9, msg.slippagePercentage, big_number_js_pb_1.BigNumberJs._writeMessage);
        }
        if (msg.quoteUniqueId != undefined) {
            writer.writeString(10, msg.quoteUniqueId);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.sellTokenAddress = reader.readString();
                    break;
                }
                case 2: {
                    msg.buyTokenAddress = reader.readString();
                    break;
                }
                case 3: {
                    msg.sellAmount = big_number_js_pb_1.BigNumberJs.initialize();
                    reader.readMessage(msg.sellAmount, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 4: {
                    msg.buyAmount = big_number_js_pb_1.BigNumberJs.initialize();
                    reader.readMessage(msg.buyAmount, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 5: {
                    msg.chainId = reader.readInt32();
                    break;
                }
                case 6: {
                    msg.takerAddress = reader.readString();
                    break;
                }
                case 7: {
                    msg.integratorId = reader.readString();
                    break;
                }
                case 8: {
                    msg.affiliateAddress = reader.readString();
                    break;
                }
                case 9: {
                    msg.slippagePercentage = big_number_js_pb_1.BigNumberJs.initialize();
                    reader.readMessage(msg.slippagePercentage, big_number_js_pb_1.BigNumberJs._readMessage);
                    break;
                }
                case 10: {
                    msg.quoteUniqueId = reader.readString();
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
exports.GetQuoteResponse = {
    /**
     * Serializes GetQuoteResponse to protobuf.
     */
    encode: function (msg) {
        return exports.GetQuoteResponse._writeMessage(msg, new protoscript_1.BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes GetQuoteResponse from protobuf.
     */
    decode: function (bytes) {
        return exports.GetQuoteResponse._readMessage(exports.GetQuoteResponse.initialize(), new protoscript_1.BinaryReader(bytes));
    },
    /**
     * Initializes GetQuoteResponse with all fields set to their default value.
     */
    initialize: function () {
        return {
            quote: exports.Quote.initialize(),
            metaTransaction: exports.MetaTransaction.initialize(),
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.quote) {
            writer.writeMessage(1, msg.quote, exports.Quote._writeMessage);
        }
        if (msg.metaTransaction) {
            writer.writeMessage(2, msg.metaTransaction, exports.MetaTransaction._writeMessage);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    reader.readMessage(msg.quote, exports.Quote._readMessage);
                    break;
                }
                case 2: {
                    reader.readMessage(msg.metaTransaction, exports.MetaTransaction._readMessage);
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
//========================================//
//          JSON Encode / Decode          //
//========================================//
exports.LiquiditySourceJSON = {
    /**
     * Serializes LiquiditySource to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(exports.LiquiditySourceJSON._writeMessage(msg));
    },
    /**
     * Deserializes LiquiditySource from JSON.
     */
    decode: function (json) {
        return exports.LiquiditySourceJSON._readMessage(exports.LiquiditySourceJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes LiquiditySource with all fields set to their default value.
     */
    initialize: function () {
        return {
            name: "",
            proportion: big_number_js_pb_1.BigNumberJs.initialize(),
            intermediateToken: undefined,
            hops: [],
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        var _a;
        const json = {};
        if (msg.name) {
            json["name"] = msg.name;
        }
        if (msg.proportion) {
            const proportion = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.proportion);
            if (Object.keys(proportion).length > 0) {
                json["proportion"] = proportion;
            }
        }
        if (msg.intermediateToken != undefined) {
            json["intermediateToken"] = msg.intermediateToken;
        }
        if ((_a = msg.hops) === null || _a === void 0 ? void 0 : _a.length) {
            json["hops"] = msg.hops;
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        var _a;
        const _name = json["name"];
        if (_name) {
            msg.name = _name;
        }
        const _proportion = json["proportion"];
        if (_proportion) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _proportion);
            msg.proportion = m;
        }
        const _intermediateToken = (_a = json["intermediateToken"]) !== null && _a !== void 0 ? _a : json["intermediate_token"];
        if (_intermediateToken) {
            msg.intermediateToken = _intermediateToken;
        }
        const _hops = json["hops"];
        if (_hops) {
            msg.hops = _hops;
        }
        return msg;
    },
};
exports.QuoteJSON = {
    /**
     * Serializes Quote to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(exports.QuoteJSON._writeMessage(msg));
    },
    /**
     * Deserializes Quote from JSON.
     */
    decode: function (json) {
        return exports.QuoteJSON._readMessage(exports.QuoteJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes Quote with all fields set to their default value.
     */
    initialize: function () {
        return {
            sellTokenAddress: "",
            sellAmount: big_number_js_pb_1.BigNumberJs.initialize(),
            buyTokenAddress: "",
            buyAmount: big_number_js_pb_1.BigNumberJs.initialize(),
            price: big_number_js_pb_1.BigNumberJs.initialize(),
            estimatedPriceImpact: undefined,
            sellTokenToNativeTokenRate: big_number_js_pb_1.BigNumberJs.initialize(),
            buyTokenToNativeTokenRate: big_number_js_pb_1.BigNumberJs.initialize(),
            chainId: 0,
            gas: big_number_js_pb_1.BigNumberJs.initialize(),
            estimatedGas: big_number_js_pb_1.BigNumberJs.initialize(),
            gasPrice: big_number_js_pb_1.BigNumberJs.initialize(),
            value: big_number_js_pb_1.BigNumberJs.initialize(),
            protocolFee: big_number_js_pb_1.BigNumberJs.initialize(),
            minimumProtocolFee: big_number_js_pb_1.BigNumberJs.initialize(),
            allowanceTarget: "",
            liquiditySources: [],
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        var _a;
        const json = {};
        if (msg.sellTokenAddress) {
            json["sellTokenAddress"] = msg.sellTokenAddress;
        }
        if (msg.sellAmount) {
            const sellAmount = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.sellAmount);
            if (Object.keys(sellAmount).length > 0) {
                json["sellAmount"] = sellAmount;
            }
        }
        if (msg.buyTokenAddress) {
            json["buyTokenAddress"] = msg.buyTokenAddress;
        }
        if (msg.buyAmount) {
            const buyAmount = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.buyAmount);
            if (Object.keys(buyAmount).length > 0) {
                json["buyAmount"] = buyAmount;
            }
        }
        if (msg.price) {
            const price = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.price);
            if (Object.keys(price).length > 0) {
                json["price"] = price;
            }
        }
        if (msg.estimatedPriceImpact != undefined) {
            const estimatedPriceImpact = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.estimatedPriceImpact);
            json["estimatedPriceImpact"] = estimatedPriceImpact;
        }
        if (msg.sellTokenToNativeTokenRate) {
            const sellTokenToNativeTokenRate = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.sellTokenToNativeTokenRate);
            if (Object.keys(sellTokenToNativeTokenRate).length > 0) {
                json["sellTokenToNativeTokenRate"] = sellTokenToNativeTokenRate;
            }
        }
        if (msg.buyTokenToNativeTokenRate) {
            const buyTokenToNativeTokenRate = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.buyTokenToNativeTokenRate);
            if (Object.keys(buyTokenToNativeTokenRate).length > 0) {
                json["buyTokenToNativeTokenRate"] = buyTokenToNativeTokenRate;
            }
        }
        if (msg.chainId) {
            json["chainId"] = msg.chainId;
        }
        if (msg.gas) {
            const gas = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.gas);
            if (Object.keys(gas).length > 0) {
                json["gas"] = gas;
            }
        }
        if (msg.estimatedGas) {
            const estimatedGas = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.estimatedGas);
            if (Object.keys(estimatedGas).length > 0) {
                json["estimatedGas"] = estimatedGas;
            }
        }
        if (msg.gasPrice) {
            const gasPrice = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.gasPrice);
            if (Object.keys(gasPrice).length > 0) {
                json["gasPrice"] = gasPrice;
            }
        }
        if (msg.value) {
            const value = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.value);
            if (Object.keys(value).length > 0) {
                json["value"] = value;
            }
        }
        if (msg.protocolFee) {
            const protocolFee = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.protocolFee);
            if (Object.keys(protocolFee).length > 0) {
                json["protocolFee"] = protocolFee;
            }
        }
        if (msg.minimumProtocolFee) {
            const minimumProtocolFee = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.minimumProtocolFee);
            if (Object.keys(minimumProtocolFee).length > 0) {
                json["minimumProtocolFee"] = minimumProtocolFee;
            }
        }
        if (msg.allowanceTarget) {
            json["allowanceTarget"] = msg.allowanceTarget;
        }
        if ((_a = msg.liquiditySources) === null || _a === void 0 ? void 0 : _a.length) {
            json["liquiditySources"] = msg.liquiditySources.map(exports.LiquiditySourceJSON._writeMessage);
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const _sellTokenAddress = (_a = json["sellTokenAddress"]) !== null && _a !== void 0 ? _a : json["sell_token_address"];
        if (_sellTokenAddress) {
            msg.sellTokenAddress = _sellTokenAddress;
        }
        const _sellAmount = (_b = json["sellAmount"]) !== null && _b !== void 0 ? _b : json["sell_amount"];
        if (_sellAmount) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _sellAmount);
            msg.sellAmount = m;
        }
        const _buyTokenAddress = (_c = json["buyTokenAddress"]) !== null && _c !== void 0 ? _c : json["buy_token_address"];
        if (_buyTokenAddress) {
            msg.buyTokenAddress = _buyTokenAddress;
        }
        const _buyAmount = (_d = json["buyAmount"]) !== null && _d !== void 0 ? _d : json["buy_amount"];
        if (_buyAmount) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _buyAmount);
            msg.buyAmount = m;
        }
        const _price = json["price"];
        if (_price) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _price);
            msg.price = m;
        }
        const _estimatedPriceImpact = (_e = json["estimatedPriceImpact"]) !== null && _e !== void 0 ? _e : json["estimated_price_impact"];
        if (_estimatedPriceImpact) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _estimatedPriceImpact);
            msg.estimatedPriceImpact = m;
        }
        const _sellTokenToNativeTokenRate = (_f = json["sellTokenToNativeTokenRate"]) !== null && _f !== void 0 ? _f : json["sell_token_to_native_token_rate"];
        if (_sellTokenToNativeTokenRate) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _sellTokenToNativeTokenRate);
            msg.sellTokenToNativeTokenRate = m;
        }
        const _buyTokenToNativeTokenRate = (_g = json["buyTokenToNativeTokenRate"]) !== null && _g !== void 0 ? _g : json["buy_token_to_native_token_rate"];
        if (_buyTokenToNativeTokenRate) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _buyTokenToNativeTokenRate);
            msg.buyTokenToNativeTokenRate = m;
        }
        const _chainId = (_h = json["chainId"]) !== null && _h !== void 0 ? _h : json["chain_id"];
        if (_chainId) {
            msg.chainId = _chainId;
        }
        const _gas = json["gas"];
        if (_gas) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _gas);
            msg.gas = m;
        }
        const _estimatedGas = (_j = json["estimatedGas"]) !== null && _j !== void 0 ? _j : json["estimated_gas"];
        if (_estimatedGas) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _estimatedGas);
            msg.estimatedGas = m;
        }
        const _gasPrice = (_k = json["gasPrice"]) !== null && _k !== void 0 ? _k : json["gas_price"];
        if (_gasPrice) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _gasPrice);
            msg.gasPrice = m;
        }
        const _value = json["value"];
        if (_value) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _value);
            msg.value = m;
        }
        const _protocolFee = (_l = json["protocolFee"]) !== null && _l !== void 0 ? _l : json["protocol_fee"];
        if (_protocolFee) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _protocolFee);
            msg.protocolFee = m;
        }
        const _minimumProtocolFee = (_m = json["minimumProtocolFee"]) !== null && _m !== void 0 ? _m : json["minimum_protocol_fee"];
        if (_minimumProtocolFee) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _minimumProtocolFee);
            msg.minimumProtocolFee = m;
        }
        const _allowanceTarget = (_o = json["allowanceTarget"]) !== null && _o !== void 0 ? _o : json["allowance_target"];
        if (_allowanceTarget) {
            msg.allowanceTarget = _allowanceTarget;
        }
        const _liquiditySources = (_p = json["liquiditySources"]) !== null && _p !== void 0 ? _p : json["liquidity_sources"];
        if (_liquiditySources) {
            for (const item of _liquiditySources) {
                const m = exports.LiquiditySource.initialize();
                exports.LiquiditySourceJSON._readMessage(m, item);
                msg.liquiditySources.push(m);
            }
        }
        return msg;
    },
};
exports.MetaTransactionJSON = {
    /**
     * Serializes MetaTransaction to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(exports.MetaTransactionJSON._writeMessage(msg));
    },
    /**
     * Deserializes MetaTransaction from JSON.
     */
    decode: function (json) {
        return exports.MetaTransactionJSON._readMessage(exports.MetaTransactionJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes MetaTransaction with all fields set to their default value.
     */
    initialize: function () {
        return {
            signerAddress: "",
            senderAddress: "",
            minGasPrice: big_number_js_pb_1.BigNumberJs.initialize(),
            maxGasPrice: big_number_js_pb_1.BigNumberJs.initialize(),
            expirationTimeSeconds: big_number_js_pb_1.BigNumberJs.initialize(),
            salt: big_number_js_pb_1.BigNumberJs.initialize(),
            callData: "",
            value: big_number_js_pb_1.BigNumberJs.initialize(),
            feeTokenAddress: "",
            feeAmount: big_number_js_pb_1.BigNumberJs.initialize(),
            chainId: 0,
            verifyingContract: "",
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.signerAddress) {
            json["signerAddress"] = msg.signerAddress;
        }
        if (msg.senderAddress) {
            json["senderAddress"] = msg.senderAddress;
        }
        if (msg.minGasPrice) {
            const minGasPrice = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.minGasPrice);
            if (Object.keys(minGasPrice).length > 0) {
                json["minGasPrice"] = minGasPrice;
            }
        }
        if (msg.maxGasPrice) {
            const maxGasPrice = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.maxGasPrice);
            if (Object.keys(maxGasPrice).length > 0) {
                json["maxGasPrice"] = maxGasPrice;
            }
        }
        if (msg.expirationTimeSeconds) {
            const expirationTimeSeconds = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.expirationTimeSeconds);
            if (Object.keys(expirationTimeSeconds).length > 0) {
                json["expirationTimeSeconds"] = expirationTimeSeconds;
            }
        }
        if (msg.salt) {
            const salt = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.salt);
            if (Object.keys(salt).length > 0) {
                json["salt"] = salt;
            }
        }
        if (msg.callData) {
            json["callData"] = msg.callData;
        }
        if (msg.value) {
            const value = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.value);
            if (Object.keys(value).length > 0) {
                json["value"] = value;
            }
        }
        if (msg.feeTokenAddress) {
            json["feeTokenAddress"] = msg.feeTokenAddress;
        }
        if (msg.feeAmount) {
            const feeAmount = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.feeAmount);
            if (Object.keys(feeAmount).length > 0) {
                json["feeAmount"] = feeAmount;
            }
        }
        if (msg.chainId) {
            json["chainId"] = msg.chainId;
        }
        if (msg.verifyingContract) {
            json["verifyingContract"] = msg.verifyingContract;
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const _signerAddress = (_a = json["signerAddress"]) !== null && _a !== void 0 ? _a : json["signer_address"];
        if (_signerAddress) {
            msg.signerAddress = _signerAddress;
        }
        const _senderAddress = (_b = json["senderAddress"]) !== null && _b !== void 0 ? _b : json["sender_address"];
        if (_senderAddress) {
            msg.senderAddress = _senderAddress;
        }
        const _minGasPrice = (_c = json["minGasPrice"]) !== null && _c !== void 0 ? _c : json["min_gas_price"];
        if (_minGasPrice) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _minGasPrice);
            msg.minGasPrice = m;
        }
        const _maxGasPrice = (_d = json["maxGasPrice"]) !== null && _d !== void 0 ? _d : json["max_gas_price"];
        if (_maxGasPrice) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _maxGasPrice);
            msg.maxGasPrice = m;
        }
        const _expirationTimeSeconds = (_e = json["expirationTimeSeconds"]) !== null && _e !== void 0 ? _e : json["expiration_time_seconds"];
        if (_expirationTimeSeconds) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _expirationTimeSeconds);
            msg.expirationTimeSeconds = m;
        }
        const _salt = json["salt"];
        if (_salt) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _salt);
            msg.salt = m;
        }
        const _callData = (_f = json["callData"]) !== null && _f !== void 0 ? _f : json["call_data"];
        if (_callData) {
            msg.callData = _callData;
        }
        const _value = json["value"];
        if (_value) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _value);
            msg.value = m;
        }
        const _feeTokenAddress = (_g = json["feeTokenAddress"]) !== null && _g !== void 0 ? _g : json["fee_token_address"];
        if (_feeTokenAddress) {
            msg.feeTokenAddress = _feeTokenAddress;
        }
        const _feeAmount = (_h = json["feeAmount"]) !== null && _h !== void 0 ? _h : json["fee_amount"];
        if (_feeAmount) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _feeAmount);
            msg.feeAmount = m;
        }
        const _chainId = (_j = json["chainId"]) !== null && _j !== void 0 ? _j : json["chain_id"];
        if (_chainId) {
            msg.chainId = _chainId;
        }
        const _verifyingContract = (_k = json["verifyingContract"]) !== null && _k !== void 0 ? _k : json["verifying_contract"];
        if (_verifyingContract) {
            msg.verifyingContract = _verifyingContract;
        }
        return msg;
    },
};
exports.GetQuoteRequestJSON = {
    /**
     * Serializes GetQuoteRequest to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(exports.GetQuoteRequestJSON._writeMessage(msg));
    },
    /**
     * Deserializes GetQuoteRequest from JSON.
     */
    decode: function (json) {
        return exports.GetQuoteRequestJSON._readMessage(exports.GetQuoteRequestJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes GetQuoteRequest with all fields set to their default value.
     */
    initialize: function () {
        return {
            sellTokenAddress: "",
            buyTokenAddress: "",
            sellAmount: undefined,
            buyAmount: undefined,
            chainId: 0,
            takerAddress: "",
            integratorId: "",
            affiliateAddress: undefined,
            slippagePercentage: undefined,
            quoteUniqueId: undefined,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.sellTokenAddress) {
            json["sellTokenAddress"] = msg.sellTokenAddress;
        }
        if (msg.buyTokenAddress) {
            json["buyTokenAddress"] = msg.buyTokenAddress;
        }
        if (msg.sellAmount != undefined) {
            const sellAmount = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.sellAmount);
            json["sellAmount"] = sellAmount;
        }
        if (msg.buyAmount != undefined) {
            const buyAmount = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.buyAmount);
            json["buyAmount"] = buyAmount;
        }
        if (msg.chainId) {
            json["chainId"] = msg.chainId;
        }
        if (msg.takerAddress) {
            json["takerAddress"] = msg.takerAddress;
        }
        if (msg.integratorId) {
            json["integratorId"] = msg.integratorId;
        }
        if (msg.affiliateAddress != undefined) {
            json["affiliateAddress"] = msg.affiliateAddress;
        }
        if (msg.slippagePercentage != undefined) {
            const slippagePercentage = big_number_js_pb_1.BigNumberJsJSON._writeMessage(msg.slippagePercentage);
            json["slippagePercentage"] = slippagePercentage;
        }
        if (msg.quoteUniqueId != undefined) {
            json["quoteUniqueId"] = msg.quoteUniqueId;
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const _sellTokenAddress = (_a = json["sellTokenAddress"]) !== null && _a !== void 0 ? _a : json["sell_token_address"];
        if (_sellTokenAddress) {
            msg.sellTokenAddress = _sellTokenAddress;
        }
        const _buyTokenAddress = (_b = json["buyTokenAddress"]) !== null && _b !== void 0 ? _b : json["buy_token_address"];
        if (_buyTokenAddress) {
            msg.buyTokenAddress = _buyTokenAddress;
        }
        const _sellAmount = (_c = json["sellAmount"]) !== null && _c !== void 0 ? _c : json["sell_amount"];
        if (_sellAmount) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _sellAmount);
            msg.sellAmount = m;
        }
        const _buyAmount = (_d = json["buyAmount"]) !== null && _d !== void 0 ? _d : json["buy_amount"];
        if (_buyAmount) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _buyAmount);
            msg.buyAmount = m;
        }
        const _chainId = (_e = json["chainId"]) !== null && _e !== void 0 ? _e : json["chain_id"];
        if (_chainId) {
            msg.chainId = _chainId;
        }
        const _takerAddress = (_f = json["takerAddress"]) !== null && _f !== void 0 ? _f : json["taker_address"];
        if (_takerAddress) {
            msg.takerAddress = _takerAddress;
        }
        const _integratorId = (_g = json["integratorId"]) !== null && _g !== void 0 ? _g : json["integrator_id"];
        if (_integratorId) {
            msg.integratorId = _integratorId;
        }
        const _affiliateAddress = (_h = json["affiliateAddress"]) !== null && _h !== void 0 ? _h : json["affiliate_address"];
        if (_affiliateAddress) {
            msg.affiliateAddress = _affiliateAddress;
        }
        const _slippagePercentage = (_j = json["slippagePercentage"]) !== null && _j !== void 0 ? _j : json["slippage_percentage"];
        if (_slippagePercentage) {
            const m = big_number_js_pb_1.BigNumberJs.initialize();
            big_number_js_pb_1.BigNumberJsJSON._readMessage(m, _slippagePercentage);
            msg.slippagePercentage = m;
        }
        const _quoteUniqueId = (_k = json["quoteUniqueId"]) !== null && _k !== void 0 ? _k : json["quote_unique_id"];
        if (_quoteUniqueId) {
            msg.quoteUniqueId = _quoteUniqueId;
        }
        return msg;
    },
};
exports.GetQuoteResponseJSON = {
    /**
     * Serializes GetQuoteResponse to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(exports.GetQuoteResponseJSON._writeMessage(msg));
    },
    /**
     * Deserializes GetQuoteResponse from JSON.
     */
    decode: function (json) {
        return exports.GetQuoteResponseJSON._readMessage(exports.GetQuoteResponseJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes GetQuoteResponse with all fields set to their default value.
     */
    initialize: function () {
        return {
            quote: exports.Quote.initialize(),
            metaTransaction: exports.MetaTransaction.initialize(),
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.quote) {
            const quote = exports.QuoteJSON._writeMessage(msg.quote);
            if (Object.keys(quote).length > 0) {
                json["quote"] = quote;
            }
        }
        if (msg.metaTransaction) {
            const metaTransaction = exports.MetaTransactionJSON._writeMessage(msg.metaTransaction);
            if (Object.keys(metaTransaction).length > 0) {
                json["metaTransaction"] = metaTransaction;
            }
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        var _a;
        const _quote = json["quote"];
        if (_quote) {
            const m = exports.Quote.initialize();
            exports.QuoteJSON._readMessage(m, _quote);
            msg.quote = m;
        }
        const _metaTransaction = (_a = json["metaTransaction"]) !== null && _a !== void 0 ? _a : json["meta_transaction"];
        if (_metaTransaction) {
            const m = exports.MetaTransaction.initialize();
            exports.MetaTransactionJSON._readMessage(m, _metaTransaction);
            msg.metaTransaction = m;
        }
        return msg;
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,