{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/core/types/index.ts","mappings":";;;;;;;;;;;;;;;;;AAsCA,IAAY,YAIX;AAJD,WAAY,YAAY;IACpB,mDAAmC,CAAA;IACnC,uDAAuC,CAAA;IACvC,gCAAgB,CAAA;AACpB,CAAC,EAJW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAIvB;AAED;;;;GAIG;AACH,IAAY,oBAIX;AAJD,WAAY,oBAAoB;IAC5B,kFAA0D,CAAA;IAC1D,yCAAiB,CAAA;IACjB,+CAAuB,CAAA;AAC3B,CAAC,EAJW,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAI/B;AAoID,IAAY,kBA0BX;AA1BD,WAAY,kBAAkB;IAC1B,qHAAqH;IACrH,0DAA0D;IAC1D,qCAAe,CAAA;IACf,6GAA6G;IAC7G,uCAAiB,CAAA;IACjB,+GAA+G;IAC/G,kDAA4B,CAAA;IAC5B,qDAAqD;IACrD,6CAAuB,CAAA;IACvB,+CAA+C;IAC/C,yCAAmB,CAAA;IACnB,+DAA+D;IAC/D,yCAAmB,CAAA;IACnB,mHAAmH;IACnH,6CAAuB,CAAA;IACvB,qIAAqI;IACrI,2CAAqB,CAAA;IACrB,wIAAwI;IACxI,6DAA6D;IAC7D,oEAA8C,CAAA;IAC9C,oFAAoF;IACpF,6GAA6G;IAC7G,wGAAwG;IACxG,UAAU;IACV,0DAAoC,CAAA;AACxC,CAAC,EA1BW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QA0B7B;AAED,yCAAuB","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/core/types/index.ts"],"sourcesContent":["import { OtcOrder, Signature } from '@0x/protocol-utils';\r\nimport { MarketOperation } from '@0x/types';\r\nimport { BigNumber } from '@0x/utils';\r\n\r\nexport type RequireOnlyOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\r\n    {\r\n        [K in Keys]-?: Required<Pick<T, K>> & Partial<Record<Exclude<Keys, K>, undefined>>;\r\n    }[Keys];\r\n\r\nexport interface IndicativeQuote {\r\n    maker: string;\r\n    makerUri: string;\r\n    makerToken: string;\r\n    takerToken: string;\r\n    makerAmount: BigNumber;\r\n    takerAmount: BigNumber;\r\n    expiry: BigNumber;\r\n}\r\n\r\n/**\r\n * FirmOtcQuote is a quote for an OtcOrder. The makerSignature may not be present if the maker gets\r\n * the \"last look\" (RFQm).\r\n */\r\nexport interface FirmOtcQuote {\r\n    kind: 'otc';\r\n    makerUri: string;\r\n    order: OtcOrder;\r\n    makerSignature?: Signature;\r\n}\r\n\r\n/**\r\n * ERC20Owner is an address-token pair used to perform balance checks.\r\n */\r\nexport interface ERC20Owner {\r\n    owner: string;\r\n    token: string;\r\n}\r\n\r\nexport enum GaslessTypes {\r\n    MetaTransaction = 'metatransaction',\r\n    MetaTransactionV2 = 'metatransactionV2',\r\n    OtcOrder = 'otc',\r\n}\r\n\r\n/**\r\n * Approval is an object that encapsulates the EIP-712 context that will eventually be signed by takers\r\n * for gasless approvals. There are multiple flavors of these approval objects, which can be distinguished\r\n * by their `kind`\r\n */\r\nexport enum GaslessApprovalTypes {\r\n    ExecuteMetaTransaction = 'executeMetaTransaction::approve',\r\n    Permit = 'permit',\r\n    DaiPermit = 'daiPermit',\r\n}\r\n\r\nexport type Approval = ExecuteMetaTransactionApproval | PermitApproval;\r\nexport interface ExecuteMetaTransactionApproval {\r\n    kind: GaslessApprovalTypes.ExecuteMetaTransaction;\r\n    eip712: ExecuteMetaTransactionEip712Context;\r\n}\r\n\r\nexport interface PermitApproval {\r\n    kind: GaslessApprovalTypes.Permit;\r\n    eip712: PermitEip712Context;\r\n}\r\nexport interface ExecuteMetaTransactionEip712Context {\r\n    types: ExecuteMetaTransactionEip712Types;\r\n    primaryType: 'MetaTransaction';\r\n    domain: Eip712Domain;\r\n    message: {\r\n        nonce: number;\r\n        from: string;\r\n        functionSignature: string;\r\n    };\r\n}\r\n\r\nexport interface PermitEip712Context {\r\n    types: PermitEip712Types;\r\n    primaryType: 'Permit';\r\n    domain: Eip712Domain;\r\n    message: {\r\n        owner: string;\r\n        spender: string;\r\n        value: string;\r\n        nonce: number;\r\n        deadline: string;\r\n    };\r\n}\r\n\r\nexport interface ExecuteMetaTransactionEip712Types {\r\n    EIP712Domain: Eip712DataField[];\r\n    MetaTransaction: Eip712DataField[];\r\n}\r\nexport interface PermitEip712Types {\r\n    EIP712Domain: Eip712DataField[];\r\n    Permit: Eip712DataField[];\r\n}\r\n\r\nexport interface Eip712Domain {\r\n    name?: string;\r\n    version?: string;\r\n    chainId?: number;\r\n    verifyingContract?: string;\r\n    salt?: string;\r\n}\r\n\r\nexport interface Eip712DataField {\r\n    name: string;\r\n    type: string;\r\n}\r\n\r\n/**\r\n * Parameters for the request from 0x API\r\n * to 0x RFQ api for the RFQt v2 `prices` endpoint\r\n */\r\nexport interface RfqtV2Request {\r\n    assetFillAmount: BigNumber;\r\n    chainId: number;\r\n    gasless?: boolean; // whether or not the request is for gasless RFQt\r\n    integratorId: string;\r\n    intentOnFilling: boolean;\r\n    makerToken: string;\r\n    marketOperation: MarketOperation;\r\n    takerAddress: string; // expect this to be NULL_ADDRESS\r\n    takerToken: string;\r\n    trader?: string; // this is the actual trader. Optional only during Gasless RFQt rollout. Intent is to be required in the long term\r\n    txOrigin?: string; // expect this to be the taker address, except for gasless RFQt where it will be the registry, can be missing for /price but not /quote\r\n}\r\n\r\n/**\r\n * Format of response payload which is sent to 0x API\r\n * from 0x RFQ API for the RFQt v2 `prices` endpoint\r\n */\r\nexport type RfqtV2Price = {\r\n    expiry: BigNumber;\r\n    makerAddress: string;\r\n    makerAmount: BigNumber;\r\n    makerId: string;\r\n    makerToken: string;\r\n    makerUri: string;\r\n    takerAmount: BigNumber;\r\n    takerToken: string;\r\n};\r\n\r\n/**\r\n * Format of response payload which is sent to 0x API\r\n * from 0x RFQ API for the RFQt v2 `quotes` endpoint\r\n */\r\nexport type RfqtV2Quote = {\r\n    fillableMakerAmount: BigNumber;\r\n    fillableTakerAmount: BigNumber;\r\n    fillableTakerFeeAmount: BigNumber;\r\n    makerId: string;\r\n    makerUri: string;\r\n    order: OtcOrder;\r\n    signature: Signature;\r\n};\r\n\r\nexport type QuoteServerPriceParams = RequireOnlyOne<\r\n    {\r\n        buyAmountBaseUnits?: string;\r\n        buyTokenAddress: string;\r\n        chainId?: string; // TODO - make this required after the rollout\r\n        comparisonPrice?: string;\r\n        feeAmount?: string;\r\n        feeToken?: string;\r\n        feeType?: string;\r\n        isLastLook?: string;\r\n        integratorId?: string;\r\n        nonce?: string;\r\n        nonceBucket?: string;\r\n        protocolVersion?: string;\r\n        sellAmountBaseUnits?: string;\r\n        sellTokenAddress: string;\r\n        takerAddress: string;\r\n        txOrigin?: string;\r\n    },\r\n    'sellAmountBaseUnits' | 'buyAmountBaseUnits'\r\n>;\r\nexport interface TokenMetadata {\r\n    symbol: string;\r\n    decimals: number;\r\n    tokenAddress: string;\r\n}\r\n\r\nexport enum OrderEventEndState {\r\n    // The order was successfully validated and added to the Mesh node. The order is now being watched and any changes to\r\n    // the fillability will result in subsequent order events.\r\n    Added = 'ADDED',\r\n    // The order was filled for a partial amount. The order is still fillable up to the fillableTakerAssetAmount.\r\n    Filled = 'FILLED',\r\n    // The order was fully filled and its remaining fillableTakerAssetAmount is 0. The order is no longer fillable.\r\n    FullyFilled = 'FULLY_FILLED',\r\n    // The order was cancelled and is no longer fillable.\r\n    Cancelled = 'CANCELLED',\r\n    // The order expired and is no longer fillable.\r\n    Expired = 'EXPIRED',\r\n    // Catch all 'Invalid' state when invalid orders are submitted.\r\n    Invalid = 'INVALID',\r\n    // The order was previously expired, but due to a block re-org it is no longer considered expired (should be rare).\r\n    Unexpired = 'UNEXPIRED',\r\n    // The order has become unfunded and is no longer fillable. This can happen if the maker makes a transfer or changes their allowance.\r\n    Unfunded = 'UNFUNDED',\r\n    // The fillability of the order has increased. This can happen if a previously processed fill event gets reverted due to a block re-org,\r\n    // or if a maker makes a transfer or changes their allowance.\r\n    FillabilityIncreased = 'FILLABILITY_INCREASED',\r\n    // The order is potentially still valid but was removed for a different reason (e.g.\r\n    // the database is full or the peer that sent the order was misbehaving). The order will no longer be watched\r\n    // and no further events for this order will be emitted. In some cases, the order may be re-added in the\r\n    // future.\r\n    StoppedWatching = 'STOPPED_WATCHING',\r\n}\r\n\r\nexport * from './fees';\r\n\r\n// tslint:disable-line:max-file-line-count\r\n"],"version":3}