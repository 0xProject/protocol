131196297559b58bd6ff0dedebce6ba5
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderEventEndState = exports.GaslessApprovalTypes = exports.GaslessTypes = void 0;
var GaslessTypes;
(function (GaslessTypes) {
    GaslessTypes["MetaTransaction"] = "metatransaction";
    GaslessTypes["MetaTransactionV2"] = "metatransactionV2";
    GaslessTypes["OtcOrder"] = "otc";
})(GaslessTypes = exports.GaslessTypes || (exports.GaslessTypes = {}));
/**
 * Approval is an object that encapsulates the EIP-712 context that will eventually be signed by takers
 * for gasless approvals. There are multiple flavors of these approval objects, which can be distinguished
 * by their `kind`
 */
var GaslessApprovalTypes;
(function (GaslessApprovalTypes) {
    GaslessApprovalTypes["ExecuteMetaTransaction"] = "executeMetaTransaction::approve";
    GaslessApprovalTypes["Permit"] = "permit";
    GaslessApprovalTypes["DaiPermit"] = "daiPermit";
})(GaslessApprovalTypes = exports.GaslessApprovalTypes || (exports.GaslessApprovalTypes = {}));
var OrderEventEndState;
(function (OrderEventEndState) {
    // The order was successfully validated and added to the Mesh node. The order is now being watched and any changes to
    // the fillability will result in subsequent order events.
    OrderEventEndState["Added"] = "ADDED";
    // The order was filled for a partial amount. The order is still fillable up to the fillableTakerAssetAmount.
    OrderEventEndState["Filled"] = "FILLED";
    // The order was fully filled and its remaining fillableTakerAssetAmount is 0. The order is no longer fillable.
    OrderEventEndState["FullyFilled"] = "FULLY_FILLED";
    // The order was cancelled and is no longer fillable.
    OrderEventEndState["Cancelled"] = "CANCELLED";
    // The order expired and is no longer fillable.
    OrderEventEndState["Expired"] = "EXPIRED";
    // Catch all 'Invalid' state when invalid orders are submitted.
    OrderEventEndState["Invalid"] = "INVALID";
    // The order was previously expired, but due to a block re-org it is no longer considered expired (should be rare).
    OrderEventEndState["Unexpired"] = "UNEXPIRED";
    // The order has become unfunded and is no longer fillable. This can happen if the maker makes a transfer or changes their allowance.
    OrderEventEndState["Unfunded"] = "UNFUNDED";
    // The fillability of the order has increased. This can happen if a previously processed fill event gets reverted due to a block re-org,
    // or if a maker makes a transfer or changes their allowance.
    OrderEventEndState["FillabilityIncreased"] = "FILLABILITY_INCREASED";
    // The order is potentially still valid but was removed for a different reason (e.g.
    // the database is full or the peer that sent the order was misbehaving). The order will no longer be watched
    // and no further events for this order will be emitted. In some cases, the order may be re-added in the
    // future.
    OrderEventEndState["StoppedWatching"] = "STOPPED_WATCHING";
})(OrderEventEndState = exports.OrderEventEndState || (exports.OrderEventEndState = {}));
__exportStar(require("./fees"), exports);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,