ce06d52f760e87722ce2c3ce1dd09719
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqAdminHandler = void 0;
const HttpStatus = require("http-status-codes");
class RfqAdminHandler {
    constructor(_rfqAdminService, _configManager) {
        this._rfqAdminService = _rfqAdminService;
        this._configManager = _configManager;
    }
    /**
     * Handler for the `/cleanup` endpoint. Fetches jobs from their order hashes and puts them to
     * `failed_expired` state. Requires an admin API key.
     */
    async cleanupJobsAsync(req, res) {
        // validate admin api key
        try {
            this._validateAdminApiKey(req.header('0x-admin-api-key'));
        }
        catch (err) {
            const message = 'Invalid admin API key provided';
            req.log.error(err, message);
            res.status(HttpStatus.UNAUTHORIZED).send({ error: message });
        }
        try {
            if (req.body.orderHashes.length === 0) {
                res.status(HttpStatus.BAD_REQUEST).send({ error: 'Must send at least one order hash' });
            }
            const response = await this._rfqAdminService.cleanupJobsAsync(req.body.orderHashes);
            if (response.unmodifiedJobs.length > 0 && response.modifiedJobs.length > 0) {
                res.status(HttpStatus.MULTI_STATUS).send(response);
            }
            else if (response.unmodifiedJobs.length !== 0) {
                res.status(HttpStatus.BAD_REQUEST).send(response);
            }
            else {
                res.status(HttpStatus.OK).send(response);
            }
        }
        catch (err) {
            const message = 'Encountered an unexpected error while manually cleaning up jobs';
            req.log.error(err, message);
            res.status(HttpStatus.INTERNAL_SERVER_ERROR).send({ error: message });
        }
    }
    _validateAdminApiKey(apiKey) {
        if (apiKey === undefined) {
            throw new Error('Must access with an API key');
        }
        if (apiKey !== this._configManager.getAdminApiKey()) {
            throw new Error('API key not authorized for RFQM admin access');
        }
    }
}
exports.RfqAdminHandler = RfqAdminHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9oYW5kbGVycy9yZnFfYWRtaW5faGFuZGxlci50cyIsIm1hcHBpbmdzIjoiOzs7QUFDQSxnREFBZ0Q7QUFLaEQsTUFBYSxlQUFlO0lBQ3hCLFlBQTZCLGdCQUFpQyxFQUFtQixjQUE2QjtRQUFqRixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWlCO1FBQW1CLG1CQUFjLEdBQWQsY0FBYyxDQUFlO0lBQUcsQ0FBQztJQUVsSDs7O09BR0c7SUFDSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsR0FBb0IsRUFBRSxHQUFxQjtRQUNyRSx5QkFBeUI7UUFDekIsSUFBSTtZQUNBLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztTQUM3RDtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1YsTUFBTSxPQUFPLEdBQUcsZ0NBQWdDLENBQUM7WUFDakQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzVCLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ2hFO1FBRUQsSUFBSTtZQUNBLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDbkMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLG1DQUFtQyxFQUFFLENBQUMsQ0FBQzthQUMzRjtZQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDcEYsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN4RSxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDdEQ7aUJBQU0sSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQzdDLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNyRDtpQkFBTTtnQkFDSCxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDNUM7U0FDSjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1YsTUFBTSxPQUFPLEdBQUcsaUVBQWlFLENBQUM7WUFDbEYsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzVCLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDekU7SUFDTCxDQUFDO0lBRU8sb0JBQW9CLENBQUMsTUFBMEI7UUFDbkQsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztTQUNsRDtRQUNELElBQUksTUFBTSxLQUFLLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxFQUFFLEVBQUU7WUFDakQsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1NBQ25FO0lBQ0wsQ0FBQztDQUNKO0FBN0NELDBDQTZDQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZGF2aWR3YWxzaC9jb2RlLWxvY2FsLzB4LXJmcS1hcGkvc3JjL2hhbmRsZXJzL3JmcV9hZG1pbl9oYW5kbGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgKiBhcyBIdHRwU3RhdHVzIGZyb20gJ2h0dHAtc3RhdHVzLWNvZGVzJztcblxuaW1wb3J0IHsgUmZxQWRtaW5TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvcmZxX2FkbWluX3NlcnZpY2UnO1xuaW1wb3J0IHsgQ29uZmlnTWFuYWdlciB9IGZyb20gJy4uL3V0aWxzL2NvbmZpZ19tYW5hZ2VyJztcblxuZXhwb3J0IGNsYXNzIFJmcUFkbWluSGFuZGxlciB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBfcmZxQWRtaW5TZXJ2aWNlOiBSZnFBZG1pblNlcnZpY2UsIHByaXZhdGUgcmVhZG9ubHkgX2NvbmZpZ01hbmFnZXI6IENvbmZpZ01hbmFnZXIpIHt9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVyIGZvciB0aGUgYC9jbGVhbnVwYCBlbmRwb2ludC4gRmV0Y2hlcyBqb2JzIGZyb20gdGhlaXIgb3JkZXIgaGFzaGVzIGFuZCBwdXRzIHRoZW0gdG9cbiAgICAgKiBgZmFpbGVkX2V4cGlyZWRgIHN0YXRlLiBSZXF1aXJlcyBhbiBhZG1pbiBBUEkga2V5LlxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBjbGVhbnVwSm9ic0FzeW5jKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gdmFsaWRhdGUgYWRtaW4gYXBpIGtleVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fdmFsaWRhdGVBZG1pbkFwaUtleShyZXEuaGVhZGVyKCcweC1hZG1pbi1hcGkta2V5JykpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnSW52YWxpZCBhZG1pbiBBUEkga2V5IHByb3ZpZGVkJztcbiAgICAgICAgICAgIHJlcS5sb2cuZXJyb3IoZXJyLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoSHR0cFN0YXR1cy5VTkFVVEhPUklaRUQpLnNlbmQoeyBlcnJvcjogbWVzc2FnZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAocmVxLmJvZHkub3JkZXJIYXNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cyhIdHRwU3RhdHVzLkJBRF9SRVFVRVNUKS5zZW5kKHsgZXJyb3I6ICdNdXN0IHNlbmQgYXQgbGVhc3Qgb25lIG9yZGVyIGhhc2gnIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuX3JmcUFkbWluU2VydmljZS5jbGVhbnVwSm9ic0FzeW5jKHJlcS5ib2R5Lm9yZGVySGFzaGVzKTtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS51bm1vZGlmaWVkSm9icy5sZW5ndGggPiAwICYmIHJlc3BvbnNlLm1vZGlmaWVkSm9icy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cyhIdHRwU3RhdHVzLk1VTFRJX1NUQVRVUykuc2VuZChyZXNwb25zZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnVubW9kaWZpZWRKb2JzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoSHR0cFN0YXR1cy5CQURfUkVRVUVTVCkuc2VuZChyZXNwb25zZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoSHR0cFN0YXR1cy5PSykuc2VuZChyZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdFbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGVycm9yIHdoaWxlIG1hbnVhbGx5IGNsZWFuaW5nIHVwIGpvYnMnO1xuICAgICAgICAgICAgcmVxLmxvZy5lcnJvcihlcnIsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgcmVzLnN0YXR1cyhIdHRwU3RhdHVzLklOVEVSTkFMX1NFUlZFUl9FUlJPUikuc2VuZCh7IGVycm9yOiBtZXNzYWdlIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfdmFsaWRhdGVBZG1pbkFwaUtleShhcGlLZXk6IHN0cmluZyB8IHVuZGVmaW5lZCk6IHZvaWQge1xuICAgICAgICBpZiAoYXBpS2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBhY2Nlc3Mgd2l0aCBhbiBBUEkga2V5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFwaUtleSAhPT0gdGhpcy5fY29uZmlnTWFuYWdlci5nZXRBZG1pbkFwaUtleSgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FQSSBrZXkgbm90IGF1dGhvcml6ZWQgZm9yIFJGUU0gYWRtaW4gYWNjZXNzJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwidmVyc2lvbiI6M30=