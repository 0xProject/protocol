{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfqm_service_builder_test.ts","mappings":";;AAAA,+DAA6E;AAC7E,mCAAmC;AAEnC,+EAAkG;AAElG,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IAClC,QAAQ,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACxD,QAAQ,CAAC,iEAAiE,EAAE,GAAG,EAAE;YAC7E,EAAE,CAAC,iFAAiF,EAAE,KAAK,IAAI,EAAE;gBAC7F,MAAM,cAAc,GAAG,IAAI,kBAAS,CAAC,eAAe,EAAE,CAAC;gBAEvD,mDAAmD;gBACnD,MAAM,iBAAiB,GAAG,MAAM,IAAA,iEAA0C,EAAC,cAAc,EAAE;oBACvF,OAAO,EAAE,KAAK;oBACd,oCAAoC,EAAE,qBAAqB;iBAC9D,CAAC,CAAC;gBACH,MAAM,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACxE,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,qEAAqE,EAAE,GAAG,EAAE;YACjF,EAAE,CAAC,wFAAwF,EAAE,KAAK,IAAI,EAAE;gBACpG,MAAM,cAAc,GAAG,IAAI,kBAAS,CAAC,eAAe,EAAE,CAAC;gBAEvD,mDAAmD;gBACnD,MAAM,iBAAiB,GAAG,MAAM,IAAA,iEAA0C,EAAC,cAAc,EAAE;oBACvF,OAAO,EAAE,KAAK;iBACjB,CAAC,CAAC;gBACH,6DAA6D;gBAC7D,8DAA8D;gBAC9D,MAAM,mCAAmC,GAAG,IAAA,wDAAmC,EAAC,OAAc,CAAC,CAAC;gBAChG,MAAM,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,mCAAmC,CAAC,aAAa,CAAC,CAAC;YACpG,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/rfqm_service_builder_test.ts"],"sourcesContent":["import { getContractAddressesForChainOrThrow } from '@0x/contract-addresses';\nimport { providers } from 'ethers';\n\nimport { getContractAddressesForNetworkOrThrowAsync } from '../../src/utils/rfqm_service_builder';\n\ndescribe('rfqm_service_builder', () => {\n    describe('getContractAddressesForNetworkOrThrowAsync', () => {\n        describe('when an override for exchange proxy contract address is defined', () => {\n            it('returns an object with the value of `exchangeProxy` set to the override address', async () => {\n                const ethersProvider = new providers.JsonRpcProvider();\n\n                // tslint:disable-next-line:custom-no-magic-numbers\n                const contractAddresses = await getContractAddressesForNetworkOrThrowAsync(ethersProvider, {\n                    chainId: 80001,\n                    exchangeProxyContractAddressOverride: '0x_override_address',\n                });\n                expect(contractAddresses.exchangeProxy).toBe('0x_override_address');\n            });\n        });\n\n        describe('when an override for exchange proxy contract address is NOT defined', () => {\n            it('returns an object with the value of `exchangeProxy` set value got from upstream module', async () => {\n                const ethersProvider = new providers.JsonRpcProvider();\n\n                // tslint:disable-next-line:custom-no-magic-numbers\n                const contractAddresses = await getContractAddressesForNetworkOrThrowAsync(ethersProvider, {\n                    chainId: 80001,\n                });\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const contractAddressesFromUpstreamModule = getContractAddressesForChainOrThrow('80001' as any);\n                expect(contractAddresses.exchangeProxy).toBe(contractAddressesFromUpstreamModule.exchangeProxy);\n            });\n        });\n    });\n});\n"],"version":3}