{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/GasStationAttendantEthereumTest.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/GasStationAttendantEthereumTest.ts"],"sourcesContent":["import { BigNumber } from '@0x/utils';\nimport { expect } from 'chai';\nimport { instance, mock, when } from 'ts-mockito';\n\nimport { RfqmV2TransactionSubmissionEntity } from '../../src/entities/RfqmV2TransactionSubmissionEntity';\nimport { RfqmTransactionSubmissionType } from '../../src/entities/types';\nimport { GasOracle } from '../../src/utils/GasOracle';\nimport { GasStationAttendantEthereum } from '../../src/utils/GasStationAttendantEthereum';\nimport { calculateGasEstimate } from '../../src/utils/rfqm_gas_estimate_utils';\nimport { RfqBlockchainUtils } from '../../src/utils/rfq_blockchain_utils';\nimport { SubmissionContext } from '../../src/utils/SubmissionContext';\n\nlet gasOracleMock: GasOracle;\n\ndescribe('GasStationAttendantEthereum', () => {\n    beforeAll(() => {\n        gasOracleMock = mock(GasOracle);\n    });\n\n    describe('getWorkerBalanceForTradeAsync', () => {\n        it('gets the balance to trade', async () => {\n            when(gasOracleMock.getBaseFeePerGasWeiAsync()).thenResolve(new BigNumber(1000));\n            when(gasOracleMock.getMaxPriorityFeePerGasWeiAsync('instant')).thenResolve(new BigNumber(666));\n\n            const attendant = new GasStationAttendantEthereum(instance(gasOracleMock));\n\n            const workerGasToTrade = await attendant.getWorkerBalanceForTradeAsync();\n\n            // Base fee is 1000. With 6 10% increases = 1000 * (1.1)^ 6 = 1771.561\n            // Instant tip is 666\n            // Gas estimate matches the one used in the algorithm\n            const gasEstimate = calculateGasEstimate(\n                '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9',\n                '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n                'otc',\n                true,\n            );\n\n            expect(workerGasToTrade.toPrecision(2).toString()).to.equal(\n                // tslint:disable-next-line: custom-no-magic-numbers\n                new BigNumber(1771.561).plus(666).times(gasEstimate).toPrecision(2).toString(),\n            );\n        });\n    });\n\n    describe('getExpectedTransactionGasRateAsync', () => {\n        it('estimates the transaction gas rate', async () => {\n            when(gasOracleMock.getBaseFeePerGasWeiAsync()).thenResolve(new BigNumber(1000));\n\n            const attendant = new GasStationAttendantEthereum(instance(gasOracleMock));\n\n            const gasRate = await attendant.getExpectedTransactionGasRateAsync();\n\n            // Base fee is 1000\n            // Tip estimate is\n            const tipEstimate = new BigNumber(2750000000);\n\n            expect(gasRate.toString()).to.equal(\n                // tslint:disable-next-line: custom-no-magic-numbers\n                new BigNumber(1000).plus(tipEstimate).toString(),\n            );\n        });\n    });\n    describe('getNextBidAsync', () => {\n        it('gets an initial bid when there are no existing transactions', async () => {\n            when(gasOracleMock.getBaseFeePerGasWeiAsync()).thenResolve(new BigNumber(1000));\n\n            const attendant = new GasStationAttendantEthereum(instance(gasOracleMock));\n            const gasRate = await attendant.getNextBidAsync(null);\n\n            const initialMaxPriorityFeePerGasWei = new BigNumber(2000000000);\n            const initialMaxFeePerGasWei = new BigNumber(/* base fee */ 1000)\n                .times(2)\n                .plus(initialMaxPriorityFeePerGasWei);\n\n            expect(gasRate?.maxPriorityFeePerGas?.toString()).to.equal(initialMaxPriorityFeePerGasWei.toString());\n            expect(gasRate?.maxFeePerGas?.toString()).to.equal(initialMaxFeePerGasWei.toString());\n        });\n\n        it('calculates a resubmit bid when the base fee rises', async () => {\n            when(gasOracleMock.getBaseFeePerGasWeiAsync()).thenResolve(new BigNumber(1000));\n            when(gasOracleMock.getMaxPriorityFeePerGasWeiAsync('instant')).thenResolve(new BigNumber(666));\n            const transaction1 = new RfqmV2TransactionSubmissionEntity({\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxFeePerGas: new BigNumber(3),\n                maxPriorityFeePerGas: new BigNumber(2),\n                type: RfqmTransactionSubmissionType.Trade,\n            });\n\n            const submissionContext = new SubmissionContext(instance(mock(RfqBlockchainUtils)), [transaction1]);\n            const attendant = new GasStationAttendantEthereum(instance(gasOracleMock));\n            const gasRate = await attendant.getNextBidAsync(submissionContext);\n\n            // Previous submission gas prices were 2 tip, 3 max\n            // new tip = 2 * 1.5 = 3\n            // Base fee is now 1000\n            // total = 2 x base fee + tip\n            // total = 2 * 1000 + 3\n            expect(gasRate?.maxPriorityFeePerGas?.toString()).to.equal(new BigNumber(3).toString());\n            expect(gasRate?.maxFeePerGas?.toString()).to.equal(new BigNumber(2003).toString());\n        });\n\n        it('calculates a resubmit bid with the minimum max fee per gas increase', async () => {\n            when(gasOracleMock.getBaseFeePerGasWeiAsync()).thenResolve(new BigNumber(0));\n            when(gasOracleMock.getMaxPriorityFeePerGasWeiAsync('instant')).thenResolve(new BigNumber(666));\n            const transaction1 = new RfqmV2TransactionSubmissionEntity({\n                transactionHash: '0x1',\n                from: '0xfrom',\n                to: '0xto',\n                orderHash: '0xOrderhash',\n                nonce: 0,\n                maxFeePerGas: new BigNumber(2002),\n                maxPriorityFeePerGas: new BigNumber(2),\n                type: RfqmTransactionSubmissionType.Trade,\n            });\n\n            const submissionContext = new SubmissionContext(instance(mock(RfqBlockchainUtils)), [transaction1]);\n            const attendant = new GasStationAttendantEthereum(instance(gasOracleMock));\n            const gasRate = await attendant.getNextBidAsync(submissionContext);\n\n            // Previous submission gas prices were 2 tip, 3 max\n            // new tip = 2 * 1.5 = 3\n\n            // Base fee is now 0, so max fee must go up by 10% so the node\n            // accepts the transacion\n            // old max fee per gas * 110% = 2002 * 1.1 = 2202.2\n            expect(gasRate?.maxPriorityFeePerGas?.toString()).to.equal(new BigNumber(3).toString());\n            expect(gasRate?.maxFeePerGas?.toString()).to.equal(\n                new BigNumber(2202.2).integerValue(BigNumber.ROUND_CEIL).toString(),\n            );\n        });\n    });\n});\n"],"version":3}