b7d452cf7822d574a8fcbb70b40b27b5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@0x/utils");
const chai_1 = require("chai");
const ts_mockito_1 = require("ts-mockito");
const RfqmV2TransactionSubmissionEntity_1 = require("../../src/entities/RfqmV2TransactionSubmissionEntity");
const types_1 = require("../../src/entities/types");
const GasOracle_1 = require("../../src/utils/GasOracle");
const GasStationAttendantEthereum_1 = require("../../src/utils/GasStationAttendantEthereum");
const rfqm_gas_estimate_utils_1 = require("../../src/utils/rfqm_gas_estimate_utils");
const rfq_blockchain_utils_1 = require("../../src/utils/rfq_blockchain_utils");
const SubmissionContext_1 = require("../../src/utils/SubmissionContext");
let gasOracleMock;
describe('GasStationAttendantEthereum', () => {
    beforeAll(() => {
        gasOracleMock = (0, ts_mockito_1.mock)(GasOracle_1.GasOracle);
    });
    describe('getWorkerBalanceForTradeAsync', () => {
        it('gets the balance to trade', async () => {
            (0, ts_mockito_1.when)(gasOracleMock.getBaseFeePerGasWeiAsync()).thenResolve(new utils_1.BigNumber(1000));
            (0, ts_mockito_1.when)(gasOracleMock.getMaxPriorityFeePerGasWeiAsync('instant')).thenResolve(new utils_1.BigNumber(666));
            const attendant = new GasStationAttendantEthereum_1.GasStationAttendantEthereum((0, ts_mockito_1.instance)(gasOracleMock));
            const workerGasToTrade = await attendant.getWorkerBalanceForTradeAsync();
            // Base fee is 1000. With 6 10% increases = 1000 * (1.1)^ 6 = 1771.561
            // Instant tip is 666
            // Gas estimate matches the one used in the algorithm
            const gasEstimate = (0, rfqm_gas_estimate_utils_1.calculateGasEstimate)('0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9', '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', 'otc', true);
            (0, chai_1.expect)(workerGasToTrade.toPrecision(2).toString()).to.equal(
            // tslint:disable-next-line: custom-no-magic-numbers
            new utils_1.BigNumber(1771.561).plus(666).times(gasEstimate).toPrecision(2).toString());
        });
    });
    describe('getExpectedTransactionGasRateAsync', () => {
        it('estimates the transaction gas rate', async () => {
            (0, ts_mockito_1.when)(gasOracleMock.getBaseFeePerGasWeiAsync()).thenResolve(new utils_1.BigNumber(1000));
            const attendant = new GasStationAttendantEthereum_1.GasStationAttendantEthereum((0, ts_mockito_1.instance)(gasOracleMock));
            const gasRate = await attendant.getExpectedTransactionGasRateAsync();
            // Base fee is 1000
            // Tip estimate is
            const tipEstimate = new utils_1.BigNumber(2750000000);
            (0, chai_1.expect)(gasRate.toString()).to.equal(
            // tslint:disable-next-line: custom-no-magic-numbers
            new utils_1.BigNumber(1000).plus(tipEstimate).toString());
        });
    });
    describe('getNextBidAsync', () => {
        it('gets an initial bid when there are no existing transactions', async () => {
            var _a, _b;
            (0, ts_mockito_1.when)(gasOracleMock.getBaseFeePerGasWeiAsync()).thenResolve(new utils_1.BigNumber(1000));
            const attendant = new GasStationAttendantEthereum_1.GasStationAttendantEthereum((0, ts_mockito_1.instance)(gasOracleMock));
            const gasRate = await attendant.getNextBidAsync(null);
            const initialMaxPriorityFeePerGasWei = new utils_1.BigNumber(2000000000);
            const initialMaxFeePerGasWei = new utils_1.BigNumber(/* base fee */ 1000)
                .times(2)
                .plus(initialMaxPriorityFeePerGasWei);
            (0, chai_1.expect)((_a = gasRate === null || gasRate === void 0 ? void 0 : gasRate.maxPriorityFeePerGas) === null || _a === void 0 ? void 0 : _a.toString()).to.equal(initialMaxPriorityFeePerGasWei.toString());
            (0, chai_1.expect)((_b = gasRate === null || gasRate === void 0 ? void 0 : gasRate.maxFeePerGas) === null || _b === void 0 ? void 0 : _b.toString()).to.equal(initialMaxFeePerGasWei.toString());
        });
        it('calculates a resubmit bid when the base fee rises', async () => {
            var _a, _b;
            (0, ts_mockito_1.when)(gasOracleMock.getBaseFeePerGasWeiAsync()).thenResolve(new utils_1.BigNumber(1000));
            (0, ts_mockito_1.when)(gasOracleMock.getMaxPriorityFeePerGasWeiAsync('instant')).thenResolve(new utils_1.BigNumber(666));
            const transaction1 = new RfqmV2TransactionSubmissionEntity_1.RfqmV2TransactionSubmissionEntity({
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(3),
                maxPriorityFeePerGas: new utils_1.BigNumber(2),
                type: types_1.RfqmTransactionSubmissionType.Trade,
            });
            const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils)), [transaction1]);
            const attendant = new GasStationAttendantEthereum_1.GasStationAttendantEthereum((0, ts_mockito_1.instance)(gasOracleMock));
            const gasRate = await attendant.getNextBidAsync(submissionContext);
            // Previous submission gas prices were 2 tip, 3 max
            // new tip = 2 * 1.5 = 3
            // Base fee is now 1000
            // total = 2 x base fee + tip
            // total = 2 * 1000 + 3
            (0, chai_1.expect)((_a = gasRate === null || gasRate === void 0 ? void 0 : gasRate.maxPriorityFeePerGas) === null || _a === void 0 ? void 0 : _a.toString()).to.equal(new utils_1.BigNumber(3).toString());
            (0, chai_1.expect)((_b = gasRate === null || gasRate === void 0 ? void 0 : gasRate.maxFeePerGas) === null || _b === void 0 ? void 0 : _b.toString()).to.equal(new utils_1.BigNumber(2003).toString());
        });
        it('calculates a resubmit bid with the minimum max fee per gas increase', async () => {
            var _a, _b;
            (0, ts_mockito_1.when)(gasOracleMock.getBaseFeePerGasWeiAsync()).thenResolve(new utils_1.BigNumber(0));
            (0, ts_mockito_1.when)(gasOracleMock.getMaxPriorityFeePerGasWeiAsync('instant')).thenResolve(new utils_1.BigNumber(666));
            const transaction1 = new RfqmV2TransactionSubmissionEntity_1.RfqmV2TransactionSubmissionEntity({
                transactionHash: '0x1',
                from: '0xfrom',
                to: '0xto',
                orderHash: '0xOrderhash',
                nonce: 0,
                maxFeePerGas: new utils_1.BigNumber(2002),
                maxPriorityFeePerGas: new utils_1.BigNumber(2),
                type: types_1.RfqmTransactionSubmissionType.Trade,
            });
            const submissionContext = new SubmissionContext_1.SubmissionContext((0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(rfq_blockchain_utils_1.RfqBlockchainUtils)), [transaction1]);
            const attendant = new GasStationAttendantEthereum_1.GasStationAttendantEthereum((0, ts_mockito_1.instance)(gasOracleMock));
            const gasRate = await attendant.getNextBidAsync(submissionContext);
            // Previous submission gas prices were 2 tip, 3 max
            // new tip = 2 * 1.5 = 3
            // Base fee is now 0, so max fee must go up by 10% so the node
            // accepts the transacion
            // old max fee per gas * 110% = 2002 * 1.1 = 2202.2
            (0, chai_1.expect)((_a = gasRate === null || gasRate === void 0 ? void 0 : gasRate.maxPriorityFeePerGas) === null || _a === void 0 ? void 0 : _a.toString()).to.equal(new utils_1.BigNumber(3).toString());
            (0, chai_1.expect)((_b = gasRate === null || gasRate === void 0 ? void 0 : gasRate.maxFeePerGas) === null || _b === void 0 ? void 0 : _b.toString()).to.equal(new utils_1.BigNumber(2202.2).integerValue(utils_1.BigNumber.ROUND_CEIL).toString());
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,