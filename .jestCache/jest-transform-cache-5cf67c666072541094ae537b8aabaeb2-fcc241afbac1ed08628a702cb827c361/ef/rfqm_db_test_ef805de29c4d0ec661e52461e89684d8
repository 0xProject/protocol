8504d1eb585fe988af8b8114575dcce4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protocol_utils_1 = require("@0x/protocol-utils");
const utils_1 = require("@0x/utils");
const chai_1 = require("chai");
const uuid = require("uuid");
const constants_1 = require("../src/core/constants");
const fee_utils_1 = require("../src/core/fee_utils");
const types_1 = require("../src/entities/types");
const types_2 = require("../src/core/types");
const rfqm_db_utils_1 = require("../src/utils/rfqm_db_utils");
const constants_2 = require("./constants");
const deployment_1 = require("./test_utils/deployment");
const initDbDataSourceAsync_1 = require("./test_utils/initDbDataSourceAsync");
let dbUtils;
const createdAt = new Date();
// it's expired if it's over 9000
const expiry = new utils_1.BigNumber(9000);
const chainId = 1;
const makerUri = 'https://marketmaking.over9000.io';
const fee = {
    token: '0xatoken',
    amount: new utils_1.BigNumber(5),
    type: 'fixed',
};
const otcOrderNonce = new utils_1.BigNumber(1637085289);
const otcOrder = new protocol_utils_1.OtcOrder({
    txOrigin: '0x0000000000000000000000000000000000000000',
    taker: '0x1111111111111111111111111111111111111111',
    maker: '0x2222222222222222222222222222222222222222',
    makerToken: '0x3333333333333333333333333333333333333333',
    takerToken: '0x4444444444444444444444444444444444444444',
    expiryAndNonce: protocol_utils_1.OtcOrder.encodeExpiryAndNonce(expiry, constants_1.ZERO, otcOrderNonce),
    chainId,
    verifyingContract: '0x0000000000000000000000000000000000000000',
});
const otcOrderHash = otcOrder.getHash();
const takerSignature = {
    v: 27,
    r: '0xd00d00',
    s: '0xcaca',
    signatureType: 1,
};
const approval = {
    kind: types_2.GaslessApprovalTypes.ExecuteMetaTransaction,
    eip712: {
        types: {
            EIP712Domain: [
                { name: 'name', type: 'string' },
                { name: 'version', type: 'string' },
                { name: 'verifyingContract', type: 'address' },
                { name: 'salt', type: 'bytes32' },
            ],
            ...constants_1.EXECUTE_META_TRANSACTION_EIP_712_TYPES,
        },
        primaryType: 'MetaTransaction',
        domain: {
            name: 'Balancer (PoS)',
            version: '1',
            verifyingContract: '0x9a71012b13ca4d3d0cdc72a177df3ef03b0e76a3',
            salt: '0x0000000000000000000000000000000000000000000000000000000000000089',
        },
        message: {
            nonce: 1,
            from: '0x1111111111111111111111111111111111111111',
            functionSignature: '0x095ea7b3000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
        },
    },
};
// tx properties
const transactionHash = '0x5678';
const from = '0xanRfqmWorker';
const to = '0xexchangeProxyAddress';
const gasPrice = new utils_1.BigNumber('100');
const gasUsed = null;
const blockMined = null;
const nonce = 0;
// meta-transaction
const inputToken = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';
const outputToken = '0xdAC17F958D2ee523a2206206994597C13D831ec7';
const inputTokenAmount = new utils_1.BigNumber(100);
const minOutputTokenAmount = new utils_1.BigNumber(99);
function creatMockMetaTransaction(opts = {}) {
    return new protocol_utils_1.MetaTransaction({
        ...constants_2.MOCK_META_TRANSACTION,
        ...opts,
    });
}
// tslint:disable-next-line: custom-no-magic-numbers
jest.setTimeout(constants_1.ONE_MINUTE_MS * 3);
let teardownDependencies;
let dataSource;
describe('RFQM Database', () => {
    beforeAll(async () => {
        teardownDependencies = await (0, deployment_1.setupDependenciesAsync)(['postgres']);
        dataSource = await (0, initDbDataSourceAsync_1.initDbDataSourceAsync)();
        dbUtils = new rfqm_db_utils_1.RfqmDbUtils(dataSource);
    });
    afterAll(async () => {
        if (!teardownDependencies()) {
            throw new Error('Failed to tear down dependencies');
        }
    });
    afterEach(async () => {
        await dataSource.query('TRUNCATE TABLE rfqm_quotes CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_jobs CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_transaction_submissions CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_v2_quotes CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_v2_jobs CASCADE;');
        await dataSource.query('TRUNCATE TABLE rfqm_v2_transaction_submissions CASCADE;');
        await dataSource.query('TRUNCATE TABLE meta_transaction_submissions CASCADE;');
        await dataSource.query('TRUNCATE TABLE meta_transaction_jobs CASCADE;');
    });
    describe('v2 tables', () => {
        it('should be able to write to and read from the rfqm_v2_quote table', async () => {
            await dbUtils.writeV2QuoteAsync({
                chainId,
                makerUri,
                isUnwrap: false,
                order: (0, rfqm_db_utils_1.otcOrderToStoredOtcOrder)(otcOrder),
                orderHash: otcOrderHash,
                fee: (0, fee_utils_1.feeToStoredFee)(fee),
                takerSpecifiedSide: 'takerToken',
            });
            const storedQuote = await dbUtils.findV2QuoteByOrderHashAsync(otcOrderHash);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain
            (0, chai_1.expect)(otcOrder).to.deep.eq((0, rfqm_db_utils_1.storedOtcOrderToOtcOrder)(storedQuote === null || storedQuote === void 0 ? void 0 : storedQuote.order));
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain
            (0, chai_1.expect)(fee).to.deep.eq((0, fee_utils_1.storedFeeToFee)(storedQuote === null || storedQuote === void 0 ? void 0 : storedQuote.fee));
            (0, chai_1.expect)(storedQuote === null || storedQuote === void 0 ? void 0 : storedQuote.takerSpecifiedSide).to.equal('takerToken');
        });
        it('should be able to write, update, and read the rfqm_v2_job table', async () => {
            // Write
            await dbUtils.writeV2JobAsync({
                approval,
                chainId,
                status: types_1.RfqmJobStatus.PendingProcessing,
                expiry: otcOrder.expiry,
                makerUri,
                isUnwrap: false,
                order: (0, rfqm_db_utils_1.otcOrderToStoredOtcOrder)(otcOrder),
                takerSignature,
                orderHash: otcOrderHash,
                fee: (0, fee_utils_1.feeToStoredFee)(fee),
                takerSpecifiedSide: 'makerToken',
            });
            // First Read
            const storedJob = await dbUtils.findV2JobByOrderHashAsync(otcOrderHash);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain
            (0, chai_1.expect)((0, rfqm_db_utils_1.storedOtcOrderToOtcOrder)(storedJob === null || storedJob === void 0 ? void 0 : storedJob.order)).to.deep.eq(otcOrder);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain
            (0, chai_1.expect)((0, fee_utils_1.storedFeeToFee)(storedJob === null || storedJob === void 0 ? void 0 : storedJob.fee)).to.deep.eq(fee);
            (0, chai_1.expect)(storedJob === null || storedJob === void 0 ? void 0 : storedJob.status).to.equal(types_1.RfqmJobStatus.PendingProcessing);
            (0, chai_1.expect)(storedJob === null || storedJob === void 0 ? void 0 : storedJob.takerSignature).to.deep.eq(takerSignature);
            (0, chai_1.expect)(storedJob === null || storedJob === void 0 ? void 0 : storedJob.approval).to.deep.eq(approval);
            // Update
            await dbUtils.updateV2JobAsync(otcOrderHash, true, { status: types_1.RfqmJobStatus.SucceededConfirmed });
            // Second Read
            const updatedJob = await dbUtils.findV2JobByOrderHashAsync(otcOrderHash);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain
            (0, chai_1.expect)((0, rfqm_db_utils_1.storedOtcOrderToOtcOrder)(updatedJob === null || updatedJob === void 0 ? void 0 : updatedJob.order)).to.deep.eq(otcOrder);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain
            (0, chai_1.expect)((0, fee_utils_1.storedFeeToFee)(updatedJob === null || updatedJob === void 0 ? void 0 : updatedJob.fee)).to.deep.eq(fee);
            (0, chai_1.expect)(updatedJob === null || updatedJob === void 0 ? void 0 : updatedJob.status).to.equal(types_1.RfqmJobStatus.SucceededConfirmed);
            (0, chai_1.expect)(updatedJob === null || updatedJob === void 0 ? void 0 : updatedJob.takerSpecifiedSide).to.equal('makerToken');
        });
        it('should be able to find by status across the rfqm_v2_job table', async () => {
            // Write job with failed status
            await dbUtils.writeV2JobAsync({
                chainId,
                status: types_1.RfqmJobStatus.FailedEthCallFailed,
                expiry: otcOrder.expiry,
                makerUri,
                isUnwrap: false,
                order: (0, rfqm_db_utils_1.otcOrderToStoredOtcOrder)(otcOrder),
                orderHash: otcOrderHash,
                fee: (0, fee_utils_1.feeToStoredFee)(fee),
                takerSpecifiedSide: 'makerToken',
            });
            // Get jobs with that status
            const storedJobs = await dbUtils.findV2JobsWithStatusesAsync([types_1.RfqmJobStatus.FailedEthCallFailed]);
            (0, chai_1.expect)(storedJobs.length).to.equal(1);
            // Confirm correctness
            const storedJob = storedJobs[0];
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain
            (0, chai_1.expect)((0, rfqm_db_utils_1.storedOtcOrderToOtcOrder)(storedJob === null || storedJob === void 0 ? void 0 : storedJob.order)).to.deep.eq(otcOrder);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain
            (0, chai_1.expect)((0, fee_utils_1.storedFeeToFee)(storedJob === null || storedJob === void 0 ? void 0 : storedJob.fee)).to.deep.eq(fee);
            (0, chai_1.expect)(storedJob === null || storedJob === void 0 ? void 0 : storedJob.status).to.equal(types_1.RfqmJobStatus.FailedEthCallFailed);
        });
        it('should be able to write to and read from the last_look_rejection_cooldowns table', async () => {
            const makerId = 'makerId1';
            const nowMs = Date.now();
            const startTime = new Date(nowMs);
            const endTime = new Date(nowMs + constants_1.ONE_MINUTE_MS);
            await dbUtils.writeV2LastLookRejectionCooldownAsync(makerId, chainId, otcOrder.makerToken, otcOrder.takerToken, startTime, endTime, otcOrderHash);
            const storedCooldown = await dbUtils.findV2LastLookRejectionCooldownAsync(makerId, chainId, otcOrder.makerToken, otcOrder.takerToken, startTime);
            (0, chai_1.expect)(storedCooldown === null || storedCooldown === void 0 ? void 0 : storedCooldown.endTime).to.deep.eq(endTime);
            (0, chai_1.expect)(storedCooldown === null || storedCooldown === void 0 ? void 0 : storedCooldown.orderHash).to.deep.eq(otcOrderHash);
        });
        it('should be able to write, update, and read the rfqm_v2_transaction_submission table', async () => {
            // Write
            const rfqmTransactionSubmissionEntityOpts = {
                transactionHash,
                orderHash: otcOrderHash,
                createdAt,
                from,
                to,
                gasPrice,
                gasUsed,
                blockMined,
                nonce,
                status: types_1.RfqmTransactionSubmissionStatus.Submitted,
                type: types_1.RfqmTransactionSubmissionType.Trade,
            };
            await dbUtils.writeV2TransactionSubmissionAsync(rfqmTransactionSubmissionEntityOpts);
            // First Read
            const transactionSubmissions = await dbUtils.findV2TransactionSubmissionsByOrderHashAsync(otcOrderHash);
            (0, chai_1.expect)(transactionSubmissions.length).to.equal(1);
            const transactionSubmission = transactionSubmissions[0];
            (0, chai_1.expect)(transactionSubmission.transactionHash).to.equal(transactionHash);
            (0, chai_1.expect)(transactionSubmission.status).to.equal(types_1.RfqmTransactionSubmissionStatus.Submitted);
            // Update
            await dbUtils.updateV2TransactionSubmissionsAsync([
                {
                    ...transactionSubmission,
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed,
                },
            ]);
            // Second Read
            const updatedTransactionSubmissions = await dbUtils.findV2TransactionSubmissionsByOrderHashAsync(otcOrderHash);
            (0, chai_1.expect)(updatedTransactionSubmissions.length).to.equal(1);
            const updatedTransactionSubmission = updatedTransactionSubmissions[0];
            (0, chai_1.expect)(updatedTransactionSubmission.transactionHash).to.equal(transactionHash);
            (0, chai_1.expect)(updatedTransactionSubmission.status).to.equal(types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed);
        });
        it('should not run into duplicate key issues if attempting to write to the same hash', async () => {
            // Write
            const rfqmTransactionSubmissionEntityOpts = {
                transactionHash,
                orderHash: otcOrderHash,
                createdAt,
                from,
                to,
                gasPrice,
                gasUsed,
                blockMined,
                nonce,
                status: types_1.RfqmTransactionSubmissionStatus.Submitted,
                type: types_1.RfqmTransactionSubmissionType.Trade,
            };
            await dbUtils.writeV2TransactionSubmissionAsync(rfqmTransactionSubmissionEntityOpts);
            // Write again - should not error
            await dbUtils.writeV2TransactionSubmissionAsync(rfqmTransactionSubmissionEntityOpts);
            // Read
            const transactionSubmissions = await dbUtils.findV2TransactionSubmissionsByOrderHashAsync(otcOrderHash);
            (0, chai_1.expect)(transactionSubmissions.length).to.equal(1);
            const transactionSubmission = transactionSubmissions[0];
            (0, chai_1.expect)(transactionSubmission.transactionHash).to.equal(transactionHash);
            (0, chai_1.expect)(transactionSubmission.status).to.equal(types_1.RfqmTransactionSubmissionStatus.Submitted);
        });
    });
    describe('meta transaction tables', () => {
        it('should be able to write to, update, and read from the `meta_transaction_jobs` table', async () => {
            const metaTransaction = creatMockMetaTransaction();
            const metaTransactionHash = metaTransaction.getHash();
            // Write
            const savedJob = await dbUtils.writeMetaTransactionJobAsync({
                approval,
                chainId: 1,
                expiry: new utils_1.BigNumber(2),
                fee: constants_2.MOCK_FEE,
                inputToken,
                inputTokenAmount,
                integratorId: 'integrator',
                metaTransaction,
                metaTransactionHash,
                minOutputTokenAmount,
                outputToken,
                takerAddress: '0xaddress',
                takerSignature,
            });
            (0, chai_1.expect)(savedJob.id).to.not.equal(null);
            // Read
            const job = await dbUtils.findMetaTransactionJobByMetaTransactionHashAsync(metaTransactionHash);
            if (!job) {
                throw new Error('job should exist');
            }
            (0, chai_1.expect)(job.metaTransaction).to.eql(metaTransaction);
            (0, chai_1.expect)(job.fee).to.eql(constants_2.MOCK_FEE);
            (0, chai_1.expect)(job.status).to.eql(types_1.RfqmJobStatus.PendingEnqueued);
            (0, chai_1.expect)(job.approval).to.eql(approval);
            (0, chai_1.expect)(job.workerAddress).to.eql(null);
            // Update
            job.chainId = 1;
            await dbUtils.updateRfqmJobAsync(job);
            // Read
            const updatedJob = await dbUtils.findMetaTransactionJobByIdAsync(job.id);
            if (!updatedJob) {
                throw new Error('job should exist');
            }
            (0, chai_1.expect)(updatedJob.metaTransaction).to.eql(metaTransaction);
            (0, chai_1.expect)(updatedJob.fee).to.eql(constants_2.MOCK_FEE);
            (0, chai_1.expect)(updatedJob.status).to.eql(types_1.RfqmJobStatus.PendingEnqueued);
            (0, chai_1.expect)(updatedJob.approval).to.eql(approval);
            (0, chai_1.expect)(updatedJob.workerAddress).to.eql(null);
            (0, chai_1.expect)(updatedJob.chainId).to.eql(1);
        });
        it('should be able to find by status across the `meta_transaction_jobs` table', async () => {
            const metaTransaction = creatMockMetaTransaction();
            const metaTransactionHash = metaTransaction.getHash();
            // Write
            const savedJob = await dbUtils.writeMetaTransactionJobAsync({
                approval,
                chainId: 1,
                expiry: new utils_1.BigNumber(2),
                fee: constants_2.MOCK_FEE,
                inputToken,
                inputTokenAmount,
                integratorId: 'integrator',
                metaTransaction,
                metaTransactionHash,
                minOutputTokenAmount,
                outputToken,
                takerAddress: '0xaddress',
                takerSignature,
                status: types_1.RfqmJobStatus.FailedExpired,
            });
            (0, chai_1.expect)(savedJob.id).to.not.equal(null);
            // Read
            const jobs = await dbUtils.findMetaTransactionJobsWithStatusesAsync([types_1.RfqmJobStatus.FailedExpired]);
            (0, chai_1.expect)(jobs.length).to.equal(1);
            (0, chai_1.expect)(jobs[0].metaTransaction).to.eql(metaTransaction);
            (0, chai_1.expect)(jobs[0].fee).to.eql(constants_2.MOCK_FEE);
            (0, chai_1.expect)(jobs[0].status).to.eql(types_1.RfqmJobStatus.FailedExpired);
            (0, chai_1.expect)(jobs[0].approval).to.eql(approval);
            (0, chai_1.expect)(jobs[0].workerAddress).to.eql(null);
        });
        it('should be able to find unsolved meta transaction jobs in the `meta_transaction_jobs` table', async () => {
            const mockMetaTransaction1 = creatMockMetaTransaction();
            const savedJob = await dbUtils.writeMetaTransactionJobAsync({
                approval,
                chainId: 1,
                expiry: new utils_1.BigNumber(2),
                fee: constants_2.MOCK_FEE,
                id: '1',
                integratorId: 'integrator',
                inputToken,
                inputTokenAmount,
                metaTransaction: mockMetaTransaction1,
                metaTransactionHash: mockMetaTransaction1.getHash(),
                minOutputTokenAmount,
                outputToken,
                takerAddress: '0xaddress',
                takerSignature,
                status: types_1.RfqmJobStatus.PendingEnqueued,
            });
            (0, chai_1.expect)(savedJob.id).to.not.equal(null);
            const mockMetaTransaction2 = creatMockMetaTransaction({ signer: '0xabcdef2' });
            await dbUtils.writeMetaTransactionJobAsync({
                approval,
                chainId: 2,
                expiry: new utils_1.BigNumber(2),
                fee: constants_2.MOCK_FEE,
                inputToken,
                inputTokenAmount,
                integratorId: 'integrator',
                metaTransaction: mockMetaTransaction2,
                metaTransactionHash: mockMetaTransaction2.getHash(),
                minOutputTokenAmount,
                outputToken,
                takerAddress: '0xaddress',
                takerSignature,
                status: types_1.RfqmJobStatus.PendingProcessing,
                workerAddress: '0xworkerAddress',
            });
            const mockMetaTransaction3 = creatMockMetaTransaction({ signer: '0xabcdef3' });
            await dbUtils.writeMetaTransactionJobAsync({
                approval,
                chainId: 3,
                expiry: new utils_1.BigNumber(2),
                fee: constants_2.MOCK_FEE,
                inputToken,
                inputTokenAmount,
                integratorId: 'integrator',
                metaTransaction: mockMetaTransaction3,
                metaTransactionHash: mockMetaTransaction3.getHash(),
                minOutputTokenAmount,
                outputToken,
                takerAddress: '0xaddress',
                takerSignature,
                status: types_1.RfqmJobStatus.FailedExpired,
            });
            const jobs = await dbUtils.findUnresolvedMetaTransactionJobsAsync('0xworkerAddress', 2);
            (0, chai_1.expect)(jobs.length).to.equal(1);
            (0, chai_1.expect)(jobs[0].status).to.eql(types_1.RfqmJobStatus.PendingProcessing);
        });
        it('should be able to write, update, and read the `meta_transaction_submissions` table', async () => {
            const metaTransactionJobId = uuid.v4();
            // Write
            const metaTransactionSubmissionEntityOpts = {
                from,
                metaTransactionJobId,
                nonce,
                to,
                transactionHash,
                type: types_1.RfqmTransactionSubmissionType.Trade,
                status: types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed,
            };
            const savedSubmission = await dbUtils.writeMetaTransactionSubmissionAsync(metaTransactionSubmissionEntityOpts);
            (0, chai_1.expect)(savedSubmission.id).not.equal(null);
            // First Read
            let transactionSubmissions = await dbUtils.findMetaTransactionSubmissionsByTransactionHashAsync(transactionHash, types_1.RfqmTransactionSubmissionType.Trade);
            (0, chai_1.expect)(transactionSubmissions.length).to.equal(1);
            let transactionSubmission = transactionSubmissions[0];
            (0, chai_1.expect)(transactionSubmission.transactionHash).to.equal(transactionHash);
            (0, chai_1.expect)(transactionSubmission.status).to.equal(types_1.RfqmTransactionSubmissionStatus.SucceededUnconfirmed);
            // Update
            await dbUtils.updateRfqmTransactionSubmissionsAsync([
                {
                    ...transactionSubmission,
                    status: types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed,
                },
            ]);
            // Second Read
            const updatedTransactionSubmissionOrNull = await dbUtils.findMetaTransactionSubmissionByIdAsync(transactionSubmission.id);
            if (!updatedTransactionSubmissionOrNull) {
                chai_1.expect.fail('result should not be null');
            }
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            (0, chai_1.expect)(updatedTransactionSubmissionOrNull.transactionHash).to.equal(transactionHash);
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            (0, chai_1.expect)(updatedTransactionSubmissionOrNull.status).to.equal(types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed);
            // Third read
            transactionSubmissions = await dbUtils.findMetaTransactionSubmissionsByJobIdAsync(metaTransactionJobId);
            (0, chai_1.expect)(transactionSubmissions.length).to.equal(1);
            transactionSubmission = transactionSubmissions[0];
            (0, chai_1.expect)(transactionSubmission.transactionHash).to.equal(transactionHash);
            (0, chai_1.expect)(transactionSubmission.status).to.equal(types_1.RfqmTransactionSubmissionStatus.SucceededConfirmed);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,