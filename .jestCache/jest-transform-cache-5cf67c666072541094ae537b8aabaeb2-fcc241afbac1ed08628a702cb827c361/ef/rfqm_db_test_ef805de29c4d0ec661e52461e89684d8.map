{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/rfqm_db_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/rfqm_db_test.ts"],"sourcesContent":["import { MetaTransaction, MetaTransactionFields, OtcOrder, Signature } from '@0x/protocol-utils';\nimport { BigNumber } from '@0x/utils';\nimport { expect } from 'chai';\nimport { DataSource } from 'typeorm';\nimport * as uuid from 'uuid';\n\nimport { EXECUTE_META_TRANSACTION_EIP_712_TYPES, ONE_MINUTE_MS, ZERO } from '../src/core/constants';\nimport { feeToStoredFee, storedFeeToFee } from '../src/core/fee_utils';\nimport { MetaTransactionSubmissionEntityConstructorOpts } from '../src/entities/MetaTransactionSubmissionEntity';\nimport { RfqmV2TransactionSubmissionEntityConstructorOpts } from '../src/entities/RfqmV2TransactionSubmissionEntity';\nimport { RfqmJobStatus, RfqmTransactionSubmissionStatus, RfqmTransactionSubmissionType } from '../src/entities/types';\nimport { ExecuteMetaTransactionApproval, Fee, GaslessApprovalTypes } from '../src/core/types';\nimport { otcOrderToStoredOtcOrder, RfqmDbUtils, storedOtcOrderToOtcOrder } from '../src/utils/rfqm_db_utils';\n\nimport { MOCK_FEE, MOCK_META_TRANSACTION } from './constants';\nimport { setupDependenciesAsync, TeardownDependenciesFunctionHandle } from './test_utils/deployment';\nimport { initDbDataSourceAsync } from './test_utils/initDbDataSourceAsync';\n\nlet dbUtils: RfqmDbUtils;\n\nconst createdAt = new Date();\n// it's expired if it's over 9000\nconst expiry = new BigNumber(9000);\nconst chainId = 1;\nconst makerUri = 'https://marketmaking.over9000.io';\nconst fee: Fee = {\n    token: '0xatoken',\n    amount: new BigNumber(5),\n    type: 'fixed',\n};\n\nconst otcOrderNonce = new BigNumber(1637085289);\nconst otcOrder = new OtcOrder({\n    txOrigin: '0x0000000000000000000000000000000000000000',\n    taker: '0x1111111111111111111111111111111111111111',\n    maker: '0x2222222222222222222222222222222222222222',\n    makerToken: '0x3333333333333333333333333333333333333333',\n    takerToken: '0x4444444444444444444444444444444444444444',\n    expiryAndNonce: OtcOrder.encodeExpiryAndNonce(expiry, ZERO, otcOrderNonce),\n    chainId,\n    verifyingContract: '0x0000000000000000000000000000000000000000',\n});\n\nconst otcOrderHash = otcOrder.getHash();\n\nconst takerSignature: Signature = {\n    v: 27,\n    r: '0xd00d00',\n    s: '0xcaca',\n    signatureType: 1,\n};\n\nconst approval: ExecuteMetaTransactionApproval = {\n    kind: GaslessApprovalTypes.ExecuteMetaTransaction,\n    eip712: {\n        types: {\n            EIP712Domain: [\n                { name: 'name', type: 'string' },\n                { name: 'version', type: 'string' },\n                { name: 'verifyingContract', type: 'address' },\n                { name: 'salt', type: 'bytes32' },\n            ],\n            ...EXECUTE_META_TRANSACTION_EIP_712_TYPES,\n        },\n        primaryType: 'MetaTransaction',\n        domain: {\n            name: 'Balancer (PoS)',\n            version: '1',\n            verifyingContract: '0x9a71012b13ca4d3d0cdc72a177df3ef03b0e76a3',\n            salt: '0x0000000000000000000000000000000000000000000000000000000000000089',\n        },\n        message: {\n            nonce: 1,\n            from: '0x1111111111111111111111111111111111111111',\n            functionSignature:\n                '0x095ea7b3000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n        },\n    },\n};\n\n// tx properties\nconst transactionHash = '0x5678';\nconst from = '0xanRfqmWorker';\nconst to = '0xexchangeProxyAddress';\nconst gasPrice = new BigNumber('100');\nconst gasUsed = null;\nconst blockMined = null;\nconst nonce = 0;\n\n// meta-transaction\nconst inputToken = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';\nconst outputToken = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\nconst inputTokenAmount = new BigNumber(100);\nconst minOutputTokenAmount = new BigNumber(99);\n\nfunction creatMockMetaTransaction(opts: Partial<MetaTransactionFields> = {}): MetaTransaction {\n    return new MetaTransaction({\n        ...MOCK_META_TRANSACTION,\n        ...opts,\n    });\n}\n\n// tslint:disable-next-line: custom-no-magic-numbers\njest.setTimeout(ONE_MINUTE_MS * 3);\nlet teardownDependencies: TeardownDependenciesFunctionHandle;\nlet dataSource: DataSource;\n\ndescribe('RFQM Database', () => {\n    beforeAll(async () => {\n        teardownDependencies = await setupDependenciesAsync(['postgres']);\n        dataSource = await initDbDataSourceAsync();\n        dbUtils = new RfqmDbUtils(dataSource);\n    });\n\n    afterAll(async () => {\n        if (!teardownDependencies()) {\n            throw new Error('Failed to tear down dependencies');\n        }\n    });\n\n    afterEach(async () => {\n        await dataSource.query('TRUNCATE TABLE rfqm_quotes CASCADE;');\n        await dataSource.query('TRUNCATE TABLE rfqm_jobs CASCADE;');\n        await dataSource.query('TRUNCATE TABLE rfqm_transaction_submissions CASCADE;');\n        await dataSource.query('TRUNCATE TABLE rfqm_v2_quotes CASCADE;');\n        await dataSource.query('TRUNCATE TABLE rfqm_v2_jobs CASCADE;');\n        await dataSource.query('TRUNCATE TABLE rfqm_v2_transaction_submissions CASCADE;');\n        await dataSource.query('TRUNCATE TABLE meta_transaction_submissions CASCADE;');\n        await dataSource.query('TRUNCATE TABLE meta_transaction_jobs CASCADE;');\n    });\n    describe('v2 tables', () => {\n        it('should be able to write to and read from the rfqm_v2_quote table', async () => {\n            await dbUtils.writeV2QuoteAsync({\n                chainId,\n                makerUri,\n                isUnwrap: false,\n                order: otcOrderToStoredOtcOrder(otcOrder),\n                orderHash: otcOrderHash,\n                fee: feeToStoredFee(fee),\n                takerSpecifiedSide: 'takerToken',\n            });\n\n            const storedQuote = await dbUtils.findV2QuoteByOrderHashAsync(otcOrderHash);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain\n            expect(otcOrder).to.deep.eq(storedOtcOrderToOtcOrder(storedQuote?.order!));\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain\n            expect(fee).to.deep.eq(storedFeeToFee(storedQuote?.fee!));\n\n            expect(storedQuote?.takerSpecifiedSide).to.equal('takerToken');\n        });\n\n        it('should be able to write, update, and read the rfqm_v2_job table', async () => {\n            // Write\n            await dbUtils.writeV2JobAsync({\n                approval,\n                chainId,\n                status: RfqmJobStatus.PendingProcessing,\n                expiry: otcOrder.expiry,\n                makerUri,\n                isUnwrap: false,\n                order: otcOrderToStoredOtcOrder(otcOrder),\n                takerSignature,\n                orderHash: otcOrderHash,\n                fee: feeToStoredFee(fee),\n                takerSpecifiedSide: 'makerToken',\n            });\n\n            // First Read\n            const storedJob = await dbUtils.findV2JobByOrderHashAsync(otcOrderHash);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain\n            expect(storedOtcOrderToOtcOrder(storedJob?.order!)).to.deep.eq(otcOrder);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain\n            expect(storedFeeToFee(storedJob?.fee!)).to.deep.eq(fee);\n            expect(storedJob?.status).to.equal(RfqmJobStatus.PendingProcessing);\n            expect(storedJob?.takerSignature).to.deep.eq(takerSignature);\n            expect(storedJob?.approval).to.deep.eq(approval);\n\n            // Update\n            await dbUtils.updateV2JobAsync(otcOrderHash, true, { status: RfqmJobStatus.SucceededConfirmed });\n\n            // Second Read\n            const updatedJob = await dbUtils.findV2JobByOrderHashAsync(otcOrderHash);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain\n            expect(storedOtcOrderToOtcOrder(updatedJob?.order!)).to.deep.eq(otcOrder);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain\n            expect(storedFeeToFee(updatedJob?.fee!)).to.deep.eq(fee);\n            expect(updatedJob?.status).to.equal(RfqmJobStatus.SucceededConfirmed);\n            expect(updatedJob?.takerSpecifiedSide).to.equal('makerToken');\n        });\n\n        it('should be able to find by status across the rfqm_v2_job table', async () => {\n            // Write job with failed status\n            await dbUtils.writeV2JobAsync({\n                chainId,\n                status: RfqmJobStatus.FailedEthCallFailed,\n                expiry: otcOrder.expiry,\n                makerUri,\n                isUnwrap: false,\n                order: otcOrderToStoredOtcOrder(otcOrder),\n                orderHash: otcOrderHash,\n                fee: feeToStoredFee(fee),\n                takerSpecifiedSide: 'makerToken',\n            });\n\n            // Get jobs with that status\n            const storedJobs = await dbUtils.findV2JobsWithStatusesAsync([RfqmJobStatus.FailedEthCallFailed]);\n            expect(storedJobs.length).to.equal(1);\n\n            // Confirm correctness\n            const storedJob = storedJobs[0];\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain\n            expect(storedOtcOrderToOtcOrder(storedJob?.order!)).to.deep.eq(otcOrder);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-non-null-asserted-optional-chain\n            expect(storedFeeToFee(storedJob?.fee!)).to.deep.eq(fee);\n            expect(storedJob?.status).to.equal(RfqmJobStatus.FailedEthCallFailed);\n        });\n\n        it('should be able to write to and read from the last_look_rejection_cooldowns table', async () => {\n            const makerId = 'makerId1';\n            const nowMs = Date.now();\n            const startTime = new Date(nowMs);\n            const endTime = new Date(nowMs + ONE_MINUTE_MS);\n            await dbUtils.writeV2LastLookRejectionCooldownAsync(\n                makerId,\n                chainId,\n                otcOrder.makerToken,\n                otcOrder.takerToken,\n                startTime,\n                endTime,\n                otcOrderHash,\n            );\n\n            const storedCooldown = await dbUtils.findV2LastLookRejectionCooldownAsync(\n                makerId,\n                chainId,\n                otcOrder.makerToken,\n                otcOrder.takerToken,\n                startTime,\n            );\n            expect(storedCooldown?.endTime).to.deep.eq(endTime);\n            expect(storedCooldown?.orderHash).to.deep.eq(otcOrderHash);\n        });\n\n        it('should be able to write, update, and read the rfqm_v2_transaction_submission table', async () => {\n            // Write\n            const rfqmTransactionSubmissionEntityOpts: RfqmV2TransactionSubmissionEntityConstructorOpts = {\n                transactionHash,\n                orderHash: otcOrderHash,\n                createdAt,\n                from,\n                to,\n                gasPrice,\n                gasUsed,\n                blockMined,\n                nonce,\n                status: RfqmTransactionSubmissionStatus.Submitted,\n                type: RfqmTransactionSubmissionType.Trade,\n            };\n            await dbUtils.writeV2TransactionSubmissionAsync(rfqmTransactionSubmissionEntityOpts);\n\n            // First Read\n            const transactionSubmissions = await dbUtils.findV2TransactionSubmissionsByOrderHashAsync(otcOrderHash);\n            expect(transactionSubmissions.length).to.equal(1);\n\n            const transactionSubmission = transactionSubmissions[0];\n            expect(transactionSubmission.transactionHash).to.equal(transactionHash);\n            expect(transactionSubmission.status).to.equal(RfqmTransactionSubmissionStatus.Submitted);\n\n            // Update\n            await dbUtils.updateV2TransactionSubmissionsAsync([\n                {\n                    ...transactionSubmission,\n                    status: RfqmTransactionSubmissionStatus.SucceededConfirmed,\n                },\n            ]);\n\n            // Second Read\n            const updatedTransactionSubmissions = await dbUtils.findV2TransactionSubmissionsByOrderHashAsync(\n                otcOrderHash,\n            );\n            expect(updatedTransactionSubmissions.length).to.equal(1);\n\n            const updatedTransactionSubmission = updatedTransactionSubmissions[0];\n            expect(updatedTransactionSubmission.transactionHash).to.equal(transactionHash);\n            expect(updatedTransactionSubmission.status).to.equal(RfqmTransactionSubmissionStatus.SucceededConfirmed);\n        });\n\n        it('should not run into duplicate key issues if attempting to write to the same hash', async () => {\n            // Write\n            const rfqmTransactionSubmissionEntityOpts: RfqmV2TransactionSubmissionEntityConstructorOpts = {\n                transactionHash,\n                orderHash: otcOrderHash,\n                createdAt,\n                from,\n                to,\n                gasPrice,\n                gasUsed,\n                blockMined,\n                nonce,\n                status: RfqmTransactionSubmissionStatus.Submitted,\n                type: RfqmTransactionSubmissionType.Trade,\n            };\n            await dbUtils.writeV2TransactionSubmissionAsync(rfqmTransactionSubmissionEntityOpts);\n\n            // Write again - should not error\n            await dbUtils.writeV2TransactionSubmissionAsync(rfqmTransactionSubmissionEntityOpts);\n\n            // Read\n            const transactionSubmissions = await dbUtils.findV2TransactionSubmissionsByOrderHashAsync(otcOrderHash);\n            expect(transactionSubmissions.length).to.equal(1);\n\n            const transactionSubmission = transactionSubmissions[0];\n            expect(transactionSubmission.transactionHash).to.equal(transactionHash);\n            expect(transactionSubmission.status).to.equal(RfqmTransactionSubmissionStatus.Submitted);\n        });\n    });\n\n    describe('meta transaction tables', () => {\n        it('should be able to write to, update, and read from the `meta_transaction_jobs` table', async () => {\n            const metaTransaction = creatMockMetaTransaction();\n            const metaTransactionHash = metaTransaction.getHash();\n            // Write\n            const savedJob = await dbUtils.writeMetaTransactionJobAsync({\n                approval,\n                chainId: 1,\n                expiry: new BigNumber(2),\n                fee: MOCK_FEE,\n                inputToken,\n                inputTokenAmount,\n                integratorId: 'integrator',\n                metaTransaction,\n                metaTransactionHash,\n                minOutputTokenAmount,\n                outputToken,\n                takerAddress: '0xaddress',\n                takerSignature,\n            });\n            expect(savedJob.id).to.not.equal(null);\n\n            // Read\n            const job = await dbUtils.findMetaTransactionJobByMetaTransactionHashAsync(metaTransactionHash);\n            if (!job) {\n                throw new Error('job should exist');\n            }\n            expect(job.metaTransaction).to.eql(metaTransaction);\n            expect(job.fee).to.eql(MOCK_FEE);\n            expect(job.status).to.eql(RfqmJobStatus.PendingEnqueued);\n            expect(job.approval).to.eql(approval);\n            expect(job.workerAddress).to.eql(null);\n\n            // Update\n            job.chainId = 1;\n            await dbUtils.updateRfqmJobAsync(job);\n\n            // Read\n            const updatedJob = await dbUtils.findMetaTransactionJobByIdAsync(job.id);\n            if (!updatedJob) {\n                throw new Error('job should exist');\n            }\n            expect(updatedJob.metaTransaction).to.eql(metaTransaction);\n            expect(updatedJob.fee).to.eql(MOCK_FEE);\n            expect(updatedJob.status).to.eql(RfqmJobStatus.PendingEnqueued);\n            expect(updatedJob.approval).to.eql(approval);\n            expect(updatedJob.workerAddress).to.eql(null);\n            expect(updatedJob.chainId).to.eql(1);\n        });\n\n        it('should be able to find by status across the `meta_transaction_jobs` table', async () => {\n            const metaTransaction = creatMockMetaTransaction();\n            const metaTransactionHash = metaTransaction.getHash();\n            // Write\n            const savedJob = await dbUtils.writeMetaTransactionJobAsync({\n                approval,\n                chainId: 1,\n                expiry: new BigNumber(2),\n                fee: MOCK_FEE,\n                inputToken,\n                inputTokenAmount,\n                integratorId: 'integrator',\n                metaTransaction,\n                metaTransactionHash,\n                minOutputTokenAmount,\n                outputToken,\n                takerAddress: '0xaddress',\n                takerSignature,\n                status: RfqmJobStatus.FailedExpired,\n            });\n            expect(savedJob.id).to.not.equal(null);\n\n            // Read\n            const jobs = await dbUtils.findMetaTransactionJobsWithStatusesAsync([RfqmJobStatus.FailedExpired]);\n            expect(jobs.length).to.equal(1);\n            expect(jobs[0].metaTransaction).to.eql(metaTransaction);\n            expect(jobs[0].fee).to.eql(MOCK_FEE);\n            expect(jobs[0].status).to.eql(RfqmJobStatus.FailedExpired);\n            expect(jobs[0].approval).to.eql(approval);\n            expect(jobs[0].workerAddress).to.eql(null);\n        });\n\n        it('should be able to find unsolved meta transaction jobs in the `meta_transaction_jobs` table', async () => {\n            const mockMetaTransaction1 = creatMockMetaTransaction();\n            const savedJob = await dbUtils.writeMetaTransactionJobAsync({\n                approval,\n                chainId: 1,\n                expiry: new BigNumber(2),\n                fee: MOCK_FEE,\n                id: '1',\n                integratorId: 'integrator',\n                inputToken,\n                inputTokenAmount,\n                metaTransaction: mockMetaTransaction1,\n                metaTransactionHash: mockMetaTransaction1.getHash(),\n                minOutputTokenAmount,\n                outputToken,\n                takerAddress: '0xaddress',\n                takerSignature,\n                status: RfqmJobStatus.PendingEnqueued,\n            });\n            expect(savedJob.id).to.not.equal(null);\n\n            const mockMetaTransaction2 = creatMockMetaTransaction({ signer: '0xabcdef2' });\n            await dbUtils.writeMetaTransactionJobAsync({\n                approval,\n                chainId: 2,\n                expiry: new BigNumber(2),\n                fee: MOCK_FEE,\n                inputToken,\n                inputTokenAmount,\n                integratorId: 'integrator',\n                metaTransaction: mockMetaTransaction2,\n                metaTransactionHash: mockMetaTransaction2.getHash(),\n                minOutputTokenAmount,\n                outputToken,\n                takerAddress: '0xaddress',\n                takerSignature,\n                status: RfqmJobStatus.PendingProcessing,\n                workerAddress: '0xworkerAddress',\n            });\n\n            const mockMetaTransaction3 = creatMockMetaTransaction({ signer: '0xabcdef3' });\n            await dbUtils.writeMetaTransactionJobAsync({\n                approval,\n                chainId: 3,\n                expiry: new BigNumber(2),\n                fee: MOCK_FEE,\n                inputToken,\n                inputTokenAmount,\n                integratorId: 'integrator',\n                metaTransaction: mockMetaTransaction3,\n                metaTransactionHash: mockMetaTransaction3.getHash(),\n                minOutputTokenAmount,\n                outputToken,\n                takerAddress: '0xaddress',\n                takerSignature,\n                status: RfqmJobStatus.FailedExpired,\n            });\n\n            const jobs = await dbUtils.findUnresolvedMetaTransactionJobsAsync('0xworkerAddress', 2);\n            expect(jobs.length).to.equal(1);\n            expect(jobs[0].status).to.eql(RfqmJobStatus.PendingProcessing);\n        });\n\n        it('should be able to write, update, and read the `meta_transaction_submissions` table', async () => {\n            const metaTransactionJobId = uuid.v4();\n            // Write\n            const metaTransactionSubmissionEntityOpts: MetaTransactionSubmissionEntityConstructorOpts = {\n                from,\n                metaTransactionJobId,\n                nonce,\n                to,\n                transactionHash,\n                type: RfqmTransactionSubmissionType.Trade,\n                status: RfqmTransactionSubmissionStatus.SucceededUnconfirmed,\n            };\n            const savedSubmission = await dbUtils.writeMetaTransactionSubmissionAsync(\n                metaTransactionSubmissionEntityOpts,\n            );\n            expect(savedSubmission.id).not.equal(null);\n\n            // First Read\n            let transactionSubmissions = await dbUtils.findMetaTransactionSubmissionsByTransactionHashAsync(\n                transactionHash,\n                RfqmTransactionSubmissionType.Trade,\n            );\n            expect(transactionSubmissions.length).to.equal(1);\n\n            let transactionSubmission = transactionSubmissions[0];\n            expect(transactionSubmission.transactionHash).to.equal(transactionHash);\n            expect(transactionSubmission.status).to.equal(RfqmTransactionSubmissionStatus.SucceededUnconfirmed);\n\n            // Update\n            await dbUtils.updateRfqmTransactionSubmissionsAsync([\n                {\n                    ...transactionSubmission,\n                    status: RfqmTransactionSubmissionStatus.SucceededConfirmed,\n                },\n            ]);\n\n            // Second Read\n            const updatedTransactionSubmissionOrNull = await dbUtils.findMetaTransactionSubmissionByIdAsync(\n                transactionSubmission.id,\n            );\n            if (!updatedTransactionSubmissionOrNull) {\n                expect.fail('result should not be null');\n            }\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            expect(updatedTransactionSubmissionOrNull!.transactionHash).to.equal(transactionHash);\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            expect(updatedTransactionSubmissionOrNull!.status).to.equal(\n                RfqmTransactionSubmissionStatus.SucceededConfirmed,\n            );\n\n            // Third read\n            transactionSubmissions = await dbUtils.findMetaTransactionSubmissionsByJobIdAsync(metaTransactionJobId);\n            expect(transactionSubmissions.length).to.equal(1);\n\n            transactionSubmission = transactionSubmissions[0];\n            expect(transactionSubmission.transactionHash).to.equal(transactionHash);\n            expect(transactionSubmission.status).to.equal(RfqmTransactionSubmissionStatus.SucceededConfirmed);\n        });\n    });\n});\n// tslint:disable-line:max-file-line-count\n"],"version":3}