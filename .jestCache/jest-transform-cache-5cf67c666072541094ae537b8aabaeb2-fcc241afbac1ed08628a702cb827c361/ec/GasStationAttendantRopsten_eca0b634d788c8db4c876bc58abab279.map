{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasStationAttendantRopsten.ts","mappings":";;;AACA,qCAAsC;AAEtC,iDAAkF;AAMlF,oEAAoE;AACpE,MAAM,oBAAoB,GAAG,GAAG,CAAC;AAEjC,6DAA6D;AAC7D,MAAM,eAAe,GAAG,IAAI,iBAAS,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,yBAAa,CAAC,CAAC;AAEpE;;;;;;;;;;;;GAYG;AACH,MAAa,0BAA0B;IAGnC,YAAY,gBAAkC;QAC1C,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,wDAAwD;IACjD,KAAK,CAAC,2BAA2B;QACpC,MAAM,sBAAsB,GAAG,GAAG,CAAC;QACnC,MAAM,WAAW,GAAG,0CAA8B,CAAC;QACnD,OAAO,IAAI,iBAAS,CAAC,sBAAsB,CAAC,CAAC,SAAS,CAAC,yBAAa,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAC7F,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,6BAA6B;QACtC,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,iCAAiC,EAAE,CAAC;QAC7F,MAAM,WAAW,GAAG,0CAA8B,CAAC;QAEnD,OAAO,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAC3D,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,kCAAkC;QAC3C,iDAAiD;QACjD,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,iCAAiC,EAAE,CAAC;QAC7F,MAAM,OAAO,GAAG,GAAG,CAAC;QACpB,OAAO,mBAAmB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,iBAAS,CAAC,UAAU,CAAC,CAAC;IACjF,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,eAAe,CACxB,iBAEQ;QAER,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,iCAAiC,EAAE,CAAC;QAC7F,MAAM,UAAU,GAAG,IAAI,iBAAS,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,yBAAa,CAAC,CAAC;QAC/D,IAAI,CAAC,iBAAiB,EAAE;YACpB,MAAM,8BAA8B,GAAG,UAAU,CAAC;YAClD,MAAM,cAAc,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpD,OAAO;gBACH,oBAAoB,EAAE,8BAA8B;gBACpD,YAAY,EAAE,cAAc,CAAC,IAAI,CAAC,8BAA8B,CAAC;aACpE,CAAC;SACL;QAED,MAAM,EAAE,YAAY,EAAE,eAAe,EAAE,oBAAoB,EAAE,uBAAuB,EAAE,GAClF,iBAAiB,CAAC,UAAU,CAAC;QAEjC,MAAM,uBAAuB,GAAG,iBAAS,CAAC,GAAG,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,mBAAmB,CAAC,CAAC;QAErG,IAAI,uBAAuB,CAAC,aAAa,CAAC,eAAe,CAAC,EAAE;YACxD,OAAO,IAAI,CAAC;SACf;QAED,MAAM,eAAe,GAAG,eAAe,CAAC,YAAY,CAAC,oBAAoB,CAAC,CAAC;QAE3E,OAAO;YACH,oBAAoB,EAAE,uBAAuB,CAAC,YAAY,CAAC,iBAAS,CAAC,UAAU,CAAC;YAChF,YAAY,EAAE,eAAe,CAAC,YAAY,CAAC,iBAAS,CAAC,UAAU,CAAC;SACnE,CAAC;IACN,CAAC;CACJ;AAxED,gEAwEC","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasStationAttendantRopsten.ts"],"sourcesContent":["import { ProtocolFeeUtils } from '@0x/asset-swapper';\r\nimport { BigNumber } from '@0x/utils';\r\n\r\nimport { GWEI_DECIMALS, RFQM_TX_OTC_ORDER_GAS_ESTIMATE } from '../core/constants';\r\nimport { MetaTransactionSubmissionEntity, RfqmV2TransactionSubmissionEntity } from '../entities';\r\n\r\nimport { GasStationAttendant, Wei, WeiPerGas } from './GasStationAttendant';\r\nimport { SubmissionContext } from './SubmissionContext';\r\n\r\n// Increase multiplier for tip/base fee with each resubmission cycle\r\nconst TEN_PERCENT_INCREASE = 1.1;\r\n\r\n// No new trades will be submitted with a tip above 192 GWEI.\r\nconst MAXIMUM_TIP_WEI = new BigNumber(192).shiftedBy(GWEI_DECIMALS);\r\n\r\n/**\r\n * An implementation of `GasStationAttendant` designed for Ropsten.\r\n *\r\n * This should only be used for testing (I mean, it's on a test net)\r\n * and does not meet the standards of code we have for production.\r\n *\r\n * Currently, the 0x Gas Oracle does not provide pricing for Ropsten\r\n * in EIP-1559 format. Therefore, we'll use the \"pre-GasStationAttendant\"\r\n * strategy where the fast gas + padding is used for billing\r\n * and we use 1.5 GWEI tip, increasing by 2x every trade.\r\n *\r\n * Other values are best guesses.\r\n */\r\nexport class GasStationAttendantRopsten implements GasStationAttendant {\r\n    private readonly _protocolFeeUtils: ProtocolFeeUtils;\r\n\r\n    constructor(protocolFeeUtils: ProtocolFeeUtils) {\r\n        this._protocolFeeUtils = protocolFeeUtils;\r\n    }\r\n\r\n    /**\r\n     * Assumes ~100 GWEI for a trade\r\n     */\r\n    // tslint:disable-next-line: prefer-function-over-method\r\n    public async getSafeBalanceForTradeAsync(): Promise<Wei> {\r\n        const estimatedTradeRateGwei = 100;\r\n        const gasEstimate = RFQM_TX_OTC_ORDER_GAS_ESTIMATE;\r\n        return new BigNumber(estimatedTradeRateGwei).shiftedBy(GWEI_DECIMALS).times(gasEstimate);\r\n    }\r\n\r\n    /**\r\n     * Na√Øve 2x the fast gas price for a trade\r\n     */\r\n    public async getWorkerBalanceForTradeAsync(): Promise<WeiPerGas> {\r\n        const gasPriceEstimateWei = await this._protocolFeeUtils.getGasPriceEstimationOrThrowAsync();\r\n        const gasEstimate = RFQM_TX_OTC_ORDER_GAS_ESTIMATE;\r\n\r\n        return gasPriceEstimateWei.times(2).times(gasEstimate);\r\n    }\r\n\r\n    /**\r\n     * Use the 'fast' gas plus a padding\r\n     */\r\n    public async getExpectedTransactionGasRateAsync(): Promise<WeiPerGas> {\r\n        // use that instead of the legacy fast gas price.\r\n        const gasPriceEstimateWei = await this._protocolFeeUtils.getGasPriceEstimationOrThrowAsync();\r\n        const padding = 1.5;\r\n        return gasPriceEstimateWei.times(padding).integerValue(BigNumber.ROUND_CEIL);\r\n    }\r\n\r\n    /**\r\n     * Double tip and increase maxFeePerGas by 10% to make nodes happy\r\n     */\r\n    public async getNextBidAsync(\r\n        submissionContext: SubmissionContext<\r\n            RfqmV2TransactionSubmissionEntity[] | MetaTransactionSubmissionEntity[]\r\n        > | null,\r\n    ): Promise<{ maxFeePerGas: BigNumber; maxPriorityFeePerGas: BigNumber } | null> {\r\n        const gasPriceEstimateWei = await this._protocolFeeUtils.getGasPriceEstimationOrThrowAsync();\r\n        const initialTip = new BigNumber(1.5).shiftedBy(GWEI_DECIMALS);\r\n        if (!submissionContext) {\r\n            const initialMaxPriorityFeePerGasWei = initialTip;\r\n            const initialBaseFee = gasPriceEstimateWei.times(2);\r\n            return {\r\n                maxPriorityFeePerGas: initialMaxPriorityFeePerGasWei,\r\n                maxFeePerGas: initialBaseFee.plus(initialMaxPriorityFeePerGasWei),\r\n            };\r\n        }\r\n\r\n        const { maxFeePerGas: oldMaxFeePerGas, maxPriorityFeePerGas: oldMaxPriorityFeePerGas } =\r\n            submissionContext.maxGasFees;\r\n\r\n        const newMaxPriorityFeePerGas = BigNumber.max(oldMaxPriorityFeePerGas.times(2), gasPriceEstimateWei);\r\n\r\n        if (newMaxPriorityFeePerGas.isGreaterThan(MAXIMUM_TIP_WEI)) {\r\n            return null;\r\n        }\r\n\r\n        const newMaxFeePerGas = oldMaxFeePerGas.multipliedBy(TEN_PERCENT_INCREASE);\r\n\r\n        return {\r\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas.integerValue(BigNumber.ROUND_CEIL),\r\n            maxFeePerGas: newMaxFeePerGas.integerValue(BigNumber.ROUND_CEIL),\r\n        };\r\n    }\r\n}\r\n"],"version":3}