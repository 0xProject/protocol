b0597c4c069c0efb8284c9258ab97187
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GasStationAttendantRopsten = void 0;
const utils_1 = require("@0x/utils");
const constants_1 = require("../core/constants");
// Increase multiplier for tip/base fee with each resubmission cycle
const TEN_PERCENT_INCREASE = 1.1;
// No new trades will be submitted with a tip above 192 GWEI.
const MAXIMUM_TIP_WEI = new utils_1.BigNumber(192).shiftedBy(constants_1.GWEI_DECIMALS);
/**
 * An implementation of `GasStationAttendant` designed for Ropsten.
 *
 * This should only be used for testing (I mean, it's on a test net)
 * and does not meet the standards of code we have for production.
 *
 * Currently, the 0x Gas Oracle does not provide pricing for Ropsten
 * in EIP-1559 format. Therefore, we'll use the "pre-GasStationAttendant"
 * strategy where the fast gas + padding is used for billing
 * and we use 1.5 GWEI tip, increasing by 2x every trade.
 *
 * Other values are best guesses.
 */
class GasStationAttendantRopsten {
    constructor(protocolFeeUtils) {
        this._protocolFeeUtils = protocolFeeUtils;
    }
    /**
     * Assumes ~100 GWEI for a trade
     */
    // tslint:disable-next-line: prefer-function-over-method
    async getSafeBalanceForTradeAsync() {
        const estimatedTradeRateGwei = 100;
        const gasEstimate = constants_1.RFQM_TX_OTC_ORDER_GAS_ESTIMATE;
        return new utils_1.BigNumber(estimatedTradeRateGwei).shiftedBy(constants_1.GWEI_DECIMALS).times(gasEstimate);
    }
    /**
     * Na√Øve 2x the fast gas price for a trade
     */
    async getWorkerBalanceForTradeAsync() {
        const gasPriceEstimateWei = await this._protocolFeeUtils.getGasPriceEstimationOrThrowAsync();
        const gasEstimate = constants_1.RFQM_TX_OTC_ORDER_GAS_ESTIMATE;
        return gasPriceEstimateWei.times(2).times(gasEstimate);
    }
    /**
     * Use the 'fast' gas plus a padding
     */
    async getExpectedTransactionGasRateAsync() {
        // use that instead of the legacy fast gas price.
        const gasPriceEstimateWei = await this._protocolFeeUtils.getGasPriceEstimationOrThrowAsync();
        const padding = 1.5;
        return gasPriceEstimateWei.times(padding).integerValue(utils_1.BigNumber.ROUND_CEIL);
    }
    /**
     * Double tip and increase maxFeePerGas by 10% to make nodes happy
     */
    async getNextBidAsync(submissionContext) {
        const gasPriceEstimateWei = await this._protocolFeeUtils.getGasPriceEstimationOrThrowAsync();
        const initialTip = new utils_1.BigNumber(1.5).shiftedBy(constants_1.GWEI_DECIMALS);
        if (!submissionContext) {
            const initialMaxPriorityFeePerGasWei = initialTip;
            const initialBaseFee = gasPriceEstimateWei.times(2);
            return {
                maxPriorityFeePerGas: initialMaxPriorityFeePerGasWei,
                maxFeePerGas: initialBaseFee.plus(initialMaxPriorityFeePerGasWei),
            };
        }
        const { maxFeePerGas: oldMaxFeePerGas, maxPriorityFeePerGas: oldMaxPriorityFeePerGas } = submissionContext.maxGasFees;
        const newMaxPriorityFeePerGas = utils_1.BigNumber.max(oldMaxPriorityFeePerGas.times(2), gasPriceEstimateWei);
        if (newMaxPriorityFeePerGas.isGreaterThan(MAXIMUM_TIP_WEI)) {
            return null;
        }
        const newMaxFeePerGas = oldMaxFeePerGas.multipliedBy(TEN_PERCENT_INCREASE);
        return {
            maxPriorityFeePerGas: newMaxPriorityFeePerGas.integerValue(utils_1.BigNumber.ROUND_CEIL),
            maxFeePerGas: newMaxFeePerGas.integerValue(utils_1.BigNumber.ROUND_CEIL),
        };
    }
}
exports.GasStationAttendantRopsten = GasStationAttendantRopsten;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,