{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/test_utils/deployment.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/test_utils/deployment.ts"],"sourcesContent":["import { ChildProcessWithoutNullStreams, spawn } from 'child_process';\r\nimport * as path from 'path';\r\n\r\nimport { ONE_MINUTE_MS } from '../../src/core/constants';\r\n\r\nimport { initDbDataSourceAsync } from './initDbDataSourceAsync';\r\n\r\n// depends on a `docker-compose.yml` existing in the api root directory\r\nconst dockerComposeFilename = 'docker-compose.yml';\r\n\r\n/**\r\n * Returned by `setupDependenciesAsync`. Call to shutdown the\r\n * dependencies spun up by `setupDependenciesAsync`. Returns\r\n * `true` if the teardown is successful.\r\n */\r\nexport type TeardownDependenciesFunctionHandle = () => boolean;\r\n\r\ntype Service = 'sqs' | 'postgres' | 'redis' | 'ganache';\r\n\r\n/**\r\n * Sets up 0x-api's dependencies\r\n *\r\n * @param services An array of services to start\r\n * @returns A function handle which will tear down the dependencies when called\r\n */\r\nexport async function setupDependenciesAsync(services: Service[]): Promise<TeardownDependenciesFunctionHandle> {\r\n    if (services.length === 0) {\r\n        throw new Error('Pick at least one service to start');\r\n    }\r\n\r\n    const configFilePath = path.resolve(__dirname, '../../', dockerComposeFilename);\r\n\r\n    /**\r\n     * Only starts the services specified in `services`.\r\n     */\r\n    const up = spawn(`docker-compose`, ['-f', configFilePath, 'up', ...services], {});\r\n\r\n    await waitForDependencyStartupAsync(up, services);\r\n\r\n    if (services.includes('postgres')) {\r\n        await confirmPostgresConnectivityAsync();\r\n    }\r\n    // Return the function handle which will shutdown the services\r\n    return function closeFunction(): boolean {\r\n        const wasSuccessfulKill = up.kill();\r\n        return wasSuccessfulKill;\r\n    };\r\n}\r\n\r\n/**\r\n * Monitor the logs being emitted from the docker containers to detect\r\n * when services have started up. Postgres startup is managed with\r\n * `confirmPostgresConnectivityAsync`\r\n */\r\nasync function waitForDependencyStartupAsync(\r\n    logStream: ChildProcessWithoutNullStreams,\r\n    services: Service[],\r\n): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n        const startupTimeout = ONE_MINUTE_MS * 3; // tslint:disable-line custom-no-magic-numbers\r\n        const timeoutHandle = setTimeout(() => {\r\n            reject(new Error(`Timed out waiting for dependency logs\\n${JSON.stringify(isServiceStarted)}`));\r\n        }, startupTimeout);\r\n\r\n        const startupRegexSqs = /.*sqs.*listening on port \\d{4}/;\r\n        const startupRegexRedis = /.*redis.*Ready to accept connections/;\r\n        const startupRegexGananche = /.*ganache.*Listening on 0.0.0.0:\\d{4}/;\r\n\r\n        const isServiceStarted: Record<Service, boolean> = {\r\n            sqs: !services.includes('sqs'),\r\n            postgres: true, // managed by confirmPostgresConnectivityAsync\r\n            redis: !services.includes('redis'),\r\n            ganache: !services.includes('ganache'),\r\n        };\r\n\r\n        logStream.on('error', (error) => {\r\n            reject(`Stream closed with error: ${error}`);\r\n        });\r\n\r\n        logStream.stdout.on('data', (data) => {\r\n            const log = data.toString();\r\n            if (startupRegexRedis.test(log)) {\r\n                isServiceStarted.redis = true;\r\n            }\r\n            if (startupRegexSqs.test(log)) {\r\n                isServiceStarted.sqs = true;\r\n            }\r\n            if (startupRegexGananche.test(log)) {\r\n                isServiceStarted.ganache = true;\r\n            }\r\n\r\n            // Once all the services are started, resolve the promise\r\n            if (Object.values(isServiceStarted).every((v) => v)) {\r\n                // logStream.stdout.removeAllListeners('data');\r\n                // logStream.removeAllListeners('error');\r\n                clearTimeout(timeoutHandle);\r\n                resolve();\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n// eslint-disable-next-line @typescript-eslint/no-inferrable-types\r\nasync function confirmPostgresConnectivityAsync(maxTries: number = 5): Promise<void> {\r\n    try {\r\n        await Promise.all([\r\n            // delay before retrying\r\n            new Promise<void>((resolve) => setTimeout(resolve, 2000)), // tslint:disable-line:custom-no-magic-numbers\r\n            async () => {\r\n                await initDbDataSourceAsync();\r\n            },\r\n        ]);\r\n        return;\r\n    } catch (e) {\r\n        if (maxTries > 0) {\r\n            await confirmPostgresConnectivityAsync(maxTries - 1);\r\n        } else {\r\n            throw e;\r\n        }\r\n    }\r\n}\r\n"],"version":3}