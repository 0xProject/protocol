a80357306a0f6fcded059d09675dadaf
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTxRelayV1Router = exports.createZeroGRouter = void 0;
const express = require("express");
const asyncHandler = require("express-async-handler");
const GaslessSwapHandlers_1 = require("../handlers/GaslessSwapHandlers");
/**
 * Creates an express router for zero-g related routes.
 */
function createZeroGRouter(gaslessSwapServices, configManager) {
    const router = express.Router();
    const handlers = new GaslessSwapHandlers_1.GaslessSwapHandlers(gaslessSwapServices, configManager);
    // Routes
    router.get('/healthz', asyncHandler(handlers.getHealthAsync.bind(handlers)));
    router.get('/price', asyncHandler(handlers.getPriceAsync.bind(handlers)));
    router.get('/quote', asyncHandler(handlers.getQuoteAsync.bind(handlers)));
    router.get('/status/:hash', asyncHandler(handlers.getStatusAsync.bind(handlers)));
    router.post('/submit', asyncHandler(handlers.processSubmitAsync.bind(handlers)));
    return router;
}
exports.createZeroGRouter = createZeroGRouter;
/**
 * Creates an express router for tx relay v1 related routes.
 */
function createTxRelayV1Router(gaslessSwapServices, configManager) {
    const router = express.Router();
    const handlers = new GaslessSwapHandlers_1.GaslessSwapHandlers(gaslessSwapServices, configManager);
    // Routes
    router.get('/healthz', asyncHandler(handlers.getHealthAsync.bind(handlers)));
    router.get('/price', asyncHandler(handlers.getPriceAsync.bind(handlers)));
    router.get('/quote', asyncHandler(handlers.getQuoteAsync.bind(handlers)));
    router.get('/status/:hash', asyncHandler(handlers.getStatusAsync.bind(handlers)));
    router.post('/submit', asyncHandler(handlers.processSubmitAsync.bind(handlers)));
    return router;
}
exports.createTxRelayV1Router = createTxRelayV1Router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9yb3V0ZXJzL0dhc2xlc3NTd2FwUm91dGVyLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFtQztBQUNuQyxzREFBc0Q7QUFFdEQseUVBQXNFO0FBSXRFOztHQUVHO0FBQ0gsU0FBZ0IsaUJBQWlCLENBQzdCLG1CQUFvRCxFQUNwRCxhQUE0QjtJQUU1QixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEMsTUFBTSxRQUFRLEdBQUcsSUFBSSx5Q0FBbUIsQ0FBQyxtQkFBbUIsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUU3RSxTQUFTO0lBQ1QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RSxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFakYsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQWZELDhDQWVDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixxQkFBcUIsQ0FDakMsbUJBQW9ELEVBQ3BELGFBQTRCO0lBRTVCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQyxNQUFNLFFBQVEsR0FBRyxJQUFJLHlDQUFtQixDQUFDLG1CQUFtQixFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBRTdFLFNBQVM7SUFDVCxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdFLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRSxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVqRixPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBZkQsc0RBZUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy9yb3V0ZXJzL0dhc2xlc3NTd2FwUm91dGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgKiBhcyBhc3luY0hhbmRsZXIgZnJvbSAnZXhwcmVzcy1hc3luYy1oYW5kbGVyJztcblxuaW1wb3J0IHsgR2FzbGVzc1N3YXBIYW5kbGVycyB9IGZyb20gJy4uL2hhbmRsZXJzL0dhc2xlc3NTd2FwSGFuZGxlcnMnO1xuaW1wb3J0IHsgR2FzbGVzc1N3YXBTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvR2FzbGVzc1N3YXBTZXJ2aWNlJztcbmltcG9ydCB7IENvbmZpZ01hbmFnZXIgfSBmcm9tICcuLi91dGlscy9jb25maWdfbWFuYWdlcic7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBleHByZXNzIHJvdXRlciBmb3IgemVyby1nIHJlbGF0ZWQgcm91dGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlWmVyb0dSb3V0ZXIoXG4gICAgZ2FzbGVzc1N3YXBTZXJ2aWNlczogTWFwPG51bWJlciwgR2FzbGVzc1N3YXBTZXJ2aWNlPixcbiAgICBjb25maWdNYW5hZ2VyOiBDb25maWdNYW5hZ2VyLFxuKTogZXhwcmVzcy5Sb3V0ZXIge1xuICAgIGNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG4gICAgY29uc3QgaGFuZGxlcnMgPSBuZXcgR2FzbGVzc1N3YXBIYW5kbGVycyhnYXNsZXNzU3dhcFNlcnZpY2VzLCBjb25maWdNYW5hZ2VyKTtcblxuICAgIC8vIFJvdXRlc1xuICAgIHJvdXRlci5nZXQoJy9oZWFsdGh6JywgYXN5bmNIYW5kbGVyKGhhbmRsZXJzLmdldEhlYWx0aEFzeW5jLmJpbmQoaGFuZGxlcnMpKSk7XG4gICAgcm91dGVyLmdldCgnL3ByaWNlJywgYXN5bmNIYW5kbGVyKGhhbmRsZXJzLmdldFByaWNlQXN5bmMuYmluZChoYW5kbGVycykpKTtcbiAgICByb3V0ZXIuZ2V0KCcvcXVvdGUnLCBhc3luY0hhbmRsZXIoaGFuZGxlcnMuZ2V0UXVvdGVBc3luYy5iaW5kKGhhbmRsZXJzKSkpO1xuICAgIHJvdXRlci5nZXQoJy9zdGF0dXMvOmhhc2gnLCBhc3luY0hhbmRsZXIoaGFuZGxlcnMuZ2V0U3RhdHVzQXN5bmMuYmluZChoYW5kbGVycykpKTtcbiAgICByb3V0ZXIucG9zdCgnL3N1Ym1pdCcsIGFzeW5jSGFuZGxlcihoYW5kbGVycy5wcm9jZXNzU3VibWl0QXN5bmMuYmluZChoYW5kbGVycykpKTtcblxuICAgIHJldHVybiByb3V0ZXI7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBleHByZXNzIHJvdXRlciBmb3IgdHggcmVsYXkgdjEgcmVsYXRlZCByb3V0ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUeFJlbGF5VjFSb3V0ZXIoXG4gICAgZ2FzbGVzc1N3YXBTZXJ2aWNlczogTWFwPG51bWJlciwgR2FzbGVzc1N3YXBTZXJ2aWNlPixcbiAgICBjb25maWdNYW5hZ2VyOiBDb25maWdNYW5hZ2VyLFxuKTogZXhwcmVzcy5Sb3V0ZXIge1xuICAgIGNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG4gICAgY29uc3QgaGFuZGxlcnMgPSBuZXcgR2FzbGVzc1N3YXBIYW5kbGVycyhnYXNsZXNzU3dhcFNlcnZpY2VzLCBjb25maWdNYW5hZ2VyKTtcblxuICAgIC8vIFJvdXRlc1xuICAgIHJvdXRlci5nZXQoJy9oZWFsdGh6JywgYXN5bmNIYW5kbGVyKGhhbmRsZXJzLmdldEhlYWx0aEFzeW5jLmJpbmQoaGFuZGxlcnMpKSk7XG4gICAgcm91dGVyLmdldCgnL3ByaWNlJywgYXN5bmNIYW5kbGVyKGhhbmRsZXJzLmdldFByaWNlQXN5bmMuYmluZChoYW5kbGVycykpKTtcbiAgICByb3V0ZXIuZ2V0KCcvcXVvdGUnLCBhc3luY0hhbmRsZXIoaGFuZGxlcnMuZ2V0UXVvdGVBc3luYy5iaW5kKGhhbmRsZXJzKSkpO1xuICAgIHJvdXRlci5nZXQoJy9zdGF0dXMvOmhhc2gnLCBhc3luY0hhbmRsZXIoaGFuZGxlcnMuZ2V0U3RhdHVzQXN5bmMuYmluZChoYW5kbGVycykpKTtcbiAgICByb3V0ZXIucG9zdCgnL3N1Ym1pdCcsIGFzeW5jSGFuZGxlcihoYW5kbGVycy5wcm9jZXNzU3VibWl0QXN5bmMuYmluZChoYW5kbGVycykpKTtcblxuICAgIHJldHVybiByb3V0ZXI7XG59XG4iXSwidmVyc2lvbiI6M30=