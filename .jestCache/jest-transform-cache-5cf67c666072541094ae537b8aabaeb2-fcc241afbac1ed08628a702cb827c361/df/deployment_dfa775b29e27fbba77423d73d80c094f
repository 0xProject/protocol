f15918c8c877f9388e6a8c4381aef1a1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupDependenciesAsync = void 0;
const child_process_1 = require("child_process");
const path = require("path");
const constants_1 = require("../../src/core/constants");
const initDbDataSourceAsync_1 = require("./initDbDataSourceAsync");
// depends on a `docker-compose.yml` existing in the api root directory
const dockerComposeFilename = 'docker-compose.yml';
/**
 * Sets up 0x-api's dependencies
 *
 * @param services An array of services to start
 * @returns A function handle which will tear down the dependencies when called
 */
async function setupDependenciesAsync(services) {
    if (services.length === 0) {
        throw new Error('Pick at least one service to start');
    }
    const configFilePath = path.resolve(__dirname, '../../', dockerComposeFilename);
    /**
     * Only starts the services specified in `services`.
     */
    const up = (0, child_process_1.spawn)(`docker-compose`, ['-f', configFilePath, 'up', ...services], {});
    await waitForDependencyStartupAsync(up, services);
    if (services.includes('postgres')) {
        await confirmPostgresConnectivityAsync();
    }
    // Return the function handle which will shutdown the services
    return function closeFunction() {
        const wasSuccessfulKill = up.kill();
        return wasSuccessfulKill;
    };
}
exports.setupDependenciesAsync = setupDependenciesAsync;
/**
 * Monitor the logs being emitted from the docker containers to detect
 * when services have started up. Postgres startup is managed with
 * `confirmPostgresConnectivityAsync`
 */
async function waitForDependencyStartupAsync(logStream, services) {
    return new Promise((resolve, reject) => {
        const startupTimeout = constants_1.ONE_MINUTE_MS * 3; // tslint:disable-line custom-no-magic-numbers
        const timeoutHandle = setTimeout(() => {
            reject(new Error(`Timed out waiting for dependency logs\n${JSON.stringify(isServiceStarted)}`));
        }, startupTimeout);
        const startupRegexSqs = /.*sqs.*listening on port \d{4}/;
        const startupRegexRedis = /.*redis.*Ready to accept connections/;
        const startupRegexGananche = /.*ganache.*Listening on 0.0.0.0:\d{4}/;
        const isServiceStarted = {
            sqs: !services.includes('sqs'),
            postgres: true,
            redis: !services.includes('redis'),
            ganache: !services.includes('ganache'),
        };
        logStream.on('error', (error) => {
            reject(`Stream closed with error: ${error}`);
        });
        logStream.stdout.on('data', (data) => {
            const log = data.toString();
            if (startupRegexRedis.test(log)) {
                isServiceStarted.redis = true;
            }
            if (startupRegexSqs.test(log)) {
                isServiceStarted.sqs = true;
            }
            if (startupRegexGananche.test(log)) {
                isServiceStarted.ganache = true;
            }
            // Once all the services are started, resolve the promise
            if (Object.values(isServiceStarted).every((v) => v)) {
                // logStream.stdout.removeAllListeners('data');
                // logStream.removeAllListeners('error');
                clearTimeout(timeoutHandle);
                resolve();
            }
        });
    });
}
// $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
async function confirmPostgresConnectivityAsync(maxTries = 5) {
    try {
        await Promise.all([
            // delay before retrying
            new Promise((resolve) => setTimeout(resolve, 2000)),
            async () => {
                await (0, initDbDataSourceAsync_1.initDbDataSourceAsync)();
            },
        ]);
        return;
    }
    catch (e) {
        if (maxTries > 0) {
            await confirmPostgresConnectivityAsync(maxTries - 1);
        }
        else {
            throw e;
        }
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,