{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/dummy_mm_handler.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/handlers/dummy_mm_handler.ts"],"sourcesContent":["// tslint:disable:max-file-line-count\n// tslint:disable: custom-no-magic-numbers\n// tslint:disable: prefer-function-over-method\nimport { getContractAddressesForChainOrThrow } from '@0x/contract-addresses';\nimport { ethSignHashWithKey, OtcOrder, RfqOrder, Signature } from '@0x/protocol-utils';\nimport { BigNumber } from '@0x/utils';\nimport { Wallet } from 'ethers';\nimport * as express from 'express';\nimport * as HttpStatus from 'http-status-codes';\n\nimport { ONE_MINUTE_MS, ONE_SECOND_MS } from '../core/constants';\nimport { Fee, QuoteServerPriceParams } from '../core/types';\nimport { SubmitRequest } from '../quote-server/types';\nimport { stringsToOtcOrderFields, stringsToSignature } from '../utils/rfqm_request_utils';\n\nconst WETH_ROPSTEN = '0xc778417e063141139fce010982780140aa0cd5ab';\nconst TTA_ROPSTEN = '0x374a16f5e686c09b0cc9e8bc3466b3b645c74aa7';\nconst TTB_ROPSTEN = '0xf84830b73b2ed3c7267e7638f500110ea47fdf30';\n\nconst WMATIC_POLYGON = '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270';\nconst DAI_POLYGON = '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063';\nconst USDC_POLYGON = '0x2791bca1f2de4661ed88a30c99a7a9449aa84174';\nconst USDT_POLYGON = '0xc2132d05d31c914a87c6611c10748aeb04b58e8f';\n\nconst RFQ1_MUMBAI = '0xbea1bca733a6f58c363d9eccfc62a806fa1afee7';\nconst RFQ2_MUMBAI = '0x72115b83bb0dc128785f3a66ad7d2dc484852d0c';\nconst RFQ3_MUMBAI = '0xb0a53dd97d672486f35787d23dc285a621537f21';\n\nconst MM_PRIVATE_KEY =\n    process.env.MM_PRIVATE_KEY || '0xf0d8f376ca991256ddb256fb7cd28d68d971b07f5c0cf62cf0294c1ff8078a90';\nconst MM_ADDRESS = new Wallet(MM_PRIVATE_KEY).address;\n\nconst ROPSTEN_CHAIN_ID = 3;\nconst POLYGON_CHAIN_ID = 137;\nconst MUMBAI_CHAIN_ID = 80001;\n\nconst RFQT_NONCE_BUCKET = 0;\n\nconst tokenToDecimals: Record<string, number> = {\n    [WETH_ROPSTEN]: 18,\n    [TTA_ROPSTEN]: 18,\n    [TTB_ROPSTEN]: 18,\n    [WMATIC_POLYGON]: 18,\n    [DAI_POLYGON]: 18,\n    [USDC_POLYGON]: 6,\n    [USDT_POLYGON]: 6,\n    [RFQ1_MUMBAI]: 18,\n    [RFQ2_MUMBAI]: 18,\n    [RFQ3_MUMBAI]: 18,\n};\n\nconst whitelistedIntegrators = new Set([\n    '74188355-c85b-4f18-9de4-6dec3ec61b8d', // RH\n    '301e83b5-61f4-409b-bc61-8886dd56189d', // RH Testnets\n    '1c016c87-3128-4f78-b0f5-e90038d165ef', // 0x RFQ\n    '83b02232-83ca-4e1e-af5d-46c563d6688e', // RFQ Load Tester\n    '37f254d7-8fcf-4e97-ab6b-060364c0eaf5', // Simbot\n]);\n\n/**\n * This class implements handlers that are used to satisfy the MM Quote Server spec\n */\nexport class DummyMMHandlers {\n    private readonly _tokenSetByChainId: Map<number | undefined, Set<string>>;\n\n    private static _parseQuoteRequest(req: express.Request): QuoteServerPriceParams & { integratorId?: string } {\n        const {\n            sellTokenAddress,\n            buyTokenAddress,\n            takerAddress,\n            sellAmountBaseUnits,\n            buyAmountBaseUnits,\n            txOrigin,\n            isLastLook,\n            feeToken,\n            feeAmount,\n            feeType,\n            chainId,\n        } = req.query;\n\n        const integratorId = req.headers['0x-integrator-id'];\n\n        const isSelling = sellAmountBaseUnits !== undefined;\n\n        const BASE_REQUEST = {\n            sellTokenAddress: sellTokenAddress as string,\n            buyTokenAddress: buyTokenAddress as string,\n            takerAddress: takerAddress as string,\n            txOrigin: txOrigin as string,\n            isLastLook: isLastLook as string,\n            feeToken: feeToken as string,\n            feeAmount: feeAmount as string,\n            feeType: feeType as string,\n            chainId: chainId as string,\n            integratorId: integratorId as string,\n        };\n\n        if (isSelling) {\n            return {\n                ...BASE_REQUEST,\n                sellAmountBaseUnits: sellAmountBaseUnits as string,\n            };\n        } else {\n            return {\n                ...BASE_REQUEST,\n                buyAmountBaseUnits: buyAmountBaseUnits as string,\n            };\n        }\n    }\n\n    private static _parseSubmitRequest(\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        req: express.Request<{}, {}, Record<keyof SubmitRequest, string>>,\n    ): SubmitRequest {\n        const { order, orderHash, fee, takerTokenFillAmount } = req.body;\n\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const rawOrder = order as any;\n        const rfqOrder = new RfqOrder({\n            txOrigin: rawOrder.txOrigin,\n            expiry: new BigNumber(rawOrder.expiry),\n            pool: rawOrder.pool,\n            salt: new BigNumber(rawOrder.salt),\n            makerToken: rawOrder.makerToken,\n            takerToken: rawOrder.takerToken,\n            makerAmount: new BigNumber(rawOrder.makerAmount),\n            takerAmount: new BigNumber(rawOrder.takerAmount),\n            maker: rawOrder.maker,\n            taker: rawOrder.taker,\n            chainId: rawOrder.chainId,\n        });\n\n        return {\n            order: rfqOrder,\n            orderHash,\n            fee: fee as unknown as Fee,\n            takerTokenFillAmount: new BigNumber(takerTokenFillAmount),\n        };\n    }\n\n    /**\n     * Parse RFQm sign request.\n     * @param req Incoming sign request.\n     * @returns Parsed RFQm sign request object.\n     */\n    private static _parseSignRfqmRequest(req: express.Request): {\n        feeAmount: string;\n        feeToken: string;\n        order: OtcOrder;\n        orderHash: string;\n        expiry: BigNumber;\n        takerSignature: Signature;\n    } {\n        const {\n            order: orderRaw,\n            orderHash,\n            feeAmount: feeAmountRaw,\n            feeToken: feeTokenRaw,\n            expiry: expiryRaw,\n            takerSignature: takerSignatureRaw,\n        } = req.body;\n\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const order = new OtcOrder(stringsToOtcOrderFields(orderRaw as any));\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const takerSignature = stringsToSignature(takerSignatureRaw as any);\n        const expiry = new BigNumber(expiryRaw as string);\n\n        return {\n            order,\n            orderHash: orderHash as string,\n            feeAmount: feeAmountRaw as string,\n            feeToken: feeTokenRaw as string,\n            takerSignature,\n            expiry,\n        };\n    }\n\n    /**\n     * Parse RFQt sign request.\n     * @param req Incoming sign request.\n     * @returns Parsed RFQt sign request object.\n     */\n    private static _parseSignRfqtRequest(req: express.Request): {\n        feeAmount: string;\n        feeToken: string;\n        order: OtcOrder;\n        orderHash: string;\n        expiry: BigNumber;\n    } {\n        const {\n            order: orderRaw,\n            orderHash,\n            feeAmount: feeAmountRaw,\n            feeToken: feeTokenRaw,\n            expiry: expiryRaw,\n        } = req.body;\n\n        // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const order = new OtcOrder(stringsToOtcOrderFields(orderRaw as any));\n        const expiry = new BigNumber(expiryRaw as string);\n\n        return {\n            order,\n            orderHash: orderHash as string,\n            feeAmount: feeAmountRaw as string,\n            feeToken: feeTokenRaw as string,\n            expiry,\n        };\n    }\n\n    constructor() {\n        this._tokenSetByChainId = new Map<number | undefined, Set<string>>();\n        this._tokenSetByChainId.set(\n            ROPSTEN_CHAIN_ID,\n            new Set([WETH_ROPSTEN.toLocaleLowerCase(), TTA_ROPSTEN.toLowerCase(), TTB_ROPSTEN.toLowerCase()]),\n        );\n        this._tokenSetByChainId.set(\n            POLYGON_CHAIN_ID,\n            new Set([\n                USDC_POLYGON.toLowerCase(),\n                USDT_POLYGON.toLowerCase(),\n                WMATIC_POLYGON.toLowerCase(),\n                DAI_POLYGON.toLowerCase(),\n            ]),\n        );\n        this._tokenSetByChainId.set(\n            MUMBAI_CHAIN_ID,\n            new Set([RFQ1_MUMBAI.toLowerCase(), RFQ2_MUMBAI.toLowerCase(), RFQ3_MUMBAI.toLowerCase()]),\n        );\n    }\n\n    /**\n     * Simple pricing that always returns 1:1 v1 prices\n     */\n    public async getPriceV1Async(req: express.Request, res: express.Response): Promise<void> {\n        const params = DummyMMHandlers._parseQuoteRequest(req);\n        const tokenSet = this._tokenSetByChainId.get(Number(params.chainId));\n        const { sellTokenAddress, buyTokenAddress, sellAmountBaseUnits, buyAmountBaseUnits, integratorId } = params;\n\n        // Check integrator\n        if (!integratorId || !whitelistedIntegrators.has(integratorId)) {\n            res.status(HttpStatus.BAD_REQUEST).send('Invalid integrator id');\n            return;\n        }\n\n        // Check tokens\n        if (\n            !tokenSet ||\n            !tokenSet.has(sellTokenAddress.toLowerCase()) ||\n            !tokenSet.has(buyTokenAddress.toLowerCase())\n        ) {\n            res.status(HttpStatus.NO_CONTENT).send({});\n            return;\n        }\n\n        // Get amount (direction doesn't matter because price is always 1:1)\n        const isSelling = sellAmountBaseUnits !== undefined;\n        const rawAmount = (isSelling ? sellAmountBaseUnits : buyAmountBaseUnits) as string;\n        const amount = new BigNumber(rawAmount);\n\n        // Tokens\n        const takerToken = sellTokenAddress as string;\n        const makerToken = buyTokenAddress as string;\n\n        // Expiry\n        const now = new BigNumber(Date.now());\n        const fiveMinLater = now.plus(new BigNumber(5).times(ONE_MINUTE_MS)).div(ONE_SECOND_MS).integerValue();\n\n        const indicativeQuote = {\n            expiry: fiveMinLater.toString(),\n            makerToken,\n            takerToken,\n            makerAmount: amount.toString(),\n            takerAmount: amount.toString(),\n        };\n        res.status(HttpStatus.OK).send(indicativeQuote);\n        return;\n    }\n\n    /**\n     * Simple pricing that always returns 1:1 v2 prices\n     */\n    public async getPriceV2Async(req: express.Request, res: express.Response): Promise<void> {\n        const params = DummyMMHandlers._parseQuoteRequest(req);\n        const tokenSet = this._tokenSetByChainId.get(Number(params.chainId));\n        const { sellTokenAddress, buyTokenAddress, sellAmountBaseUnits, buyAmountBaseUnits, integratorId } = params;\n\n        // Check integrator\n        if (!integratorId || !whitelistedIntegrators.has(integratorId)) {\n            res.status(HttpStatus.BAD_REQUEST).send('Invalid integrator id');\n            return;\n        }\n\n        // Check tokens\n        if (\n            !tokenSet ||\n            !tokenSet.has(sellTokenAddress.toLowerCase()) ||\n            !tokenSet.has(buyTokenAddress.toLowerCase())\n        ) {\n            res.status(HttpStatus.NO_CONTENT).send({});\n            return;\n        }\n\n        // Get amount (direction doesn't matter because price is always 1:1)\n        const isSelling = sellAmountBaseUnits !== undefined;\n        const rawAmount = (isSelling ? sellAmountBaseUnits : buyAmountBaseUnits) as string;\n        const amount = new BigNumber(rawAmount);\n\n        // Tokens\n        const takerToken = sellTokenAddress as string;\n        const makerToken = buyTokenAddress as string;\n\n        // Expiry\n        const now = new BigNumber(Date.now());\n        const fiveMinLater = now.plus(new BigNumber(5).times(ONE_MINUTE_MS)).div(ONE_SECOND_MS).integerValue();\n\n        const indicativeQuote = {\n            expiry: fiveMinLater.toString(),\n            makerToken,\n            takerToken,\n            makerAmount: amount.toString(),\n            takerAmount: amount.toString(),\n            maker: MM_ADDRESS,\n        };\n        res.status(HttpStatus.OK).send(indicativeQuote);\n        return;\n    }\n\n    /**\n     * Simple quoting that always signs an order 1:1 for RFQM v1\n     */\n    public async getQuoteV1Async(req: express.Request, res: express.Response): Promise<void> {\n        const params = DummyMMHandlers._parseQuoteRequest(req);\n        const tokenSet = this._tokenSetByChainId.get(Number(params.chainId));\n        const {\n            sellTokenAddress,\n            buyTokenAddress,\n            sellAmountBaseUnits,\n            buyAmountBaseUnits,\n            txOrigin,\n            takerAddress,\n            integratorId,\n        } = params;\n\n        // Check integrator\n        if (!integratorId || !whitelistedIntegrators.has(integratorId)) {\n            res.status(HttpStatus.BAD_REQUEST).send('Invalid integrator id');\n            return;\n        }\n\n        // Check tokens\n        if (\n            !tokenSet ||\n            !tokenSet.has(sellTokenAddress.toLowerCase()) ||\n            !tokenSet.has(buyTokenAddress.toLowerCase())\n        ) {\n            res.status(HttpStatus.NO_CONTENT).send({});\n            return;\n        }\n\n        // Get amount (direction doesn't matter because price is always 1:1)\n        const isSelling = sellAmountBaseUnits !== undefined;\n        const rawAmount = (isSelling ? sellAmountBaseUnits : buyAmountBaseUnits) as string;\n        const amount = new BigNumber(rawAmount);\n\n        // Tokens\n        const takerToken = sellTokenAddress as string;\n        const makerToken = buyTokenAddress as string;\n\n        // Enforce a 5 unit maximum\n        const oneUnit = 10 ** tokenToDecimals[takerToken];\n        const fiveUnits = oneUnit * 5;\n        if (amount.gt(fiveUnits)) {\n            res.status(HttpStatus.NO_CONTENT).send({});\n            return;\n        }\n\n        // Expiry\n        const now = new BigNumber(Date.now());\n        const fiveMinLater = now.plus(new BigNumber(5).times(ONE_MINUTE_MS)).div(ONE_SECOND_MS).integerValue();\n\n        const rfqOrder = new RfqOrder({\n            txOrigin,\n            taker: takerAddress,\n            maker: MM_ADDRESS,\n            takerToken,\n            makerToken,\n            makerAmount: new BigNumber(amount.toString()),\n            takerAmount: new BigNumber(amount.toString()),\n            expiry: fiveMinLater,\n            chainId: Number(params.chainId),\n            salt: now,\n        });\n\n        const orderHash = rfqOrder.getHash();\n        const signature = ethSignHashWithKey(orderHash, MM_PRIVATE_KEY);\n\n        const firmQuote = {\n            signedOrder: {\n                ...rfqOrder,\n                signature,\n            },\n        };\n        res.status(HttpStatus.OK).send(firmQuote);\n        return;\n    }\n\n    /**\n     * Simple quoting for RFQt v2 that signs even taker amounts, but refuses to sign odd taker amounts, ignoring decimals.\n     * The max trading size is 2 tokens.\n     *\n     * Example for WETH:\n     * - 1.000_000_000_000_000_000 is considered odd!\n     * - 2.000_000_000_000_000_001 is considered even!\n     */\n    public async getQuoteRfqtV2Async(req: express.Request, res: express.Response): Promise<void> {\n        const params = DummyMMHandlers._parseQuoteRequest(req);\n        const chainId = Number(params.chainId);\n        const tokenSet = this._tokenSetByChainId.get(chainId);\n        const {\n            sellTokenAddress,\n            buyTokenAddress,\n            sellAmountBaseUnits,\n            buyAmountBaseUnits,\n            txOrigin,\n            takerAddress,\n            integratorId,\n            feeAmount,\n        } = params;\n\n        // Check integrator\n        if (!integratorId || !whitelistedIntegrators.has(integratorId)) {\n            res.status(HttpStatus.BAD_REQUEST).send('Invalid integrator id');\n            return;\n        }\n\n        // Check tokens\n        if (\n            !tokenSet ||\n            !tokenSet.has(sellTokenAddress.toLowerCase()) ||\n            !tokenSet.has(buyTokenAddress.toLowerCase())\n        ) {\n            res.status(HttpStatus.NO_CONTENT).send(`No liquidity for ${sellTokenAddress}:${buyTokenAddress}`);\n            return;\n        }\n\n        // Get amount (direction doesn't matter because price is always 1:1)\n        const isSelling = sellAmountBaseUnits !== undefined;\n        const rawAmount = (isSelling ? sellAmountBaseUnits : buyAmountBaseUnits) as string;\n        const amount = new BigNumber(rawAmount);\n\n        // Tokens\n        const takerToken = sellTokenAddress as string;\n        const makerToken = buyTokenAddress as string;\n\n        const decimals = tokenToDecimals[takerToken];\n        // Enforce a 2 units maximum for trading\n        const oneUnit = 10 ** decimals;\n        if (amount.gt(oneUnit * 2)) {\n            res.status(HttpStatus.NO_CONTENT).send('Trading limit for buy/sell tokens should not exceed 2');\n            return;\n        }\n\n        const isEven = amount\n            .div(10 ** decimals)\n            .integerValue()\n            .mod(2)\n            .eq(0);\n\n        // Reject\n        if (!isEven) {\n            res.status(HttpStatus.NO_CONTENT).send({});\n            return;\n        }\n\n        // Expiry and nonce\n        const now = new BigNumber(Date.now());\n        const expiry = now.plus(new BigNumber(5).times(ONE_MINUTE_MS)).div(ONE_SECOND_MS).integerValue();\n        const nowSeconds = Math.floor(Date.now() / ONE_SECOND_MS);\n\n        // Get Exchange Proxy contract address\n        const exchangeProxyContractAddress: string = getContractAddressesForChainOrThrow(chainId).exchangeProxy;\n\n        const otcOrder = new OtcOrder({\n            txOrigin,\n            expiryAndNonce: OtcOrder.encodeExpiryAndNonce(\n                expiry,\n                new BigNumber(RFQT_NONCE_BUCKET),\n                new BigNumber(nowSeconds),\n            ),\n            takerToken,\n            makerToken,\n            makerAmount: amount,\n            takerAmount: amount,\n            maker: MM_ADDRESS,\n            taker: takerAddress,\n            chainId,\n            verifyingContract: exchangeProxyContractAddress,\n        });\n\n        const orderHash = otcOrder.getHash();\n        const signature = ethSignHashWithKey(orderHash, MM_PRIVATE_KEY);\n        const response = {\n            feeAmount,\n            order: otcOrder,\n            orderHash,\n            makerSignature: signature,\n        };\n\n        res.status(HttpStatus.OK).send(response);\n    }\n\n    /**\n     * Approves even amounts and rejects odd amounts, ignoring decimals\n     *\n     * Example for WETH:\n     * - 1.000_000_000_000_000_000 is considered odd!\n     * - 2.000_000_000_000_000_001 is considered even!\n     */\n    public async submitAsync(req: express.Request, res: express.Response): Promise<void> {\n        const requestParams = DummyMMHandlers._parseSubmitRequest(req);\n        const { order, fee, orderHash, takerTokenFillAmount } = requestParams;\n        const decimals = tokenToDecimals[order.takerToken];\n\n        const isEven = order.takerAmount\n            .div(10 ** decimals)\n            .integerValue()\n            .mod(2)\n            .eq(0);\n        const response = {\n            fee,\n            proceedWithFill: isEven,\n            signedOrderHash: orderHash,\n            takerTokenFillAmount: takerTokenFillAmount.toString(),\n        };\n\n        res.status(HttpStatus.OK).send(response);\n    }\n\n    /**\n     * Approves even amounts and rejects odd amounts, ignoring decimals\n     *\n     * Example for WETH:\n     * - 1.000_000_000_000_000_000 is considered odd!\n     * - 2.000_000_000_000_000_001 is considered even!\n     */\n    public async signRfqmV2Async(req: express.Request, res: express.Response): Promise<void> {\n        const requestParams = DummyMMHandlers._parseSignRfqmRequest(req);\n        const { order, feeAmount, orderHash } = requestParams;\n        const decimals = tokenToDecimals[order.takerToken];\n\n        const isEven = order.takerAmount\n            .div(10 ** decimals)\n            .integerValue()\n            .mod(2)\n            .eq(0);\n\n        // Reject\n        if (!isEven) {\n            res.status(HttpStatus.OK).send({\n                proceedWithFill: false,\n            });\n            return;\n        }\n\n        // Accept and sign\n        const signature = ethSignHashWithKey(orderHash, MM_PRIVATE_KEY);\n        const response = {\n            feeAmount,\n            proceedWithFill: isEven,\n            makerSignature: signature,\n        };\n\n        res.status(HttpStatus.OK).send(response);\n    }\n\n    /**\n     * Signs for even taker amounts, but refuses odd taker amounts, ignoring decimals. The logic is very similar to\n     * `signRfqmV2Async` for consistency.\n     *\n     * Example for WETH:\n     * - 1.000_000_000_000_000_000 is considered odd!\n     * - 2.000_000_000_000_000_001 is considered even!\n     */\n    public async signRfqtV2Async(req: express.Request, res: express.Response): Promise<void> {\n        const requestParams = DummyMMHandlers._parseSignRfqtRequest(req);\n        const { order, feeAmount, orderHash: orderHashParam } = requestParams;\n        const orderHash = order.getHash();\n        const tokenSet = this._tokenSetByChainId.get(Number(requestParams.order.chainId));\n\n        // Check order hash computed from order is the same as order hash in query param\n        if (orderHash !== orderHashParam) {\n            res.status(HttpStatus.BAD_REQUEST).send(\n                `orderHash query param provided ${orderHashParam} is not equal to the actual order hash ${orderHash}`,\n            );\n            return;\n        }\n\n        // Check tokens\n        if (\n            !tokenSet ||\n            !tokenSet.has(order.makerToken.toLowerCase()) ||\n            !tokenSet.has(order.takerToken.toLowerCase())\n        ) {\n            res.status(HttpStatus.NO_CONTENT).send(`No liquidity for ${order.makerToken}:${order.takerToken}`);\n            return;\n        }\n\n        const decimals = tokenToDecimals[order.takerToken];\n        const isEven = order.takerAmount\n            .div(10 ** decimals)\n            .integerValue()\n            .mod(2)\n            .eq(0);\n\n        // Reject\n        if (!isEven) {\n            res.status(HttpStatus.NO_CONTENT).send({});\n            return;\n        }\n\n        // Refuse to sign\n        const signature = ethSignHashWithKey(orderHash, MM_PRIVATE_KEY);\n        const response = {\n            feeAmount,\n            makerSignature: signature,\n        };\n\n        res.status(HttpStatus.OK).send(response);\n    }\n}\n"],"version":3}