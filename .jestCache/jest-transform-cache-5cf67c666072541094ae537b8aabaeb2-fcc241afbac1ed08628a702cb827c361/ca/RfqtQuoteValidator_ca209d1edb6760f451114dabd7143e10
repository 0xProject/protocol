671b930e391e21e99baec26b6d1a730a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRfqtV2FillableAmounts = exports.validateV2Prices = void 0;
const utils_1 = require("@0x/utils");
const prom_client_1 = require("prom-client");
const constants_1 = require("../core/constants");
const logger_1 = require("../logger");
const ORDER_FULLY_FILLABLE = new prom_client_1.Counter({
    name: 'rfqt_order_fully_fillable',
    help: 'Number of fully fillable rfqt orders',
    labelNames: ['chainId', 'makerUri'],
});
const ORDER_PARTIALLY_FILLABLE = new prom_client_1.Counter({
    name: 'rfqt_order_partially_fillable',
    help: 'Number of partially fillable rfqt orders',
    labelNames: ['chainId', 'makerUri'],
});
const ORDER_NOT_FILLABLE = new prom_client_1.Counter({
    name: 'rfqt_order_not_fillable',
    help: 'Number of rfqt orders that are not fillable',
    labelNames: ['chainId', 'makerUri'],
});
/**
 * Performs basic validation on fetched prices from Market Makers.
 *
 * Filters prices that:
 * - are for the wrong pair
 * - expire in less than the validity window
 *
 * @param prices Prices fetched from Market Makers
 * @returns Array of valid prices
 */
function validateV2Prices(prices, quoteContext, validityWindowMs, now = new Date()) {
    // calculate minimum expiry threshold
    const nowSeconds = new utils_1.BigNumber(now.getTime()).div(constants_1.ONE_SECOND_MS);
    const validityWindowS = new utils_1.BigNumber(validityWindowMs).div(constants_1.ONE_SECOND_MS);
    const expiryThreshold = nowSeconds.plus(validityWindowS);
    return prices
        .filter((price) => price.makerToken === quoteContext.makerToken && price.takerToken === quoteContext.takerToken)
        .filter((price) => price.expiry.gte(expiryThreshold));
}
exports.validateV2Prices = validateV2Prices;
/**
 * Calculates fillable amounts based on the amount of assets Market Makers can provide for the trading pair.
 * If the maker has enough balance, return full amounts originally requested from the order.
 * If not, scale down fillable taker amount based on maker balance.
 *
 * @param prices Prices fetched from Market Makers
 * @param chainId Chain ID of fetched prices
 * @param quotedMakerBalances Array of cached market maker balances
 * @returns Array of maker and taker fillable amounts
 */
function getRfqtV2FillableAmounts(prices, chainId, quotedMakerBalances) {
    // if no maker balances are present, assume all orders are fully fillable
    if (!quotedMakerBalances) {
        return prices.map((price) => ({
            fillableMakerAmount: price.makerAmount,
            fillableTakerAmount: price.takerAmount,
        }));
    }
    return prices.map((price, i) => {
        // if requested maker amount is zero, order is not fillable
        if (price.makerAmount.lte(0)) {
            ORDER_NOT_FILLABLE.inc({
                chainId,
                makerUri: price.makerUri,
            });
            logger_1.logger.warn({ price }, 'Market maker provided an empty order');
            return {
                fillableMakerAmount: new utils_1.BigNumber(0),
                fillableTakerAmount: new utils_1.BigNumber(0),
            };
        }
        const makerBalance = quotedMakerBalances[i];
        // quote is fully fillable
        if (makerBalance.gte(price.makerAmount)) {
            ORDER_FULLY_FILLABLE.inc({
                chainId,
                makerUri: price.makerUri,
            });
            return {
                fillableMakerAmount: price.makerAmount,
                fillableTakerAmount: price.takerAmount,
            };
        }
        // order may be partially fillable
        // scale down fillable taker amount according to available maker balance
        const partialFillableTakerAmount = price.takerAmount.times(makerBalance).idiv(price.makerAmount);
        ORDER_PARTIALLY_FILLABLE.inc({
            chainId,
            makerUri: price.makerUri,
        });
        logger_1.logger.warn({
            price,
            makerAmount: price.makerAmount,
            makerBalance,
            takerAmount: price.takerAmount,
            partialFillableTakerAmount,
        }, 'Market maker can only partially cover an order');
        return {
            fillableMakerAmount: makerBalance,
            fillableTakerAmount: partialFillableTakerAmount,
        };
    });
}
exports.getRfqtV2FillableAmounts = getRfqtV2FillableAmounts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9SZnF0UXVvdGVWYWxpZGF0b3IudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQXNDO0FBQ3RDLDZDQUFzQztBQUV0QyxpREFBa0Q7QUFDbEQsc0NBQW1DO0FBSW5DLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxxQkFBTyxDQUFDO0lBQ3JDLElBQUksRUFBRSwyQkFBMkI7SUFDakMsSUFBSSxFQUFFLHNDQUFzQztJQUM1QyxVQUFVLEVBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDO0NBQ3RDLENBQUMsQ0FBQztBQUNILE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxxQkFBTyxDQUFDO0lBQ3pDLElBQUksRUFBRSwrQkFBK0I7SUFDckMsSUFBSSxFQUFFLDBDQUEwQztJQUNoRCxVQUFVLEVBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDO0NBQ3RDLENBQUMsQ0FBQztBQUNILE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxxQkFBTyxDQUFDO0lBQ25DLElBQUksRUFBRSx5QkFBeUI7SUFDL0IsSUFBSSxFQUFFLDZDQUE2QztJQUNuRCxVQUFVLEVBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDO0NBQ3RDLENBQUMsQ0FBQztBQUVIOzs7Ozs7Ozs7R0FTRztBQUNILFNBQWdCLGdCQUFnQixDQUM1QixNQUFxQixFQUNyQixZQUEwQixFQUMxQixnQkFBd0IsRUFDeEIsTUFBWSxJQUFJLElBQUksRUFBRTtJQUV0QixxQ0FBcUM7SUFDckMsTUFBTSxVQUFVLEdBQUcsSUFBSSxpQkFBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyx5QkFBYSxDQUFDLENBQUM7SUFDbkUsTUFBTSxlQUFlLEdBQUcsSUFBSSxpQkFBUyxDQUFDLGdCQUFnQixDQUFDLENBQUMsR0FBRyxDQUFDLHlCQUFhLENBQUMsQ0FBQztJQUMzRSxNQUFNLGVBQWUsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRXpELE9BQU8sTUFBTTtTQUNSLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsS0FBSyxZQUFZLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssWUFBWSxDQUFDLFVBQVUsQ0FBQztTQUMvRyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7QUFDOUQsQ0FBQztBQWRELDRDQWNDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsU0FBZ0Isd0JBQXdCLENBQ3BDLE1BQXFCLEVBQ3JCLE9BQWUsRUFDZixtQkFBaUM7SUFFakMseUVBQXlFO0lBQ3pFLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtRQUN0QixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDMUIsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDdEMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLFdBQVc7U0FDekMsQ0FBQyxDQUFDLENBQUM7S0FDUDtJQUVELE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMzQiwyREFBMkQ7UUFDM0QsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUMxQixrQkFBa0IsQ0FBQyxHQUFHLENBQUM7Z0JBQ25CLE9BQU87Z0JBQ1AsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO2FBQzNCLENBQUMsQ0FBQztZQUNILGVBQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxzQ0FBc0MsQ0FBQyxDQUFDO1lBQy9ELE9BQU87Z0JBQ0gsbUJBQW1CLEVBQUUsSUFBSSxpQkFBUyxDQUFDLENBQUMsQ0FBQztnQkFDckMsbUJBQW1CLEVBQUUsSUFBSSxpQkFBUyxDQUFDLENBQUMsQ0FBQzthQUN4QyxDQUFDO1NBQ0w7UUFFRCxNQUFNLFlBQVksR0FBYyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV2RCwwQkFBMEI7UUFDMUIsSUFBSSxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUNyQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUM7Z0JBQ3JCLE9BQU87Z0JBQ1AsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO2FBQzNCLENBQUMsQ0FBQztZQUNILE9BQU87Z0JBQ0gsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLFdBQVc7Z0JBQ3RDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxXQUFXO2FBQ3pDLENBQUM7U0FDTDtRQUVELGtDQUFrQztRQUNsQyx3RUFBd0U7UUFDeEUsTUFBTSwwQkFBMEIsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pHLHdCQUF3QixDQUFDLEdBQUcsQ0FBQztZQUN6QixPQUFPO1lBQ1AsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1NBQzNCLENBQUMsQ0FBQztRQUNILGVBQU0sQ0FBQyxJQUFJLENBQ1A7WUFDSSxLQUFLO1lBQ0wsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFlBQVk7WUFDWixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsMEJBQTBCO1NBQzdCLEVBQ0QsZ0RBQWdELENBQ25ELENBQUM7UUFDRixPQUFPO1lBQ0gsbUJBQW1CLEVBQUUsWUFBWTtZQUNqQyxtQkFBbUIsRUFBRSwwQkFBMEI7U0FDbEQsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQS9ERCw0REErREMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3NyYy91dGlscy9SZnF0UXVvdGVWYWxpZGF0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnQDB4L3V0aWxzJztcbmltcG9ydCB7IENvdW50ZXIgfSBmcm9tICdwcm9tLWNsaWVudCc7XG5cbmltcG9ydCB7IE9ORV9TRUNPTkRfTVMgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgUXVvdGVDb250ZXh0IH0gZnJvbSAnLi4vc2VydmljZXMvdHlwZXMnO1xuaW1wb3J0IHsgUmZxdFYyUHJpY2UgfSBmcm9tICcuLi9jb3JlL3R5cGVzJztcblxuY29uc3QgT1JERVJfRlVMTFlfRklMTEFCTEUgPSBuZXcgQ291bnRlcih7XG4gICAgbmFtZTogJ3JmcXRfb3JkZXJfZnVsbHlfZmlsbGFibGUnLFxuICAgIGhlbHA6ICdOdW1iZXIgb2YgZnVsbHkgZmlsbGFibGUgcmZxdCBvcmRlcnMnLFxuICAgIGxhYmVsTmFtZXM6IFsnY2hhaW5JZCcsICdtYWtlclVyaSddLFxufSk7XG5jb25zdCBPUkRFUl9QQVJUSUFMTFlfRklMTEFCTEUgPSBuZXcgQ291bnRlcih7XG4gICAgbmFtZTogJ3JmcXRfb3JkZXJfcGFydGlhbGx5X2ZpbGxhYmxlJyxcbiAgICBoZWxwOiAnTnVtYmVyIG9mIHBhcnRpYWxseSBmaWxsYWJsZSByZnF0IG9yZGVycycsXG4gICAgbGFiZWxOYW1lczogWydjaGFpbklkJywgJ21ha2VyVXJpJ10sXG59KTtcbmNvbnN0IE9SREVSX05PVF9GSUxMQUJMRSA9IG5ldyBDb3VudGVyKHtcbiAgICBuYW1lOiAncmZxdF9vcmRlcl9ub3RfZmlsbGFibGUnLFxuICAgIGhlbHA6ICdOdW1iZXIgb2YgcmZxdCBvcmRlcnMgdGhhdCBhcmUgbm90IGZpbGxhYmxlJyxcbiAgICBsYWJlbE5hbWVzOiBbJ2NoYWluSWQnLCAnbWFrZXJVcmknXSxcbn0pO1xuXG4vKipcbiAqIFBlcmZvcm1zIGJhc2ljIHZhbGlkYXRpb24gb24gZmV0Y2hlZCBwcmljZXMgZnJvbSBNYXJrZXQgTWFrZXJzLlxuICpcbiAqIEZpbHRlcnMgcHJpY2VzIHRoYXQ6XG4gKiAtIGFyZSBmb3IgdGhlIHdyb25nIHBhaXJcbiAqIC0gZXhwaXJlIGluIGxlc3MgdGhhbiB0aGUgdmFsaWRpdHkgd2luZG93XG4gKlxuICogQHBhcmFtIHByaWNlcyBQcmljZXMgZmV0Y2hlZCBmcm9tIE1hcmtldCBNYWtlcnNcbiAqIEByZXR1cm5zIEFycmF5IG9mIHZhbGlkIHByaWNlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVWMlByaWNlcyhcbiAgICBwcmljZXM6IFJmcXRWMlByaWNlW10sXG4gICAgcXVvdGVDb250ZXh0OiBRdW90ZUNvbnRleHQsXG4gICAgdmFsaWRpdHlXaW5kb3dNczogbnVtYmVyLFxuICAgIG5vdzogRGF0ZSA9IG5ldyBEYXRlKCksXG4pOiBSZnF0VjJQcmljZVtdIHtcbiAgICAvLyBjYWxjdWxhdGUgbWluaW11bSBleHBpcnkgdGhyZXNob2xkXG4gICAgY29uc3Qgbm93U2Vjb25kcyA9IG5ldyBCaWdOdW1iZXIobm93LmdldFRpbWUoKSkuZGl2KE9ORV9TRUNPTkRfTVMpO1xuICAgIGNvbnN0IHZhbGlkaXR5V2luZG93UyA9IG5ldyBCaWdOdW1iZXIodmFsaWRpdHlXaW5kb3dNcykuZGl2KE9ORV9TRUNPTkRfTVMpO1xuICAgIGNvbnN0IGV4cGlyeVRocmVzaG9sZCA9IG5vd1NlY29uZHMucGx1cyh2YWxpZGl0eVdpbmRvd1MpO1xuXG4gICAgcmV0dXJuIHByaWNlc1xuICAgICAgICAuZmlsdGVyKChwcmljZSkgPT4gcHJpY2UubWFrZXJUb2tlbiA9PT0gcXVvdGVDb250ZXh0Lm1ha2VyVG9rZW4gJiYgcHJpY2UudGFrZXJUb2tlbiA9PT0gcXVvdGVDb250ZXh0LnRha2VyVG9rZW4pXG4gICAgICAgIC5maWx0ZXIoKHByaWNlKSA9PiBwcmljZS5leHBpcnkuZ3RlKGV4cGlyeVRocmVzaG9sZCkpO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgZmlsbGFibGUgYW1vdW50cyBiYXNlZCBvbiB0aGUgYW1vdW50IG9mIGFzc2V0cyBNYXJrZXQgTWFrZXJzIGNhbiBwcm92aWRlIGZvciB0aGUgdHJhZGluZyBwYWlyLlxuICogSWYgdGhlIG1ha2VyIGhhcyBlbm91Z2ggYmFsYW5jZSwgcmV0dXJuIGZ1bGwgYW1vdW50cyBvcmlnaW5hbGx5IHJlcXVlc3RlZCBmcm9tIHRoZSBvcmRlci5cbiAqIElmIG5vdCwgc2NhbGUgZG93biBmaWxsYWJsZSB0YWtlciBhbW91bnQgYmFzZWQgb24gbWFrZXIgYmFsYW5jZS5cbiAqXG4gKiBAcGFyYW0gcHJpY2VzIFByaWNlcyBmZXRjaGVkIGZyb20gTWFya2V0IE1ha2Vyc1xuICogQHBhcmFtIGNoYWluSWQgQ2hhaW4gSUQgb2YgZmV0Y2hlZCBwcmljZXNcbiAqIEBwYXJhbSBxdW90ZWRNYWtlckJhbGFuY2VzIEFycmF5IG9mIGNhY2hlZCBtYXJrZXQgbWFrZXIgYmFsYW5jZXNcbiAqIEByZXR1cm5zIEFycmF5IG9mIG1ha2VyIGFuZCB0YWtlciBmaWxsYWJsZSBhbW91bnRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZnF0VjJGaWxsYWJsZUFtb3VudHMoXG4gICAgcHJpY2VzOiBSZnF0VjJQcmljZVtdLFxuICAgIGNoYWluSWQ6IG51bWJlcixcbiAgICBxdW90ZWRNYWtlckJhbGFuY2VzPzogQmlnTnVtYmVyW10sXG4pOiB7IGZpbGxhYmxlTWFrZXJBbW91bnQ6IEJpZ051bWJlcjsgZmlsbGFibGVUYWtlckFtb3VudDogQmlnTnVtYmVyIH1bXSB7XG4gICAgLy8gaWYgbm8gbWFrZXIgYmFsYW5jZXMgYXJlIHByZXNlbnQsIGFzc3VtZSBhbGwgb3JkZXJzIGFyZSBmdWxseSBmaWxsYWJsZVxuICAgIGlmICghcXVvdGVkTWFrZXJCYWxhbmNlcykge1xuICAgICAgICByZXR1cm4gcHJpY2VzLm1hcCgocHJpY2UpID0+ICh7XG4gICAgICAgICAgICBmaWxsYWJsZU1ha2VyQW1vdW50OiBwcmljZS5tYWtlckFtb3VudCxcbiAgICAgICAgICAgIGZpbGxhYmxlVGFrZXJBbW91bnQ6IHByaWNlLnRha2VyQW1vdW50LFxuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByaWNlcy5tYXAoKHByaWNlLCBpKSA9PiB7XG4gICAgICAgIC8vIGlmIHJlcXVlc3RlZCBtYWtlciBhbW91bnQgaXMgemVybywgb3JkZXIgaXMgbm90IGZpbGxhYmxlXG4gICAgICAgIGlmIChwcmljZS5tYWtlckFtb3VudC5sdGUoMCkpIHtcbiAgICAgICAgICAgIE9SREVSX05PVF9GSUxMQUJMRS5pbmMoe1xuICAgICAgICAgICAgICAgIGNoYWluSWQsXG4gICAgICAgICAgICAgICAgbWFrZXJVcmk6IHByaWNlLm1ha2VyVXJpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsb2dnZXIud2Fybih7IHByaWNlIH0sICdNYXJrZXQgbWFrZXIgcHJvdmlkZWQgYW4gZW1wdHkgb3JkZXInKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmlsbGFibGVNYWtlckFtb3VudDogbmV3IEJpZ051bWJlcigwKSxcbiAgICAgICAgICAgICAgICBmaWxsYWJsZVRha2VyQW1vdW50OiBuZXcgQmlnTnVtYmVyKDApLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1ha2VyQmFsYW5jZTogQmlnTnVtYmVyID0gcXVvdGVkTWFrZXJCYWxhbmNlc1tpXTtcblxuICAgICAgICAvLyBxdW90ZSBpcyBmdWxseSBmaWxsYWJsZVxuICAgICAgICBpZiAobWFrZXJCYWxhbmNlLmd0ZShwcmljZS5tYWtlckFtb3VudCkpIHtcbiAgICAgICAgICAgIE9SREVSX0ZVTExZX0ZJTExBQkxFLmluYyh7XG4gICAgICAgICAgICAgICAgY2hhaW5JZCxcbiAgICAgICAgICAgICAgICBtYWtlclVyaTogcHJpY2UubWFrZXJVcmksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmlsbGFibGVNYWtlckFtb3VudDogcHJpY2UubWFrZXJBbW91bnQsXG4gICAgICAgICAgICAgICAgZmlsbGFibGVUYWtlckFtb3VudDogcHJpY2UudGFrZXJBbW91bnQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gb3JkZXIgbWF5IGJlIHBhcnRpYWxseSBmaWxsYWJsZVxuICAgICAgICAvLyBzY2FsZSBkb3duIGZpbGxhYmxlIHRha2VyIGFtb3VudCBhY2NvcmRpbmcgdG8gYXZhaWxhYmxlIG1ha2VyIGJhbGFuY2VcbiAgICAgICAgY29uc3QgcGFydGlhbEZpbGxhYmxlVGFrZXJBbW91bnQgPSBwcmljZS50YWtlckFtb3VudC50aW1lcyhtYWtlckJhbGFuY2UpLmlkaXYocHJpY2UubWFrZXJBbW91bnQpO1xuICAgICAgICBPUkRFUl9QQVJUSUFMTFlfRklMTEFCTEUuaW5jKHtcbiAgICAgICAgICAgIGNoYWluSWQsXG4gICAgICAgICAgICBtYWtlclVyaTogcHJpY2UubWFrZXJVcmksXG4gICAgICAgIH0pO1xuICAgICAgICBsb2dnZXIud2FybihcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwcmljZSxcbiAgICAgICAgICAgICAgICBtYWtlckFtb3VudDogcHJpY2UubWFrZXJBbW91bnQsXG4gICAgICAgICAgICAgICAgbWFrZXJCYWxhbmNlLFxuICAgICAgICAgICAgICAgIHRha2VyQW1vdW50OiBwcmljZS50YWtlckFtb3VudCxcbiAgICAgICAgICAgICAgICBwYXJ0aWFsRmlsbGFibGVUYWtlckFtb3VudCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnTWFya2V0IG1ha2VyIGNhbiBvbmx5IHBhcnRpYWxseSBjb3ZlciBhbiBvcmRlcicsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaWxsYWJsZU1ha2VyQW1vdW50OiBtYWtlckJhbGFuY2UsXG4gICAgICAgICAgICBmaWxsYWJsZVRha2VyQW1vdW50OiBwYXJ0aWFsRmlsbGFibGVUYWtlckFtb3VudCxcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==