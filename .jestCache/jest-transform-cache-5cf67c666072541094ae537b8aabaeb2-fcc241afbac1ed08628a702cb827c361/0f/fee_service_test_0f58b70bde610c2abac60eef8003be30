91e30f675f1100e2a9e6c91611b63e4a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:max-file-line-count
// tslint:disable:custom-no-magic-numbers
const utils_1 = require("@0x/utils");
const ts_mockito_1 = require("ts-mockito");
const config_1 = require("../../src/config");
const constants_1 = require("../../src/core/constants");
const fee_service_1 = require("../../src/services/fee_service");
const config_manager_1 = require("../../src/utils/config_manager");
const GasStationAttendantEthereum_1 = require("../../src/utils/GasStationAttendantEthereum");
const TokenPriceOracle_1 = require("../../src/utils/TokenPriceOracle");
const ZeroExApiClient_1 = require("../../src/utils/ZeroExApiClient");
const feeTokenSymbol = 'fee';
const feeTokenAddress = 'feeTokenAddress';
const feeTokenDecimals = 18;
const buildFeeService = (overrides) => {
    const chainId = (overrides === null || overrides === void 0 ? void 0 : overrides.chainId) || 1337;
    const feeTokenMetadata = (overrides === null || overrides === void 0 ? void 0 : overrides.feeTokenMetadata) || {
        symbol: feeTokenSymbol,
        decimals: feeTokenDecimals,
        tokenAddress: feeTokenAddress,
    };
    const feeModelConfiguration = (overrides === null || overrides === void 0 ? void 0 : overrides.feeModelConfiguration) || config_1.DEFAULT_FEE_MODEL_CONFIGURATION;
    const gasPrice = (overrides === null || overrides === void 0 ? void 0 : overrides.gasPrice) || new utils_1.BigNumber(1e9);
    const tradeTokenPrice = (overrides === null || overrides === void 0 ? void 0 : overrides.tradeTokenPrice) || null;
    const feeTokenPrice = (overrides === null || overrides === void 0 ? void 0 : overrides.feeTokenPrice) || null;
    const ammQuote = (overrides === null || overrides === void 0 ? void 0 : overrides.ammQuote) || null;
    const configManagerMock = (0, ts_mockito_1.mock)(config_manager_1.ConfigManager);
    (0, ts_mockito_1.when)(configManagerMock.getFeeModelConfiguration(chainId, (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenReturn(feeModelConfiguration);
    const gasStationAttendantMock = (0, ts_mockito_1.mock)(GasStationAttendantEthereum_1.GasStationAttendantEthereum);
    (0, ts_mockito_1.when)(gasStationAttendantMock.getExpectedTransactionGasRateAsync()).thenResolve(gasPrice);
    const tokenPriceOracleMock = (0, ts_mockito_1.mock)(TokenPriceOracle_1.TokenPriceOracle);
    (0, ts_mockito_1.when)(tokenPriceOracleMock.batchFetchTokenPriceAsync((0, ts_mockito_1.anything)())).thenResolve([tradeTokenPrice, feeTokenPrice]);
    const zeroExApiClientMock = (0, ts_mockito_1.mock)(ZeroExApiClient_1.ZeroExApiClient);
    (0, ts_mockito_1.when)(zeroExApiClientMock.fetchAmmQuoteAsync((0, ts_mockito_1.anything)())).thenResolve(ammQuote);
    return new fee_service_1.FeeService(chainId, feeTokenMetadata, (0, ts_mockito_1.instance)((overrides === null || overrides === void 0 ? void 0 : overrides.configManagerMock) || configManagerMock), (0, ts_mockito_1.instance)((overrides === null || overrides === void 0 ? void 0 : overrides.gasStationAttendantMock) || gasStationAttendantMock), (0, ts_mockito_1.instance)((overrides === null || overrides === void 0 ? void 0 : overrides.tokenPriceOracleMock) || tokenPriceOracleMock), (0, ts_mockito_1.instance)((overrides === null || overrides === void 0 ? void 0 : overrides.zeroExApiClientMock) || zeroExApiClientMock), constants_1.DEFAULT_MIN_EXPIRY_DURATION_MS);
};
describe('FeeService', () => {
    const workflow = 'rfqm';
    const txOrigin = 'registryAddress';
    const makerToken = 'UsdcAddress';
    const makerTokenDecimals = 6;
    const makerTokenPrice = new utils_1.BigNumber(1e-6);
    const takerToken = 'WbtcAddress';
    const takerTokenDecimals = 18;
    const takerTokenPrice = new utils_1.BigNumber(6e-14);
    const gasPrice = new utils_1.BigNumber(1e9);
    const gasEstimate = constants_1.RFQM_TX_OTC_ORDER_GAS_ESTIMATE;
    const feeTokenPrice = new utils_1.BigNumber(3e-15);
    const integrator = {
        apiKeys: [],
        integratorId: 'integratorId',
        allowedChainIds: [1, 3, 137, 1337],
        label: 'dummy integrator',
        plp: true,
        rfqm: true,
        rfqt: true,
    };
    const takerAddress = 'takerAddress';
    afterAll(() => {
        jest.useRealTimers();
    });
    describe('calculateFeeAsync v0', () => {
        const feeModelVersion = 0;
        it('should calculate v0 fee for RFQm correctly', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(0.345e18);
            const tradeSizeBps = 5;
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio: 0,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: takerTokenPrice,
                feeTokenPrice,
            });
            // When
            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({
                workflow,
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedGasFeeAmount,
                details: {
                    kind: 'gasOnly',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: null,
                    feeTokenBaseUnitPriceUsd: null,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(fee).toMatchObject(expectedFee);
        });
        it('should calculate v0 fee for RFQt correctly', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(0.345e18);
            const tradeSizeBps = 5;
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio: 0,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: takerTokenPrice,
                feeTokenPrice,
            });
            // When
            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({
                workflow: 'rfqt',
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            });
            // Then
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: new utils_1.BigNumber(0),
                details: {
                    kind: 'gasOnly',
                    feeModelVersion,
                    gasFeeAmount: new utils_1.BigNumber(0),
                    gasPrice: new utils_1.BigNumber(0),
                },
                breakdown: {},
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: null,
                    feeTokenBaseUnitPriceUsd: null,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(fee).toMatchObject(expectedFee);
        });
    });
    describe('calculateFeeAsync v1', () => {
        const feeModelVersion = 1;
        it('should calculate v1 fee for RFQm selling correctly', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(0.345e18);
            const tradeSizeBps = 5;
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio: 0,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: takerTokenPrice,
                feeTokenPrice,
            });
            // When
            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({
                workflow,
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedZeroExFeeAmount = assetFillAmount
                .times(tradeSizeBps * constants_1.BPS_TO_RATIO)
                .times(takerTokenPrice)
                .div(feeTokenPrice)
                .integerValue();
            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedTotalFeeAmount,
                details: {
                    kind: 'default',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                    zeroExFeeAmount: expectedZeroExFeeAmount,
                    tradeSizeBps,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: takerTokenPrice,
                    makerTokenBaseUnitPriceUsd: null,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                    zeroEx: {
                        amount: expectedZeroExFeeAmount,
                        details: {
                            kind: 'volume',
                            tradeSizeBps,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: takerTokenPrice,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(fee).toMatchObject(expectedFee);
        });
        it('should calculate v1 fee for RFQm buying correctly', async () => {
            // Given
            const isSelling = false;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(5000e6);
            const tradeSizeBps = 4;
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio: 0,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: makerTokenPrice,
                feeTokenPrice,
            });
            // When
            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({
                workflow,
                chainId: 1337,
                feeModelVersion,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                makerAmount: assetFillAmount,
                isFirm: false,
                takerAddress,
                integrator,
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedZeroExFeeAmount = assetFillAmount
                .times(tradeSizeBps * constants_1.BPS_TO_RATIO)
                .times(makerTokenPrice)
                .div(feeTokenPrice)
                .integerValue();
            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedTotalFeeAmount,
                details: {
                    kind: 'default',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                    zeroExFeeAmount: expectedZeroExFeeAmount,
                    tradeSizeBps,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                    zeroEx: {
                        amount: expectedZeroExFeeAmount,
                        details: {
                            kind: 'volume',
                            tradeSizeBps,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
            };
            expect(fee).toMatchObject(expectedFee);
        });
        it('should calculate v1 fee for RFQt selling correctly', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(0.345e18);
            const tradeSizeBps = 5;
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio: 0,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: takerTokenPrice,
                feeTokenPrice,
            });
            // When
            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({
                workflow: 'rfqt',
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            });
            // Then
            const expectedZeroExFeeAmount = assetFillAmount
                .times(tradeSizeBps * constants_1.BPS_TO_RATIO)
                .times(takerTokenPrice)
                .div(feeTokenPrice)
                .integerValue();
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedZeroExFeeAmount,
                details: {
                    kind: 'default',
                    feeModelVersion,
                    gasFeeAmount: new utils_1.BigNumber(0),
                    gasPrice: new utils_1.BigNumber(0),
                    zeroExFeeAmount: expectedZeroExFeeAmount,
                    tradeSizeBps,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: takerTokenPrice,
                    makerTokenBaseUnitPriceUsd: null,
                },
                breakdown: {
                    zeroEx: {
                        amount: expectedZeroExFeeAmount,
                        details: {
                            kind: 'volume',
                            tradeSizeBps,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: takerTokenPrice,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(fee).toMatchObject(expectedFee);
        });
        it('should not include zeroEx fee for non-configured pairs', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(0.345e18);
            const feeService = buildFeeService({
                gasPrice,
                tradeTokenPrice: takerTokenPrice,
                feeTokenPrice,
            });
            // When
            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({
                workflow,
                chainId: 1337,
                feeModelVersion,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: false,
                takerAddress,
                integrator,
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedGasFeeAmount,
                details: {
                    kind: 'default',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                    zeroExFeeAmount: new utils_1.BigNumber(0),
                    tradeSizeBps: 0,
                    feeTokenBaseUnitPriceUsd: null,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: null,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                    zeroEx: {
                        amount: new utils_1.BigNumber(0),
                        details: {
                            kind: 'volume',
                            tradeSizeBps: 0,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: null,
                    feeTokenBaseUnitPriceUsd: null,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(fee).toMatchObject(expectedFee);
        });
        it('should not include zeroEx fee if price oracle is down', async () => {
            // Given
            const isSelling = false;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(5000e6);
            const tradeSizeBps = 4;
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio: 0,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: makerTokenPrice,
                feeTokenPrice: null,
            });
            // When
            const { feeWithDetails: fee } = await feeService.calculateFeeAsync({
                workflow,
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                makerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedGasFeeAmount,
                details: {
                    kind: 'gasOnly',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: null,
                    feeTokenBaseUnitPriceUsd: null,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(fee).toMatchObject(expectedFee);
        });
    });
    describe('calculateFeeAsync v2', () => {
        const feeModelVersion = 2;
        it('should calculate v2 `price improvement` based fee for sell correctly if price improvement detection succeeded', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(1e18);
            const marginRakeRatio = 0.5;
            const ammMakerAmount = new utils_1.BigNumber(3450e6);
            const expectedSlippage = new utils_1.BigNumber(-0.01);
            const estimatedAmmGasFeeWei = new utils_1.BigNumber(100e9);
            const decodedUniqueId = '1234-5678';
            const ammQuote = {
                makerAmount: ammMakerAmount,
                takerAmount: assetFillAmount,
                expectedSlippage,
                estimatedGasFeeWei: estimatedAmmGasFeeWei,
                decodedUniqueId,
            };
            const mm1MakerAmount = new utils_1.BigNumber(3550e6);
            const mm2MakerAmount = new utils_1.BigNumber(3600e6);
            const mmQuotes = [
                {
                    maker: 'maker1Address',
                    makerUri: 'http://maker1.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm1MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
                {
                    maker: 'maker2Address',
                    makerUri: 'http://maker2.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm2MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
            ];
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio,
                    tradeSizeBps: 0,
                },
                gasPrice,
                tradeTokenPrice: makerTokenPrice,
                feeTokenPrice,
                ammQuote,
            });
            const quoteContext = {
                workflow,
                chainId: 1337,
                isFirm: true,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                takerAddress,
                trader: takerAddress,
                integrator,
            };
            // When
            jest.useFakeTimers().setSystemTime(1650000000000);
            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync(quoteContext, async () => {
                return Promise.resolve(mmQuotes);
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedMargin = mm2MakerAmount
                .minus(ammMakerAmount.times(new utils_1.BigNumber(1).plus(expectedSlippage)))
                .times(makerTokenPrice)
                .div(feeTokenPrice)
                .plus(estimatedAmmGasFeeWei)
                .integerValue();
            const expectedZeroExFeeAmount = expectedMargin.times(marginRakeRatio).integerValue();
            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedTotalFeeAmount,
                details: {
                    kind: 'margin',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                    zeroExFeeAmount: expectedZeroExFeeAmount,
                    margin: expectedMargin,
                    marginRakeRatio,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                    zeroEx: {
                        amount: expectedZeroExFeeAmount,
                        details: {
                            kind: 'price_improvement',
                            priceImprovement: expectedMargin,
                            rakeRatio: marginRakeRatio,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
            };
            expect(feeWithDetails).toMatchObject(expectedFee);
            expect(quotesWithGasFee).toMatchObject(mmQuotes);
            expect(ammQuoteUniqueId).toBe(decodedUniqueId);
            // When
            const revisedQuotes = await feeService.reviseQuotesAsync(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            quotesWithGasFee, expectedZeroExFeeAmount, quoteContext);
            // Then
            const expectedRevisedQuotes = mmQuotes.map((quote) => (0, fee_service_1.reviseQuoteWithFees)(quote, expectedZeroExFeeAmount, isSelling, makerTokenPrice, feeTokenPrice));
            expect(revisedQuotes).toMatchObject(expectedRevisedQuotes);
        });
        it('should calculate v2 `price improvement` based fee for buy correctly if price improvement detection succeeded', async () => {
            // Given
            const isSelling = false;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(1e18);
            const marginRakeRatio = 0.4;
            const ammTakerAmount = new utils_1.BigNumber(3450e6);
            const expectedSlippage = new utils_1.BigNumber(-0.1);
            const estimatedAmmGasFeeWei = new utils_1.BigNumber(100e9);
            const decodedUniqueId = '1234-5678';
            const ammQuote = {
                makerAmount: assetFillAmount,
                takerAmount: ammTakerAmount,
                expectedSlippage,
                estimatedGasFeeWei: estimatedAmmGasFeeWei,
                decodedUniqueId,
            };
            const mm1TakerAmount = new utils_1.BigNumber(3400e6);
            const mm2TakerAmount = new utils_1.BigNumber(3350e6);
            const mmQuotes = [
                {
                    maker: 'maker1Address',
                    makerUri: 'http://maker1.com',
                    makerToken,
                    takerToken,
                    makerAmount: assetFillAmount,
                    takerAmount: mm1TakerAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
                {
                    maker: 'maker2Address',
                    makerUri: 'http://maker2.com',
                    makerToken,
                    takerToken,
                    makerAmount: assetFillAmount,
                    takerAmount: mm2TakerAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
            ];
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio,
                    tradeSizeBps: 0,
                },
                gasPrice,
                tradeTokenPrice: takerTokenPrice,
                feeTokenPrice,
                ammQuote,
            });
            const quoteContext = {
                workflow,
                chainId: 1337,
                feeModelVersion,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                makerAmount: assetFillAmount,
                isFirm: false,
                takerAddress,
                integrator,
            };
            // When
            jest.useFakeTimers().setSystemTime(1650000000000);
            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync(quoteContext, async () => {
                return Promise.resolve(mmQuotes);
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedMargin = ammTakerAmount
                .times(new utils_1.BigNumber(1).minus(expectedSlippage))
                .minus(mm2TakerAmount)
                .times(takerTokenPrice)
                .div(feeTokenPrice)
                .plus(estimatedAmmGasFeeWei)
                .integerValue();
            const expectedZeroExFeeAmount = expectedMargin.times(marginRakeRatio).integerValue();
            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedTotalFeeAmount,
                details: {
                    kind: 'margin',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                    zeroExFeeAmount: expectedZeroExFeeAmount,
                    margin: expectedMargin,
                    marginRakeRatio,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: takerTokenPrice,
                    makerTokenBaseUnitPriceUsd: null,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                    zeroEx: {
                        amount: expectedZeroExFeeAmount,
                        details: {
                            kind: 'price_improvement',
                            priceImprovement: expectedMargin,
                            rakeRatio: marginRakeRatio,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: takerTokenPrice,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(feeWithDetails).toMatchObject(expectedFee);
            expect(quotesWithGasFee).toMatchObject(mmQuotes);
            expect(ammQuoteUniqueId).toBe(decodedUniqueId);
            // When
            const revisedQuotes = await feeService.reviseQuotesAsync(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            quotesWithGasFee, expectedZeroExFeeAmount, quoteContext);
            // Then
            const expectedRevisedQuotes = mmQuotes.map((quote) => (0, fee_service_1.reviseQuoteWithFees)(quote, expectedZeroExFeeAmount, isSelling, takerTokenPrice, feeTokenPrice));
            expect(revisedQuotes).toMatchObject(expectedRevisedQuotes);
        });
        it('should calculate v2 `default` fee correctly if token price query succeeded but 0x-api query failed', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(1e18);
            const marginRakeRatio = 0.5;
            const tradeSizeBps = 5;
            const ammQuote = null;
            const mm1MakerAmount = new utils_1.BigNumber(3550e6);
            const mm2MakerAmount = new utils_1.BigNumber(3600e6);
            const mmQuotes = [
                {
                    maker: 'maker1Address',
                    makerUri: 'http://maker1.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm1MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
                {
                    maker: 'maker2Address',
                    makerUri: 'http://maker2.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm2MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
            ];
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: makerTokenPrice,
                feeTokenPrice,
                ammQuote,
            });
            const quoteContext = {
                workflow,
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            };
            // When
            jest.useFakeTimers().setSystemTime(1650000000000);
            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync(quoteContext, async () => {
                return Promise.resolve(mmQuotes);
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedZeroExFeeAmount = (0, fee_service_1.calculateDefaultFeeAmount)(mm2MakerAmount, tradeSizeBps, makerTokenPrice, feeTokenPrice);
            const expectedTotalFeeAmount = expectedZeroExFeeAmount.plus(expectedGasFeeAmount);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedTotalFeeAmount,
                details: {
                    kind: 'default',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                    zeroExFeeAmount: expectedZeroExFeeAmount,
                    tradeSizeBps,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                    zeroEx: {
                        amount: expectedZeroExFeeAmount,
                        details: {
                            kind: 'volume',
                            tradeSizeBps,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
            };
            expect(feeWithDetails).toMatchObject(expectedFee);
            expect(quotesWithGasFee).toMatchObject(mmQuotes);
            expect(ammQuoteUniqueId).toBe(undefined);
            // When
            const revisedQuotes = await feeService.reviseQuotesAsync(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            quotesWithGasFee, expectedZeroExFeeAmount, quoteContext);
            // Then
            const expectedRevisedQuotes = mmQuotes.map((quote) => (0, fee_service_1.reviseQuoteWithFees)(quote, expectedZeroExFeeAmount, isSelling, makerTokenPrice, feeTokenPrice));
            expect(revisedQuotes).toMatchObject(expectedRevisedQuotes);
        });
        it('should calculate v2 `gasOnly` fee correctly if token price query failed', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(1e18);
            const marginRakeRatio = 0.5;
            const tradeSizeBps = 5;
            const ammMakerAmount = new utils_1.BigNumber(3450e6);
            const expectedSlippage = new utils_1.BigNumber(-0.01);
            const estimatedAmmGasFeeWei = new utils_1.BigNumber(100e9);
            const decodedUniqueId = '1234-5678';
            const ammQuote = {
                makerAmount: ammMakerAmount,
                takerAmount: assetFillAmount,
                expectedSlippage,
                estimatedGasFeeWei: estimatedAmmGasFeeWei,
                decodedUniqueId,
            };
            const mm1MakerAmount = new utils_1.BigNumber(3550e6);
            const mm2MakerAmount = new utils_1.BigNumber(3600e6);
            const mmQuotes = [
                {
                    maker: 'maker1Address',
                    makerUri: 'http://maker1.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm1MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
                {
                    maker: 'maker2Address',
                    makerUri: 'http://maker2.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm2MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
            ];
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio,
                    tradeSizeBps,
                },
                gasPrice,
                tradeTokenPrice: makerTokenPrice,
                feeTokenPrice: null,
                ammQuote,
            });
            // When
            jest.useFakeTimers().setSystemTime(1650000000000);
            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync({
                workflow,
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            }, async () => {
                return Promise.resolve(mmQuotes);
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedGasFeeAmount,
                details: {
                    kind: 'gasOnly',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: null,
                    feeTokenBaseUnitPriceUsd: null,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: null,
                },
            };
            expect(feeWithDetails).toMatchObject(expectedFee);
            expect(quotesWithGasFee).toMatchObject(mmQuotes);
            expect(ammQuoteUniqueId).toBe(decodedUniqueId);
        });
        it('should calculate v2 `price improvement` based fee with zero zeroExFee if price improvement is zero', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(1e18);
            const marginRakeRatio = 0.5;
            const ammMakerAmount = new utils_1.BigNumber(4000e6);
            const expectedSlippage = new utils_1.BigNumber(-0.01);
            const estimatedAmmGasFeeWei = new utils_1.BigNumber(100e9);
            const decodedUniqueId = '1234-5678';
            const ammQuote = {
                makerAmount: ammMakerAmount,
                takerAmount: assetFillAmount,
                expectedSlippage,
                estimatedGasFeeWei: estimatedAmmGasFeeWei,
                decodedUniqueId,
            };
            const mm1MakerAmount = new utils_1.BigNumber(3550e6);
            const mm2MakerAmount = new utils_1.BigNumber(3600e6);
            const mmQuotes = [
                {
                    maker: 'maker1Address',
                    makerUri: 'http://maker1.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm1MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
                {
                    maker: 'maker2Address',
                    makerUri: 'http://maker2.com',
                    makerToken,
                    takerToken,
                    makerAmount: mm2MakerAmount,
                    takerAmount: assetFillAmount,
                    expiry: new utils_1.BigNumber(1652722767),
                },
            ];
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio,
                    tradeSizeBps: 0,
                },
                gasPrice,
                tradeTokenPrice: makerTokenPrice,
                feeTokenPrice,
                ammQuote,
            });
            // When
            jest.useFakeTimers().setSystemTime(1650000000000);
            const { feeWithDetails, quotesWithGasFee, ammQuoteUniqueId } = await feeService.calculateFeeAsync({
                workflow,
                chainId: 1337,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                isFirm: true,
                takerAddress,
                trader: takerAddress,
                integrator,
            }, async () => {
                return Promise.resolve(mmQuotes);
            });
            // Then
            const expectedGasFeeAmount = gasPrice.times(gasEstimate);
            const expectedFee = {
                type: 'fixed',
                token: feeTokenAddress,
                amount: expectedGasFeeAmount,
                details: {
                    kind: 'margin',
                    feeModelVersion,
                    gasFeeAmount: expectedGasFeeAmount,
                    gasPrice,
                    zeroExFeeAmount: constants_1.ZERO,
                    margin: constants_1.ZERO,
                    marginRakeRatio,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
                breakdown: {
                    gas: {
                        amount: expectedGasFeeAmount,
                        details: {
                            gasPrice,
                            estimatedGas: new utils_1.BigNumber(gasEstimate),
                        },
                    },
                    zeroEx: {
                        amount: constants_1.ZERO,
                        details: {
                            kind: 'price_improvement',
                            priceImprovement: constants_1.ZERO,
                            rakeRatio: marginRakeRatio,
                        },
                    },
                },
                conversionRates: {
                    nativeTokenBaseUnitPriceUsd: feeTokenPrice,
                    feeTokenBaseUnitPriceUsd: feeTokenPrice,
                    takerTokenBaseUnitPriceUsd: null,
                    makerTokenBaseUnitPriceUsd: makerTokenPrice,
                },
            };
            expect(feeWithDetails).toMatchObject(expectedFee);
            expect(quotesWithGasFee).toMatchObject(mmQuotes);
            expect(ammQuoteUniqueId).toBe(decodedUniqueId);
        });
        it('should throw if called from RFQt workflow', async () => {
            // Given
            const isSelling = true;
            const isUnwrap = false;
            const assetFillAmount = new utils_1.BigNumber(1e18);
            const marginRakeRatio = 0.5;
            const ammMakerAmount = new utils_1.BigNumber(3450e6);
            const expectedSlippage = new utils_1.BigNumber(-0.01);
            const estimatedAmmGasFeeWei = new utils_1.BigNumber(100e9);
            const decodedUniqueId = '1234-5678';
            const ammQuote = {
                makerAmount: ammMakerAmount,
                takerAmount: assetFillAmount,
                expectedSlippage,
                estimatedGasFeeWei: estimatedAmmGasFeeWei,
                decodedUniqueId,
            };
            const feeService = buildFeeService({
                feeModelConfiguration: {
                    marginRakeRatio,
                    tradeSizeBps: 0,
                },
                gasPrice,
                tradeTokenPrice: makerTokenPrice,
                feeTokenPrice,
                ammQuote,
            });
            const quoteContext = {
                workflow: 'rfqt',
                chainId: 1337,
                isFirm: true,
                feeModelVersion,
                txOrigin,
                makerToken,
                takerToken,
                originalMakerToken: makerToken,
                makerTokenDecimals,
                takerTokenDecimals,
                isUnwrap,
                isSelling,
                assetFillAmount,
                takerAmount: assetFillAmount,
                takerAddress,
                trader: takerAddress,
                integrator,
            };
            // When
            await expect(() => feeService.calculateFeeAsync(quoteContext)).rejects.toThrow('Not implemented');
        });
    });
    describe('pure function calculateDefaultFeeAmount()', () => {
        it('should calculate default fee amount correctly', async () => {
            // Given
            const tradeTokenAmount = new utils_1.BigNumber(1e18);
            const feeRateBps = 5;
            const tradeTokenBaseUnitPriceUsd = new utils_1.BigNumber(6e-14);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const defaultFeeAmount = (0, fee_service_1.calculateDefaultFeeAmount)(tradeTokenAmount, feeRateBps, tradeTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            const expectedDefaultFeeAmount = new utils_1.BigNumber(1e16);
            expect(defaultFeeAmount).toMatchObject(expectedDefaultFeeAmount);
        });
        it('should return zero if bps is zero', async () => {
            // Given
            const tradeTokenAmount = new utils_1.BigNumber(1e18);
            const feeRateBps = 0;
            const tradeTokenBaseUnitPriceUsd = new utils_1.BigNumber(6e-14);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const defaultFeeAmount = (0, fee_service_1.calculateDefaultFeeAmount)(tradeTokenAmount, feeRateBps, tradeTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            expect(defaultFeeAmount).toMatchObject(constants_1.ZERO);
        });
        it('should return zero if either trade token price or fee token price is null', async () => {
            // Given
            const tradeTokenAmount = new utils_1.BigNumber(1e18);
            const feeRateBps = 5;
            const tradeTokenBaseUnitPriceUsd = new utils_1.BigNumber(6e-14);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const defaultFeeAmount1 = (0, fee_service_1.calculateDefaultFeeAmount)(tradeTokenAmount, feeRateBps, null, feeTokenBaseUnitPriceUsd);
            const defaultFeeAmount2 = (0, fee_service_1.calculateDefaultFeeAmount)(tradeTokenAmount, feeRateBps, tradeTokenBaseUnitPriceUsd, null);
            // Then
            expect(defaultFeeAmount1).toMatchObject(constants_1.ZERO);
            expect(defaultFeeAmount2).toMatchObject(constants_1.ZERO);
        });
    });
    describe('pure function calculatePriceImprovementAmount()', () => {
        it('should calculate price improvement amount for selling correctly', async () => {
            // Given
            const isSelling = true;
            const assetFillAmount = new utils_1.BigNumber(3e17);
            const makerQuoteWithGasFee = {
                maker: 'maker1Address',
                makerUri: 'http://maker1.com',
                makerToken,
                takerToken,
                makerAmount: new utils_1.BigNumber(1100e6),
                takerAmount: assetFillAmount,
                expiry: new utils_1.BigNumber(1652722767),
            };
            const ammQuote = {
                makerAmount: new utils_1.BigNumber(1000e6),
                takerAmount: assetFillAmount,
                expectedSlippage: new utils_1.BigNumber(-0.02),
                estimatedGasFeeWei: new utils_1.BigNumber(10e15),
            };
            const quoteTokenBaseUnitPriceUsd = new utils_1.BigNumber(1e-6);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const priceImprovementAmount = (0, fee_service_1.calculatePriceImprovementAmount)(makerQuoteWithGasFee, ammQuote, isSelling, quoteTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            const expectedPriceImprovementAmount = new utils_1.BigNumber(50e15);
            expect(priceImprovementAmount).toMatchObject(expectedPriceImprovementAmount);
        });
        it('should calculate price improvement amount for buying correctly', async () => {
            // Given
            const isSelling = false;
            const assetFillAmount = new utils_1.BigNumber(3e17);
            const makerQuoteWithGasFee = {
                maker: 'maker1Address',
                makerUri: 'http://maker1.com',
                makerToken,
                takerToken,
                makerAmount: assetFillAmount,
                takerAmount: new utils_1.BigNumber(900e6),
                expiry: new utils_1.BigNumber(1652722767),
            };
            const ammQuote = {
                makerAmount: assetFillAmount,
                takerAmount: new utils_1.BigNumber(1000e6),
                expectedSlippage: new utils_1.BigNumber(-0.02),
                estimatedGasFeeWei: new utils_1.BigNumber(10e15),
            };
            const quoteTokenBaseUnitPriceUsd = new utils_1.BigNumber(1e-6);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const priceImprovementAmount = (0, fee_service_1.calculatePriceImprovementAmount)(makerQuoteWithGasFee, ammQuote, isSelling, quoteTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            const expectedPriceImprovementAmount = new utils_1.BigNumber(50e15);
            expect(priceImprovementAmount).toMatchObject(expectedPriceImprovementAmount);
        });
        it('should return zero if there is no price improvement', async () => {
            // Given
            const isSelling = false;
            const assetFillAmount = new utils_1.BigNumber(3e17);
            const makerQuoteWithGasFee = {
                maker: 'maker1Address',
                makerUri: 'http://maker1.com',
                makerToken,
                takerToken,
                makerAmount: assetFillAmount,
                takerAmount: new utils_1.BigNumber(1051e6),
                expiry: new utils_1.BigNumber(1652722767),
            };
            const ammQuote = {
                makerAmount: assetFillAmount,
                takerAmount: new utils_1.BigNumber(1000e6),
                expectedSlippage: new utils_1.BigNumber(-0.02),
                estimatedGasFeeWei: new utils_1.BigNumber(10e15),
            };
            const quoteTokenBaseUnitPriceUsd = new utils_1.BigNumber(1e-6);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const priceImprovementAmount = (0, fee_service_1.calculatePriceImprovementAmount)(makerQuoteWithGasFee, ammQuote, isSelling, quoteTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            expect(priceImprovementAmount).toMatchObject(constants_1.ZERO);
        });
    });
    describe('pure function reviseQuoteWithZeroExFee()', () => {
        it('should revise quote correctly for selling', async () => {
            // Given
            const isSelling = true;
            const assetFillAmount = new utils_1.BigNumber(3e17);
            const makerQuoteWithGasFee = {
                maker: 'maker1Address',
                makerUri: 'http://maker1.com',
                makerToken,
                takerToken,
                makerAmount: new utils_1.BigNumber(1000e6),
                takerAmount: assetFillAmount,
                expiry: new utils_1.BigNumber(1652722767),
            };
            const zeroExFeeAmount = new utils_1.BigNumber(10e15);
            const quoteTokenBaseUnitPriceUsd = new utils_1.BigNumber(1e-6);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const revisedQuote = (0, fee_service_1.reviseQuoteWithFees)(makerQuoteWithGasFee, zeroExFeeAmount, isSelling, quoteTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            const expectedRevisedMakerAmount = new utils_1.BigNumber(970e6);
            expect(revisedQuote.makerAmount).toMatchObject(expectedRevisedMakerAmount);
        });
        it('should revise quote correctly for buying', async () => {
            // Given
            const isSelling = false;
            const assetFillAmount = new utils_1.BigNumber(3e17);
            const makerQuoteWithGasFee = {
                maker: 'maker1Address',
                makerUri: 'http://maker1.com',
                makerToken,
                takerToken,
                makerAmount: assetFillAmount,
                takerAmount: new utils_1.BigNumber(1000e6),
                expiry: new utils_1.BigNumber(1652722767),
            };
            const zeroExFeeAmount = new utils_1.BigNumber(10e15);
            const quoteTokenBaseUnitPriceUsd = new utils_1.BigNumber(1e-6);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const revisedQuote = (0, fee_service_1.reviseQuoteWithFees)(makerQuoteWithGasFee, zeroExFeeAmount, isSelling, quoteTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            const expectedRevisedTakerAmount = new utils_1.BigNumber(1030e6);
            expect(revisedQuote.takerAmount).toMatchObject(expectedRevisedTakerAmount);
        });
        it('should not revise quote correctly for zero zeroExFee', async () => {
            // Given
            const isSelling = true;
            const assetFillAmount = new utils_1.BigNumber(3e17);
            const makerQuoteWithGasFee = {
                maker: 'maker1Address',
                makerUri: 'http://maker1.com',
                makerToken,
                takerToken,
                makerAmount: new utils_1.BigNumber(1000e6),
                takerAmount: assetFillAmount,
                expiry: new utils_1.BigNumber(1652722767),
            };
            const zeroExFeeAmount = constants_1.ZERO;
            const quoteTokenBaseUnitPriceUsd = new utils_1.BigNumber(1e-6);
            const feeTokenBaseUnitPriceUsd = new utils_1.BigNumber(3e-15);
            // When
            const revisedQuote = (0, fee_service_1.reviseQuoteWithFees)(makerQuoteWithGasFee, zeroExFeeAmount, isSelling, quoteTokenBaseUnitPriceUsd, feeTokenBaseUnitPriceUsd);
            // Then
            const expectedRevisedMakerAmount = new utils_1.BigNumber(1000e6);
            expect(revisedQuote.makerAmount).toMatchObject(expectedRevisedMakerAmount);
            expect(revisedQuote.takerAmount).toMatchObject(assetFillAmount);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3Qvc2VydmljZXMvZmVlX3NlcnZpY2VfdGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFxQztBQUNyQyx5Q0FBeUM7QUFFekMscUNBQXNDO0FBQ3RDLDJDQUE0RDtBQUU1RCw2Q0FBMEY7QUFDMUYsd0RBS2tDO0FBQ2xDLGdFQUt3QztBQUd4QyxtRUFBK0Q7QUFDL0QsNkZBQTBGO0FBQzFGLHVFQUFvRTtBQUNwRSxxRUFBNEU7QUFFNUUsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDO0FBQzdCLE1BQU0sZUFBZSxHQUFHLGlCQUFpQixDQUFDO0FBQzFDLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBRTVCLE1BQU0sZUFBZSxHQUFHLENBQUMsU0FZeEIsRUFBYyxFQUFFO0lBQ2IsTUFBTSxPQUFPLEdBQUcsQ0FBQSxTQUFTLGFBQVQsU0FBUyx1QkFBVCxTQUFTLENBQUUsT0FBTyxLQUFJLElBQUksQ0FBQztJQUMzQyxNQUFNLGdCQUFnQixHQUFHLENBQUEsU0FBUyxhQUFULFNBQVMsdUJBQVQsU0FBUyxDQUFFLGdCQUFnQixLQUFJO1FBQ3BELE1BQU0sRUFBRSxjQUFjO1FBQ3RCLFFBQVEsRUFBRSxnQkFBZ0I7UUFDMUIsWUFBWSxFQUFFLGVBQWU7S0FDaEMsQ0FBQztJQUNGLE1BQU0scUJBQXFCLEdBQUcsQ0FBQSxTQUFTLGFBQVQsU0FBUyx1QkFBVCxTQUFTLENBQUUscUJBQXFCLEtBQUksd0NBQStCLENBQUM7SUFDbEcsTUFBTSxRQUFRLEdBQUcsQ0FBQSxTQUFTLGFBQVQsU0FBUyx1QkFBVCxTQUFTLENBQUUsUUFBUSxLQUFJLElBQUksaUJBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzRCxNQUFNLGVBQWUsR0FBRyxDQUFBLFNBQVMsYUFBVCxTQUFTLHVCQUFULFNBQVMsQ0FBRSxlQUFlLEtBQUksSUFBSSxDQUFDO0lBQzNELE1BQU0sYUFBYSxHQUFHLENBQUEsU0FBUyxhQUFULFNBQVMs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QUcsSUFBSSxpQkFBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXRELE9BQU87WUFDUCxNQUFNLFlBQVksR0FBRyxJQUFBLGlDQUFtQixFQUNwQyxvQkFBb0IsRUFDcEIsZUFBZSxFQUNmLFNBQVMsRUFDVCwwQkFBMEIsRUFDMUIsd0JBQXdCLENBQzNCLENBQUM7WUFFRixPQUFPO1lBQ1AsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLGlCQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekQsTUFBTSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUMzRSxNQUFNLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3Qvc2VydmljZXMvZmVlX3NlcnZpY2VfdGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTptYXgtZmlsZS1saW5lLWNvdW50XHJcbi8vIHRzbGludDpkaXNhYmxlOmN1c3RvbS1uby1tYWdpYy1udW1iZXJzXHJcblxyXG5pbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tICdAMHgvdXRpbHMnO1xyXG5pbXBvcnQgeyBhbnl0aGluZywgaW5zdGFuY2UsIG1vY2ssIHdoZW4gfSBmcm9tICd0cy1tb2NraXRvJztcclxuXHJcbmltcG9ydCB7IERFRkFVTFRfRkVFX01PREVMX0NPTkZJR1VSQVRJT04sIEZlZU1vZGVsQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uLy4uL3NyYy9jb25maWcnO1xyXG5pbXBvcnQge1xyXG4gICAgQlBTX1RPX1JBVElPLFxyXG4gICAgREVGQVVMVF9NSU5fRVhQSVJZX0RVUkFUSU9OX01TLFxyXG4gICAgUkZRTV9UWF9PVENfT1JERVJfR0FTX0VTVElNQVRFLFxyXG4gICAgWkVSTyxcclxufSBmcm9tICcuLi8uLi9zcmMvY29yZS9jb25zdGFudHMnO1xyXG5pbXBvcnQge1xyXG4gICAgY2FsY3VsYXRlRGVmYXVsdEZlZUFtb3VudCxcclxuICAgIGNhbGN1bGF0ZVByaWNlSW1wcm92ZW1lbnRBbW91bnQsXHJcbiAgICByZXZpc2VRdW90ZVdpdGhGZWVzLFxyXG4gICAgRmVlU2VydmljZSxcclxufSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvZmVlX3NlcnZpY2UnO1xyXG5pbXBvcnQgeyBRdW90ZUNvbnRleHQgfSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvdHlwZXMnO1xyXG5pbXBvcnQgeyBGZWVXaXRoRGV0YWlscywgSW5kaWNhdGl2ZVF1b3RlLCBUb2tlbk1ldGFkYXRhIH0gZnJvbSAnLi4vLi4vc3JjL2NvcmUvdHlwZXMnO1xyXG5pbXBvcnQgeyBDb25maWdNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL2NvbmZpZ19tYW5hZ2VyJztcclxuaW1wb3J0IHsgR2FzU3RhdGlvbkF0dGVuZGFudEV0aGVyZXVtIH0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL0dhc1N0YXRpb25BdHRlbmRhbnRFdGhlcmV1bSc7XHJcbmltcG9ydCB7IFRva2VuUHJpY2VPcmFjbGUgfSBmcm9tICcuLi8uLi9zcmMvdXRpbHMvVG9rZW5QcmljZU9yYWNsZSc7XHJcbmltcG9ydCB7IEFtbVF1b3RlLCBaZXJvRXhBcGlDbGllbnQgfSBmcm9tICcuLi8uLi9zcmMvdXRpbHMvWmVyb0V4QXBpQ2xpZW50JztcclxuXHJcbmNvbnN0IGZlZVRva2VuU3ltYm9sID0gJ2ZlZSc7XHJcbmNvbnN0IGZlZVRva2VuQWRkcmVzcyA9ICdmZWVUb2tlbkFkZHJlc3MnO1xyXG5jb25zdCBmZWVUb2tlbkRlY2ltYWxzID0gMTg7XHJcblxyXG5jb25zdCBidWlsZEZlZVNlcnZpY2UgPSAob3ZlcnJpZGVzOiB7XHJcbiAgICBmZWVNb2RlbENvbmZpZ3VyYXRpb24/OiBGZWVNb2RlbENvbmZpZ3VyYXRpb247XHJcbiAgICBnYXNQcmljZT86IEJpZ051bWJlcjtcclxuICAgIHRyYWRlVG9rZW5QcmljZT86IEJpZ051bWJlciB8IG51bGw7XHJcbiAgICBmZWVUb2tlblByaWNlPzogQmlnTnVtYmVyIHwgbnVsbDtcclxuICAgIGFtbVF1b3RlPzogQW1tUXVvdGUgfCBudWxsO1xyXG4gICAgY2hhaW5JZD86IG51bWJlcjtcclxuICAgIGZlZVRva2VuTWV0YWRhdGE/OiBUb2tlbk1ldGFkYXRhO1xyXG4gICAgY29uZmlnTWFuYWdlck1vY2s/OiBDb25maWdNYW5hZ2VyO1xyXG4gICAgZ2FzU3RhdGlvbkF0dGVuZGFudE1vY2s/OiBHYXNTdGF0aW9uQXR0ZW5kYW50RXRoZXJldW07XHJcbiAgICB0b2tlblByaWNlT3JhY2xlTW9jaz86IFRva2VuUHJpY2VPcmFjbGU7XHJcbiAgICB6ZXJvRXhBcGlDbGllbnRNb2NrPzogWmVyb0V4QXBpQ2xpZW50O1xyXG59KTogRmVlU2VydmljZSA9PiB7XHJcbiAgICBjb25zdCBjaGFpbklkID0gb3ZlcnJpZGVzPy5jaGFpbklkIHx8IDEzMzc7XHJcbiAgICBjb25zdCBmZWVUb2tlbk1ldGFkYXRhID0gb3ZlcnJpZGVzPy5mZWVUb2tlbk1ldGFkYXRhIHx8IHtcclxuICAgICAgICBzeW1ib2w6IGZlZVRva2VuU3ltYm9sLFxyXG4gICAgICAgIGRlY2ltYWxzOiBmZWVUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgIHRva2VuQWRkcmVzczogZmVlVG9rZW5BZGRyZXNzLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IGZlZU1vZGVsQ29uZmlndXJhdGlvbiA9IG92ZXJyaWRlcz8uZmVlTW9kZWxDb25maWd1cmF0aW9uIHx8IERFRkFVTFRfRkVFX01PREVMX0NPTkZJR1VSQVRJT047XHJcbiAgICBjb25zdCBnYXNQcmljZSA9IG92ZXJyaWRlcz8uZ2FzUHJpY2UgfHwgbmV3IEJpZ051bWJlcigxZTkpO1xyXG4gICAgY29uc3QgdHJhZGVUb2tlblByaWNlID0gb3ZlcnJpZGVzPy50cmFkZVRva2VuUHJpY2UgfHwgbnVsbDtcclxuICAgIGNvbnN0IGZlZVRva2VuUHJpY2UgPSBvdmVycmlkZXM/LmZlZVRva2VuUHJpY2UgfHwgbnVsbDtcclxuICAgIGNvbnN0IGFtbVF1b3RlID0gb3ZlcnJpZGVzPy5hbW1RdW90ZSB8fCBudWxsO1xyXG5cclxuICAgIGNvbnN0IGNvbmZpZ01hbmFnZXJNb2NrID0gbW9jayhDb25maWdNYW5hZ2VyKTtcclxuICAgIHdoZW4oY29uZmlnTWFuYWdlck1vY2suZ2V0RmVlTW9kZWxDb25maWd1cmF0aW9uKGNoYWluSWQsIGFueXRoaW5nKCksIGFueXRoaW5nKCkpKS50aGVuUmV0dXJuKGZlZU1vZGVsQ29uZmlndXJhdGlvbik7XHJcblxyXG4gICAgY29uc3QgZ2FzU3RhdGlvbkF0dGVuZGFudE1vY2sgPSBtb2NrKEdhc1N0YXRpb25BdHRlbmRhbnRFdGhlcmV1bSk7XHJcbiAgICB3aGVuKGdhc1N0YXRpb25BdHRlbmRhbnRNb2NrLmdldEV4cGVjdGVkVHJhbnNhY3Rpb25HYXNSYXRlQXN5bmMoKSkudGhlblJlc29sdmUoZ2FzUHJpY2UpO1xyXG5cclxuICAgIGNvbnN0IHRva2VuUHJpY2VPcmFjbGVNb2NrID0gbW9jayhUb2tlblByaWNlT3JhY2xlKTtcclxuICAgIHdoZW4odG9rZW5QcmljZU9yYWNsZU1vY2suYmF0Y2hGZXRjaFRva2VuUHJpY2VBc3luYyhhbnl0aGluZygpKSkudGhlblJlc29sdmUoW3RyYWRlVG9rZW5QcmljZSwgZmVlVG9rZW5QcmljZV0pO1xyXG5cclxuICAgIGNvbnN0IHplcm9FeEFwaUNsaWVudE1vY2sgPSBtb2NrKFplcm9FeEFwaUNsaWVudCk7XHJcbiAgICB3aGVuKHplcm9FeEFwaUNsaWVudE1vY2suZmV0Y2hBbW1RdW90ZUFzeW5jKGFueXRoaW5nKCkpKS50aGVuUmVzb2x2ZShhbW1RdW90ZSk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBGZWVTZXJ2aWNlKFxyXG4gICAgICAgIGNoYWluSWQsXHJcbiAgICAgICAgZmVlVG9rZW5NZXRhZGF0YSxcclxuICAgICAgICBpbnN0YW5jZShvdmVycmlkZXM/LmNvbmZpZ01hbmFnZXJNb2NrIHx8IGNvbmZpZ01hbmFnZXJNb2NrKSxcclxuICAgICAgICBpbnN0YW5jZShvdmVycmlkZXM/Lmdhc1N0YXRpb25BdHRlbmRhbnRNb2NrIHx8IGdhc1N0YXRpb25BdHRlbmRhbnRNb2NrKSxcclxuICAgICAgICBpbnN0YW5jZShvdmVycmlkZXM/LnRva2VuUHJpY2VPcmFjbGVNb2NrIHx8IHRva2VuUHJpY2VPcmFjbGVNb2NrKSxcclxuICAgICAgICBpbnN0YW5jZShvdmVycmlkZXM/Lnplcm9FeEFwaUNsaWVudE1vY2sgfHwgemVyb0V4QXBpQ2xpZW50TW9jayksXHJcbiAgICAgICAgREVGQVVMVF9NSU5fRVhQSVJZX0RVUkFUSU9OX01TLFxyXG4gICAgKTtcclxufTtcclxuXHJcbmRlc2NyaWJlKCdGZWVTZXJ2aWNlJywgKCkgPT4ge1xyXG4gICAgY29uc3Qgd29ya2Zsb3cgPSAncmZxbSc7XHJcbiAgICBjb25zdCB0eE9yaWdpbiA9ICdyZWdpc3RyeUFkZHJlc3MnO1xyXG4gICAgY29uc3QgbWFrZXJUb2tlbiA9ICdVc2RjQWRkcmVzcyc7XHJcbiAgICBjb25zdCBtYWtlclRva2VuRGVjaW1hbHMgPSA2O1xyXG4gICAgY29uc3QgbWFrZXJUb2tlblByaWNlID0gbmV3IEJpZ051bWJlcigxZS02KTtcclxuXHJcbiAgICBjb25zdCB0YWtlclRva2VuID0gJ1didGNBZGRyZXNzJztcclxuICAgIGNvbnN0IHRha2VyVG9rZW5EZWNpbWFscyA9IDE4O1xyXG4gICAgY29uc3QgdGFrZXJUb2tlblByaWNlID0gbmV3IEJpZ051bWJlcig2ZS0xNCk7XHJcblxyXG4gICAgY29uc3QgZ2FzUHJpY2UgPSBuZXcgQmlnTnVtYmVyKDFlOSk7XHJcbiAgICBjb25zdCBnYXNFc3RpbWF0ZSA9IFJGUU1fVFhfT1RDX09SREVSX0dBU19FU1RJTUFURTtcclxuXHJcbiAgICBjb25zdCBmZWVUb2tlblByaWNlID0gbmV3IEJpZ051bWJlcigzZS0xNSk7XHJcblxyXG4gICAgY29uc3QgaW50ZWdyYXRvciA9IHtcclxuICAgICAgICBhcGlLZXlzOiBbXSxcclxuICAgICAgICBpbnRlZ3JhdG9ySWQ6ICdpbnRlZ3JhdG9ySWQnLFxyXG4gICAgICAgIGFsbG93ZWRDaGFpbklkczogWzEsIDMsIDEzNywgMTMzN10sXHJcbiAgICAgICAgbGFiZWw6ICdkdW1teSBpbnRlZ3JhdG9yJyxcclxuICAgICAgICBwbHA6IHRydWUsXHJcbiAgICAgICAgcmZxbTogdHJ1ZSxcclxuICAgICAgICByZnF0OiB0cnVlLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB0YWtlckFkZHJlc3MgPSAndGFrZXJBZGRyZXNzJztcclxuXHJcbiAgICBhZnRlckFsbCgoKSA9PiB7XHJcbiAgICAgICAgamVzdC51c2VSZWFsVGltZXJzKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZXNjcmliZSgnY2FsY3VsYXRlRmVlQXN5bmMgdjAnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZmVlTW9kZWxWZXJzaW9uID0gMDtcclxuICAgICAgICBpdCgnc2hvdWxkIGNhbGN1bGF0ZSB2MCBmZWUgZm9yIFJGUW0gY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBHaXZlblxyXG4gICAgICAgICAgICBjb25zdCBpc1NlbGxpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBpc1Vud3JhcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBhc3NldEZpbGxBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDAuMzQ1ZTE4KTtcclxuICAgICAgICAgICAgY29uc3QgdHJhZGVTaXplQnBzID0gNTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZlZVNlcnZpY2U6IEZlZVNlcnZpY2UgPSBidWlsZEZlZVNlcnZpY2Uoe1xyXG4gICAgICAgICAgICAgICAgZmVlTW9kZWxDb25maWd1cmF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmFrZVJhdGlvOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYWRlU2l6ZUJwcyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnYXNQcmljZSxcclxuICAgICAgICAgICAgICAgIHRyYWRlVG9rZW5QcmljZTogdGFrZXJUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgZmVlVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBXaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IHsgZmVlV2l0aERldGFpbHM6IGZlZSB9ID0gYXdhaXQgZmVlU2VydmljZS5jYWxjdWxhdGVGZWVBc3luYyh7XHJcbiAgICAgICAgICAgICAgICB3b3JrZmxvdyxcclxuICAgICAgICAgICAgICAgIGNoYWluSWQ6IDEzMzcsXHJcbiAgICAgICAgICAgICAgICBmZWVNb2RlbFZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICB0eE9yaWdpbixcclxuICAgICAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICB0YWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxNYWtlclRva2VuOiBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgaXNVbndyYXAsXHJcbiAgICAgICAgICAgICAgICBpc1NlbGxpbmcsXHJcbiAgICAgICAgICAgICAgICBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICB0YWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgaXNGaXJtOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgdHJhZGVyOiB0YWtlckFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICBpbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoZW5cclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRHYXNGZWVBbW91bnQgPSBnYXNQcmljZS50aW1lcyhnYXNFc3RpbWF0ZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZEZlZTogRmVlV2l0aERldGFpbHMgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnZml4ZWQnLFxyXG4gICAgICAgICAgICAgICAgdG9rZW46IGZlZVRva2VuQWRkcmVzcyxcclxuICAgICAgICAgICAgICAgIGFtb3VudDogZXhwZWN0ZWRHYXNGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAga2luZDogJ2dhc09ubHknLFxyXG4gICAgICAgICAgICAgICAgICAgIGZlZU1vZGVsVmVyc2lvbixcclxuICAgICAgICAgICAgICAgICAgICBnYXNGZWVBbW91bnQ6IGV4cGVjdGVkR2FzRmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGdhc1ByaWNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJyZWFrZG93bjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGdhczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGV4cGVjdGVkR2FzRmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXNQcmljZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZEdhczogbmV3IEJpZ051bWJlcihnYXNFc3RpbWF0ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjb252ZXJzaW9uUmF0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBuYXRpdmVUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZXhwZWN0KGZlZSkudG9NYXRjaE9iamVjdChleHBlY3RlZEZlZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaXQoJ3Nob3VsZCBjYWxjdWxhdGUgdjAgZmVlIGZvciBSRlF0IGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgLy8gR2l2ZW5cclxuICAgICAgICAgICAgY29uc3QgaXNTZWxsaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29uc3QgaXNVbndyYXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgYXNzZXRGaWxsQW1vdW50ID0gbmV3IEJpZ051bWJlcigwLjM0NWUxOCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRyYWRlU2l6ZUJwcyA9IDU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmZWVTZXJ2aWNlOiBGZWVTZXJ2aWNlID0gYnVpbGRGZWVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgIGZlZU1vZGVsQ29uZmlndXJhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpblJha2VSYXRpbzogMCxcclxuICAgICAgICAgICAgICAgICAgICB0cmFkZVNpemVCcHMsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2FzUHJpY2UsXHJcbiAgICAgICAgICAgICAgICB0cmFkZVRva2VuUHJpY2U6IHRha2VyVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgIGZlZVRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gV2hlblxyXG4gICAgICAgICAgICBjb25zdCB7IGZlZVdpdGhEZXRhaWxzOiBmZWUgfSA9IGF3YWl0IGZlZVNlcnZpY2UuY2FsY3VsYXRlRmVlQXN5bmMoe1xyXG4gICAgICAgICAgICAgICAgd29ya2Zsb3c6ICdyZnF0JyxcclxuICAgICAgICAgICAgICAgIGNoYWluSWQ6IDEzMzcsXHJcbiAgICAgICAgICAgICAgICBmZWVNb2RlbFZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICB0eE9yaWdpbixcclxuICAgICAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICB0YWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxNYWtlclRva2VuOiBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgaXNVbndyYXAsXHJcbiAgICAgICAgICAgICAgICBpc1NlbGxpbmcsXHJcbiAgICAgICAgICAgICAgICBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICB0YWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgaXNGaXJtOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgdHJhZGVyOiB0YWtlckFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICBpbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoZW5cclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRGZWU6IEZlZVdpdGhEZXRhaWxzID0ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2ZpeGVkJyxcclxuICAgICAgICAgICAgICAgIHRva2VuOiBmZWVUb2tlbkFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICBhbW91bnQ6IG5ldyBCaWdOdW1iZXIoMCksXHJcbiAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAga2luZDogJ2dhc09ubHknLFxyXG4gICAgICAgICAgICAgICAgICAgIGZlZU1vZGVsVmVyc2lvbixcclxuICAgICAgICAgICAgICAgICAgICBnYXNGZWVBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMCksXHJcbiAgICAgICAgICAgICAgICAgICAgZ2FzUHJpY2U6IG5ldyBCaWdOdW1iZXIoMCksXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnJlYWtkb3duOiB7fSxcclxuICAgICAgICAgICAgICAgIGNvbnZlcnNpb25SYXRlczoge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hdGl2ZVRva2VuQmFzZVVuaXRQcmljZVVzZDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBmZWVUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleHBlY3QoZmVlKS50b01hdGNoT2JqZWN0KGV4cGVjdGVkRmVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRlc2NyaWJlKCdjYWxjdWxhdGVGZWVBc3luYyB2MScsICgpID0+IHtcclxuICAgICAgICBjb25zdCBmZWVNb2RlbFZlcnNpb24gPSAxO1xyXG4gICAgICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIHYxIGZlZSBmb3IgUkZRbSBzZWxsaW5nIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgLy8gR2l2ZW5cclxuICAgICAgICAgICAgY29uc3QgaXNTZWxsaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29uc3QgaXNVbndyYXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgYXNzZXRGaWxsQW1vdW50ID0gbmV3IEJpZ051bWJlcigwLjM0NWUxOCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRyYWRlU2l6ZUJwcyA9IDU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmZWVTZXJ2aWNlOiBGZWVTZXJ2aWNlID0gYnVpbGRGZWVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgIGZlZU1vZGVsQ29uZmlndXJhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpblJha2VSYXRpbzogMCxcclxuICAgICAgICAgICAgICAgICAgICB0cmFkZVNpemVCcHMsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2FzUHJpY2UsXHJcbiAgICAgICAgICAgICAgICB0cmFkZVRva2VuUHJpY2U6IHRha2VyVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgIGZlZVRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gV2hlblxyXG4gICAgICAgICAgICBjb25zdCB7IGZlZVdpdGhEZXRhaWxzOiBmZWUgfSA9IGF3YWl0IGZlZVNlcnZpY2UuY2FsY3VsYXRlRmVlQXN5bmMoe1xyXG4gICAgICAgICAgICAgICAgd29ya2Zsb3csXHJcbiAgICAgICAgICAgICAgICBjaGFpbklkOiAxMzM3LFxyXG4gICAgICAgICAgICAgICAgZmVlTW9kZWxWZXJzaW9uLFxyXG4gICAgICAgICAgICAgICAgdHhPcmlnaW4sXHJcbiAgICAgICAgICAgICAgICBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsTWFrZXJUb2tlbjogbWFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgIG1ha2VyVG9rZW5EZWNpbWFscyxcclxuICAgICAgICAgICAgICAgIHRha2VyVG9rZW5EZWNpbWFscyxcclxuICAgICAgICAgICAgICAgIGlzVW53cmFwLFxyXG4gICAgICAgICAgICAgICAgaXNTZWxsaW5nLFxyXG4gICAgICAgICAgICAgICAgYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgIGlzRmlybTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzcyxcclxuICAgICAgICAgICAgICAgIHRyYWRlcjogdGFrZXJBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgaW50ZWdyYXRvcixcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBUaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkR2FzRmVlQW1vdW50ID0gZ2FzUHJpY2UudGltZXMoZ2FzRXN0aW1hdGUpO1xyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFplcm9FeEZlZUFtb3VudCA9IGFzc2V0RmlsbEFtb3VudFxyXG4gICAgICAgICAgICAgICAgLnRpbWVzKHRyYWRlU2l6ZUJwcyAqIEJQU19UT19SQVRJTylcclxuICAgICAgICAgICAgICAgIC50aW1lcyh0YWtlclRva2VuUHJpY2UpXHJcbiAgICAgICAgICAgICAgICAuZGl2KGZlZVRva2VuUHJpY2UpXHJcbiAgICAgICAgICAgICAgICAuaW50ZWdlclZhbHVlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVG90YWxGZWVBbW91bnQgPSBleHBlY3RlZFplcm9FeEZlZUFtb3VudC5wbHVzKGV4cGVjdGVkR2FzRmVlQW1vdW50KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkRmVlOiBGZWVXaXRoRGV0YWlscyA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdmaXhlZCcsXHJcbiAgICAgICAgICAgICAgICB0b2tlbjogZmVlVG9rZW5BZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgYW1vdW50OiBleHBlY3RlZFRvdGFsRmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgZGV0YWlsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGtpbmQ6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICAgICAgICAgICBmZWVNb2RlbFZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgZ2FzRmVlQW1vdW50OiBleHBlY3RlZEdhc0ZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICBnYXNQcmljZSxcclxuICAgICAgICAgICAgICAgICAgICB6ZXJvRXhGZWVBbW91bnQ6IGV4cGVjdGVkWmVyb0V4RmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYWRlU2l6ZUJwcyxcclxuICAgICAgICAgICAgICAgICAgICBmZWVUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IGZlZVRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IHRha2VyVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgICAgICBtYWtlclRva2VuQmFzZVVuaXRQcmljZVVzZDogbnVsbCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBicmVha2Rvd246IHtcclxuICAgICAgICAgICAgICAgICAgICBnYXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBleHBlY3RlZEdhc0ZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FzUHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRHYXM6IG5ldyBCaWdOdW1iZXIoZ2FzRXN0aW1hdGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgemVyb0V4OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogZXhwZWN0ZWRaZXJvRXhGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6ICd2b2x1bWUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhZGVTaXplQnBzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY29udmVyc2lvblJhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmF0aXZlVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBmZWVUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZlZVRva2VuQmFzZVVuaXRQcmljZVVzZDogZmVlVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlclRva2VuQmFzZVVuaXRQcmljZVVzZDogdGFrZXJUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZXhwZWN0KGZlZSkudG9NYXRjaE9iamVjdChleHBlY3RlZEZlZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaXQoJ3Nob3VsZCBjYWxjdWxhdGUgdjEgZmVlIGZvciBSRlFtIGJ1eWluZyBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEdpdmVuXHJcbiAgICAgICAgICAgIGNvbnN0IGlzU2VsbGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBpc1Vud3JhcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBhc3NldEZpbGxBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDUwMDBlNik7XHJcbiAgICAgICAgICAgIGNvbnN0IHRyYWRlU2l6ZUJwcyA9IDQ7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmZWVTZXJ2aWNlOiBGZWVTZXJ2aWNlID0gYnVpbGRGZWVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgIGZlZU1vZGVsQ29uZmlndXJhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpblJha2VSYXRpbzogMCxcclxuICAgICAgICAgICAgICAgICAgICB0cmFkZVNpemVCcHMsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2FzUHJpY2UsXHJcbiAgICAgICAgICAgICAgICB0cmFkZVRva2VuUHJpY2U6IG1ha2VyVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgIGZlZVRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gV2hlblxyXG4gICAgICAgICAgICBjb25zdCB7IGZlZVdpdGhEZXRhaWxzOiBmZWUgfSA9IGF3YWl0IGZlZVNlcnZpY2UuY2FsY3VsYXRlRmVlQXN5bmMoe1xyXG4gICAgICAgICAgICAgICAgd29ya2Zsb3csXHJcbiAgICAgICAgICAgICAgICBjaGFpbklkOiAxMzM3LFxyXG4gICAgICAgICAgICAgICAgZmVlTW9kZWxWZXJzaW9uLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgIHRha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbE1ha2VyVG9rZW46IG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICBtYWtlclRva2VuRGVjaW1hbHMsXHJcbiAgICAgICAgICAgICAgICB0YWtlclRva2VuRGVjaW1hbHMsXHJcbiAgICAgICAgICAgICAgICBpc1Vud3JhcCxcclxuICAgICAgICAgICAgICAgIGlzU2VsbGluZyxcclxuICAgICAgICAgICAgICAgIGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgIG1ha2VyQW1vdW50OiBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICBpc0Zpcm06IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgaW50ZWdyYXRvcixcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBUaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkR2FzRmVlQW1vdW50ID0gZ2FzUHJpY2UudGltZXMoZ2FzRXN0aW1hdGUpO1xyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFplcm9FeEZlZUFtb3VudCA9IGFzc2V0RmlsbEFtb3VudFxyXG4gICAgICAgICAgICAgICAgLnRpbWVzKHRyYWRlU2l6ZUJwcyAqIEJQU19UT19SQVRJTylcclxuICAgICAgICAgICAgICAgIC50aW1lcyhtYWtlclRva2VuUHJpY2UpXHJcbiAgICAgICAgICAgICAgICAuZGl2KGZlZVRva2VuUHJpY2UpXHJcbiAgICAgICAgICAgICAgICAuaW50ZWdlclZhbHVlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVG90YWxGZWVBbW91bnQgPSBleHBlY3RlZFplcm9FeEZlZUFtb3VudC5wbHVzKGV4cGVjdGVkR2FzRmVlQW1vdW50KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkRmVlOiBGZWVXaXRoRGV0YWlscyA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdmaXhlZCcsXHJcbiAgICAgICAgICAgICAgICB0b2tlbjogZmVlVG9rZW5BZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgYW1vdW50OiBleHBlY3RlZFRvdGFsRmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgZGV0YWlsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGtpbmQ6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICAgICAgICAgICBmZWVNb2RlbFZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgZ2FzRmVlQW1vdW50OiBleHBlY3RlZEdhc0ZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICBnYXNQcmljZSxcclxuICAgICAgICAgICAgICAgICAgICB6ZXJvRXhGZWVBbW91bnQ6IGV4cGVjdGVkWmVyb0V4RmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYWRlU2l6ZUJwcyxcclxuICAgICAgICAgICAgICAgICAgICBmZWVUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IGZlZVRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG1ha2VyVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBicmVha2Rvd246IHtcclxuICAgICAgICAgICAgICAgICAgICBnYXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBleHBlY3RlZEdhc0ZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FzUHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRHYXM6IG5ldyBCaWdOdW1iZXIoZ2FzRXN0aW1hdGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgemVyb0V4OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogZXhwZWN0ZWRaZXJvRXhGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6ICd2b2x1bWUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhZGVTaXplQnBzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY29udmVyc2lvblJhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmF0aXZlVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBmZWVUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZlZVRva2VuQmFzZVVuaXRQcmljZVVzZDogZmVlVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlclRva2VuQmFzZVVuaXRQcmljZVVzZDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBtYWtlclRva2VuQmFzZVVuaXRQcmljZVVzZDogbWFrZXJUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZXhwZWN0KGZlZSkudG9NYXRjaE9iamVjdChleHBlY3RlZEZlZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaXQoJ3Nob3VsZCBjYWxjdWxhdGUgdjEgZmVlIGZvciBSRlF0IHNlbGxpbmcgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBHaXZlblxyXG4gICAgICAgICAgICBjb25zdCBpc1NlbGxpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBpc1Vud3JhcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBhc3NldEZpbGxBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDAuMzQ1ZTE4KTtcclxuICAgICAgICAgICAgY29uc3QgdHJhZGVTaXplQnBzID0gNTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZlZVNlcnZpY2U6IEZlZVNlcnZpY2UgPSBidWlsZEZlZVNlcnZpY2Uoe1xyXG4gICAgICAgICAgICAgICAgZmVlTW9kZWxDb25maWd1cmF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmFrZVJhdGlvOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYWRlU2l6ZUJwcyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnYXNQcmljZSxcclxuICAgICAgICAgICAgICAgIHRyYWRlVG9rZW5QcmljZTogdGFrZXJUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgZmVlVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBXaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IHsgZmVlV2l0aERldGFpbHM6IGZlZSB9ID0gYXdhaXQgZmVlU2VydmljZS5jYWxjdWxhdGVGZWVBc3luYyh7XHJcbiAgICAgICAgICAgICAgICB3b3JrZmxvdzogJ3JmcXQnLFxyXG4gICAgICAgICAgICAgICAgY2hhaW5JZDogMTMzNyxcclxuICAgICAgICAgICAgICAgIGZlZU1vZGVsVmVyc2lvbixcclxuICAgICAgICAgICAgICAgIHR4T3JpZ2luLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgIHRha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbE1ha2VyVG9rZW46IG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICBtYWtlclRva2VuRGVjaW1hbHMsXHJcbiAgICAgICAgICAgICAgICB0YWtlclRva2VuRGVjaW1hbHMsXHJcbiAgICAgICAgICAgICAgICBpc1Vud3JhcCxcclxuICAgICAgICAgICAgICAgIGlzU2VsbGluZyxcclxuICAgICAgICAgICAgICAgIGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgIHRha2VyQW1vdW50OiBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICBpc0Zpcm06IHRydWUsXHJcbiAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICB0cmFkZXI6IHRha2VyQWRkcmVzcyxcclxuICAgICAgICAgICAgICAgIGludGVncmF0b3IsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gVGhlblxyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFplcm9FeEZlZUFtb3VudCA9IGFzc2V0RmlsbEFtb3VudFxyXG4gICAgICAgICAgICAgICAgLnRpbWVzKHRyYWRlU2l6ZUJwcyAqIEJQU19UT19SQVRJTylcclxuICAgICAgICAgICAgICAgIC50aW1lcyh0YWtlclRva2VuUHJpY2UpXHJcbiAgICAgICAgICAgICAgICAuZGl2KGZlZVRva2VuUHJpY2UpXHJcbiAgICAgICAgICAgICAgICAuaW50ZWdlclZhbHVlKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZEZlZTogRmVlV2l0aERldGFpbHMgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnZml4ZWQnLFxyXG4gICAgICAgICAgICAgICAgdG9rZW46IGZlZVRva2VuQWRkcmVzcyxcclxuICAgICAgICAgICAgICAgIGFtb3VudDogZXhwZWN0ZWRaZXJvRXhGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAga2luZDogJ2RlZmF1bHQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZlZU1vZGVsVmVyc2lvbixcclxuICAgICAgICAgICAgICAgICAgICBnYXNGZWVBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMCksXHJcbiAgICAgICAgICAgICAgICAgICAgZ2FzUHJpY2U6IG5ldyBCaWdOdW1iZXIoMCksXHJcbiAgICAgICAgICAgICAgICAgICAgemVyb0V4RmVlQW1vdW50OiBleHBlY3RlZFplcm9FeEZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICB0cmFkZVNpemVCcHMsXHJcbiAgICAgICAgICAgICAgICAgICAgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBmZWVUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiB0YWtlclRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnJlYWtkb3duOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgemVyb0V4OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogZXhwZWN0ZWRaZXJvRXhGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6ICd2b2x1bWUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhZGVTaXplQnBzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY29udmVyc2lvblJhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmF0aXZlVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBmZWVUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZlZVRva2VuQmFzZVVuaXRQcmljZVVzZDogZmVlVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlclRva2VuQmFzZVVuaXRQcmljZVVzZDogdGFrZXJUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZXhwZWN0KGZlZSkudG9NYXRjaE9iamVjdChleHBlY3RlZEZlZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaXQoJ3Nob3VsZCBub3QgaW5jbHVkZSB6ZXJvRXggZmVlIGZvciBub24tY29uZmlndXJlZCBwYWlycycsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgLy8gR2l2ZW5cclxuICAgICAgICAgICAgY29uc3QgaXNTZWxsaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29uc3QgaXNVbndyYXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgYXNzZXRGaWxsQW1vdW50ID0gbmV3IEJpZ051bWJlcigwLjM0NWUxOCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmZWVTZXJ2aWNlOiBGZWVTZXJ2aWNlID0gYnVpbGRGZWVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgIGdhc1ByaWNlLFxyXG4gICAgICAgICAgICAgICAgdHJhZGVUb2tlblByaWNlOiB0YWtlclRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICBmZWVUb2tlblByaWNlLFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFdoZW5cclxuICAgICAgICAgICAgY29uc3QgeyBmZWVXaXRoRGV0YWlsczogZmVlIH0gPSBhd2FpdCBmZWVTZXJ2aWNlLmNhbGN1bGF0ZUZlZUFzeW5jKHtcclxuICAgICAgICAgICAgICAgIHdvcmtmbG93LFxyXG4gICAgICAgICAgICAgICAgY2hhaW5JZDogMTMzNyxcclxuICAgICAgICAgICAgICAgIGZlZU1vZGVsVmVyc2lvbixcclxuICAgICAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICB0YWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxNYWtlclRva2VuOiBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgaXNVbndyYXAsXHJcbiAgICAgICAgICAgICAgICBpc1NlbGxpbmcsXHJcbiAgICAgICAgICAgICAgICBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICB0YWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgaXNGaXJtOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzcyxcclxuICAgICAgICAgICAgICAgIGludGVncmF0b3IsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gVGhlblxyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZEdhc0ZlZUFtb3VudCA9IGdhc1ByaWNlLnRpbWVzKGdhc0VzdGltYXRlKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkRmVlOiBGZWVXaXRoRGV0YWlscyA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdmaXhlZCcsXHJcbiAgICAgICAgICAgICAgICB0b2tlbjogZmVlVG9rZW5BZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgYW1vdW50OiBleHBlY3RlZEdhc0ZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBraW5kOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZmVlTW9kZWxWZXJzaW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGdhc0ZlZUFtb3VudDogZXhwZWN0ZWRHYXNGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2FzUHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgemVyb0V4RmVlQW1vdW50OiBuZXcgQmlnTnVtYmVyKDApLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYWRlU2l6ZUJwczogMCxcclxuICAgICAgICAgICAgICAgICAgICBmZWVUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnJlYWtkb3duOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogZXhwZWN0ZWRHYXNGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhc1ByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkR2FzOiBuZXcgQmlnTnVtYmVyKGdhc0VzdGltYXRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHplcm9FeDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IG5ldyBCaWdOdW1iZXIoMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6ICd2b2x1bWUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhZGVTaXplQnBzOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY29udmVyc2lvblJhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmF0aXZlVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGZlZVRva2VuQmFzZVVuaXRQcmljZVVzZDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlclRva2VuQmFzZVVuaXRQcmljZVVzZDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBtYWtlclRva2VuQmFzZVVuaXRQcmljZVVzZDogbnVsbCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGV4cGVjdChmZWUpLnRvTWF0Y2hPYmplY3QoZXhwZWN0ZWRGZWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGl0KCdzaG91bGQgbm90IGluY2x1ZGUgemVyb0V4IGZlZSBpZiBwcmljZSBvcmFjbGUgaXMgZG93bicsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgLy8gR2l2ZW5cclxuICAgICAgICAgICAgY29uc3QgaXNTZWxsaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzVW53cmFwID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGFzc2V0RmlsbEFtb3VudCA9IG5ldyBCaWdOdW1iZXIoNTAwMGU2KTtcclxuICAgICAgICAgICAgY29uc3QgdHJhZGVTaXplQnBzID0gNDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZlZVNlcnZpY2U6IEZlZVNlcnZpY2UgPSBidWlsZEZlZVNlcnZpY2Uoe1xyXG4gICAgICAgICAgICAgICAgZmVlTW9kZWxDb25maWd1cmF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmFrZVJhdGlvOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYWRlU2l6ZUJwcyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnYXNQcmljZSxcclxuICAgICAgICAgICAgICAgIHRyYWRlVG9rZW5QcmljZTogbWFrZXJUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgZmVlVG9rZW5QcmljZTogbnVsbCxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBXaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IHsgZmVlV2l0aERldGFpbHM6IGZlZSB9ID0gYXdhaXQgZmVlU2VydmljZS5jYWxjdWxhdGVGZWVBc3luYyh7XHJcbiAgICAgICAgICAgICAgICB3b3JrZmxvdyxcclxuICAgICAgICAgICAgICAgIGNoYWluSWQ6IDEzMzcsXHJcbiAgICAgICAgICAgICAgICBmZWVNb2RlbFZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICB0eE9yaWdpbixcclxuICAgICAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICB0YWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxNYWtlclRva2VuOiBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgaXNVbndyYXAsXHJcbiAgICAgICAgICAgICAgICBpc1NlbGxpbmcsXHJcbiAgICAgICAgICAgICAgICBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICBtYWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgaXNGaXJtOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgdHJhZGVyOiB0YWtlckFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICBpbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoZW5cclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRHYXNGZWVBbW91bnQgPSBnYXNQcmljZS50aW1lcyhnYXNFc3RpbWF0ZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZEZlZTogRmVlV2l0aERldGFpbHMgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnZml4ZWQnLFxyXG4gICAgICAgICAgICAgICAgdG9rZW46IGZlZVRva2VuQWRkcmVzcyxcclxuICAgICAgICAgICAgICAgIGFtb3VudDogZXhwZWN0ZWRHYXNGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAga2luZDogJ2dhc09ubHknLFxyXG4gICAgICAgICAgICAgICAgICAgIGZlZU1vZGVsVmVyc2lvbixcclxuICAgICAgICAgICAgICAgICAgICBnYXNGZWVBbW91bnQ6IGV4cGVjdGVkR2FzRmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGdhc1ByaWNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJyZWFrZG93bjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGdhczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGV4cGVjdGVkR2FzRmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXNQcmljZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZEdhczogbmV3IEJpZ051bWJlcihnYXNFc3RpbWF0ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjb252ZXJzaW9uUmF0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBuYXRpdmVUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZXhwZWN0KGZlZSkudG9NYXRjaE9iamVjdChleHBlY3RlZEZlZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZXNjcmliZSgnY2FsY3VsYXRlRmVlQXN5bmMgdjInLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZmVlTW9kZWxWZXJzaW9uID0gMjtcclxuICAgICAgICBpdCgnc2hvdWxkIGNhbGN1bGF0ZSB2MiBgcHJpY2UgaW1wcm92ZW1lbnRgIGJhc2VkIGZlZSBmb3Igc2VsbCBjb3JyZWN0bHkgaWYgcHJpY2UgaW1wcm92ZW1lbnQgZGV0ZWN0aW9uIHN1Y2NlZWRlZCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgLy8gR2l2ZW5cclxuICAgICAgICAgICAgY29uc3QgaXNTZWxsaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29uc3QgaXNVbndyYXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgYXNzZXRGaWxsQW1vdW50ID0gbmV3IEJpZ051bWJlcigxZTE4KTtcclxuICAgICAgICAgICAgY29uc3QgbWFyZ2luUmFrZVJhdGlvID0gMC41O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYW1tTWFrZXJBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDM0NTBlNik7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkU2xpcHBhZ2UgPSBuZXcgQmlnTnVtYmVyKC0wLjAxKTtcclxuICAgICAgICAgICAgY29uc3QgZXN0aW1hdGVkQW1tR2FzRmVlV2VpID0gbmV3IEJpZ051bWJlcigxMDBlOSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlY29kZWRVbmlxdWVJZCA9ICcxMjM0LTU2NzgnO1xyXG4gICAgICAgICAgICBjb25zdCBhbW1RdW90ZTogQW1tUXVvdGUgPSB7XHJcbiAgICAgICAgICAgICAgICBtYWtlckFtb3VudDogYW1tTWFrZXJBbW91bnQsXHJcbiAgICAgICAgICAgICAgICB0YWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWRTbGlwcGFnZSxcclxuICAgICAgICAgICAgICAgIGVzdGltYXRlZEdhc0ZlZVdlaTogZXN0aW1hdGVkQW1tR2FzRmVlV2VpLFxyXG4gICAgICAgICAgICAgICAgZGVjb2RlZFVuaXF1ZUlkLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbW0xTWFrZXJBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDM1NTBlNik7XHJcbiAgICAgICAgICAgIGNvbnN0IG1tMk1ha2VyQW1vdW50ID0gbmV3IEJpZ051bWJlcigzNjAwZTYpO1xyXG4gICAgICAgICAgICBjb25zdCBtbVF1b3RlczogSW5kaWNhdGl2ZVF1b3RlW10gPSBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXI6ICdtYWtlcjFBZGRyZXNzJyxcclxuICAgICAgICAgICAgICAgICAgICBtYWtlclVyaTogJ2h0dHA6Ly9tYWtlcjEuY29tJyxcclxuICAgICAgICAgICAgICAgICAgICBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJBbW91bnQ6IG1tMU1ha2VyQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyQW1vdW50OiBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhwaXJ5OiBuZXcgQmlnTnVtYmVyKDE2NTI3MjI3NjcpLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBtYWtlcjogJ21ha2VyMkFkZHJlc3MnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVXJpOiAnaHR0cDovL21ha2VyMi5jb20nLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgICAgICBtYWtlckFtb3VudDogbW0yTWFrZXJBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICBleHBpcnk6IG5ldyBCaWdOdW1iZXIoMTY1MjcyMjc2NyksXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZmVlU2VydmljZTogRmVlU2VydmljZSA9IGJ1aWxkRmVlU2VydmljZSh7XHJcbiAgICAgICAgICAgICAgICBmZWVNb2RlbENvbmZpZ3VyYXRpb246IHtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5SYWtlUmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhZGVTaXplQnBzOiAwLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdhc1ByaWNlLFxyXG4gICAgICAgICAgICAgICAgdHJhZGVUb2tlblByaWNlOiBtYWtlclRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICBmZWVUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgYW1tUXVvdGUsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcXVvdGVDb250ZXh0OiBRdW90ZUNvbnRleHQgPSB7XHJcbiAgICAgICAgICAgICAgICB3b3JrZmxvdyxcclxuICAgICAgICAgICAgICAgIGNoYWluSWQ6IDEzMzcsXHJcbiAgICAgICAgICAgICAgICBpc0Zpcm06IHRydWUsXHJcbiAgICAgICAgICAgICAgICBmZWVNb2RlbFZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICB0eE9yaWdpbixcclxuICAgICAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICB0YWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxNYWtlclRva2VuOiBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgaXNVbndyYXAsXHJcbiAgICAgICAgICAgICAgICBpc1NlbGxpbmcsXHJcbiAgICAgICAgICAgICAgICBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICB0YWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgdHJhZGVyOiB0YWtlckFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICBpbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gV2hlblxyXG4gICAgICAgICAgICBqZXN0LnVzZUZha2VUaW1lcnMoKS5zZXRTeXN0ZW1UaW1lKDE2NTAwMDAwMDAwMDApO1xyXG4gICAgICAgICAgICBjb25zdCB7IGZlZVdpdGhEZXRhaWxzLCBxdW90ZXNXaXRoR2FzRmVlLCBhbW1RdW90ZVVuaXF1ZUlkIH0gPSBhd2FpdCBmZWVTZXJ2aWNlLmNhbGN1bGF0ZUZlZUFzeW5jKFxyXG4gICAgICAgICAgICAgICAgcXVvdGVDb250ZXh0LFxyXG4gICAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobW1RdW90ZXMpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoZW5cclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRHYXNGZWVBbW91bnQgPSBnYXNQcmljZS50aW1lcyhnYXNFc3RpbWF0ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkTWFyZ2luID0gbW0yTWFrZXJBbW91bnRcclxuICAgICAgICAgICAgICAgIC5taW51cyhhbW1NYWtlckFtb3VudC50aW1lcyhuZXcgQmlnTnVtYmVyKDEpLnBsdXMoZXhwZWN0ZWRTbGlwcGFnZSkpKVxyXG4gICAgICAgICAgICAgICAgLnRpbWVzKG1ha2VyVG9rZW5QcmljZSlcclxuICAgICAgICAgICAgICAgIC5kaXYoZmVlVG9rZW5QcmljZSlcclxuICAgICAgICAgICAgICAgIC5wbHVzKGVzdGltYXRlZEFtbUdhc0ZlZVdlaSlcclxuICAgICAgICAgICAgICAgIC5pbnRlZ2VyVmFsdWUoKTtcclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRaZXJvRXhGZWVBbW91bnQgPSBleHBlY3RlZE1hcmdpbi50aW1lcyhtYXJnaW5SYWtlUmF0aW8pLmludGVnZXJWYWx1ZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFRvdGFsRmVlQW1vdW50ID0gZXhwZWN0ZWRaZXJvRXhGZWVBbW91bnQucGx1cyhleHBlY3RlZEdhc0ZlZUFtb3VudCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZEZlZTogRmVlV2l0aERldGFpbHMgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnZml4ZWQnLFxyXG4gICAgICAgICAgICAgICAgdG9rZW46IGZlZVRva2VuQWRkcmVzcyxcclxuICAgICAgICAgICAgICAgIGFtb3VudDogZXhwZWN0ZWRUb3RhbEZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBraW5kOiAnbWFyZ2luJyxcclxuICAgICAgICAgICAgICAgICAgICBmZWVNb2RlbFZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgZ2FzRmVlQW1vdW50OiBleHBlY3RlZEdhc0ZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICBnYXNQcmljZSxcclxuICAgICAgICAgICAgICAgICAgICB6ZXJvRXhGZWVBbW91bnQ6IGV4cGVjdGVkWmVyb0V4RmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogZXhwZWN0ZWRNYXJnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmFrZVJhdGlvLFxyXG4gICAgICAgICAgICAgICAgICAgIGZlZVRva2VuQmFzZVVuaXRQcmljZVVzZDogZmVlVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlclRva2VuQmFzZVVuaXRQcmljZVVzZDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBtYWtlclRva2VuQmFzZVVuaXRQcmljZVVzZDogbWFrZXJUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJyZWFrZG93bjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGdhczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGV4cGVjdGVkR2FzRmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXNQcmljZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZEdhczogbmV3IEJpZ051bWJlcihnYXNFc3RpbWF0ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB6ZXJvRXg6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBleHBlY3RlZFplcm9FeEZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2luZDogJ3ByaWNlX2ltcHJvdmVtZW50JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlSW1wcm92ZW1lbnQ6IGV4cGVjdGVkTWFyZ2luLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFrZVJhdGlvOiBtYXJnaW5SYWtlUmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjb252ZXJzaW9uUmF0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBuYXRpdmVUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IGZlZVRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBmZWVUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBtYWtlclRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleHBlY3QoZmVlV2l0aERldGFpbHMpLnRvTWF0Y2hPYmplY3QoZXhwZWN0ZWRGZWUpO1xyXG4gICAgICAgICAgICBleHBlY3QocXVvdGVzV2l0aEdhc0ZlZSkudG9NYXRjaE9iamVjdChtbVF1b3Rlcyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChhbW1RdW90ZVVuaXF1ZUlkKS50b0JlKGRlY29kZWRVbmlxdWVJZCk7XHJcblxyXG4gICAgICAgICAgICAvLyBXaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IHJldmlzZWRRdW90ZXMgPSBhd2FpdCBmZWVTZXJ2aWNlLnJldmlzZVF1b3Rlc0FzeW5jKFxyXG4gICAgICAgICAgICAgICAgLy8gJGVzbGludC1maXgtbWUgaHR0cHM6Ly9naXRodWIuY29tL3JoaW5vZGF2aWQvZXNsaW50LWZpeC1tZVxyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cclxuICAgICAgICAgICAgICAgIHF1b3Rlc1dpdGhHYXNGZWUhLFxyXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWRaZXJvRXhGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICBxdW90ZUNvbnRleHQsXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyBUaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkUmV2aXNlZFF1b3RlcyA9IG1tUXVvdGVzLm1hcCgocXVvdGUpID0+XHJcbiAgICAgICAgICAgICAgICByZXZpc2VRdW90ZVdpdGhGZWVzKHF1b3RlLCBleHBlY3RlZFplcm9FeEZlZUFtb3VudCwgaXNTZWxsaW5nLCBtYWtlclRva2VuUHJpY2UsIGZlZVRva2VuUHJpY2UpLFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgZXhwZWN0KHJldmlzZWRRdW90ZXMpLnRvTWF0Y2hPYmplY3QoZXhwZWN0ZWRSZXZpc2VkUXVvdGVzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpdCgnc2hvdWxkIGNhbGN1bGF0ZSB2MiBgcHJpY2UgaW1wcm92ZW1lbnRgIGJhc2VkIGZlZSBmb3IgYnV5IGNvcnJlY3RseSBpZiBwcmljZSBpbXByb3ZlbWVudCBkZXRlY3Rpb24gc3VjY2VlZGVkJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBHaXZlblxyXG4gICAgICAgICAgICBjb25zdCBpc1NlbGxpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgaXNVbndyYXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgYXNzZXRGaWxsQW1vdW50ID0gbmV3IEJpZ051bWJlcigxZTE4KTtcclxuICAgICAgICAgICAgY29uc3QgbWFyZ2luUmFrZVJhdGlvID0gMC40O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYW1tVGFrZXJBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDM0NTBlNik7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkU2xpcHBhZ2UgPSBuZXcgQmlnTnVtYmVyKC0wLjEpO1xyXG4gICAgICAgICAgICBjb25zdCBlc3RpbWF0ZWRBbW1HYXNGZWVXZWkgPSBuZXcgQmlnTnVtYmVyKDEwMGU5KTtcclxuICAgICAgICAgICAgY29uc3QgZGVjb2RlZFVuaXF1ZUlkID0gJzEyMzQtNTY3OCc7XHJcbiAgICAgICAgICAgIGNvbnN0IGFtbVF1b3RlOiBBbW1RdW90ZSA9IHtcclxuICAgICAgICAgICAgICAgIG1ha2VyQW1vdW50OiBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICB0YWtlckFtb3VudDogYW1tVGFrZXJBbW91bnQsXHJcbiAgICAgICAgICAgICAgICBleHBlY3RlZFNsaXBwYWdlLFxyXG4gICAgICAgICAgICAgICAgZXN0aW1hdGVkR2FzRmVlV2VpOiBlc3RpbWF0ZWRBbW1HYXNGZWVXZWksXHJcbiAgICAgICAgICAgICAgICBkZWNvZGVkVW5pcXVlSWQsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtbTFUYWtlckFtb3VudCA9IG5ldyBCaWdOdW1iZXIoMzQwMGU2KTtcclxuICAgICAgICAgICAgY29uc3QgbW0yVGFrZXJBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDMzNTBlNik7XHJcbiAgICAgICAgICAgIGNvbnN0IG1tUXVvdGVzOiBJbmRpY2F0aXZlUXVvdGVbXSA9IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBtYWtlcjogJ21ha2VyMUFkZHJlc3MnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVXJpOiAnaHR0cDovL21ha2VyMS5jb20nLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgICAgICBtYWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyQW1vdW50OiBtbTFUYWtlckFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICBleHBpcnk6IG5ldyBCaWdOdW1iZXIoMTY1MjcyMjc2NyksXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyOiAnbWFrZXIyQWRkcmVzcycsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJVcmk6ICdodHRwOi8vbWFrZXIyLmNvbScsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgICAgICB0YWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyQW1vdW50OiBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IG1tMlRha2VyQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyeTogbmV3IEJpZ051bWJlcigxNjUyNzIyNzY3KSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmZWVTZXJ2aWNlOiBGZWVTZXJ2aWNlID0gYnVpbGRGZWVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgIGZlZU1vZGVsQ29uZmlndXJhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpblJha2VSYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICB0cmFkZVNpemVCcHM6IDAsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2FzUHJpY2UsXHJcbiAgICAgICAgICAgICAgICB0cmFkZVRva2VuUHJpY2U6IHRha2VyVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgIGZlZVRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICBhbW1RdW90ZSxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBxdW90ZUNvbnRleHQ6IFF1b3RlQ29udGV4dCA9IHtcclxuICAgICAgICAgICAgICAgIHdvcmtmbG93LFxyXG4gICAgICAgICAgICAgICAgY2hhaW5JZDogMTMzNyxcclxuICAgICAgICAgICAgICAgIGZlZU1vZGVsVmVyc2lvbixcclxuICAgICAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICB0YWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxNYWtlclRva2VuOiBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgaXNVbndyYXAsXHJcbiAgICAgICAgICAgICAgICBpc1NlbGxpbmcsXHJcbiAgICAgICAgICAgICAgICBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICBtYWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgaXNGaXJtOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzcyxcclxuICAgICAgICAgICAgICAgIGludGVncmF0b3IsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBXaGVuXHJcbiAgICAgICAgICAgIGplc3QudXNlRmFrZVRpbWVycygpLnNldFN5c3RlbVRpbWUoMTY1MDAwMDAwMDAwMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgZmVlV2l0aERldGFpbHMsIHF1b3Rlc1dpdGhHYXNGZWUsIGFtbVF1b3RlVW5pcXVlSWQgfSA9IGF3YWl0IGZlZVNlcnZpY2UuY2FsY3VsYXRlRmVlQXN5bmMoXHJcbiAgICAgICAgICAgICAgICBxdW90ZUNvbnRleHQsXHJcbiAgICAgICAgICAgICAgICBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtbVF1b3Rlcyk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8gVGhlblxyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZEdhc0ZlZUFtb3VudCA9IGdhc1ByaWNlLnRpbWVzKGdhc0VzdGltYXRlKTtcclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRNYXJnaW4gPSBhbW1UYWtlckFtb3VudFxyXG4gICAgICAgICAgICAgICAgLnRpbWVzKG5ldyBCaWdOdW1iZXIoMSkubWludXMoZXhwZWN0ZWRTbGlwcGFnZSkpXHJcbiAgICAgICAgICAgICAgICAubWludXMobW0yVGFrZXJBbW91bnQpXHJcbiAgICAgICAgICAgICAgICAudGltZXModGFrZXJUb2tlblByaWNlKVxyXG4gICAgICAgICAgICAgICAgLmRpdihmZWVUb2tlblByaWNlKVxyXG4gICAgICAgICAgICAgICAgLnBsdXMoZXN0aW1hdGVkQW1tR2FzRmVlV2VpKVxyXG4gICAgICAgICAgICAgICAgLmludGVnZXJWYWx1ZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFplcm9FeEZlZUFtb3VudCA9IGV4cGVjdGVkTWFyZ2luLnRpbWVzKG1hcmdpblJha2VSYXRpbykuaW50ZWdlclZhbHVlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVG90YWxGZWVBbW91bnQgPSBleHBlY3RlZFplcm9FeEZlZUFtb3VudC5wbHVzKGV4cGVjdGVkR2FzRmVlQW1vdW50KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkRmVlOiBGZWVXaXRoRGV0YWlscyA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdmaXhlZCcsXHJcbiAgICAgICAgICAgICAgICB0b2tlbjogZmVlVG9rZW5BZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgYW1vdW50OiBleHBlY3RlZFRvdGFsRmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgZGV0YWlsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGtpbmQ6ICdtYXJnaW4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGZlZU1vZGVsVmVyc2lvbixcclxuICAgICAgICAgICAgICAgICAgICBnYXNGZWVBbW91bnQ6IGV4cGVjdGVkR2FzRmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGdhc1ByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHplcm9FeEZlZUFtb3VudDogZXhwZWN0ZWRaZXJvRXhGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBleHBlY3RlZE1hcmdpbixcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5SYWtlUmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBmZWVUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiB0YWtlclRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnJlYWtkb3duOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogZXhwZWN0ZWRHYXNGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhc1ByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkR2FzOiBuZXcgQmlnTnVtYmVyKGdhc0VzdGltYXRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHplcm9FeDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGV4cGVjdGVkWmVyb0V4RmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiAncHJpY2VfaW1wcm92ZW1lbnQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2VJbXByb3ZlbWVudDogZXhwZWN0ZWRNYXJnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWtlUmF0aW86IG1hcmdpblJha2VSYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNvbnZlcnNpb25SYXRlczoge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hdGl2ZVRva2VuQmFzZVVuaXRQcmljZVVzZDogZmVlVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgICAgICBmZWVUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IGZlZVRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IHRha2VyVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgICAgICBtYWtlclRva2VuQmFzZVVuaXRQcmljZVVzZDogbnVsbCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGV4cGVjdChmZWVXaXRoRGV0YWlscykudG9NYXRjaE9iamVjdChleHBlY3RlZEZlZSk7XHJcbiAgICAgICAgICAgIGV4cGVjdChxdW90ZXNXaXRoR2FzRmVlKS50b01hdGNoT2JqZWN0KG1tUXVvdGVzKTtcclxuICAgICAgICAgICAgZXhwZWN0KGFtbVF1b3RlVW5pcXVlSWQpLnRvQmUoZGVjb2RlZFVuaXF1ZUlkKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFdoZW5cclxuICAgICAgICAgICAgY29uc3QgcmV2aXNlZFF1b3RlcyA9IGF3YWl0IGZlZVNlcnZpY2UucmV2aXNlUXVvdGVzQXN5bmMoXHJcbiAgICAgICAgICAgICAgICAvLyAkZXNsaW50LWZpeC1tZSBodHRwczovL2dpdGh1Yi5jb20vcmhpbm9kYXZpZC9lc2xpbnQtZml4LW1lXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxyXG4gICAgICAgICAgICAgICAgcXVvdGVzV2l0aEdhc0ZlZSEsXHJcbiAgICAgICAgICAgICAgICBleHBlY3RlZFplcm9FeEZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgIHF1b3RlQ29udGV4dCxcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoZW5cclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRSZXZpc2VkUXVvdGVzID0gbW1RdW90ZXMubWFwKChxdW90ZSkgPT5cclxuICAgICAgICAgICAgICAgIHJldmlzZVF1b3RlV2l0aEZlZXMocXVvdGUsIGV4cGVjdGVkWmVyb0V4RmVlQW1vdW50LCBpc1NlbGxpbmcsIHRha2VyVG9rZW5QcmljZSwgZmVlVG9rZW5QcmljZSksXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBleHBlY3QocmV2aXNlZFF1b3RlcykudG9NYXRjaE9iamVjdChleHBlY3RlZFJldmlzZWRRdW90ZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIHYyIGBkZWZhdWx0YCBmZWUgY29ycmVjdGx5IGlmIHRva2VuIHByaWNlIHF1ZXJ5IHN1Y2NlZWRlZCBidXQgMHgtYXBpIHF1ZXJ5IGZhaWxlZCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgLy8gR2l2ZW5cclxuICAgICAgICAgICAgY29uc3QgaXNTZWxsaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29uc3QgaXNVbndyYXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgYXNzZXRGaWxsQW1vdW50ID0gbmV3IEJpZ051bWJlcigxZTE4KTtcclxuICAgICAgICAgICAgY29uc3QgbWFyZ2luUmFrZVJhdGlvID0gMC41O1xyXG4gICAgICAgICAgICBjb25zdCB0cmFkZVNpemVCcHMgPSA1O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYW1tUXVvdGUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbW0xTWFrZXJBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDM1NTBlNik7XHJcbiAgICAgICAgICAgIGNvbnN0IG1tMk1ha2VyQW1vdW50ID0gbmV3IEJpZ051bWJlcigzNjAwZTYpO1xyXG4gICAgICAgICAgICBjb25zdCBtbVF1b3RlczogSW5kaWNhdGl2ZVF1b3RlW10gPSBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXI6ICdtYWtlcjFBZGRyZXNzJyxcclxuICAgICAgICAgICAgICAgICAgICBtYWtlclVyaTogJ2h0dHA6Ly9tYWtlcjEuY29tJyxcclxuICAgICAgICAgICAgICAgICAgICBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJBbW91bnQ6IG1tMU1ha2VyQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyQW1vdW50OiBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhwaXJ5OiBuZXcgQmlnTnVtYmVyKDE2NTI3MjI3NjcpLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBtYWtlcjogJ21ha2VyMkFkZHJlc3MnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVXJpOiAnaHR0cDovL21ha2VyMi5jb20nLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgICAgICBtYWtlckFtb3VudDogbW0yTWFrZXJBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICBleHBpcnk6IG5ldyBCaWdOdW1iZXIoMTY1MjcyMjc2NyksXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZmVlU2VydmljZTogRmVlU2VydmljZSA9IGJ1aWxkRmVlU2VydmljZSh7XHJcbiAgICAgICAgICAgICAgICBmZWVNb2RlbENvbmZpZ3VyYXRpb246IHtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5SYWtlUmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhZGVTaXplQnBzLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdhc1ByaWNlLFxyXG4gICAgICAgICAgICAgICAgdHJhZGVUb2tlblByaWNlOiBtYWtlclRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICBmZWVUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgYW1tUXVvdGUsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcXVvdGVDb250ZXh0OiBRdW90ZUNvbnRleHQgPSB7XHJcbiAgICAgICAgICAgICAgICB3b3JrZmxvdyxcclxuICAgICAgICAgICAgICAgIGNoYWluSWQ6IDEzMzcsXHJcbiAgICAgICAgICAgICAgICBmZWVNb2RlbFZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICB0eE9yaWdpbixcclxuICAgICAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICB0YWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxNYWtlclRva2VuOiBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgaXNVbndyYXAsXHJcbiAgICAgICAgICAgICAgICBpc1NlbGxpbmcsXHJcbiAgICAgICAgICAgICAgICBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICB0YWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgaXNGaXJtOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgdHJhZGVyOiB0YWtlckFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICBpbnRlZ3JhdG9yLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gV2hlblxyXG4gICAgICAgICAgICBqZXN0LnVzZUZha2VUaW1lcnMoKS5zZXRTeXN0ZW1UaW1lKDE2NTAwMDAwMDAwMDApO1xyXG4gICAgICAgICAgICBjb25zdCB7IGZlZVdpdGhEZXRhaWxzLCBxdW90ZXNXaXRoR2FzRmVlLCBhbW1RdW90ZVVuaXF1ZUlkIH0gPSBhd2FpdCBmZWVTZXJ2aWNlLmNhbGN1bGF0ZUZlZUFzeW5jKFxyXG4gICAgICAgICAgICAgICAgcXVvdGVDb250ZXh0LFxyXG4gICAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobW1RdW90ZXMpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoZW5cclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRHYXNGZWVBbW91bnQgPSBnYXNQcmljZS50aW1lcyhnYXNFc3RpbWF0ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkWmVyb0V4RmVlQW1vdW50ID0gY2FsY3VsYXRlRGVmYXVsdEZlZUFtb3VudChcclxuICAgICAgICAgICAgICAgIG1tMk1ha2VyQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgdHJhZGVTaXplQnBzLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgZmVlVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRUb3RhbEZlZUFtb3VudCA9IGV4cGVjdGVkWmVyb0V4RmVlQW1vdW50LnBsdXMoZXhwZWN0ZWRHYXNGZWVBbW91bnQpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRGZWU6IEZlZVdpdGhEZXRhaWxzID0ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2ZpeGVkJyxcclxuICAgICAgICAgICAgICAgIHRva2VuOiBmZWVUb2tlbkFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICBhbW91bnQ6IGV4cGVjdGVkVG90YWxGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAga2luZDogJ2RlZmF1bHQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZlZU1vZGVsVmVyc2lvbixcclxuICAgICAgICAgICAgICAgICAgICBnYXNGZWVBbW91bnQ6IGV4cGVjdGVkR2FzRmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGdhc1ByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHplcm9FeEZlZUFtb3VudDogZXhwZWN0ZWRaZXJvRXhGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhZGVTaXplQnBzLFxyXG4gICAgICAgICAgICAgICAgICAgIGZlZVRva2VuQmFzZVVuaXRQcmljZVVzZDogZmVlVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlclRva2VuQmFzZVVuaXRQcmljZVVzZDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBtYWtlclRva2VuQmFzZVVuaXRQcmljZVVzZDogbWFrZXJUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJyZWFrZG93bjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGdhczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGV4cGVjdGVkR2FzRmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXNQcmljZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZEdhczogbmV3IEJpZ051bWJlcihnYXNFc3RpbWF0ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB6ZXJvRXg6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBleHBlY3RlZFplcm9FeEZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2luZDogJ3ZvbHVtZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFkZVNpemVCcHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjb252ZXJzaW9uUmF0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBuYXRpdmVUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IGZlZVRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBmZWVUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBtYWtlclRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleHBlY3QoZmVlV2l0aERldGFpbHMpLnRvTWF0Y2hPYmplY3QoZXhwZWN0ZWRGZWUpO1xyXG4gICAgICAgICAgICBleHBlY3QocXVvdGVzV2l0aEdhc0ZlZSkudG9NYXRjaE9iamVjdChtbVF1b3Rlcyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChhbW1RdW90ZVVuaXF1ZUlkKS50b0JlKHVuZGVmaW5lZCk7XHJcblxyXG4gICAgICAgICAgICAvLyBXaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IHJldmlzZWRRdW90ZXMgPSBhd2FpdCBmZWVTZXJ2aWNlLnJldmlzZVF1b3Rlc0FzeW5jKFxyXG4gICAgICAgICAgICAgICAgLy8gJGVzbGludC1maXgtbWUgaHR0cHM6Ly9naXRodWIuY29tL3JoaW5vZGF2aWQvZXNsaW50LWZpeC1tZVxyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cclxuICAgICAgICAgICAgICAgIHF1b3Rlc1dpdGhHYXNGZWUhLFxyXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWRaZXJvRXhGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICBxdW90ZUNvbnRleHQsXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyBUaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkUmV2aXNlZFF1b3RlcyA9IG1tUXVvdGVzLm1hcCgocXVvdGUpID0+XHJcbiAgICAgICAgICAgICAgICByZXZpc2VRdW90ZVdpdGhGZWVzKHF1b3RlLCBleHBlY3RlZFplcm9FeEZlZUFtb3VudCwgaXNTZWxsaW5nLCBtYWtlclRva2VuUHJpY2UsIGZlZVRva2VuUHJpY2UpLFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgZXhwZWN0KHJldmlzZWRRdW90ZXMpLnRvTWF0Y2hPYmplY3QoZXhwZWN0ZWRSZXZpc2VkUXVvdGVzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpdCgnc2hvdWxkIGNhbGN1bGF0ZSB2MiBgZ2FzT25seWAgZmVlIGNvcnJlY3RseSBpZiB0b2tlbiBwcmljZSBxdWVyeSBmYWlsZWQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEdpdmVuXHJcbiAgICAgICAgICAgIGNvbnN0IGlzU2VsbGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzVW53cmFwID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGFzc2V0RmlsbEFtb3VudCA9IG5ldyBCaWdOdW1iZXIoMWUxOCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hcmdpblJha2VSYXRpbyA9IDAuNTtcclxuICAgICAgICAgICAgY29uc3QgdHJhZGVTaXplQnBzID0gNTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGFtbU1ha2VyQW1vdW50ID0gbmV3IEJpZ051bWJlcigzNDUwZTYpO1xyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFNsaXBwYWdlID0gbmV3IEJpZ051bWJlcigtMC4wMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVzdGltYXRlZEFtbUdhc0ZlZVdlaSA9IG5ldyBCaWdOdW1iZXIoMTAwZTkpO1xyXG4gICAgICAgICAgICBjb25zdCBkZWNvZGVkVW5pcXVlSWQgPSAnMTIzNC01Njc4JztcclxuICAgICAgICAgICAgY29uc3QgYW1tUXVvdGU6IEFtbVF1b3RlID0ge1xyXG4gICAgICAgICAgICAgICAgbWFrZXJBbW91bnQ6IGFtbU1ha2VyQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgIGV4cGVjdGVkU2xpcHBhZ2UsXHJcbiAgICAgICAgICAgICAgICBlc3RpbWF0ZWRHYXNGZWVXZWk6IGVzdGltYXRlZEFtbUdhc0ZlZVdlaSxcclxuICAgICAgICAgICAgICAgIGRlY29kZWRVbmlxdWVJZCxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1tMU1ha2VyQW1vdW50ID0gbmV3IEJpZ051bWJlcigzNTUwZTYpO1xyXG4gICAgICAgICAgICBjb25zdCBtbTJNYWtlckFtb3VudCA9IG5ldyBCaWdOdW1iZXIoMzYwMGU2KTtcclxuICAgICAgICAgICAgY29uc3QgbW1RdW90ZXM6IEluZGljYXRpdmVRdW90ZVtdID0gW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyOiAnbWFrZXIxQWRkcmVzcycsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJVcmk6ICdodHRwOi8vbWFrZXIxLmNvbScsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgICAgICB0YWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyQW1vdW50OiBtbTFNYWtlckFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyeTogbmV3IEJpZ051bWJlcigxNjUyNzIyNzY3KSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXI6ICdtYWtlcjJBZGRyZXNzJyxcclxuICAgICAgICAgICAgICAgICAgICBtYWtlclVyaTogJ2h0dHA6Ly9tYWtlcjIuY29tJyxcclxuICAgICAgICAgICAgICAgICAgICBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJBbW91bnQ6IG1tMk1ha2VyQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyQW1vdW50OiBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhwaXJ5OiBuZXcgQmlnTnVtYmVyKDE2NTI3MjI3NjcpLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZlZVNlcnZpY2U6IEZlZVNlcnZpY2UgPSBidWlsZEZlZVNlcnZpY2Uoe1xyXG4gICAgICAgICAgICAgICAgZmVlTW9kZWxDb25maWd1cmF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luUmFrZVJhdGlvLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYWRlU2l6ZUJwcyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnYXNQcmljZSxcclxuICAgICAgICAgICAgICAgIHRyYWRlVG9rZW5QcmljZTogbWFrZXJUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgZmVlVG9rZW5QcmljZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIGFtbVF1b3RlLFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFdoZW5cclxuICAgICAgICAgICAgamVzdC51c2VGYWtlVGltZXJzKCkuc2V0U3lzdGVtVGltZSgxNjUwMDAwMDAwMDAwKTtcclxuICAgICAgICAgICAgY29uc3QgeyBmZWVXaXRoRGV0YWlscywgcXVvdGVzV2l0aEdhc0ZlZSwgYW1tUXVvdGVVbmlxdWVJZCB9ID0gYXdhaXQgZmVlU2VydmljZS5jYWxjdWxhdGVGZWVBc3luYyhcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB3b3JrZmxvdyxcclxuICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiAxMzM3LFxyXG4gICAgICAgICAgICAgICAgICAgIGZlZU1vZGVsVmVyc2lvbixcclxuICAgICAgICAgICAgICAgICAgICB0eE9yaWdpbixcclxuICAgICAgICAgICAgICAgICAgICBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxNYWtlclRva2VuOiBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVG9rZW5EZWNpbWFscyxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlclRva2VuRGVjaW1hbHMsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNVbndyYXAsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNTZWxsaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgIGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGlzRmlybTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlckFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhZGVyOiB0YWtlckFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZWdyYXRvcixcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtbVF1b3Rlcyk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8gVGhlblxyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZEdhc0ZlZUFtb3VudCA9IGdhc1ByaWNlLnRpbWVzKGdhc0VzdGltYXRlKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkRmVlOiBGZWVXaXRoRGV0YWlscyA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdmaXhlZCcsXHJcbiAgICAgICAgICAgICAgICB0b2tlbjogZmVlVG9rZW5BZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgYW1vdW50OiBleHBlY3RlZEdhc0ZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBraW5kOiAnZ2FzT25seScsXHJcbiAgICAgICAgICAgICAgICAgICAgZmVlTW9kZWxWZXJzaW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGdhc0ZlZUFtb3VudDogZXhwZWN0ZWRHYXNGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2FzUHJpY2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnJlYWtkb3duOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogZXhwZWN0ZWRHYXNGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhc1ByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkR2FzOiBuZXcgQmlnTnVtYmVyKGdhc0VzdGltYXRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNvbnZlcnNpb25SYXRlczoge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hdGl2ZVRva2VuQmFzZVVuaXRQcmljZVVzZDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBmZWVUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleHBlY3QoZmVlV2l0aERldGFpbHMpLnRvTWF0Y2hPYmplY3QoZXhwZWN0ZWRGZWUpO1xyXG4gICAgICAgICAgICBleHBlY3QocXVvdGVzV2l0aEdhc0ZlZSkudG9NYXRjaE9iamVjdChtbVF1b3Rlcyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChhbW1RdW90ZVVuaXF1ZUlkKS50b0JlKGRlY29kZWRVbmlxdWVJZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaXQoJ3Nob3VsZCBjYWxjdWxhdGUgdjIgYHByaWNlIGltcHJvdmVtZW50YCBiYXNlZCBmZWUgd2l0aCB6ZXJvIHplcm9FeEZlZSBpZiBwcmljZSBpbXByb3ZlbWVudCBpcyB6ZXJvJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBHaXZlblxyXG4gICAgICAgICAgICBjb25zdCBpc1NlbGxpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBpc1Vud3JhcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBhc3NldEZpbGxBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDFlMTgpO1xyXG4gICAgICAgICAgICBjb25zdCBtYXJnaW5SYWtlUmF0aW8gPSAwLjU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhbW1NYWtlckFtb3VudCA9IG5ldyBCaWdOdW1iZXIoNDAwMGU2KTtcclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRTbGlwcGFnZSA9IG5ldyBCaWdOdW1iZXIoLTAuMDEpO1xyXG4gICAgICAgICAgICBjb25zdCBlc3RpbWF0ZWRBbW1HYXNGZWVXZWkgPSBuZXcgQmlnTnVtYmVyKDEwMGU5KTtcclxuICAgICAgICAgICAgY29uc3QgZGVjb2RlZFVuaXF1ZUlkID0gJzEyMzQtNTY3OCc7XHJcbiAgICAgICAgICAgIGNvbnN0IGFtbVF1b3RlOiBBbW1RdW90ZSA9IHtcclxuICAgICAgICAgICAgICAgIG1ha2VyQW1vdW50OiBhbW1NYWtlckFtb3VudCxcclxuICAgICAgICAgICAgICAgIHRha2VyQW1vdW50OiBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICBleHBlY3RlZFNsaXBwYWdlLFxyXG4gICAgICAgICAgICAgICAgZXN0aW1hdGVkR2FzRmVlV2VpOiBlc3RpbWF0ZWRBbW1HYXNGZWVXZWksXHJcbiAgICAgICAgICAgICAgICBkZWNvZGVkVW5pcXVlSWQsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtbTFNYWtlckFtb3VudCA9IG5ldyBCaWdOdW1iZXIoMzU1MGU2KTtcclxuICAgICAgICAgICAgY29uc3QgbW0yTWFrZXJBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDM2MDBlNik7XHJcbiAgICAgICAgICAgIGNvbnN0IG1tUXVvdGVzOiBJbmRpY2F0aXZlUXVvdGVbXSA9IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBtYWtlcjogJ21ha2VyMUFkZHJlc3MnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVXJpOiAnaHR0cDovL21ha2VyMS5jb20nLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgICAgICBtYWtlckFtb3VudDogbW0xTWFrZXJBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICBleHBpcnk6IG5ldyBCaWdOdW1iZXIoMTY1MjcyMjc2NyksXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyOiAnbWFrZXIyQWRkcmVzcycsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJVcmk6ICdodHRwOi8vbWFrZXIyLmNvbScsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgICAgICB0YWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyQW1vdW50OiBtbTJNYWtlckFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyeTogbmV3IEJpZ051bWJlcigxNjUyNzIyNzY3KSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmZWVTZXJ2aWNlOiBGZWVTZXJ2aWNlID0gYnVpbGRGZWVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgIGZlZU1vZGVsQ29uZmlndXJhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpblJha2VSYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICB0cmFkZVNpemVCcHM6IDAsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2FzUHJpY2UsXHJcbiAgICAgICAgICAgICAgICB0cmFkZVRva2VuUHJpY2U6IG1ha2VyVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgIGZlZVRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICBhbW1RdW90ZSxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBXaGVuXHJcbiAgICAgICAgICAgIGplc3QudXNlRmFrZVRpbWVycygpLnNldFN5c3RlbVRpbWUoMTY1MDAwMDAwMDAwMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgZmVlV2l0aERldGFpbHMsIHF1b3Rlc1dpdGhHYXNGZWUsIGFtbVF1b3RlVW5pcXVlSWQgfSA9IGF3YWl0IGZlZVNlcnZpY2UuY2FsY3VsYXRlRmVlQXN5bmMoXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgd29ya2Zsb3csXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5JZDogMTMzNyxcclxuICAgICAgICAgICAgICAgICAgICBmZWVNb2RlbFZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgdHhPcmlnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgICAgICB0YWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsTWFrZXJUb2tlbjogbWFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgICAgICBtYWtlclRva2VuRGVjaW1hbHMsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJUb2tlbkRlY2ltYWxzLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzVW53cmFwLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzU2VsbGluZyxcclxuICAgICAgICAgICAgICAgICAgICBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgICAgICBpc0Zpcm06IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZXJBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYWRlcjogdGFrZXJBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgICAgIGludGVncmF0b3IsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobW1RdW90ZXMpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoZW5cclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRHYXNGZWVBbW91bnQgPSBnYXNQcmljZS50aW1lcyhnYXNFc3RpbWF0ZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZEZlZTogRmVlV2l0aERldGFpbHMgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnZml4ZWQnLFxyXG4gICAgICAgICAgICAgICAgdG9rZW46IGZlZVRva2VuQWRkcmVzcyxcclxuICAgICAgICAgICAgICAgIGFtb3VudDogZXhwZWN0ZWRHYXNGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAga2luZDogJ21hcmdpbicsXHJcbiAgICAgICAgICAgICAgICAgICAgZmVlTW9kZWxWZXJzaW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGdhc0ZlZUFtb3VudDogZXhwZWN0ZWRHYXNGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2FzUHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgemVyb0V4RmVlQW1vdW50OiBaRVJPLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogWkVSTyxcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5SYWtlUmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBmZWVUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBtYWtlclRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnJlYWtkb3duOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogZXhwZWN0ZWRHYXNGZWVBbW91bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhc1ByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkR2FzOiBuZXcgQmlnTnVtYmVyKGdhc0VzdGltYXRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHplcm9FeDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IFpFUk8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6ICdwcmljZV9pbXByb3ZlbWVudCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZUltcHJvdmVtZW50OiBaRVJPLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFrZVJhdGlvOiBtYXJnaW5SYWtlUmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjb252ZXJzaW9uUmF0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBuYXRpdmVUb2tlbkJhc2VVbml0UHJpY2VVc2Q6IGZlZVRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBmZWVUb2tlblByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VyVG9rZW5CYXNlVW5pdFByaWNlVXNkOiBtYWtlclRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleHBlY3QoZmVlV2l0aERldGFpbHMpLnRvTWF0Y2hPYmplY3QoZXhwZWN0ZWRGZWUpO1xyXG4gICAgICAgICAgICBleHBlY3QocXVvdGVzV2l0aEdhc0ZlZSkudG9NYXRjaE9iamVjdChtbVF1b3Rlcyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChhbW1RdW90ZVVuaXF1ZUlkKS50b0JlKGRlY29kZWRVbmlxdWVJZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdyBpZiBjYWxsZWQgZnJvbSBSRlF0IHdvcmtmbG93JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBHaXZlblxyXG4gICAgICAgICAgICBjb25zdCBpc1NlbGxpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBpc1Vud3JhcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBhc3NldEZpbGxBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDFlMTgpO1xyXG4gICAgICAgICAgICBjb25zdCBtYXJnaW5SYWtlUmF0aW8gPSAwLjU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhbW1NYWtlckFtb3VudCA9IG5ldyBCaWdOdW1iZXIoMzQ1MGU2KTtcclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRTbGlwcGFnZSA9IG5ldyBCaWdOdW1iZXIoLTAuMDEpO1xyXG4gICAgICAgICAgICBjb25zdCBlc3RpbWF0ZWRBbW1HYXNGZWVXZWkgPSBuZXcgQmlnTnVtYmVyKDEwMGU5KTtcclxuICAgICAgICAgICAgY29uc3QgZGVjb2RlZFVuaXF1ZUlkID0gJzEyMzQtNTY3OCc7XHJcbiAgICAgICAgICAgIGNvbnN0IGFtbVF1b3RlOiBBbW1RdW90ZSA9IHtcclxuICAgICAgICAgICAgICAgIG1ha2VyQW1vdW50OiBhbW1NYWtlckFtb3VudCxcclxuICAgICAgICAgICAgICAgIHRha2VyQW1vdW50OiBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICBleHBlY3RlZFNsaXBwYWdlLFxyXG4gICAgICAgICAgICAgICAgZXN0aW1hdGVkR2FzRmVlV2VpOiBlc3RpbWF0ZWRBbW1HYXNGZWVXZWksXHJcbiAgICAgICAgICAgICAgICBkZWNvZGVkVW5pcXVlSWQsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmZWVTZXJ2aWNlOiBGZWVTZXJ2aWNlID0gYnVpbGRGZWVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgIGZlZU1vZGVsQ29uZmlndXJhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpblJha2VSYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICB0cmFkZVNpemVCcHM6IDAsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2FzUHJpY2UsXHJcbiAgICAgICAgICAgICAgICB0cmFkZVRva2VuUHJpY2U6IG1ha2VyVG9rZW5QcmljZSxcclxuICAgICAgICAgICAgICAgIGZlZVRva2VuUHJpY2UsXHJcbiAgICAgICAgICAgICAgICBhbW1RdW90ZSxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBxdW90ZUNvbnRleHQ6IFF1b3RlQ29udGV4dCA9IHtcclxuICAgICAgICAgICAgICAgIHdvcmtmbG93OiAncmZxdCcsXHJcbiAgICAgICAgICAgICAgICBjaGFpbklkOiAxMzM3LFxyXG4gICAgICAgICAgICAgICAgaXNGaXJtOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZmVlTW9kZWxWZXJzaW9uLFxyXG4gICAgICAgICAgICAgICAgdHhPcmlnaW4sXHJcbiAgICAgICAgICAgICAgICBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsTWFrZXJUb2tlbjogbWFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgIG1ha2VyVG9rZW5EZWNpbWFscyxcclxuICAgICAgICAgICAgICAgIHRha2VyVG9rZW5EZWNpbWFscyxcclxuICAgICAgICAgICAgICAgIGlzVW53cmFwLFxyXG4gICAgICAgICAgICAgICAgaXNTZWxsaW5nLFxyXG4gICAgICAgICAgICAgICAgYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgIHRha2VyQWRkcmVzcyxcclxuICAgICAgICAgICAgICAgIHRyYWRlcjogdGFrZXJBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgaW50ZWdyYXRvcixcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIFdoZW5cclxuICAgICAgICAgICAgYXdhaXQgZXhwZWN0KCgpID0+IGZlZVNlcnZpY2UuY2FsY3VsYXRlRmVlQXN5bmMocXVvdGVDb250ZXh0KSkucmVqZWN0cy50b1Rocm93KCdOb3QgaW1wbGVtZW50ZWQnKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRlc2NyaWJlKCdwdXJlIGZ1bmN0aW9uIGNhbGN1bGF0ZURlZmF1bHRGZWVBbW91bnQoKScsICgpID0+IHtcclxuICAgICAgICBpdCgnc2hvdWxkIGNhbGN1bGF0ZSBkZWZhdWx0IGZlZSBhbW91bnQgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBHaXZlblxyXG4gICAgICAgICAgICBjb25zdCB0cmFkZVRva2VuQW1vdW50ID0gbmV3IEJpZ051bWJlcigxZTE4KTtcclxuICAgICAgICAgICAgY29uc3QgZmVlUmF0ZUJwcyA9IDU7XHJcbiAgICAgICAgICAgIGNvbnN0IHRyYWRlVG9rZW5CYXNlVW5pdFByaWNlVXNkID0gbmV3IEJpZ051bWJlcig2ZS0xNCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZlZVRva2VuQmFzZVVuaXRQcmljZVVzZCA9IG5ldyBCaWdOdW1iZXIoM2UtMTUpO1xyXG5cclxuICAgICAgICAgICAgLy8gV2hlblxyXG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0RmVlQW1vdW50ID0gY2FsY3VsYXRlRGVmYXVsdEZlZUFtb3VudChcclxuICAgICAgICAgICAgICAgIHRyYWRlVG9rZW5BbW91bnQsXHJcbiAgICAgICAgICAgICAgICBmZWVSYXRlQnBzLFxyXG4gICAgICAgICAgICAgICAgdHJhZGVUb2tlbkJhc2VVbml0UHJpY2VVc2QsXHJcbiAgICAgICAgICAgICAgICBmZWVUb2tlbkJhc2VVbml0UHJpY2VVc2QsXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyBUaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkRGVmYXVsdEZlZUFtb3VudCA9IG5ldyBCaWdOdW1iZXIoMWUxNik7XHJcbiAgICAgICAgICAgIGV4cGVjdChkZWZhdWx0RmVlQW1vdW50KS50b01hdGNoT2JqZWN0KGV4cGVjdGVkRGVmYXVsdEZlZUFtb3VudCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gemVybyBpZiBicHMgaXMgemVybycsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgLy8gR2l2ZW5cclxuICAgICAgICAgICAgY29uc3QgdHJhZGVUb2tlbkFtb3VudCA9IG5ldyBCaWdOdW1iZXIoMWUxOCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZlZVJhdGVCcHMgPSAwO1xyXG4gICAgICAgICAgICBjb25zdCB0cmFkZVRva2VuQmFzZVVuaXRQcmljZVVzZCA9IG5ldyBCaWdOdW1iZXIoNmUtMTQpO1xyXG4gICAgICAgICAgICBjb25zdCBmZWVUb2tlbkJhc2VVbml0UHJpY2VVc2QgPSBuZXcgQmlnTnVtYmVyKDNlLTE1KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFdoZW5cclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdEZlZUFtb3VudCA9IGNhbGN1bGF0ZURlZmF1bHRGZWVBbW91bnQoXHJcbiAgICAgICAgICAgICAgICB0cmFkZVRva2VuQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgZmVlUmF0ZUJwcyxcclxuICAgICAgICAgICAgICAgIHRyYWRlVG9rZW5CYXNlVW5pdFByaWNlVXNkLFxyXG4gICAgICAgICAgICAgICAgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkLFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8gVGhlblxyXG4gICAgICAgICAgICBleHBlY3QoZGVmYXVsdEZlZUFtb3VudCkudG9NYXRjaE9iamVjdChaRVJPKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiB6ZXJvIGlmIGVpdGhlciB0cmFkZSB0b2tlbiBwcmljZSBvciBmZWUgdG9rZW4gcHJpY2UgaXMgbnVsbCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgLy8gR2l2ZW5cclxuICAgICAgICAgICAgY29uc3QgdHJhZGVUb2tlbkFtb3VudCA9IG5ldyBCaWdOdW1iZXIoMWUxOCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZlZVJhdGVCcHMgPSA1O1xyXG4gICAgICAgICAgICBjb25zdCB0cmFkZVRva2VuQmFzZVVuaXRQcmljZVVzZCA9IG5ldyBCaWdOdW1iZXIoNmUtMTQpO1xyXG4gICAgICAgICAgICBjb25zdCBmZWVUb2tlbkJhc2VVbml0UHJpY2VVc2QgPSBuZXcgQmlnTnVtYmVyKDNlLTE1KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFdoZW5cclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdEZlZUFtb3VudDEgPSBjYWxjdWxhdGVEZWZhdWx0RmVlQW1vdW50KFxyXG4gICAgICAgICAgICAgICAgdHJhZGVUb2tlbkFtb3VudCxcclxuICAgICAgICAgICAgICAgIGZlZVJhdGVCcHMsXHJcbiAgICAgICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICAgICAgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0RmVlQW1vdW50MiA9IGNhbGN1bGF0ZURlZmF1bHRGZWVBbW91bnQoXHJcbiAgICAgICAgICAgICAgICB0cmFkZVRva2VuQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgZmVlUmF0ZUJwcyxcclxuICAgICAgICAgICAgICAgIHRyYWRlVG9rZW5CYXNlVW5pdFByaWNlVXNkLFxyXG4gICAgICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoZW5cclxuICAgICAgICAgICAgZXhwZWN0KGRlZmF1bHRGZWVBbW91bnQxKS50b01hdGNoT2JqZWN0KFpFUk8pO1xyXG4gICAgICAgICAgICBleHBlY3QoZGVmYXVsdEZlZUFtb3VudDIpLnRvTWF0Y2hPYmplY3QoWkVSTyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGRlc2NyaWJlKCdwdXJlIGZ1bmN0aW9uIGNhbGN1bGF0ZVByaWNlSW1wcm92ZW1lbnRBbW91bnQoKScsICgpID0+IHtcclxuICAgICAgICBpdCgnc2hvdWxkIGNhbGN1bGF0ZSBwcmljZSBpbXByb3ZlbWVudCBhbW91bnQgZm9yIHNlbGxpbmcgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBHaXZlblxyXG4gICAgICAgICAgICBjb25zdCBpc1NlbGxpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBhc3NldEZpbGxBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDNlMTcpO1xyXG4gICAgICAgICAgICBjb25zdCBtYWtlclF1b3RlV2l0aEdhc0ZlZTogSW5kaWNhdGl2ZVF1b3RlID0ge1xyXG4gICAgICAgICAgICAgICAgbWFrZXI6ICdtYWtlcjFBZGRyZXNzJyxcclxuICAgICAgICAgICAgICAgIG1ha2VyVXJpOiAnaHR0cDovL21ha2VyMS5jb20nLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgIHRha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICBtYWtlckFtb3VudDogbmV3IEJpZ051bWJlcigxMTAwZTYpLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgIGV4cGlyeTogbmV3IEJpZ051bWJlcigxNjUyNzIyNzY3KSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGFtbVF1b3RlOiBBbW1RdW90ZSA9IHtcclxuICAgICAgICAgICAgICAgIG1ha2VyQW1vdW50OiBuZXcgQmlnTnVtYmVyKDEwMDBlNiksXHJcbiAgICAgICAgICAgICAgICB0YWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWRTbGlwcGFnZTogbmV3IEJpZ051bWJlcigtMC4wMiksXHJcbiAgICAgICAgICAgICAgICBlc3RpbWF0ZWRHYXNGZWVXZWk6IG5ldyBCaWdOdW1iZXIoMTBlMTUpLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcXVvdGVUb2tlbkJhc2VVbml0UHJpY2VVc2QgPSBuZXcgQmlnTnVtYmVyKDFlLTYpO1xyXG4gICAgICAgICAgICBjb25zdCBmZWVUb2tlbkJhc2VVbml0UHJpY2VVc2QgPSBuZXcgQmlnTnVtYmVyKDNlLTE1KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFdoZW5cclxuICAgICAgICAgICAgY29uc3QgcHJpY2VJbXByb3ZlbWVudEFtb3VudCA9IGNhbGN1bGF0ZVByaWNlSW1wcm92ZW1lbnRBbW91bnQoXHJcbiAgICAgICAgICAgICAgICBtYWtlclF1b3RlV2l0aEdhc0ZlZSxcclxuICAgICAgICAgICAgICAgIGFtbVF1b3RlLFxyXG4gICAgICAgICAgICAgICAgaXNTZWxsaW5nLFxyXG4gICAgICAgICAgICAgICAgcXVvdGVUb2tlbkJhc2VVbml0UHJpY2VVc2QsXHJcbiAgICAgICAgICAgICAgICBmZWVUb2tlbkJhc2VVbml0UHJpY2VVc2QsXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyBUaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkUHJpY2VJbXByb3ZlbWVudEFtb3VudCA9IG5ldyBCaWdOdW1iZXIoNTBlMTUpO1xyXG4gICAgICAgICAgICBleHBlY3QocHJpY2VJbXByb3ZlbWVudEFtb3VudCkudG9NYXRjaE9iamVjdChleHBlY3RlZFByaWNlSW1wcm92ZW1lbnRBbW91bnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIHByaWNlIGltcHJvdmVtZW50IGFtb3VudCBmb3IgYnV5aW5nIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgLy8gR2l2ZW5cclxuICAgICAgICAgICAgY29uc3QgaXNTZWxsaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGFzc2V0RmlsbEFtb3VudCA9IG5ldyBCaWdOdW1iZXIoM2UxNyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ha2VyUXVvdGVXaXRoR2FzRmVlOiBJbmRpY2F0aXZlUXVvdGUgPSB7XHJcbiAgICAgICAgICAgICAgICBtYWtlcjogJ21ha2VyMUFkZHJlc3MnLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJVcmk6ICdodHRwOi8vbWFrZXIxLmNvbScsXHJcbiAgICAgICAgICAgICAgICBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgIG1ha2VyQW1vdW50OiBhc3NldEZpbGxBbW91bnQsXHJcbiAgICAgICAgICAgICAgICB0YWtlckFtb3VudDogbmV3IEJpZ051bWJlcig5MDBlNiksXHJcbiAgICAgICAgICAgICAgICBleHBpcnk6IG5ldyBCaWdOdW1iZXIoMTY1MjcyMjc2NyksXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhbW1RdW90ZTogQW1tUXVvdGUgPSB7XHJcbiAgICAgICAgICAgICAgICBtYWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMTAwMGU2KSxcclxuICAgICAgICAgICAgICAgIGV4cGVjdGVkU2xpcHBhZ2U6IG5ldyBCaWdOdW1iZXIoLTAuMDIpLFxyXG4gICAgICAgICAgICAgICAgZXN0aW1hdGVkR2FzRmVlV2VpOiBuZXcgQmlnTnVtYmVyKDEwZTE1KSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHF1b3RlVG9rZW5CYXNlVW5pdFByaWNlVXNkID0gbmV3IEJpZ051bWJlcigxZS02KTtcclxuICAgICAgICAgICAgY29uc3QgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkID0gbmV3IEJpZ051bWJlcigzZS0xNSk7XHJcblxyXG4gICAgICAgICAgICAvLyBXaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IHByaWNlSW1wcm92ZW1lbnRBbW91bnQgPSBjYWxjdWxhdGVQcmljZUltcHJvdmVtZW50QW1vdW50KFxyXG4gICAgICAgICAgICAgICAgbWFrZXJRdW90ZVdpdGhHYXNGZWUsXHJcbiAgICAgICAgICAgICAgICBhbW1RdW90ZSxcclxuICAgICAgICAgICAgICAgIGlzU2VsbGluZyxcclxuICAgICAgICAgICAgICAgIHF1b3RlVG9rZW5CYXNlVW5pdFByaWNlVXNkLFxyXG4gICAgICAgICAgICAgICAgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkLFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8gVGhlblxyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFByaWNlSW1wcm92ZW1lbnRBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDUwZTE1KTtcclxuICAgICAgICAgICAgZXhwZWN0KHByaWNlSW1wcm92ZW1lbnRBbW91bnQpLnRvTWF0Y2hPYmplY3QoZXhwZWN0ZWRQcmljZUltcHJvdmVtZW50QW1vdW50KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiB6ZXJvIGlmIHRoZXJlIGlzIG5vIHByaWNlIGltcHJvdmVtZW50JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBHaXZlblxyXG4gICAgICAgICAgICBjb25zdCBpc1NlbGxpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgYXNzZXRGaWxsQW1vdW50ID0gbmV3IEJpZ051bWJlcigzZTE3KTtcclxuICAgICAgICAgICAgY29uc3QgbWFrZXJRdW90ZVdpdGhHYXNGZWU6IEluZGljYXRpdmVRdW90ZSA9IHtcclxuICAgICAgICAgICAgICAgIG1ha2VyOiAnbWFrZXIxQWRkcmVzcycsXHJcbiAgICAgICAgICAgICAgICBtYWtlclVyaTogJ2h0dHA6Ly9tYWtlcjEuY29tJyxcclxuICAgICAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICB0YWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJBbW91bnQ6IGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgIHRha2VyQW1vdW50OiBuZXcgQmlnTnVtYmVyKDEwNTFlNiksXHJcbiAgICAgICAgICAgICAgICBleHBpcnk6IG5ldyBCaWdOdW1iZXIoMTY1MjcyMjc2NyksXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhbW1RdW90ZTogQW1tUXVvdGUgPSB7XHJcbiAgICAgICAgICAgICAgICBtYWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IG5ldyBCaWdOdW1iZXIoMTAwMGU2KSxcclxuICAgICAgICAgICAgICAgIGV4cGVjdGVkU2xpcHBhZ2U6IG5ldyBCaWdOdW1iZXIoLTAuMDIpLFxyXG4gICAgICAgICAgICAgICAgZXN0aW1hdGVkR2FzRmVlV2VpOiBuZXcgQmlnTnVtYmVyKDEwZTE1KSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHF1b3RlVG9rZW5CYXNlVW5pdFByaWNlVXNkID0gbmV3IEJpZ051bWJlcigxZS02KTtcclxuICAgICAgICAgICAgY29uc3QgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkID0gbmV3IEJpZ051bWJlcigzZS0xNSk7XHJcblxyXG4gICAgICAgICAgICAvLyBXaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IHByaWNlSW1wcm92ZW1lbnRBbW91bnQgPSBjYWxjdWxhdGVQcmljZUltcHJvdmVtZW50QW1vdW50KFxyXG4gICAgICAgICAgICAgICAgbWFrZXJRdW90ZVdpdGhHYXNGZWUsXHJcbiAgICAgICAgICAgICAgICBhbW1RdW90ZSxcclxuICAgICAgICAgICAgICAgIGlzU2VsbGluZyxcclxuICAgICAgICAgICAgICAgIHF1b3RlVG9rZW5CYXNlVW5pdFByaWNlVXNkLFxyXG4gICAgICAgICAgICAgICAgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkLFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8gVGhlblxyXG4gICAgICAgICAgICBleHBlY3QocHJpY2VJbXByb3ZlbWVudEFtb3VudCkudG9NYXRjaE9iamVjdChaRVJPKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgZGVzY3JpYmUoJ3B1cmUgZnVuY3Rpb24gcmV2aXNlUXVvdGVXaXRoWmVyb0V4RmVlKCknLCAoKSA9PiB7XHJcbiAgICAgICAgaXQoJ3Nob3VsZCByZXZpc2UgcXVvdGUgY29ycmVjdGx5IGZvciBzZWxsaW5nJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBHaXZlblxyXG4gICAgICAgICAgICBjb25zdCBpc1NlbGxpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBhc3NldEZpbGxBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDNlMTcpO1xyXG4gICAgICAgICAgICBjb25zdCBtYWtlclF1b3RlV2l0aEdhc0ZlZTogSW5kaWNhdGl2ZVF1b3RlID0ge1xyXG4gICAgICAgICAgICAgICAgbWFrZXI6ICdtYWtlcjFBZGRyZXNzJyxcclxuICAgICAgICAgICAgICAgIG1ha2VyVXJpOiAnaHR0cDovL21ha2VyMS5jb20nLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgIHRha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICBtYWtlckFtb3VudDogbmV3IEJpZ051bWJlcigxMDAwZTYpLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJBbW91bnQ6IGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgIGV4cGlyeTogbmV3IEJpZ051bWJlcigxNjUyNzIyNzY3KSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHplcm9FeEZlZUFtb3VudCA9IG5ldyBCaWdOdW1iZXIoMTBlMTUpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcXVvdGVUb2tlbkJhc2VVbml0UHJpY2VVc2QgPSBuZXcgQmlnTnVtYmVyKDFlLTYpO1xyXG4gICAgICAgICAgICBjb25zdCBmZWVUb2tlbkJhc2VVbml0UHJpY2VVc2QgPSBuZXcgQmlnTnVtYmVyKDNlLTE1KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFdoZW5cclxuICAgICAgICAgICAgY29uc3QgcmV2aXNlZFF1b3RlID0gcmV2aXNlUXVvdGVXaXRoRmVlcyhcclxuICAgICAgICAgICAgICAgIG1ha2VyUXVvdGVXaXRoR2FzRmVlLFxyXG4gICAgICAgICAgICAgICAgemVyb0V4RmVlQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgaXNTZWxsaW5nLFxyXG4gICAgICAgICAgICAgICAgcXVvdGVUb2tlbkJhc2VVbml0UHJpY2VVc2QsXHJcbiAgICAgICAgICAgICAgICBmZWVUb2tlbkJhc2VVbml0UHJpY2VVc2QsXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyBUaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkUmV2aXNlZE1ha2VyQW1vdW50ID0gbmV3IEJpZ051bWJlcig5NzBlNik7XHJcbiAgICAgICAgICAgIGV4cGVjdChyZXZpc2VkUXVvdGUubWFrZXJBbW91bnQpLnRvTWF0Y2hPYmplY3QoZXhwZWN0ZWRSZXZpc2VkTWFrZXJBbW91bnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGl0KCdzaG91bGQgcmV2aXNlIHF1b3RlIGNvcnJlY3RseSBmb3IgYnV5aW5nJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBHaXZlblxyXG4gICAgICAgICAgICBjb25zdCBpc1NlbGxpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgYXNzZXRGaWxsQW1vdW50ID0gbmV3IEJpZ051bWJlcigzZTE3KTtcclxuICAgICAgICAgICAgY29uc3QgbWFrZXJRdW90ZVdpdGhHYXNGZWU6IEluZGljYXRpdmVRdW90ZSA9IHtcclxuICAgICAgICAgICAgICAgIG1ha2VyOiAnbWFrZXIxQWRkcmVzcycsXHJcbiAgICAgICAgICAgICAgICBtYWtlclVyaTogJ2h0dHA6Ly9tYWtlcjEuY29tJyxcclxuICAgICAgICAgICAgICAgIG1ha2VyVG9rZW4sXHJcbiAgICAgICAgICAgICAgICB0YWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJBbW91bnQ6IGFzc2V0RmlsbEFtb3VudCxcclxuICAgICAgICAgICAgICAgIHRha2VyQW1vdW50OiBuZXcgQmlnTnVtYmVyKDEwMDBlNiksXHJcbiAgICAgICAgICAgICAgICBleHBpcnk6IG5ldyBCaWdOdW1iZXIoMTY1MjcyMjc2NyksXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCB6ZXJvRXhGZWVBbW91bnQgPSBuZXcgQmlnTnVtYmVyKDEwZTE1KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHF1b3RlVG9rZW5CYXNlVW5pdFByaWNlVXNkID0gbmV3IEJpZ051bWJlcigxZS02KTtcclxuICAgICAgICAgICAgY29uc3QgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkID0gbmV3IEJpZ051bWJlcigzZS0xNSk7XHJcblxyXG4gICAgICAgICAgICAvLyBXaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IHJldmlzZWRRdW90ZSA9IHJldmlzZVF1b3RlV2l0aEZlZXMoXHJcbiAgICAgICAgICAgICAgICBtYWtlclF1b3RlV2l0aEdhc0ZlZSxcclxuICAgICAgICAgICAgICAgIHplcm9FeEZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgIGlzU2VsbGluZyxcclxuICAgICAgICAgICAgICAgIHF1b3RlVG9rZW5CYXNlVW5pdFByaWNlVXNkLFxyXG4gICAgICAgICAgICAgICAgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkLFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8gVGhlblxyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFJldmlzZWRUYWtlckFtb3VudCA9IG5ldyBCaWdOdW1iZXIoMTAzMGU2KTtcclxuICAgICAgICAgICAgZXhwZWN0KHJldmlzZWRRdW90ZS50YWtlckFtb3VudCkudG9NYXRjaE9iamVjdChleHBlY3RlZFJldmlzZWRUYWtlckFtb3VudCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaXQoJ3Nob3VsZCBub3QgcmV2aXNlIHF1b3RlIGNvcnJlY3RseSBmb3IgemVybyB6ZXJvRXhGZWUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEdpdmVuXHJcbiAgICAgICAgICAgIGNvbnN0IGlzU2VsbGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IGFzc2V0RmlsbEFtb3VudCA9IG5ldyBCaWdOdW1iZXIoM2UxNyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ha2VyUXVvdGVXaXRoR2FzRmVlOiBJbmRpY2F0aXZlUXVvdGUgPSB7XHJcbiAgICAgICAgICAgICAgICBtYWtlcjogJ21ha2VyMUFkZHJlc3MnLFxyXG4gICAgICAgICAgICAgICAgbWFrZXJVcmk6ICdodHRwOi8vbWFrZXIxLmNvbScsXHJcbiAgICAgICAgICAgICAgICBtYWtlclRva2VuLFxyXG4gICAgICAgICAgICAgICAgdGFrZXJUb2tlbixcclxuICAgICAgICAgICAgICAgIG1ha2VyQW1vdW50OiBuZXcgQmlnTnVtYmVyKDEwMDBlNiksXHJcbiAgICAgICAgICAgICAgICB0YWtlckFtb3VudDogYXNzZXRGaWxsQW1vdW50LFxyXG4gICAgICAgICAgICAgICAgZXhwaXJ5OiBuZXcgQmlnTnVtYmVyKDE2NTI3MjI3NjcpLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgemVyb0V4RmVlQW1vdW50ID0gWkVSTztcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHF1b3RlVG9rZW5CYXNlVW5pdFByaWNlVXNkID0gbmV3IEJpZ051bWJlcigxZS02KTtcclxuICAgICAgICAgICAgY29uc3QgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkID0gbmV3IEJpZ051bWJlcigzZS0xNSk7XHJcblxyXG4gICAgICAgICAgICAvLyBXaGVuXHJcbiAgICAgICAgICAgIGNvbnN0IHJldmlzZWRRdW90ZSA9IHJldmlzZVF1b3RlV2l0aEZlZXMoXHJcbiAgICAgICAgICAgICAgICBtYWtlclF1b3RlV2l0aEdhc0ZlZSxcclxuICAgICAgICAgICAgICAgIHplcm9FeEZlZUFtb3VudCxcclxuICAgICAgICAgICAgICAgIGlzU2VsbGluZyxcclxuICAgICAgICAgICAgICAgIHF1b3RlVG9rZW5CYXNlVW5pdFByaWNlVXNkLFxyXG4gICAgICAgICAgICAgICAgZmVlVG9rZW5CYXNlVW5pdFByaWNlVXNkLFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8gVGhlblxyXG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFJldmlzZWRNYWtlckFtb3VudCA9IG5ldyBCaWdOdW1iZXIoMTAwMGU2KTtcclxuICAgICAgICAgICAgZXhwZWN0KHJldmlzZWRRdW90ZS5tYWtlckFtb3VudCkudG9NYXRjaE9iamVjdChleHBlY3RlZFJldmlzZWRNYWtlckFtb3VudCk7XHJcbiAgICAgICAgICAgIGV4cGVjdChyZXZpc2VkUXVvdGUudGFrZXJBbW91bnQpLnRvTWF0Y2hPYmplY3QoYXNzZXRGaWxsQW1vdW50KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59KTtcclxuIl0sInZlcnNpb24iOjN9