{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/handlers/dummy_mm_handler_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/handlers/dummy_mm_handler_test.ts"],"sourcesContent":["import { OtcOrder } from '@0x/protocol-utils';\nimport { BigNumber } from '@0x/utils';\nimport * as express from 'express';\nimport * as asyncHandler from 'express-async-handler';\nimport * as HttpStatus from 'http-status-codes';\nimport * as supertest from 'supertest';\n\nimport { DummyMMHandlers } from '../../src/handlers/dummy_mm_handler';\nimport { getSignerFromHash } from '../../src/utils/signature_utils';\n\nconst POLYGON_CHAIN_ID = 137;\nconst USDC_POLYGON = '0x2791bca1f2de4661ed88a30c99a7a9449aa84174';\nconst USDT_POLYGON = '0xc2132d05d31c914a87c6611c10748aeb04b58e8f';\nconst MM_ADDRESS = '0x06754422cf9f54ae0e67d42fd788b33d8eb4c5d5';\nconst INTEGRATOR_ID = '74188355-c85b-4f18-9de4-6dec3ec61b8d';\nconst dummyMMHandler = new DummyMMHandlers();\nconst emptyOtcOrder = new OtcOrder();\nconst emptyOtcOrderParam = {\n    maker: emptyOtcOrder.maker,\n    taker: emptyOtcOrder.taker,\n    makerAmount: emptyOtcOrder.makerAmount.toString(),\n    takerAmount: emptyOtcOrder.takerAmount.toString(),\n    makerToken: emptyOtcOrder.makerToken,\n    takerToken: emptyOtcOrder.takerToken,\n    txOrigin: emptyOtcOrder.txOrigin,\n    expiryAndNonce: emptyOtcOrder.expiryAndNonce.toString(),\n    chainId: emptyOtcOrder.chainId.toString(),\n    verifyingContract: emptyOtcOrder.verifyingContract,\n};\nconst acceptedOtcOrder = new OtcOrder({\n    makerToken: USDC_POLYGON,\n    takerToken: USDT_POLYGON,\n    takerAmount: new BigNumber('200'),\n    chainId: POLYGON_CHAIN_ID,\n});\nconst acceptedOtcOrderParam = {\n    maker: acceptedOtcOrder.maker,\n    taker: acceptedOtcOrder.taker,\n    makerAmount: acceptedOtcOrder.makerAmount.toString(),\n    takerAmount: acceptedOtcOrder.takerAmount.toString(),\n    makerToken: acceptedOtcOrder.makerToken,\n    takerToken: acceptedOtcOrder.takerToken,\n    txOrigin: acceptedOtcOrder.txOrigin,\n    expiryAndNonce: acceptedOtcOrder.expiryAndNonce.toString(),\n    chainId: acceptedOtcOrder.chainId.toString(),\n    verifyingContract: acceptedOtcOrder.verifyingContract,\n};\nconst refusedOtcOrder = new OtcOrder({\n    makerToken: USDC_POLYGON,\n    takerToken: USDT_POLYGON,\n    takerAmount: new BigNumber('1000000'),\n    chainId: POLYGON_CHAIN_ID,\n});\nconst refusedOtcOrderParam = {\n    maker: refusedOtcOrder.maker,\n    taker: refusedOtcOrder.taker,\n    makerAmount: refusedOtcOrder.makerAmount.toString(),\n    takerAmount: refusedOtcOrder.takerAmount.toString(),\n    makerToken: refusedOtcOrder.makerToken,\n    takerToken: refusedOtcOrder.takerToken,\n    txOrigin: refusedOtcOrder.txOrigin,\n    expiryAndNonce: refusedOtcOrder.expiryAndNonce.toString(),\n    chainId: refusedOtcOrder.chainId.toString(),\n    verifyingContract: refusedOtcOrder.verifyingContract,\n};\n\ndescribe('DummyMMHandlers', () => {\n    describe('signRfqtV2Async', () => {\n        it('returns BAD_REQUEST when order hash does not match with order hash query param', async () => {\n            const response = await supertest(\n                express()\n                    .use(express.json())\n                    .post('/rfqt/v2/sign', asyncHandler(dummyMMHandler.signRfqtV2Async.bind(dummyMMHandler))),\n            )\n                .post('/rfqt/v2/sign')\n                .set('Content-type', 'application/json')\n                .send({\n                    order: emptyOtcOrderParam,\n                    orderHash: '0xrandom',\n                    feeAmount: '10',\n                    feeToken: '0xfee',\n                    expiry: '20',\n                });\n\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\n        });\n\n        it('returns NO_CONTENT when tokens in the order are not part of provided liquity', async () => {\n            const response = await supertest(\n                express()\n                    .use(express.json())\n                    .post('/rfqt/v2/sign', asyncHandler(dummyMMHandler.signRfqtV2Async.bind(dummyMMHandler))),\n            )\n                .post('/rfqt/v2/sign')\n                .set('Content-type', 'application/json')\n                .send({\n                    order: emptyOtcOrderParam,\n                    orderHash: emptyOtcOrder.getHash(),\n                    feeAmount: '10',\n                    feeToken: '0xfee',\n                    expiry: '20',\n                });\n\n            expect(response.statusCode).toEqual(HttpStatus.NO_CONTENT);\n        });\n\n        it('returns NO_CONTENT when the market marker refuses to sign the order', async () => {\n            const response = await supertest(\n                express()\n                    .use(express.json())\n                    .post('/rfqt/v2/sign', asyncHandler(dummyMMHandler.signRfqtV2Async.bind(dummyMMHandler))),\n            )\n                .post('/rfqt/v2/sign')\n                .set('Content-type', 'application/json')\n                .send({\n                    order: refusedOtcOrderParam,\n                    orderHash: refusedOtcOrder.getHash(),\n                    feeAmount: '10',\n                    feeToken: '0xfee',\n                    expiry: '20',\n                });\n\n            expect(response.statusCode).toEqual(HttpStatus.NO_CONTENT);\n        });\n\n        it('returns OK when the market marker signs', async () => {\n            const response = await supertest(\n                express()\n                    .use(express.json())\n                    .post('/rfqt/v2/sign', asyncHandler(dummyMMHandler.signRfqtV2Async.bind(dummyMMHandler))),\n            )\n                .post('/rfqt/v2/sign')\n                .set('Content-type', 'application/json')\n                .send({\n                    order: acceptedOtcOrderParam,\n                    orderHash: acceptedOtcOrder.getHash(),\n                    feeAmount: '10',\n                    feeToken: '0xfee',\n                    expiry: '20',\n                });\n\n            expect(response.statusCode).toEqual(HttpStatus.OK);\n            const signer = getSignerFromHash(acceptedOtcOrder.getHash(), response.body.makerSignature);\n            expect(signer).toEqual(MM_ADDRESS);\n        });\n    });\n\n    describe('getQuoteRfqtV2Async', () => {\n        it('returns BAD_REQUEST when missing integrator id', async () => {\n            const response = await supertest(\n                express().get('/rfqt/v2/quote', asyncHandler(dummyMMHandler.getQuoteRfqtV2Async.bind(dummyMMHandler))),\n            )\n                .get('/rfqt/v2/quote')\n                .query({\n                    sellTokenAddress: USDC_POLYGON,\n                    buyTokenAddress: USDT_POLYGON,\n                    sellAmountBaseUnits: '200',\n                    txOrigin: '0x123456789',\n                    takerAddress: '0x123456789',\n                    feeToken: USDC_POLYGON,\n                    feeAmount: '10',\n                    chainId: POLYGON_CHAIN_ID.toString(),\n                });\n\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\n        });\n\n        it('returns BAD_REQUEST when integrator id is not whitelisted', async () => {\n            const response = await supertest(\n                express().get('/rfqt/v2/quote', asyncHandler(dummyMMHandler.getQuoteRfqtV2Async.bind(dummyMMHandler))),\n            )\n                .get('/rfqt/v2/quote')\n                .set('0x-integrator-id', '0123')\n                .query({\n                    sellTokenAddress: USDC_POLYGON,\n                    buyTokenAddress: USDT_POLYGON,\n                    sellAmountBaseUnits: '200',\n                    txOrigin: '0x123456789',\n                    takerAddress: '0x123456789',\n                    feeToken: USDC_POLYGON,\n                    feeAmount: '10',\n                    chainId: POLYGON_CHAIN_ID.toString(),\n                    integratorId: '0123',\n                });\n\n            expect(response.statusCode).toEqual(HttpStatus.BAD_REQUEST);\n        });\n\n        it('returns NO_CONTENT when tokens in the order are not part of provided liquity', async () => {\n            const response = await supertest(\n                express().get('/rfqt/v2/quote', asyncHandler(dummyMMHandler.getQuoteRfqtV2Async.bind(dummyMMHandler))),\n            )\n                .get('/rfqt/v2/quote')\n                .set('0x-integrator-id', INTEGRATOR_ID)\n                .query({\n                    sellTokenAddress: '0x1234',\n                    buyTokenAddress: USDT_POLYGON,\n                    sellAmountBaseUnits: '200',\n                    txOrigin: '0x123456789',\n                    takerAddress: '0x123456789',\n                    feeToken: USDC_POLYGON,\n                    feeAmount: '10',\n                    chainId: POLYGON_CHAIN_ID.toString(),\n                    integratorId: INTEGRATOR_ID,\n                });\n\n            expect(response.statusCode).toEqual(HttpStatus.NO_CONTENT);\n        });\n\n        it('returns NO_CONTENT when buy/sell amount > 2', async () => {\n            const response = await supertest(\n                express().get('/rfqt/v2/quote', asyncHandler(dummyMMHandler.getQuoteRfqtV2Async.bind(dummyMMHandler))),\n            )\n                .get('/rfqt/v2/quote')\n                .set('0x-integrator-id', INTEGRATOR_ID)\n                .query({\n                    sellTokenAddress: USDC_POLYGON,\n                    buyTokenAddress: USDT_POLYGON,\n                    sellAmountBaseUnits: '20000000000',\n                    txOrigin: '0x123456789',\n                    takerAddress: '0x123456789',\n                    feeToken: USDC_POLYGON,\n                    feeAmount: '10',\n                    chainId: POLYGON_CHAIN_ID.toString(),\n                    integratorId: INTEGRATOR_ID,\n                });\n\n            expect(response.statusCode).toEqual(HttpStatus.NO_CONTENT);\n        });\n\n        it('returns NO_CONTENT when trading amount is considered odd', async () => {\n            const response = await supertest(\n                express().get('/rfqt/v2/quote', asyncHandler(dummyMMHandler.getQuoteRfqtV2Async.bind(dummyMMHandler))),\n            )\n                .get('/rfqt/v2/quote')\n                .set('0x-integrator-id', INTEGRATOR_ID)\n                .query({\n                    sellTokenAddress: USDC_POLYGON,\n                    buyTokenAddress: USDT_POLYGON,\n                    sellAmountBaseUnits: '1000000',\n                    txOrigin: '0x123456789',\n                    takerAddress: '0x123456789',\n                    feeToken: USDC_POLYGON,\n                    feeAmount: '10',\n                    chainId: POLYGON_CHAIN_ID.toString(),\n                    integratorId: INTEGRATOR_ID,\n                });\n\n            expect(response.statusCode).toEqual(HttpStatus.NO_CONTENT);\n        });\n\n        it('returns OK the market maker signs the order', async () => {\n            const response = await supertest(\n                express().get('/rfqt/v2/quote', asyncHandler(dummyMMHandler.getQuoteRfqtV2Async.bind(dummyMMHandler))),\n            )\n                .get('/rfqt/v2/quote')\n                .set('0x-integrator-id', INTEGRATOR_ID)\n                .query({\n                    sellTokenAddress: USDC_POLYGON,\n                    buyTokenAddress: USDT_POLYGON,\n                    sellAmountBaseUnits: '200',\n                    txOrigin: '0x123456789',\n                    takerAddress: '0x123456789',\n                    feeToken: USDC_POLYGON,\n                    feeAmount: '10',\n                    chainId: POLYGON_CHAIN_ID.toString(),\n                    integratorId: INTEGRATOR_ID,\n                });\n\n            expect(response.statusCode).toEqual(HttpStatus.OK);\n        });\n    });\n});\n"],"version":3}