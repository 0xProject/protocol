124be772bcd73f3a7f75c8f037c066b3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const contract_addresses_1 = require("@0x/contract-addresses");
const bullmq_1 = require("bullmq");
const chai_1 = require("chai");
const ioredis_1 = require("ioredis");
const ts_mockito_1 = require("ts-mockito");
const maker_balance_cache_evict_1 = require("../src/background-jobs/maker_balance_cache_evict");
const maker_balance_cache_update_1 = require("../src/background-jobs/maker_balance_cache_update");
const config_1 = require("../src/config");
const rfq_maker_balance_cache_service_1 = require("../src/services/rfq_maker_balance_cache_service");
const serviceBuilder = require("../src/utils/rfqm_service_builder");
describe('Background Jobs Unit Tests', () => {
    describe('maker-balance-cache-evict', () => {
        it('should fail to create background job when bad chain id is passed', async () => {
            const spiedChainConfigurations = (0, ts_mockito_1.spy)(config_1.CHAIN_CONFIGURATIONS);
            (0, ts_mockito_1.when)(spiedChainConfigurations.find((0, ts_mockito_1.anything)())).thenReturn(undefined);
            const { createAsync, processAsync } = maker_balance_cache_evict_1.default;
            const connectionMock = (0, ts_mockito_1.mock)(ioredis_1.default);
            const queue = new bullmq_1.Queue(maker_balance_cache_evict_1.default.queueName, { connection: (0, ts_mockito_1.instance)(connectionMock) });
            const spiedQueue = (0, ts_mockito_1.spy)(queue);
            (0, ts_mockito_1.when)(spiedQueue.emit((0, ts_mockito_1.anything)())).thenReturn(true);
            const spiedJob = (0, ts_mockito_1.spy)(bullmq_1.Job);
            (0, ts_mockito_1.when)(spiedJob.create((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenCall(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (q, name, data) => new bullmq_1.Job(q, name, data));
            const badChainId = 11111111;
            const timestamp = Date.now();
            try {
                const job = await createAsync(queue, {
                    chainId: badChainId,
                    timestamp,
                });
                (0, chai_1.expect)(job.queueName).to.eq(maker_balance_cache_evict_1.default.queueName);
                const spiedJobInstance = (0, ts_mockito_1.spy)(job);
                (0, ts_mockito_1.when)(spiedJobInstance.updateProgress((0, ts_mockito_1.anything)())).thenResolve();
                (0, chai_1.expect)(processAsync(job)).to.be.rejectedWith('chain configuration');
            }
            catch (error) {
                chai_1.expect.fail('should create background job without error');
            }
        });
        it('processes maker balance cache eviction without error', async () => {
            const spiedChainConfigurations = (0, ts_mockito_1.spy)(config_1.CHAIN_CONFIGURATIONS);
            (0, ts_mockito_1.when)(spiedChainConfigurations.find((0, ts_mockito_1.anything)())).thenReturn((0, ts_mockito_1.anything)());
            const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.evictZeroBalancesAsync((0, ts_mockito_1.anything)())).thenResolve(1);
            const spiedServiceBuilderAsync = (0, ts_mockito_1.spy)(serviceBuilder);
            (0, ts_mockito_1.when)(spiedServiceBuilderAsync.buildRfqMakerBalanceCacheServiceAsync((0, ts_mockito_1.anything)())).thenResolve((0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock));
            const { createAsync, processAsync } = maker_balance_cache_evict_1.default;
            const connectionMock = (0, ts_mockito_1.mock)(ioredis_1.default);
            const queue = new bullmq_1.Queue(maker_balance_cache_evict_1.default.queueName, { connection: (0, ts_mockito_1.instance)(connectionMock) });
            const spiedQueue = (0, ts_mockito_1.spy)(queue);
            (0, ts_mockito_1.when)(spiedQueue.emit((0, ts_mockito_1.anything)())).thenReturn(true);
            const spiedJob = (0, ts_mockito_1.spy)(bullmq_1.Job);
            (0, ts_mockito_1.when)(spiedJob.create((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenCall(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (q, name, data) => new bullmq_1.Job(q, name, data));
            const chainId = contract_addresses_1.ChainId.Ganache;
            const timestamp = Date.now();
            try {
                const job = await createAsync(queue, {
                    chainId,
                    timestamp,
                });
                (0, chai_1.expect)(job.queueName).to.eq(maker_balance_cache_evict_1.default.queueName);
                const spiedJobInstance = (0, ts_mockito_1.spy)(job);
                (0, ts_mockito_1.when)(spiedJobInstance.updateProgress((0, ts_mockito_1.anything)())).thenResolve();
                const result = await processAsync(job);
                (0, chai_1.expect)(result.chainId).to.eq(chainId);
                (0, chai_1.expect)(result.numEvicted).to.eq(1);
            }
            catch (error) {
                chai_1.expect.fail('should create and update background job without error');
            }
        });
        it('should fail to process job when malformed cache service is passed', async () => {
            const spiedChainConfigurations = (0, ts_mockito_1.spy)(config_1.CHAIN_CONFIGURATIONS);
            (0, ts_mockito_1.when)(spiedChainConfigurations.find((0, ts_mockito_1.anything)())).thenReturn((0, ts_mockito_1.anything)());
            const spiedServiceBuilderAsync = (0, ts_mockito_1.spy)(serviceBuilder);
            (0, ts_mockito_1.when)(spiedServiceBuilderAsync.buildRfqMakerBalanceCacheServiceAsync((0, ts_mockito_1.anything)())).thenResolve();
            const { createAsync, processAsync } = maker_balance_cache_evict_1.default;
            const connectionMock = (0, ts_mockito_1.mock)(ioredis_1.default);
            const queue = new bullmq_1.Queue(maker_balance_cache_evict_1.default.queueName, { connection: (0, ts_mockito_1.instance)(connectionMock) });
            const spiedQueue = (0, ts_mockito_1.spy)(queue);
            (0, ts_mockito_1.when)(spiedQueue.emit((0, ts_mockito_1.anything)())).thenReturn(true);
            const spiedJob = (0, ts_mockito_1.spy)(bullmq_1.Job);
            (0, ts_mockito_1.when)(spiedJob.create((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenCall(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (q, name, data) => new bullmq_1.Job(q, name, data));
            const chainId = contract_addresses_1.ChainId.Ganache;
            const timestamp = Date.now();
            try {
                const job = await createAsync(queue, {
                    chainId,
                    timestamp,
                });
                (0, chai_1.expect)(job.queueName).to.eq(maker_balance_cache_evict_1.default.queueName);
                const spiedJobInstance = (0, ts_mockito_1.spy)(job);
                (0, ts_mockito_1.when)(spiedJobInstance.updateProgress((0, ts_mockito_1.anything)())).thenResolve();
                (0, chai_1.expect)(processAsync(job)).to.be.rejectedWith('initialize dependencies');
            }
            catch (error) {
                chai_1.expect.fail('should create background job without error');
            }
        });
        it('should fail to process job when the cache service fails to evict entries', async () => {
            const spiedChainConfigurations = (0, ts_mockito_1.spy)(config_1.CHAIN_CONFIGURATIONS);
            (0, ts_mockito_1.when)(spiedChainConfigurations.find((0, ts_mockito_1.anything)())).thenReturn((0, ts_mockito_1.anything)());
            const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.evictZeroBalancesAsync((0, ts_mockito_1.anything)())).thenReject(new Error('cache failed'));
            const spiedServiceBuilderAsync = (0, ts_mockito_1.spy)(serviceBuilder);
            (0, ts_mockito_1.when)(spiedServiceBuilderAsync.buildRfqMakerBalanceCacheServiceAsync((0, ts_mockito_1.anything)())).thenResolve((0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock));
            const { createAsync, processAsync } = maker_balance_cache_evict_1.default;
            const connectionMock = (0, ts_mockito_1.mock)(ioredis_1.default);
            const queue = new bullmq_1.Queue(maker_balance_cache_evict_1.default.queueName, { connection: (0, ts_mockito_1.instance)(connectionMock) });
            const spiedQueue = (0, ts_mockito_1.spy)(queue);
            (0, ts_mockito_1.when)(spiedQueue.emit((0, ts_mockito_1.anything)())).thenReturn(true);
            const spiedJob = (0, ts_mockito_1.spy)(bullmq_1.Job);
            (0, ts_mockito_1.when)(spiedJob.create((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenCall(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (q, name, data) => new bullmq_1.Job(q, name, data));
            const chainId = contract_addresses_1.ChainId.Ganache;
            const timestamp = Date.now();
            try {
                const job = await createAsync(queue, {
                    chainId,
                    timestamp,
                });
                (0, chai_1.expect)(job.queueName).to.eq(maker_balance_cache_evict_1.default.queueName);
                const spiedJobInstance = (0, ts_mockito_1.spy)(job);
                (0, ts_mockito_1.when)(spiedJobInstance.updateProgress((0, ts_mockito_1.anything)())).thenResolve();
                (0, chai_1.expect)(processAsync(job)).to.be.rejectedWith('evict maker balance cache');
            }
            catch (error) {
                chai_1.expect.fail('should create background job without error');
            }
        });
    });
    describe('maker-balance-cache-update', () => {
        it('should fail to create background job when bad chain id is passed', async () => {
            const spiedChainConfigurations = (0, ts_mockito_1.spy)(config_1.CHAIN_CONFIGURATIONS);
            (0, ts_mockito_1.when)(spiedChainConfigurations.find((0, ts_mockito_1.anything)())).thenReturn(undefined);
            const { createAsync, processAsync } = maker_balance_cache_update_1.default;
            const connectionMock = (0, ts_mockito_1.mock)(ioredis_1.default);
            const queue = new bullmq_1.Queue(maker_balance_cache_update_1.default.queueName, { connection: (0, ts_mockito_1.instance)(connectionMock) });
            const spiedQueue = (0, ts_mockito_1.spy)(queue);
            (0, ts_mockito_1.when)(spiedQueue.emit((0, ts_mockito_1.anything)())).thenReturn(true);
            const spiedJob = (0, ts_mockito_1.spy)(bullmq_1.Job);
            (0, ts_mockito_1.when)(spiedJob.create((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenCall(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (q, name, data) => new bullmq_1.Job(q, name, data));
            const badChainId = 11111111;
            const timestamp = Date.now();
            try {
                const job = await createAsync(queue, {
                    chainId: badChainId,
                    timestamp,
                });
                (0, chai_1.expect)(job.queueName).to.eq(maker_balance_cache_update_1.default.queueName);
                const spiedJobInstance = (0, ts_mockito_1.spy)(job);
                (0, ts_mockito_1.when)(spiedJobInstance.updateProgress((0, ts_mockito_1.anything)())).thenResolve();
                (0, chai_1.expect)(processAsync(job)).to.be.rejectedWith('chain configuration');
            }
            catch (error) {
                chai_1.expect.fail('should create background job without error');
            }
        });
        it('processes maker balance cache update without error', async () => {
            const spiedChainConfigurations = (0, ts_mockito_1.spy)(config_1.CHAIN_CONFIGURATIONS);
            (0, ts_mockito_1.when)(spiedChainConfigurations.find((0, ts_mockito_1.anything)())).thenReturn((0, ts_mockito_1.anything)());
            const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.updateERC20OwnerBalancesAsync((0, ts_mockito_1.anything)())).thenResolve();
            const spiedServiceBuilderAsync = (0, ts_mockito_1.spy)(serviceBuilder);
            (0, ts_mockito_1.when)(spiedServiceBuilderAsync.buildRfqMakerBalanceCacheServiceAsync((0, ts_mockito_1.anything)())).thenResolve((0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock));
            const { createAsync, processAsync } = maker_balance_cache_update_1.default;
            const connectionMock = (0, ts_mockito_1.mock)(ioredis_1.default);
            const queue = new bullmq_1.Queue(maker_balance_cache_update_1.default.queueName, { connection: (0, ts_mockito_1.instance)(connectionMock) });
            const spiedQueue = (0, ts_mockito_1.spy)(queue);
            (0, ts_mockito_1.when)(spiedQueue.emit((0, ts_mockito_1.anything)())).thenReturn(true);
            const spiedJob = (0, ts_mockito_1.spy)(bullmq_1.Job);
            (0, ts_mockito_1.when)(spiedJob.create((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenCall(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (q, name, data) => new bullmq_1.Job(q, name, data));
            const chainId = contract_addresses_1.ChainId.Ganache;
            const timestamp = Date.now();
            let job;
            try {
                job = await createAsync(queue, {
                    chainId,
                    timestamp,
                });
                (0, chai_1.expect)(job.queueName).to.eq(maker_balance_cache_update_1.default.queueName);
                const spiedJobInstance = (0, ts_mockito_1.spy)(job);
                (0, ts_mockito_1.when)(spiedJobInstance.updateProgress((0, ts_mockito_1.anything)())).thenResolve();
                const result = await processAsync(job);
                (0, chai_1.expect)(result.chainId).to.eq(chainId);
            }
            catch (error) {
                chai_1.expect.fail('should create and update background job without error');
            }
        });
        it('should fail to process job when the cache service fails to update entries', async () => {
            const spiedChainConfigurations = (0, ts_mockito_1.spy)(config_1.CHAIN_CONFIGURATIONS);
            (0, ts_mockito_1.when)(spiedChainConfigurations.find((0, ts_mockito_1.anything)())).thenReturn((0, ts_mockito_1.anything)());
            const rfqMakerBalanceCacheServiceMock = (0, ts_mockito_1.mock)(rfq_maker_balance_cache_service_1.RfqMakerBalanceCacheService);
            (0, ts_mockito_1.when)(rfqMakerBalanceCacheServiceMock.updateERC20OwnerBalancesAsync((0, ts_mockito_1.anything)())).thenReject(new Error('cache failed'));
            const spiedServiceBuilderAsync = (0, ts_mockito_1.spy)(serviceBuilder);
            (0, ts_mockito_1.when)(spiedServiceBuilderAsync.buildRfqMakerBalanceCacheServiceAsync((0, ts_mockito_1.anything)())).thenResolve((0, ts_mockito_1.instance)(rfqMakerBalanceCacheServiceMock));
            const { createAsync, processAsync } = maker_balance_cache_update_1.default;
            const connectionMock = (0, ts_mockito_1.mock)(ioredis_1.default);
            const queue = new bullmq_1.Queue(maker_balance_cache_update_1.default.queueName, { connection: (0, ts_mockito_1.instance)(connectionMock) });
            const spiedQueue = (0, ts_mockito_1.spy)(queue);
            (0, ts_mockito_1.when)(spiedQueue.emit((0, ts_mockito_1.anything)())).thenReturn(true);
            const spiedJob = (0, ts_mockito_1.spy)(bullmq_1.Job);
            (0, ts_mockito_1.when)(spiedJob.create((0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)(), (0, ts_mockito_1.anything)())).thenCall(
            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (q, name, data) => new bullmq_1.Job(q, name, data));
            const chainId = contract_addresses_1.ChainId.Ganache;
            const timestamp = Date.now();
            let job;
            try {
                job = await createAsync(queue, {
                    chainId,
                    timestamp,
                });
                (0, chai_1.expect)(job.queueName).to.eq(maker_balance_cache_update_1.default.queueName);
                const spiedJobInstance = (0, ts_mockito_1.spy)(job);
                (0, ts_mockito_1.when)(spiedJobInstance.updateProgress((0, ts_mockito_1.anything)())).thenResolve();
                (0, chai_1.expect)(processAsync(job)).to.be.rejectedWith('update maker balance cache');
            }
            catch (error) {
                chai_1.expect.fail('should create background job without error');
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,