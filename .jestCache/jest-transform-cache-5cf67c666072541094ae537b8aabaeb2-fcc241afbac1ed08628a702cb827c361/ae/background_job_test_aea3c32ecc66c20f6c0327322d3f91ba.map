{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/background_job_test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/background_job_test.ts"],"sourcesContent":["import { ChainId } from '@0x/contract-addresses';\nimport { Job, Queue } from 'bullmq';\nimport { expect } from 'chai';\nimport Redis from 'ioredis';\nimport { anything, instance, mock, spy, when } from 'ts-mockito';\n\nimport backgroundJobMBCEvict from '../src/background-jobs/maker_balance_cache_evict';\nimport backgroundJobMBCUpdate, {\n    BackgroundJobMBCUpdateData,\n    BackgroundJobMBCUpdateResult,\n} from '../src/background-jobs/maker_balance_cache_update';\nimport { CHAIN_CONFIGURATIONS } from '../src/config';\nimport { RfqMakerBalanceCacheService } from '../src/services/rfq_maker_balance_cache_service';\nimport * as serviceBuilder from '../src/utils/rfqm_service_builder';\n\ndescribe('Background Jobs Unit Tests', () => {\n    describe('maker-balance-cache-evict', () => {\n        it('should fail to create background job when bad chain id is passed', async () => {\n            const spiedChainConfigurations = spy(CHAIN_CONFIGURATIONS);\n            when(spiedChainConfigurations.find(anything())).thenReturn(undefined);\n\n            const { createAsync, processAsync } = backgroundJobMBCEvict;\n\n            const connectionMock = mock(Redis);\n\n            const queue = new Queue(backgroundJobMBCEvict.queueName, { connection: instance(connectionMock) });\n            const spiedQueue = spy(queue);\n            when(spiedQueue.emit(anything())).thenReturn(true);\n\n            const spiedJob = spy(Job);\n            when(spiedJob.create(anything(), anything(), anything(), anything())).thenCall(\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                (q: Queue, name: any, data: any) => new Job(q, name, data),\n            );\n\n            const badChainId = 11111111;\n            const timestamp = Date.now();\n\n            try {\n                const job = await createAsync(queue, {\n                    chainId: badChainId,\n                    timestamp,\n                });\n                expect(job.queueName).to.eq(backgroundJobMBCEvict.queueName);\n\n                const spiedJobInstance = spy(job);\n                when(spiedJobInstance.updateProgress(anything())).thenResolve();\n\n                expect(processAsync(job)).to.be.rejectedWith('chain configuration');\n            } catch (error) {\n                expect.fail('should create background job without error');\n            }\n        });\n\n        it('processes maker balance cache eviction without error', async () => {\n            const spiedChainConfigurations = spy(CHAIN_CONFIGURATIONS);\n            when(spiedChainConfigurations.find(anything())).thenReturn(anything());\n\n            const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n            when(rfqMakerBalanceCacheServiceMock.evictZeroBalancesAsync(anything())).thenResolve(1);\n\n            const spiedServiceBuilderAsync = spy(serviceBuilder);\n            when(spiedServiceBuilderAsync.buildRfqMakerBalanceCacheServiceAsync(anything())).thenResolve(\n                instance(rfqMakerBalanceCacheServiceMock),\n            );\n            const { createAsync, processAsync } = backgroundJobMBCEvict;\n\n            const connectionMock = mock(Redis);\n\n            const queue = new Queue(backgroundJobMBCEvict.queueName, { connection: instance(connectionMock) });\n            const spiedQueue = spy(queue);\n            when(spiedQueue.emit(anything())).thenReturn(true);\n\n            const spiedJob = spy(Job);\n            when(spiedJob.create(anything(), anything(), anything(), anything())).thenCall(\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                (q: Queue, name: any, data: any) => new Job(q, name, data),\n            );\n\n            const chainId = ChainId.Ganache;\n            const timestamp = Date.now();\n\n            try {\n                const job = await createAsync(queue, {\n                    chainId,\n                    timestamp,\n                });\n                expect(job.queueName).to.eq(backgroundJobMBCEvict.queueName);\n\n                const spiedJobInstance = spy(job);\n                when(spiedJobInstance.updateProgress(anything())).thenResolve();\n\n                const result = await processAsync(job);\n                expect(result.chainId).to.eq(chainId);\n                expect(result.numEvicted).to.eq(1);\n            } catch (error) {\n                expect.fail('should create and update background job without error');\n            }\n        });\n\n        it('should fail to process job when malformed cache service is passed', async () => {\n            const spiedChainConfigurations = spy(CHAIN_CONFIGURATIONS);\n            when(spiedChainConfigurations.find(anything())).thenReturn(anything());\n\n            const spiedServiceBuilderAsync = spy(serviceBuilder);\n            when(spiedServiceBuilderAsync.buildRfqMakerBalanceCacheServiceAsync(anything())).thenResolve();\n            const { createAsync, processAsync } = backgroundJobMBCEvict;\n\n            const connectionMock = mock(Redis);\n\n            const queue = new Queue(backgroundJobMBCEvict.queueName, { connection: instance(connectionMock) });\n            const spiedQueue = spy(queue);\n            when(spiedQueue.emit(anything())).thenReturn(true);\n\n            const spiedJob = spy(Job);\n            when(spiedJob.create(anything(), anything(), anything(), anything())).thenCall(\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                (q: Queue, name: any, data: any) => new Job(q, name, data),\n            );\n\n            const chainId = ChainId.Ganache;\n            const timestamp = Date.now();\n\n            try {\n                const job = await createAsync(queue, {\n                    chainId,\n                    timestamp,\n                });\n                expect(job.queueName).to.eq(backgroundJobMBCEvict.queueName);\n\n                const spiedJobInstance = spy(job);\n                when(spiedJobInstance.updateProgress(anything())).thenResolve();\n\n                expect(processAsync(job)).to.be.rejectedWith('initialize dependencies');\n            } catch (error) {\n                expect.fail('should create background job without error');\n            }\n        });\n\n        it('should fail to process job when the cache service fails to evict entries', async () => {\n            const spiedChainConfigurations = spy(CHAIN_CONFIGURATIONS);\n            when(spiedChainConfigurations.find(anything())).thenReturn(anything());\n\n            const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n            when(rfqMakerBalanceCacheServiceMock.evictZeroBalancesAsync(anything())).thenReject(\n                new Error('cache failed'),\n            );\n\n            const spiedServiceBuilderAsync = spy(serviceBuilder);\n            when(spiedServiceBuilderAsync.buildRfqMakerBalanceCacheServiceAsync(anything())).thenResolve(\n                instance(rfqMakerBalanceCacheServiceMock),\n            );\n            const { createAsync, processAsync } = backgroundJobMBCEvict;\n\n            const connectionMock = mock(Redis);\n\n            const queue = new Queue(backgroundJobMBCEvict.queueName, { connection: instance(connectionMock) });\n            const spiedQueue = spy(queue);\n            when(spiedQueue.emit(anything())).thenReturn(true);\n\n            const spiedJob = spy(Job);\n            when(spiedJob.create(anything(), anything(), anything(), anything())).thenCall(\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                (q: Queue, name: any, data: any) => new Job(q, name, data),\n            );\n\n            const chainId = ChainId.Ganache;\n            const timestamp = Date.now();\n\n            try {\n                const job = await createAsync(queue, {\n                    chainId,\n                    timestamp,\n                });\n                expect(job.queueName).to.eq(backgroundJobMBCEvict.queueName);\n\n                const spiedJobInstance = spy(job);\n                when(spiedJobInstance.updateProgress(anything())).thenResolve();\n\n                expect(processAsync(job)).to.be.rejectedWith('evict maker balance cache');\n            } catch (error) {\n                expect.fail('should create background job without error');\n            }\n        });\n    });\n\n    describe('maker-balance-cache-update', () => {\n        it('should fail to create background job when bad chain id is passed', async () => {\n            const spiedChainConfigurations = spy(CHAIN_CONFIGURATIONS);\n            when(spiedChainConfigurations.find(anything())).thenReturn(undefined);\n\n            const { createAsync, processAsync } = backgroundJobMBCUpdate;\n\n            const connectionMock = mock(Redis);\n\n            const queue = new Queue(backgroundJobMBCUpdate.queueName, { connection: instance(connectionMock) });\n            const spiedQueue = spy(queue);\n            when(spiedQueue.emit(anything())).thenReturn(true);\n\n            const spiedJob = spy(Job);\n            when(spiedJob.create(anything(), anything(), anything(), anything())).thenCall(\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                (q: Queue, name: any, data: any) => new Job(q, name, data),\n            );\n\n            const badChainId = 11111111;\n            const timestamp = Date.now();\n\n            try {\n                const job = await createAsync(queue, {\n                    chainId: badChainId,\n                    timestamp,\n                });\n                expect(job.queueName).to.eq(backgroundJobMBCUpdate.queueName);\n\n                const spiedJobInstance = spy(job);\n                when(spiedJobInstance.updateProgress(anything())).thenResolve();\n\n                expect(processAsync(job)).to.be.rejectedWith('chain configuration');\n            } catch (error) {\n                expect.fail('should create background job without error');\n            }\n        });\n\n        it('processes maker balance cache update without error', async () => {\n            const spiedChainConfigurations = spy(CHAIN_CONFIGURATIONS);\n            when(spiedChainConfigurations.find(anything())).thenReturn(anything());\n\n            const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n            when(rfqMakerBalanceCacheServiceMock.updateERC20OwnerBalancesAsync(anything())).thenResolve();\n\n            const spiedServiceBuilderAsync = spy(serviceBuilder);\n            when(spiedServiceBuilderAsync.buildRfqMakerBalanceCacheServiceAsync(anything())).thenResolve(\n                instance(rfqMakerBalanceCacheServiceMock),\n            );\n            const { createAsync, processAsync } = backgroundJobMBCUpdate;\n\n            const connectionMock = mock(Redis);\n\n            const queue = new Queue(backgroundJobMBCUpdate.queueName, { connection: instance(connectionMock) });\n            const spiedQueue = spy(queue);\n            when(spiedQueue.emit(anything())).thenReturn(true);\n\n            const spiedJob = spy(Job);\n            when(spiedJob.create(anything(), anything(), anything(), anything())).thenCall(\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                (q: Queue, name: any, data: any) => new Job(q, name, data),\n            );\n\n            const chainId = ChainId.Ganache;\n            const timestamp = Date.now();\n\n            let job: Job<BackgroundJobMBCUpdateData, BackgroundJobMBCUpdateResult>;\n            try {\n                job = await createAsync(queue, {\n                    chainId,\n                    timestamp,\n                });\n                expect(job.queueName).to.eq(backgroundJobMBCUpdate.queueName);\n\n                const spiedJobInstance = spy(job);\n                when(spiedJobInstance.updateProgress(anything())).thenResolve();\n\n                const result = await processAsync(job);\n                expect(result.chainId).to.eq(chainId);\n            } catch (error) {\n                expect.fail('should create and update background job without error');\n            }\n        });\n\n        it('should fail to process job when the cache service fails to update entries', async () => {\n            const spiedChainConfigurations = spy(CHAIN_CONFIGURATIONS);\n            when(spiedChainConfigurations.find(anything())).thenReturn(anything());\n\n            const rfqMakerBalanceCacheServiceMock = mock(RfqMakerBalanceCacheService);\n            when(rfqMakerBalanceCacheServiceMock.updateERC20OwnerBalancesAsync(anything())).thenReject(\n                new Error('cache failed'),\n            );\n\n            const spiedServiceBuilderAsync = spy(serviceBuilder);\n            when(spiedServiceBuilderAsync.buildRfqMakerBalanceCacheServiceAsync(anything())).thenResolve(\n                instance(rfqMakerBalanceCacheServiceMock),\n            );\n            const { createAsync, processAsync } = backgroundJobMBCUpdate;\n\n            const connectionMock = mock(Redis);\n\n            const queue = new Queue(backgroundJobMBCUpdate.queueName, { connection: instance(connectionMock) });\n            const spiedQueue = spy(queue);\n            when(spiedQueue.emit(anything())).thenReturn(true);\n\n            const spiedJob = spy(Job);\n            when(spiedJob.create(anything(), anything(), anything(), anything())).thenCall(\n                // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                (q: Queue, name: any, data: any) => new Job(q, name, data),\n            );\n\n            const chainId = ChainId.Ganache;\n            const timestamp = Date.now();\n\n            let job: Job<BackgroundJobMBCUpdateData, BackgroundJobMBCUpdateResult>;\n            try {\n                job = await createAsync(queue, {\n                    chainId,\n                    timestamp,\n                });\n                expect(job.queueName).to.eq(backgroundJobMBCUpdate.queueName);\n\n                const spiedJobInstance = spy(job);\n                when(spiedJobInstance.updateProgress(anything())).thenResolve();\n\n                expect(processAsync(job)).to.be.rejectedWith('update maker balance cache');\n            } catch (error) {\n                expect.fail('should create background job without error');\n            }\n        });\n    });\n});\n"],"version":3}