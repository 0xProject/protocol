{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/services/RfqtServiceTest.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/services/RfqtServiceTest.ts"],"sourcesContent":["// tslint:disable custom-no-magic-numbers max-file-line-count\r\nimport { RfqMakerAssetOfferings } from '@0x/asset-swapper/lib/src/types';\r\nimport { getContractAddressesForChainOrThrow } from '@0x/contract-addresses';\r\nimport { OtcOrder } from '@0x/protocol-utils';\r\nimport { Signature, SignatureType } from '@0x/protocol-utils/lib/src/signature_utils';\r\nimport { TokenMetadata } from '@0x/token-metadata';\r\nimport { MarketOperation } from '@0x/types';\r\nimport { BigNumber } from '@0x/utils';\r\nimport { AxiosInstance } from 'axios';\r\n\r\nimport { Integrator } from '../../src/config';\r\nimport { DEFAULT_MIN_EXPIRY_DURATION_MS, NULL_ADDRESS, ONE_SECOND_MS } from '../../src/core/constants';\r\nimport { RfqMaker } from '../../src/entities';\r\nimport { QuoteRequestor } from '../../src/quoteRequestor/QuoteRequestor';\r\nimport { FeeService } from '../../src/services/fee_service';\r\nimport { RfqtService } from '../../src/services/RfqtService';\r\nimport { RfqMakerBalanceCacheService } from '../../src/services/rfq_maker_balance_cache_service';\r\nimport { FirmQuoteContext, QuoteContext } from '../../src/services/types';\r\nimport { IndicativeQuote } from '../../src/core/types';\r\nimport { CacheClient } from '../../src/utils/cache_client';\r\nimport { ConfigManager } from '../../src/utils/config_manager';\r\nimport { GasStationAttendant } from '../../src/utils/GasStationAttendant';\r\nimport { QuoteServerClient } from '../../src/utils/quote_server_client';\r\nimport { RfqBalanceCheckUtils, RfqBlockchainUtils } from '../../src/utils/rfq_blockchain_utils';\r\nimport { RfqMakerDbUtils } from '../../src/utils/rfq_maker_db_utils';\r\nimport { RfqMakerManager } from '../../src/utils/rfq_maker_manager';\r\nimport { TokenMetadataManager } from '../../src/utils/TokenMetadataManager';\r\nimport { TokenPriceOracle } from '../../src/utils/TokenPriceOracle';\r\nimport { ZeroExApiClient } from '../../src/utils/ZeroExApiClient';\r\n\r\njest.mock('../../src/utils/rfq_maker_manager', () => ({\r\n    RfqMakerManager: jest.fn().mockImplementation(() => {\r\n        return {\r\n            getRfqtV2MakersForPair: jest.fn(),\r\n        };\r\n    }),\r\n}));\r\n\r\njest.mock('../../src/quoteRequestor/QuoteRequestor', () => ({\r\n    QuoteRequestor: jest.fn().mockImplementation(() => {\r\n        return {\r\n            requestRfqtIndicativeQuotesAsync: jest.fn().mockResolvedValue([]),\r\n            requestRfqtFirmQuotesAsync: jest.fn().mockResolvedValue([]),\r\n        };\r\n    }),\r\n}));\r\n\r\njest.mock('../../src/utils/quote_server_client', () => ({\r\n    QuoteServerClient: jest.fn().mockImplementation(() => {\r\n        return {\r\n            batchGetPriceV2Async: jest.fn().mockResolvedValue([]),\r\n        };\r\n    }),\r\n}));\r\n\r\njest.mock('../../src/services/rfq_maker_balance_cache_service', () => ({\r\n    RfqMakerBalanceCacheService: jest.fn().mockImplementation(() => {\r\n        return {\r\n            getERC20OwnerBalancesAsync: jest.fn().mockResolvedValue([]),\r\n        };\r\n    }),\r\n}));\r\n\r\n// TODO (rhinodavid): Find a better way to initialize mocked classes\r\nconst mockQuoteRequestor = jest.mocked(new QuoteRequestor({} as RfqMakerAssetOfferings, {} as AxiosInstance));\r\nconst mockRfqMakerManager = jest.mocked(new RfqMakerManager({} as ConfigManager, {} as RfqMakerDbUtils, 0));\r\nconst mockQuoteServerClient = jest.mocked(new QuoteServerClient({} as AxiosInstance));\r\nconst mockFeeService = jest.mocked(\r\n    new FeeService(\r\n        1337,\r\n        {} as TokenMetadata,\r\n        {} as ConfigManager,\r\n        {} as GasStationAttendant,\r\n        {} as TokenPriceOracle,\r\n        {} as ZeroExApiClient,\r\n        DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n    ),\r\n);\r\nconst mockRfqBlockchainUtils = jest.mocked({} as RfqBlockchainUtils);\r\nconst mockTokenMetadataManager = jest.mocked(new TokenMetadataManager(1337, {} as RfqBlockchainUtils));\r\n// tslint:enable: no-object-literal-type-assertion\r\nconst mockContractAddresses = getContractAddressesForChainOrThrow(1337);\r\nconst mockRfqMakerBalanceCacheService = jest.mocked(\r\n    new RfqMakerBalanceCacheService({} as CacheClient, {} as RfqBalanceCheckUtils),\r\n);\r\n\r\ndescribe('Rfqt Service', () => {\r\n    beforeEach(() => {\r\n        mockQuoteRequestor.requestRfqtFirmQuotesAsync.mockClear();\r\n        mockQuoteRequestor.requestRfqtIndicativeQuotesAsync.mockClear();\r\n        mockQuoteServerClient.batchGetPriceV2Async.mockClear();\r\n        mockRfqMakerManager.getRfqtV2MakersForPair.mockClear();\r\n        mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync.mockClear();\r\n    });\r\n    describe('v1', () => {\r\n        describe('getV1PricesAsync', () => {\r\n            it('passes through calls to QuoteRequestor::requestRfqtIndicativeQuotesAsync', async () => {\r\n                const rfqtService = new RfqtService(\r\n                    0,\r\n                    mockRfqMakerManager,\r\n                    mockQuoteRequestor,\r\n                    mockQuoteServerClient,\r\n                    DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n                    mockRfqBlockchainUtils,\r\n                    mockTokenMetadataManager,\r\n                    mockContractAddresses,\r\n                    mockFeeService,\r\n                    1,\r\n                    mockRfqMakerBalanceCacheService,\r\n                );\r\n\r\n                await rfqtService.getV1PricesAsync({\r\n                    altRfqAssetOfferings: {\r\n                        'alt-mm': [\r\n                            {\r\n                                id: 'id',\r\n                                baseAsset: '0xbaseasset',\r\n                                quoteAsset: '0xquoteasset',\r\n                                baseAssetDecimals: 420,\r\n                                quoteAssetDecimals: 69,\r\n                            },\r\n                        ],\r\n                    },\r\n                    assetFillAmount: new BigNumber(111),\r\n                    comparisonPrice: new BigNumber(666),\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: MarketOperation.Buy,\r\n                    takerAddress: '0xtakeraddress',\r\n                    takerToken: '0xtakertoken',\r\n                    intentOnFilling: false,\r\n                    integrator: {\r\n                        apiKeys: [],\r\n                        allowedChainIds: [],\r\n                        integratorId: 'uuid-integrator',\r\n                        plp: false,\r\n                        rfqm: false,\r\n                        rfqt: true,\r\n                        label: 'Scam Integrator 1',\r\n                    },\r\n                    txOrigin: '0xtxorigin',\r\n                });\r\n\r\n                const args = mockQuoteRequestor.requestRfqtIndicativeQuotesAsync.mock.calls[0];\r\n                expect(args).toMatchInlineSnapshot(`\r\n                    Array [\r\n                      \"0xmakertoken\",\r\n                      \"0xtakertoken\",\r\n                      \"111\",\r\n                      \"Buy\",\r\n                      \"666\",\r\n                      Object {\r\n                        \"altRfqAssetOfferings\": Object {\r\n                          \"alt-mm\": Array [\r\n                            Object {\r\n                              \"baseAsset\": \"0xbaseasset\",\r\n                              \"baseAssetDecimals\": 420,\r\n                              \"id\": \"id\",\r\n                              \"quoteAsset\": \"0xquoteasset\",\r\n                              \"quoteAssetDecimals\": 69,\r\n                            },\r\n                          ],\r\n                        },\r\n                        \"integrator\": Object {\r\n                          \"allowedChainIds\": Array [],\r\n                          \"apiKeys\": Array [],\r\n                          \"integratorId\": \"uuid-integrator\",\r\n                          \"label\": \"Scam Integrator 1\",\r\n                          \"plp\": false,\r\n                          \"rfqm\": false,\r\n                          \"rfqt\": true,\r\n                        },\r\n                        \"intentOnFilling\": false,\r\n                        \"isIndicative\": true,\r\n                        \"isLastLook\": false,\r\n                        \"makerEndpointMaxResponseTimeMs\": 600,\r\n                        \"takerAddress\": \"0xtakeraddress\",\r\n                        \"txOrigin\": \"0xtxorigin\",\r\n                      },\r\n                    ]\r\n                `);\r\n            });\r\n        });\r\n        describe('getV1QuotesAsync', () => {\r\n            it('passes through calls to QuoteRequestor::requestRfqtFirmQuotesAsync', async () => {\r\n                mockQuoteRequestor.requestRfqtFirmQuotesAsync.mockResolvedValue([]);\r\n                const rfqtService = new RfqtService(\r\n                    0,\r\n                    mockRfqMakerManager,\r\n                    mockQuoteRequestor,\r\n                    mockQuoteServerClient,\r\n                    DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n                    mockRfqBlockchainUtils,\r\n                    mockTokenMetadataManager,\r\n                    mockContractAddresses,\r\n                    mockFeeService,\r\n                    1,\r\n                    mockRfqMakerBalanceCacheService,\r\n                );\r\n\r\n                await rfqtService.getV1QuotesAsync({\r\n                    altRfqAssetOfferings: {\r\n                        'alt-mm': [\r\n                            {\r\n                                id: 'id',\r\n                                baseAsset: '0xbaseasset',\r\n                                quoteAsset: '0xquoteasset',\r\n                                baseAssetDecimals: 420,\r\n                                quoteAssetDecimals: 69,\r\n                            },\r\n                        ],\r\n                    },\r\n                    assetFillAmount: new BigNumber(111),\r\n                    comparisonPrice: new BigNumber(666),\r\n                    makerToken: '0xmakertoken',\r\n                    marketOperation: MarketOperation.Buy,\r\n                    takerAddress: '0xtakeraddress',\r\n                    takerToken: '0xtakertoken',\r\n                    intentOnFilling: false,\r\n                    integrator: {\r\n                        allowedChainIds: [],\r\n                        apiKeys: [],\r\n                        integratorId: 'uuid-integrator',\r\n                        plp: false,\r\n                        rfqm: false,\r\n                        rfqt: true,\r\n                        label: 'Scam Integrator 1',\r\n                    },\r\n                    txOrigin: '0xtxorigin',\r\n                });\r\n\r\n                const args = mockQuoteRequestor.requestRfqtFirmQuotesAsync.mock.calls[0];\r\n                expect(args).toMatchInlineSnapshot(`\r\n                    Array [\r\n                      \"0xmakertoken\",\r\n                      \"0xtakertoken\",\r\n                      \"111\",\r\n                      \"Buy\",\r\n                      \"666\",\r\n                      Object {\r\n                        \"altRfqAssetOfferings\": Object {\r\n                          \"alt-mm\": Array [\r\n                            Object {\r\n                              \"baseAsset\": \"0xbaseasset\",\r\n                              \"baseAssetDecimals\": 420,\r\n                              \"id\": \"id\",\r\n                              \"quoteAsset\": \"0xquoteasset\",\r\n                              \"quoteAssetDecimals\": 69,\r\n                            },\r\n                          ],\r\n                        },\r\n                        \"integrator\": Object {\r\n                          \"allowedChainIds\": Array [],\r\n                          \"apiKeys\": Array [],\r\n                          \"integratorId\": \"uuid-integrator\",\r\n                          \"label\": \"Scam Integrator 1\",\r\n                          \"plp\": false,\r\n                          \"rfqm\": false,\r\n                          \"rfqt\": true,\r\n                        },\r\n                        \"intentOnFilling\": false,\r\n                        \"isIndicative\": false,\r\n                        \"isLastLook\": false,\r\n                        \"makerEndpointMaxResponseTimeMs\": 600,\r\n                        \"takerAddress\": \"0xtakeraddress\",\r\n                        \"txOrigin\": \"0xtxorigin\",\r\n                      },\r\n                    ]\r\n                `);\r\n            });\r\n        });\r\n    });\r\n    describe('v2', () => {\r\n        const maker = new RfqMaker({\r\n            makerId: 'maker-id',\r\n            chainId: 1337,\r\n            updatedAt: new Date(),\r\n            pairs: [['0x1', '0x2']],\r\n            rfqmUri: null,\r\n            rfqtUri: 'maker.uri',\r\n        });\r\n        const integrator: Integrator = {\r\n            allowedChainIds: [1337], // tslint:disable-line: custom-no-magic-numbers\r\n            apiKeys: [],\r\n            integratorId: 'integrator-id',\r\n            label: 'test integrator',\r\n            plp: false,\r\n            rfqm: false,\r\n            rfqt: true,\r\n        };\r\n        describe('getV2PricesAsync', () => {\r\n            it('transforms the API request into a quote server client request for buys', async () => {\r\n                const quoteContext: QuoteContext = {\r\n                    isFirm: false,\r\n                    workflow: 'rfqt',\r\n                    isUnwrap: false,\r\n                    originalMakerToken: '0x1',\r\n                    takerTokenDecimals: 18,\r\n                    makerTokenDecimals: 18,\r\n                    feeModelVersion: 1,\r\n                    assetFillAmount: new BigNumber(1000),\r\n                    chainId: 1337,\r\n                    integrator,\r\n                    makerToken: '0x1',\r\n                    isSelling: false,\r\n                    takerAddress: '0x0',\r\n                    takerToken: '0x2',\r\n                    txOrigin: '0xtakeraddress',\r\n                };\r\n\r\n                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);\r\n                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({\r\n                    feeWithDetails: {\r\n                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',\r\n                        amount: new BigNumber(100),\r\n                        type: 'fixed',\r\n                    },\r\n                });\r\n\r\n                const rfqtService = new RfqtService(\r\n                    1337, // tslint:disable-line: custom-no-magic-numbers\r\n                    mockRfqMakerManager,\r\n                    mockQuoteRequestor,\r\n                    mockQuoteServerClient,\r\n                    DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n                    mockRfqBlockchainUtils,\r\n                    mockTokenMetadataManager,\r\n                    mockContractAddresses,\r\n                    mockFeeService,\r\n                    1,\r\n                    mockRfqMakerBalanceCacheService,\r\n                );\r\n\r\n                await rfqtService.getV2PricesAsync(quoteContext);\r\n\r\n                expect(mockQuoteServerClient.batchGetPriceV2Async.mock.calls[0]).toMatchInlineSnapshot(`\r\n                  Array [\r\n                    Array [\r\n                      \"maker.uri\",\r\n                    ],\r\n                    Object {\r\n                      \"allowedChainIds\": Array [\r\n                        1337,\r\n                      ],\r\n                      \"apiKeys\": Array [],\r\n                      \"integratorId\": \"integrator-id\",\r\n                      \"label\": \"test integrator\",\r\n                      \"plp\": false,\r\n                      \"rfqm\": false,\r\n                      \"rfqt\": true,\r\n                    },\r\n                    Object {\r\n                      \"buyAmountBaseUnits\": \"1000\",\r\n                      \"buyTokenAddress\": \"0x1\",\r\n                      \"chainId\": \"1337\",\r\n                      \"feeAmount\": \"100\",\r\n                      \"feeToken\": \"0x0b1ba0af832d7c05fd64161e0db78e85978e8082\",\r\n                      \"gasless\": \"false\",\r\n                      \"integratorId\": \"integrator-id\",\r\n                      \"protocolVersion\": \"4\",\r\n                      \"sellTokenAddress\": \"0x2\",\r\n                      \"takerAddress\": \"0x0\",\r\n                      \"txOrigin\": \"0xtakeraddress\",\r\n                    },\r\n                    [Function],\r\n                  ]\r\n                `);\r\n            });\r\n            it('transforms the API request into a quote server client request for sells', async () => {\r\n                const quoteContext: QuoteContext = {\r\n                    isFirm: false,\r\n                    workflow: 'rfqt',\r\n                    isUnwrap: false,\r\n                    originalMakerToken: '0x1',\r\n                    takerTokenDecimals: 18,\r\n                    makerTokenDecimals: 18,\r\n                    feeModelVersion: 1,\r\n                    assetFillAmount: new BigNumber(1000),\r\n                    chainId: 1337,\r\n                    integrator,\r\n                    makerToken: '0x1',\r\n                    isSelling: true,\r\n                    takerAddress: '0x0',\r\n                    takerToken: '0x2',\r\n                    txOrigin: '0xtakeraddress',\r\n                };\r\n                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);\r\n                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({\r\n                    feeWithDetails: {\r\n                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',\r\n                        amount: new BigNumber(100),\r\n                        type: 'fixed',\r\n                    },\r\n                });\r\n\r\n                const rfqtService = new RfqtService(\r\n                    1337, // tslint:disable-line: custom-no-magic-numbers\r\n                    mockRfqMakerManager,\r\n                    mockQuoteRequestor,\r\n                    mockQuoteServerClient,\r\n                    DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n                    mockRfqBlockchainUtils,\r\n                    mockTokenMetadataManager,\r\n                    mockContractAddresses,\r\n                    mockFeeService,\r\n                    1,\r\n                    mockRfqMakerBalanceCacheService,\r\n                );\r\n\r\n                await rfqtService.getV2PricesAsync(quoteContext);\r\n\r\n                expect(mockQuoteServerClient.batchGetPriceV2Async.mock.calls[0]).toMatchInlineSnapshot(`\r\n                  Array [\r\n                    Array [\r\n                      \"maker.uri\",\r\n                    ],\r\n                    Object {\r\n                      \"allowedChainIds\": Array [\r\n                        1337,\r\n                      ],\r\n                      \"apiKeys\": Array [],\r\n                      \"integratorId\": \"integrator-id\",\r\n                      \"label\": \"test integrator\",\r\n                      \"plp\": false,\r\n                      \"rfqm\": false,\r\n                      \"rfqt\": true,\r\n                    },\r\n                    Object {\r\n                      \"buyTokenAddress\": \"0x1\",\r\n                      \"chainId\": \"1337\",\r\n                      \"feeAmount\": \"100\",\r\n                      \"feeToken\": \"0x0b1ba0af832d7c05fd64161e0db78e85978e8082\",\r\n                      \"gasless\": \"false\",\r\n                      \"integratorId\": \"integrator-id\",\r\n                      \"protocolVersion\": \"4\",\r\n                      \"sellAmountBaseUnits\": \"1000\",\r\n                      \"sellTokenAddress\": \"0x2\",\r\n                      \"takerAddress\": \"0x0\",\r\n                      \"txOrigin\": \"0xtakeraddress\",\r\n                    },\r\n                    [Function],\r\n                  ]\r\n              `);\r\n            });\r\n            it('gets prices', async () => {\r\n                const quoteContext: QuoteContext = {\r\n                    isFirm: false,\r\n                    workflow: 'rfqt',\r\n                    isUnwrap: false,\r\n                    originalMakerToken: '0x1',\r\n                    takerTokenDecimals: 18,\r\n                    makerTokenDecimals: 18,\r\n                    feeModelVersion: 1,\r\n                    assetFillAmount: new BigNumber(1000),\r\n                    chainId: 1337,\r\n                    integrator,\r\n                    makerToken: '0x1',\r\n                    isSelling: true,\r\n                    takerAddress: '0x0',\r\n                    takerToken: '0x2',\r\n                    txOrigin: '0xtakeraddress',\r\n                };\r\n\r\n                const price: IndicativeQuote = {\r\n                    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n                    // eslint-disable-next-line @typescript-eslint/no-loss-of-precision\r\n                    expiry: new BigNumber(9999999999999999),\r\n                    maker: '0xmakeraddress',\r\n                    makerAmount: new BigNumber(1000),\r\n                    makerToken: '0x1',\r\n                    makerUri: 'maker.uri',\r\n                    takerAmount: new BigNumber(1001),\r\n                    takerToken: '0x2',\r\n                };\r\n\r\n                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);\r\n                mockQuoteServerClient.batchGetPriceV2Async = jest.fn().mockResolvedValue([price]);\r\n                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({\r\n                    feeWithDetails: {\r\n                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',\r\n                        amount: new BigNumber(100),\r\n                        type: 'fixed',\r\n                    },\r\n                });\r\n\r\n                const rfqtService = new RfqtService(\r\n                    1337, // tslint:disable-line: custom-no-magic-numbers\r\n                    mockRfqMakerManager,\r\n                    mockQuoteRequestor,\r\n                    mockQuoteServerClient,\r\n                    DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n                    mockRfqBlockchainUtils,\r\n                    mockTokenMetadataManager,\r\n                    mockContractAddresses,\r\n                    mockFeeService,\r\n                    1,\r\n                    mockRfqMakerBalanceCacheService,\r\n                );\r\n\r\n                const result = await rfqtService.getV2PricesAsync(quoteContext);\r\n                expect(result.length).toEqual(1);\r\n                expect(result[0].makerId).toEqual('maker-id');\r\n                expect(result[0]).toMatchInlineSnapshot(`\r\n                  Object {\r\n                    \"expiry\": \"10000000000000000\",\r\n                    \"makerAddress\": \"0xmakeraddress\",\r\n                    \"makerAmount\": \"1000\",\r\n                    \"makerId\": \"maker-id\",\r\n                    \"makerToken\": \"0x1\",\r\n                    \"makerUri\": \"maker.uri\",\r\n                    \"takerAmount\": \"1001\",\r\n                    \"takerToken\": \"0x2\",\r\n                  }\r\n                `);\r\n            });\r\n            it('gets prices from whitelisted makers only', async () => {\r\n                const quoteContext: QuoteContext = {\r\n                    isFirm: false,\r\n                    workflow: 'rfqt',\r\n                    isUnwrap: false,\r\n                    originalMakerToken: '0x1',\r\n                    takerTokenDecimals: 18,\r\n                    makerTokenDecimals: 18,\r\n                    feeModelVersion: 1,\r\n                    assetFillAmount: new BigNumber(1000),\r\n                    chainId: 1337,\r\n                    integrator: {\r\n                        ...integrator,\r\n                        whitelistMakerIds: ['maker1'],\r\n                    },\r\n                    makerToken: '0x1',\r\n                    isSelling: true,\r\n                    takerAddress: '0x0',\r\n                    takerToken: '0x2',\r\n                    txOrigin: '0xtakeraddress',\r\n                };\r\n\r\n                const price: IndicativeQuote = {\r\n                    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\r\n                    // eslint-disable-next-line @typescript-eslint/no-loss-of-precision\r\n                    expiry: new BigNumber(9999999999999999),\r\n                    maker: '0xmakeraddress',\r\n                    makerAmount: new BigNumber(1000),\r\n                    makerToken: '0x1',\r\n                    makerUri: 'maker.uri',\r\n                    takerAmount: new BigNumber(1001),\r\n                    takerToken: '0x2',\r\n                };\r\n\r\n                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([\r\n                    {\r\n                        ...maker,\r\n                        makerId: 'maker1',\r\n                    },\r\n                    {\r\n                        ...maker,\r\n                        makerId: 'maker2',\r\n                    },\r\n                ]);\r\n                mockQuoteServerClient.batchGetPriceV2Async = jest.fn().mockResolvedValue([price]);\r\n                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({\r\n                    feeWithDetails: {\r\n                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',\r\n                        amount: new BigNumber(100),\r\n                        type: 'fixed',\r\n                    },\r\n                });\r\n\r\n                const rfqtService = new RfqtService(\r\n                    1337, // tslint:disable-line: custom-no-magic-numbers\r\n                    mockRfqMakerManager,\r\n                    mockQuoteRequestor,\r\n                    mockQuoteServerClient,\r\n                    DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n                    mockRfqBlockchainUtils,\r\n                    mockTokenMetadataManager,\r\n                    mockContractAddresses,\r\n                    mockFeeService,\r\n                    1,\r\n                    mockRfqMakerBalanceCacheService,\r\n                );\r\n\r\n                const result = await rfqtService.getV2PricesAsync(quoteContext);\r\n                expect(result.length).toEqual(1);\r\n                expect(result[0].makerId).toEqual('maker1');\r\n                expect(result[0]).toMatchInlineSnapshot(`\r\n                  Object {\r\n                    \"expiry\": \"10000000000000000\",\r\n                    \"makerAddress\": \"0xmakeraddress\",\r\n                    \"makerAmount\": \"1000\",\r\n                    \"makerId\": \"maker1\",\r\n                    \"makerToken\": \"0x1\",\r\n                    \"makerUri\": \"maker.uri\",\r\n                    \"takerAmount\": \"1001\",\r\n                    \"takerToken\": \"0x2\",\r\n                  }\r\n                `);\r\n            });\r\n        });\r\n        describe('getV2QuotesAsync', () => {\r\n            const makerToken = '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE';\r\n            const makerAddress = '0x79b7a69d90c82E014Bf0315e164208119B510FA0';\r\n            const takerToken = '0x42d6622deCe394b54999Fbd73D108123806f6a18';\r\n            const takerAddress = '0xE06fFA8146bBdECcBaaF72B6043b29091071AEB8';\r\n            const fakeNow = new Date(1657069278103);\r\n            const expiry = new BigNumber(fakeNow.getTime() + 1_000_000).dividedBy(ONE_SECOND_MS).decimalPlaces(0);\r\n\r\n            mockRfqBlockchainUtils.isValidOrderSignerAsync = jest.fn().mockResolvedValue(true);\r\n            it('filters out quotes with no signatures', async () => {\r\n                const quoteContext: FirmQuoteContext = {\r\n                    isFirm: true,\r\n                    workflow: 'rfqt',\r\n                    isUnwrap: false,\r\n                    originalMakerToken: '0x1',\r\n                    takerTokenDecimals: 18,\r\n                    makerTokenDecimals: 18,\r\n                    feeModelVersion: 1,\r\n                    assetFillAmount: new BigNumber(1000),\r\n                    chainId: 1337,\r\n                    integrator,\r\n                    makerToken,\r\n                    isSelling: false,\r\n                    takerAddress,\r\n                    trader: takerAddress,\r\n                    takerToken,\r\n                    txOrigin: takerAddress,\r\n                };\r\n\r\n                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);\r\n                mockQuoteServerClient.batchGetPriceV2Async = jest.fn().mockResolvedValue([\r\n                    {\r\n                        maker: makerAddress,\r\n                        makerUri: maker.rfqtUri,\r\n                        makerToken,\r\n                        takerToken,\r\n                        makerAmount: new BigNumber(999),\r\n                        takerAmount: new BigNumber(1000),\r\n                        expiry,\r\n                    },\r\n                ]);\r\n                mockQuoteServerClient.signV2Async = jest.fn().mockResolvedValue(undefined);\r\n                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({\r\n                    feeWithDetails: {\r\n                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',\r\n                        amount: new BigNumber(100),\r\n                        type: 'fixed',\r\n                    },\r\n                });\r\n\r\n                const rfqtService = new RfqtService(\r\n                    1337, // tslint:disable-line: custom-no-magic-numbers\r\n                    mockRfqMakerManager,\r\n                    mockQuoteRequestor,\r\n                    mockQuoteServerClient,\r\n                    DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n                    mockRfqBlockchainUtils,\r\n                    mockTokenMetadataManager,\r\n                    mockContractAddresses,\r\n                    mockFeeService,\r\n                    1,\r\n                    mockRfqMakerBalanceCacheService,\r\n                );\r\n\r\n                const result = await rfqtService.getV2QuotesAsync(quoteContext);\r\n\r\n                expect(result.length).toEqual(0);\r\n            });\r\n\r\n            it(\"doesn't blow up if a sign request fails\", async () => {\r\n                const quoteContext: FirmQuoteContext = {\r\n                    isFirm: true,\r\n                    workflow: 'rfqt',\r\n                    isUnwrap: false,\r\n                    originalMakerToken: '0x1',\r\n                    takerTokenDecimals: 18,\r\n                    makerTokenDecimals: 18,\r\n                    feeModelVersion: 1,\r\n                    assetFillAmount: new BigNumber(1000),\r\n                    chainId: 1337,\r\n                    integrator,\r\n                    makerToken,\r\n                    isSelling: false,\r\n                    takerAddress,\r\n                    trader: takerAddress,\r\n                    takerToken,\r\n                    txOrigin: takerAddress,\r\n                };\r\n\r\n                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);\r\n                mockQuoteServerClient.batchGetPriceV2Async = jest.fn().mockResolvedValue([\r\n                    {\r\n                        maker: makerAddress,\r\n                        makerUri: maker.rfqtUri,\r\n                        makerToken,\r\n                        takerToken,\r\n                        makerAmount: new BigNumber(999),\r\n                        takerAmount: new BigNumber(1000),\r\n                        expiry,\r\n                    },\r\n                ]);\r\n                mockQuoteServerClient.signV2Async = jest.fn().mockRejectedValue(new Error('EXPLODE'));\r\n                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({\r\n                    feeWithDetails: {\r\n                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',\r\n                        amount: new BigNumber(100),\r\n                        type: 'fixed',\r\n                    },\r\n                });\r\n\r\n                const rfqtService = new RfqtService(\r\n                    1337, // tslint:disable-line: custom-no-magic-numbers\r\n                    mockRfqMakerManager,\r\n                    mockQuoteRequestor,\r\n                    mockQuoteServerClient,\r\n                    DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n                    mockRfqBlockchainUtils,\r\n                    mockTokenMetadataManager,\r\n                    mockContractAddresses,\r\n                    mockFeeService,\r\n                    1,\r\n                    mockRfqMakerBalanceCacheService,\r\n                );\r\n\r\n                const result = await rfqtService.getV2QuotesAsync(quoteContext);\r\n\r\n                expect(result.length).toEqual(0);\r\n            });\r\n\r\n            it('gets creates orders with unique nonces', async () => {\r\n                const quoteContext: FirmQuoteContext = {\r\n                    isFirm: true,\r\n                    workflow: 'rfqt',\r\n                    isUnwrap: false,\r\n                    originalMakerToken: '0x1',\r\n                    takerTokenDecimals: 18,\r\n                    makerTokenDecimals: 18,\r\n                    feeModelVersion: 1,\r\n                    assetFillAmount: new BigNumber(1000),\r\n                    chainId: 1337,\r\n                    integrator,\r\n                    makerToken,\r\n                    isSelling: false,\r\n                    takerAddress,\r\n                    trader: takerAddress,\r\n                    takerToken,\r\n                    txOrigin: takerAddress,\r\n                };\r\n\r\n                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);\r\n                mockQuoteServerClient.batchGetPriceV2Async = jest.fn().mockResolvedValue([\r\n                    {\r\n                        maker: makerAddress,\r\n                        makerUri: maker.rfqtUri,\r\n                        makerToken,\r\n                        takerToken,\r\n                        makerAmount: new BigNumber(999),\r\n                        takerAmount: new BigNumber(1000),\r\n                        expiry,\r\n                    },\r\n                    {\r\n                        maker: makerAddress,\r\n                        makerUri: maker.rfqtUri,\r\n                        makerToken,\r\n                        takerToken,\r\n                        makerAmount: new BigNumber(900),\r\n                        takerAmount: new BigNumber(1000),\r\n                        expiry,\r\n                    },\r\n                ]);\r\n                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({\r\n                    feeWithDetails: {\r\n                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',\r\n                        amount: new BigNumber(100),\r\n                        type: 'fixed',\r\n                    },\r\n                });\r\n                mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync = jest\r\n                    .fn()\r\n                    .mockResolvedValue([new BigNumber(10000), new BigNumber(10000)]);\r\n\r\n                const signature: Signature = { r: 'r', v: 21, s: 's', signatureType: SignatureType.EIP712 };\r\n                mockQuoteServerClient.signV2Async = jest.fn().mockResolvedValue(signature);\r\n\r\n                const rfqtService = new RfqtService(\r\n                    1337, // tslint:disable-line: custom-no-magic-numbers\r\n                    mockRfqMakerManager,\r\n                    mockQuoteRequestor,\r\n                    mockQuoteServerClient,\r\n                    DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n                    mockRfqBlockchainUtils,\r\n                    mockTokenMetadataManager,\r\n                    mockContractAddresses,\r\n                    mockFeeService,\r\n                    1,\r\n                    mockRfqMakerBalanceCacheService,\r\n                );\r\n\r\n                const result = await rfqtService.getV2QuotesAsync(quoteContext, fakeNow);\r\n\r\n                const [{ nonce: nonce1 }, { nonce: nonce2 }] = [\r\n                    OtcOrder.parseExpiryAndNonce(result[0].order.expiryAndNonce),\r\n                    OtcOrder.parseExpiryAndNonce(result[1].order.expiryAndNonce),\r\n                ];\r\n\r\n                expect(nonce1.toString()).not.toEqual(nonce2.toString());\r\n            });\r\n\r\n            it('gets a signed quote', async () => {\r\n                const quoteContext: FirmQuoteContext = {\r\n                    isFirm: true,\r\n                    workflow: 'rfqt',\r\n                    isUnwrap: false,\r\n                    originalMakerToken: '0x1',\r\n                    takerTokenDecimals: 18,\r\n                    makerTokenDecimals: 18,\r\n                    feeModelVersion: 1,\r\n                    assetFillAmount: new BigNumber(1000),\r\n                    chainId: 1337,\r\n                    integrator,\r\n                    makerToken,\r\n                    isSelling: false,\r\n                    takerAddress: NULL_ADDRESS,\r\n                    trader: takerAddress,\r\n                    takerToken,\r\n                    txOrigin: takerAddress,\r\n                };\r\n\r\n                mockRfqMakerManager.getRfqtV2MakersForPair = jest.fn().mockReturnValue([maker]);\r\n                mockQuoteServerClient.batchGetPriceV2Async = jest.fn().mockResolvedValue([\r\n                    {\r\n                        maker: makerAddress,\r\n                        makerUri: maker.rfqtUri,\r\n                        makerToken,\r\n                        takerToken,\r\n                        makerAmount: new BigNumber(999),\r\n                        takerAmount: new BigNumber(1000),\r\n                        expiry,\r\n                    },\r\n                ]);\r\n                const signature: Signature = { r: 'r', v: 21, s: 's', signatureType: SignatureType.EIP712 };\r\n                mockQuoteServerClient.signV2Async = jest.fn().mockResolvedValue(signature);\r\n                mockFeeService.calculateFeeAsync = jest.fn().mockResolvedValue({\r\n                    feeWithDetails: {\r\n                        token: '0x0b1ba0af832d7c05fd64161e0db78e85978e8082',\r\n                        amount: new BigNumber(100),\r\n                        type: 'fixed',\r\n                    },\r\n                });\r\n                mockRfqMakerBalanceCacheService.getERC20OwnerBalancesAsync = jest\r\n                    .fn()\r\n                    .mockResolvedValue([new BigNumber(10000)]);\r\n\r\n                const rfqtService = new RfqtService(\r\n                    1337, // tslint:disable-line: custom-no-magic-numbers\r\n                    mockRfqMakerManager,\r\n                    mockQuoteRequestor,\r\n                    mockQuoteServerClient,\r\n                    DEFAULT_MIN_EXPIRY_DURATION_MS,\r\n                    mockRfqBlockchainUtils,\r\n                    mockTokenMetadataManager,\r\n                    mockContractAddresses,\r\n                    mockFeeService,\r\n                    1,\r\n                    mockRfqMakerBalanceCacheService,\r\n                );\r\n\r\n                const result = await rfqtService.getV2QuotesAsync(quoteContext, fakeNow);\r\n\r\n                expect(result.length).toEqual(1);\r\n                expect(result[0]).toMatchObject({\r\n                    fillableMakerAmount: new BigNumber(999),\r\n                    fillableTakerAmount: new BigNumber(1000),\r\n                    fillableTakerFeeAmount: new BigNumber(0),\r\n                    makerId: maker.makerId,\r\n                    makerUri: maker.rfqtUri,\r\n                    signature,\r\n                });\r\n                expect(result[0].order).toMatchInlineSnapshot(`\r\n                OtcOrder {\r\n                  \"chainId\": 1337,\r\n                  \"expiry\": \"1657070278\",\r\n                  \"expiryAndNonce\": \"10401598717691489530826623925864187439861993812812831231287826374366\",\r\n                  \"maker\": \"0x79b7a69d90c82E014Bf0315e164208119B510FA0\",\r\n                  \"makerAmount\": \"999\",\r\n                  \"makerToken\": \"0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE\",\r\n                  \"nonce\": \"1657069278\",\r\n                  \"nonceBucket\": \"0\",\r\n                  \"taker\": \"0x0000000000000000000000000000000000000000\",\r\n                  \"takerAmount\": \"1000\",\r\n                  \"takerToken\": \"0x42d6622deCe394b54999Fbd73D108123806f6a18\",\r\n                  \"txOrigin\": \"0xE06fFA8146bBdECcBaaF72B6043b29091071AEB8\",\r\n                  \"verifyingContract\": \"0x5315e44798395d4a952530d131249fe00f554565\",\r\n                }\r\n              `);\r\n            });\r\n        });\r\n    });\r\n});\r\n"],"version":3}