{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/quoteRequestor/__tests__/RefreshingQuoteRequestor.test.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/quoteRequestor/__tests__/RefreshingQuoteRequestor.test.ts"],"sourcesContent":["import { MarketOperation } from '@0x/types';\nimport { BigNumber } from '@0x/utils';\nimport axios, { AxiosInstance } from 'axios';\nimport { EventEmitter } from 'stream';\n\nimport { ConfigManager } from '../../utils/config_manager';\nimport { RfqMakerDbUtils } from '../../utils/rfq_maker_db_utils';\nimport { RfqMakerManager } from '../../utils/rfq_maker_manager';\nimport { QuoteRequestor } from '../QuoteRequestor';\nimport { RefreshingQuoteRequestor } from '../RefreshingQuoteRequestor';\n\njest.mock('axios');\n\nconst mockRequestRfqtIndicativeQuotesAsync = jest.fn().mockResolvedValue([]);\nconst mockRequestRfqtFirmQuotesAsync = jest.fn().mockResolvedValue([]);\njest.mock('../QuoteRequestor', () => {\n    return {\n        QuoteRequestor: jest.fn().mockImplementation((..._args) => {\n            return {\n                requestRfqtIndicativeQuotesAsync: mockRequestRfqtIndicativeQuotesAsync,\n                requestRfqtFirmQuotesAsync: mockRequestRfqtFirmQuotesAsync,\n            };\n        }),\n    };\n});\n\njest.mock('../../utils/rfq_maker_manager', () => {\n    return {\n        RfqMakerManager: jest.fn().mockImplementation((..._args) => {\n            const rmm = new EventEmitter() as unknown as jest.MockedObject<RfqMakerManager>;\n            rmm.getRfqtV1MakerOfferings = jest.fn().mockReturnValue([]);\n            return rmm;\n        }),\n    };\n});\n\n// TODO (rhinodavid): Find a better way to initialize mocked classes\nconst mockRfqMakerManager = jest.mocked(\n    // tslint:disable-next-line: no-object-literal-type-assertion custom-no-magic-numbers\n    new RfqMakerManager({} as ConfigManager, {} as RfqMakerDbUtils, /* chainId */ 1337),\n);\nconst mockAxiosInstance = jest.mocked(axios.create()) as unknown as jest.MockedObject<AxiosInstance>;\n\ndescribe('RefreshingQuoteRequestor', () => {\n    it('refreshes the quote requestor instance on new pairs', () => {\n        new RefreshingQuoteRequestor(mockRfqMakerManager, mockAxiosInstance); // tslint:disable-line: no-unused-expression\n\n        expect(QuoteRequestor).toBeCalledTimes(1);\n\n        mockRfqMakerManager.emit(RfqMakerManager.REFRESHED_EVENT);\n\n        expect(QuoteRequestor).toBeCalledTimes(2);\n    });\n\n    describe('requestRfqtIndicativeQuotesAsync', () => {\n        it('passes through arguments to quote requestor', async () => {\n            const refreshingQuoteRequestor = new RefreshingQuoteRequestor(mockRfqMakerManager, mockAxiosInstance);\n\n            await refreshingQuoteRequestor.requestRfqtIndicativeQuotesAsync(\n                '0xmakertoken',\n                '0xtakertoken',\n                /* assetFillAmount */ new BigNumber(100),\n                MarketOperation.Buy,\n                /* comparisonPrice */ undefined,\n                {\n                    integrator: {\n                        allowedChainIds: [],\n                        apiKeys: [],\n                        integratorId: 'uuid-integrator-id',\n                        label: 'integrator',\n                        plp: false,\n                        rfqm: false,\n                        rfqt: true,\n                    },\n                    intentOnFilling: false,\n                    isIndicative: true,\n                    takerAddress: '0xtakeraddress',\n                    txOrigin: '0xtxorign',\n                },\n            );\n\n            const args = mockRequestRfqtIndicativeQuotesAsync.mock.calls[0];\n            expect(args).toMatchInlineSnapshot(`\n                Array [\n                  \"0xmakertoken\",\n                  \"0xtakertoken\",\n                  \"100\",\n                  \"Buy\",\n                  undefined,\n                  Object {\n                    \"integrator\": Object {\n                      \"integratorId\": \"uuid-integrator-id\",\n                      \"label\": \"integrator\",\n                    },\n                    \"intentOnFilling\": false,\n                    \"isIndicative\": true,\n                    \"takerAddress\": \"0xtakeraddress\",\n                    \"txOrigin\": \"0xtxorign\",\n                  },\n                ]\n            `);\n        });\n    });\n\n    describe('requestRfqtFirmQuotesAsync', () => {\n        it('passes through arguments to quote requestor', async () => {\n            const refreshingQuoteRequestor = new RefreshingQuoteRequestor(mockRfqMakerManager, mockAxiosInstance);\n\n            await refreshingQuoteRequestor.requestRfqtFirmQuotesAsync(\n                '0xmakertoken',\n                '0xtakertoken',\n                /* assetFillAmount */ new BigNumber(100),\n                MarketOperation.Buy,\n                /* comparisonPrice */ undefined,\n                {\n                    integrator: {\n                        allowedChainIds: [],\n                        apiKeys: [],\n                        integratorId: 'uuid-integrator-id',\n                        label: 'integrator',\n                        plp: false,\n                        rfqm: false,\n                        rfqt: true,\n                    },\n                    intentOnFilling: true,\n                    takerAddress: '0xtakeraddress',\n                    txOrigin: '0xtxorign',\n                },\n            );\n\n            const args = mockRequestRfqtFirmQuotesAsync.mock.calls[0];\n            expect(args).toMatchInlineSnapshot(`\n                Array [\n                  \"0xmakertoken\",\n                  \"0xtakertoken\",\n                  \"100\",\n                  \"Buy\",\n                  undefined,\n                  Object {\n                    \"integrator\": Object {\n                      \"integratorId\": \"uuid-integrator-id\",\n                      \"label\": \"integrator\",\n                    },\n                    \"intentOnFilling\": true,\n                    \"takerAddress\": \"0xtakeraddress\",\n                    \"txOrigin\": \"0xtxorign\",\n                  },\n                ]\n            `);\n        });\n    });\n});\n"],"version":3}