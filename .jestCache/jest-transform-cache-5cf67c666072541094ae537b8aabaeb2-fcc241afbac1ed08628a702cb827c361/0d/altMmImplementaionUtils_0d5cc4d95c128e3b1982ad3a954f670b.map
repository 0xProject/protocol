{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/quoteRequestor/altMmImplementaionUtils.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/quoteRequestor/altMmImplementaionUtils.ts"],"sourcesContent":["import { constants } from '@0x/asset-swapper/lib/src/constants';\nimport {\n    AltFirmQuoteResponse,\n    AltIndicativeQuoteResponse,\n    AltOffering,\n    AltQuoteModel,\n    AltQuoteRequestData,\n    AltQuoteSide,\n    AltRfqMakerAssetOfferings,\n} from '@0x/asset-swapper/lib/src/types';\nimport { Web3Wrapper } from '@0x/dev-utils';\nimport { BigNumber } from '@0x/utils';\nimport { AxiosInstance, CancelToken } from 'axios';\n\nimport { logger } from '../logger';\nimport { TakerRequestQueryParamsUnnested, V4RFQFirmQuote, V4RFQIndicativeQuote } from '../quote-server/types';\n\nconst SUCCESS_CODE = 201;\n\nfunction getAltMarketInfo(\n    offerings: AltOffering[],\n    buyTokenAddress: string,\n    sellTokenAddress: string,\n): AltOffering | undefined {\n    for (const offering of offerings) {\n        if (\n            (buyTokenAddress.toLowerCase() === offering.baseAsset.toLowerCase() &&\n                sellTokenAddress.toLowerCase() === offering.quoteAsset.toLowerCase()) ||\n            (sellTokenAddress.toLowerCase() === offering.baseAsset.toLowerCase() &&\n                buyTokenAddress.toLowerCase() === offering.quoteAsset.toLowerCase())\n        ) {\n            return offering;\n        }\n    }\n    return undefined;\n}\n\nfunction parseFirmQuoteResponseFromAltMM(altFirmQuoteReponse: AltFirmQuoteResponse): V4RFQFirmQuote {\n    return {\n        signedOrder: altFirmQuoteReponse.data['0xv4order'],\n    };\n}\n\nfunction parseIndicativeQuoteResponseFromAltMM(\n    altIndicativeQuoteResponse: AltIndicativeQuoteResponse,\n    altPair: AltOffering,\n    makerToken: string,\n    takerToken: string,\n): V4RFQIndicativeQuote {\n    let makerAmount: BigNumber;\n    let takerAmount: BigNumber;\n    let quoteAmount: BigNumber;\n    let baseAmount: BigNumber;\n\n    if (!altIndicativeQuoteResponse.price) {\n        throw new Error('Price not returned by alt MM');\n    }\n    if (altIndicativeQuoteResponse.amount) {\n        // if amount is specified, amount is the base token amount\n        baseAmount = Web3Wrapper.toBaseUnitAmount(\n            new BigNumber(altIndicativeQuoteResponse.amount),\n            altPair.baseAssetDecimals,\n        );\n        // if amount is specified, use the price (quote/base) to get the quote amount\n        quoteAmount = Web3Wrapper.toBaseUnitAmount(\n            new BigNumber(altIndicativeQuoteResponse.amount)\n                .times(new BigNumber(altIndicativeQuoteResponse.price))\n                .decimalPlaces(altPair.quoteAssetDecimals, BigNumber.ROUND_DOWN),\n            altPair.quoteAssetDecimals,\n        );\n    } else if (altIndicativeQuoteResponse.value) {\n        // if value is specified, value is the quote token amount\n        quoteAmount = Web3Wrapper.toBaseUnitAmount(\n            new BigNumber(altIndicativeQuoteResponse.value),\n            altPair.quoteAssetDecimals,\n        );\n        // if value is specified, use the price (quote/base) to get the base amount\n        baseAmount = Web3Wrapper.toBaseUnitAmount(\n            new BigNumber(altIndicativeQuoteResponse.value)\n                .dividedBy(new BigNumber(altIndicativeQuoteResponse.price))\n                .decimalPlaces(altPair.baseAssetDecimals, BigNumber.ROUND_DOWN),\n            altPair.baseAssetDecimals,\n        );\n    } else {\n        throw new Error('neither amount or value were specified');\n    }\n    if (makerToken.toLowerCase() === altPair.baseAsset.toLowerCase()) {\n        makerAmount = baseAmount;\n        takerAmount = quoteAmount;\n    } else if (makerToken.toLowerCase() === altPair.quoteAsset.toLowerCase()) {\n        makerAmount = quoteAmount;\n        takerAmount = baseAmount;\n    } else {\n        throw new Error(`Base, quote tokens don't align with maker, taker tokens`);\n    }\n\n    return {\n        makerToken,\n        makerAmount,\n        takerToken,\n        takerAmount,\n        // HACK: alt implementation does not return an expiration with indicative quotes\n        // return now + { IMPUTED EXPIRY SECONDS } to have it included after order checks\n        expiry:\n            // tslint:disable-next-line:custom-no-magic-numbers\n            new BigNumber(Date.now() / 1000)\n                .integerValue(BigNumber.ROUND_DOWN)\n                .plus(constants.ALT_MM_IMPUTED_INDICATIVE_EXPIRY_SECONDS),\n    };\n}\n\n/**\n * Turn a standard quote request into an alt quote request\n * and return the appropriate standard quote response\n */\nexport async function returnQuoteFromAltMMAsync<ResponseT>(\n    url: string,\n    apiKey: string,\n    profile: string,\n    integratorKey: string,\n    quoteModel: AltQuoteModel,\n    makerToken: string,\n    takerToken: string,\n    maxResponseTimeMs: number,\n    altRfqAssetOfferings: AltRfqMakerAssetOfferings,\n    takerRequestQueryParams: TakerRequestQueryParamsUnnested,\n    axiosInstance: AxiosInstance,\n    cancelToken: CancelToken,\n): Promise<{ data: ResponseT; status: number }> {\n    const altPair = getAltMarketInfo(\n        altRfqAssetOfferings[url],\n        takerRequestQueryParams.buyTokenAddress,\n        takerRequestQueryParams.sellTokenAddress,\n    );\n\n    if (!altPair) {\n        throw new Error(`Alt pair not found`);\n    }\n    const side = altPair.baseAsset === takerRequestQueryParams.buyTokenAddress ? AltQuoteSide.Sell : AltQuoteSide.Buy;\n\n    // comparison price needs to be quote/base\n    // in the standard implementation, it's maker/taker\n    let altComparisonPrice: string | undefined;\n    if (altPair.quoteAsset === makerToken) {\n        altComparisonPrice = takerRequestQueryParams.comparisonPrice\n            ? takerRequestQueryParams.comparisonPrice\n            : undefined;\n    } else {\n        altComparisonPrice = takerRequestQueryParams.comparisonPrice\n            ? new BigNumber(takerRequestQueryParams.comparisonPrice).pow(-1).toString()\n            : undefined;\n    }\n\n    let data: AltQuoteRequestData;\n    // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n    // eslint-disable-next-line prefer-const\n    data = {\n        market: `${altPair.id}`,\n        model: quoteModel,\n        profile,\n        side,\n        meta: {\n            // $eslint-fix-me https://github.com/rhinodavid/eslint-fix-me\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            txOrigin: takerRequestQueryParams.txOrigin!,\n            taker: takerRequestQueryParams.takerAddress,\n            client: integratorKey,\n        },\n    };\n\n    // specify a comparison price if it exists\n    if (altComparisonPrice) {\n        data.meta.existingOrder = {\n            price: altComparisonPrice,\n        };\n    }\n\n    // need to specify amount or value\n    // amount is units of the base asset\n    // value is units of the quote asset\n    let requestSize: string;\n    if (takerRequestQueryParams.buyAmountBaseUnits) {\n        requestSize = Web3Wrapper.toUnitAmount(\n            new BigNumber(takerRequestQueryParams.buyAmountBaseUnits),\n            takerRequestQueryParams.buyTokenAddress === altPair.baseAsset\n                ? altPair.baseAssetDecimals\n                : altPair.quoteAssetDecimals,\n        ).toString();\n        if (takerRequestQueryParams.buyTokenAddress === altPair.baseAsset) {\n            data.amount = requestSize;\n            // add to 'existing order' if there is a comparison price\n            if (data.meta.existingOrder) {\n                data.meta.existingOrder.amount = requestSize;\n            }\n        } else {\n            data.value = requestSize;\n            // add to 'existing order' if there is a comparison price\n            if (data.meta.existingOrder) {\n                data.meta.existingOrder.value = requestSize;\n            }\n        }\n    } else if (takerRequestQueryParams.sellAmountBaseUnits) {\n        requestSize = Web3Wrapper.toUnitAmount(\n            new BigNumber(takerRequestQueryParams.sellAmountBaseUnits),\n            takerRequestQueryParams.sellTokenAddress === altPair.baseAsset\n                ? altPair.baseAssetDecimals\n                : altPair.quoteAssetDecimals,\n        ).toString();\n        if (takerRequestQueryParams.sellTokenAddress === altPair.baseAsset) {\n            data.amount = requestSize;\n            if (data.meta.existingOrder) {\n                data.meta.existingOrder.amount = requestSize;\n            }\n        } else {\n            data.value = requestSize;\n            if (data.meta.existingOrder) {\n                data.meta.existingOrder.value = requestSize;\n            }\n        }\n    }\n\n    const response = await axiosInstance\n        .post(`${url}/quotes`, data, {\n            headers: { Authorization: `Bearer ${apiKey}` },\n            timeout: maxResponseTimeMs,\n            cancelToken,\n        })\n        .catch((err) => {\n            if (err.response) {\n                // request was made and market maker responded\n                logger.warn(\n                    { data: err.response.data, status: err.response.status, headers: err.response.headers },\n                    `Alt RFQ MM request failed`,\n                );\n            } else if (err.request) {\n                logger.warn({}, 'Alt RFQ MM no response received');\n            } else {\n                logger.warn({ err: err.message }, 'Failed to construct Alt RFQ MM request');\n            }\n            throw new Error(`Alt RFQ MM request failed`);\n        });\n\n    // empty response will get filtered out in validation\n    const emptyResponse = {};\n\n    // tslint:disable-next-line:custom-no-magic-numbers\n    if (response.status !== SUCCESS_CODE) {\n        const rejectedRequestInfo = {\n            status: response.status,\n            message: response.data,\n        };\n        logger.warn(rejectedRequestInfo, `Alt RFQ MM did not return a status of ${SUCCESS_CODE}`);\n        return {\n            data: emptyResponse as unknown as ResponseT,\n            status: response.status,\n        };\n    }\n    // successful handling but no quote is indicated by status = 'rejected'\n    if (response.data.status === 'rejected') {\n        logger.warn(\n            response.data.id,\n            `Alt RFQ MM handled the request successfully but did not return a quote (status = 'rejected')`,\n        );\n        return {\n            data: emptyResponse as unknown as ResponseT,\n            // hack: set the http status to 204 no content so we can more\n            // easily track when no quote is returned\n            status: 204,\n        };\n    }\n\n    const parsedResponse =\n        quoteModel === 'firm'\n            ? parseFirmQuoteResponseFromAltMM(response.data)\n            : parseIndicativeQuoteResponseFromAltMM(response.data, altPair, makerToken, takerToken);\n\n    return {\n        // hack to appease type checking\n        data: parsedResponse as unknown as ResponseT,\n        status: response.status,\n    };\n}\n"],"version":3}