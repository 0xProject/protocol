ab2544ffa17b52362cec27d651ba2f11
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RfqmV2JobEntity = void 0;
const utils_1 = require("@0x/utils");
const typeorm_1 = require("typeorm");
const transformers_1 = require("./transformers");
const types_1 = require("./types");
let RfqmV2JobEntity = class RfqmV2JobEntity {
    // TypeORM runs a validation check where it calls this initializer with no argument.
    // With no default `opts`, `opts` will be undefined and the validation will throw,
    // therefore, add this hacky default.
    // tslint:disable-next-line no-object-literal-type-assertion
    constructor(opts = {}) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        this.kind = 'rfqm_v2_job';
        // allow createdAt overrides for testing
        if (opts.createdAt) {
            this.createdAt = opts.createdAt;
        }
        this.affiliateAddress = (_a = opts.affiliateAddress) !== null && _a !== void 0 ? _a : null;
        this.approval = (_b = opts.approval) !== null && _b !== void 0 ? _b : null;
        this.approvalSignature = (_c = opts.approvalSignature) !== null && _c !== void 0 ? _c : null;
        this.chainId = opts.chainId;
        this.expiry = opts.expiry;
        this.fee = opts.fee;
        this.integratorId = (_d = opts.integratorId) !== null && _d !== void 0 ? _d : null;
        this.isUnwrap = (_e = opts.isUnwrap) !== null && _e !== void 0 ? _e : false;
        this.lastLookResult = (_f = opts.lastLookResult) !== null && _f !== void 0 ? _f : null;
        this.llRejectPriceDifferenceBps = (_g = opts.llRejectPriceDifferenceBps) !== null && _g !== void 0 ? _g : null;
        this.makerSignature = (_h = opts.makerSignature) !== null && _h !== void 0 ? _h : null;
        this.makerUri = opts.makerUri;
        this.order = opts.order;
        this.orderHash = opts.orderHash;
        this.status = (_j = opts.status) !== null && _j !== void 0 ? _j : types_1.RfqmJobStatus.PendingEnqueued;
        this.takerSignature = (_k = opts.takerSignature) !== null && _k !== void 0 ? _k : null;
        this.updatedAt = (_l = opts.updatedAt) !== null && _l !== void 0 ? _l : null;
        this.workerAddress = (_m = opts.workerAddress) !== null && _m !== void 0 ? _m : null;
        this.takerSpecifiedSide = (_o = opts.takerSpecifiedSide) !== null && _o !== void 0 ? _o : null;
    }
    /**
     * Used to get the 'canonical' hash of the job. This is useful
     * because it can also be called on a metatransaction job and
     * that will return the metatransaction hash.
     */
    getHash() {
        return this.orderHash;
    }
};
__decorate([
    (0, typeorm_1.PrimaryColumn)({ name: 'order_hash', type: 'varchar' }),
    __metadata("design:type", String)
], RfqmV2JobEntity.prototype, "orderHash", void 0);
__decorate([
    (0, typeorm_1.Index)(),
    (0, typeorm_1.Column)({ name: 'created_at', type: 'timestamptz', default: () => 'now()' }),
    __metadata("design:type", Date)
], RfqmV2JobEntity.prototype, "createdAt", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at', type: 'timestamptz', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "updatedAt", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'expiry', type: 'numeric', transformer: transformers_1.BigNumberTransformer }),
    __metadata("design:type", utils_1.BigNumber)
], RfqmV2JobEntity.prototype, "expiry", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'chain_id', type: 'integer' }),
    __metadata("design:type", Number)
], RfqmV2JobEntity.prototype, "chainId", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'integrator_id', type: 'varchar', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "integratorId", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'maker_uri', type: 'varchar' }),
    __metadata("design:type", String)
], RfqmV2JobEntity.prototype, "makerUri", void 0);
__decorate([
    (0, typeorm_1.Index)(),
    (0, typeorm_1.Column)({ name: 'status', type: 'varchar' }),
    __metadata("design:type", String)
], RfqmV2JobEntity.prototype, "status", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'fee', type: 'jsonb' }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "fee", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'order', type: 'jsonb' }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "order", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'worker_address', type: 'varchar', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "workerAddress", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'last_look_result', type: 'boolean', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "lastLookResult", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'affiliate_address', type: 'varchar', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "affiliateAddress", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'taker_signature', type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "takerSignature", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'maker_signature', type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "makerSignature", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'is_unwrap', type: Boolean }),
    __metadata("design:type", Boolean)
], RfqmV2JobEntity.prototype, "isUnwrap", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'll_reject_price_difference_bps', type: 'integer', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "llRejectPriceDifferenceBps", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'approval', type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "approval", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'approval_signature', type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "approvalSignature", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'taker_specified_side', type: 'varchar', nullable: true }),
    __metadata("design:type", Object)
], RfqmV2JobEntity.prototype, "takerSpecifiedSide", void 0);
RfqmV2JobEntity = __decorate([
    (0, typeorm_1.Entity)({ name: 'rfqm_v2_jobs' }),
    __metadata("design:paramtypes", [Object])
], RfqmV2JobEntity);
exports.RfqmV2JobEntity = RfqmV2JobEntity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,