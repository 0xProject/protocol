{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasStationAttendantPolygon.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/utils/GasStationAttendantPolygon.ts"],"sourcesContent":["import { ProtocolFeeUtils } from '@0x/asset-swapper';\r\nimport { BigNumber } from '@0x/utils';\r\n\r\nimport { GWEI_DECIMALS, RFQM_TX_OTC_ORDER_GAS_ESTIMATE } from '../core/constants';\r\nimport { MetaTransactionSubmissionEntity, RfqmV2TransactionSubmissionEntity } from '../entities';\r\n\r\nimport { GasStationAttendant, Wei, WeiPerGas } from './GasStationAttendant';\r\nimport { SubmissionContext } from './SubmissionContext';\r\n\r\n// The total minimum bid recommended by the post here:\r\n// https://forum.matic.network/t/recommended-min-gas-price-setting/2531\r\n// Expect bids lower than this to be rejected by the RPC node.\r\nconst MINIMUM_BID_WEI = 30000000000;\r\n\r\n// The maximum tip we're willing to pay, based on p99 historical data\r\nconst MAXIMUM_TIP_WEI = new BigNumber(3000).shiftedBy(GWEI_DECIMALS);\r\n\r\n// Increase multiplier for tip with each resubmission cycle\r\nconst TEN_PERCENT_INCREASE = 1.1;\r\n\r\n/**\r\n * An implementation of `GasStationAttendant` designed for Polygon.\r\n *\r\n * Currently, the 0x Gas Oracle does not provide pricing for Polygon\r\n * in EIP-1559 format. Therefore, we'll use the 'fast' gas as a\r\n * `maxPriorityFeePerGas` estimate. This actually works out okay because\r\n * the Polygon base fee is always essentially zero as of April 2022.\r\n */\r\nexport class GasStationAttendantPolygon implements GasStationAttendant {\r\n    private readonly _protocolFeeUtils: ProtocolFeeUtils;\r\n\r\n    constructor(protocolFeeUtils: ProtocolFeeUtils) {\r\n        this._protocolFeeUtils = protocolFeeUtils;\r\n    }\r\n\r\n    /**\r\n     * The Safe Balance For Trade is from the p95 data shown here:\r\n     * https://0xproject.slack.com/archives/CQG0ZGBFS/p1649708977452469\r\n     */\r\n    // tslint:disable-next-line: prefer-function-over-method\r\n    public async getSafeBalanceForTradeAsync(): Promise<Wei> {\r\n        const p95PriorityFeeGwei = 261;\r\n        // Base fee is essentially zero\r\n        // TODO (rhinodavid): Make this smarter as we have more historical data\r\n        const gasEstimate = RFQM_TX_OTC_ORDER_GAS_ESTIMATE;\r\n        // 0.0261 MATIC\r\n        return new BigNumber(p95PriorityFeeGwei).shiftedBy(GWEI_DECIMALS).times(gasEstimate);\r\n    }\r\n\r\n    /**\r\n     * Uses the current fast gas price as the `maxPriorityFeePerGas`\r\n     * estimate. Plans for 3 resubmits at a 10% tip increase. Assumes\r\n     * no base fee.\r\n     *\r\n     * Uses a fixed value of 110,000 for the transaction gas amount\r\n     * estimate.\r\n     */\r\n    public async getWorkerBalanceForTradeAsync(): Promise<WeiPerGas> {\r\n        // TODO (rhinodavid): Once the 0x gas oracle can give EIP-1559 data for Polygon\r\n        // use that instead of the legacy fast gas price.\r\n        const gasPriceEstimateWei = await this._protocolFeeUtils.getGasPriceEstimationOrThrowAsync();\r\n\r\n        // Since the base fee is basically nothing, use this for our initial max priority fee\r\n        const maxPriorityFeePerGas = gasPriceEstimateWei;\r\n\r\n        // Pad the tip for 3 10% increases\r\n        const maxPriorityFeePad = Math.pow(TEN_PERCENT_INCREASE, 3); // tslint:disable-line: custom-no-magic-numbers\r\n        const paddedMaxPriorityFeePerGas = maxPriorityFeePerGas.times(maxPriorityFeePad);\r\n        const gasRateWei = BigNumber.max(paddedMaxPriorityFeePerGas.plus(0), MINIMUM_BID_WEI); // Amortizing the base fee to 0\r\n\r\n        // Pad a little until we get a better idea of token-specific costs\r\n        const padding = 1.1;\r\n        const gasEstimate = RFQM_TX_OTC_ORDER_GAS_ESTIMATE * padding;\r\n\r\n        return gasRateWei.times(gasEstimate);\r\n    }\r\n\r\n    /**\r\n     * Calculated using a similar methodology to `getWorkerBalanceForTradeAsync`,\r\n     * but assumes we submit and average 1.5 transactions per trade, which is\r\n     * what we see on Ethereum.\r\n     *\r\n     * TODO (rhinodavid): Update this once we have more historical data\r\n     */\r\n    public async getExpectedTransactionGasRateAsync(): Promise<WeiPerGas> {\r\n        // use that instead of the legacy fast gas price.\r\n        // `@0x/asset-swapper ProtocolFeeUtils::getGasPriceEstimationOrThrowAsync\r\n        // returns WEI even though it's not documented anywhere in our public open source library\r\n        // we intend other developers to use.\r\n        const gasPriceEstimateWei = await this._protocolFeeUtils.getGasPriceEstimationOrThrowAsync();\r\n\r\n        // Since the base fee is basically nothing, use this for our initial max priority fee\r\n        const maxPriorityFeePerGas = gasPriceEstimateWei;\r\n\r\n        // Pad the tip for 1.5 10% increases\r\n        const baseFeePad = Math.pow(TEN_PERCENT_INCREASE, 1.5); // tslint:disable-line: custom-no-magic-numbers\r\n        const paddedMaxPriorityFeePerGas = maxPriorityFeePerGas.times(baseFeePad);\r\n        const gasRateWei = paddedMaxPriorityFeePerGas.plus(0); // Amortizing the base fee to 0\r\n\r\n        return gasRateWei.integerValue(BigNumber.ROUND_CEIL);\r\n    }\r\n\r\n    /**\r\n     * The submission strategy mostly relies on updating the max priority fee\r\n     * as we assume the base fee is always ~0.\r\n     *\r\n     * For the max priority fee, we'll start with the \"fast\" gas price. On\r\n     * resubmits, we'll use either the new fast gas price or a 10% increase\r\n     * on the previous gas price, whichever is higher.\r\n     */\r\n    public async getNextBidAsync(\r\n        submissionContext: SubmissionContext<\r\n            RfqmV2TransactionSubmissionEntity[] | MetaTransactionSubmissionEntity[]\r\n        > | null,\r\n    ): Promise<{ maxFeePerGas: BigNumber; maxPriorityFeePerGas: BigNumber } | null> {\r\n        const gasPriceEstimateWei = await this._protocolFeeUtils.getGasPriceEstimationOrThrowAsync();\r\n        const maxPriorityFeePerGas = gasPriceEstimateWei;\r\n        // Always use 1 GWEI since it's pretty much always 0\r\n        const baseFee = new BigNumber(1).shiftedBy(GWEI_DECIMALS);\r\n\r\n        if (!submissionContext) {\r\n            const initialMaxPriorityFeePerGasWei = new BigNumber(maxPriorityFeePerGas);\r\n            return {\r\n                maxPriorityFeePerGas: initialMaxPriorityFeePerGasWei,\r\n                maxFeePerGas: BigNumber.max(baseFee.plus(initialMaxPriorityFeePerGasWei), MINIMUM_BID_WEI),\r\n            };\r\n        }\r\n\r\n        const { maxFeePerGas: oldMaxFeePerGas, maxPriorityFeePerGas: oldMaxPriorityFeePerGas } =\r\n            submissionContext.maxGasFees;\r\n\r\n        const newMaxPriorityFeePerGas = BigNumber.max(\r\n            oldMaxPriorityFeePerGas.times(TEN_PERCENT_INCREASE),\r\n            gasPriceEstimateWei,\r\n        );\r\n\r\n        if (newMaxPriorityFeePerGas.isGreaterThan(MAXIMUM_TIP_WEI)) {\r\n            return null;\r\n        }\r\n\r\n        const newMaxFeePerGas = BigNumber.max(\r\n            newMaxPriorityFeePerGas.plus(baseFee),\r\n            oldMaxFeePerGas.multipliedBy(TEN_PERCENT_INCREASE),\r\n        );\r\n\r\n        return {\r\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas.integerValue(BigNumber.ROUND_CEIL),\r\n            maxFeePerGas: newMaxFeePerGas.integerValue(BigNumber.ROUND_CEIL),\r\n        };\r\n    }\r\n}\r\n"],"version":3}