{"file":"/Users/davidwalsh/code-local/0x-rfq-api/src/entities/RfqmQuoteEntity.ts","mappings":";;;;;;;;;;;;AAAA,qCAA+D;AAU/D,IAAa,eAAe,GAA5B,MAAa,eAAe;IA6BxB,4DAA4D;IAC5D,YAAY,OAAiC,EAA8B;QACvE,wCAAwC;QACxC,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;SACnC;QAED,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC;QACtD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC;QAC5B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC;QAC9C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC;QAC5D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC;QAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;IACpC,CAAC;CACJ,CAAA;AA3CG;IADC,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;;kDAC9B;AAGzB;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,sBAAsB,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;;4DAC9C;AAI1C;IAFC,IAAA,eAAK,GAAE;IACP,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,aAAa,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC;8BACzD,IAAI;kDAAC;AAGxB;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;;gDACvB;AAGvB;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;qDAChC;AAGnC;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;;iDACvB;AAGxB;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;4CAC1B;AAG7B;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;8CACxB;AAGjC;IADC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,mBAAmB,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;yDAChC;AA3B9B,eAAe;IAD3B,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;;GACnB,eAAe,CA6C3B;AA7CY,0CAAe","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/src/entities/RfqmQuoteEntity.ts"],"sourcesContent":["import { Column, Entity, Index, PrimaryColumn } from 'typeorm';\n\nimport { StoredFee } from '../core/types';\n\nimport { StoredOrder } from './RfqmJobEntity';\n\nexport type RfqmQuoteConstructorOpts = Pick<RfqmQuoteEntity, 'chainId' | 'makerUri' | 'orderHash'> &\n    Partial<RfqmQuoteEntity>;\n\n@Entity({ name: 'rfqm_quotes' })\nexport class RfqmQuoteEntity {\n    @PrimaryColumn({ name: 'order_hash', type: 'varchar' })\n    public orderHash: string;\n\n    @Column({ name: 'metatransaction_hash', type: 'varchar', nullable: true, unique: true })\n    public metaTransactionHash: string | null;\n\n    @Index()\n    @Column({ name: 'created_at', type: 'timestamptz', default: () => 'now()' })\n    public createdAt!: Date;\n\n    @Column({ name: 'chain_id', type: 'integer' })\n    public chainId: number;\n\n    @Column({ name: 'integrator_id', type: 'varchar', nullable: true })\n    public integratorId: string | null;\n\n    @Column({ name: 'maker_uri', type: 'varchar' })\n    public makerUri: string;\n\n    @Column({ name: 'fee', type: 'jsonb', nullable: true })\n    public fee: StoredFee | null;\n\n    @Column({ name: 'order', type: 'jsonb', nullable: true })\n    public order: StoredOrder | null;\n\n    @Column({ name: 'affiliate_address', type: 'varchar', nullable: true })\n    public affiliateAddress: string | null;\n\n    // tslint:disable-next-line no-object-literal-type-assertion\n    constructor(opts: RfqmQuoteConstructorOpts = {} as RfqmQuoteConstructorOpts) {\n        // allow createdAt overrides for testing\n        if (opts.createdAt) {\n            this.createdAt = opts.createdAt;\n        }\n\n        this.affiliateAddress = opts.affiliateAddress || null;\n        this.chainId = opts.chainId;\n        this.fee = opts.fee || null;\n        this.integratorId = opts.integratorId || null;\n        this.makerUri = opts.makerUri;\n        this.metaTransactionHash = opts.metaTransactionHash || null;\n        this.order = opts.order || null;\n        this.orderHash = opts.orderHash;\n    }\n}\n"],"version":3}