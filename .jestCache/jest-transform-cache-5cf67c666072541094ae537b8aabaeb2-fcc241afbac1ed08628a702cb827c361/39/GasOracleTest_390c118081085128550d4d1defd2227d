5ce757ea78446d3dfd134ca48207cb79
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const axios_mock_adapter_1 = require("axios-mock-adapter");
const chai_1 = require("chai");
const HttpStatus = require("http-status-codes");
const GasOracle_1 = require("../../src/utils/GasOracle");
const fakeEip1559Response = {
    result: {
        source: 'MEDIAN',
        timestamp: 1649113582,
        instant: {
            price: 80000000000,
            maxPriorityFeePerGas: 2000000000,
            maxFeePerGas: 158770000000,
            baseFeePerGas: 78383362949,
        },
        fast: {
            price: 79000000000,
            maxPriorityFeePerGas: 1500000000,
            maxFeePerGas: 158270000000,
            baseFeePerGas: 78383362949,
        },
        standard: {
            price: 79000000000,
            maxPriorityFeePerGas: 1500000000,
            maxFeePerGas: 158270000000,
            baseFeePerGas: 78383362949,
        },
        low: {
            price: 79000000000,
            maxPriorityFeePerGas: 1240000000,
            maxFeePerGas: 158000000000,
            baseFeePerGas: 78383362949,
        },
    },
};
let axiosClient;
let axiosMock;
describe('GasOracle', () => {
    beforeAll(() => {
        axiosClient = axios_1.default.create();
        axiosMock = new axios_mock_adapter_1.default(axiosClient);
    });
    describe('create', () => {
        it('parses the legacy URL', async () => {
            axiosMock.onGet(`http://gas-price-oracle-svc.gas-price-oracle/v2/source/median`).replyOnce(HttpStatus.OK);
            const gasOracle = GasOracle_1.GasOracle.create('http://gas-price-oracle-svc.gas-price-oracle/source/median?output=eth_gas_station', axiosClient);
            try {
                await gasOracle.getBaseFeePerGasWeiAsync();
            }
            catch {
                // This will fail since we're not faking a valid response.
                // Just want to make sure the right URL is being called.
            }
            (0, chai_1.expect)(axiosMock.history.get[0].url).to.equal('http://gas-price-oracle-svc.gas-price-oracle/v2/source/median');
        });
    });
    describe('getBaseFeePerGasWeiAsync', () => {
        it('gets the base fee', async () => {
            axiosMock
                .onGet(`http://gas-price-oracle-svc.gas-price-oracle/v2/source/median`)
                .replyOnce(HttpStatus.OK, fakeEip1559Response);
            const gasOracle = GasOracle_1.GasOracle.create('http://gas-price-oracle-svc.gas-price-oracle/v2/source/median', axiosClient);
            const baseFee = await gasOracle.getBaseFeePerGasWeiAsync();
            (0, chai_1.expect)(baseFee.toString()).equals('78383362949');
        });
    });
    describe('getMaxPriorityFeePerGasWeiAsync', () => {
        it('gets the max priority fee', async () => {
            axiosMock
                .onGet(`http://gas-price-oracle-svc.gas-price-oracle/v2/source/median`)
                .replyOnce(HttpStatus.OK, fakeEip1559Response);
            const gasOracle = GasOracle_1.GasOracle.create('http://gas-price-oracle-svc.gas-price-oracle/v2/source/median', axiosClient);
            const baseFee = await gasOracle.getMaxPriorityFeePerGasWeiAsync('low');
            (0, chai_1.expect)(baseFee.toString()).equals('1240000000');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvR2FzT3JhY2xlVGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLGlDQUE2QztBQUM3QywyREFBa0Q7QUFDbEQsK0JBQThCO0FBQzlCLGdEQUFnRDtBQUVoRCx5REFBc0Q7QUFFdEQsTUFBTSxtQkFBbUIsR0FBRztJQUN4QixNQUFNLEVBQUU7UUFDSixNQUFNLEVBQUUsUUFBUTtRQUNoQixTQUFTLEVBQUUsVUFBVTtRQUNyQixPQUFPLEVBQUU7WUFDTCxLQUFLLEVBQUUsV0FBVztZQUNsQixvQkFBb0IsRUFBRSxVQUFVO1lBQ2hDLFlBQVksRUFBRSxZQUFZO1lBQzFCLGFBQWEsRUFBRSxXQUFXO1NBQzdCO1FBQ0QsSUFBSSxFQUFFO1lBQ0YsS0FBSyxFQUFFLFdBQVc7WUFDbEIsb0JBQW9CLEVBQUUsVUFBVTtZQUNoQyxZQUFZLEVBQUUsWUFBWTtZQUMxQixhQUFhLEVBQUUsV0FBVztTQUM3QjtRQUNELFFBQVEsRUFBRTtZQUNOLEtBQUssRUFBRSxXQUFXO1lBQ2xCLG9CQUFvQixFQUFFLFVBQVU7WUFDaEMsWUFBWSxFQUFFLFlBQVk7WUFDMUIsYUFBYSxFQUFFLFdBQVc7U0FDN0I7UUFDRCxHQUFHLEVBQUU7WUFDRCxLQUFLLEVBQUUsV0FBVztZQUNsQixvQkFBb0IsRUFBRSxVQUFVO1lBQ2hDLFlBQVksRUFBRSxZQUFZO1lBQzFCLGFBQWEsRUFBRSxXQUFXO1NBQzdCO0tBQ0o7Q0FDSixDQUFDO0FBRUYsSUFBSSxXQUEwQixDQUFDO0FBQy9CLElBQUksU0FBMkIsQ0FBQztBQUVoQyxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUN2QixTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ1gsV0FBVyxHQUFHLGVBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM3QixTQUFTLEdBQUcsSUFBSSw0QkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO1FBQ3BCLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNuQyxTQUFTLENBQUMsS0FBSyxDQUFDLCtEQUErRCxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUUxRyxNQUFNLFNBQVMsR0FBRyxxQkFBUyxDQUFDLE1BQU0sQ0FDOUIsbUZBQW1GLEVBQ25GLFdBQVcsQ0FDZCxDQUFDO1lBQ0YsSUFBSTtnQkFDQSxNQUFNLFNBQVMsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO2FBQzlDO1lBQUMsTUFBTTtnQkFDSiwwREFBMEQ7Z0JBQzFELHdEQUF3RDthQUMzRDtZQUNELElBQUEsYUFBTSxFQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQ3pDLCtEQUErRCxDQUNsRSxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7UUFDdEMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQy9CLFNBQVM7aUJBQ0osS0FBSyxDQUFDLCtEQUErRCxDQUFDO2lCQUN0RSxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1lBRW5ELE1BQU0sU0FBUyxHQUFHLHFCQUFTLENBQUMsTUFBTSxDQUM5QiwrREFBK0QsRUFDL0QsV0FBVyxDQUNkLENBQUM7WUFFRixNQUFNLE9BQU8sR0FBRyxNQUFNLFNBQVMsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1lBQzNELElBQUEsYUFBTSxFQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtRQUM3QyxFQUFFLENBQUMsMkJBQTJCLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDdkMsU0FBUztpQkFDSixLQUFLLENBQUMsK0RBQStELENBQUM7aUJBQ3RFLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLG1CQUFtQixDQUFDLENBQUM7WUFFbkQsTUFBTSxTQUFTLEdBQUcscUJBQVMsQ0FBQyxNQUFNLENBQzlCLCtEQUErRCxFQUMvRCxXQUFXLENBQ2QsQ0FBQztZQUVGLE1BQU0sT0FBTyxHQUFHLE1BQU0sU0FBUyxDQUFDLCtCQUErQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZFLElBQUEsYUFBTSxFQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNwRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkd2Fsc2gvY29kZS1sb2NhbC8weC1yZnEtYXBpL3Rlc3QvdXRpbHMvR2FzT3JhY2xlVGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXhpb3MsIHsgQXhpb3NJbnN0YW5jZSB9IGZyb20gJ2F4aW9zJztcbmltcG9ydCBBeGlvc01vY2tBZGFwdGVyIGZyb20gJ2F4aW9zLW1vY2stYWRhcHRlcic7XG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICdjaGFpJztcbmltcG9ydCAqIGFzIEh0dHBTdGF0dXMgZnJvbSAnaHR0cC1zdGF0dXMtY29kZXMnO1xuXG5pbXBvcnQgeyBHYXNPcmFjbGUgfSBmcm9tICcuLi8uLi9zcmMvdXRpbHMvR2FzT3JhY2xlJztcblxuY29uc3QgZmFrZUVpcDE1NTlSZXNwb25zZSA9IHtcbiAgICByZXN1bHQ6IHtcbiAgICAgICAgc291cmNlOiAnTUVESUFOJyxcbiAgICAgICAgdGltZXN0YW1wOiAxNjQ5MTEzNTgyLFxuICAgICAgICBpbnN0YW50OiB7XG4gICAgICAgICAgICBwcmljZTogODAwMDAwMDAwMDAsXG4gICAgICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhczogMjAwMDAwMDAwMCxcbiAgICAgICAgICAgIG1heEZlZVBlckdhczogMTU4NzcwMDAwMDAwLFxuICAgICAgICAgICAgYmFzZUZlZVBlckdhczogNzgzODMzNjI5NDksXG4gICAgICAgIH0sXG4gICAgICAgIGZhc3Q6IHtcbiAgICAgICAgICAgIHByaWNlOiA3OTAwMDAwMDAwMCxcbiAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiAxNTAwMDAwMDAwLFxuICAgICAgICAgICAgbWF4RmVlUGVyR2FzOiAxNTgyNzAwMDAwMDAsXG4gICAgICAgICAgICBiYXNlRmVlUGVyR2FzOiA3ODM4MzM2Mjk0OSxcbiAgICAgICAgfSxcbiAgICAgICAgc3RhbmRhcmQ6IHtcbiAgICAgICAgICAgIHByaWNlOiA3OTAwMDAwMDAwMCxcbiAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiAxNTAwMDAwMDAwLFxuICAgICAgICAgICAgbWF4RmVlUGVyR2FzOiAxNTgyNzAwMDAwMDAsXG4gICAgICAgICAgICBiYXNlRmVlUGVyR2FzOiA3ODM4MzM2Mjk0OSxcbiAgICAgICAgfSxcbiAgICAgICAgbG93OiB7XG4gICAgICAgICAgICBwcmljZTogNzkwMDAwMDAwMDAsXG4gICAgICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhczogMTI0MDAwMDAwMCxcbiAgICAgICAgICAgIG1heEZlZVBlckdhczogMTU4MDAwMDAwMDAwLFxuICAgICAgICAgICAgYmFzZUZlZVBlckdhczogNzgzODMzNjI5NDksXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5cbmxldCBheGlvc0NsaWVudDogQXhpb3NJbnN0YW5jZTtcbmxldCBheGlvc01vY2s6IEF4aW9zTW9ja0FkYXB0ZXI7XG5cbmRlc2NyaWJlKCdHYXNPcmFjbGUnLCAoKSA9PiB7XG4gICAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICAgICAgYXhpb3NDbGllbnQgPSBBeGlvcy5jcmVhdGUoKTtcbiAgICAgICAgYXhpb3NNb2NrID0gbmV3IEF4aW9zTW9ja0FkYXB0ZXIoYXhpb3NDbGllbnQpO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2NyZWF0ZScsICgpID0+IHtcbiAgICAgICAgaXQoJ3BhcnNlcyB0aGUgbGVnYWN5IFVSTCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF4aW9zTW9jay5vbkdldChgaHR0cDovL2dhcy1wcmljZS1vcmFjbGUtc3ZjLmdhcy1wcmljZS1vcmFjbGUvdjIvc291cmNlL21lZGlhbmApLnJlcGx5T25jZShIdHRwU3RhdHVzLk9LKTtcblxuICAgICAgICAgICAgY29uc3QgZ2FzT3JhY2xlID0gR2FzT3JhY2xlLmNyZWF0ZShcbiAgICAgICAgICAgICAgICAnaHR0cDovL2dhcy1wcmljZS1vcmFjbGUtc3ZjLmdhcy1wcmljZS1vcmFjbGUvc291cmNlL21lZGlhbj9vdXRwdXQ9ZXRoX2dhc19zdGF0aW9uJyxcbiAgICAgICAgICAgICAgICBheGlvc0NsaWVudCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGdhc09yYWNsZS5nZXRCYXNlRmVlUGVyR2FzV2VpQXN5bmMoKTtcbiAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBmYWlsIHNpbmNlIHdlJ3JlIG5vdCBmYWtpbmcgYSB2YWxpZCByZXNwb25zZS5cbiAgICAgICAgICAgICAgICAvLyBKdXN0IHdhbnQgdG8gbWFrZSBzdXJlIHRoZSByaWdodCBVUkwgaXMgYmVpbmcgY2FsbGVkLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhwZWN0KGF4aW9zTW9jay5oaXN0b3J5LmdldFswXS51cmwpLnRvLmVxdWFsKFxuICAgICAgICAgICAgICAgICdodHRwOi8vZ2FzLXByaWNlLW9yYWNsZS1zdmMuZ2FzLXByaWNlLW9yYWNsZS92Mi9zb3VyY2UvbWVkaWFuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2dldEJhc2VGZWVQZXJHYXNXZWlBc3luYycsICgpID0+IHtcbiAgICAgICAgaXQoJ2dldHMgdGhlIGJhc2UgZmVlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXhpb3NNb2NrXG4gICAgICAgICAgICAgICAgLm9uR2V0KGBodHRwOi8vZ2FzLXByaWNlLW9yYWNsZS1zdmMuZ2FzLXByaWNlLW9yYWNsZS92Mi9zb3VyY2UvbWVkaWFuYClcbiAgICAgICAgICAgICAgICAucmVwbHlPbmNlKEh0dHBTdGF0dXMuT0ssIGZha2VFaXAxNTU5UmVzcG9uc2UpO1xuXG4gICAgICAgICAgICBjb25zdCBnYXNPcmFjbGUgPSBHYXNPcmFjbGUuY3JlYXRlKFxuICAgICAgICAgICAgICAgICdodHRwOi8vZ2FzLXByaWNlLW9yYWNsZS1zdmMuZ2FzLXByaWNlLW9yYWNsZS92Mi9zb3VyY2UvbWVkaWFuJyxcbiAgICAgICAgICAgICAgICBheGlvc0NsaWVudCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IGJhc2VGZWUgPSBhd2FpdCBnYXNPcmFjbGUuZ2V0QmFzZUZlZVBlckdhc1dlaUFzeW5jKCk7XG4gICAgICAgICAgICBleHBlY3QoYmFzZUZlZS50b1N0cmluZygpKS5lcXVhbHMoJzc4MzgzMzYyOTQ5Jyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2dldE1heFByaW9yaXR5RmVlUGVyR2FzV2VpQXN5bmMnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdnZXRzIHRoZSBtYXggcHJpb3JpdHkgZmVlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXhpb3NNb2NrXG4gICAgICAgICAgICAgICAgLm9uR2V0KGBodHRwOi8vZ2FzLXByaWNlLW9yYWNsZS1zdmMuZ2FzLXByaWNlLW9yYWNsZS92Mi9zb3VyY2UvbWVkaWFuYClcbiAgICAgICAgICAgICAgICAucmVwbHlPbmNlKEh0dHBTdGF0dXMuT0ssIGZha2VFaXAxNTU5UmVzcG9uc2UpO1xuXG4gICAgICAgICAgICBjb25zdCBnYXNPcmFjbGUgPSBHYXNPcmFjbGUuY3JlYXRlKFxuICAgICAgICAgICAgICAgICdodHRwOi8vZ2FzLXByaWNlLW9yYWNsZS1zdmMuZ2FzLXByaWNlLW9yYWNsZS92Mi9zb3VyY2UvbWVkaWFuJyxcbiAgICAgICAgICAgICAgICBheGlvc0NsaWVudCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IGJhc2VGZWUgPSBhd2FpdCBnYXNPcmFjbGUuZ2V0TWF4UHJpb3JpdHlGZWVQZXJHYXNXZWlBc3luYygnbG93Jyk7XG4gICAgICAgICAgICBleHBlY3QoYmFzZUZlZS50b1N0cmluZygpKS5lcXVhbHMoJzEyNDAwMDAwMDAnKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==