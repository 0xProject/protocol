{"file":"/Users/davidwalsh/code-local/0x-rfq-api/test/utils/GasOracleTest.ts","mappings":"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","names":[],"sources":["/Users/davidwalsh/code-local/0x-rfq-api/test/utils/GasOracleTest.ts"],"sourcesContent":["import Axios, { AxiosInstance } from 'axios';\nimport AxiosMockAdapter from 'axios-mock-adapter';\nimport { expect } from 'chai';\nimport * as HttpStatus from 'http-status-codes';\n\nimport { GasOracle } from '../../src/utils/GasOracle';\n\nconst fakeEip1559Response = {\n    result: {\n        source: 'MEDIAN',\n        timestamp: 1649113582,\n        instant: {\n            price: 80000000000,\n            maxPriorityFeePerGas: 2000000000,\n            maxFeePerGas: 158770000000,\n            baseFeePerGas: 78383362949,\n        },\n        fast: {\n            price: 79000000000,\n            maxPriorityFeePerGas: 1500000000,\n            maxFeePerGas: 158270000000,\n            baseFeePerGas: 78383362949,\n        },\n        standard: {\n            price: 79000000000,\n            maxPriorityFeePerGas: 1500000000,\n            maxFeePerGas: 158270000000,\n            baseFeePerGas: 78383362949,\n        },\n        low: {\n            price: 79000000000,\n            maxPriorityFeePerGas: 1240000000,\n            maxFeePerGas: 158000000000,\n            baseFeePerGas: 78383362949,\n        },\n    },\n};\n\nlet axiosClient: AxiosInstance;\nlet axiosMock: AxiosMockAdapter;\n\ndescribe('GasOracle', () => {\n    beforeAll(() => {\n        axiosClient = Axios.create();\n        axiosMock = new AxiosMockAdapter(axiosClient);\n    });\n\n    describe('create', () => {\n        it('parses the legacy URL', async () => {\n            axiosMock.onGet(`http://gas-price-oracle-svc.gas-price-oracle/v2/source/median`).replyOnce(HttpStatus.OK);\n\n            const gasOracle = GasOracle.create(\n                'http://gas-price-oracle-svc.gas-price-oracle/source/median?output=eth_gas_station',\n                axiosClient,\n            );\n            try {\n                await gasOracle.getBaseFeePerGasWeiAsync();\n            } catch {\n                // This will fail since we're not faking a valid response.\n                // Just want to make sure the right URL is being called.\n            }\n            expect(axiosMock.history.get[0].url).to.equal(\n                'http://gas-price-oracle-svc.gas-price-oracle/v2/source/median',\n            );\n        });\n    });\n\n    describe('getBaseFeePerGasWeiAsync', () => {\n        it('gets the base fee', async () => {\n            axiosMock\n                .onGet(`http://gas-price-oracle-svc.gas-price-oracle/v2/source/median`)\n                .replyOnce(HttpStatus.OK, fakeEip1559Response);\n\n            const gasOracle = GasOracle.create(\n                'http://gas-price-oracle-svc.gas-price-oracle/v2/source/median',\n                axiosClient,\n            );\n\n            const baseFee = await gasOracle.getBaseFeePerGasWeiAsync();\n            expect(baseFee.toString()).equals('78383362949');\n        });\n    });\n\n    describe('getMaxPriorityFeePerGasWeiAsync', () => {\n        it('gets the max priority fee', async () => {\n            axiosMock\n                .onGet(`http://gas-price-oracle-svc.gas-price-oracle/v2/source/median`)\n                .replyOnce(HttpStatus.OK, fakeEip1559Response);\n\n            const gasOracle = GasOracle.create(\n                'http://gas-price-oracle-svc.gas-price-oracle/v2/source/median',\n                axiosClient,\n            );\n\n            const baseFee = await gasOracle.getMaxPriorityFeePerGasWeiAsync('low');\n            expect(baseFee.toString()).equals('1240000000');\n        });\n    });\n});\n"],"version":3}