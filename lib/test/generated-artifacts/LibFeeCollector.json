{
    "schemaVersion": "2.0.0",
    "contractName": "LibFeeCollector",
    "compilerOutput": {
        "abi": [],
        "devdoc": {
            "details": "Helpers for computing `FeeCollector` contract addresses.",
            "kind": "dev",
            "methods": {},
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220466070e1592b5c55760d11d950bbace98908d308dd5fef459e0217992e250bb764736f6c634300060c0033",
                "opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID PUSH1 0x70 0xE1 MSIZE 0x2B 0x5C SSTORE PUSH23 0xD11D950BBACE98908D308DD5FEF459E0217992E250BB7 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "745:737:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220466070e1592b5c55760d11d950bbace98908d308dd5fef459e0217992e250bb764736f6c634300060c0033",
                "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID PUSH1 0x70 0xE1 MSIZE 0x2B 0x5C SSTORE PUSH23 0xD11D950BBACE98908D308DD5FEF459E0217992E250BB7 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "745:737:0:-:0;;;;;;;;"
            },
            "methodIdentifiers": {}
        }
    },
    "sourceTreeHashHex": "0x90f75b8bcb0b2401b01d95ebac6cf76008379055437587af9546c17bde391978",
    "sources": {
        "./LibFeeCollector.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Helpers for computing `FeeCollector` contract addresses.\nlibrary LibFeeCollector {\n\n    /// @dev Compute the CREATE2 address for a fee collector.\n    /// @param controller The address of the `FeeCollectorController` contract.\n    /// @param initCodeHash The init code hash of the `FeeCollector` contract.\n    /// @param poolId The fee collector's pool ID.\n    function getFeeCollectorAddress(address controller, bytes32 initCodeHash, bytes32 poolId)\n        internal\n        pure\n        returns (address payable feeCollectorAddress)\n    {\n        // Compute the CREATE2 address for the fee collector.\n        return address(uint256(keccak256(abi.encodePacked(\n            byte(0xff),\n            controller,\n            poolId, // pool ID is salt\n            initCodeHash\n        ))));\n    }\n}\n"
        }
    },
    "sourceCodes": {
        "./LibFeeCollector.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Helpers for computing `FeeCollector` contract addresses.\nlibrary LibFeeCollector {\n\n    /// @dev Compute the CREATE2 address for a fee collector.\n    /// @param controller The address of the `FeeCollectorController` contract.\n    /// @param initCodeHash The init code hash of the `FeeCollector` contract.\n    /// @param poolId The fee collector's pool ID.\n    function getFeeCollectorAddress(address controller, bytes32 initCodeHash, bytes32 poolId)\n        internal\n        pure\n        returns (address payable feeCollectorAddress)\n    {\n        // Compute the CREATE2 address for the fee collector.\n        return address(uint256(keccak256(abi.encodePacked(\n            byte(0xff),\n            controller,\n            poolId, // pool ID is salt\n            initCodeHash\n        ))));\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/michaelzhu/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap",
                        "evm.methodIdentifiers"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
