{
    "schemaVersion": "2.0.0",
    "contractName": "TestFixinProtocolFees",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "contract IEtherTokenV06",
                        "name": "weth",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IStaking",
                        "name": "staking",
                        "type": "address"
                    },
                    {
                        "internalType": "contract FeeCollectorController",
                        "name": "feeCollectorController",
                        "type": "address"
                    },
                    {
                        "internalType": "uint32",
                        "name": "protocolFeeMultiplier",
                        "type": "uint32"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "inputs": [],
                "name": "PROTOCOL_FEE_MULTIPLIER",
                "outputs": [
                    {
                        "internalType": "uint32",
                        "name": "",
                        "type": "uint32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "poolId",
                        "type": "bytes32"
                    }
                ],
                "name": "collectProtocolFee",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "poolId",
                        "type": "bytes32"
                    }
                ],
                "name": "getFeeCollector",
                "outputs": [
                    {
                        "internalType": "contract FeeCollector",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getSingleProtocolFee",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "protocolFeeAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "poolId",
                        "type": "bytes32"
                    }
                ],
                "name": "transferFeesForPool",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x61012060405234801561001157600080fd5b5060405161094638038061094683398101604081905261003091610117565b83838383816001600160a01b031660a0816001600160a01b031660601b81525050816001600160a01b031663f2541a8c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561008a57600080fd5b505afa15801561009e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c291906100ff565b60c052606093841b6001600160601b031990811660e09081529390941b90931661010052501b6001600160e01b0319166080525061019592505050565b600060208284031215610110578081fd5b5051919050565b6000806000806080858703121561012c578283fd5b84516101378161017d565b60208601519094506101488161017d565b60408601519093506101598161017d565b606086015190925063ffffffff81168114610172578182fd5b939692955090935050565b6001600160a01b038116811461019257600080fd5b50565b60805160e01c60a05160601c60c05160e05160601c6101005160601c61075c6101ea600039806104805250806103915250806102735250806102525280610304525080610130528061029f525061075c6000f3fe60806040526004361061005a5760003560e01c8063a0edcef511610043578063a0edcef5146100aa578063b7bf197b146100cc578063e707b1f7146100ee5761005a565b80634900c02f1461005f578063713192b414610074575b600080fd5b61007261006d36600461058b565b61010e565b005b34801561008057600080fd5b5061009461008f36600461058b565b61011b565b6040516100a1919061065d565b60405180910390f35b3480156100b657600080fd5b506100bf61012e565b6040516100a19190610715565b3480156100d857600080fd5b506100e1610152565b6040516100a191906106af565b3480156100fa57600080fd5b5061007261010936600461058b565b610161565b6101178161016d565b5050565b60006101268261024b565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061015c610298565b905090565b61016a816102c4565b50565b600080610178610298565b905080610189576000915050610129565b60006101948461024b565b905060008173ffffffffffffffffffffffffffffffffffffffff16836040516101bc9061065a565b60006040518083038185875af1925050503d80600081146101f9576040519150601f19603f3d011682016040523d82523d6000602084013e6101fe565b606091505b5050905080610242576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610239906106b8565b60405180910390fd5b50909392505050565b60006101267f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084610513565b63ffffffff7f0000000000000000000000000000000000000000000000000000000000000000163a0290565b6040517f319bed9a00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063319bed9a906103399085906004016106af565b602060405180830381600087803b15801561035357600080fd5b505af1158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b91906105a3565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016103e8919061065d565b60206040518083038186803b15801561040057600080fd5b505afa158015610414573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043891906105de565b9050600181111561050e576040517fa3b4a32700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a3b4a327906104db90859081907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff87019060040161067e565b600060405180830381600087803b1580156104f557600080fd5b505af1158015610509573d6000803e3d6000fd5b505050505b505050565b60405160009061054d907fff00000000000000000000000000000000000000000000000000000000000000908690859087906020016105f6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120949350505050565b60006020828403121561059c578081fd5b5035919050565b6000602082840312156105b4578081fd5b815173ffffffffffffffffffffffffffffffffffffffff811681146105d7578182fd5b9392505050565b6000602082840312156105ef578081fd5b5051919050565b7fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830152603582015260550190565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b90815260200190565b60208082526027908201527f466978696e50726f746f636f6c466565732f45544845525f5452414e5346455260408201527f5f46414c49454400000000000000000000000000000000000000000000000000606082015260800190565b63ffffffff9190911681526020019056fea264697066735822122050d52cc763f518a7c275543ee3c1b2ff74f5452629c72cc70d5d4c5cf6d792e564736f6c634300060c0033",
                "opcodes": "PUSH2 0x120 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x946 CODESIZE SUB DUP1 PUSH2 0x946 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x30 SWAP2 PUSH2 0x117 JUMP JUMPDEST DUP4 DUP4 DUP4 DUP4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE POP POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF2541A8C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0xFF JUMP JUMPDEST PUSH1 0xC0 MSTORE PUSH1 0x60 SWAP4 DUP5 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0xE0 SWAP1 DUP2 MSTORE SWAP4 SWAP1 SWAP5 SHL SWAP1 SWAP4 AND PUSH2 0x100 MSTORE POP SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x80 MSTORE POP PUSH2 0x195 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x110 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x12C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x137 DUP2 PUSH2 0x17D JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x148 DUP2 PUSH2 0x17D JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x159 DUP2 PUSH2 0x17D JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x172 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xE0 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH1 0x60 SHR PUSH2 0x100 MLOAD PUSH1 0x60 SHR PUSH2 0x75C PUSH2 0x1EA PUSH1 0x0 CODECOPY DUP1 PUSH2 0x480 MSTORE POP DUP1 PUSH2 0x391 MSTORE POP DUP1 PUSH2 0x273 MSTORE POP DUP1 PUSH2 0x252 MSTORE DUP1 PUSH2 0x304 MSTORE POP DUP1 PUSH2 0x130 MSTORE DUP1 PUSH2 0x29F MSTORE POP PUSH2 0x75C PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x5A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA0EDCEF5 GT PUSH2 0x43 JUMPI DUP1 PUSH4 0xA0EDCEF5 EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0xB7BF197B EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0xE707B1F7 EQ PUSH2 0xEE JUMPI PUSH2 0x5A JUMP JUMPDEST DUP1 PUSH4 0x4900C02F EQ PUSH2 0x5F JUMPI DUP1 PUSH4 0x713192B4 EQ PUSH2 0x74 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x72 PUSH2 0x6D CALLDATASIZE PUSH1 0x4 PUSH2 0x58B JUMP JUMPDEST PUSH2 0x10E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x94 PUSH2 0x8F CALLDATASIZE PUSH1 0x4 PUSH2 0x58B JUMP JUMPDEST PUSH2 0x11B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA1 SWAP2 SWAP1 PUSH2 0x65D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBF PUSH2 0x12E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA1 SWAP2 SWAP1 PUSH2 0x715 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0x152 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA1 SWAP2 SWAP1 PUSH2 0x6AF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x72 PUSH2 0x109 CALLDATASIZE PUSH1 0x4 PUSH2 0x58B JUMP JUMPDEST PUSH2 0x161 JUMP JUMPDEST PUSH2 0x117 DUP2 PUSH2 0x16D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126 DUP3 PUSH2 0x24B JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15C PUSH2 0x298 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x16A DUP2 PUSH2 0x2C4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x178 PUSH2 0x298 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x189 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x129 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x194 DUP5 PUSH2 0x24B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1BC SWAP1 PUSH2 0x65A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x242 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x239 SWAP1 PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126 PUSH32 0x0 PUSH32 0x0 DUP5 PUSH2 0x513 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH32 0x0 AND GASPRICE MUL SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x319BED9A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x319BED9A SWAP1 PUSH2 0x339 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x6AF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x367 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x38B SWAP2 SWAP1 PUSH2 0x5A3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E8 SWAP2 SWAP1 PUSH2 0x65D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x414 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x438 SWAP2 SWAP1 PUSH2 0x5DE JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x50E JUMPI PUSH1 0x40 MLOAD PUSH32 0xA3B4A32700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA3B4A327 SWAP1 PUSH2 0x4DB SWAP1 DUP6 SWAP1 DUP2 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 ADD SWAP1 PUSH1 0x4 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x509 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x54D SWAP1 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP7 SWAP1 DUP6 SWAP1 DUP8 SWAP1 PUSH1 0x20 ADD PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x59C JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5B4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5D7 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5EF JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 SWAP5 SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x60 SWAP3 SWAP1 SWAP3 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x466978696E50726F746F636F6C466565732F45544845525F5452414E53464552 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F46414C49454400000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 POP 0xD5 0x2C 0xC7 PUSH4 0xF518A7C2 PUSH22 0x543EE3C1B2FF74F5452629C72CC70D5D4C5CF6D792E5 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "725:972:5:-:0;;;787:323;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;994:4;1000:7;1009:22;1033:21;1712:22:3;-1:-1:-1;;;;;1685:49:3;;;-1:-1:-1;;;;;1685:49:3;;;;;;;1787:22;-1:-1:-1;;;;;1787:51:3;;:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1744:96;;1850:11;;;;-1:-1:-1;;;;;;1850:11:3;;;;;;;1871:17;;;;;;;;;-1:-1:-1;1898:47:3;-1:-1:-1;;;;;;1898:47:3;;;-1:-1:-1;725:972:5;;-1:-1:-1;;;725:972:5;844:263:-1;;959:2;947:9;938:7;934:23;930:32;927:2;;;-1:-1;;965:12;927:2;-1:-1;83:13;;921:186;-1:-1;921:186::o;1114:806::-;;;;;1347:3;1335:9;1326:7;1322:23;1318:33;1315:2;;;-1:-1;;1354:12;1315:2;453:6;447:13;465:55;514:5;465:55;:::i;:::-;1539:2;1605:22;;626:13;1406:96;;-1:-1;644:49;626:13;644:49;:::i;:::-;1674:2;1754:22;;254:13;1547:90;;-1:-1;272:63;254:13;272:63;:::i;:::-;1823:2;1872:22;;782:13;1682:104;;-1:-1;2666:10;2655:22;;3379:34;;3369:2;;-1:-1;;3417:12;3369:2;1309:611;;;;-1:-1;1309:611;;-1:-1;;1309:611::o;2813:177::-;-1:-1;;;;;2528:54;;2902:65;;2892:2;;2981:1;;2971:12;2892:2;2886:104;:::o;:::-;725:972:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "256": [
                        {
                            "length": 32,
                            "start": 304
                        },
                        {
                            "length": 32,
                            "start": 671
                        }
                    ],
                    "259": [
                        {
                            "length": 32,
                            "start": 594
                        },
                        {
                            "length": 32,
                            "start": 772
                        }
                    ],
                    "262": [
                        {
                            "length": 32,
                            "start": 627
                        }
                    ],
                    "265": [
                        {
                            "length": 32,
                            "start": 913
                        }
                    ],
                    "268": [
                        {
                            "length": 32,
                            "start": 1152
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x60806040526004361061005a5760003560e01c8063a0edcef511610043578063a0edcef5146100aa578063b7bf197b146100cc578063e707b1f7146100ee5761005a565b80634900c02f1461005f578063713192b414610074575b600080fd5b61007261006d36600461058b565b61010e565b005b34801561008057600080fd5b5061009461008f36600461058b565b61011b565b6040516100a1919061065d565b60405180910390f35b3480156100b657600080fd5b506100bf61012e565b6040516100a19190610715565b3480156100d857600080fd5b506100e1610152565b6040516100a191906106af565b3480156100fa57600080fd5b5061007261010936600461058b565b610161565b6101178161016d565b5050565b60006101268261024b565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061015c610298565b905090565b61016a816102c4565b50565b600080610178610298565b905080610189576000915050610129565b60006101948461024b565b905060008173ffffffffffffffffffffffffffffffffffffffff16836040516101bc9061065a565b60006040518083038185875af1925050503d80600081146101f9576040519150601f19603f3d011682016040523d82523d6000602084013e6101fe565b606091505b5050905080610242576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610239906106b8565b60405180910390fd5b50909392505050565b60006101267f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084610513565b63ffffffff7f0000000000000000000000000000000000000000000000000000000000000000163a0290565b6040517f319bed9a00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063319bed9a906103399085906004016106af565b602060405180830381600087803b15801561035357600080fd5b505af1158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b91906105a3565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016103e8919061065d565b60206040518083038186803b15801561040057600080fd5b505afa158015610414573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043891906105de565b9050600181111561050e576040517fa3b4a32700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a3b4a327906104db90859081907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff87019060040161067e565b600060405180830381600087803b1580156104f557600080fd5b505af1158015610509573d6000803e3d6000fd5b505050505b505050565b60405160009061054d907fff00000000000000000000000000000000000000000000000000000000000000908690859087906020016105f6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120949350505050565b60006020828403121561059c578081fd5b5035919050565b6000602082840312156105b4578081fd5b815173ffffffffffffffffffffffffffffffffffffffff811681146105d7578182fd5b9392505050565b6000602082840312156105ef578081fd5b5051919050565b7fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830152603582015260550190565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b90815260200190565b60208082526027908201527f466978696e50726f746f636f6c466565732f45544845525f5452414e5346455260408201527f5f46414c49454400000000000000000000000000000000000000000000000000606082015260800190565b63ffffffff9190911681526020019056fea264697066735822122050d52cc763f518a7c275543ee3c1b2ff74f5452629c72cc70d5d4c5cf6d792e564736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x5A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA0EDCEF5 GT PUSH2 0x43 JUMPI DUP1 PUSH4 0xA0EDCEF5 EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0xB7BF197B EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0xE707B1F7 EQ PUSH2 0xEE JUMPI PUSH2 0x5A JUMP JUMPDEST DUP1 PUSH4 0x4900C02F EQ PUSH2 0x5F JUMPI DUP1 PUSH4 0x713192B4 EQ PUSH2 0x74 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x72 PUSH2 0x6D CALLDATASIZE PUSH1 0x4 PUSH2 0x58B JUMP JUMPDEST PUSH2 0x10E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x94 PUSH2 0x8F CALLDATASIZE PUSH1 0x4 PUSH2 0x58B JUMP JUMPDEST PUSH2 0x11B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA1 SWAP2 SWAP1 PUSH2 0x65D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBF PUSH2 0x12E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA1 SWAP2 SWAP1 PUSH2 0x715 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0x152 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA1 SWAP2 SWAP1 PUSH2 0x6AF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x72 PUSH2 0x109 CALLDATASIZE PUSH1 0x4 PUSH2 0x58B JUMP JUMPDEST PUSH2 0x161 JUMP JUMPDEST PUSH2 0x117 DUP2 PUSH2 0x16D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126 DUP3 PUSH2 0x24B JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15C PUSH2 0x298 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x16A DUP2 PUSH2 0x2C4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x178 PUSH2 0x298 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x189 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x129 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x194 DUP5 PUSH2 0x24B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1BC SWAP1 PUSH2 0x65A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x242 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x239 SWAP1 PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126 PUSH32 0x0 PUSH32 0x0 DUP5 PUSH2 0x513 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH32 0x0 AND GASPRICE MUL SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x319BED9A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x319BED9A SWAP1 PUSH2 0x339 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x6AF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x367 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x38B SWAP2 SWAP1 PUSH2 0x5A3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E8 SWAP2 SWAP1 PUSH2 0x65D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x414 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x438 SWAP2 SWAP1 PUSH2 0x5DE JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x50E JUMPI PUSH1 0x40 MLOAD PUSH32 0xA3B4A32700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA3B4A327 SWAP1 PUSH2 0x4DB SWAP1 DUP6 SWAP1 DUP2 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 ADD SWAP1 PUSH1 0x4 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x509 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x54D SWAP1 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP7 SWAP1 DUP6 SWAP1 DUP8 SWAP1 PUSH1 0x20 ADD PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x59C JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5B4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5D7 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5EF JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 SWAP5 SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x60 SWAP3 SWAP1 SWAP3 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x466978696E50726F746F636F6C466565732F45544845525F5452414E53464552 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F46414C49454400000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 POP 0xD5 0x2C 0xC7 PUSH4 0xF518A7C2 PUSH22 0x543EE3C1B2FF74F5452629C72CC70D5D4C5CF6D792E5 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "725:972:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1116:125;;;;;;:::i;:::-;;:::i;:::-;;1364:168;;;;;;;;;;-1:-1:-1;1364:168:5;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1045:47:3;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1538:157:5:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1247:111::-;;;;;;;;;;-1:-1:-1;1247:111:5;;;;;:::i;:::-;;:::i;1116:125::-;1207:27;1227:6;1207:19;:27::i;:::-;;1116:125;:::o;1364:168::-;1466:12;1501:24;1518:6;1501:16;:24::i;:::-;1494:31;;1364:168;;;;:::o;1045:47:3:-;;;:::o;1538:157:5:-;1617:25;1665:23;:21;:23::i;:::-;1658:30;;1538:157;:::o;1247:111::-;1323:28;1344:6;1323:20;:28::i;:::-;1247:111;:::o;2236:520:3:-;2315:26;2357:23;2383;:21;:23::i;:::-;2357:49;-1:-1:-1;2420:20:3;2416:89;;2493:1;2486:8;;;;;2416:89;2514:25;2542:24;2559:6;2542:16;:24::i;:::-;2514:52;;2577:12;2602;2594:26;;2628:15;2594:54;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2576:72;;;2666:7;2658:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;2734:15:3;;2236:520;-1:-1:-1;;;2236:520:3:o;3691:302::-;3780:12;3828:157;3888:24;3927:28;3969:6;3828:38;:157::i;4123:181::-;4251:32;4259:23;4251:32;4286:11;4251:46;4123:181;:::o;2900:672::-;3126:61;;;;;3086:25;;3126:53;:24;:53;;;;:61;;3180:6;;3126:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3086:101;;3261:11;3275:4;:14;;;3298:12;3275:37;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3261:51;;3332:1;3326:3;:7;3322:244;;;3429:126;;;;;:22;:7;:22;;;;:126;;3477:12;;;;3547:7;;;;3429:126;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3322:244;2900:672;;;:::o;1048:432:2:-;1331:139;;1185:35;;1331:139;;1361:10;;1385;;1409:6;;1448:12;;1331:139;;;:::i;:::-;;;;;;;;;;;;;;1321:150;;1331:139;1321:150;;;;;1048:432;-1:-1:-1;;;;1048:432:2:o;462:241:-1:-;;566:2;554:9;545:7;541:23;537:32;534:2;;;-1:-1;;572:12;534:2;-1:-1;72:20;;528:175;-1:-1;528:175::o;710:301::-;;844:2;832:9;823:7;819:23;815:32;812:2;;;-1:-1;;850:12;812:2;245:6;239:13;7276:42;8902:5;7265:54;8858:5;8855:54;8845:2;;-1:-1;;8913:12;8845:2;902:93;806:205;-1:-1;;;806:205::o;1018:263::-;;1133:2;1121:9;1112:7;1108:23;1104:32;1101:2;;;-1:-1;;1139:12;1101:2;-1:-1;399:13;;1095:186;-1:-1;1095:186::o;3144:665::-;6920:66;6909:78;;;;1683:56;;8625:2;8621:14;;;;;;3449:1;3440:11;;1526:58;3550:12;;;1822:37;3661:12;;;1822:37;3772:12;;;3342:467::o;3816:379::-;4180:10;4004:191::o;4202:238::-;7276:42;7265:54;;;;1367:58;;4337:2;4322:18;;4308:132::o;4447:476::-;7276:42;7265:54;;;1367:58;;7265:54;;;;4826:2;4811:18;;1367:58;4909:2;4894:18;;1822:37;;;;4646:2;4631:18;;4617:306::o;4930:222::-;1822:37;;;5057:2;5042:18;;5028:124::o;5442:416::-;5642:2;5656:47;;;2747:2;5627:18;;;6576:19;2783:34;6616:14;;;2763:55;2852:9;2838:12;;;2831:31;2881:12;;;5613:245::o;6094:218::-;7482:10;7471:22;;;;3096:36;;6219:2;6204:18;;6190:122::o"
            },
            "methodIdentifiers": {
                "PROTOCOL_FEE_MULTIPLIER()": "a0edcef5",
                "collectProtocolFee(bytes32)": "4900c02f",
                "getFeeCollector(bytes32)": "713192b4",
                "getSingleProtocolFee()": "b7bf197b",
                "transferFeesForPool(bytes32)": "e707b1f7"
            }
        }
    },
    "sourceTreeHashHex": "0x6e2d19967f33bc168b28d0c14490119b768d7180350aef36fdcd40e7136255eb",
    "sources": {
        "./TestFixinProtocolFees.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"../src/fixins/FixinProtocolFees.sol\";\n\ncontract TestFixinProtocolFees is\n    FixinProtocolFees\n{\n    constructor(\n        IEtherTokenV06 weth,\n        IStaking staking,\n        FeeCollectorController feeCollectorController,\n        uint32 protocolFeeMultiplier\n    )\n        public\n        FixinProtocolFees(weth, staking, feeCollectorController, protocolFeeMultiplier)\n    {\n        // solhint-disalbe no-empty-blocks\n    }\n\n    function collectProtocolFee(bytes32 poolId)\n        external\n        payable\n    {\n        _collectProtocolFee(poolId);\n    }\n\n    function transferFeesForPool(bytes32 poolId)\n        external\n    {\n        _transferFeesForPool(poolId);\n    }\n\n    function getFeeCollector(\n        bytes32 poolId\n    )\n        external\n        view\n        returns (FeeCollector)\n    {\n        return _getFeeCollector(poolId);\n    }\n\n    function getSingleProtocolFee()\n        external\n        view\n        returns (uint256 protocolFeeAmount)\n    {\n        return _getSingleProtocolFee();\n    }\n}\n"
        },
        "../src/fixins/FixinProtocolFees.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../external/FeeCollector.sol\";\nimport \"../external/FeeCollectorController.sol\";\nimport \"../external/LibFeeCollector.sol\";\nimport \"../vendor/v3/IStaking.sol\";\n\n\n/// @dev Helpers for collecting protocol fees.\nabstract contract FixinProtocolFees {\n\n    /// @dev The protocol fee multiplier.\n    uint32 public immutable PROTOCOL_FEE_MULTIPLIER;\n    /// @dev The `FeeCollectorController` contract.\n    FeeCollectorController private immutable FEE_COLLECTOR_CONTROLLER;\n    /// @dev Hash of the fee collector init code.\n    bytes32 private immutable FEE_COLLECTOR_INIT_CODE_HASH;\n    /// @dev The WETH token contract.\n    IEtherTokenV06 private immutable WETH;\n    /// @dev The staking contract.\n    IStaking private immutable STAKING;\n\n    constructor(\n        IEtherTokenV06 weth,\n        IStaking staking,\n        FeeCollectorController feeCollectorController,\n        uint32 protocolFeeMultiplier\n    )\n        internal\n    {\n        FEE_COLLECTOR_CONTROLLER = feeCollectorController;\n        FEE_COLLECTOR_INIT_CODE_HASH =\n            feeCollectorController.FEE_COLLECTOR_INIT_CODE_HASH();\n        WETH = weth;\n        STAKING = staking;\n        PROTOCOL_FEE_MULTIPLIER = protocolFeeMultiplier;\n    }\n\n    /// @dev   Collect the specified protocol fee in ETH.\n    ///        The fee is stored in a per-pool fee collector contract.\n    /// @param poolId The pool ID for which a fee is being collected.\n    /// @return ethProtocolFeePaid How much protocol fee was collected in ETH.\n    function _collectProtocolFee(bytes32 poolId)\n        internal\n        returns (uint256 ethProtocolFeePaid)\n    {\n        uint256 protocolFeePaid = _getSingleProtocolFee();\n        if (protocolFeePaid == 0) {\n            // Nothing to do.\n            return 0;\n        }\n        FeeCollector feeCollector = _getFeeCollector(poolId);\n        (bool success,) = address(feeCollector).call{value: protocolFeePaid}(\"\");\n        require(success, \"FixinProtocolFees/ETHER_TRANSFER_FALIED\");\n        return protocolFeePaid;\n    }\n\n    /// @dev Transfer fees for a given pool to the staking contract.\n    /// @param poolId Identifies the pool whose fees are being paid.\n    function _transferFeesForPool(bytes32 poolId)\n        internal\n    {\n        // This will create a FeeCollector contract (if necessary) and wrap\n        // fees for the pool ID.\n        FeeCollector feeCollector =\n            FEE_COLLECTOR_CONTROLLER.prepareFeeCollectorToPayFees(poolId);\n        // All fees in the fee collector should be in WETH now.\n        uint256 bal = WETH.balanceOf(address(feeCollector));\n        if (bal > 1) {\n            // Leave 1 wei behind to avoid high SSTORE cost of zero-->non-zero.\n            STAKING.payProtocolFee(\n                address(feeCollector),\n                address(feeCollector),\n                bal - 1);\n        }\n    }\n\n    /// @dev Compute the CREATE2 address for a fee collector.\n    /// @param poolId The fee collector's pool ID.\n    function _getFeeCollector(bytes32 poolId)\n        internal\n        view\n        returns (FeeCollector)\n    {\n        return FeeCollector(LibFeeCollector.getFeeCollectorAddress(\n            address(FEE_COLLECTOR_CONTROLLER),\n            FEE_COLLECTOR_INIT_CODE_HASH,\n            poolId\n        ));\n    }\n\n    /// @dev Get the cost of a single protocol fee.\n    /// @return protocolFeeAmount The protocol fee amount, in ETH/WETH.\n    function _getSingleProtocolFee()\n        internal\n        view\n        returns (uint256 protocolFeeAmount)\n    {\n        return uint256(PROTOCOL_FEE_MULTIPLIER) * tx.gasprice;\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "../src/external/FeeCollector.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol\";\nimport \"../vendor/v3/IStaking.sol\";\n\n/// @dev The collector contract for protocol fees\ncontract FeeCollector is AuthorizableV06 {\n    /// @dev Allow ether transfers to the collector.\n    receive() external payable { }\n\n    constructor() public {\n        _addAuthorizedAddress(msg.sender);\n    }\n\n    /// @dev   Approve the staking contract and join a pool. Only an authority\n    ///        can call this.\n    /// @param weth The WETH contract.\n    /// @param staking The staking contract.\n    /// @param poolId The pool ID this contract is collecting fees for.\n    function initialize(\n        IEtherTokenV06 weth,\n        IStaking staking,\n        bytes32 poolId\n    )\n        external\n        onlyAuthorized\n    {\n        weth.approve(address(staking), type(uint256).max);\n        staking.joinStakingPoolAsMaker(poolId);\n    }\n\n    /// @dev Convert all held ether to WETH. Only an authority can call this.\n    /// @param weth The WETH contract.\n    function convertToWeth(\n        IEtherTokenV06 weth\n    )\n        external\n        onlyAuthorized\n    {\n        if (address(this).balance > 0) {\n            weth.deposit{value: address(this).balance}();\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./interfaces/IAuthorizableV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibAuthorizableRichErrorsV06.sol\";\nimport \"./OwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract AuthorizableV06 is\n    OwnableV06,\n    IAuthorizableV06\n{\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        _assertSenderIsAuthorized();\n        _;\n    }\n\n    // @dev Whether an address is authorized to call privileged functions.\n    // @param 0 Address to query.\n    // @return 0 Whether the address is authorized.\n    mapping (address => bool) public override authorized;\n    // @dev Whether an address is authorized to call privileged functions.\n    // @param 0 Index of authorized address.\n    // @return 0 Authorized address.\n    address[] public override authorities;\n\n    /// @dev Initializes the `owner` address.\n    constructor()\n        public\n        OwnableV06()\n    {}\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        _addAuthorizedAddress(target);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        if (!authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\n        }\n        for (uint256 i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                _removeAuthorizedAddressAtIndex(target, i);\n                break;\n            }\n        }\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        override\n        onlyOwner\n    {\n        _removeAuthorizedAddressAtIndex(target, index);\n    }\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        override\n        view\n        returns (address[] memory)\n    {\n        return authorities;\n    }\n\n    /// @dev Reverts if msg.sender is not authorized.\n    function _assertSenderIsAuthorized()\n        internal\n        view\n    {\n        if (!authorized[msg.sender]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.SenderNotAuthorizedError(msg.sender));\n        }\n    }\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function _addAuthorizedAddress(address target)\n        internal\n    {\n        // Ensure that the target is not the zero address.\n        if (target == address(0)) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.ZeroCantBeAuthorizedError());\n        }\n\n        // Ensure that the target is not already authorized.\n        if (authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetAlreadyAuthorizedError(target));\n        }\n\n        authorized[target] = true;\n        authorities.push(target);\n        emit AuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function _removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        internal\n    {\n        if (!authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\n        }\n        if (index >= authorities.length) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.IndexOutOfBoundsError(\n                index,\n                authorities.length\n            ));\n        }\n        if (authorities[index] != target) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.AuthorizedAddressMismatchError(\n                authorities[index],\n                target\n            ));\n        }\n\n        delete authorized[target];\n        authorities[index] = authorities[authorities.length - 1];\n        authorities.pop();\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IOwnableV06.sol\";\n\n\ninterface IAuthorizableV06 is\n    IOwnableV06\n{\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n\n    /// @dev Gets all authorized addresses.\n    /// @return authorizedAddresses Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory authorizedAddresses);\n\n    /// @dev Whether an adderss is authorized to call privileged functions.\n    /// @param addr Address to query.\n    /// @return isAuthorized Whether the address is authorized.\n    function authorized(address addr) external view returns (bool isAuthorized);\n\n    /// @dev All addresseses authorized to call privileged functions.\n    /// @param idx Index of authorized address.\n    /// @return addr Authorized address.\n    function authorities(uint256 idx) external view returns (address addr);\n\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/IOwnableV06.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibAuthorizableRichErrorsV06.sol": {
            "id": 10,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibAuthorizableRichErrorsV06 {\n\n    // bytes4(keccak256(\"AuthorizedAddressMismatchError(address,address)\"))\n    bytes4 internal constant AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR =\n        0x140a84db;\n\n    // bytes4(keccak256(\"IndexOutOfBoundsError(uint256,uint256)\"))\n    bytes4 internal constant INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR =\n        0xe9f83771;\n\n    // bytes4(keccak256(\"SenderNotAuthorizedError(address)\"))\n    bytes4 internal constant SENDER_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xb65a25b9;\n\n    // bytes4(keccak256(\"TargetAlreadyAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR =\n        0xde16f1a0;\n\n    // bytes4(keccak256(\"TargetNotAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xeb5108a2;\n\n    // bytes4(keccak256(\"ZeroCantBeAuthorizedError()\"))\n    bytes internal constant ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES =\n        hex\"57654fe4\";\n\n    // solhint-disable func-name-mixedcase\n    function AuthorizedAddressMismatchError(\n        address authorized,\n        address target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR,\n            authorized,\n            target\n        );\n    }\n\n    function IndexOutOfBoundsError(\n        uint256 index,\n        uint256 length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR,\n            index,\n            length\n        );\n    }\n\n    function SenderNotAuthorizedError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SENDER_NOT_AUTHORIZED_ERROR_SELECTOR,\n            sender\n        );\n    }\n\n    function TargetAlreadyAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function TargetNotAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_NOT_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function ZeroCantBeAuthorizedError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/OwnableV06.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./interfaces/IOwnableV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibOwnableRichErrorsV06.sol\";\n\n\ncontract OwnableV06 is\n    IOwnableV06\n{\n    /// @dev The owner of this contract.\n    /// @return 0 The owner address.\n    address public override owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    /// @dev Change the owner of this contract.\n    /// @param newOwner New owner address.\n    function transferOwnership(address newOwner)\n        public\n        override\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.TransferOwnerToZeroError());\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.OnlyOwnerError(\n                msg.sender,\n                owner\n            ));\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrorsV06 {\n\n    // bytes4(keccak256(\"OnlyOwnerError(address,address)\"))\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\n        0x1de45ad1;\n\n    // bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\n        hex\"e69edc3e\";\n\n    // solhint-disable func-name-mixedcase\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_OWNER_ERROR_SELECTOR,\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\n    }\n}\n"
        },
        "../src/vendor/v3/IStaking.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\ninterface IStaking {\n    function joinStakingPoolAsMaker(bytes32) external;\n    function payProtocolFee(address, address, uint256) external payable;\n}\n"
        },
        "../src/external/FeeCollectorController.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../vendor/v3/IStaking.sol\";\nimport \"./FeeCollector.sol\";\nimport \"./LibFeeCollector.sol\";\n\n\n/// @dev A contract that manages `FeeCollector` contracts.\ncontract FeeCollectorController {\n\n    /// @dev Hash of the fee collector init code.\n    bytes32 public immutable FEE_COLLECTOR_INIT_CODE_HASH;\n    /// @dev The WETH contract.\n    IEtherTokenV06 private immutable WETH;\n    /// @dev The staking contract.\n    IStaking private immutable STAKING;\n\n    constructor(\n        IEtherTokenV06 weth,\n        IStaking staking\n    )\n        public\n    {\n        FEE_COLLECTOR_INIT_CODE_HASH = keccak256(type(FeeCollector).creationCode);\n        WETH = weth;\n        STAKING = staking;\n    }\n\n    /// @dev Deploy (if needed) a `FeeCollector` contract for `poolId`\n    ///      and wrap its ETH into WETH. Anyone may call this.\n    /// @param poolId The pool ID associated with the staking pool.\n    /// @return feeCollector The `FeeCollector` contract instance.\n    function prepareFeeCollectorToPayFees(bytes32 poolId)\n        external\n        returns (FeeCollector feeCollector)\n    {\n        feeCollector = getFeeCollector(poolId);\n        uint256 codeSize;\n        assembly {\n            codeSize := extcodesize(feeCollector)\n        }\n\n        if (codeSize == 0) {\n            // Create and initialize the contract if necessary.\n            new FeeCollector{salt: bytes32(poolId)}();\n            feeCollector.initialize(WETH, STAKING, poolId);\n        }\n\n        if (address(feeCollector).balance > 1) {\n            feeCollector.convertToWeth(WETH);\n        }\n\n        return feeCollector;\n    }\n\n    /// @dev Get the `FeeCollector` contract for a given pool ID. The contract\n    ///      will not actually exist until `prepareFeeCollectorToPayFees()`\n    ///      has been called once.\n    /// @param poolId The pool ID associated with the staking pool.\n    /// @return feeCollector The `FeeCollector` contract instance.\n    function getFeeCollector(bytes32 poolId)\n        public\n        view\n        returns (FeeCollector feeCollector)\n    {\n        return FeeCollector(LibFeeCollector.getFeeCollectorAddress(\n            address(this),\n            FEE_COLLECTOR_INIT_CODE_HASH,\n            poolId\n        ));\n    }\n}\n"
        },
        "../src/external/LibFeeCollector.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Helpers for computing `FeeCollector` contract addresses.\nlibrary LibFeeCollector {\n\n    /// @dev Compute the CREATE2 address for a fee collector.\n    /// @param controller The address of the `FeeCollectorController` contract.\n    /// @param initCodeHash The init code hash of the `FeeCollector` contract.\n    /// @param poolId The fee collector's pool ID.\n    function getFeeCollectorAddress(address controller, bytes32 initCodeHash, bytes32 poolId)\n        internal\n        pure\n        returns (address payable feeCollectorAddress)\n    {\n        // Compute the CREATE2 address for the fee collector.\n        return address(uint256(keccak256(abi.encodePacked(\n            byte(0xff),\n            controller,\n            poolId, // pool ID is salt\n            initCodeHash\n        ))));\n    }\n}\n"
        }
    },
    "sourceCodes": {
        "./TestFixinProtocolFees.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"../src/fixins/FixinProtocolFees.sol\";\n\ncontract TestFixinProtocolFees is\n    FixinProtocolFees\n{\n    constructor(\n        IEtherTokenV06 weth,\n        IStaking staking,\n        FeeCollectorController feeCollectorController,\n        uint32 protocolFeeMultiplier\n    )\n        public\n        FixinProtocolFees(weth, staking, feeCollectorController, protocolFeeMultiplier)\n    {\n        // solhint-disalbe no-empty-blocks\n    }\n\n    function collectProtocolFee(bytes32 poolId)\n        external\n        payable\n    {\n        _collectProtocolFee(poolId);\n    }\n\n    function transferFeesForPool(bytes32 poolId)\n        external\n    {\n        _transferFeesForPool(poolId);\n    }\n\n    function getFeeCollector(\n        bytes32 poolId\n    )\n        external\n        view\n        returns (FeeCollector)\n    {\n        return _getFeeCollector(poolId);\n    }\n\n    function getSingleProtocolFee()\n        external\n        view\n        returns (uint256 protocolFeeAmount)\n    {\n        return _getSingleProtocolFee();\n    }\n}\n",
        "../src/fixins/FixinProtocolFees.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../external/FeeCollector.sol\";\nimport \"../external/FeeCollectorController.sol\";\nimport \"../external/LibFeeCollector.sol\";\nimport \"../vendor/v3/IStaking.sol\";\n\n\n/// @dev Helpers for collecting protocol fees.\nabstract contract FixinProtocolFees {\n\n    /// @dev The protocol fee multiplier.\n    uint32 public immutable PROTOCOL_FEE_MULTIPLIER;\n    /// @dev The `FeeCollectorController` contract.\n    FeeCollectorController private immutable FEE_COLLECTOR_CONTROLLER;\n    /// @dev Hash of the fee collector init code.\n    bytes32 private immutable FEE_COLLECTOR_INIT_CODE_HASH;\n    /// @dev The WETH token contract.\n    IEtherTokenV06 private immutable WETH;\n    /// @dev The staking contract.\n    IStaking private immutable STAKING;\n\n    constructor(\n        IEtherTokenV06 weth,\n        IStaking staking,\n        FeeCollectorController feeCollectorController,\n        uint32 protocolFeeMultiplier\n    )\n        internal\n    {\n        FEE_COLLECTOR_CONTROLLER = feeCollectorController;\n        FEE_COLLECTOR_INIT_CODE_HASH =\n            feeCollectorController.FEE_COLLECTOR_INIT_CODE_HASH();\n        WETH = weth;\n        STAKING = staking;\n        PROTOCOL_FEE_MULTIPLIER = protocolFeeMultiplier;\n    }\n\n    /// @dev   Collect the specified protocol fee in ETH.\n    ///        The fee is stored in a per-pool fee collector contract.\n    /// @param poolId The pool ID for which a fee is being collected.\n    /// @return ethProtocolFeePaid How much protocol fee was collected in ETH.\n    function _collectProtocolFee(bytes32 poolId)\n        internal\n        returns (uint256 ethProtocolFeePaid)\n    {\n        uint256 protocolFeePaid = _getSingleProtocolFee();\n        if (protocolFeePaid == 0) {\n            // Nothing to do.\n            return 0;\n        }\n        FeeCollector feeCollector = _getFeeCollector(poolId);\n        (bool success,) = address(feeCollector).call{value: protocolFeePaid}(\"\");\n        require(success, \"FixinProtocolFees/ETHER_TRANSFER_FALIED\");\n        return protocolFeePaid;\n    }\n\n    /// @dev Transfer fees for a given pool to the staking contract.\n    /// @param poolId Identifies the pool whose fees are being paid.\n    function _transferFeesForPool(bytes32 poolId)\n        internal\n    {\n        // This will create a FeeCollector contract (if necessary) and wrap\n        // fees for the pool ID.\n        FeeCollector feeCollector =\n            FEE_COLLECTOR_CONTROLLER.prepareFeeCollectorToPayFees(poolId);\n        // All fees in the fee collector should be in WETH now.\n        uint256 bal = WETH.balanceOf(address(feeCollector));\n        if (bal > 1) {\n            // Leave 1 wei behind to avoid high SSTORE cost of zero-->non-zero.\n            STAKING.payProtocolFee(\n                address(feeCollector),\n                address(feeCollector),\n                bal - 1);\n        }\n    }\n\n    /// @dev Compute the CREATE2 address for a fee collector.\n    /// @param poolId The fee collector's pool ID.\n    function _getFeeCollector(bytes32 poolId)\n        internal\n        view\n        returns (FeeCollector)\n    {\n        return FeeCollector(LibFeeCollector.getFeeCollectorAddress(\n            address(FEE_COLLECTOR_CONTROLLER),\n            FEE_COLLECTOR_INIT_CODE_HASH,\n            poolId\n        ));\n    }\n\n    /// @dev Get the cost of a single protocol fee.\n    /// @return protocolFeeAmount The protocol fee amount, in ETH/WETH.\n    function _getSingleProtocolFee()\n        internal\n        view\n        returns (uint256 protocolFeeAmount)\n    {\n        return uint256(PROTOCOL_FEE_MULTIPLIER) * tx.gasprice;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "../src/external/FeeCollector.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol\";\nimport \"../vendor/v3/IStaking.sol\";\n\n/// @dev The collector contract for protocol fees\ncontract FeeCollector is AuthorizableV06 {\n    /// @dev Allow ether transfers to the collector.\n    receive() external payable { }\n\n    constructor() public {\n        _addAuthorizedAddress(msg.sender);\n    }\n\n    /// @dev   Approve the staking contract and join a pool. Only an authority\n    ///        can call this.\n    /// @param weth The WETH contract.\n    /// @param staking The staking contract.\n    /// @param poolId The pool ID this contract is collecting fees for.\n    function initialize(\n        IEtherTokenV06 weth,\n        IStaking staking,\n        bytes32 poolId\n    )\n        external\n        onlyAuthorized\n    {\n        weth.approve(address(staking), type(uint256).max);\n        staking.joinStakingPoolAsMaker(poolId);\n    }\n\n    /// @dev Convert all held ether to WETH. Only an authority can call this.\n    /// @param weth The WETH contract.\n    function convertToWeth(\n        IEtherTokenV06 weth\n    )\n        external\n        onlyAuthorized\n    {\n        if (address(this).balance > 0) {\n            weth.deposit{value: address(this).balance}();\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./interfaces/IAuthorizableV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibAuthorizableRichErrorsV06.sol\";\nimport \"./OwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract AuthorizableV06 is\n    OwnableV06,\n    IAuthorizableV06\n{\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        _assertSenderIsAuthorized();\n        _;\n    }\n\n    // @dev Whether an address is authorized to call privileged functions.\n    // @param 0 Address to query.\n    // @return 0 Whether the address is authorized.\n    mapping (address => bool) public override authorized;\n    // @dev Whether an address is authorized to call privileged functions.\n    // @param 0 Index of authorized address.\n    // @return 0 Authorized address.\n    address[] public override authorities;\n\n    /// @dev Initializes the `owner` address.\n    constructor()\n        public\n        OwnableV06()\n    {}\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        _addAuthorizedAddress(target);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        if (!authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\n        }\n        for (uint256 i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                _removeAuthorizedAddressAtIndex(target, i);\n                break;\n            }\n        }\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        override\n        onlyOwner\n    {\n        _removeAuthorizedAddressAtIndex(target, index);\n    }\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        override\n        view\n        returns (address[] memory)\n    {\n        return authorities;\n    }\n\n    /// @dev Reverts if msg.sender is not authorized.\n    function _assertSenderIsAuthorized()\n        internal\n        view\n    {\n        if (!authorized[msg.sender]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.SenderNotAuthorizedError(msg.sender));\n        }\n    }\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function _addAuthorizedAddress(address target)\n        internal\n    {\n        // Ensure that the target is not the zero address.\n        if (target == address(0)) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.ZeroCantBeAuthorizedError());\n        }\n\n        // Ensure that the target is not already authorized.\n        if (authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetAlreadyAuthorizedError(target));\n        }\n\n        authorized[target] = true;\n        authorities.push(target);\n        emit AuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function _removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        internal\n    {\n        if (!authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\n        }\n        if (index >= authorities.length) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.IndexOutOfBoundsError(\n                index,\n                authorities.length\n            ));\n        }\n        if (authorities[index] != target) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.AuthorizedAddressMismatchError(\n                authorities[index],\n                target\n            ));\n        }\n\n        delete authorized[target];\n        authorities[index] = authorities[authorities.length - 1];\n        authorities.pop();\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IOwnableV06.sol\";\n\n\ninterface IAuthorizableV06 is\n    IOwnableV06\n{\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n\n    /// @dev Gets all authorized addresses.\n    /// @return authorizedAddresses Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory authorizedAddresses);\n\n    /// @dev Whether an adderss is authorized to call privileged functions.\n    /// @param addr Address to query.\n    /// @return isAuthorized Whether the address is authorized.\n    function authorized(address addr) external view returns (bool isAuthorized);\n\n    /// @dev All addresseses authorized to call privileged functions.\n    /// @param idx Index of authorized address.\n    /// @return addr Authorized address.\n    function authorities(uint256 idx) external view returns (address addr);\n\n}\n",
        "@0x/contracts-utils/contracts/src/v06/IOwnableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibAuthorizableRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibAuthorizableRichErrorsV06 {\n\n    // bytes4(keccak256(\"AuthorizedAddressMismatchError(address,address)\"))\n    bytes4 internal constant AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR =\n        0x140a84db;\n\n    // bytes4(keccak256(\"IndexOutOfBoundsError(uint256,uint256)\"))\n    bytes4 internal constant INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR =\n        0xe9f83771;\n\n    // bytes4(keccak256(\"SenderNotAuthorizedError(address)\"))\n    bytes4 internal constant SENDER_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xb65a25b9;\n\n    // bytes4(keccak256(\"TargetAlreadyAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR =\n        0xde16f1a0;\n\n    // bytes4(keccak256(\"TargetNotAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xeb5108a2;\n\n    // bytes4(keccak256(\"ZeroCantBeAuthorizedError()\"))\n    bytes internal constant ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES =\n        hex\"57654fe4\";\n\n    // solhint-disable func-name-mixedcase\n    function AuthorizedAddressMismatchError(\n        address authorized,\n        address target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR,\n            authorized,\n            target\n        );\n    }\n\n    function IndexOutOfBoundsError(\n        uint256 index,\n        uint256 length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR,\n            index,\n            length\n        );\n    }\n\n    function SenderNotAuthorizedError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SENDER_NOT_AUTHORIZED_ERROR_SELECTOR,\n            sender\n        );\n    }\n\n    function TargetAlreadyAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function TargetNotAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_NOT_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function ZeroCantBeAuthorizedError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/OwnableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./interfaces/IOwnableV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibOwnableRichErrorsV06.sol\";\n\n\ncontract OwnableV06 is\n    IOwnableV06\n{\n    /// @dev The owner of this contract.\n    /// @return 0 The owner address.\n    address public override owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    /// @dev Change the owner of this contract.\n    /// @param newOwner New owner address.\n    function transferOwnership(address newOwner)\n        public\n        override\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.TransferOwnerToZeroError());\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.OnlyOwnerError(\n                msg.sender,\n                owner\n            ));\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrorsV06 {\n\n    // bytes4(keccak256(\"OnlyOwnerError(address,address)\"))\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\n        0x1de45ad1;\n\n    // bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\n        hex\"e69edc3e\";\n\n    // solhint-disable func-name-mixedcase\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_OWNER_ERROR_SELECTOR,\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\n    }\n}\n",
        "../src/vendor/v3/IStaking.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\ninterface IStaking {\n    function joinStakingPoolAsMaker(bytes32) external;\n    function payProtocolFee(address, address, uint256) external payable;\n}\n",
        "../src/external/FeeCollectorController.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../vendor/v3/IStaking.sol\";\nimport \"./FeeCollector.sol\";\nimport \"./LibFeeCollector.sol\";\n\n\n/// @dev A contract that manages `FeeCollector` contracts.\ncontract FeeCollectorController {\n\n    /// @dev Hash of the fee collector init code.\n    bytes32 public immutable FEE_COLLECTOR_INIT_CODE_HASH;\n    /// @dev The WETH contract.\n    IEtherTokenV06 private immutable WETH;\n    /// @dev The staking contract.\n    IStaking private immutable STAKING;\n\n    constructor(\n        IEtherTokenV06 weth,\n        IStaking staking\n    )\n        public\n    {\n        FEE_COLLECTOR_INIT_CODE_HASH = keccak256(type(FeeCollector).creationCode);\n        WETH = weth;\n        STAKING = staking;\n    }\n\n    /// @dev Deploy (if needed) a `FeeCollector` contract for `poolId`\n    ///      and wrap its ETH into WETH. Anyone may call this.\n    /// @param poolId The pool ID associated with the staking pool.\n    /// @return feeCollector The `FeeCollector` contract instance.\n    function prepareFeeCollectorToPayFees(bytes32 poolId)\n        external\n        returns (FeeCollector feeCollector)\n    {\n        feeCollector = getFeeCollector(poolId);\n        uint256 codeSize;\n        assembly {\n            codeSize := extcodesize(feeCollector)\n        }\n\n        if (codeSize == 0) {\n            // Create and initialize the contract if necessary.\n            new FeeCollector{salt: bytes32(poolId)}();\n            feeCollector.initialize(WETH, STAKING, poolId);\n        }\n\n        if (address(feeCollector).balance > 1) {\n            feeCollector.convertToWeth(WETH);\n        }\n\n        return feeCollector;\n    }\n\n    /// @dev Get the `FeeCollector` contract for a given pool ID. The contract\n    ///      will not actually exist until `prepareFeeCollectorToPayFees()`\n    ///      has been called once.\n    /// @param poolId The pool ID associated with the staking pool.\n    /// @return feeCollector The `FeeCollector` contract instance.\n    function getFeeCollector(bytes32 poolId)\n        public\n        view\n        returns (FeeCollector feeCollector)\n    {\n        return FeeCollector(LibFeeCollector.getFeeCollectorAddress(\n            address(this),\n            FEE_COLLECTOR_INIT_CODE_HASH,\n            poolId\n        ));\n    }\n}\n",
        "../src/external/LibFeeCollector.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Helpers for computing `FeeCollector` contract addresses.\nlibrary LibFeeCollector {\n\n    /// @dev Compute the CREATE2 address for a fee collector.\n    /// @param controller The address of the `FeeCollectorController` contract.\n    /// @param initCodeHash The init code hash of the `FeeCollector` contract.\n    /// @param poolId The fee collector's pool ID.\n    function getFeeCollectorAddress(address controller, bytes32 initCodeHash, bytes32 poolId)\n        internal\n        pure\n        returns (address payable feeCollectorAddress)\n    {\n        // Compute the CREATE2 address for the fee collector.\n        return address(uint256(keccak256(abi.encodePacked(\n            byte(0xff),\n            controller,\n            poolId, // pool ID is salt\n            initCodeHash\n        ))));\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/michaelzhu/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap",
                        "evm.methodIdentifiers"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
