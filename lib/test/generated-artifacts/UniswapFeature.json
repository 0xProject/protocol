{
    "schemaVersion": "2.0.0",
    "contractName": "UniswapFeature",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "contract IEtherTokenV06",
                        "name": "weth",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IAllowanceTarget",
                        "name": "allowanceTarget",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "greedyTokensBloomFilter",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "inputs": [],
                "name": "FEATURE_NAME",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FEATURE_VERSION",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "GREEDY_TOKENS_BLOOM_FILTER",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "migrate",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minBuyAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bool",
                        "name": "isSushi",
                        "type": "bool"
                    }
                ],
                "name": "sellToUniswap",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            }
        ],
        "devdoc": {
            "details": "VIP uniswap fill functions.",
            "kind": "dev",
            "methods": {
                "constructor": {
                    "details": "Construct this contract.",
                    "params": {
                        "allowanceTarget": "The AllowanceTarget contract.",
                        "greedyTokensBloomFilter": "The bloom filter for greedy tokens.",
                        "weth": "The WETH contract."
                    }
                },
                "migrate()": {
                    "details": "Initialize and register this feature.      Should be delegatecalled by `Migrate.migrate()`.",
                    "returns": {
                        "success": "`LibMigrate.SUCCESS` on success."
                    }
                },
                "sellToUniswap(address[],uint256,uint256,bool)": {
                    "details": "Efficiently sell directly to uniswap/sushiswap.",
                    "params": {
                        "isSushi": "Use sushiswap if true.",
                        "minBuyAmount": "Minimum amount of `tokens[-1]` to buy.",
                        "sellAmount": "of `tokens[0]` Amount to sell.",
                        "tokens": "Sell path."
                    },
                    "returns": {
                        "buyAmount": "Amount of `tokens[-1]` bought."
                    }
                }
            },
            "stateVariables": {
                "ALLOWANCE_TARGET": {
                    "details": "AllowanceTarget instance."
                },
                "FEATURE_NAME": {
                    "details": "Name of this feature."
                },
                "FEATURE_VERSION": {
                    "details": "Version of this feature."
                },
                "GREEDY_TOKENS_BLOOM_FILTER": {
                    "details": "A bloom filter for tokens that consume all gas when `transferFrom()` fails."
                },
                "WETH": {
                    "details": "WETH contract."
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x6101206040526100116001808061006b565b60a05234801561002057600080fd5b50604051610d59380380610d5983398101604081905261003f9161009d565b30606090811b60805292831b6001600160601b031990811660e0529190921b166101005260c0526100f7565b6bffffffff0000000000000000604084901b1667ffffffff00000000602084901b161763ffffffff8216179392505050565b6000806000606084860312156100b1578283fd5b83516100bc816100df565b60208501519093506100cd816100df565b80925050604084015190509250925092565b6001600160a01b03811681146100f457600080fd5b50565b60805160601c60a05160c05160e05160601c6101005160601c610c16610143600039806102465250806102215250806101a5528061026b52508060f85250806109685250610c166000f3fe60806040526004361061005a5760003560e01c80638fd3ab80116100435780638fd3ab80146100ac578063d925a56d146100ce578063d9627aa4146100e35761005a565b8063031b905c1461005f5780636ae4b4f71461008a575b600080fd5b34801561006b57600080fd5b506100746100f6565b6040516100819190610a5d565b60405180910390f35b34801561009657600080fd5b5061009f61011a565b6040516100819190610adb565b3480156100b857600080fd5b506100c1610153565b6040516100819190610a66565b3480156100da57600080fd5b506100746101a3565b6100746100f13660046109c5565b6101c7565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600e81526020017f556e69737761704665617475726500000000000000000000000000000000000081525081565b600061017e7fd9627aa400000000000000000000000000000000000000000000000000000000610932565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006001851161020c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020390610b4c565b60405180910390fd5b506004803560248101610a0052610a208390527f0000000000000000000000000000000000000000000000000000000000000000610a40527f0000000000000000000000000000000000000000000000000000000000000000610a60527f0000000000000000000000000000000000000000000000000000000000000000610a805284917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91013501600080805b8381101561055e576102cb816105e1565b6102d7600183016105e1565b93506102e284610606565b6102eb82610606565b108380610303576102fc868461062e565b9050600094505b836103d95773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee831480156103c1578b341461033157600080fd5b610a405193507fd0e30db000000000000000000000000000000000000000000000000000000000610b00526000806004610b008f885af161037457610374610743565b7fa9059cbb00000000000000000000000000000000000000000000000000000000610b005281610b04528b610b24526000806044610b006000885af16103bc576103bc610743565b6103d7565b34156103cc57600080fd5b6103d78c838661074d565b505b7f0902f1ac00000000000000000000000000000000000000000000000000000000610b00526040610c006004610b00845afa61041757610417610743565b60403d101561042557600080fd5b8792506000808315801561044457610c20519250610c00519150610451565b610c00519250610c205191505b506e01000000000000000000000000000085111561046e57600080fd5b6103e585026103e883028101828202049a5050505060009250866001850114600081146104c45773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee871480156104ba573094506104be565b3394505b506104df565b6104d96104d3600287016105e1565b8861062e565b95508593505b507f022c0d9f00000000000000000000000000000000000000000000000000000000610b005281801561051c576000610b045288610b2452610528565b88610b04526000610b24525b5082610b44526080610b64526000610b845260008060a4610b006000855af161055357610553610743565b5050506001016102ba565b505073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8114156105da577f2e1a7d4d00000000000000000000000000000000000000000000000000000000610b005282610b04526000806024610b006000610a40515af16105c2576105c2610743565b6000806000610b0086335af16105da576105da610743565b50506108ef565b610a005173ffffffffffffffffffffffffffffffffffffffff60209290920201351690565b8073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8114156106295750610a40515b919050565b600061063982610606565b915061064483610606565b9250828210801561065e5783610b145282610b0052610669565b82610b145283610b00525b506028610b0c20610a205180156106ce577fffc0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac0000000000000000000000610b005281610b15527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303610b355261071e565b7fff5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000610b005281610b15527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f610b35525b50506055610b002073ffffffffffffffffffffffffffffffffffffffff169392505050565b3d6000803e3d6000fd5b610756816108c4565b156107ce577fdd62ed3e00000000000000000000000000000000000000000000000000000000610b005233610b045230610b24526020610c006044610b00845afa806107a4576107a4610743565b5060203d10156107b357600080fd5b82610c005110156107ce576107c983838361083e565b610839565b7f23b872dd00000000000000000000000000000000000000000000000000000000610b005233610b045281610b245282610b44526020610c006064610b006000855af13d6001610c0051146020821015168115178216915050806108375761083784848461083e565b505b505050565b7fbca8c7b500000000000000000000000000000000000000000000000000000000610b005280610b04526040610b24526064610b44527f23b872dd00000000000000000000000000000000000000000000000000000000610b645233610b685281610b885282610ba85260008060c8610b006000610a60515af161083957610839610743565b600081600052600161010083061b60016101006020600020061b1780610a8051821614915050919050565b82811015610929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020390610ba9565b95945050505050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb906109909084907f000000000000000000000000000000000000000000000000000000000000000090600401610a93565b600060405180830381600087803b1580156109aa57600080fd5b505af11580156109be573d6000803e3d6000fd5b5050505050565b6000806000806000608086880312156109dc578081fd5b853567ffffffffffffffff808211156109f3578283fd5b818801915088601f830112610a06578283fd5b813581811115610a14578384fd5b8960208083028501011115610a27578384fd5b6020928301975095505086013592506040860135915060608601358015158114610a4f578182fd5b809150509295509295909350565b90815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b6000602080835283518082850152825b81811015610b0757858101830151858201604001528201610aeb565b81811115610b185783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526022908201527f556e6973776170466561747572652f496e76616c6964546f6b656e734c656e6760408201527f7468000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f556e6973776170466561747572652f556e646572426f7567687400000000000060408201526060019056fea2646970667358221220f1e6b806918be3e90643bb0dfce612e29e7d369ede1c1aa524e03f5c60d4f20864736f6c634300060c0033",
                "opcodes": "PUSH2 0x120 PUSH1 0x40 MSTORE PUSH2 0x11 PUSH1 0x1 DUP1 DUP1 PUSH2 0x6B JUMP JUMPDEST PUSH1 0xA0 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xD59 CODESIZE SUB DUP1 PUSH2 0xD59 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x3F SWAP2 PUSH2 0x9D JUMP JUMPDEST ADDRESS PUSH1 0x60 SWAP1 DUP2 SHL PUSH1 0x80 MSTORE SWAP3 DUP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0xE0 MSTORE SWAP2 SWAP1 SWAP3 SHL AND PUSH2 0x100 MSTORE PUSH1 0xC0 MSTORE PUSH2 0xF7 JUMP JUMPDEST PUSH12 0xFFFFFFFF0000000000000000 PUSH1 0x40 DUP5 SWAP1 SHL AND PUSH8 0xFFFFFFFF00000000 PUSH1 0x20 DUP5 SWAP1 SHL AND OR PUSH4 0xFFFFFFFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 MLOAD PUSH2 0xBC DUP2 PUSH2 0xDF JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0xCD DUP2 PUSH2 0xDF JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH1 0x60 SHR PUSH2 0x100 MLOAD PUSH1 0x60 SHR PUSH2 0xC16 PUSH2 0x143 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x246 MSTORE POP DUP1 PUSH2 0x221 MSTORE POP DUP1 PUSH2 0x1A5 MSTORE DUP1 PUSH2 0x26B MSTORE POP DUP1 PUSH1 0xF8 MSTORE POP DUP1 PUSH2 0x968 MSTORE POP PUSH2 0xC16 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x5A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8FD3AB80 GT PUSH2 0x43 JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0xD925A56D EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0xD9627AA4 EQ PUSH2 0xE3 JUMPI PUSH2 0x5A JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0x5F JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x8A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x74 PUSH2 0xF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0xA5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9F PUSH2 0x11A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0xADB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x153 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0xA66 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x74 PUSH2 0x1A3 JUMP JUMPDEST PUSH2 0x74 PUSH2 0xF1 CALLDATASIZE PUSH1 0x4 PUSH2 0x9C5 JUMP JUMPDEST PUSH2 0x1C7 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x556E697377617046656174757265000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17E PUSH32 0xD9627AA400000000000000000000000000000000000000000000000000000000 PUSH2 0x932 JUMP JUMPDEST POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP6 GT PUSH2 0x20C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x203 SWAP1 PUSH2 0xB4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x4 DUP1 CALLDATALOAD PUSH1 0x24 DUP2 ADD PUSH2 0xA00 MSTORE PUSH2 0xA20 DUP4 SWAP1 MSTORE PUSH32 0x0 PUSH2 0xA40 MSTORE PUSH32 0x0 PUSH2 0xA60 MSTORE PUSH32 0x0 PUSH2 0xA80 MSTORE DUP5 SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 ADD CALLDATALOAD ADD PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x55E JUMPI PUSH2 0x2CB DUP2 PUSH2 0x5E1 JUMP JUMPDEST PUSH2 0x2D7 PUSH1 0x1 DUP4 ADD PUSH2 0x5E1 JUMP JUMPDEST SWAP4 POP PUSH2 0x2E2 DUP5 PUSH2 0x606 JUMP JUMPDEST PUSH2 0x2EB DUP3 PUSH2 0x606 JUMP JUMPDEST LT DUP4 DUP1 PUSH2 0x303 JUMPI PUSH2 0x2FC DUP7 DUP5 PUSH2 0x62E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP5 POP JUMPDEST DUP4 PUSH2 0x3D9 JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP4 EQ DUP1 ISZERO PUSH2 0x3C1 JUMPI DUP12 CALLVALUE EQ PUSH2 0x331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA40 MLOAD SWAP4 POP PUSH32 0xD0E30DB000000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE PUSH1 0x0 DUP1 PUSH1 0x4 PUSH2 0xB00 DUP16 DUP9 GAS CALL PUSH2 0x374 JUMPI PUSH2 0x374 PUSH2 0x743 JUMP JUMPDEST PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE DUP2 PUSH2 0xB04 MSTORE DUP12 PUSH2 0xB24 MSTORE PUSH1 0x0 DUP1 PUSH1 0x44 PUSH2 0xB00 PUSH1 0x0 DUP9 GAS CALL PUSH2 0x3BC JUMPI PUSH2 0x3BC PUSH2 0x743 JUMP JUMPDEST PUSH2 0x3D7 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D7 DUP13 DUP4 DUP7 PUSH2 0x74D JUMP JUMPDEST POP JUMPDEST PUSH32 0x902F1AC00000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE PUSH1 0x40 PUSH2 0xC00 PUSH1 0x4 PUSH2 0xB00 DUP5 GAS STATICCALL PUSH2 0x417 JUMPI PUSH2 0x417 PUSH2 0x743 JUMP JUMPDEST PUSH1 0x40 RETURNDATASIZE LT ISZERO PUSH2 0x425 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 SWAP3 POP PUSH1 0x0 DUP1 DUP4 ISZERO DUP1 ISZERO PUSH2 0x444 JUMPI PUSH2 0xC20 MLOAD SWAP3 POP PUSH2 0xC00 MLOAD SWAP2 POP PUSH2 0x451 JUMP JUMPDEST PUSH2 0xC00 MLOAD SWAP3 POP PUSH2 0xC20 MLOAD SWAP2 POP JUMPDEST POP PUSH15 0x10000000000000000000000000000 DUP6 GT ISZERO PUSH2 0x46E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E5 DUP6 MUL PUSH2 0x3E8 DUP4 MUL DUP2 ADD DUP3 DUP3 MUL DIV SWAP11 POP POP POP POP PUSH1 0x0 SWAP3 POP DUP7 PUSH1 0x1 DUP6 ADD EQ PUSH1 0x0 DUP2 EQ PUSH2 0x4C4 JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP8 EQ DUP1 ISZERO PUSH2 0x4BA JUMPI ADDRESS SWAP5 POP PUSH2 0x4BE JUMP JUMPDEST CALLER SWAP5 POP JUMPDEST POP PUSH2 0x4DF JUMP JUMPDEST PUSH2 0x4D9 PUSH2 0x4D3 PUSH1 0x2 DUP8 ADD PUSH2 0x5E1 JUMP JUMPDEST DUP9 PUSH2 0x62E JUMP JUMPDEST SWAP6 POP DUP6 SWAP4 POP JUMPDEST POP PUSH32 0x22C0D9F00000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE DUP2 DUP1 ISZERO PUSH2 0x51C JUMPI PUSH1 0x0 PUSH2 0xB04 MSTORE DUP9 PUSH2 0xB24 MSTORE PUSH2 0x528 JUMP JUMPDEST DUP9 PUSH2 0xB04 MSTORE PUSH1 0x0 PUSH2 0xB24 MSTORE JUMPDEST POP DUP3 PUSH2 0xB44 MSTORE PUSH1 0x80 PUSH2 0xB64 MSTORE PUSH1 0x0 PUSH2 0xB84 MSTORE PUSH1 0x0 DUP1 PUSH1 0xA4 PUSH2 0xB00 PUSH1 0x0 DUP6 GAS CALL PUSH2 0x553 JUMPI PUSH2 0x553 PUSH2 0x743 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x2BA JUMP JUMPDEST POP POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 EQ ISZERO PUSH2 0x5DA JUMPI PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE DUP3 PUSH2 0xB04 MSTORE PUSH1 0x0 DUP1 PUSH1 0x24 PUSH2 0xB00 PUSH1 0x0 PUSH2 0xA40 MLOAD GAS CALL PUSH2 0x5C2 JUMPI PUSH2 0x5C2 PUSH2 0x743 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB00 DUP7 CALLER GAS CALL PUSH2 0x5DA JUMPI PUSH2 0x5DA PUSH2 0x743 JUMP JUMPDEST POP POP PUSH2 0x8EF JUMP JUMPDEST PUSH2 0xA00 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 SWAP3 SWAP1 SWAP3 MUL ADD CALLDATALOAD AND SWAP1 JUMP JUMPDEST DUP1 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 EQ ISZERO PUSH2 0x629 JUMPI POP PUSH2 0xA40 MLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x639 DUP3 PUSH2 0x606 JUMP JUMPDEST SWAP2 POP PUSH2 0x644 DUP4 PUSH2 0x606 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT DUP1 ISZERO PUSH2 0x65E JUMPI DUP4 PUSH2 0xB14 MSTORE DUP3 PUSH2 0xB00 MSTORE PUSH2 0x669 JUMP JUMPDEST DUP3 PUSH2 0xB14 MSTORE DUP4 PUSH2 0xB00 MSTORE JUMPDEST POP PUSH1 0x28 PUSH2 0xB0C KECCAK256 PUSH2 0xA20 MLOAD DUP1 ISZERO PUSH2 0x6CE JUMPI PUSH32 0xFFC0AEE478E3658E2610C5F7A4A2E1777CE9E4F2AC0000000000000000000000 PUSH2 0xB00 MSTORE DUP2 PUSH2 0xB15 MSTORE PUSH32 0xE18A34EB0E04B04F7A0AC29A6E80748DCA96319B42C54D679CB821DCA90C6303 PUSH2 0xB35 MSTORE PUSH2 0x71E JUMP JUMPDEST PUSH32 0xFF5C69BEE701EF814A2B6A3EDD4B1652CB9CC5AA6F0000000000000000000000 PUSH2 0xB00 MSTORE DUP2 PUSH2 0xB15 MSTORE PUSH32 0x96E8AC4277198FF8B6F785478AA9A39F403CB768DD02CBEE326C3E7DA348845F PUSH2 0xB35 MSTORE JUMPDEST POP POP PUSH1 0x55 PUSH2 0xB00 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x756 DUP2 PUSH2 0x8C4 JUMP JUMPDEST ISZERO PUSH2 0x7CE JUMPI PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE CALLER PUSH2 0xB04 MSTORE ADDRESS PUSH2 0xB24 MSTORE PUSH1 0x20 PUSH2 0xC00 PUSH1 0x44 PUSH2 0xB00 DUP5 GAS STATICCALL DUP1 PUSH2 0x7A4 JUMPI PUSH2 0x7A4 PUSH2 0x743 JUMP JUMPDEST POP PUSH1 0x20 RETURNDATASIZE LT ISZERO PUSH2 0x7B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH2 0xC00 MLOAD LT ISZERO PUSH2 0x7CE JUMPI PUSH2 0x7C9 DUP4 DUP4 DUP4 PUSH2 0x83E JUMP JUMPDEST PUSH2 0x839 JUMP JUMPDEST PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE CALLER PUSH2 0xB04 MSTORE DUP2 PUSH2 0xB24 MSTORE DUP3 PUSH2 0xB44 MSTORE PUSH1 0x20 PUSH2 0xC00 PUSH1 0x64 PUSH2 0xB00 PUSH1 0x0 DUP6 GAS CALL RETURNDATASIZE PUSH1 0x1 PUSH2 0xC00 MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP3 AND SWAP2 POP POP DUP1 PUSH2 0x837 JUMPI PUSH2 0x837 DUP5 DUP5 DUP5 PUSH2 0x83E JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0xBCA8C7B500000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE DUP1 PUSH2 0xB04 MSTORE PUSH1 0x40 PUSH2 0xB24 MSTORE PUSH1 0x64 PUSH2 0xB44 MSTORE PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 PUSH2 0xB64 MSTORE CALLER PUSH2 0xB68 MSTORE DUP2 PUSH2 0xB88 MSTORE DUP3 PUSH2 0xBA8 MSTORE PUSH1 0x0 DUP1 PUSH1 0xC8 PUSH2 0xB00 PUSH1 0x0 PUSH2 0xA60 MLOAD GAS CALL PUSH2 0x839 JUMPI PUSH2 0x839 PUSH2 0x743 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH2 0x100 DUP4 MOD SHL PUSH1 0x1 PUSH2 0x100 PUSH1 0x20 PUSH1 0x0 KECCAK256 MOD SHL OR DUP1 PUSH2 0xA80 MLOAD DUP3 AND EQ SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x929 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x203 SWAP1 PUSH2 0xBA9 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x990 SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0xA93 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9DC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x9F3 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA06 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xA14 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0xA27 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP8 POP SWAP6 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA4F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB07 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xAEB JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xB18 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170466561747572652F496E76616C6964546F6B656E734C656E67 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7468000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170466561747572652F556E646572426F75676874000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0xE6 0xB8 MOD SWAP2 DUP12 0xE3 0xE9 MOD NUMBER 0xBB 0xD 0xFC 0xE6 SLT 0xE2 SWAP15 PUSH30 0x369EDE1C1AA524E03F5C60D4F20864736F6C634300060C00330000000000 ",
                "sourceMap": "1048:21157:3:-:0;;;1326:23;1341:1;;;1326:14;:23::i;:::-;1274:75;;4553:271;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1920:4:8;1894:31;;;;;;4700:11:3;;;-1:-1:-1;;;;;;4700:11:3;;;;;4721:34;;;;;;;4765:52;;1048:21157;;2672:235:8;2834:20;2852:2;2834:20;;;;2859;2877:2;2859:20;;;;2833:47;2883:17;;;2833:67;2672:235;;;;;:::o;520:627:-1:-;;;;715:2;703:9;694:7;690:23;686:32;683:2;;;-1:-1;;721:12;683:2;441:6;435:13;453:55;502:5;453:55;:::i;:::-;906:2;980:22;;248:13;773:96;;-1:-1;266:57;248:13;266:57;:::i;:::-;914:98;;;;1049:2;1103:9;1099:22;83:13;1057:74;;677:470;;;;;:::o;1825:165::-;-1:-1;;;;;1635:54;;1908:59;;1898:2;;1981:1;;1971:12;1898:2;1892:98;:::o;:::-;1048:21157:3;;;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "155": [
                        {
                            "length": 32,
                            "start": 248
                        }
                    ],
                    "158": [
                        {
                            "length": 32,
                            "start": 421
                        },
                        {
                            "length": 32,
                            "start": 619
                        }
                    ],
                    "161": [
                        {
                            "length": 32,
                            "start": 545
                        }
                    ],
                    "164": [
                        {
                            "length": 32,
                            "start": 582
                        }
                    ],
                    "426": [
                        {
                            "length": 32,
                            "start": 2408
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x60806040526004361061005a5760003560e01c80638fd3ab80116100435780638fd3ab80146100ac578063d925a56d146100ce578063d9627aa4146100e35761005a565b8063031b905c1461005f5780636ae4b4f71461008a575b600080fd5b34801561006b57600080fd5b506100746100f6565b6040516100819190610a5d565b60405180910390f35b34801561009657600080fd5b5061009f61011a565b6040516100819190610adb565b3480156100b857600080fd5b506100c1610153565b6040516100819190610a66565b3480156100da57600080fd5b506100746101a3565b6100746100f13660046109c5565b6101c7565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600e81526020017f556e69737761704665617475726500000000000000000000000000000000000081525081565b600061017e7fd9627aa400000000000000000000000000000000000000000000000000000000610932565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006001851161020c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020390610b4c565b60405180910390fd5b506004803560248101610a0052610a208390527f0000000000000000000000000000000000000000000000000000000000000000610a40527f0000000000000000000000000000000000000000000000000000000000000000610a60527f0000000000000000000000000000000000000000000000000000000000000000610a805284917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91013501600080805b8381101561055e576102cb816105e1565b6102d7600183016105e1565b93506102e284610606565b6102eb82610606565b108380610303576102fc868461062e565b9050600094505b836103d95773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee831480156103c1578b341461033157600080fd5b610a405193507fd0e30db000000000000000000000000000000000000000000000000000000000610b00526000806004610b008f885af161037457610374610743565b7fa9059cbb00000000000000000000000000000000000000000000000000000000610b005281610b04528b610b24526000806044610b006000885af16103bc576103bc610743565b6103d7565b34156103cc57600080fd5b6103d78c838661074d565b505b7f0902f1ac00000000000000000000000000000000000000000000000000000000610b00526040610c006004610b00845afa61041757610417610743565b60403d101561042557600080fd5b8792506000808315801561044457610c20519250610c00519150610451565b610c00519250610c205191505b506e01000000000000000000000000000085111561046e57600080fd5b6103e585026103e883028101828202049a5050505060009250866001850114600081146104c45773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee871480156104ba573094506104be565b3394505b506104df565b6104d96104d3600287016105e1565b8861062e565b95508593505b507f022c0d9f00000000000000000000000000000000000000000000000000000000610b005281801561051c576000610b045288610b2452610528565b88610b04526000610b24525b5082610b44526080610b64526000610b845260008060a4610b006000855af161055357610553610743565b5050506001016102ba565b505073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8114156105da577f2e1a7d4d00000000000000000000000000000000000000000000000000000000610b005282610b04526000806024610b006000610a40515af16105c2576105c2610743565b6000806000610b0086335af16105da576105da610743565b50506108ef565b610a005173ffffffffffffffffffffffffffffffffffffffff60209290920201351690565b8073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8114156106295750610a40515b919050565b600061063982610606565b915061064483610606565b9250828210801561065e5783610b145282610b0052610669565b82610b145283610b00525b506028610b0c20610a205180156106ce577fffc0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac0000000000000000000000610b005281610b15527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303610b355261071e565b7fff5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000610b005281610b15527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f610b35525b50506055610b002073ffffffffffffffffffffffffffffffffffffffff169392505050565b3d6000803e3d6000fd5b610756816108c4565b156107ce577fdd62ed3e00000000000000000000000000000000000000000000000000000000610b005233610b045230610b24526020610c006044610b00845afa806107a4576107a4610743565b5060203d10156107b357600080fd5b82610c005110156107ce576107c983838361083e565b610839565b7f23b872dd00000000000000000000000000000000000000000000000000000000610b005233610b045281610b245282610b44526020610c006064610b006000855af13d6001610c0051146020821015168115178216915050806108375761083784848461083e565b505b505050565b7fbca8c7b500000000000000000000000000000000000000000000000000000000610b005280610b04526040610b24526064610b44527f23b872dd00000000000000000000000000000000000000000000000000000000610b645233610b685281610b885282610ba85260008060c8610b006000610a60515af161083957610839610743565b600081600052600161010083061b60016101006020600020061b1780610a8051821614915050919050565b82811015610929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020390610ba9565b95945050505050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb906109909084907f000000000000000000000000000000000000000000000000000000000000000090600401610a93565b600060405180830381600087803b1580156109aa57600080fd5b505af11580156109be573d6000803e3d6000fd5b5050505050565b6000806000806000608086880312156109dc578081fd5b853567ffffffffffffffff808211156109f3578283fd5b818801915088601f830112610a06578283fd5b813581811115610a14578384fd5b8960208083028501011115610a27578384fd5b6020928301975095505086013592506040860135915060608601358015158114610a4f578182fd5b809150509295509295909350565b90815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b6000602080835283518082850152825b81811015610b0757858101830151858201604001528201610aeb565b81811115610b185783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526022908201527f556e6973776170466561747572652f496e76616c6964546f6b656e734c656e6760408201527f7468000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f556e6973776170466561747572652f556e646572426f7567687400000000000060408201526060019056fea2646970667358221220f1e6b806918be3e90643bb0dfce612e29e7d369ede1c1aa524e03f5c60d4f20864736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x5A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8FD3AB80 GT PUSH2 0x43 JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0xD925A56D EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0xD9627AA4 EQ PUSH2 0xE3 JUMPI PUSH2 0x5A JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0x5F JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x8A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x74 PUSH2 0xF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0xA5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9F PUSH2 0x11A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0xADB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x153 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0xA66 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x74 PUSH2 0x1A3 JUMP JUMPDEST PUSH2 0x74 PUSH2 0xF1 CALLDATASIZE PUSH1 0x4 PUSH2 0x9C5 JUMP JUMPDEST PUSH2 0x1C7 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x556E697377617046656174757265000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17E PUSH32 0xD9627AA400000000000000000000000000000000000000000000000000000000 PUSH2 0x932 JUMP JUMPDEST POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP6 GT PUSH2 0x20C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x203 SWAP1 PUSH2 0xB4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x4 DUP1 CALLDATALOAD PUSH1 0x24 DUP2 ADD PUSH2 0xA00 MSTORE PUSH2 0xA20 DUP4 SWAP1 MSTORE PUSH32 0x0 PUSH2 0xA40 MSTORE PUSH32 0x0 PUSH2 0xA60 MSTORE PUSH32 0x0 PUSH2 0xA80 MSTORE DUP5 SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 ADD CALLDATALOAD ADD PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x55E JUMPI PUSH2 0x2CB DUP2 PUSH2 0x5E1 JUMP JUMPDEST PUSH2 0x2D7 PUSH1 0x1 DUP4 ADD PUSH2 0x5E1 JUMP JUMPDEST SWAP4 POP PUSH2 0x2E2 DUP5 PUSH2 0x606 JUMP JUMPDEST PUSH2 0x2EB DUP3 PUSH2 0x606 JUMP JUMPDEST LT DUP4 DUP1 PUSH2 0x303 JUMPI PUSH2 0x2FC DUP7 DUP5 PUSH2 0x62E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP5 POP JUMPDEST DUP4 PUSH2 0x3D9 JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP4 EQ DUP1 ISZERO PUSH2 0x3C1 JUMPI DUP12 CALLVALUE EQ PUSH2 0x331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA40 MLOAD SWAP4 POP PUSH32 0xD0E30DB000000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE PUSH1 0x0 DUP1 PUSH1 0x4 PUSH2 0xB00 DUP16 DUP9 GAS CALL PUSH2 0x374 JUMPI PUSH2 0x374 PUSH2 0x743 JUMP JUMPDEST PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE DUP2 PUSH2 0xB04 MSTORE DUP12 PUSH2 0xB24 MSTORE PUSH1 0x0 DUP1 PUSH1 0x44 PUSH2 0xB00 PUSH1 0x0 DUP9 GAS CALL PUSH2 0x3BC JUMPI PUSH2 0x3BC PUSH2 0x743 JUMP JUMPDEST PUSH2 0x3D7 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D7 DUP13 DUP4 DUP7 PUSH2 0x74D JUMP JUMPDEST POP JUMPDEST PUSH32 0x902F1AC00000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE PUSH1 0x40 PUSH2 0xC00 PUSH1 0x4 PUSH2 0xB00 DUP5 GAS STATICCALL PUSH2 0x417 JUMPI PUSH2 0x417 PUSH2 0x743 JUMP JUMPDEST PUSH1 0x40 RETURNDATASIZE LT ISZERO PUSH2 0x425 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 SWAP3 POP PUSH1 0x0 DUP1 DUP4 ISZERO DUP1 ISZERO PUSH2 0x444 JUMPI PUSH2 0xC20 MLOAD SWAP3 POP PUSH2 0xC00 MLOAD SWAP2 POP PUSH2 0x451 JUMP JUMPDEST PUSH2 0xC00 MLOAD SWAP3 POP PUSH2 0xC20 MLOAD SWAP2 POP JUMPDEST POP PUSH15 0x10000000000000000000000000000 DUP6 GT ISZERO PUSH2 0x46E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E5 DUP6 MUL PUSH2 0x3E8 DUP4 MUL DUP2 ADD DUP3 DUP3 MUL DIV SWAP11 POP POP POP POP PUSH1 0x0 SWAP3 POP DUP7 PUSH1 0x1 DUP6 ADD EQ PUSH1 0x0 DUP2 EQ PUSH2 0x4C4 JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP8 EQ DUP1 ISZERO PUSH2 0x4BA JUMPI ADDRESS SWAP5 POP PUSH2 0x4BE JUMP JUMPDEST CALLER SWAP5 POP JUMPDEST POP PUSH2 0x4DF JUMP JUMPDEST PUSH2 0x4D9 PUSH2 0x4D3 PUSH1 0x2 DUP8 ADD PUSH2 0x5E1 JUMP JUMPDEST DUP9 PUSH2 0x62E JUMP JUMPDEST SWAP6 POP DUP6 SWAP4 POP JUMPDEST POP PUSH32 0x22C0D9F00000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE DUP2 DUP1 ISZERO PUSH2 0x51C JUMPI PUSH1 0x0 PUSH2 0xB04 MSTORE DUP9 PUSH2 0xB24 MSTORE PUSH2 0x528 JUMP JUMPDEST DUP9 PUSH2 0xB04 MSTORE PUSH1 0x0 PUSH2 0xB24 MSTORE JUMPDEST POP DUP3 PUSH2 0xB44 MSTORE PUSH1 0x80 PUSH2 0xB64 MSTORE PUSH1 0x0 PUSH2 0xB84 MSTORE PUSH1 0x0 DUP1 PUSH1 0xA4 PUSH2 0xB00 PUSH1 0x0 DUP6 GAS CALL PUSH2 0x553 JUMPI PUSH2 0x553 PUSH2 0x743 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x2BA JUMP JUMPDEST POP POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 EQ ISZERO PUSH2 0x5DA JUMPI PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE DUP3 PUSH2 0xB04 MSTORE PUSH1 0x0 DUP1 PUSH1 0x24 PUSH2 0xB00 PUSH1 0x0 PUSH2 0xA40 MLOAD GAS CALL PUSH2 0x5C2 JUMPI PUSH2 0x5C2 PUSH2 0x743 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB00 DUP7 CALLER GAS CALL PUSH2 0x5DA JUMPI PUSH2 0x5DA PUSH2 0x743 JUMP JUMPDEST POP POP PUSH2 0x8EF JUMP JUMPDEST PUSH2 0xA00 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 SWAP3 SWAP1 SWAP3 MUL ADD CALLDATALOAD AND SWAP1 JUMP JUMPDEST DUP1 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 EQ ISZERO PUSH2 0x629 JUMPI POP PUSH2 0xA40 MLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x639 DUP3 PUSH2 0x606 JUMP JUMPDEST SWAP2 POP PUSH2 0x644 DUP4 PUSH2 0x606 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT DUP1 ISZERO PUSH2 0x65E JUMPI DUP4 PUSH2 0xB14 MSTORE DUP3 PUSH2 0xB00 MSTORE PUSH2 0x669 JUMP JUMPDEST DUP3 PUSH2 0xB14 MSTORE DUP4 PUSH2 0xB00 MSTORE JUMPDEST POP PUSH1 0x28 PUSH2 0xB0C KECCAK256 PUSH2 0xA20 MLOAD DUP1 ISZERO PUSH2 0x6CE JUMPI PUSH32 0xFFC0AEE478E3658E2610C5F7A4A2E1777CE9E4F2AC0000000000000000000000 PUSH2 0xB00 MSTORE DUP2 PUSH2 0xB15 MSTORE PUSH32 0xE18A34EB0E04B04F7A0AC29A6E80748DCA96319B42C54D679CB821DCA90C6303 PUSH2 0xB35 MSTORE PUSH2 0x71E JUMP JUMPDEST PUSH32 0xFF5C69BEE701EF814A2B6A3EDD4B1652CB9CC5AA6F0000000000000000000000 PUSH2 0xB00 MSTORE DUP2 PUSH2 0xB15 MSTORE PUSH32 0x96E8AC4277198FF8B6F785478AA9A39F403CB768DD02CBEE326C3E7DA348845F PUSH2 0xB35 MSTORE JUMPDEST POP POP PUSH1 0x55 PUSH2 0xB00 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x756 DUP2 PUSH2 0x8C4 JUMP JUMPDEST ISZERO PUSH2 0x7CE JUMPI PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE CALLER PUSH2 0xB04 MSTORE ADDRESS PUSH2 0xB24 MSTORE PUSH1 0x20 PUSH2 0xC00 PUSH1 0x44 PUSH2 0xB00 DUP5 GAS STATICCALL DUP1 PUSH2 0x7A4 JUMPI PUSH2 0x7A4 PUSH2 0x743 JUMP JUMPDEST POP PUSH1 0x20 RETURNDATASIZE LT ISZERO PUSH2 0x7B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH2 0xC00 MLOAD LT ISZERO PUSH2 0x7CE JUMPI PUSH2 0x7C9 DUP4 DUP4 DUP4 PUSH2 0x83E JUMP JUMPDEST PUSH2 0x839 JUMP JUMPDEST PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE CALLER PUSH2 0xB04 MSTORE DUP2 PUSH2 0xB24 MSTORE DUP3 PUSH2 0xB44 MSTORE PUSH1 0x20 PUSH2 0xC00 PUSH1 0x64 PUSH2 0xB00 PUSH1 0x0 DUP6 GAS CALL RETURNDATASIZE PUSH1 0x1 PUSH2 0xC00 MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP3 AND SWAP2 POP POP DUP1 PUSH2 0x837 JUMPI PUSH2 0x837 DUP5 DUP5 DUP5 PUSH2 0x83E JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0xBCA8C7B500000000000000000000000000000000000000000000000000000000 PUSH2 0xB00 MSTORE DUP1 PUSH2 0xB04 MSTORE PUSH1 0x40 PUSH2 0xB24 MSTORE PUSH1 0x64 PUSH2 0xB44 MSTORE PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 PUSH2 0xB64 MSTORE CALLER PUSH2 0xB68 MSTORE DUP2 PUSH2 0xB88 MSTORE DUP3 PUSH2 0xBA8 MSTORE PUSH1 0x0 DUP1 PUSH1 0xC8 PUSH2 0xB00 PUSH1 0x0 PUSH2 0xA60 MLOAD GAS CALL PUSH2 0x839 JUMPI PUSH2 0x839 PUSH2 0x743 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH2 0x100 DUP4 MOD SHL PUSH1 0x1 PUSH2 0x100 PUSH1 0x20 PUSH1 0x0 KECCAK256 MOD SHL OR DUP1 PUSH2 0xA80 MLOAD DUP3 AND EQ SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x929 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x203 SWAP1 PUSH2 0xBA9 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x990 SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0xA93 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9DC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x9F3 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA06 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xA14 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0xA27 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP8 POP SWAP6 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA4F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB07 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xAEB JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xB18 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170466561747572652F496E76616C6964546F6B656E734C656E67 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7468000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170466561747572652F556E646572426F75676874000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0xE6 0xB8 MOD SWAP2 DUP12 0xE3 0xE9 MOD NUMBER 0xBB 0xD 0xFC 0xE6 SLT 0xE2 SWAP15 PUSH30 0x369EDE1C1AA524E03F5C60D4F20864736F6C634300060C00330000000000 ",
                "sourceMap": "1048:21157:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1274:75;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1167:63;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;5000:186::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1444:51::-;;;;;;;;;;;;;:::i;5513:16690::-;;;;;;:::i;:::-;;:::i;1274:75::-;;;:::o;1167:63::-;;;;;;;;;;;;;;;;;;;:::o;5000:186::-;5053:14;5083:53;5108:27;5083:24;:53::i;:::-;-1:-1:-1;5153:26:3;5000:186;:::o;1444:51::-;;;:::o;5513:16690::-;5731:17;5788:1;5772:17;;5764:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;6287:4:3;6274:18;;6294:4;6270:29;;6263:5;6256:44;6367:5;6360:22;;;5921:4;6446:5;6439:19;5974:16;6534:5;6527:30;6038:26;6643:5;6636:38;7034:10;;6792:50;6809:28;;6796:42;6792:50;5899:19;;;7113:6379;7136:8;7133:1;7130:15;7113:6379;;;7239:19;7256:1;7239:19;:::i;:::-;7329:27;7353:1;7350;7346:9;7329:27;:::i;:::-;7317:39;;7482:24;7497:8;7482:24;:::i;:::-;7455:25;7470:9;7455:25;:::i;:::-;7452:55;7660:8;7695:4;7685:2;;7731:39;7761:8;7750:9;7731:39;:::i;:::-;7723:47;;7803:1;7791:13;;7685:2;7850:1;7840:2;;7956:20;7942:35;;8002:493;;;;8724:10;8711:11;8708:27;8698:2;;8781:1;8778;8771:12;8698:2;8861:5;8855:12;8842:25;;9002:29;8995:5;8988:44;9124:3;9118:4;9113:3;9106:5;9094:10;9083:9;9076:5;9071:57;9061:2;;9164:14;;:::i;:::-;9321:31;9314:5;9307:46;9396:4;9389:5;9382:19;9444:10;9437:5;9430:25;9539:3;9533:4;9527;9520:5;9517:1;9506:9;9499:5;9494:49;9484:2;;9579:14;;:::i;:::-;7935:1714;;8002:493;8166:11;8163:18;8160:2;;8226:1;8223;8216:12;8160:2;8423:46;8458:10;8452:4;8441:9;8423:46;:::i;:::-;7935:1714;7840:2;10022:38;10015:5;10008:53;10131:4;10124:5;10119:3;10112:5;10106:4;10099:5;10088:48;10078:2;;10160:14;;:::i;:::-;10316:4;10298:16;10295:26;10292:2;;;10353:1;10351;10344:11;10292:2;10485:9;;-1:-1:-1;10603:15:3;;10681:17;;10723:214;;;;11021:5;11015:12;11000:27;;11076:5;11070:12;11056:26;;10674:434;;10723:214;10850:5;10844:12;10829:27;;10905:5;10899:12;10885:26;;10674:434;;11215:15;11199:14;11196:35;11193:2;;;11268:1;11265;11258:12;11193:2;11590:3;11574:14;11570:24;11757:4;11744:11;11740:22;11721:17;11717:46;11680:10;11661:17;11657:34;11628:157;11615:170;;;;;11821:12;;;11922:8;11918:1;11915;11911:9;11908:23;11957:1;11952:385;;;;12543:20;12530:34;;12593:91;;;;12767:9;12755:21;;12523:283;;12593:91;12646:8;12634:20;;12523:283;;11901:927;;11952:385;12131:139;12217:27;12241:1;12238;12234:9;12217:27;:::i;:::-;12179:8;12131:139;:::i;:::-;12119:151;;12307:8;12295:20;;11901:927;-1:-1:-1;12896:34:3;12889:5;12882:49;12955:9;12985:120;;;;13174:1;13167:5;13160:16;13215:9;13208:5;13201:24;12948:299;;12985:120;13032:9;13025:5;13018:24;13081:1;13074:5;13067:16;12948:299;;13278:8;13271:5;13264:23;13318:4;13311:5;13304:19;13354:1;13347:5;13340:16;13420:1;13417;13411:4;13404:5;13401:1;13395:4;13388:5;13383:39;13373:2;;13446:14;;:::i;:::-;-1:-1:-1;;;7159:1:3;7152:9;7113:6379;;;7117:12;;13591:20;13581:8;13578:34;13575:2;;;13696:30;13689:5;13682:45;13758:9;13751:5;13744:24;13843:3;13837:4;13831;13824:5;13821:1;13813:5;13807:12;13800:5;13795:52;13785:2;;13871:14;;:::i;:::-;14028:3;14022:4;14017:3;14010:5;13999:9;13989:8;13982:5;13977:55;13967:2;;14056:14;;:::i;:::-;13575:2;;14271:145;;;14377:5;14371:12;14340;14394:4;14385:14;;;;14367:33;14354:47;14336:66;;14310:106::o;14489:270::-;14566:5;14657:20;14647:31;;14644:2;;;-1:-1:-1;14721:5:3;14715:12;14644:2;14534:225;;;:::o;14871:2154::-;;15014:22;15029:6;15014:22;:::i;:::-;15004:32;;15063:22;15078:6;15063:22;:::i;:::-;15053:32;-1:-1:-1;16013:18:3;;;16052:122;;;;16243:6;16236:5;16229:21;16289:6;16282:5;16275:21;16006:312;;16052:122;16099:6;16092:5;16085:21;16145:6;16138:5;16131:21;16006:312;-1:-1:-1;16364:4:3;16357:5;16347:22;16483:5;16477:12;16521:199;;;;16789:20;16782:5;16775:35;16849:4;16842:5;16835:19;16893:29;16886:5;16879:44;16470:475;;16521:199;16568:18;16561:5;16554:33;16626:4;16619:5;16612:19;16670:27;16663:5;16656:42;16470:475;-1:-1:-1;;17005:4:3;16998:5;16988:22;16974:12;16970:41;;14923:2102;-1:-1:-1;;;14923:2102:3:o;17109:138::-;17172:16;17169:1;17166;17151:38;17216:16;17213:1;17206:27;17328:3386;17675:28;17697:5;17675:28;:::i;:::-;17672:2;;;17858:26;17851:5;17844:41;17920:8;17913:5;17906:23;17964:9;17957:5;17950:24;18055:4;18048:5;18042:4;18035:5;18028;18021;18010:50;18091:7;18081:2;;18181:14;;:::i;:::-;18081:2;18340:4;18322:16;18319:26;18316:2;;;18382:1;18379;18372:12;18316:2;18542:6;18534:5;18528:12;18525:24;18522:2;;;18719:61;18773:6;18769:2;18762:5;18719:61;:::i;:::-;18805:5;;18522:2;19061:30;19054:5;19047:45;19123:8;19116:5;19109:23;19163:2;19156:5;19149:17;19197:6;19190:5;19183:21;19667:4;19393:5;19367:4;19340:5;19317:1;19290:5;19263;19237:452;19721:16;20398:1;20390:5;20384:12;20381:19;20325:2;20317:6;20314:14;20307:22;20274:183;20206:6;20199:14;20171:308;20093:7;20068:429;20057:440;;;20525:7;20515:2;;20621:61;20675:6;20671:2;20664:5;20621:61;:::i;:::-;20515:2;17374:3340;;;;:::o;20810:715::-;20913:41;20906:5;20899:56;20986:5;20979;20972:20;21023:4;21016:5;21009:19;21059:4;21052:5;21045:19;21095:30;21088:5;21081:45;21157:8;21150:5;21143:23;21197:2;21190:5;21183:17;21231:6;21224:5;21217:21;21313:3;21307:4;21301;21294:5;21291:1;21283:5;21277:12;21270:5;21265:52;21255:2;;21341:14;;:::i;21652:374::-;;21853:5;21850:1;21843:16;21945:1;21939:3;21932:5;21928:15;21924:23;21920:1;21914:3;21909:2;21906:1;21896:16;21892:26;21888:34;21885:63;22010:1;22001:5;21995:12;21992:1;21988:20;21985:27;21965:47;;;21710:316;;;:::o;:::-;22153:12;22140:9;:25;;22132:64;;;;;;;;;;;;:::i;:::-;5513:16690;;;;;;;:::o;2201:168:8:-;2283:79;;;;;2322:4;;2283:52;;:79;;2336:8;;2346:15;;2283:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2201:168;:::o;689:811:-1:-;;;;;;898:3;886:9;877:7;873:23;869:33;866:2;;;-1:-1;;905:12;866:2;963:17;950:31;1001:18;;993:6;990:30;987:2;;;-1:-1;;1023:12;987:2;1146:6;1135:9;1131:22;;;191:3;184:4;176:6;172:17;168:27;158:2;;-1:-1;;199:12;158:2;242:6;229:20;1001:18;261:6;258:30;255:2;;;-1:-1;;291:12;255:2;386:3;335:4;;370:6;366:17;327:6;352:32;;349:41;346:2;;;-1:-1;;393:12;346:2;335:4;323:17;;;;-1:-1;1043:120;-1:-1;;1239:22;;619:20;;-1:-1;1308:2;1347:22;;619:20;;-1:-1;1416:2;1452:22;;485:20;5700:13;;5693:21;6601:32;;6591:2;;-1:-1;;6637:12;6591:2;1424:60;;;;860:640;;;;;;;;:::o;3053:222::-;1698:37;;;3180:2;3165:18;;3151:124::o;3282:218::-;5877:66;5866:78;;;;1816:36;;3407:2;3392:18;;3378:122::o;3507:329::-;5877:66;5866:78;;;;1816:36;;6029:42;6018:54;3822:2;3807:18;;1578:37;3660:2;3645:18;;3631:205::o;3843:310::-;;3990:2;;4011:17;4004:47;2009:5;5323:12;5480:6;3990:2;3979:9;3975:18;5468:19;-1:-1;6236:101;6250:6;6247:1;6244:13;6236:101;;;6317:11;;;;;6311:18;6298:11;;;5508:14;6298:11;6291:39;6265:10;;6236:101;;;6352:6;6349:1;6346:13;6343:2;;;-1:-1;5508:14;6408:6;3979:9;6399:16;;6392:27;6343:2;-1:-1;6528:2;6508:14;6524:7;6504:28;2167:39;;;;5508:14;2167:39;;3961:192;-1:-1;;;3961:192::o;4160:416::-;4360:2;4374:47;;;2443:2;4345:18;;;5468:19;2479:34;5508:14;;;2459:55;2548:4;2534:12;;;2527:26;2572:12;;;4331:245::o;4583:416::-;4783:2;4797:47;;;2823:2;4768:18;;;5468:19;2859:28;5508:14;;;2839:49;2907:12;;;4754:245::o"
            },
            "methodIdentifiers": {
                "FEATURE_NAME()": "6ae4b4f7",
                "FEATURE_VERSION()": "031b905c",
                "GREEDY_TOKENS_BLOOM_FILTER()": "d925a56d",
                "migrate()": "8fd3ab80",
                "sellToUniswap(address[],uint256,uint256,bool)": "d9627aa4"
            }
        }
    },
    "sourceTreeHashHex": "0xb2e30613c34660d364cd35918a4c96973c22ef8f4ab186931729770ac0134c02",
    "sources": {
        "./UniswapFeature.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../migrations/LibMigrate.sol\";\nimport \"../external/IAllowanceTarget.sol\";\nimport \"../fixins/FixinCommon.sol\";\nimport \"./interfaces/IFeature.sol\";\nimport \"./interfaces/IUniswapFeature.sol\";\n\n\n/// @dev VIP uniswap fill functions.\ncontract UniswapFeature is\n    IFeature,\n    IUniswapFeature,\n    FixinCommon\n{\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"UniswapFeature\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 1, 1);\n    /// @dev A bloom filter for tokens that consume all gas when `transferFrom()` fails.\n    bytes32 public immutable GREEDY_TOKENS_BLOOM_FILTER;\n    /// @dev WETH contract.\n    IEtherTokenV06 private immutable WETH;\n    /// @dev AllowanceTarget instance.\n    IAllowanceTarget private immutable ALLOWANCE_TARGET;\n\n    // 0xFF + address of the UniswapV2Factory contract.\n    uint256 constant private FF_UNISWAP_FACTORY = 0xFF5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f0000000000000000000000;\n    // 0xFF + address of the (Sushiswap) UniswapV2Factory contract.\n    uint256 constant private FF_SUSHISWAP_FACTORY = 0xFFC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac0000000000000000000000;\n    // Init code hash of the UniswapV2Pair contract.\n    uint256 constant private UNISWAP_PAIR_INIT_CODE_HASH = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\n    // Init code hash of the (Sushiswap) UniswapV2Pair contract.\n    uint256 constant private SUSHISWAP_PAIR_INIT_CODE_HASH = 0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303;\n    // Mask of the lower 20 bytes of a bytes32.\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n    // ETH pseudo-token address.\n    uint256 constant private ETH_TOKEN_ADDRESS_32 = 0x000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee;\n    // Maximum token quantity that can be swapped against the UniswapV2Pair contract.\n    uint256 constant private MAX_SWAP_AMOUNT = 2**112;\n\n    // bytes4(keccak256(\"executeCall(address,bytes)\"))\n    uint256 constant private ALLOWANCE_TARGET_EXECUTE_CALL_SELECTOR_32 = 0xbca8c7b500000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"getReserves()\"))\n    uint256 constant private UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32 = 0x0902f1ac00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"swap(uint256,uint256,address,bytes)\"))\n    uint256 constant private UNISWAP_PAIR_SWAP_CALL_SELECTOR_32 = 0x022c0d9f00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"transferFrom(address,address,uint256)\"))\n    uint256 constant private TRANSFER_FROM_CALL_SELECTOR_32 = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"allowance(address,address)\"))\n    uint256 constant private ALLOWANCE_CALL_SELECTOR_32 = 0xdd62ed3e00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"withdraw(uint256)\"))\n    uint256 constant private WETH_WITHDRAW_CALL_SELECTOR_32 = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"deposit()\"))\n    uint256 constant private WETH_DEPOSIT_CALL_SELECTOR_32 = 0xd0e30db000000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"transfer(address,uint256)\"))\n    uint256 constant private ERC20_TRANSFER_CALL_SELECTOR_32 = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n\n    /// @dev Construct this contract.\n    /// @param weth The WETH contract.\n    /// @param allowanceTarget The AllowanceTarget contract.\n    /// @param greedyTokensBloomFilter The bloom filter for greedy tokens.\n    constructor(\n        IEtherTokenV06 weth,\n        IAllowanceTarget allowanceTarget,\n        bytes32 greedyTokensBloomFilter\n    ) public {\n        WETH = weth;\n        ALLOWANCE_TARGET = allowanceTarget;\n        GREEDY_TOKENS_BLOOM_FILTER = greedyTokensBloomFilter;\n    }\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate()\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.sellToUniswap.selector);\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n\n    /// @dev Efficiently sell directly to uniswap/sushiswap.\n    /// @param tokens Sell path.\n    /// @param sellAmount of `tokens[0]` Amount to sell.\n    /// @param minBuyAmount Minimum amount of `tokens[-1]` to buy.\n    /// @param isSushi Use sushiswap if true.\n    /// @return buyAmount Amount of `tokens[-1]` bought.\n    function sellToUniswap(\n        IERC20TokenV06[] calldata tokens,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        bool isSushi\n    )\n        external\n        payable\n        override\n        returns (uint256 buyAmount)\n    {\n        require(tokens.length > 1, \"UniswapFeature/InvalidTokensLength\");\n        {\n            // Load immutables onto the stack.\n            IEtherTokenV06 weth = WETH;\n            IAllowanceTarget allowanceTarget = ALLOWANCE_TARGET;\n            bytes32 greedyTokensBloomFilter = GREEDY_TOKENS_BLOOM_FILTER;\n\n            // Store some vars in memory to get around stack limits.\n            assembly {\n                // calldataload(mload(0xA00)) == first element of `tokens` array\n                mstore(0xA00, add(calldataload(0x04), 0x24))\n                // mload(0xA20) == isSushi\n                mstore(0xA20, isSushi)\n                // mload(0xA40) == WETH\n                mstore(0xA40, weth)\n                // mload(0xA60) == ALLOWANCE_TARGET\n                mstore(0xA60, allowanceTarget)\n                // mload(0xA80) == GREEDY_TOKENS_BLOOM_FILTER\n                mstore(0xA80, greedyTokensBloomFilter)\n            }\n        }\n\n        assembly {\n            // numPairs == tokens.length - 1\n            let numPairs := sub(calldataload(add(calldataload(0x04), 0x4)), 1)\n            // We use the previous buy amount as the sell amount for the next\n            // pair in a path. So for the first swap we want to set it to `sellAmount`.\n            buyAmount := sellAmount\n            let buyToken\n            let nextPair := 0\n\n            for {let i := 0} lt(i, numPairs) {i := add(i, 1)} {\n                // sellToken = tokens[i]\n                let sellToken := loadTokenAddress(i)\n                // buyToken = tokens[i+1]\n                buyToken := loadTokenAddress(add(i, 1))\n                // The canonical ordering of this token pair.\n                let pairOrder := lt(normalizeToken(sellToken), normalizeToken(buyToken))\n\n                // Compute the pair address if it hasn't already been computed\n                // from the last iteration.\n                let pair := nextPair\n                if iszero(pair) {\n                    pair := computePairAddress(sellToken, buyToken)\n                    nextPair := 0\n                }\n\n                if iszero(i) {\n                    // This is the first token in the path.\n                    switch eq(sellToken, ETH_TOKEN_ADDRESS_32)\n                        case 0 { // Not selling ETH. Selling an ERC20 instead.\n                            // Make sure ETH was not attached to the call.\n                            if gt(callvalue(), 0) {\n                                revert(0, 0)\n                            }\n                            // For the first pair we need to transfer sellTokens into the\n                            // pair contract.\n                            moveTakerTokensTo(sellToken, pair, sellAmount)\n                        }\n                        default {\n                            // If selling ETH, we need to wrap it to WETH and transfer to the\n                            // pair contract.\n                            if iszero(eq(callvalue(), sellAmount)) {\n                                revert(0, 0)\n                            }\n                            sellToken := mload(0xA40)// Re-assign to WETH\n                            // Call `WETH.deposit{value: sellAmount}()`\n                            mstore(0xB00, WETH_DEPOSIT_CALL_SELECTOR_32)\n                            if iszero(call(gas(), sellToken, sellAmount, 0xB00, 0x4, 0x00, 0x0)) {\n                                bubbleRevert()\n                            }\n                            // Call `WETH.transfer(pair, sellAmount)`\n                            mstore(0xB00, ERC20_TRANSFER_CALL_SELECTOR_32)\n                            mstore(0xB04, pair)\n                            mstore(0xB24, sellAmount)\n                            if iszero(call(gas(), sellToken, 0, 0xB00, 0x44, 0x00, 0x0)) {\n                                bubbleRevert()\n                            }\n                        }\n                    // No need to check results, if deposit/transfers failed the UniswapV2Pair will\n                    // reject our trade (or it may succeed if somehow the reserve was out of sync)\n                    // this is fine for the taker.\n                }\n\n                // Call pair.getReserves(), store the results at `0xC00`\n                mstore(0xB00, UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32)\n                if iszero(staticcall(gas(), pair, 0xB00, 0x4, 0xC00, 0x40)) {\n                    bubbleRevert()\n                }\n                // Revert if the pair contract does not return at least two words.\n                if lt(returndatasize(), 0x40) {\n                    revert(0,0)\n                }\n\n                // Sell amount for this hop is the previous buy amount.\n                let pairSellAmount := buyAmount\n                // Compute the buy amount based on the pair reserves.\n                {\n                    let sellReserve\n                    let buyReserve\n                    switch iszero(pairOrder)\n                        case 0 {\n                            // Transpose if pair order is different.\n                            sellReserve := mload(0xC00)\n                            buyReserve := mload(0xC20)\n                        }\n                        default {\n                            sellReserve := mload(0xC20)\n                            buyReserve := mload(0xC00)\n                        }\n                    // Ensure that the sellAmount is < 2B9B9B2.\n                    if gt(pairSellAmount, MAX_SWAP_AMOUNT) {\n                        revert(0, 0)\n                    }\n                    // Pairs are in the range (0, 2B9B9B2) so this shouldn't overflow.\n                    // buyAmount = (pairSellAmount * 997 * buyReserve) /\n                    //     (pairSellAmount * 997 + sellReserve * 1000);\n                    let sellAmountWithFee := mul(pairSellAmount, 997)\n                    buyAmount := div(\n                        mul(sellAmountWithFee, buyReserve),\n                        add(sellAmountWithFee, mul(sellReserve, 1000))\n                    )\n                }\n\n                let receiver\n                // Is this the last pair contract?\n                switch eq(add(i, 1), numPairs)\n                    case 0 {\n                        // Not the last pair contract, so forward bought tokens to\n                        // the next pair contract.\n                        nextPair := computePairAddress(\n                            buyToken,\n                            loadTokenAddress(add(i, 2))\n                        )\n                        receiver := nextPair\n                    }\n                    default {\n                        // The last pair contract.\n                        // Forward directly to taker UNLESS they want ETH back.\n                        switch eq(buyToken, ETH_TOKEN_ADDRESS_32)\n                            case 0 {\n                                receiver := caller()\n                            }\n                            default {\n                                receiver := address()\n                            }\n                    }\n\n                // Call pair.swap()\n                mstore(0xB00, UNISWAP_PAIR_SWAP_CALL_SELECTOR_32)\n                switch pairOrder\n                    case 0 {\n                        mstore(0xB04, buyAmount)\n                        mstore(0xB24, 0)\n                    }\n                    default {\n                        mstore(0xB04, 0)\n                        mstore(0xB24, buyAmount)\n                    }\n                mstore(0xB44, receiver)\n                mstore(0xB64, 0x80)\n                mstore(0xB84, 0)\n                if iszero(call(gas(), pair, 0, 0xB00, 0xA4, 0, 0)) {\n                    bubbleRevert()\n                }\n            } // End for-loop.\n\n            // If buying ETH, unwrap the WETH first\n            if eq(buyToken, ETH_TOKEN_ADDRESS_32) {\n                // Call `WETH.withdraw(buyAmount)`\n                mstore(0xB00, WETH_WITHDRAW_CALL_SELECTOR_32)\n                mstore(0xB04, buyAmount)\n                if iszero(call(gas(), mload(0xA40), 0, 0xB00, 0x24, 0x00, 0x0)) {\n                    bubbleRevert()\n                }\n                // Transfer ETH to the caller.\n                if iszero(call(gas(), caller(), buyAmount, 0xB00, 0x0, 0x00, 0x0)) {\n                    bubbleRevert()\n                }\n            }\n\n            // Functions ///////////////////////////////////////////////////////\n\n            // Load a token address from the `tokens` calldata argument.\n            function loadTokenAddress(idx) -> addr {\n                addr := and(ADDRESS_MASK, calldataload(add(mload(0xA00), mul(idx, 0x20))))\n            }\n\n            // Convert ETH pseudo-token addresses to WETH.\n            function normalizeToken(token) -> normalized {\n                normalized := token\n                // Translate ETH pseudo-tokens to WETH.\n                if eq(token, ETH_TOKEN_ADDRESS_32) {\n                    normalized := mload(0xA40)\n                }\n            }\n\n            // Compute the address of the UniswapV2Pair contract given two\n            // tokens.\n            function computePairAddress(tokenA, tokenB) -> pair {\n                // Convert ETH pseudo-token addresses to WETH.\n                tokenA := normalizeToken(tokenA)\n                tokenB := normalizeToken(tokenB)\n                // There is one contract for every combination of tokens,\n                // which is deployed using CREATE2.\n                // The derivation of this address is given by:\n                //   address(keccak256(abi.encodePacked(\n                //       bytes(0xFF),\n                //       address(UNISWAP_FACTORY_ADDRESS),\n                //       keccak256(abi.encodePacked(\n                //           tokenA < tokenB ? tokenA : tokenB,\n                //           tokenA < tokenB ? tokenB : tokenA,\n                //       )),\n                //       bytes32(UNISWAP_PAIR_INIT_CODE_HASH),\n                //   )));\n\n                // Compute the salt (the hash of the sorted tokens).\n                // Tokens are written in reverse memory order to packed encode\n                // them as two 20-byte values in a 40-byte chunk of memory\n                // starting at 0xB0C.\n                switch lt(tokenA, tokenB)\n                    case 0 {\n                        mstore(0xB14, tokenA)\n                        mstore(0xB00, tokenB)\n                    }\n                    default {\n                        mstore(0xB14, tokenB)\n                        mstore(0xB00, tokenA)\n                    }\n                let salt := keccak256(0xB0C, 0x28)\n                // Compute the pair address by hashing all the components together.\n                switch mload(0xA20) // isSushi\n                    case 0 {\n                        mstore(0xB00, FF_UNISWAP_FACTORY)\n                        mstore(0xB15, salt)\n                        mstore(0xB35, UNISWAP_PAIR_INIT_CODE_HASH)\n                    }\n                    default {\n                        mstore(0xB00, FF_SUSHISWAP_FACTORY)\n                        mstore(0xB15, salt)\n                        mstore(0xB35, SUSHISWAP_PAIR_INIT_CODE_HASH)\n                    }\n                pair := and(ADDRESS_MASK, keccak256(0xB00, 0x55))\n            }\n\n            // Revert with the return data from the most recent call.\n            function bubbleRevert() {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n\n            // Move `amount` tokens from the taker/caller to `to`.\n            function moveTakerTokensTo(token, to, amount) {\n\n                // If the token is possibly greedy, we check the allowance rather\n                // than relying on letting the transferFrom() call fail and\n                // falling through to legacy allowance target because the token\n                // will eat all our gas.\n                if isTokenPossiblyGreedy(token) {\n                    // Check if we have enough direct allowance by calling\n                    // `token.allowance()`\n                    mstore(0xB00, ALLOWANCE_CALL_SELECTOR_32)\n                    mstore(0xB04, caller())\n                    mstore(0xB24, address())\n                    let success := staticcall(gas(), token, 0xB00, 0x44, 0xC00, 0x20)\n                    if iszero(success) {\n                        // Call to allowance() failed.\n                        bubbleRevert()\n                    }\n                    // Make sure the allowance call returned at least a word.\n                    if lt(returndatasize(), 0x20) {\n                        revert(0, 0)\n                    }\n                    // Call succeeded.\n                    // Result is stored in 0xC00-0xC20.\n                    if lt(mload(0xC00), amount) {\n                        // We don't have enough direct allowance, so try\n                        // going through the legacy allowance taregt.\n                        moveTakerTokensToWithLegacyAllowanceTarget(token, to, amount)\n                        leave\n                    }\n                }\n\n                // Otherwise we will optimistically try to perform a `transferFrom()`\n                // directly then if it fails we will go through the legacy allowance target.\n                mstore(0xB00, TRANSFER_FROM_CALL_SELECTOR_32)\n                mstore(0xB04, caller())\n                mstore(0xB24, to)\n                mstore(0xB44, amount)\n\n                let success := call(\n                    gas(),\n                    token,\n                    0,\n                    0xB00,\n                    0x64,\n                    0xC00,\n                    // Copy only the first 32 bytes of return data. We\n                    // only care about reading a boolean in the success\n                    // case, and we discard the return data in the\n                    // failure case.\n                    0x20\n                )\n\n                let rdsize := returndatasize()\n\n                // Check for ERC20 success. ERC20 tokens should\n                // return a boolean, but some return nothing or\n                // extra data. We accept 0-length return data as\n                // success, or at least 32 bytes that starts with\n                // a 32-byte boolean true.\n                success := and(\n                    success,                         // call itself succeeded\n                    or(\n                        iszero(rdsize),              // no return data, or\n                        and(\n                            iszero(lt(rdsize, 32)),  // at least 32 bytes\n                            eq(mload(0xC00), 1)      // starts with uint256(1)\n                        )\n                    )\n                )\n\n                if iszero(success) {\n                    // Try to fall back to the allowance target.\n                    moveTakerTokensToWithLegacyAllowanceTarget(token, to, amount)\n                }\n            }\n\n            // Move tokens by going through the legacy allowance target contract.\n            function moveTakerTokensToWithLegacyAllowanceTarget(token, to, amount) {\n                mstore(0xB00, ALLOWANCE_TARGET_EXECUTE_CALL_SELECTOR_32)\n                mstore(0xB04, token)\n                mstore(0xB24, 0x40)\n                mstore(0xB44, 0x64)\n                mstore(0xB64, TRANSFER_FROM_CALL_SELECTOR_32)\n                mstore(0xB68, caller())\n                mstore(0xB88, to)\n                mstore(0xBA8, amount)\n                if iszero(call(gas(), mload(0xA60), 0, 0xB00, 0xC8, 0x00, 0x0)) {\n                    bubbleRevert()\n                }\n                // If this fall back failed, the swap will most likely fail\n                // so there's no need to validate the result.\n            }\n\n            // Checks if a token possibly belongs to the GREEDY_TOKENS_BLOOM_FILTER\n            // bloom filter.\n            function isTokenPossiblyGreedy(token) -> isPossiblyGreedy {\n                // The hash is given by:\n                // (1 << (keccak256(token) % 256)) | (1 << (token % 256))\n                mstore(0, token)\n                let h := or(shl(mod(keccak256(0, 32), 256), 1), shl(mod(token, 256), 1))\n                isPossiblyGreedy := eq(and(h, mload(0xA80)), h)\n            }\n        }\n\n        // Revert if we bought too little.\n        // TODO: replace with rich revert?\n        require(buyAmount >= minBuyAmount, \"UniswapFeature/UnderBought\");\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 10,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
        },
        "../migrations/LibMigrate.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "../errors/LibOwnableRichErrors.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n"
        },
        "../external/IAllowanceTarget.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol\";\n\n\n/// @dev The allowance target for the TokenSpender feature.\ninterface IAllowanceTarget is\n    IAuthorizableV06\n{\n    /// @dev Execute an arbitrary call. Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @return resultData The data returned by the call.\n    function executeCall(\n        address payable target,\n        bytes calldata callData\n    )\n        external\n        returns (bytes memory resultData);\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IOwnableV06.sol\";\n\n\ninterface IAuthorizableV06 is\n    IOwnableV06\n{\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n\n    /// @dev Gets all authorized addresses.\n    /// @return authorizedAddresses Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory authorizedAddresses);\n\n    /// @dev Whether an adderss is authorized to call privileged functions.\n    /// @param addr Address to query.\n    /// @return isAuthorized Whether the address is authorized.\n    function authorized(address addr) external view returns (bool isAuthorized);\n\n    /// @dev All addresseses authorized to call privileged functions.\n    /// @param idx Index of authorized address.\n    /// @return addr Authorized address.\n    function authorities(uint256 idx) external view returns (address addr);\n\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n"
        },
        "../fixins/FixinCommon.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/interfaces/IOwnableFeature.sol\";\nimport \"../features/interfaces/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n"
        },
        "../errors/LibCommonRichErrors.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n"
        },
        "./interfaces/IOwnableFeature.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n"
        },
        "./interfaces/ISimpleFunctionRegistryFeature.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n"
        },
        "./interfaces/IFeature.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n"
        },
        "./interfaces/IUniswapFeature.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev VIP uniswap fill functions.\ninterface IUniswapFeature {\n\n    /// @dev Efficiently sell directly to uniswap/sushiswap.\n    /// @param tokens Sell path.\n    /// @param sellAmount of `tokens[0]` Amount to sell.\n    /// @param minBuyAmount Minimum amount of `tokens[-1]` to buy.\n    /// @param isSushi Use sushiswap if true.\n    /// @return buyAmount Amount of `tokens[-1]` bought.\n    function sellToUniswap(\n        IERC20TokenV06[] calldata tokens,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        bool isSushi\n    )\n        external\n        payable\n        returns (uint256 buyAmount);\n}\n"
        }
    },
    "sourceCodes": {
        "./UniswapFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../migrations/LibMigrate.sol\";\nimport \"../external/IAllowanceTarget.sol\";\nimport \"../fixins/FixinCommon.sol\";\nimport \"./interfaces/IFeature.sol\";\nimport \"./interfaces/IUniswapFeature.sol\";\n\n\n/// @dev VIP uniswap fill functions.\ncontract UniswapFeature is\n    IFeature,\n    IUniswapFeature,\n    FixinCommon\n{\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"UniswapFeature\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 1, 1);\n    /// @dev A bloom filter for tokens that consume all gas when `transferFrom()` fails.\n    bytes32 public immutable GREEDY_TOKENS_BLOOM_FILTER;\n    /// @dev WETH contract.\n    IEtherTokenV06 private immutable WETH;\n    /// @dev AllowanceTarget instance.\n    IAllowanceTarget private immutable ALLOWANCE_TARGET;\n\n    // 0xFF + address of the UniswapV2Factory contract.\n    uint256 constant private FF_UNISWAP_FACTORY = 0xFF5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f0000000000000000000000;\n    // 0xFF + address of the (Sushiswap) UniswapV2Factory contract.\n    uint256 constant private FF_SUSHISWAP_FACTORY = 0xFFC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac0000000000000000000000;\n    // Init code hash of the UniswapV2Pair contract.\n    uint256 constant private UNISWAP_PAIR_INIT_CODE_HASH = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\n    // Init code hash of the (Sushiswap) UniswapV2Pair contract.\n    uint256 constant private SUSHISWAP_PAIR_INIT_CODE_HASH = 0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303;\n    // Mask of the lower 20 bytes of a bytes32.\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n    // ETH pseudo-token address.\n    uint256 constant private ETH_TOKEN_ADDRESS_32 = 0x000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee;\n    // Maximum token quantity that can be swapped against the UniswapV2Pair contract.\n    uint256 constant private MAX_SWAP_AMOUNT = 2**112;\n\n    // bytes4(keccak256(\"executeCall(address,bytes)\"))\n    uint256 constant private ALLOWANCE_TARGET_EXECUTE_CALL_SELECTOR_32 = 0xbca8c7b500000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"getReserves()\"))\n    uint256 constant private UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32 = 0x0902f1ac00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"swap(uint256,uint256,address,bytes)\"))\n    uint256 constant private UNISWAP_PAIR_SWAP_CALL_SELECTOR_32 = 0x022c0d9f00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"transferFrom(address,address,uint256)\"))\n    uint256 constant private TRANSFER_FROM_CALL_SELECTOR_32 = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"allowance(address,address)\"))\n    uint256 constant private ALLOWANCE_CALL_SELECTOR_32 = 0xdd62ed3e00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"withdraw(uint256)\"))\n    uint256 constant private WETH_WITHDRAW_CALL_SELECTOR_32 = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"deposit()\"))\n    uint256 constant private WETH_DEPOSIT_CALL_SELECTOR_32 = 0xd0e30db000000000000000000000000000000000000000000000000000000000;\n    // bytes4(keccak256(\"transfer(address,uint256)\"))\n    uint256 constant private ERC20_TRANSFER_CALL_SELECTOR_32 = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n\n    /// @dev Construct this contract.\n    /// @param weth The WETH contract.\n    /// @param allowanceTarget The AllowanceTarget contract.\n    /// @param greedyTokensBloomFilter The bloom filter for greedy tokens.\n    constructor(\n        IEtherTokenV06 weth,\n        IAllowanceTarget allowanceTarget,\n        bytes32 greedyTokensBloomFilter\n    ) public {\n        WETH = weth;\n        ALLOWANCE_TARGET = allowanceTarget;\n        GREEDY_TOKENS_BLOOM_FILTER = greedyTokensBloomFilter;\n    }\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate()\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.sellToUniswap.selector);\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n\n    /// @dev Efficiently sell directly to uniswap/sushiswap.\n    /// @param tokens Sell path.\n    /// @param sellAmount of `tokens[0]` Amount to sell.\n    /// @param minBuyAmount Minimum amount of `tokens[-1]` to buy.\n    /// @param isSushi Use sushiswap if true.\n    /// @return buyAmount Amount of `tokens[-1]` bought.\n    function sellToUniswap(\n        IERC20TokenV06[] calldata tokens,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        bool isSushi\n    )\n        external\n        payable\n        override\n        returns (uint256 buyAmount)\n    {\n        require(tokens.length > 1, \"UniswapFeature/InvalidTokensLength\");\n        {\n            // Load immutables onto the stack.\n            IEtherTokenV06 weth = WETH;\n            IAllowanceTarget allowanceTarget = ALLOWANCE_TARGET;\n            bytes32 greedyTokensBloomFilter = GREEDY_TOKENS_BLOOM_FILTER;\n\n            // Store some vars in memory to get around stack limits.\n            assembly {\n                // calldataload(mload(0xA00)) == first element of `tokens` array\n                mstore(0xA00, add(calldataload(0x04), 0x24))\n                // mload(0xA20) == isSushi\n                mstore(0xA20, isSushi)\n                // mload(0xA40) == WETH\n                mstore(0xA40, weth)\n                // mload(0xA60) == ALLOWANCE_TARGET\n                mstore(0xA60, allowanceTarget)\n                // mload(0xA80) == GREEDY_TOKENS_BLOOM_FILTER\n                mstore(0xA80, greedyTokensBloomFilter)\n            }\n        }\n\n        assembly {\n            // numPairs == tokens.length - 1\n            let numPairs := sub(calldataload(add(calldataload(0x04), 0x4)), 1)\n            // We use the previous buy amount as the sell amount for the next\n            // pair in a path. So for the first swap we want to set it to `sellAmount`.\n            buyAmount := sellAmount\n            let buyToken\n            let nextPair := 0\n\n            for {let i := 0} lt(i, numPairs) {i := add(i, 1)} {\n                // sellToken = tokens[i]\n                let sellToken := loadTokenAddress(i)\n                // buyToken = tokens[i+1]\n                buyToken := loadTokenAddress(add(i, 1))\n                // The canonical ordering of this token pair.\n                let pairOrder := lt(normalizeToken(sellToken), normalizeToken(buyToken))\n\n                // Compute the pair address if it hasn't already been computed\n                // from the last iteration.\n                let pair := nextPair\n                if iszero(pair) {\n                    pair := computePairAddress(sellToken, buyToken)\n                    nextPair := 0\n                }\n\n                if iszero(i) {\n                    // This is the first token in the path.\n                    switch eq(sellToken, ETH_TOKEN_ADDRESS_32)\n                        case 0 { // Not selling ETH. Selling an ERC20 instead.\n                            // Make sure ETH was not attached to the call.\n                            if gt(callvalue(), 0) {\n                                revert(0, 0)\n                            }\n                            // For the first pair we need to transfer sellTokens into the\n                            // pair contract.\n                            moveTakerTokensTo(sellToken, pair, sellAmount)\n                        }\n                        default {\n                            // If selling ETH, we need to wrap it to WETH and transfer to the\n                            // pair contract.\n                            if iszero(eq(callvalue(), sellAmount)) {\n                                revert(0, 0)\n                            }\n                            sellToken := mload(0xA40)// Re-assign to WETH\n                            // Call `WETH.deposit{value: sellAmount}()`\n                            mstore(0xB00, WETH_DEPOSIT_CALL_SELECTOR_32)\n                            if iszero(call(gas(), sellToken, sellAmount, 0xB00, 0x4, 0x00, 0x0)) {\n                                bubbleRevert()\n                            }\n                            // Call `WETH.transfer(pair, sellAmount)`\n                            mstore(0xB00, ERC20_TRANSFER_CALL_SELECTOR_32)\n                            mstore(0xB04, pair)\n                            mstore(0xB24, sellAmount)\n                            if iszero(call(gas(), sellToken, 0, 0xB00, 0x44, 0x00, 0x0)) {\n                                bubbleRevert()\n                            }\n                        }\n                    // No need to check results, if deposit/transfers failed the UniswapV2Pair will\n                    // reject our trade (or it may succeed if somehow the reserve was out of sync)\n                    // this is fine for the taker.\n                }\n\n                // Call pair.getReserves(), store the results at `0xC00`\n                mstore(0xB00, UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32)\n                if iszero(staticcall(gas(), pair, 0xB00, 0x4, 0xC00, 0x40)) {\n                    bubbleRevert()\n                }\n                // Revert if the pair contract does not return at least two words.\n                if lt(returndatasize(), 0x40) {\n                    revert(0,0)\n                }\n\n                // Sell amount for this hop is the previous buy amount.\n                let pairSellAmount := buyAmount\n                // Compute the buy amount based on the pair reserves.\n                {\n                    let sellReserve\n                    let buyReserve\n                    switch iszero(pairOrder)\n                        case 0 {\n                            // Transpose if pair order is different.\n                            sellReserve := mload(0xC00)\n                            buyReserve := mload(0xC20)\n                        }\n                        default {\n                            sellReserve := mload(0xC20)\n                            buyReserve := mload(0xC00)\n                        }\n                    // Ensure that the sellAmount is < 2B9B9B2.\n                    if gt(pairSellAmount, MAX_SWAP_AMOUNT) {\n                        revert(0, 0)\n                    }\n                    // Pairs are in the range (0, 2B9B9B2) so this shouldn't overflow.\n                    // buyAmount = (pairSellAmount * 997 * buyReserve) /\n                    //     (pairSellAmount * 997 + sellReserve * 1000);\n                    let sellAmountWithFee := mul(pairSellAmount, 997)\n                    buyAmount := div(\n                        mul(sellAmountWithFee, buyReserve),\n                        add(sellAmountWithFee, mul(sellReserve, 1000))\n                    )\n                }\n\n                let receiver\n                // Is this the last pair contract?\n                switch eq(add(i, 1), numPairs)\n                    case 0 {\n                        // Not the last pair contract, so forward bought tokens to\n                        // the next pair contract.\n                        nextPair := computePairAddress(\n                            buyToken,\n                            loadTokenAddress(add(i, 2))\n                        )\n                        receiver := nextPair\n                    }\n                    default {\n                        // The last pair contract.\n                        // Forward directly to taker UNLESS they want ETH back.\n                        switch eq(buyToken, ETH_TOKEN_ADDRESS_32)\n                            case 0 {\n                                receiver := caller()\n                            }\n                            default {\n                                receiver := address()\n                            }\n                    }\n\n                // Call pair.swap()\n                mstore(0xB00, UNISWAP_PAIR_SWAP_CALL_SELECTOR_32)\n                switch pairOrder\n                    case 0 {\n                        mstore(0xB04, buyAmount)\n                        mstore(0xB24, 0)\n                    }\n                    default {\n                        mstore(0xB04, 0)\n                        mstore(0xB24, buyAmount)\n                    }\n                mstore(0xB44, receiver)\n                mstore(0xB64, 0x80)\n                mstore(0xB84, 0)\n                if iszero(call(gas(), pair, 0, 0xB00, 0xA4, 0, 0)) {\n                    bubbleRevert()\n                }\n            } // End for-loop.\n\n            // If buying ETH, unwrap the WETH first\n            if eq(buyToken, ETH_TOKEN_ADDRESS_32) {\n                // Call `WETH.withdraw(buyAmount)`\n                mstore(0xB00, WETH_WITHDRAW_CALL_SELECTOR_32)\n                mstore(0xB04, buyAmount)\n                if iszero(call(gas(), mload(0xA40), 0, 0xB00, 0x24, 0x00, 0x0)) {\n                    bubbleRevert()\n                }\n                // Transfer ETH to the caller.\n                if iszero(call(gas(), caller(), buyAmount, 0xB00, 0x0, 0x00, 0x0)) {\n                    bubbleRevert()\n                }\n            }\n\n            // Functions ///////////////////////////////////////////////////////\n\n            // Load a token address from the `tokens` calldata argument.\n            function loadTokenAddress(idx) -> addr {\n                addr := and(ADDRESS_MASK, calldataload(add(mload(0xA00), mul(idx, 0x20))))\n            }\n\n            // Convert ETH pseudo-token addresses to WETH.\n            function normalizeToken(token) -> normalized {\n                normalized := token\n                // Translate ETH pseudo-tokens to WETH.\n                if eq(token, ETH_TOKEN_ADDRESS_32) {\n                    normalized := mload(0xA40)\n                }\n            }\n\n            // Compute the address of the UniswapV2Pair contract given two\n            // tokens.\n            function computePairAddress(tokenA, tokenB) -> pair {\n                // Convert ETH pseudo-token addresses to WETH.\n                tokenA := normalizeToken(tokenA)\n                tokenB := normalizeToken(tokenB)\n                // There is one contract for every combination of tokens,\n                // which is deployed using CREATE2.\n                // The derivation of this address is given by:\n                //   address(keccak256(abi.encodePacked(\n                //       bytes(0xFF),\n                //       address(UNISWAP_FACTORY_ADDRESS),\n                //       keccak256(abi.encodePacked(\n                //           tokenA < tokenB ? tokenA : tokenB,\n                //           tokenA < tokenB ? tokenB : tokenA,\n                //       )),\n                //       bytes32(UNISWAP_PAIR_INIT_CODE_HASH),\n                //   )));\n\n                // Compute the salt (the hash of the sorted tokens).\n                // Tokens are written in reverse memory order to packed encode\n                // them as two 20-byte values in a 40-byte chunk of memory\n                // starting at 0xB0C.\n                switch lt(tokenA, tokenB)\n                    case 0 {\n                        mstore(0xB14, tokenA)\n                        mstore(0xB00, tokenB)\n                    }\n                    default {\n                        mstore(0xB14, tokenB)\n                        mstore(0xB00, tokenA)\n                    }\n                let salt := keccak256(0xB0C, 0x28)\n                // Compute the pair address by hashing all the components together.\n                switch mload(0xA20) // isSushi\n                    case 0 {\n                        mstore(0xB00, FF_UNISWAP_FACTORY)\n                        mstore(0xB15, salt)\n                        mstore(0xB35, UNISWAP_PAIR_INIT_CODE_HASH)\n                    }\n                    default {\n                        mstore(0xB00, FF_SUSHISWAP_FACTORY)\n                        mstore(0xB15, salt)\n                        mstore(0xB35, SUSHISWAP_PAIR_INIT_CODE_HASH)\n                    }\n                pair := and(ADDRESS_MASK, keccak256(0xB00, 0x55))\n            }\n\n            // Revert with the return data from the most recent call.\n            function bubbleRevert() {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n\n            // Move `amount` tokens from the taker/caller to `to`.\n            function moveTakerTokensTo(token, to, amount) {\n\n                // If the token is possibly greedy, we check the allowance rather\n                // than relying on letting the transferFrom() call fail and\n                // falling through to legacy allowance target because the token\n                // will eat all our gas.\n                if isTokenPossiblyGreedy(token) {\n                    // Check if we have enough direct allowance by calling\n                    // `token.allowance()`\n                    mstore(0xB00, ALLOWANCE_CALL_SELECTOR_32)\n                    mstore(0xB04, caller())\n                    mstore(0xB24, address())\n                    let success := staticcall(gas(), token, 0xB00, 0x44, 0xC00, 0x20)\n                    if iszero(success) {\n                        // Call to allowance() failed.\n                        bubbleRevert()\n                    }\n                    // Make sure the allowance call returned at least a word.\n                    if lt(returndatasize(), 0x20) {\n                        revert(0, 0)\n                    }\n                    // Call succeeded.\n                    // Result is stored in 0xC00-0xC20.\n                    if lt(mload(0xC00), amount) {\n                        // We don't have enough direct allowance, so try\n                        // going through the legacy allowance taregt.\n                        moveTakerTokensToWithLegacyAllowanceTarget(token, to, amount)\n                        leave\n                    }\n                }\n\n                // Otherwise we will optimistically try to perform a `transferFrom()`\n                // directly then if it fails we will go through the legacy allowance target.\n                mstore(0xB00, TRANSFER_FROM_CALL_SELECTOR_32)\n                mstore(0xB04, caller())\n                mstore(0xB24, to)\n                mstore(0xB44, amount)\n\n                let success := call(\n                    gas(),\n                    token,\n                    0,\n                    0xB00,\n                    0x64,\n                    0xC00,\n                    // Copy only the first 32 bytes of return data. We\n                    // only care about reading a boolean in the success\n                    // case, and we discard the return data in the\n                    // failure case.\n                    0x20\n                )\n\n                let rdsize := returndatasize()\n\n                // Check for ERC20 success. ERC20 tokens should\n                // return a boolean, but some return nothing or\n                // extra data. We accept 0-length return data as\n                // success, or at least 32 bytes that starts with\n                // a 32-byte boolean true.\n                success := and(\n                    success,                         // call itself succeeded\n                    or(\n                        iszero(rdsize),              // no return data, or\n                        and(\n                            iszero(lt(rdsize, 32)),  // at least 32 bytes\n                            eq(mload(0xC00), 1)      // starts with uint256(1)\n                        )\n                    )\n                )\n\n                if iszero(success) {\n                    // Try to fall back to the allowance target.\n                    moveTakerTokensToWithLegacyAllowanceTarget(token, to, amount)\n                }\n            }\n\n            // Move tokens by going through the legacy allowance target contract.\n            function moveTakerTokensToWithLegacyAllowanceTarget(token, to, amount) {\n                mstore(0xB00, ALLOWANCE_TARGET_EXECUTE_CALL_SELECTOR_32)\n                mstore(0xB04, token)\n                mstore(0xB24, 0x40)\n                mstore(0xB44, 0x64)\n                mstore(0xB64, TRANSFER_FROM_CALL_SELECTOR_32)\n                mstore(0xB68, caller())\n                mstore(0xB88, to)\n                mstore(0xBA8, amount)\n                if iszero(call(gas(), mload(0xA60), 0, 0xB00, 0xC8, 0x00, 0x0)) {\n                    bubbleRevert()\n                }\n                // If this fall back failed, the swap will most likely fail\n                // so there's no need to validate the result.\n            }\n\n            // Checks if a token possibly belongs to the GREEDY_TOKENS_BLOOM_FILTER\n            // bloom filter.\n            function isTokenPossiblyGreedy(token) -> isPossiblyGreedy {\n                // The hash is given by:\n                // (1 << (keccak256(token) % 256)) | (1 << (token % 256))\n                mstore(0, token)\n                let h := or(shl(mod(keccak256(0, 32), 256), 1), shl(mod(token, 256), 1))\n                isPossiblyGreedy := eq(and(h, mload(0xA80)), h)\n            }\n        }\n\n        // Revert if we bought too little.\n        // TODO: replace with rich revert?\n        require(buyAmount >= minBuyAmount, \"UniswapFeature/UnderBought\");\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n",
        "../migrations/LibMigrate.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "../errors/LibOwnableRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n",
        "../external/IAllowanceTarget.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol\";\n\n\n/// @dev The allowance target for the TokenSpender feature.\ninterface IAllowanceTarget is\n    IAuthorizableV06\n{\n    /// @dev Execute an arbitrary call. Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @return resultData The data returned by the call.\n    function executeCall(\n        address payable target,\n        bytes calldata callData\n    )\n        external\n        returns (bytes memory resultData);\n}\n",
        "@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IOwnableV06.sol\";\n\n\ninterface IAuthorizableV06 is\n    IOwnableV06\n{\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n\n    /// @dev Gets all authorized addresses.\n    /// @return authorizedAddresses Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory authorizedAddresses);\n\n    /// @dev Whether an adderss is authorized to call privileged functions.\n    /// @param addr Address to query.\n    /// @return isAuthorized Whether the address is authorized.\n    function authorized(address addr) external view returns (bool isAuthorized);\n\n    /// @dev All addresseses authorized to call privileged functions.\n    /// @param idx Index of authorized address.\n    /// @return addr Authorized address.\n    function authorities(uint256 idx) external view returns (address addr);\n\n}\n",
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n",
        "../fixins/FixinCommon.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/interfaces/IOwnableFeature.sol\";\nimport \"../features/interfaces/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n",
        "../errors/LibCommonRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n",
        "./interfaces/IOwnableFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n",
        "./interfaces/ISimpleFunctionRegistryFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n",
        "./interfaces/IFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n",
        "./interfaces/IUniswapFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev VIP uniswap fill functions.\ninterface IUniswapFeature {\n\n    /// @dev Efficiently sell directly to uniswap/sushiswap.\n    /// @param tokens Sell path.\n    /// @param sellAmount of `tokens[0]` Amount to sell.\n    /// @param minBuyAmount Minimum amount of `tokens[-1]` to buy.\n    /// @param isSushi Use sushiswap if true.\n    /// @return buyAmount Amount of `tokens[-1]` bought.\n    function sellToUniswap(\n        IERC20TokenV06[] calldata tokens,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        bool isSushi\n    )\n        external\n        payable\n        returns (uint256 buyAmount);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/michaelzhu/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap",
                        "evm.methodIdentifiers"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
