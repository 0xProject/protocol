{
    "schemaVersion": "2.0.0",
    "contractName": "MultiplexFeature",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "zeroExAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IEtherTokenV06",
                        "name": "weth_",
                        "type": "address"
                    },
                    {
                        "internalType": "contract ILiquidityProviderSandbox",
                        "name": "sandbox_",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "greedyTokensBloomFilter",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "bytes32",
                        "name": "orderHash",
                        "type": "bytes32"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint64",
                        "name": "expiry",
                        "type": "uint64"
                    }
                ],
                "name": "ExpiredRfqOrder",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "provider",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "recipient",
                        "type": "address"
                    }
                ],
                "name": "LiquidityProviderSwap",
                "type": "event"
            },
            {
                "inputs": [],
                "name": "EIP712_DOMAIN_SEPARATOR",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FEATURE_NAME",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FEATURE_VERSION",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "GREEDY_TOKENS_BLOOM_FILTER",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address[]",
                                "name": "tokens",
                                "type": "address[]"
                            },
                            {
                                "internalType": "uint256",
                                "name": "sellAmount",
                                "type": "uint256"
                            },
                            {
                                "components": [
                                    {
                                        "internalType": "bytes4",
                                        "name": "selector",
                                        "type": "bytes4"
                                    },
                                    {
                                        "internalType": "bytes",
                                        "name": "data",
                                        "type": "bytes"
                                    }
                                ],
                                "internalType": "struct IMultiplexFeature.WrappedMultiHopCall[]",
                                "name": "calls",
                                "type": "tuple[]"
                            }
                        ],
                        "internalType": "struct IMultiplexFeature.MultiHopFillData",
                        "name": "fillData",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "totalEth",
                        "type": "uint256"
                    }
                ],
                "name": "_multiHopFill",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "remainingEth",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "contract ILiquidityProvider",
                        "name": "provider",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "recipient",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "auxiliaryData",
                        "type": "bytes"
                    }
                ],
                "name": "_sellToLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bool",
                        "name": "isSushi",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pairAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "recipient",
                        "type": "address"
                    }
                ],
                "name": "_sellToUniswap",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "inputToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "outputToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "sellAmount",
                                "type": "uint256"
                            },
                            {
                                "components": [
                                    {
                                        "internalType": "bytes4",
                                        "name": "selector",
                                        "type": "bytes4"
                                    },
                                    {
                                        "internalType": "uint256",
                                        "name": "sellAmount",
                                        "type": "uint256"
                                    },
                                    {
                                        "internalType": "bytes",
                                        "name": "data",
                                        "type": "bytes"
                                    }
                                ],
                                "internalType": "struct IMultiplexFeature.WrappedBatchCall[]",
                                "name": "calls",
                                "type": "tuple[]"
                            }
                        ],
                        "internalType": "struct IMultiplexFeature.BatchFillData",
                        "name": "fillData",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minBuyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "batchFill",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "migrate",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address[]",
                                "name": "tokens",
                                "type": "address[]"
                            },
                            {
                                "internalType": "uint256",
                                "name": "sellAmount",
                                "type": "uint256"
                            },
                            {
                                "components": [
                                    {
                                        "internalType": "bytes4",
                                        "name": "selector",
                                        "type": "bytes4"
                                    },
                                    {
                                        "internalType": "bytes",
                                        "name": "data",
                                        "type": "bytes"
                                    }
                                ],
                                "internalType": "struct IMultiplexFeature.WrappedMultiHopCall[]",
                                "name": "calls",
                                "type": "tuple[]"
                            }
                        ],
                        "internalType": "struct IMultiplexFeature.MultiHopFillData",
                        "name": "fillData",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minBuyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "multiHopFill",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "sandbox",
                "outputs": [
                    {
                        "internalType": "contract ILiquidityProviderSandbox",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "details": "This feature enables efficient batch and multi-hop trades      using different liquidity sources.",
            "kind": "dev",
            "methods": {
                "batchFill((address,address,uint256,(bytes4,uint256,bytes)[]),uint256)": {
                    "details": "Executes a batch of fills selling `fillData.inputToken`      for `fillData.outputToken` in sequence. Refer to the      internal variant `_batchFill` for the allowed nested      operations.",
                    "params": {
                        "fillData": "Encodes the input/output tokens, the sell        amount, and the nested operations for this batch fill.",
                        "minBuyAmount": "The minimum amount of `fillData.outputToken`        to buy. Reverts if this amount is not met."
                    },
                    "returns": {
                        "outputTokenAmount": "The amount of the output token bought."
                    }
                },
                "migrate()": {
                    "details": "Initialize and register this feature.      Should be delegatecalled by `Migrate.migrate()`.",
                    "returns": {
                        "success": "`LibMigrate.SUCCESS` on success."
                    }
                },
                "multiHopFill((address[],uint256,(bytes4,bytes)[]),uint256)": {
                    "details": "Executes a sequence of fills \"hopping\" through the      path of tokens given by `fillData.tokens`. Refer to the      internal variant `_multiHopFill` for the allowed nested      operations.",
                    "params": {
                        "fillData": "Encodes the path of tokens, the sell amount,        and the nested operations for this multi-hop fill.",
                        "minBuyAmount": "The minimum amount of the output token        to buy. Reverts if this amount is not met."
                    },
                    "returns": {
                        "outputTokenAmount": "The amount of the output token bought."
                    }
                }
            },
            "stateVariables": {
                "FEATURE_NAME": {
                    "details": "Name of this feature."
                },
                "FEATURE_VERSION": {
                    "details": "Version of this feature."
                },
                "sandbox": {
                    "details": "The sandbox contract address."
                },
                "weth": {
                    "details": "The WETH token contract."
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x61014060405262000014600160008062000112565b60e0523480156200002457600080fd5b506040516200498c3803806200498c833981016040819052620000479162000144565b3060601b608052604051819085904690620000cf907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907f9e5dae0addaf20578aeb5d70341d092b53b4e14480ac5726438fd436df7ba427907f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c90859087906020016200019d565b60408051601f19818403018152919052805160209091012060a052505060c052506001600160601b0319606092831b811661010052911b166101205250620001e2565b6bffffffff0000000000000000604084901b1667ffffffff00000000602084901b161763ffffffff8216179392505050565b600080600080608085870312156200015a578384fd5b84516200016781620001c9565b60208601519094506200017a81620001c9565b60408601519093506200018d81620001c9565b6060959095015193969295505050565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b6001600160a01b0381168114620001df57600080fd5b50565b60805160601c60a05160c05160e0516101005160601c6101205160601c61473462000258600039806102365280611254528061132a52806113a5525080610b665280610c335280610d8f52508061021252508061118852806127ff5250806111ac5280612a2752508061166552506147346000f3fe6080604052600436106100bc5760003560e01c8063a82b9f3a11610074578063d925a56d1161004e578063d925a56d146101c6578063dab400f3146101db578063e6f90561146101f0576100bc565b8063a82b9f3a14610165578063afc6728e14610193578063d64d051a146101a6576100bc565b806321c184b6116100a557806321c184b61461010e5780636ae4b4f7146101215780638fd3ab8014610143576100bc565b8063031b905c146100c15780631984916f146100ec575b600080fd5b3480156100cd57600080fd5b506100d6610210565b6040516100e39190613aac565b60405180910390f35b3480156100f857600080fd5b50610101610234565b6040516100e391906139a5565b6100d661011c366004613545565b610258565b34801561012d57600080fd5b506101366103a4565b6040516100e39190613c2a565b34801561014f57600080fd5b506101586103dd565b6040516100e39190613aeb565b34801561017157600080fd5b50610185610180366004613545565b610456565b6040516100e392919061453f565b6100d66101a13660046134a2565b610e4d565b3480156101b257600080fd5b506100d66101c1366004613263565b610f54565b3480156101d257600080fd5b506100d6611186565b3480156101e757600080fd5b506100d66111aa565b3480156101fc57600080fd5b506100d661020b3660046133f8565b6111ce565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b8151805160009182917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061028d57fe5b602002602001015190506102c0338273ffffffffffffffffffffffffffffffffffffffff1661148a90919063ffffffff16565b915060006102ce4734611563565b90506102da8534610456565b5061030790508361030173ffffffffffffffffffffffffffffffffffffffff85163361148a565b90611563565b92508383101561034c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613c3d565b60405180910390fd5b4781811015610387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613fce565b8181111561039b5761039b33838303611587565b50505092915050565b6040518060400160405280601081526020017f4d756c7469706c6578466561747572650000000000000000000000000000000081525081565b60006104087fafc6728e0000000000000000000000000000000000000000000000000000000061162f565b6104317f21c184b60000000000000000000000000000000000000000000000000000000061162f565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b6000808360400151516001018460000151511461049f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390614088565b50506020820151816000805b8560400151518114610e44576104bf612c55565b866040015182815181106104cf57fe5b602090810291909101015180519091507fffffffff00000000000000000000000000000000000000000000000000000000167fd64d051a0000000000000000000000000000000000000000000000000000000014156105995760006105388860400151846116c2565b90506060600083602001518060200190518101906105569190613213565b915091506105678289838987610f54565b975073ffffffffffffffffffffffffffffffffffffffff8316331461058c578261058f565b60005b9550505050610e3b565b80517fffffffff00000000000000000000000000000000000000000000000000000000167fe6f905610000000000000000000000000000000000000000000000000000000014156107855760006105f48860400151846116c2565b905073ffffffffffffffffffffffffffffffffffffffff84166106f75760006060836020015180602001905181019061062d919061309c565b915091506106678a60000151868151811061064457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16611994565b1561068c5761067688886119c6565b97506106828289611587565b87870396506106af565b6106af8a60000151868151811061069f57fe5b602002602001015133848b6119dc565b6106ee8a6000015186815181106106c257fe5b60200260200101518b6000015187600101815181106106dd57fe5b60200260200101518a8587866111ce565b97505050610757565b60608260200151806020019051810190610711919061309c565b9150506107538960000151858151811061072757fe5b60200260200101518a60000151866001018151811061074257fe5b6020026020010151898886866111ce565b9650505b73ffffffffffffffffffffffffffffffffffffffff8116331461077a578061077d565b60005b935050610e3b565b80517fffffffff00000000000000000000000000000000000000000000000000000000167f62597192000000000000000000000000000000000000000000000000000000001415610ad3576107d8612c6d565b87518051849081106107e657fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1690820152875180516001850190811061081d57fe5b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff166040808301919091526000608083015288015161085b90846116c2565b73ffffffffffffffffffffffffffffffffffffffff9081168252841615610888576000606082015261097b565b805173ffffffffffffffffffffffffffffffffffffffff1633148015906108cf57506108cd816020015173ffffffffffffffffffffffffffffffffffffffff16611994565b155b156109735760003073ffffffffffffffffffffffffffffffffffffffff1663f028e9be6040518163ffffffff1660e01b815260040160206040518083038186803b15801561091c57600080fd5b505afa158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190613486565b9050610966826020015133838a6119dc565b506000606082015261097b565b606081018690525b6000826020015180602001905181019061099591906132e2565b60a084019190915290506109a981876119c6565b90508015610a0a576109d4826020015173ffffffffffffffffffffffffffffffffffffffff16611994565b610a0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613c9a565b6040517f6259719200000000000000000000000000000000000000000000000000000000815230906362597192908390610a4890869060040161444a565b6020604051808303818588803b158015610a6157600080fd5b505af1158015610a75573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a9a91906137f6565b8251909750958190039573ffffffffffffffffffffffffffffffffffffffff163314610ac7578151610aca565b60005b94505050610e3b565b80517fffffffff00000000000000000000000000000000000000000000000000000000167fd0e30db0000000000000000000000000000000000000000000000000000000001415610cc6578115610b56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390614313565b6000610b6286866119c6565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610bcc57600080fd5b505af1158015610be0573d6000803e3d6000fd5b5050505050610bf38860400151846116c2565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815290945073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90610c6a9087908590600401613a86565b602060405180830381600087803b158015610c8457600080fd5b505af1158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbc91906133dc565b5090930392610e3b565b80517fffffffff00000000000000000000000000000000000000000000000000000000167f2e1a7d4d000000000000000000000000000000000000000000000000000000001415610e09576001876040015151038214610d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610343906141fc565b6040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610dc4908890600401613aac565b600060405180830381600087803b158015610dde57600080fd5b505af1158015610df2573d6000803e3d6000fd5b50505050610e003386611587565b60009250610e3b565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613f71565b506001016104ab565b50509250929050565b6020820151600090610e759073ffffffffffffffffffffffffffffffffffffffff163361148a565b90506000610e834734611563565b9050610e8e84611be4565b5050610ec18261030133876020015173ffffffffffffffffffffffffffffffffffffffff1661148a90919063ffffffff16565b915082821015610efd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613e91565b4781811015610f38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103439061419f565b81811115610f4c57610f4c33838303611587565b505092915050565b60006001865111610f91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610343906142b6565b73ffffffffffffffffffffffffffffffffffffffff831661100157610fdf86600081518110610fbc57fe5b602002602001015187600181518110610fd157fe5b602002602001015186612422565b925061100186600081518110610ff157fe5b60200260200101513385886119dc565b60005b600187510381101561117c5760008088838151811061101f57fe5b602002602001015189846001018151811061103657fe5b60200260200101519150915061104e8683838b612579565b93506000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161061108e57856000611092565b6000865b91509150600060028c510386106110a957876110ca565b6110ca848d88600201815181106110bc57fe5b60200260200101518c612422565b604080516000815260208101918290527f022c0d9f0000000000000000000000000000000000000000000000000000000090915290915073ffffffffffffffffffffffffffffffffffffffff8a169063022c0d9f90611132908690869086906024810161454d565b600060405180830381600087803b15801561114c57600080fd5b505af1158015611160573d6000803e3d6000fd5b50505050809850869a5050505050508080600101915050611004565b5095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806111f173ffffffffffffffffffffffffffffffffffffffff88168561148a565b90506112128873ffffffffffffffffffffffffffffffffffffffff16611994565b156112c9576040517f6f025ee600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636f025ee6906112929088908b9089906000908a906004016139ed565b600060405180830381600087803b1580156112ac57600080fd5b505af11580156112c0573d6000803e3d6000fd5b50505050611418565b6112e88773ffffffffffffffffffffffffffffffffffffffff16611994565b15611368576040517f1454913700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906314549137906112929088908c9089906000908a906004016139ed565b6040517fbb503e2100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063bb503e21906113e59088908c908c908a906000908b90600401613b97565b600060405180830381600087803b1580156113ff57600080fd5b505af1158015611413573d6000803e3d6000fd5b505050505b61143c8161030173ffffffffffffffffffffffffffffffffffffffff8a168761148a565b91507f40a6ba9513d09e3488135e0e0d10e2d4382b792720155b144cbea89ac9db6d3488888885898960405161147796959493929190613a3f565b60405180910390a1509695505050505050565b600061149583611994565b156114b8575073ffffffffffffffffffffffffffffffffffffffff81163161155d565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906370a082319061150a9085906004016139a5565b60206040518083038186803b15801561152257600080fd5b505afa158015611536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155a91906137f6565b90505b92915050565b6000828211156115815761158161157c60028585612737565b6127dc565b50900390565b60008273ffffffffffffffffffffffffffffffffffffffff16826040516115ad906139a2565b60006040518083038185875af1925050503d80600081146115ea576040519150601f19603f3d011682016040523d82523d6000602084013e6115ef565b606091505b505090508061162a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610343906140e5565b505050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb9061168d9084907f000000000000000000000000000000000000000000000000000000000000000090600401613b18565b600060405180830381600087803b1580156116a757600080fd5b505af11580156116bb573d6000803e3d6000fd5b5050505050565b815133907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821015611947576116f7612c55565b83836001018151811061170657fe5b602090810291909101015180519091507fffffffff00000000000000000000000000000000000000000000000000000000167fd64d051a0000000000000000000000000000000000000000000000000000000014156117bb5760606000826020015180602001905181019061177b9190613213565b915091506117b28260008151811061178f57fe5b6020026020010151836001815181106117a457fe5b602002602001015183612422565b93505050611945565b80517fffffffff00000000000000000000000000000000000000000000000000000000167fe6f9056100000000000000000000000000000000000000000000000000000000141561182657806020015180602001905181019061181e919061309c565b509150611945565b80517fffffffff00000000000000000000000000000000000000000000000000000000167f2e1a7d4d00000000000000000000000000000000000000000000000000000000141561187957309150611945565b80517fffffffff00000000000000000000000000000000000000000000000000000000167f62597192000000000000000000000000000000000000000000000000000000001415611945573073ffffffffffffffffffffffffffffffffffffffff1663f028e9be6040518163ffffffff1660e01b815260040160206040518083038186803b15801561190a57600080fd5b505afa15801561191e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119429190613486565b91505b505b73ffffffffffffffffffffffffffffffffffffffff811661155d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103439061402b565b73ffffffffffffffffffffffffffffffffffffffff811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14919050565b60008183106119d5578161155a565b5090919050565b6000606073ffffffffffffffffffffffffffffffffffffffff8616301415611a30576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390614259565b611a39866127e4565b15611b0d576040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152839073ffffffffffffffffffffffffffffffffffffffff88169063dd62ed3e90611a9490899030906004016139c6565b60206040518083038186803b158015611aac57600080fd5b505afa158015611ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae491906137f6565b1015611b0d57611b068686868660405180602001604052806000815250612824565b5050611bde565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015273ffffffffffffffffffffffffffffffffffffffff85166024820152836044820152600080606483600073ffffffffffffffffffffffffffffffffffffffff8c165af192503d806000602084013e60016020830151146020821015168115178416935083611bc7578082528192508060208301016040525b505081611bdb57611bdb8686868685612824565b50505b50505050565b60003481805b846060015151811461241b5784604001518210611c065761241b565b611c0e612ce5565b85606001518281518110611c1e57fe5b602002602001015190506000611c4e8260200151611c49868a6040015161156390919063ffffffff16565b6119c6565b82519091507fffffffff00000000000000000000000000000000000000000000000000000000167fa656186b000000000000000000000000000000000000000000000000000000001415611ede57611ca4612d04565b611cac612d58565b8360400151806020019051810190611cc49190613692565b915091504267ffffffffffffffff1682610100015167ffffffffffffffff1611611d4b576000611cfb611cf6846128ec565b612a23565b90507fd9ee00a67daf7d99c37893015dc900862c9a02650ef2d318697e502e5fb8bbe2818460800151856101000151604051611d3993929190613ab5565b60405180910390a15050505050612413565b886000015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff16148015611dc15750886020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff16145b611df7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613db1565b3063a656186b8383611e0887612a75565b336040518563ffffffff1660e01b8152600401611e289493929190614370565b6040805180830381600087803b158015611e4157600080fd5b505af1925050508015611e8f575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611e8c918101906137c8565b60015b611e9857611ed7565b611eb4886fffffffffffffffffffffffffffffffff8416612aa1565b9750611ed28a6fffffffffffffffffffffffffffffffff8316612aa1565b995050505b5050612410565b81517fffffffff00000000000000000000000000000000000000000000000000000000167fd64d051a00000000000000000000000000000000000000000000000000000000141561205857606060008360400151806020019051810190611f459190613213565b915091506002825110158015611f9e5750886000015173ffffffffffffffffffffffffffffffffffffffff1682600081518110611f7e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16145b8015611ff05750886020015173ffffffffffffffffffffffffffffffffffffffff1682600184510381518110611fd057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16145b612026576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390614142565b6000612036838584600033610f54565b90506120428785612aa1565b965061204e8982612aa1565b9850505050612410565b81517fffffffff00000000000000000000000000000000000000000000000000000000167fe6f90561000000000000000000000000000000000000000000000000000000001415612131576000606083604001518060200190518101906120bf919061309c565b915091506120e6896000015173ffffffffffffffffffffffffffffffffffffffff16611994565b1561210b576120f583886119c6565b92506121018284611587565b8287039650612119565b8851612119903384866119dc565b60006120368a600001518b60200151868633876111ce565b81517fffffffff00000000000000000000000000000000000000000000000000000000167f6259719200000000000000000000000000000000000000000000000000000000141561231457612184612c6d565b338152875173ffffffffffffffffffffffffffffffffffffffff908116602080840191909152808a01519091166040808401919091526060830184905260006080840181905290850151805191926121e1928201810191016132e2565b60a084019190915290506121f581886119c6565b9050801561225657612220826020015173ffffffffffffffffffffffffffffffffffffffff16611994565b612256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613cf7565b6040517f625971920000000000000000000000000000000000000000000000000000000081523090636259719290839061229490869060040161444a565b6020604051808303818588803b1580156122ad57600080fd5b505af1935050505080156122fc575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526122f9918101906137f6565b60015b61230557611ed7565b96819003966120428785612aa1565b81517fffffffff00000000000000000000000000000000000000000000000000000000167fa82b9f3a0000000000000000000000000000000000000000000000000000000014156123de57612367612d81565b6000836040015180602001905181019061238191906130eb565b604085019190915290835260208301849052905061239f81886119c6565b905080870396506000806123b38484610456565b90925090506123c28886612aa1565b97506123ce8a83612aa1565b9950808901985050505050612410565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613d54565b50505b600101611bea565b5050915091565b60008060008473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1610612461578486612464565b85855b9150915083156125015773c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac82826040516020016124969291906138cf565b604051602081830303815290604052805190602001207fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c63036040516020016124df9392919061393f565b6040516020818303038152906040528051906020012060001c92505050612572565b735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f82826040516020016125299291906138cf565b604051602081830303815290604052805190602001207f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f6040516020016124df9392919061393f565b9392505050565b60008082116125b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613eee565b6000808673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156125fd57600080fd5b505afa158015612611573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612635919061377c565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060008211801561266a5750600081115b6126a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613e0e565b6000808673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16106126dd5782846126e0565b83835b909250905060006126f3876103e5612abd565b905060006127018284612abd565b9050600061271b83612715876103e8612abd565b90612aa1565b905080828161272657fe5b049c9b505050505050505050505050565b606063e946c1bb60e01b84848460405160240161275693929190613bf2565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b600081815260209020600160ff92831681901b929091161b177f000000000000000000000000000000000000000000000000000000000000000081161490565b6040517f89dd02e700000000000000000000000000000000000000000000000000000000815230906389dd02e790612866908890889088908890600401613b60565b600060405180830381600087803b15801561288057600080fd5b505af1925050508015612891575060015b6116bb573d8080156128bf576040519150601f19603f3d011682016040523d82523d6000602084013e6128c4565b606091505b506128e661157c878787878751600014156128df57866128e1565b875b612aee565b506116bb565b60006040517fe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da98152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff166080820152608083015173ffffffffffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015161010082015261010083015167ffffffffffffffff166101208201526101208301516101408201526101608120915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001612a58929190613909565b604051602081830303815290604052805190602001209050919050565b60006fffffffffffffffffffffffffffffffff821115612a9d57612a9d61157c600384612bb3565b5090565b60008282018381101561155a5761155a61157c60008686612737565b600082612acc5750600061155d565b82820282848281612ad957fe5b041461155a5761155a61157c60018686612737565b60607fdfdc6f57cf82bede92bcfdd44fedb82b2d5cecabf56ec21964db6ee2c3e82cf48686868686604051602401612b2a9594939291906139ed565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290505b95945050505050565b606063c996af7b60e01b8383604051602401612bd0929190613c13565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b60408051808201909152600081526060602082015290565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b6040805160608082018352600080835260208301529181019190915290565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b604080516080810190915280600081526000602082018190526040820181905260609091015290565b60405180606001604052806060815260200160008152602001606081525090565b805161155d81614654565b600082601f830112612dbd578081fd5b8135612dd0612dcb826145b9565b614592565b818152915060208083019084810181840286018201871015612df157600080fd5b60005b84811015612e19578135612e0781614654565b84529282019290820190600101612df4565b505050505092915050565b600082601f830112612e34578081fd5b8151612e42612dcb826145b9565b818152915060208083019084810181840286018201871015612e6357600080fd5b60005b84811015612e19578151612e7981614654565b84529282019290820190600101612e66565b600082601f830112612e9b578081fd5b8135612ea9612dcb826145b9565b818152915060208083019084810160005b84811015612e1957813587016060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c03011215612ef957600080fd5b612f0281614592565b85830135612f0f81614684565b815260408381013587830152918301359167ffffffffffffffff831115612f3557600080fd5b612f438c8885870101612f66565b90820152865250509282019290820190600101612eba565b805161155d81614684565b600082601f830112612f76578081fd5b8135612f84612dcb826145d9565b9150808252836020828501011115612f9b57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112612fc4578081fd5b8151612fd2612dcb826145d9565b9150808252836020828501011115612fe957600080fd5b612ffa81602084016020860161461b565b5092915050565b600060808284031215613012578081fd5b61301c6080614592565b905081516004811061302d57600080fd5b8152602082015160ff8116811461304357600080fd5b80602083015250604082015160408201526060820151606082015292915050565b80516fffffffffffffffffffffffffffffffff8116811461155d57600080fd5b805167ffffffffffffffff8116811461155d57600080fd5b600080604083850312156130ae578182fd5b82516130b981614654565b602084015190925067ffffffffffffffff8111156130d5578182fd5b6130e185828601612fb4565b9150509250929050565b6000806000606084860312156130ff578081fd5b835167ffffffffffffffff80821115613116578283fd5b61312287838801612e24565b94506020860151915080821115613137578283fd5b818601915086601f83011261314a578283fd5b8151613158612dcb826145b9565b818152602080820191908501865b848110156131fb578151870160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f030112156131a3578889fd5b6131ad6040614592565b6131ba8e60208401612f5b565b81526040820151888111156131cd578a8bfd5b6131dc8f602083860101612fb4565b6020838101919091529187525094850194929092019150600101613166565b50508096505050505050604084015190509250925092565b60008060408385031215613225578182fd5b825167ffffffffffffffff81111561323b578283fd5b61324785828601612e24565b925050602083015161325881614676565b809150509250929050565b600080600080600060a0868803121561327a578283fd5b853567ffffffffffffffff811115613290578384fd5b61329c88828901612dad565b9550506020860135935060408601356132b481614676565b925060608601356132c481614654565b915060808601356132d481614654565b809150509295509295909350565b600080604083850312156132f4578182fd5b825167ffffffffffffffff8082111561330b578384fd5b818501915085601f83011261331e578384fd5b815161332c612dcb826145b9565b81815260208082019190858101885b858110156133c8578151880160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f03011215613378578a8bfd5b6133826040614592565b8482015161338f816146ec565b81526040820151898111156133a2578c8dfd5b6133b08f8783860101612fb4565b8287015250865250938201939082019060010161333b565b505097909701519698969750505050505050565b6000602082840312156133ed578081fd5b815161155a81614676565b60008060008060008060c08789031215613410578384fd5b863561341b81614654565b9550602087013561342b81614654565b945060408701359350606087013561344281614654565b9250608087013561345281614654565b915060a087013567ffffffffffffffff81111561346d578182fd5b61347989828a01612f66565b9150509295509295509295565b600060208284031215613497578081fd5b815161155a81614654565b600080604083850312156134b4578182fd5b823567ffffffffffffffff808211156134cb578384fd5b90840190608082870312156134de578384fd5b6134e86080614592565b82356134f381614654565b8152602083013561350381614654565b602082015260408381013590820152606083013582811115613523578586fd5b61352f88828601612e8b565b6060830152509660209590950135955050505050565b60008060408385031215613557578182fd5b67ffffffffffffffff808435111561356d578283fd5b8335840160608187031215613580578384fd5b61358a6060614592565b8282351115613597578485fd5b6135a48783358401612dad565b8152602080830135818301526040830135848111156135c1578687fd5b80840193505087601f8401126135d5578586fd5b6135e2612dcb84356145b9565b8335815281810190828501885b863581101561367d578135870160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f0301121561362d578a8bfd5b6136376040614592565b8682013561364481614684565b815260408201358a811115613657578c8dfd5b6136658f8983860101612f66565b828901525085525092840192908401906001016135ef565b50506040840152509097950135955050505050565b6000808284036101c08112156136a6578283fd5b610140808212156136b5578384fd5b6136be81614592565b91506136ca8686612da2565b82526136d98660208701612da2565b60208301526136eb8660408701613064565b60408301526136fd8660608701613064565b606083015261370f8660808701612da2565b60808301526137218660a08701612da2565b60a08301526137338660c08701612da2565b60c083015260e085015160e083015261010061375187828801613084565b818401525061012080860151818401525081935061377186828701613001565b925050509250929050565b600080600060608486031215613790578081fd5b835161379b816146b2565b60208501519093506137ac816146b2565b60408501519092506137bd816146ec565b809150509250925092565b600080604083850312156137da578182fd5b82516137e5816146ce565b6020840151909250613258816146ce565b600060208284031215613807578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845261384081602086016020860161461b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805161387d81614647565b825260208181015160ff169083015260408082015190830152606090810151910152565b6fffffffffffffffffffffffffffffffff169052565b63ffffffff169052565b67ffffffffffffffff169052565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606093841b811682529190921b16601482015260280190565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b7fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352808716602084015280861660408401525083606083015260a06080830152613a3460a0830184613828565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff91909116602083015267ffffffffffffffff16604082015260600190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b600073ffffffffffffffffffffffffffffffffffffffff80891683528088166020840152808716604084015280861660608401525083608083015260c060a0830152613be660c0830184613828565b98975050505050505050565b60608101613bff85614647565b938152602081019290925260409091015290565b60408101613c2084614647565b9281526020015290565b60006020825261155a6020830184613828565b6020808252602a908201527f4d756c7469706c6578466561747572653a3a6d756c7469486f7046696c6c2f5560408201527f4e444552424f5547485400000000000000000000000000000000000000000000606082015260800190565b60208082526032908201527f4d756c7469706c6578466561747572653a3a5f6d756c7469486f7046696c6c2f60408201527f4554485f5452414e53464f524d5f4f4e4c590000000000000000000000000000606082015260800190565b6020808252602f908201527f4d756c7469706c6578466561747572653a3a5f626174636846696c6c2f45544860408201527f5f5452414e53464f524d5f4f4e4c590000000000000000000000000000000000606082015260800190565b60208082526032908201527f4d756c7469706c6578466561747572653a3a5f626174636846696c6c2f554e5260408201527f45434f474e495a45445f53454c4543544f520000000000000000000000000000606082015260800190565b60208082526035908201527f4d756c7469706c6578466561747572653a3a5f626174636846696c6c2f52465160408201527f5f4f524445525f494e56414c49445f544f4b454e530000000000000000000000606082015260800190565b60208082526044908201527f4d756c7469706c6578466561747572653a3a5f636f6d70757465556e6973776160408201527f704f7574707574416d6f756e742f494e53554646494349454e545f4c4951554960608201527f4449545900000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526027908201527f4d756c7469706c6578466561747572653a3a626174636846696c6c2f554e444560408201527f52424f5547485400000000000000000000000000000000000000000000000000606082015260800190565b60208082526047908201527f4d756c7469706c6578466561747572653a3a5f636f6d70757465556e6973776160408201527f704f7574707574416d6f756e742f494e53554646494349454e545f494e50555460608201527f5f414d4f554e5400000000000000000000000000000000000000000000000000608082015260a00190565b60208082526035908201527f4d756c7469706c6578466561747572653a3a5f6d756c7469486f7046696c6c2f60408201527f554e5245434f474e495a45445f53454c4543544f520000000000000000000000606082015260800190565b6020808252602c908201527f4d756c7469706c6578466561747572653a3a6d756c7469486f7046696c6c2f4f60408201527f5645525350454e545f4554480000000000000000000000000000000000000000606082015260800190565b60208082526038908201527f4d756c7469706c6578466561747572653a3a5f636f6d70757465486f7052656360408201527f697069656e742f524543495049454e545f49535f4e554c4c0000000000000000606082015260800190565b60208082526038908201527f4d756c7469706c6578466561747572653a3a5f6d756c7469486f7046696c6c2f60408201527f4d49534d4154434845445f41525241595f4c454e475448530000000000000000606082015260800190565b6020808252602e908201527f4d756c7469706c6578466561747572653a3a5f7472616e736665724574682f5460408201527f52414e534645525f46414c494544000000000000000000000000000000000000606082015260800190565b60208082526033908201527f4d756c7469706c6578466561747572653a3a5f626174636846696c6c2f554e4960408201527f535741505f494e56414c49445f544f4b454e5300000000000000000000000000606082015260800190565b60208082526029908201527f4d756c7469706c6578466561747572653a3a626174636846696c6c2f4f56455260408201527f5350454e545f4554480000000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f4d756c7469706c6578466561747572653a3a5f6d756c7469486f7046696c6c2f60408201527f57495448445241575f4c4153545f484f505f4f4e4c5900000000000000000000606082015260800190565b60208082526024908201527f466978696e546f6b656e5370656e6465722f43414e4e4f545f494e564f4b455f60408201527f53454c4600000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526034908201527f4d756c7469706c6578466561747572653a3a5f73656c6c546f556e697377617060408201527f2f496e76616c6964546f6b656e734c656e677468000000000000000000000000606082015260800190565b60208082526036908201527f4d756c7469706c6578466561747572653a3a5f6d756c7469486f7046696c6c2f60408201527f4445504f5349545f46495253545f484f505f4f4e4c5900000000000000000000606082015260800190565b60006102008201905061438482875161380e565b6020860151614396602084018261380e565b5060408601516143a960408401826138a1565b5060608601516143bc60608401826138a1565b5060808601516143cf608084018261380e565b5060a08601516143e260a084018261380e565b5060c08601516143f560c084018261380e565b5060e086015160e083015261010080870151614413828501826138c1565b5050610120868101519083015261442e610140830186613872565b61443c6101c08301856138a1565b612baa6101e083018461380e565b6000602080835260e0830173ffffffffffffffffffffffffffffffffffffffff808651168386015282860151604082821681880152828189015116606088015260608801516080880152608088015160a088015260a0880151925060c0808801528391508251808552610100945084880192508486820289010194508584019350865b81811015614531577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0089870301845284516145098782516138b7565b87015186880184905261451e87850182613828565b96505093860193928601926001016144cd565b509398975050505050505050565b918252602082015260400190565b600085825284602083015273ffffffffffffffffffffffffffffffffffffffff84166040830152608060608301526145886080830184613828565b9695505050505050565b60405181810167ffffffffffffffff811182821017156145b157600080fd5b604052919050565b600067ffffffffffffffff8211156145cf578081fd5b5060209081020190565b600067ffffffffffffffff8211156145ef578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561463657818101518382015260200161461e565b83811115611bde5750506000910152565b6004811061465157fe5b50565b73ffffffffffffffffffffffffffffffffffffffff8116811461465157600080fd5b801515811461465157600080fd5b7fffffffff000000000000000000000000000000000000000000000000000000008116811461465157600080fd5b6dffffffffffffffffffffffffffff8116811461465157600080fd5b6fffffffffffffffffffffffffffffffff8116811461465157600080fd5b63ffffffff8116811461465157600080fdfea26469706673582212207dc5443cec6e2afe593b266a1796a2bd97301941cf3ef55d598406de4e2a75e464736f6c634300060c0033",
                "opcodes": "PUSH2 0x140 PUSH1 0x40 MSTORE PUSH3 0x14 PUSH1 0x1 PUSH1 0x0 DUP1 PUSH3 0x112 JUMP JUMPDEST PUSH1 0xE0 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x498C CODESIZE SUB DUP1 PUSH3 0x498C DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x47 SWAP2 PUSH3 0x144 JUMP JUMPDEST ADDRESS PUSH1 0x60 SHL PUSH1 0x80 MSTORE PUSH1 0x40 MLOAD DUP2 SWAP1 DUP6 SWAP1 CHAINID SWAP1 PUSH3 0xCF SWAP1 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F SWAP1 PUSH32 0x9E5DAE0ADDAF20578AEB5D70341D092B53B4E14480AC5726438FD436DF7BA427 SWAP1 PUSH32 0x6C015BD22B4C69690933C1058878EBDFEF31F9AAAE40BBE86D8A09FE1B2972C SWAP1 DUP6 SWAP1 DUP8 SWAP1 PUSH1 0x20 ADD PUSH3 0x19D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0xA0 MSTORE POP POP PUSH1 0xC0 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH2 0x100 MSTORE SWAP2 SHL AND PUSH2 0x120 MSTORE POP PUSH3 0x1E2 JUMP JUMPDEST PUSH12 0xFFFFFFFF0000000000000000 PUSH1 0x40 DUP5 SWAP1 SHL AND PUSH8 0xFFFFFFFF00000000 PUSH1 0x20 DUP5 SWAP1 SHL AND OR PUSH4 0xFFFFFFFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x15A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 MLOAD PUSH3 0x167 DUP2 PUSH3 0x1C9 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH3 0x17A DUP2 PUSH3 0x1C9 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x18D DUP2 PUSH3 0x1C9 JUMP JUMPDEST PUSH1 0x60 SWAP6 SWAP1 SWAP6 ADD MLOAD SWAP4 SWAP7 SWAP3 SWAP6 POP POP POP JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x60 SHR PUSH2 0x120 MLOAD PUSH1 0x60 SHR PUSH2 0x4734 PUSH3 0x258 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x236 MSTORE DUP1 PUSH2 0x1254 MSTORE DUP1 PUSH2 0x132A MSTORE DUP1 PUSH2 0x13A5 MSTORE POP DUP1 PUSH2 0xB66 MSTORE DUP1 PUSH2 0xC33 MSTORE DUP1 PUSH2 0xD8F MSTORE POP DUP1 PUSH2 0x212 MSTORE POP DUP1 PUSH2 0x1188 MSTORE DUP1 PUSH2 0x27FF MSTORE POP DUP1 PUSH2 0x11AC MSTORE DUP1 PUSH2 0x2A27 MSTORE POP DUP1 PUSH2 0x1665 MSTORE POP PUSH2 0x4734 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA82B9F3A GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xD925A56D GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xD925A56D EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xDAB400F3 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0xE6F90561 EQ PUSH2 0x1F0 JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0xA82B9F3A EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0xAFC6728E EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0xD64D051A EQ PUSH2 0x1A6 JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x21C184B6 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x21C184B6 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0x143 JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x1984916F EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x210 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x3AAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x101 PUSH2 0x234 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x39A5 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x3545 JUMP JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x136 PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x3C2A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0x3DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x3AEB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x185 PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0x3545 JUMP JUMPDEST PUSH2 0x456 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP3 SWAP2 SWAP1 PUSH2 0x453F JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x34A2 JUMP JUMPDEST PUSH2 0xE4D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3263 JUMP JUMPDEST PUSH2 0xF54 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x1186 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x11AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x20B CALLDATASIZE PUSH1 0x4 PUSH2 0x33F8 JUMP JUMPDEST PUSH2 0x11CE JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST DUP2 MLOAD DUP1 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0x28D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x2C0 CALLER DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x148A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x2CE SELFBALANCE CALLVALUE PUSH2 0x1563 JUMP JUMPDEST SWAP1 POP PUSH2 0x2DA DUP6 CALLVALUE PUSH2 0x456 JUMP JUMPDEST POP PUSH2 0x307 SWAP1 POP DUP4 PUSH2 0x301 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND CALLER PUSH2 0x148A JUMP JUMPDEST SWAP1 PUSH2 0x1563 JUMP JUMPDEST SWAP3 POP DUP4 DUP4 LT ISZERO PUSH2 0x34C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3C3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SELFBALANCE DUP2 DUP2 LT ISZERO PUSH2 0x387 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3FCE JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x39B JUMPI PUSH2 0x39B CALLER DUP4 DUP4 SUB PUSH2 0x1587 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D756C7469706C65784665617475726500000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x408 PUSH32 0xAFC6728E00000000000000000000000000000000000000000000000000000000 PUSH2 0x162F JUMP JUMPDEST PUSH2 0x431 PUSH32 0x21C184B600000000000000000000000000000000000000000000000000000000 PUSH2 0x162F JUMP JUMPDEST POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x40 ADD MLOAD MLOAD PUSH1 0x1 ADD DUP5 PUSH1 0x0 ADD MLOAD MLOAD EQ PUSH2 0x49F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x4088 JUMP JUMPDEST POP POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 DUP1 JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD MLOAD DUP2 EQ PUSH2 0xE44 JUMPI PUSH2 0x4BF PUSH2 0x2C55 JUMP JUMPDEST DUP7 PUSH1 0x40 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4CF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD DUP1 MLOAD SWAP1 SWAP2 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xD64D051A00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x599 JUMPI PUSH1 0x0 PUSH2 0x538 DUP9 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x16C2 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x556 SWAP2 SWAP1 PUSH2 0x3213 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x567 DUP3 DUP10 DUP4 DUP10 DUP8 PUSH2 0xF54 JUMP JUMPDEST SWAP8 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND CALLER EQ PUSH2 0x58C JUMPI DUP3 PUSH2 0x58F JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP6 POP POP POP POP PUSH2 0xE3B JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xE6F9056100000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x785 JUMPI PUSH1 0x0 PUSH2 0x5F4 DUP9 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x16C2 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x6F7 JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x62D SWAP2 SWAP1 PUSH2 0x309C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x667 DUP11 PUSH1 0x0 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x644 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1994 JUMP JUMPDEST ISZERO PUSH2 0x68C JUMPI PUSH2 0x676 DUP9 DUP9 PUSH2 0x19C6 JUMP JUMPDEST SWAP8 POP PUSH2 0x682 DUP3 DUP10 PUSH2 0x1587 JUMP JUMPDEST DUP8 DUP8 SUB SWAP7 POP PUSH2 0x6AF JUMP JUMPDEST PUSH2 0x6AF DUP11 PUSH1 0x0 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x69F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD CALLER DUP5 DUP12 PUSH2 0x19DC JUMP JUMPDEST PUSH2 0x6EE DUP11 PUSH1 0x0 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x6DD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP6 DUP8 DUP7 PUSH2 0x11CE JUMP JUMPDEST SWAP8 POP POP POP PUSH2 0x757 JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x711 SWAP2 SWAP1 PUSH2 0x309C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x753 DUP10 PUSH1 0x0 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x727 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x742 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP9 DUP7 DUP7 PUSH2 0x11CE JUMP JUMPDEST SWAP7 POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ PUSH2 0x77A JUMPI DUP1 PUSH2 0x77D JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP4 POP POP PUSH2 0xE3B JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0x6259719200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xAD3 JUMPI PUSH2 0x7D8 PUSH2 0x2C6D JUMP JUMPDEST DUP8 MLOAD DUP1 MLOAD DUP5 SWAP1 DUP2 LT PUSH2 0x7E6 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP3 ADD MSTORE DUP8 MLOAD DUP1 MLOAD PUSH1 0x1 DUP6 ADD SWAP1 DUP2 LT PUSH2 0x81D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 PUSH1 0x80 DUP4 ADD MSTORE DUP9 ADD MLOAD PUSH2 0x85B SWAP1 DUP5 PUSH2 0x16C2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE DUP5 AND ISZERO PUSH2 0x888 JUMPI PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x97B JUMP JUMPDEST DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x8CF JUMPI POP PUSH2 0x8CD DUP2 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1994 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x973 JUMPI PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF028E9BE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x91C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x930 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x954 SWAP2 SWAP1 PUSH2 0x3486 JUMP JUMPDEST SWAP1 POP PUSH2 0x966 DUP3 PUSH1 0x20 ADD MLOAD CALLER DUP4 DUP11 PUSH2 0x19DC JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x97B JUMP JUMPDEST PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x995 SWAP2 SWAP1 PUSH2 0x32E2 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x9A9 DUP2 DUP8 PUSH2 0x19C6 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xA0A JUMPI PUSH2 0x9D4 DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1994 JUMP JUMPDEST PUSH2 0xA0A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3C9A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6259719200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x62597192 SWAP1 DUP4 SWAP1 PUSH2 0xA48 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x444A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA75 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA9A SWAP2 SWAP1 PUSH2 0x37F6 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP8 POP SWAP6 DUP2 SWAP1 SUB SWAP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xAC7 JUMPI DUP2 MLOAD PUSH2 0xACA JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP5 POP POP POP PUSH2 0xE3B JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xD0E30DB000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xCC6 JUMPI DUP2 ISZERO PUSH2 0xB56 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x4313 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB62 DUP7 DUP7 PUSH2 0x19C6 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBE0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0xBF3 DUP9 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x16C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP5 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0xC6A SWAP1 DUP8 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x3A86 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC98 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCBC SWAP2 SWAP1 PUSH2 0x33DC JUMP JUMPDEST POP SWAP1 SWAP4 SUB SWAP3 PUSH2 0xE3B JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xE09 JUMPI PUSH1 0x1 DUP8 PUSH1 0x40 ADD MLOAD MLOAD SUB DUP3 EQ PUSH2 0xD52 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x41FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xDC4 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x3AAC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDF2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xE00 CALLER DUP7 PUSH2 0x1587 JUMP JUMPDEST PUSH1 0x0 SWAP3 POP PUSH2 0xE3B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3F71 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4AB JUMP JUMPDEST POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0xE75 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH2 0x148A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE83 SELFBALANCE CALLVALUE PUSH2 0x1563 JUMP JUMPDEST SWAP1 POP PUSH2 0xE8E DUP5 PUSH2 0x1BE4 JUMP JUMPDEST POP POP PUSH2 0xEC1 DUP3 PUSH2 0x301 CALLER DUP8 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x148A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP DUP3 DUP3 LT ISZERO PUSH2 0xEFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3E91 JUMP JUMPDEST SELFBALANCE DUP2 DUP2 LT ISZERO PUSH2 0xF38 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x419F JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xF4C JUMPI PUSH2 0xF4C CALLER DUP4 DUP4 SUB PUSH2 0x1587 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP7 MLOAD GT PUSH2 0xF91 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x42B6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x1001 JUMPI PUSH2 0xFDF DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xFBC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xFD1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH2 0x2422 JUMP JUMPDEST SWAP3 POP PUSH2 0x1001 DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xFF1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD CALLER DUP6 DUP9 PUSH2 0x19DC JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP8 MLOAD SUB DUP2 LT ISZERO PUSH2 0x117C JUMPI PUSH1 0x0 DUP1 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x101F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP5 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x1036 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP SWAP2 POP PUSH2 0x104E DUP7 DUP4 DUP4 DUP12 PUSH2 0x2579 JUMP JUMPDEST SWAP4 POP PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x108E JUMPI DUP6 PUSH1 0x0 PUSH2 0x1092 JUMP JUMPDEST PUSH1 0x0 DUP7 JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x2 DUP13 MLOAD SUB DUP7 LT PUSH2 0x10A9 JUMPI DUP8 PUSH2 0x10CA JUMP JUMPDEST PUSH2 0x10CA DUP5 DUP14 DUP9 PUSH1 0x2 ADD DUP2 MLOAD DUP2 LT PUSH2 0x10BC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP13 PUSH2 0x2422 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH32 0x22C0D9F00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND SWAP1 PUSH4 0x22C0D9F SWAP1 PUSH2 0x1132 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x454D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x114C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1160 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 SWAP9 POP DUP7 SWAP11 POP POP POP POP POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x1004 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x11F1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND DUP6 PUSH2 0x148A JUMP JUMPDEST SWAP1 POP PUSH2 0x1212 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1994 JUMP JUMPDEST ISZERO PUSH2 0x12C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6F025EE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x6F025EE6 SWAP1 PUSH2 0x1292 SWAP1 DUP9 SWAP1 DUP12 SWAP1 DUP10 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x39ED JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1418 JUMP JUMPDEST PUSH2 0x12E8 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1994 JUMP JUMPDEST ISZERO PUSH2 0x1368 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1454913700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x14549137 SWAP1 PUSH2 0x1292 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP10 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x39ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBB503E2100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xBB503E21 SWAP1 PUSH2 0x13E5 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP11 SWAP1 PUSH1 0x0 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x3B97 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1413 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x143C DUP2 PUSH2 0x301 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND DUP8 PUSH2 0x148A JUMP JUMPDEST SWAP2 POP PUSH32 0x40A6BA9513D09E3488135E0E0D10E2D4382B792720155B144CBEA89AC9DB6D34 DUP9 DUP9 DUP9 DUP6 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0x1477 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3A3F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1495 DUP4 PUSH2 0x1994 JUMP JUMPDEST ISZERO PUSH2 0x14B8 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND BALANCE PUSH2 0x155D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x150A SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x39A5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1522 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1536 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x155A SWAP2 SWAP1 PUSH2 0x37F6 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1581 JUMPI PUSH2 0x1581 PUSH2 0x157C PUSH1 0x2 DUP6 DUP6 PUSH2 0x2737 JUMP JUMPDEST PUSH2 0x27DC JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x15AD SWAP1 PUSH2 0x39A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x15EA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15EF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x162A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x40E5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x168D SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x3B18 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x16BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD CALLER SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP3 LT ISZERO PUSH2 0x1947 JUMPI PUSH2 0x16F7 PUSH2 0x2C55 JUMP JUMPDEST DUP4 DUP4 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x1706 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD DUP1 MLOAD SWAP1 SWAP2 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xD64D051A00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x17BB JUMPI PUSH1 0x60 PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x177B SWAP2 SWAP1 PUSH2 0x3213 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x17B2 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x178F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x17A4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0x2422 JUMP JUMPDEST SWAP4 POP POP POP PUSH2 0x1945 JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xE6F9056100000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1826 JUMPI DUP1 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x181E SWAP2 SWAP1 PUSH2 0x309C JUMP JUMPDEST POP SWAP2 POP PUSH2 0x1945 JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1879 JUMPI ADDRESS SWAP2 POP PUSH2 0x1945 JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0x6259719200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1945 JUMPI ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF028E9BE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x190A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x191E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1942 SWAP2 SWAP1 PUSH2 0x3486 JUMP JUMPDEST SWAP2 POP JUMPDEST POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x155D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x402B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x19D5 JUMPI DUP2 PUSH2 0x155A JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND ADDRESS EQ ISZERO PUSH2 0x1A30 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x4259 JUMP JUMPDEST PUSH2 0x1A39 DUP7 PUSH2 0x27E4 JUMP JUMPDEST ISZERO PUSH2 0x1B0D JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP4 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x1A94 SWAP1 DUP10 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x39C6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AE4 SWAP2 SWAP1 PUSH2 0x37F6 JUMP JUMPDEST LT ISZERO PUSH2 0x1B0D JUMPI PUSH2 0x1B06 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2824 JUMP JUMPDEST POP POP PUSH2 0x1BDE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE DUP4 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 PUSH1 0x64 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND GAS CALL SWAP3 POP RETURNDATASIZE DUP1 PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH1 0x1 PUSH1 0x20 DUP4 ADD MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP5 AND SWAP4 POP DUP4 PUSH2 0x1BC7 JUMPI DUP1 DUP3 MSTORE DUP2 SWAP3 POP DUP1 PUSH1 0x20 DUP4 ADD ADD PUSH1 0x40 MSTORE JUMPDEST POP POP DUP2 PUSH2 0x1BDB JUMPI PUSH2 0x1BDB DUP7 DUP7 DUP7 DUP7 DUP6 PUSH2 0x2824 JUMP JUMPDEST POP POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLVALUE DUP2 DUP1 JUMPDEST DUP5 PUSH1 0x60 ADD MLOAD MLOAD DUP2 EQ PUSH2 0x241B JUMPI DUP5 PUSH1 0x40 ADD MLOAD DUP3 LT PUSH2 0x1C06 JUMPI PUSH2 0x241B JUMP JUMPDEST PUSH2 0x1C0E PUSH2 0x2CE5 JUMP JUMPDEST DUP6 PUSH1 0x60 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C1E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x1C4E DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1C49 DUP7 DUP11 PUSH1 0x40 ADD MLOAD PUSH2 0x1563 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x19C6 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xA656186B00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1EDE JUMPI PUSH2 0x1CA4 PUSH2 0x2D04 JUMP JUMPDEST PUSH2 0x1CAC PUSH2 0x2D58 JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1CC4 SWAP2 SWAP1 PUSH2 0x3692 JUMP JUMPDEST SWAP2 POP SWAP2 POP TIMESTAMP PUSH8 0xFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x100 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x1D4B JUMPI PUSH1 0x0 PUSH2 0x1CFB PUSH2 0x1CF6 DUP5 PUSH2 0x28EC JUMP JUMPDEST PUSH2 0x2A23 JUMP JUMPDEST SWAP1 POP PUSH32 0xD9EE00A67DAF7D99C37893015DC900862C9A02650EF2D318697E502E5FB8BBE2 DUP2 DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x100 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x1D39 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3AB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP PUSH2 0x2413 JUMP JUMPDEST DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1DC1 JUMPI POP DUP9 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x1DF7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3DB1 JUMP JUMPDEST ADDRESS PUSH4 0xA656186B DUP4 DUP4 PUSH2 0x1E08 DUP8 PUSH2 0x2A75 JUMP JUMPDEST CALLER PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E28 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4370 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1E8F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1E8C SWAP2 DUP2 ADD SWAP1 PUSH2 0x37C8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1E98 JUMPI PUSH2 0x1ED7 JUMP JUMPDEST PUSH2 0x1EB4 DUP9 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x2AA1 JUMP JUMPDEST SWAP8 POP PUSH2 0x1ED2 DUP11 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x2AA1 JUMP JUMPDEST SWAP10 POP POP POP JUMPDEST POP POP PUSH2 0x2410 JUMP JUMPDEST DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xD64D051A00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x2058 JUMPI PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x40 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1F45 SWAP2 SWAP1 PUSH2 0x3213 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x2 DUP3 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x1F9E JUMPI POP DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1F7E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x1FF0 JUMPI POP DUP9 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1FD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x2026 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x4142 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2036 DUP4 DUP6 DUP5 PUSH1 0x0 CALLER PUSH2 0xF54 JUMP JUMPDEST SWAP1 POP PUSH2 0x2042 DUP8 DUP6 PUSH2 0x2AA1 JUMP JUMPDEST SWAP7 POP PUSH2 0x204E DUP10 DUP3 PUSH2 0x2AA1 JUMP JUMPDEST SWAP9 POP POP POP POP PUSH2 0x2410 JUMP JUMPDEST DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xE6F9056100000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x2131 JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x40 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x20BF SWAP2 SWAP1 PUSH2 0x309C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x20E6 DUP10 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1994 JUMP JUMPDEST ISZERO PUSH2 0x210B JUMPI PUSH2 0x20F5 DUP4 DUP9 PUSH2 0x19C6 JUMP JUMPDEST SWAP3 POP PUSH2 0x2101 DUP3 DUP5 PUSH2 0x1587 JUMP JUMPDEST DUP3 DUP8 SUB SWAP7 POP PUSH2 0x2119 JUMP JUMPDEST DUP9 MLOAD PUSH2 0x2119 SWAP1 CALLER DUP5 DUP7 PUSH2 0x19DC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2036 DUP11 PUSH1 0x0 ADD MLOAD DUP12 PUSH1 0x20 ADD MLOAD DUP7 DUP7 CALLER DUP8 PUSH2 0x11CE JUMP JUMPDEST DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0x6259719200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x2314 JUMPI PUSH2 0x2184 PUSH2 0x2C6D JUMP JUMPDEST CALLER DUP2 MSTORE DUP8 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND PUSH1 0x40 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x80 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 DUP6 ADD MLOAD DUP1 MLOAD SWAP2 SWAP3 PUSH2 0x21E1 SWAP3 DUP3 ADD DUP2 ADD SWAP2 ADD PUSH2 0x32E2 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x21F5 DUP2 DUP9 PUSH2 0x19C6 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x2256 JUMPI PUSH2 0x2220 DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1994 JUMP JUMPDEST PUSH2 0x2256 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3CF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6259719200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x62597192 SWAP1 DUP4 SWAP1 PUSH2 0x2294 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x444A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x22FC JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x22F9 SWAP2 DUP2 ADD SWAP1 PUSH2 0x37F6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2305 JUMPI PUSH2 0x1ED7 JUMP JUMPDEST SWAP7 DUP2 SWAP1 SUB SWAP7 PUSH2 0x2042 DUP8 DUP6 PUSH2 0x2AA1 JUMP JUMPDEST DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xA82B9F3A00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x23DE JUMPI PUSH2 0x2367 PUSH2 0x2D81 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x40 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2381 SWAP2 SWAP1 PUSH2 0x30EB JUMP JUMPDEST PUSH1 0x40 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD DUP5 SWAP1 MSTORE SWAP1 POP PUSH2 0x239F DUP2 DUP9 PUSH2 0x19C6 JUMP JUMPDEST SWAP1 POP DUP1 DUP8 SUB SWAP7 POP PUSH1 0x0 DUP1 PUSH2 0x23B3 DUP5 DUP5 PUSH2 0x456 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x23C2 DUP9 DUP7 PUSH2 0x2AA1 JUMP JUMPDEST SWAP8 POP PUSH2 0x23CE DUP11 DUP4 PUSH2 0x2AA1 JUMP JUMPDEST SWAP10 POP DUP1 DUP10 ADD SWAP9 POP POP POP POP POP PUSH2 0x2410 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3D54 JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1BEA JUMP JUMPDEST POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x2461 JUMPI DUP5 DUP7 PUSH2 0x2464 JUMP JUMPDEST DUP6 DUP6 JUMPDEST SWAP2 POP SWAP2 POP DUP4 ISZERO PUSH2 0x2501 JUMPI PUSH20 0xC0AEE478E3658E2610C5F7A4A2E1777CE9E4F2AC DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2496 SWAP3 SWAP2 SWAP1 PUSH2 0x38CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH32 0xE18A34EB0E04B04F7A0AC29A6E80748DCA96319B42C54D679CB821DCA90C6303 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x24DF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x393F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP3 POP POP POP PUSH2 0x2572 JUMP JUMPDEST PUSH20 0x5C69BEE701EF814A2B6A3EDD4B1652CB9CC5AA6F DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2529 SWAP3 SWAP2 SWAP1 PUSH2 0x38CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH32 0x96E8AC4277198FF8B6F785478AA9A39F403CB768DD02CBEE326C3E7DA348845F PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x24DF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x393F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x25B4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3EEE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2611 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2635 SWAP2 SWAP1 PUSH2 0x377C JUMP JUMPDEST POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x266A JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST PUSH2 0x26A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3E0E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x26DD JUMPI DUP3 DUP5 PUSH2 0x26E0 JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH2 0x26F3 DUP8 PUSH2 0x3E5 PUSH2 0x2ABD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2701 DUP3 DUP5 PUSH2 0x2ABD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x271B DUP4 PUSH2 0x2715 DUP8 PUSH2 0x3E8 PUSH2 0x2ABD JUMP JUMPDEST SWAP1 PUSH2 0x2AA1 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP2 PUSH2 0x2726 JUMPI INVALID JUMPDEST DIV SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2756 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3BF2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0xFF SWAP3 DUP4 AND DUP2 SWAP1 SHL SWAP3 SWAP1 SWAP2 AND SHL OR PUSH32 0x0 DUP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x89DD02E700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x89DD02E7 SWAP1 PUSH2 0x2866 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x3B60 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2880 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2891 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x16BB JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x28BF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x28C4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x28E6 PUSH2 0x157C DUP8 DUP8 DUP8 DUP8 DUP8 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x28DF JUMPI DUP7 PUSH2 0x28E1 JUMP JUMPDEST DUP8 JUMPDEST PUSH2 0x2AEE JUMP JUMPDEST POP PUSH2 0x16BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xE593D3FDFA8B60E5E17A1B2204662ECBE15C23F2084B9AD5BAE40359540A7DA9 DUP2 MSTORE DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x100 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 DUP2 KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A58 SWAP3 SWAP2 SWAP1 PUSH2 0x3909 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2A9D JUMPI PUSH2 0x2A9D PUSH2 0x157C PUSH1 0x3 DUP5 PUSH2 0x2BB3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x155A JUMPI PUSH2 0x155A PUSH2 0x157C PUSH1 0x0 DUP7 DUP7 PUSH2 0x2737 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2ACC JUMPI POP PUSH1 0x0 PUSH2 0x155D JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x2AD9 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x155A JUMPI PUSH2 0x155A PUSH2 0x157C PUSH1 0x1 DUP7 DUP7 PUSH2 0x2737 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xDFDC6F57CF82BEDE92BCFDD44FEDB82B2D5CECABF56EC21964DB6EE2C3E82CF4 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2B2A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2BD0 SWAP3 SWAP2 SWAP1 PUSH2 0x3C13 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x140 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x155D DUP2 PUSH2 0x4654 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2DBD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2DD0 PUSH2 0x2DCB DUP3 PUSH2 0x45B9 JUMP JUMPDEST PUSH2 0x4592 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x2DF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2E19 JUMPI DUP2 CALLDATALOAD PUSH2 0x2E07 DUP2 PUSH2 0x4654 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2DF4 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2E34 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2E42 PUSH2 0x2DCB DUP3 PUSH2 0x45B9 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x2E63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2E19 JUMPI DUP2 MLOAD PUSH2 0x2E79 DUP2 PUSH2 0x4654 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2E66 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2E9B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2EA9 PUSH2 0x2DCB DUP3 PUSH2 0x45B9 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2E19 JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH1 0x60 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x2EF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F02 DUP2 PUSH2 0x4592 JUMP JUMPDEST DUP6 DUP4 ADD CALLDATALOAD PUSH2 0x2F0F DUP2 PUSH2 0x4684 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP4 DUP2 ADD CALLDATALOAD DUP8 DUP4 ADD MSTORE SWAP2 DUP4 ADD CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x2F35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F43 DUP13 DUP9 DUP6 DUP8 ADD ADD PUSH2 0x2F66 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2EBA JUMP JUMPDEST DUP1 MLOAD PUSH2 0x155D DUP2 PUSH2 0x4684 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2F76 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2F84 PUSH2 0x2DCB DUP3 PUSH2 0x45D9 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2F9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2FC4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2FD2 PUSH2 0x2DCB DUP3 PUSH2 0x45D9 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2FE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2FFA DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x461B JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3012 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x301C PUSH1 0x80 PUSH2 0x4592 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH1 0x4 DUP2 LT PUSH2 0x302D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3043 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x155D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x155D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x30AE JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x30B9 DUP2 PUSH2 0x4654 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x30D5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x30E1 DUP6 DUP3 DUP7 ADD PUSH2 0x2FB4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x30FF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3116 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3122 DUP8 DUP4 DUP9 ADD PUSH2 0x2E24 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3137 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x314A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3158 PUSH2 0x2DCB DUP3 PUSH2 0x45B9 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP6 ADD DUP7 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x31FB JUMPI DUP2 MLOAD DUP8 ADD PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP16 SUB ADD SLT ISZERO PUSH2 0x31A3 JUMPI DUP9 DUP10 REVERT JUMPDEST PUSH2 0x31AD PUSH1 0x40 PUSH2 0x4592 JUMP JUMPDEST PUSH2 0x31BA DUP15 PUSH1 0x20 DUP5 ADD PUSH2 0x2F5B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP9 DUP2 GT ISZERO PUSH2 0x31CD JUMPI DUP11 DUP12 REVERT JUMPDEST PUSH2 0x31DC DUP16 PUSH1 0x20 DUP4 DUP7 ADD ADD PUSH2 0x2FB4 JUMP JUMPDEST PUSH1 0x20 DUP4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 DUP8 MSTORE POP SWAP5 DUP6 ADD SWAP5 SWAP3 SWAP1 SWAP3 ADD SWAP2 POP PUSH1 0x1 ADD PUSH2 0x3166 JUMP JUMPDEST POP POP DUP1 SWAP7 POP POP POP POP POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3225 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x323B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3247 DUP6 DUP3 DUP7 ADD PUSH2 0x2E24 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x3258 DUP2 PUSH2 0x4676 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x327A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3290 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x329C DUP9 DUP3 DUP10 ADD PUSH2 0x2DAD JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x32B4 DUP2 PUSH2 0x4676 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x32C4 DUP2 PUSH2 0x4654 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x32D4 DUP2 PUSH2 0x4654 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32F4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x330B JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x331E JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x332C PUSH2 0x2DCB DUP3 PUSH2 0x45B9 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP6 DUP2 ADD DUP9 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x33C8 JUMPI DUP2 MLOAD DUP9 ADD PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP16 SUB ADD SLT ISZERO PUSH2 0x3378 JUMPI DUP11 DUP12 REVERT JUMPDEST PUSH2 0x3382 PUSH1 0x40 PUSH2 0x4592 JUMP JUMPDEST DUP5 DUP3 ADD MLOAD PUSH2 0x338F DUP2 PUSH2 0x46EC JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP10 DUP2 GT ISZERO PUSH2 0x33A2 JUMPI DUP13 DUP14 REVERT JUMPDEST PUSH2 0x33B0 DUP16 DUP8 DUP4 DUP7 ADD ADD PUSH2 0x2FB4 JUMP JUMPDEST DUP3 DUP8 ADD MSTORE POP DUP7 MSTORE POP SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x333B JUMP JUMPDEST POP POP SWAP8 SWAP1 SWAP8 ADD MLOAD SWAP7 SWAP9 SWAP7 SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33ED JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x155A DUP2 PUSH2 0x4676 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3410 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x341B DUP2 PUSH2 0x4654 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x342B DUP2 PUSH2 0x4654 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH2 0x3442 DUP2 PUSH2 0x4654 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH2 0x3452 DUP2 PUSH2 0x4654 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x346D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3479 DUP10 DUP3 DUP11 ADD PUSH2 0x2F66 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3497 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x155A DUP2 PUSH2 0x4654 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x34B4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x34CB JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0x80 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x34DE JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x34E8 PUSH1 0x80 PUSH2 0x4592 JUMP JUMPDEST DUP3 CALLDATALOAD PUSH2 0x34F3 DUP2 PUSH2 0x4654 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3503 DUP2 PUSH2 0x4654 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x3523 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x352F DUP9 DUP3 DUP7 ADD PUSH2 0x2E8B JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP7 PUSH1 0x20 SWAP6 SWAP1 SWAP6 ADD CALLDATALOAD SWAP6 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3557 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 CALLDATALOAD GT ISZERO PUSH2 0x356D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD DUP5 ADD PUSH1 0x60 DUP2 DUP8 SUB SLT ISZERO PUSH2 0x3580 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x358A PUSH1 0x60 PUSH2 0x4592 JUMP JUMPDEST DUP3 DUP3 CALLDATALOAD GT ISZERO PUSH2 0x3597 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x35A4 DUP8 DUP4 CALLDATALOAD DUP5 ADD PUSH2 0x2DAD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD DUP5 DUP2 GT ISZERO PUSH2 0x35C1 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP1 DUP5 ADD SWAP4 POP POP DUP8 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x35D5 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x35E2 PUSH2 0x2DCB DUP5 CALLDATALOAD PUSH2 0x45B9 JUMP JUMPDEST DUP4 CALLDATALOAD DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP9 JUMPDEST DUP7 CALLDATALOAD DUP2 LT ISZERO PUSH2 0x367D JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP16 SUB ADD SLT ISZERO PUSH2 0x362D JUMPI DUP11 DUP12 REVERT JUMPDEST PUSH2 0x3637 PUSH1 0x40 PUSH2 0x4592 JUMP JUMPDEST DUP7 DUP3 ADD CALLDATALOAD PUSH2 0x3644 DUP2 PUSH2 0x4684 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP11 DUP2 GT ISZERO PUSH2 0x3657 JUMPI DUP13 DUP14 REVERT JUMPDEST PUSH2 0x3665 DUP16 DUP10 DUP4 DUP7 ADD ADD PUSH2 0x2F66 JUMP JUMPDEST DUP3 DUP10 ADD MSTORE POP DUP6 MSTORE POP SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x35EF JUMP JUMPDEST POP POP PUSH1 0x40 DUP5 ADD MSTORE POP SWAP1 SWAP8 SWAP6 ADD CALLDATALOAD SWAP6 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH2 0x1C0 DUP2 SLT ISZERO PUSH2 0x36A6 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x140 DUP1 DUP3 SLT ISZERO PUSH2 0x36B5 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x36BE DUP2 PUSH2 0x4592 JUMP JUMPDEST SWAP2 POP PUSH2 0x36CA DUP7 DUP7 PUSH2 0x2DA2 JUMP JUMPDEST DUP3 MSTORE PUSH2 0x36D9 DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x2DA2 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x36EB DUP7 PUSH1 0x40 DUP8 ADD PUSH2 0x3064 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x36FD DUP7 PUSH1 0x60 DUP8 ADD PUSH2 0x3064 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x370F DUP7 PUSH1 0x80 DUP8 ADD PUSH2 0x2DA2 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x3721 DUP7 PUSH1 0xA0 DUP8 ADD PUSH2 0x2DA2 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x3733 DUP7 PUSH1 0xC0 DUP8 ADD PUSH2 0x2DA2 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 PUSH2 0x3751 DUP8 DUP3 DUP9 ADD PUSH2 0x3084 JUMP JUMPDEST DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP7 ADD MLOAD DUP2 DUP5 ADD MSTORE POP DUP2 SWAP4 POP PUSH2 0x3771 DUP7 DUP3 DUP8 ADD PUSH2 0x3001 JUMP JUMPDEST SWAP3 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3790 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x379B DUP2 PUSH2 0x46B2 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x37AC DUP2 PUSH2 0x46B2 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x37BD DUP2 PUSH2 0x46EC JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x37DA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x37E5 DUP2 PUSH2 0x46CE JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x3258 DUP2 PUSH2 0x46CE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3807 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3840 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x461B JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x387D DUP2 PUSH2 0x4647 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 SWAP4 DUP5 SHL DUP2 AND DUP3 MSTORE SWAP2 SWAP1 SWAP3 SHL AND PUSH1 0x14 DUP3 ADD MSTORE PUSH1 0x28 ADD SWAP1 JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP4 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x40 DUP5 ADD MSTORE POP DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x3A34 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x3828 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND DUP2 MSTORE SWAP5 DUP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND DUP4 MSTORE DUP1 DUP9 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP8 AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x60 DUP5 ADD MSTORE POP DUP4 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x3BE6 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x3828 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x3BFF DUP6 PUSH2 0x4647 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x3C20 DUP5 PUSH2 0x4647 JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x155A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3828 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A6D756C7469486F7046696C6C2F55 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4E444552424F5547485400000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469486F7046696C6C2F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4554485F5452414E53464F524D5F4F4E4C590000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F626174636846696C6C2F455448 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F5452414E53464F524D5F4F4E4C590000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F626174636846696C6C2F554E52 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x45434F474E495A45445F53454C4543544F520000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x35 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F626174636846696C6C2F524651 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F4F524445525F494E56414C49445F544F4B454E530000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x44 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F636F6D70757465556E69737761 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x704F7574707574416D6F756E742F494E53554646494349454E545F4C49515549 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x4449545900000000000000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A626174636846696C6C2F554E4445 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x52424F5547485400000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x47 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F636F6D70757465556E69737761 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x704F7574707574416D6F756E742F494E53554646494349454E545F494E505554 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x5F414D4F554E5400000000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x35 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469486F7046696C6C2F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x554E5245434F474E495A45445F53454C4543544F520000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A6D756C7469486F7046696C6C2F4F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5645525350454E545F4554480000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F636F6D70757465486F70526563 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x697069656E742F524543495049454E545F49535F4E554C4C0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469486F7046696C6C2F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4D49534D4154434845445F41525241595F4C454E475448530000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F7472616E736665724574682F54 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x52414E534645525F46414C494544000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x33 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F626174636846696C6C2F554E49 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x535741505F494E56414C49445F544F4B454E5300000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A626174636846696C6C2F4F564552 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5350454E545F4554480000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469486F7046696C6C2F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x57495448445241575F4C4153545F484F505F4F4E4C5900000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x466978696E546F6B656E5370656E6465722F43414E4E4F545F494E564F4B455F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x53454C4600000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x34 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F73656C6C546F556E6973776170 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2F496E76616C6964546F6B656E734C656E677468000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469486F7046696C6C2F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4445504F5349545F46495253545F484F505F4F4E4C5900000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x200 DUP3 ADD SWAP1 POP PUSH2 0x4384 DUP3 DUP8 MLOAD PUSH2 0x380E JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH2 0x4396 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x380E JUMP JUMPDEST POP PUSH1 0x40 DUP7 ADD MLOAD PUSH2 0x43A9 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x38A1 JUMP JUMPDEST POP PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x43BC PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x38A1 JUMP JUMPDEST POP PUSH1 0x80 DUP7 ADD MLOAD PUSH2 0x43CF PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x380E JUMP JUMPDEST POP PUSH1 0xA0 DUP7 ADD MLOAD PUSH2 0x43E2 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x380E JUMP JUMPDEST POP PUSH1 0xC0 DUP7 ADD MLOAD PUSH2 0x43F5 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x380E JUMP JUMPDEST POP PUSH1 0xE0 DUP7 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP8 ADD MLOAD PUSH2 0x4413 DUP3 DUP6 ADD DUP3 PUSH2 0x38C1 JUMP JUMPDEST POP POP PUSH2 0x120 DUP7 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x442E PUSH2 0x140 DUP4 ADD DUP7 PUSH2 0x3872 JUMP JUMPDEST PUSH2 0x443C PUSH2 0x1C0 DUP4 ADD DUP6 PUSH2 0x38A1 JUMP JUMPDEST PUSH2 0x2BAA PUSH2 0x1E0 DUP4 ADD DUP5 PUSH2 0x380E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE PUSH1 0xE0 DUP4 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 MLOAD AND DUP4 DUP7 ADD MSTORE DUP3 DUP7 ADD MLOAD PUSH1 0x40 DUP3 DUP3 AND DUP2 DUP9 ADD MSTORE DUP3 DUP2 DUP10 ADD MLOAD AND PUSH1 0x60 DUP9 ADD MSTORE PUSH1 0x60 DUP9 ADD MLOAD PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0x80 DUP9 ADD MLOAD PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xA0 DUP9 ADD MLOAD SWAP3 POP PUSH1 0xC0 DUP1 DUP9 ADD MSTORE DUP4 SWAP2 POP DUP3 MLOAD DUP1 DUP6 MSTORE PUSH2 0x100 SWAP5 POP DUP5 DUP9 ADD SWAP3 POP DUP5 DUP7 DUP3 MUL DUP10 ADD ADD SWAP5 POP DUP6 DUP5 ADD SWAP4 POP DUP7 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4531 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP10 DUP8 SUB ADD DUP5 MSTORE DUP5 MLOAD PUSH2 0x4509 DUP8 DUP3 MLOAD PUSH2 0x38B7 JUMP JUMPDEST DUP8 ADD MLOAD DUP7 DUP9 ADD DUP5 SWAP1 MSTORE PUSH2 0x451E DUP8 DUP6 ADD DUP3 PUSH2 0x3828 JUMP JUMPDEST SWAP7 POP POP SWAP4 DUP7 ADD SWAP4 SWAP3 DUP7 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x44CD JUMP JUMPDEST POP SWAP4 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4588 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x3828 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x45B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x45CF JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x45EF JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4636 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x461E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1BDE JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x4651 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x4651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x4651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4651 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xC5443CEC6E2AFE593B266A1796A2BD97301941CF3EF55D598406DE4E2A75 0xE4 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1607:33637:8:-:0;;;2058:23;2073:1;2076;;2058:14;:23::i;:::-;2006:75;;2937:326;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1920:4:19;1894:31;;;;1286:487:20;;3177:23:8;;3136:13;;1209:9:20;;1286:487;;1318:292;;1632:19;;1673:18;;1209:9;;3136:13:8;;1286:487:20;;;:::i;:::-;;;;-1:-1:-1;;1286:487:20;;;;;;;;;1259:528;;1286:487;1259:528;;;;1233:554;;-1:-1:-1;;1614:52:21;;-1:-1:-1;;;;;;;3216:12:8::2;::::0;;;;;::::2;::::0;3238:18;;;::::2;::::0;-1:-1:-1;1607:33637:8;;2672:235:19;2834:20;2852:2;2834:20;;;;2859;2877:2;2859:20;;;;2833:47;2883:17;;;2833:67;2672:235;;;;;:::o;681:784:-1:-;;;;;903:3;891:9;882:7;878:23;874:33;871:2;;;-1:-1;;910:12;871:2;89:6;83:13;101:33;128:5;101:33;:::i;:::-;1073:2;1146:22;;388:13;962:74;;-1:-1;406:56;388:13;406:56;:::i;:::-;1215:2;1298:22;;585:13;1081:97;;-1:-1;603:66;585:13;603:66;:::i;:::-;1367:2;1417:22;;;;224:13;865:600;;;;-1:-1;;;865:600::o;1832:668::-;1663:37;;;2236:2;2221:18;;1663:37;;;;2319:2;2304:18;;1663:37;;;;2402:2;2387:18;;1663:37;-1:-1;;;;;2998:54;2485:3;2470:19;;1543:37;2071:3;2056:19;;2042:458::o;3143:117::-;-1:-1;;;;;2998:54;;3202:35;;3192:2;;3251:1;;3241:12;3192:2;3186:74;:::o;:::-;1607:33637:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "672": [
                        {
                            "length": 32,
                            "start": 530
                        }
                    ],
                    "675": [
                        {
                            "length": 32,
                            "start": 2918
                        },
                        {
                            "length": 32,
                            "start": 3123
                        },
                        {
                            "length": 32,
                            "start": 3471
                        }
                    ],
                    "678": [
                        {
                            "length": 32,
                            "start": 566
                        },
                        {
                            "length": 32,
                            "start": 4692
                        },
                        {
                            "length": 32,
                            "start": 4906
                        },
                        {
                            "length": 32,
                            "start": 5029
                        }
                    ],
                    "3697": [
                        {
                            "length": 32,
                            "start": 5733
                        }
                    ],
                    "3827": [
                        {
                            "length": 32,
                            "start": 4524
                        },
                        {
                            "length": 32,
                            "start": 10791
                        }
                    ],
                    "3895": [
                        {
                            "length": 32,
                            "start": 4488
                        },
                        {
                            "length": 32,
                            "start": 10239
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x6080604052600436106100bc5760003560e01c8063a82b9f3a11610074578063d925a56d1161004e578063d925a56d146101c6578063dab400f3146101db578063e6f90561146101f0576100bc565b8063a82b9f3a14610165578063afc6728e14610193578063d64d051a146101a6576100bc565b806321c184b6116100a557806321c184b61461010e5780636ae4b4f7146101215780638fd3ab8014610143576100bc565b8063031b905c146100c15780631984916f146100ec575b600080fd5b3480156100cd57600080fd5b506100d6610210565b6040516100e39190613aac565b60405180910390f35b3480156100f857600080fd5b50610101610234565b6040516100e391906139a5565b6100d661011c366004613545565b610258565b34801561012d57600080fd5b506101366103a4565b6040516100e39190613c2a565b34801561014f57600080fd5b506101586103dd565b6040516100e39190613aeb565b34801561017157600080fd5b50610185610180366004613545565b610456565b6040516100e392919061453f565b6100d66101a13660046134a2565b610e4d565b3480156101b257600080fd5b506100d66101c1366004613263565b610f54565b3480156101d257600080fd5b506100d6611186565b3480156101e757600080fd5b506100d66111aa565b3480156101fc57600080fd5b506100d661020b3660046133f8565b6111ce565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b8151805160009182917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061028d57fe5b602002602001015190506102c0338273ffffffffffffffffffffffffffffffffffffffff1661148a90919063ffffffff16565b915060006102ce4734611563565b90506102da8534610456565b5061030790508361030173ffffffffffffffffffffffffffffffffffffffff85163361148a565b90611563565b92508383101561034c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613c3d565b60405180910390fd5b4781811015610387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613fce565b8181111561039b5761039b33838303611587565b50505092915050565b6040518060400160405280601081526020017f4d756c7469706c6578466561747572650000000000000000000000000000000081525081565b60006104087fafc6728e0000000000000000000000000000000000000000000000000000000061162f565b6104317f21c184b60000000000000000000000000000000000000000000000000000000061162f565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b6000808360400151516001018460000151511461049f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390614088565b50506020820151816000805b8560400151518114610e44576104bf612c55565b866040015182815181106104cf57fe5b602090810291909101015180519091507fffffffff00000000000000000000000000000000000000000000000000000000167fd64d051a0000000000000000000000000000000000000000000000000000000014156105995760006105388860400151846116c2565b90506060600083602001518060200190518101906105569190613213565b915091506105678289838987610f54565b975073ffffffffffffffffffffffffffffffffffffffff8316331461058c578261058f565b60005b9550505050610e3b565b80517fffffffff00000000000000000000000000000000000000000000000000000000167fe6f905610000000000000000000000000000000000000000000000000000000014156107855760006105f48860400151846116c2565b905073ffffffffffffffffffffffffffffffffffffffff84166106f75760006060836020015180602001905181019061062d919061309c565b915091506106678a60000151868151811061064457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16611994565b1561068c5761067688886119c6565b97506106828289611587565b87870396506106af565b6106af8a60000151868151811061069f57fe5b602002602001015133848b6119dc565b6106ee8a6000015186815181106106c257fe5b60200260200101518b6000015187600101815181106106dd57fe5b60200260200101518a8587866111ce565b97505050610757565b60608260200151806020019051810190610711919061309c565b9150506107538960000151858151811061072757fe5b60200260200101518a60000151866001018151811061074257fe5b6020026020010151898886866111ce565b9650505b73ffffffffffffffffffffffffffffffffffffffff8116331461077a578061077d565b60005b935050610e3b565b80517fffffffff00000000000000000000000000000000000000000000000000000000167f62597192000000000000000000000000000000000000000000000000000000001415610ad3576107d8612c6d565b87518051849081106107e657fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1690820152875180516001850190811061081d57fe5b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff166040808301919091526000608083015288015161085b90846116c2565b73ffffffffffffffffffffffffffffffffffffffff9081168252841615610888576000606082015261097b565b805173ffffffffffffffffffffffffffffffffffffffff1633148015906108cf57506108cd816020015173ffffffffffffffffffffffffffffffffffffffff16611994565b155b156109735760003073ffffffffffffffffffffffffffffffffffffffff1663f028e9be6040518163ffffffff1660e01b815260040160206040518083038186803b15801561091c57600080fd5b505afa158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190613486565b9050610966826020015133838a6119dc565b506000606082015261097b565b606081018690525b6000826020015180602001905181019061099591906132e2565b60a084019190915290506109a981876119c6565b90508015610a0a576109d4826020015173ffffffffffffffffffffffffffffffffffffffff16611994565b610a0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613c9a565b6040517f6259719200000000000000000000000000000000000000000000000000000000815230906362597192908390610a4890869060040161444a565b6020604051808303818588803b158015610a6157600080fd5b505af1158015610a75573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a9a91906137f6565b8251909750958190039573ffffffffffffffffffffffffffffffffffffffff163314610ac7578151610aca565b60005b94505050610e3b565b80517fffffffff00000000000000000000000000000000000000000000000000000000167fd0e30db0000000000000000000000000000000000000000000000000000000001415610cc6578115610b56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390614313565b6000610b6286866119c6565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610bcc57600080fd5b505af1158015610be0573d6000803e3d6000fd5b5050505050610bf38860400151846116c2565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815290945073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90610c6a9087908590600401613a86565b602060405180830381600087803b158015610c8457600080fd5b505af1158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbc91906133dc565b5090930392610e3b565b80517fffffffff00000000000000000000000000000000000000000000000000000000167f2e1a7d4d000000000000000000000000000000000000000000000000000000001415610e09576001876040015151038214610d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610343906141fc565b6040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610dc4908890600401613aac565b600060405180830381600087803b158015610dde57600080fd5b505af1158015610df2573d6000803e3d6000fd5b50505050610e003386611587565b60009250610e3b565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613f71565b506001016104ab565b50509250929050565b6020820151600090610e759073ffffffffffffffffffffffffffffffffffffffff163361148a565b90506000610e834734611563565b9050610e8e84611be4565b5050610ec18261030133876020015173ffffffffffffffffffffffffffffffffffffffff1661148a90919063ffffffff16565b915082821015610efd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613e91565b4781811015610f38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103439061419f565b81811115610f4c57610f4c33838303611587565b505092915050565b60006001865111610f91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610343906142b6565b73ffffffffffffffffffffffffffffffffffffffff831661100157610fdf86600081518110610fbc57fe5b602002602001015187600181518110610fd157fe5b602002602001015186612422565b925061100186600081518110610ff157fe5b60200260200101513385886119dc565b60005b600187510381101561117c5760008088838151811061101f57fe5b602002602001015189846001018151811061103657fe5b60200260200101519150915061104e8683838b612579565b93506000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161061108e57856000611092565b6000865b91509150600060028c510386106110a957876110ca565b6110ca848d88600201815181106110bc57fe5b60200260200101518c612422565b604080516000815260208101918290527f022c0d9f0000000000000000000000000000000000000000000000000000000090915290915073ffffffffffffffffffffffffffffffffffffffff8a169063022c0d9f90611132908690869086906024810161454d565b600060405180830381600087803b15801561114c57600080fd5b505af1158015611160573d6000803e3d6000fd5b50505050809850869a5050505050508080600101915050611004565b5095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806111f173ffffffffffffffffffffffffffffffffffffffff88168561148a565b90506112128873ffffffffffffffffffffffffffffffffffffffff16611994565b156112c9576040517f6f025ee600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636f025ee6906112929088908b9089906000908a906004016139ed565b600060405180830381600087803b1580156112ac57600080fd5b505af11580156112c0573d6000803e3d6000fd5b50505050611418565b6112e88773ffffffffffffffffffffffffffffffffffffffff16611994565b15611368576040517f1454913700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906314549137906112929088908c9089906000908a906004016139ed565b6040517fbb503e2100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063bb503e21906113e59088908c908c908a906000908b90600401613b97565b600060405180830381600087803b1580156113ff57600080fd5b505af1158015611413573d6000803e3d6000fd5b505050505b61143c8161030173ffffffffffffffffffffffffffffffffffffffff8a168761148a565b91507f40a6ba9513d09e3488135e0e0d10e2d4382b792720155b144cbea89ac9db6d3488888885898960405161147796959493929190613a3f565b60405180910390a1509695505050505050565b600061149583611994565b156114b8575073ffffffffffffffffffffffffffffffffffffffff81163161155d565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906370a082319061150a9085906004016139a5565b60206040518083038186803b15801561152257600080fd5b505afa158015611536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155a91906137f6565b90505b92915050565b6000828211156115815761158161157c60028585612737565b6127dc565b50900390565b60008273ffffffffffffffffffffffffffffffffffffffff16826040516115ad906139a2565b60006040518083038185875af1925050503d80600081146115ea576040519150601f19603f3d011682016040523d82523d6000602084013e6115ef565b606091505b505090508061162a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610343906140e5565b505050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb9061168d9084907f000000000000000000000000000000000000000000000000000000000000000090600401613b18565b600060405180830381600087803b1580156116a757600080fd5b505af11580156116bb573d6000803e3d6000fd5b5050505050565b815133907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821015611947576116f7612c55565b83836001018151811061170657fe5b602090810291909101015180519091507fffffffff00000000000000000000000000000000000000000000000000000000167fd64d051a0000000000000000000000000000000000000000000000000000000014156117bb5760606000826020015180602001905181019061177b9190613213565b915091506117b28260008151811061178f57fe5b6020026020010151836001815181106117a457fe5b602002602001015183612422565b93505050611945565b80517fffffffff00000000000000000000000000000000000000000000000000000000167fe6f9056100000000000000000000000000000000000000000000000000000000141561182657806020015180602001905181019061181e919061309c565b509150611945565b80517fffffffff00000000000000000000000000000000000000000000000000000000167f2e1a7d4d00000000000000000000000000000000000000000000000000000000141561187957309150611945565b80517fffffffff00000000000000000000000000000000000000000000000000000000167f62597192000000000000000000000000000000000000000000000000000000001415611945573073ffffffffffffffffffffffffffffffffffffffff1663f028e9be6040518163ffffffff1660e01b815260040160206040518083038186803b15801561190a57600080fd5b505afa15801561191e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119429190613486565b91505b505b73ffffffffffffffffffffffffffffffffffffffff811661155d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103439061402b565b73ffffffffffffffffffffffffffffffffffffffff811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14919050565b60008183106119d5578161155a565b5090919050565b6000606073ffffffffffffffffffffffffffffffffffffffff8616301415611a30576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390614259565b611a39866127e4565b15611b0d576040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152839073ffffffffffffffffffffffffffffffffffffffff88169063dd62ed3e90611a9490899030906004016139c6565b60206040518083038186803b158015611aac57600080fd5b505afa158015611ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae491906137f6565b1015611b0d57611b068686868660405180602001604052806000815250612824565b5050611bde565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015273ffffffffffffffffffffffffffffffffffffffff85166024820152836044820152600080606483600073ffffffffffffffffffffffffffffffffffffffff8c165af192503d806000602084013e60016020830151146020821015168115178416935083611bc7578082528192508060208301016040525b505081611bdb57611bdb8686868685612824565b50505b50505050565b60003481805b846060015151811461241b5784604001518210611c065761241b565b611c0e612ce5565b85606001518281518110611c1e57fe5b602002602001015190506000611c4e8260200151611c49868a6040015161156390919063ffffffff16565b6119c6565b82519091507fffffffff00000000000000000000000000000000000000000000000000000000167fa656186b000000000000000000000000000000000000000000000000000000001415611ede57611ca4612d04565b611cac612d58565b8360400151806020019051810190611cc49190613692565b915091504267ffffffffffffffff1682610100015167ffffffffffffffff1611611d4b576000611cfb611cf6846128ec565b612a23565b90507fd9ee00a67daf7d99c37893015dc900862c9a02650ef2d318697e502e5fb8bbe2818460800151856101000151604051611d3993929190613ab5565b60405180910390a15050505050612413565b886000015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff16148015611dc15750886020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff16145b611df7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613db1565b3063a656186b8383611e0887612a75565b336040518563ffffffff1660e01b8152600401611e289493929190614370565b6040805180830381600087803b158015611e4157600080fd5b505af1925050508015611e8f575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611e8c918101906137c8565b60015b611e9857611ed7565b611eb4886fffffffffffffffffffffffffffffffff8416612aa1565b9750611ed28a6fffffffffffffffffffffffffffffffff8316612aa1565b995050505b5050612410565b81517fffffffff00000000000000000000000000000000000000000000000000000000167fd64d051a00000000000000000000000000000000000000000000000000000000141561205857606060008360400151806020019051810190611f459190613213565b915091506002825110158015611f9e5750886000015173ffffffffffffffffffffffffffffffffffffffff1682600081518110611f7e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16145b8015611ff05750886020015173ffffffffffffffffffffffffffffffffffffffff1682600184510381518110611fd057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16145b612026576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390614142565b6000612036838584600033610f54565b90506120428785612aa1565b965061204e8982612aa1565b9850505050612410565b81517fffffffff00000000000000000000000000000000000000000000000000000000167fe6f90561000000000000000000000000000000000000000000000000000000001415612131576000606083604001518060200190518101906120bf919061309c565b915091506120e6896000015173ffffffffffffffffffffffffffffffffffffffff16611994565b1561210b576120f583886119c6565b92506121018284611587565b8287039650612119565b8851612119903384866119dc565b60006120368a600001518b60200151868633876111ce565b81517fffffffff00000000000000000000000000000000000000000000000000000000167f6259719200000000000000000000000000000000000000000000000000000000141561231457612184612c6d565b338152875173ffffffffffffffffffffffffffffffffffffffff908116602080840191909152808a01519091166040808401919091526060830184905260006080840181905290850151805191926121e1928201810191016132e2565b60a084019190915290506121f581886119c6565b9050801561225657612220826020015173ffffffffffffffffffffffffffffffffffffffff16611994565b612256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613cf7565b6040517f625971920000000000000000000000000000000000000000000000000000000081523090636259719290839061229490869060040161444a565b6020604051808303818588803b1580156122ad57600080fd5b505af1935050505080156122fc575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526122f9918101906137f6565b60015b61230557611ed7565b96819003966120428785612aa1565b81517fffffffff00000000000000000000000000000000000000000000000000000000167fa82b9f3a0000000000000000000000000000000000000000000000000000000014156123de57612367612d81565b6000836040015180602001905181019061238191906130eb565b604085019190915290835260208301849052905061239f81886119c6565b905080870396506000806123b38484610456565b90925090506123c28886612aa1565b97506123ce8a83612aa1565b9950808901985050505050612410565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613d54565b50505b600101611bea565b5050915091565b60008060008473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1610612461578486612464565b85855b9150915083156125015773c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac82826040516020016124969291906138cf565b604051602081830303815290604052805190602001207fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c63036040516020016124df9392919061393f565b6040516020818303038152906040528051906020012060001c92505050612572565b735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f82826040516020016125299291906138cf565b604051602081830303815290604052805190602001207f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f6040516020016124df9392919061393f565b9392505050565b60008082116125b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613eee565b6000808673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156125fd57600080fd5b505afa158015612611573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612635919061377c565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060008211801561266a5750600081115b6126a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390613e0e565b6000808673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16106126dd5782846126e0565b83835b909250905060006126f3876103e5612abd565b905060006127018284612abd565b9050600061271b83612715876103e8612abd565b90612aa1565b905080828161272657fe5b049c9b505050505050505050505050565b606063e946c1bb60e01b84848460405160240161275693929190613bf2565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b600081815260209020600160ff92831681901b929091161b177f000000000000000000000000000000000000000000000000000000000000000081161490565b6040517f89dd02e700000000000000000000000000000000000000000000000000000000815230906389dd02e790612866908890889088908890600401613b60565b600060405180830381600087803b15801561288057600080fd5b505af1925050508015612891575060015b6116bb573d8080156128bf576040519150601f19603f3d011682016040523d82523d6000602084013e6128c4565b606091505b506128e661157c878787878751600014156128df57866128e1565b875b612aee565b506116bb565b60006040517fe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da98152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff166080820152608083015173ffffffffffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015161010082015261010083015167ffffffffffffffff166101208201526101208301516101408201526101608120915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001612a58929190613909565b604051602081830303815290604052805190602001209050919050565b60006fffffffffffffffffffffffffffffffff821115612a9d57612a9d61157c600384612bb3565b5090565b60008282018381101561155a5761155a61157c60008686612737565b600082612acc5750600061155d565b82820282848281612ad957fe5b041461155a5761155a61157c60018686612737565b60607fdfdc6f57cf82bede92bcfdd44fedb82b2d5cecabf56ec21964db6ee2c3e82cf48686868686604051602401612b2a9594939291906139ed565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290505b95945050505050565b606063c996af7b60e01b8383604051602401612bd0929190613c13565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b60408051808201909152600081526060602082015290565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b6040805160608082018352600080835260208301529181019190915290565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b604080516080810190915280600081526000602082018190526040820181905260609091015290565b60405180606001604052806060815260200160008152602001606081525090565b805161155d81614654565b600082601f830112612dbd578081fd5b8135612dd0612dcb826145b9565b614592565b818152915060208083019084810181840286018201871015612df157600080fd5b60005b84811015612e19578135612e0781614654565b84529282019290820190600101612df4565b505050505092915050565b600082601f830112612e34578081fd5b8151612e42612dcb826145b9565b818152915060208083019084810181840286018201871015612e6357600080fd5b60005b84811015612e19578151612e7981614654565b84529282019290820190600101612e66565b600082601f830112612e9b578081fd5b8135612ea9612dcb826145b9565b818152915060208083019084810160005b84811015612e1957813587016060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c03011215612ef957600080fd5b612f0281614592565b85830135612f0f81614684565b815260408381013587830152918301359167ffffffffffffffff831115612f3557600080fd5b612f438c8885870101612f66565b90820152865250509282019290820190600101612eba565b805161155d81614684565b600082601f830112612f76578081fd5b8135612f84612dcb826145d9565b9150808252836020828501011115612f9b57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112612fc4578081fd5b8151612fd2612dcb826145d9565b9150808252836020828501011115612fe957600080fd5b612ffa81602084016020860161461b565b5092915050565b600060808284031215613012578081fd5b61301c6080614592565b905081516004811061302d57600080fd5b8152602082015160ff8116811461304357600080fd5b80602083015250604082015160408201526060820151606082015292915050565b80516fffffffffffffffffffffffffffffffff8116811461155d57600080fd5b805167ffffffffffffffff8116811461155d57600080fd5b600080604083850312156130ae578182fd5b82516130b981614654565b602084015190925067ffffffffffffffff8111156130d5578182fd5b6130e185828601612fb4565b9150509250929050565b6000806000606084860312156130ff578081fd5b835167ffffffffffffffff80821115613116578283fd5b61312287838801612e24565b94506020860151915080821115613137578283fd5b818601915086601f83011261314a578283fd5b8151613158612dcb826145b9565b818152602080820191908501865b848110156131fb578151870160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f030112156131a3578889fd5b6131ad6040614592565b6131ba8e60208401612f5b565b81526040820151888111156131cd578a8bfd5b6131dc8f602083860101612fb4565b6020838101919091529187525094850194929092019150600101613166565b50508096505050505050604084015190509250925092565b60008060408385031215613225578182fd5b825167ffffffffffffffff81111561323b578283fd5b61324785828601612e24565b925050602083015161325881614676565b809150509250929050565b600080600080600060a0868803121561327a578283fd5b853567ffffffffffffffff811115613290578384fd5b61329c88828901612dad565b9550506020860135935060408601356132b481614676565b925060608601356132c481614654565b915060808601356132d481614654565b809150509295509295909350565b600080604083850312156132f4578182fd5b825167ffffffffffffffff8082111561330b578384fd5b818501915085601f83011261331e578384fd5b815161332c612dcb826145b9565b81815260208082019190858101885b858110156133c8578151880160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f03011215613378578a8bfd5b6133826040614592565b8482015161338f816146ec565b81526040820151898111156133a2578c8dfd5b6133b08f8783860101612fb4565b8287015250865250938201939082019060010161333b565b505097909701519698969750505050505050565b6000602082840312156133ed578081fd5b815161155a81614676565b60008060008060008060c08789031215613410578384fd5b863561341b81614654565b9550602087013561342b81614654565b945060408701359350606087013561344281614654565b9250608087013561345281614654565b915060a087013567ffffffffffffffff81111561346d578182fd5b61347989828a01612f66565b9150509295509295509295565b600060208284031215613497578081fd5b815161155a81614654565b600080604083850312156134b4578182fd5b823567ffffffffffffffff808211156134cb578384fd5b90840190608082870312156134de578384fd5b6134e86080614592565b82356134f381614654565b8152602083013561350381614654565b602082015260408381013590820152606083013582811115613523578586fd5b61352f88828601612e8b565b6060830152509660209590950135955050505050565b60008060408385031215613557578182fd5b67ffffffffffffffff808435111561356d578283fd5b8335840160608187031215613580578384fd5b61358a6060614592565b8282351115613597578485fd5b6135a48783358401612dad565b8152602080830135818301526040830135848111156135c1578687fd5b80840193505087601f8401126135d5578586fd5b6135e2612dcb84356145b9565b8335815281810190828501885b863581101561367d578135870160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f0301121561362d578a8bfd5b6136376040614592565b8682013561364481614684565b815260408201358a811115613657578c8dfd5b6136658f8983860101612f66565b828901525085525092840192908401906001016135ef565b50506040840152509097950135955050505050565b6000808284036101c08112156136a6578283fd5b610140808212156136b5578384fd5b6136be81614592565b91506136ca8686612da2565b82526136d98660208701612da2565b60208301526136eb8660408701613064565b60408301526136fd8660608701613064565b606083015261370f8660808701612da2565b60808301526137218660a08701612da2565b60a08301526137338660c08701612da2565b60c083015260e085015160e083015261010061375187828801613084565b818401525061012080860151818401525081935061377186828701613001565b925050509250929050565b600080600060608486031215613790578081fd5b835161379b816146b2565b60208501519093506137ac816146b2565b60408501519092506137bd816146ec565b809150509250925092565b600080604083850312156137da578182fd5b82516137e5816146ce565b6020840151909250613258816146ce565b600060208284031215613807578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845261384081602086016020860161461b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805161387d81614647565b825260208181015160ff169083015260408082015190830152606090810151910152565b6fffffffffffffffffffffffffffffffff169052565b63ffffffff169052565b67ffffffffffffffff169052565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606093841b811682529190921b16601482015260280190565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b7fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352808716602084015280861660408401525083606083015260a06080830152613a3460a0830184613828565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff91909116602083015267ffffffffffffffff16604082015260600190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b600073ffffffffffffffffffffffffffffffffffffffff80891683528088166020840152808716604084015280861660608401525083608083015260c060a0830152613be660c0830184613828565b98975050505050505050565b60608101613bff85614647565b938152602081019290925260409091015290565b60408101613c2084614647565b9281526020015290565b60006020825261155a6020830184613828565b6020808252602a908201527f4d756c7469706c6578466561747572653a3a6d756c7469486f7046696c6c2f5560408201527f4e444552424f5547485400000000000000000000000000000000000000000000606082015260800190565b60208082526032908201527f4d756c7469706c6578466561747572653a3a5f6d756c7469486f7046696c6c2f60408201527f4554485f5452414e53464f524d5f4f4e4c590000000000000000000000000000606082015260800190565b6020808252602f908201527f4d756c7469706c6578466561747572653a3a5f626174636846696c6c2f45544860408201527f5f5452414e53464f524d5f4f4e4c590000000000000000000000000000000000606082015260800190565b60208082526032908201527f4d756c7469706c6578466561747572653a3a5f626174636846696c6c2f554e5260408201527f45434f474e495a45445f53454c4543544f520000000000000000000000000000606082015260800190565b60208082526035908201527f4d756c7469706c6578466561747572653a3a5f626174636846696c6c2f52465160408201527f5f4f524445525f494e56414c49445f544f4b454e530000000000000000000000606082015260800190565b60208082526044908201527f4d756c7469706c6578466561747572653a3a5f636f6d70757465556e6973776160408201527f704f7574707574416d6f756e742f494e53554646494349454e545f4c4951554960608201527f4449545900000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526027908201527f4d756c7469706c6578466561747572653a3a626174636846696c6c2f554e444560408201527f52424f5547485400000000000000000000000000000000000000000000000000606082015260800190565b60208082526047908201527f4d756c7469706c6578466561747572653a3a5f636f6d70757465556e6973776160408201527f704f7574707574416d6f756e742f494e53554646494349454e545f494e50555460608201527f5f414d4f554e5400000000000000000000000000000000000000000000000000608082015260a00190565b60208082526035908201527f4d756c7469706c6578466561747572653a3a5f6d756c7469486f7046696c6c2f60408201527f554e5245434f474e495a45445f53454c4543544f520000000000000000000000606082015260800190565b6020808252602c908201527f4d756c7469706c6578466561747572653a3a6d756c7469486f7046696c6c2f4f60408201527f5645525350454e545f4554480000000000000000000000000000000000000000606082015260800190565b60208082526038908201527f4d756c7469706c6578466561747572653a3a5f636f6d70757465486f7052656360408201527f697069656e742f524543495049454e545f49535f4e554c4c0000000000000000606082015260800190565b60208082526038908201527f4d756c7469706c6578466561747572653a3a5f6d756c7469486f7046696c6c2f60408201527f4d49534d4154434845445f41525241595f4c454e475448530000000000000000606082015260800190565b6020808252602e908201527f4d756c7469706c6578466561747572653a3a5f7472616e736665724574682f5460408201527f52414e534645525f46414c494544000000000000000000000000000000000000606082015260800190565b60208082526033908201527f4d756c7469706c6578466561747572653a3a5f626174636846696c6c2f554e4960408201527f535741505f494e56414c49445f544f4b454e5300000000000000000000000000606082015260800190565b60208082526029908201527f4d756c7469706c6578466561747572653a3a626174636846696c6c2f4f56455260408201527f5350454e545f4554480000000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f4d756c7469706c6578466561747572653a3a5f6d756c7469486f7046696c6c2f60408201527f57495448445241575f4c4153545f484f505f4f4e4c5900000000000000000000606082015260800190565b60208082526024908201527f466978696e546f6b656e5370656e6465722f43414e4e4f545f494e564f4b455f60408201527f53454c4600000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526034908201527f4d756c7469706c6578466561747572653a3a5f73656c6c546f556e697377617060408201527f2f496e76616c6964546f6b656e734c656e677468000000000000000000000000606082015260800190565b60208082526036908201527f4d756c7469706c6578466561747572653a3a5f6d756c7469486f7046696c6c2f60408201527f4445504f5349545f46495253545f484f505f4f4e4c5900000000000000000000606082015260800190565b60006102008201905061438482875161380e565b6020860151614396602084018261380e565b5060408601516143a960408401826138a1565b5060608601516143bc60608401826138a1565b5060808601516143cf608084018261380e565b5060a08601516143e260a084018261380e565b5060c08601516143f560c084018261380e565b5060e086015160e083015261010080870151614413828501826138c1565b5050610120868101519083015261442e610140830186613872565b61443c6101c08301856138a1565b612baa6101e083018461380e565b6000602080835260e0830173ffffffffffffffffffffffffffffffffffffffff808651168386015282860151604082821681880152828189015116606088015260608801516080880152608088015160a088015260a0880151925060c0808801528391508251808552610100945084880192508486820289010194508584019350865b81811015614531577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0089870301845284516145098782516138b7565b87015186880184905261451e87850182613828565b96505093860193928601926001016144cd565b509398975050505050505050565b918252602082015260400190565b600085825284602083015273ffffffffffffffffffffffffffffffffffffffff84166040830152608060608301526145886080830184613828565b9695505050505050565b60405181810167ffffffffffffffff811182821017156145b157600080fd5b604052919050565b600067ffffffffffffffff8211156145cf578081fd5b5060209081020190565b600067ffffffffffffffff8211156145ef578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561463657818101518382015260200161461e565b83811115611bde5750506000910152565b6004811061465157fe5b50565b73ffffffffffffffffffffffffffffffffffffffff8116811461465157600080fd5b801515811461465157600080fd5b7fffffffff000000000000000000000000000000000000000000000000000000008116811461465157600080fd5b6dffffffffffffffffffffffffffff8116811461465157600080fd5b6fffffffffffffffffffffffffffffffff8116811461465157600080fd5b63ffffffff8116811461465157600080fdfea26469706673582212207dc5443cec6e2afe593b266a1796a2bd97301941cf3ef55d598406de4e2a75e464736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA82B9F3A GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xD925A56D GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xD925A56D EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xDAB400F3 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0xE6F90561 EQ PUSH2 0x1F0 JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0xA82B9F3A EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0xAFC6728E EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0xD64D051A EQ PUSH2 0x1A6 JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x21C184B6 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x21C184B6 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0x143 JUMPI PUSH2 0xBC JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x1984916F EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x210 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x3AAC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x101 PUSH2 0x234 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x39A5 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x3545 JUMP JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x136 PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x3C2A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0x3DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x3AEB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x185 PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0x3545 JUMP JUMPDEST PUSH2 0x456 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP3 SWAP2 SWAP1 PUSH2 0x453F JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x34A2 JUMP JUMPDEST PUSH2 0xE4D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3263 JUMP JUMPDEST PUSH2 0xF54 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x1186 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x11AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD6 PUSH2 0x20B CALLDATASIZE PUSH1 0x4 PUSH2 0x33F8 JUMP JUMPDEST PUSH2 0x11CE JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST DUP2 MLOAD DUP1 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0x28D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x2C0 CALLER DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x148A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x2CE SELFBALANCE CALLVALUE PUSH2 0x1563 JUMP JUMPDEST SWAP1 POP PUSH2 0x2DA DUP6 CALLVALUE PUSH2 0x456 JUMP JUMPDEST POP PUSH2 0x307 SWAP1 POP DUP4 PUSH2 0x301 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND CALLER PUSH2 0x148A JUMP JUMPDEST SWAP1 PUSH2 0x1563 JUMP JUMPDEST SWAP3 POP DUP4 DUP4 LT ISZERO PUSH2 0x34C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3C3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SELFBALANCE DUP2 DUP2 LT ISZERO PUSH2 0x387 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3FCE JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x39B JUMPI PUSH2 0x39B CALLER DUP4 DUP4 SUB PUSH2 0x1587 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D756C7469706C65784665617475726500000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x408 PUSH32 0xAFC6728E00000000000000000000000000000000000000000000000000000000 PUSH2 0x162F JUMP JUMPDEST PUSH2 0x431 PUSH32 0x21C184B600000000000000000000000000000000000000000000000000000000 PUSH2 0x162F JUMP JUMPDEST POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x40 ADD MLOAD MLOAD PUSH1 0x1 ADD DUP5 PUSH1 0x0 ADD MLOAD MLOAD EQ PUSH2 0x49F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x4088 JUMP JUMPDEST POP POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 DUP1 JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD MLOAD DUP2 EQ PUSH2 0xE44 JUMPI PUSH2 0x4BF PUSH2 0x2C55 JUMP JUMPDEST DUP7 PUSH1 0x40 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4CF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD DUP1 MLOAD SWAP1 SWAP2 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xD64D051A00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x599 JUMPI PUSH1 0x0 PUSH2 0x538 DUP9 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x16C2 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x556 SWAP2 SWAP1 PUSH2 0x3213 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x567 DUP3 DUP10 DUP4 DUP10 DUP8 PUSH2 0xF54 JUMP JUMPDEST SWAP8 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND CALLER EQ PUSH2 0x58C JUMPI DUP3 PUSH2 0x58F JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP6 POP POP POP POP PUSH2 0xE3B JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xE6F9056100000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x785 JUMPI PUSH1 0x0 PUSH2 0x5F4 DUP9 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x16C2 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x6F7 JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x62D SWAP2 SWAP1 PUSH2 0x309C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x667 DUP11 PUSH1 0x0 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x644 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1994 JUMP JUMPDEST ISZERO PUSH2 0x68C JUMPI PUSH2 0x676 DUP9 DUP9 PUSH2 0x19C6 JUMP JUMPDEST SWAP8 POP PUSH2 0x682 DUP3 DUP10 PUSH2 0x1587 JUMP JUMPDEST DUP8 DUP8 SUB SWAP7 POP PUSH2 0x6AF JUMP JUMPDEST PUSH2 0x6AF DUP11 PUSH1 0x0 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x69F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD CALLER DUP5 DUP12 PUSH2 0x19DC JUMP JUMPDEST PUSH2 0x6EE DUP11 PUSH1 0x0 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x6DD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP6 DUP8 DUP7 PUSH2 0x11CE JUMP JUMPDEST SWAP8 POP POP POP PUSH2 0x757 JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x711 SWAP2 SWAP1 PUSH2 0x309C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x753 DUP10 PUSH1 0x0 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x727 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x742 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP9 DUP7 DUP7 PUSH2 0x11CE JUMP JUMPDEST SWAP7 POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ PUSH2 0x77A JUMPI DUP1 PUSH2 0x77D JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP4 POP POP PUSH2 0xE3B JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0x6259719200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xAD3 JUMPI PUSH2 0x7D8 PUSH2 0x2C6D JUMP JUMPDEST DUP8 MLOAD DUP1 MLOAD DUP5 SWAP1 DUP2 LT PUSH2 0x7E6 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP3 ADD MSTORE DUP8 MLOAD DUP1 MLOAD PUSH1 0x1 DUP6 ADD SWAP1 DUP2 LT PUSH2 0x81D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 PUSH1 0x80 DUP4 ADD MSTORE DUP9 ADD MLOAD PUSH2 0x85B SWAP1 DUP5 PUSH2 0x16C2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE DUP5 AND ISZERO PUSH2 0x888 JUMPI PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x97B JUMP JUMPDEST DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x8CF JUMPI POP PUSH2 0x8CD DUP2 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1994 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x973 JUMPI PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF028E9BE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x91C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x930 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x954 SWAP2 SWAP1 PUSH2 0x3486 JUMP JUMPDEST SWAP1 POP PUSH2 0x966 DUP3 PUSH1 0x20 ADD MLOAD CALLER DUP4 DUP11 PUSH2 0x19DC JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x97B JUMP JUMPDEST PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x995 SWAP2 SWAP1 PUSH2 0x32E2 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x9A9 DUP2 DUP8 PUSH2 0x19C6 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xA0A JUMPI PUSH2 0x9D4 DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1994 JUMP JUMPDEST PUSH2 0xA0A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3C9A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6259719200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x62597192 SWAP1 DUP4 SWAP1 PUSH2 0xA48 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x444A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA75 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA9A SWAP2 SWAP1 PUSH2 0x37F6 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP8 POP SWAP6 DUP2 SWAP1 SUB SWAP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xAC7 JUMPI DUP2 MLOAD PUSH2 0xACA JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP5 POP POP POP PUSH2 0xE3B JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xD0E30DB000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xCC6 JUMPI DUP2 ISZERO PUSH2 0xB56 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x4313 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB62 DUP7 DUP7 PUSH2 0x19C6 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBE0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0xBF3 DUP9 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x16C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP5 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0xC6A SWAP1 DUP8 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x3A86 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC98 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCBC SWAP2 SWAP1 PUSH2 0x33DC JUMP JUMPDEST POP SWAP1 SWAP4 SUB SWAP3 PUSH2 0xE3B JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xE09 JUMPI PUSH1 0x1 DUP8 PUSH1 0x40 ADD MLOAD MLOAD SUB DUP3 EQ PUSH2 0xD52 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x41FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xDC4 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x3AAC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDF2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xE00 CALLER DUP7 PUSH2 0x1587 JUMP JUMPDEST PUSH1 0x0 SWAP3 POP PUSH2 0xE3B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3F71 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4AB JUMP JUMPDEST POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0xE75 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH2 0x148A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE83 SELFBALANCE CALLVALUE PUSH2 0x1563 JUMP JUMPDEST SWAP1 POP PUSH2 0xE8E DUP5 PUSH2 0x1BE4 JUMP JUMPDEST POP POP PUSH2 0xEC1 DUP3 PUSH2 0x301 CALLER DUP8 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x148A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP DUP3 DUP3 LT ISZERO PUSH2 0xEFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3E91 JUMP JUMPDEST SELFBALANCE DUP2 DUP2 LT ISZERO PUSH2 0xF38 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x419F JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xF4C JUMPI PUSH2 0xF4C CALLER DUP4 DUP4 SUB PUSH2 0x1587 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP7 MLOAD GT PUSH2 0xF91 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x42B6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x1001 JUMPI PUSH2 0xFDF DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xFBC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xFD1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH2 0x2422 JUMP JUMPDEST SWAP3 POP PUSH2 0x1001 DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xFF1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD CALLER DUP6 DUP9 PUSH2 0x19DC JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP8 MLOAD SUB DUP2 LT ISZERO PUSH2 0x117C JUMPI PUSH1 0x0 DUP1 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x101F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP5 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x1036 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP SWAP2 POP PUSH2 0x104E DUP7 DUP4 DUP4 DUP12 PUSH2 0x2579 JUMP JUMPDEST SWAP4 POP PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x108E JUMPI DUP6 PUSH1 0x0 PUSH2 0x1092 JUMP JUMPDEST PUSH1 0x0 DUP7 JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x2 DUP13 MLOAD SUB DUP7 LT PUSH2 0x10A9 JUMPI DUP8 PUSH2 0x10CA JUMP JUMPDEST PUSH2 0x10CA DUP5 DUP14 DUP9 PUSH1 0x2 ADD DUP2 MLOAD DUP2 LT PUSH2 0x10BC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP13 PUSH2 0x2422 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH32 0x22C0D9F00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND SWAP1 PUSH4 0x22C0D9F SWAP1 PUSH2 0x1132 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x454D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x114C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1160 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 SWAP9 POP DUP7 SWAP11 POP POP POP POP POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x1004 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x11F1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND DUP6 PUSH2 0x148A JUMP JUMPDEST SWAP1 POP PUSH2 0x1212 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1994 JUMP JUMPDEST ISZERO PUSH2 0x12C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6F025EE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x6F025EE6 SWAP1 PUSH2 0x1292 SWAP1 DUP9 SWAP1 DUP12 SWAP1 DUP10 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x39ED JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1418 JUMP JUMPDEST PUSH2 0x12E8 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1994 JUMP JUMPDEST ISZERO PUSH2 0x1368 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1454913700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x14549137 SWAP1 PUSH2 0x1292 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP10 SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x39ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBB503E2100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xBB503E21 SWAP1 PUSH2 0x13E5 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP11 SWAP1 PUSH1 0x0 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x3B97 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1413 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x143C DUP2 PUSH2 0x301 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND DUP8 PUSH2 0x148A JUMP JUMPDEST SWAP2 POP PUSH32 0x40A6BA9513D09E3488135E0E0D10E2D4382B792720155B144CBEA89AC9DB6D34 DUP9 DUP9 DUP9 DUP6 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0x1477 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3A3F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1495 DUP4 PUSH2 0x1994 JUMP JUMPDEST ISZERO PUSH2 0x14B8 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND BALANCE PUSH2 0x155D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x150A SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x39A5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1522 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1536 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x155A SWAP2 SWAP1 PUSH2 0x37F6 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1581 JUMPI PUSH2 0x1581 PUSH2 0x157C PUSH1 0x2 DUP6 DUP6 PUSH2 0x2737 JUMP JUMPDEST PUSH2 0x27DC JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x15AD SWAP1 PUSH2 0x39A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x15EA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15EF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x162A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x40E5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x168D SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x3B18 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x16BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD CALLER SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP3 LT ISZERO PUSH2 0x1947 JUMPI PUSH2 0x16F7 PUSH2 0x2C55 JUMP JUMPDEST DUP4 DUP4 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x1706 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD DUP1 MLOAD SWAP1 SWAP2 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xD64D051A00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x17BB JUMPI PUSH1 0x60 PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x177B SWAP2 SWAP1 PUSH2 0x3213 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x17B2 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x178F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x17A4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0x2422 JUMP JUMPDEST SWAP4 POP POP POP PUSH2 0x1945 JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xE6F9056100000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1826 JUMPI DUP1 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x181E SWAP2 SWAP1 PUSH2 0x309C JUMP JUMPDEST POP SWAP2 POP PUSH2 0x1945 JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1879 JUMPI ADDRESS SWAP2 POP PUSH2 0x1945 JUMP JUMPDEST DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0x6259719200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1945 JUMPI ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF028E9BE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x190A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x191E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1942 SWAP2 SWAP1 PUSH2 0x3486 JUMP JUMPDEST SWAP2 POP JUMPDEST POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x155D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x402B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x19D5 JUMPI DUP2 PUSH2 0x155A JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND ADDRESS EQ ISZERO PUSH2 0x1A30 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x4259 JUMP JUMPDEST PUSH2 0x1A39 DUP7 PUSH2 0x27E4 JUMP JUMPDEST ISZERO PUSH2 0x1B0D JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP4 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x1A94 SWAP1 DUP10 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x39C6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AE4 SWAP2 SWAP1 PUSH2 0x37F6 JUMP JUMPDEST LT ISZERO PUSH2 0x1B0D JUMPI PUSH2 0x1B06 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2824 JUMP JUMPDEST POP POP PUSH2 0x1BDE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE DUP4 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 DUP1 PUSH1 0x64 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND GAS CALL SWAP3 POP RETURNDATASIZE DUP1 PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH1 0x1 PUSH1 0x20 DUP4 ADD MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP5 AND SWAP4 POP DUP4 PUSH2 0x1BC7 JUMPI DUP1 DUP3 MSTORE DUP2 SWAP3 POP DUP1 PUSH1 0x20 DUP4 ADD ADD PUSH1 0x40 MSTORE JUMPDEST POP POP DUP2 PUSH2 0x1BDB JUMPI PUSH2 0x1BDB DUP7 DUP7 DUP7 DUP7 DUP6 PUSH2 0x2824 JUMP JUMPDEST POP POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLVALUE DUP2 DUP1 JUMPDEST DUP5 PUSH1 0x60 ADD MLOAD MLOAD DUP2 EQ PUSH2 0x241B JUMPI DUP5 PUSH1 0x40 ADD MLOAD DUP3 LT PUSH2 0x1C06 JUMPI PUSH2 0x241B JUMP JUMPDEST PUSH2 0x1C0E PUSH2 0x2CE5 JUMP JUMPDEST DUP6 PUSH1 0x60 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C1E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x1C4E DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1C49 DUP7 DUP11 PUSH1 0x40 ADD MLOAD PUSH2 0x1563 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x19C6 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xA656186B00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1EDE JUMPI PUSH2 0x1CA4 PUSH2 0x2D04 JUMP JUMPDEST PUSH2 0x1CAC PUSH2 0x2D58 JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1CC4 SWAP2 SWAP1 PUSH2 0x3692 JUMP JUMPDEST SWAP2 POP SWAP2 POP TIMESTAMP PUSH8 0xFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x100 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x1D4B JUMPI PUSH1 0x0 PUSH2 0x1CFB PUSH2 0x1CF6 DUP5 PUSH2 0x28EC JUMP JUMPDEST PUSH2 0x2A23 JUMP JUMPDEST SWAP1 POP PUSH32 0xD9EE00A67DAF7D99C37893015DC900862C9A02650EF2D318697E502E5FB8BBE2 DUP2 DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x100 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x1D39 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3AB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP PUSH2 0x2413 JUMP JUMPDEST DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1DC1 JUMPI POP DUP9 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x1DF7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3DB1 JUMP JUMPDEST ADDRESS PUSH4 0xA656186B DUP4 DUP4 PUSH2 0x1E08 DUP8 PUSH2 0x2A75 JUMP JUMPDEST CALLER PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E28 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4370 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1E8F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1E8C SWAP2 DUP2 ADD SWAP1 PUSH2 0x37C8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1E98 JUMPI PUSH2 0x1ED7 JUMP JUMPDEST PUSH2 0x1EB4 DUP9 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x2AA1 JUMP JUMPDEST SWAP8 POP PUSH2 0x1ED2 DUP11 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x2AA1 JUMP JUMPDEST SWAP10 POP POP POP JUMPDEST POP POP PUSH2 0x2410 JUMP JUMPDEST DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xD64D051A00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x2058 JUMPI PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x40 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1F45 SWAP2 SWAP1 PUSH2 0x3213 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x2 DUP3 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x1F9E JUMPI POP DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1F7E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x1FF0 JUMPI POP DUP9 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1FD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x2026 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x4142 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2036 DUP4 DUP6 DUP5 PUSH1 0x0 CALLER PUSH2 0xF54 JUMP JUMPDEST SWAP1 POP PUSH2 0x2042 DUP8 DUP6 PUSH2 0x2AA1 JUMP JUMPDEST SWAP7 POP PUSH2 0x204E DUP10 DUP3 PUSH2 0x2AA1 JUMP JUMPDEST SWAP9 POP POP POP POP PUSH2 0x2410 JUMP JUMPDEST DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xE6F9056100000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x2131 JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x40 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x20BF SWAP2 SWAP1 PUSH2 0x309C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x20E6 DUP10 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1994 JUMP JUMPDEST ISZERO PUSH2 0x210B JUMPI PUSH2 0x20F5 DUP4 DUP9 PUSH2 0x19C6 JUMP JUMPDEST SWAP3 POP PUSH2 0x2101 DUP3 DUP5 PUSH2 0x1587 JUMP JUMPDEST DUP3 DUP8 SUB SWAP7 POP PUSH2 0x2119 JUMP JUMPDEST DUP9 MLOAD PUSH2 0x2119 SWAP1 CALLER DUP5 DUP7 PUSH2 0x19DC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2036 DUP11 PUSH1 0x0 ADD MLOAD DUP12 PUSH1 0x20 ADD MLOAD DUP7 DUP7 CALLER DUP8 PUSH2 0x11CE JUMP JUMPDEST DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0x6259719200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x2314 JUMPI PUSH2 0x2184 PUSH2 0x2C6D JUMP JUMPDEST CALLER DUP2 MSTORE DUP8 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND PUSH1 0x40 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x80 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 DUP6 ADD MLOAD DUP1 MLOAD SWAP2 SWAP3 PUSH2 0x21E1 SWAP3 DUP3 ADD DUP2 ADD SWAP2 ADD PUSH2 0x32E2 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x21F5 DUP2 DUP9 PUSH2 0x19C6 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x2256 JUMPI PUSH2 0x2220 DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1994 JUMP JUMPDEST PUSH2 0x2256 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3CF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6259719200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x62597192 SWAP1 DUP4 SWAP1 PUSH2 0x2294 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x444A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x22FC JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x22F9 SWAP2 DUP2 ADD SWAP1 PUSH2 0x37F6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2305 JUMPI PUSH2 0x1ED7 JUMP JUMPDEST SWAP7 DUP2 SWAP1 SUB SWAP7 PUSH2 0x2042 DUP8 DUP6 PUSH2 0x2AA1 JUMP JUMPDEST DUP2 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH32 0xA82B9F3A00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x23DE JUMPI PUSH2 0x2367 PUSH2 0x2D81 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x40 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2381 SWAP2 SWAP1 PUSH2 0x30EB JUMP JUMPDEST PUSH1 0x40 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD DUP5 SWAP1 MSTORE SWAP1 POP PUSH2 0x239F DUP2 DUP9 PUSH2 0x19C6 JUMP JUMPDEST SWAP1 POP DUP1 DUP8 SUB SWAP7 POP PUSH1 0x0 DUP1 PUSH2 0x23B3 DUP5 DUP5 PUSH2 0x456 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x23C2 DUP9 DUP7 PUSH2 0x2AA1 JUMP JUMPDEST SWAP8 POP PUSH2 0x23CE DUP11 DUP4 PUSH2 0x2AA1 JUMP JUMPDEST SWAP10 POP DUP1 DUP10 ADD SWAP9 POP POP POP POP POP PUSH2 0x2410 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3D54 JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1BEA JUMP JUMPDEST POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x2461 JUMPI DUP5 DUP7 PUSH2 0x2464 JUMP JUMPDEST DUP6 DUP6 JUMPDEST SWAP2 POP SWAP2 POP DUP4 ISZERO PUSH2 0x2501 JUMPI PUSH20 0xC0AEE478E3658E2610C5F7A4A2E1777CE9E4F2AC DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2496 SWAP3 SWAP2 SWAP1 PUSH2 0x38CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH32 0xE18A34EB0E04B04F7A0AC29A6E80748DCA96319B42C54D679CB821DCA90C6303 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x24DF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x393F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP3 POP POP POP PUSH2 0x2572 JUMP JUMPDEST PUSH20 0x5C69BEE701EF814A2B6A3EDD4B1652CB9CC5AA6F DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2529 SWAP3 SWAP2 SWAP1 PUSH2 0x38CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH32 0x96E8AC4277198FF8B6F785478AA9A39F403CB768DD02CBEE326C3E7DA348845F PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x24DF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x393F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x25B4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3EEE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2611 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2635 SWAP2 SWAP1 PUSH2 0x377C JUMP JUMPDEST POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x266A JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST PUSH2 0x26A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP1 PUSH2 0x3E0E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x26DD JUMPI DUP3 DUP5 PUSH2 0x26E0 JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH2 0x26F3 DUP8 PUSH2 0x3E5 PUSH2 0x2ABD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2701 DUP3 DUP5 PUSH2 0x2ABD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x271B DUP4 PUSH2 0x2715 DUP8 PUSH2 0x3E8 PUSH2 0x2ABD JUMP JUMPDEST SWAP1 PUSH2 0x2AA1 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP2 PUSH2 0x2726 JUMPI INVALID JUMPDEST DIV SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2756 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3BF2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0xFF SWAP3 DUP4 AND DUP2 SWAP1 SHL SWAP3 SWAP1 SWAP2 AND SHL OR PUSH32 0x0 DUP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x89DD02E700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x89DD02E7 SWAP1 PUSH2 0x2866 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x3B60 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2880 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2891 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x16BB JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x28BF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x28C4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x28E6 PUSH2 0x157C DUP8 DUP8 DUP8 DUP8 DUP8 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x28DF JUMPI DUP7 PUSH2 0x28E1 JUMP JUMPDEST DUP8 JUMPDEST PUSH2 0x2AEE JUMP JUMPDEST POP PUSH2 0x16BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xE593D3FDFA8B60E5E17A1B2204662ECBE15C23F2084B9AD5BAE40359540A7DA9 DUP2 MSTORE DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x100 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 DUP2 KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A58 SWAP3 SWAP2 SWAP1 PUSH2 0x3909 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2A9D JUMPI PUSH2 0x2A9D PUSH2 0x157C PUSH1 0x3 DUP5 PUSH2 0x2BB3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x155A JUMPI PUSH2 0x155A PUSH2 0x157C PUSH1 0x0 DUP7 DUP7 PUSH2 0x2737 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2ACC JUMPI POP PUSH1 0x0 PUSH2 0x155D JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x2AD9 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x155A JUMPI PUSH2 0x155A PUSH2 0x157C PUSH1 0x1 DUP7 DUP7 PUSH2 0x2737 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xDFDC6F57CF82BEDE92BCFDD44FEDB82B2D5CECABF56EC21964DB6EE2C3E82CF4 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2B2A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2BD0 SWAP3 SWAP2 SWAP1 PUSH2 0x3C13 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x140 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x155D DUP2 PUSH2 0x4654 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2DBD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2DD0 PUSH2 0x2DCB DUP3 PUSH2 0x45B9 JUMP JUMPDEST PUSH2 0x4592 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x2DF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2E19 JUMPI DUP2 CALLDATALOAD PUSH2 0x2E07 DUP2 PUSH2 0x4654 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2DF4 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2E34 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2E42 PUSH2 0x2DCB DUP3 PUSH2 0x45B9 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x2E63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2E19 JUMPI DUP2 MLOAD PUSH2 0x2E79 DUP2 PUSH2 0x4654 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2E66 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2E9B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2EA9 PUSH2 0x2DCB DUP3 PUSH2 0x45B9 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2E19 JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH1 0x60 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x2EF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F02 DUP2 PUSH2 0x4592 JUMP JUMPDEST DUP6 DUP4 ADD CALLDATALOAD PUSH2 0x2F0F DUP2 PUSH2 0x4684 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP4 DUP2 ADD CALLDATALOAD DUP8 DUP4 ADD MSTORE SWAP2 DUP4 ADD CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x2F35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F43 DUP13 DUP9 DUP6 DUP8 ADD ADD PUSH2 0x2F66 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2EBA JUMP JUMPDEST DUP1 MLOAD PUSH2 0x155D DUP2 PUSH2 0x4684 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2F76 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2F84 PUSH2 0x2DCB DUP3 PUSH2 0x45D9 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2F9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2FC4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2FD2 PUSH2 0x2DCB DUP3 PUSH2 0x45D9 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2FE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2FFA DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x461B JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3012 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x301C PUSH1 0x80 PUSH2 0x4592 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH1 0x4 DUP2 LT PUSH2 0x302D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3043 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x155D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x155D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x30AE JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x30B9 DUP2 PUSH2 0x4654 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x30D5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x30E1 DUP6 DUP3 DUP7 ADD PUSH2 0x2FB4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x30FF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3116 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3122 DUP8 DUP4 DUP9 ADD PUSH2 0x2E24 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3137 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x314A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3158 PUSH2 0x2DCB DUP3 PUSH2 0x45B9 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP6 ADD DUP7 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x31FB JUMPI DUP2 MLOAD DUP8 ADD PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP16 SUB ADD SLT ISZERO PUSH2 0x31A3 JUMPI DUP9 DUP10 REVERT JUMPDEST PUSH2 0x31AD PUSH1 0x40 PUSH2 0x4592 JUMP JUMPDEST PUSH2 0x31BA DUP15 PUSH1 0x20 DUP5 ADD PUSH2 0x2F5B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP9 DUP2 GT ISZERO PUSH2 0x31CD JUMPI DUP11 DUP12 REVERT JUMPDEST PUSH2 0x31DC DUP16 PUSH1 0x20 DUP4 DUP7 ADD ADD PUSH2 0x2FB4 JUMP JUMPDEST PUSH1 0x20 DUP4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 DUP8 MSTORE POP SWAP5 DUP6 ADD SWAP5 SWAP3 SWAP1 SWAP3 ADD SWAP2 POP PUSH1 0x1 ADD PUSH2 0x3166 JUMP JUMPDEST POP POP DUP1 SWAP7 POP POP POP POP POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3225 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x323B JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3247 DUP6 DUP3 DUP7 ADD PUSH2 0x2E24 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x3258 DUP2 PUSH2 0x4676 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x327A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3290 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x329C DUP9 DUP3 DUP10 ADD PUSH2 0x2DAD JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x32B4 DUP2 PUSH2 0x4676 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x32C4 DUP2 PUSH2 0x4654 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x32D4 DUP2 PUSH2 0x4654 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32F4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x330B JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x331E JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x332C PUSH2 0x2DCB DUP3 PUSH2 0x45B9 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP6 DUP2 ADD DUP9 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x33C8 JUMPI DUP2 MLOAD DUP9 ADD PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP16 SUB ADD SLT ISZERO PUSH2 0x3378 JUMPI DUP11 DUP12 REVERT JUMPDEST PUSH2 0x3382 PUSH1 0x40 PUSH2 0x4592 JUMP JUMPDEST DUP5 DUP3 ADD MLOAD PUSH2 0x338F DUP2 PUSH2 0x46EC JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP10 DUP2 GT ISZERO PUSH2 0x33A2 JUMPI DUP13 DUP14 REVERT JUMPDEST PUSH2 0x33B0 DUP16 DUP8 DUP4 DUP7 ADD ADD PUSH2 0x2FB4 JUMP JUMPDEST DUP3 DUP8 ADD MSTORE POP DUP7 MSTORE POP SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x333B JUMP JUMPDEST POP POP SWAP8 SWAP1 SWAP8 ADD MLOAD SWAP7 SWAP9 SWAP7 SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33ED JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x155A DUP2 PUSH2 0x4676 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3410 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x341B DUP2 PUSH2 0x4654 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x342B DUP2 PUSH2 0x4654 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH2 0x3442 DUP2 PUSH2 0x4654 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH2 0x3452 DUP2 PUSH2 0x4654 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x346D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3479 DUP10 DUP3 DUP11 ADD PUSH2 0x2F66 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3497 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x155A DUP2 PUSH2 0x4654 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x34B4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x34CB JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0x80 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x34DE JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x34E8 PUSH1 0x80 PUSH2 0x4592 JUMP JUMPDEST DUP3 CALLDATALOAD PUSH2 0x34F3 DUP2 PUSH2 0x4654 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3503 DUP2 PUSH2 0x4654 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x3523 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x352F DUP9 DUP3 DUP7 ADD PUSH2 0x2E8B JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP7 PUSH1 0x20 SWAP6 SWAP1 SWAP6 ADD CALLDATALOAD SWAP6 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3557 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 CALLDATALOAD GT ISZERO PUSH2 0x356D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD DUP5 ADD PUSH1 0x60 DUP2 DUP8 SUB SLT ISZERO PUSH2 0x3580 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x358A PUSH1 0x60 PUSH2 0x4592 JUMP JUMPDEST DUP3 DUP3 CALLDATALOAD GT ISZERO PUSH2 0x3597 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x35A4 DUP8 DUP4 CALLDATALOAD DUP5 ADD PUSH2 0x2DAD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD DUP5 DUP2 GT ISZERO PUSH2 0x35C1 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP1 DUP5 ADD SWAP4 POP POP DUP8 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x35D5 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x35E2 PUSH2 0x2DCB DUP5 CALLDATALOAD PUSH2 0x45B9 JUMP JUMPDEST DUP4 CALLDATALOAD DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP9 JUMPDEST DUP7 CALLDATALOAD DUP2 LT ISZERO PUSH2 0x367D JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP16 SUB ADD SLT ISZERO PUSH2 0x362D JUMPI DUP11 DUP12 REVERT JUMPDEST PUSH2 0x3637 PUSH1 0x40 PUSH2 0x4592 JUMP JUMPDEST DUP7 DUP3 ADD CALLDATALOAD PUSH2 0x3644 DUP2 PUSH2 0x4684 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP11 DUP2 GT ISZERO PUSH2 0x3657 JUMPI DUP13 DUP14 REVERT JUMPDEST PUSH2 0x3665 DUP16 DUP10 DUP4 DUP7 ADD ADD PUSH2 0x2F66 JUMP JUMPDEST DUP3 DUP10 ADD MSTORE POP DUP6 MSTORE POP SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x35EF JUMP JUMPDEST POP POP PUSH1 0x40 DUP5 ADD MSTORE POP SWAP1 SWAP8 SWAP6 ADD CALLDATALOAD SWAP6 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH2 0x1C0 DUP2 SLT ISZERO PUSH2 0x36A6 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x140 DUP1 DUP3 SLT ISZERO PUSH2 0x36B5 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x36BE DUP2 PUSH2 0x4592 JUMP JUMPDEST SWAP2 POP PUSH2 0x36CA DUP7 DUP7 PUSH2 0x2DA2 JUMP JUMPDEST DUP3 MSTORE PUSH2 0x36D9 DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x2DA2 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x36EB DUP7 PUSH1 0x40 DUP8 ADD PUSH2 0x3064 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x36FD DUP7 PUSH1 0x60 DUP8 ADD PUSH2 0x3064 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x370F DUP7 PUSH1 0x80 DUP8 ADD PUSH2 0x2DA2 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x3721 DUP7 PUSH1 0xA0 DUP8 ADD PUSH2 0x2DA2 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x3733 DUP7 PUSH1 0xC0 DUP8 ADD PUSH2 0x2DA2 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 PUSH2 0x3751 DUP8 DUP3 DUP9 ADD PUSH2 0x3084 JUMP JUMPDEST DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP7 ADD MLOAD DUP2 DUP5 ADD MSTORE POP DUP2 SWAP4 POP PUSH2 0x3771 DUP7 DUP3 DUP8 ADD PUSH2 0x3001 JUMP JUMPDEST SWAP3 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3790 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x379B DUP2 PUSH2 0x46B2 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x37AC DUP2 PUSH2 0x46B2 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x37BD DUP2 PUSH2 0x46EC JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x37DA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x37E5 DUP2 PUSH2 0x46CE JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x3258 DUP2 PUSH2 0x46CE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3807 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3840 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x461B JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x387D DUP2 PUSH2 0x4647 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 SWAP4 DUP5 SHL DUP2 AND DUP3 MSTORE SWAP2 SWAP1 SWAP3 SHL AND PUSH1 0x14 DUP3 ADD MSTORE PUSH1 0x28 ADD SWAP1 JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP4 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x40 DUP5 ADD MSTORE POP DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x3A34 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x3828 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND DUP2 MSTORE SWAP5 DUP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND DUP4 MSTORE DUP1 DUP9 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP8 AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x60 DUP5 ADD MSTORE POP DUP4 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x3BE6 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x3828 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x3BFF DUP6 PUSH2 0x4647 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x3C20 DUP5 PUSH2 0x4647 JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x155A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3828 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A6D756C7469486F7046696C6C2F55 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4E444552424F5547485400000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469486F7046696C6C2F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4554485F5452414E53464F524D5F4F4E4C590000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F626174636846696C6C2F455448 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F5452414E53464F524D5F4F4E4C590000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F626174636846696C6C2F554E52 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x45434F474E495A45445F53454C4543544F520000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x35 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F626174636846696C6C2F524651 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F4F524445525F494E56414C49445F544F4B454E530000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x44 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F636F6D70757465556E69737761 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x704F7574707574416D6F756E742F494E53554646494349454E545F4C49515549 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x4449545900000000000000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A626174636846696C6C2F554E4445 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x52424F5547485400000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x47 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F636F6D70757465556E69737761 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x704F7574707574416D6F756E742F494E53554646494349454E545F494E505554 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x5F414D4F554E5400000000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x35 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469486F7046696C6C2F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x554E5245434F474E495A45445F53454C4543544F520000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A6D756C7469486F7046696C6C2F4F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5645525350454E545F4554480000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F636F6D70757465486F70526563 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x697069656E742F524543495049454E545F49535F4E554C4C0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469486F7046696C6C2F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4D49534D4154434845445F41525241595F4C454E475448530000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F7472616E736665724574682F54 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x52414E534645525F46414C494544000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x33 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F626174636846696C6C2F554E49 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x535741505F494E56414C49445F544F4B454E5300000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A626174636846696C6C2F4F564552 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5350454E545F4554480000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469486F7046696C6C2F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x57495448445241575F4C4153545F484F505F4F4E4C5900000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x466978696E546F6B656E5370656E6465722F43414E4E4F545F494E564F4B455F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x53454C4600000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x34 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F73656C6C546F556E6973776170 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2F496E76616C6964546F6B656E734C656E677468000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469486F7046696C6C2F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4445504F5349545F46495253545F484F505F4F4E4C5900000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x200 DUP3 ADD SWAP1 POP PUSH2 0x4384 DUP3 DUP8 MLOAD PUSH2 0x380E JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH2 0x4396 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x380E JUMP JUMPDEST POP PUSH1 0x40 DUP7 ADD MLOAD PUSH2 0x43A9 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x38A1 JUMP JUMPDEST POP PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x43BC PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x38A1 JUMP JUMPDEST POP PUSH1 0x80 DUP7 ADD MLOAD PUSH2 0x43CF PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x380E JUMP JUMPDEST POP PUSH1 0xA0 DUP7 ADD MLOAD PUSH2 0x43E2 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x380E JUMP JUMPDEST POP PUSH1 0xC0 DUP7 ADD MLOAD PUSH2 0x43F5 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x380E JUMP JUMPDEST POP PUSH1 0xE0 DUP7 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP8 ADD MLOAD PUSH2 0x4413 DUP3 DUP6 ADD DUP3 PUSH2 0x38C1 JUMP JUMPDEST POP POP PUSH2 0x120 DUP7 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x442E PUSH2 0x140 DUP4 ADD DUP7 PUSH2 0x3872 JUMP JUMPDEST PUSH2 0x443C PUSH2 0x1C0 DUP4 ADD DUP6 PUSH2 0x38A1 JUMP JUMPDEST PUSH2 0x2BAA PUSH2 0x1E0 DUP4 ADD DUP5 PUSH2 0x380E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE PUSH1 0xE0 DUP4 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 MLOAD AND DUP4 DUP7 ADD MSTORE DUP3 DUP7 ADD MLOAD PUSH1 0x40 DUP3 DUP3 AND DUP2 DUP9 ADD MSTORE DUP3 DUP2 DUP10 ADD MLOAD AND PUSH1 0x60 DUP9 ADD MSTORE PUSH1 0x60 DUP9 ADD MLOAD PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0x80 DUP9 ADD MLOAD PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xA0 DUP9 ADD MLOAD SWAP3 POP PUSH1 0xC0 DUP1 DUP9 ADD MSTORE DUP4 SWAP2 POP DUP3 MLOAD DUP1 DUP6 MSTORE PUSH2 0x100 SWAP5 POP DUP5 DUP9 ADD SWAP3 POP DUP5 DUP7 DUP3 MUL DUP10 ADD ADD SWAP5 POP DUP6 DUP5 ADD SWAP4 POP DUP7 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4531 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP10 DUP8 SUB ADD DUP5 MSTORE DUP5 MLOAD PUSH2 0x4509 DUP8 DUP3 MLOAD PUSH2 0x38B7 JUMP JUMPDEST DUP8 ADD MLOAD DUP7 DUP9 ADD DUP5 SWAP1 MSTORE PUSH2 0x451E DUP8 DUP6 ADD DUP3 PUSH2 0x3828 JUMP JUMPDEST SWAP7 POP POP SWAP4 DUP7 ADD SWAP4 SWAP3 DUP7 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x44CD JUMP JUMPDEST POP SWAP4 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4588 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x3828 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x45B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x45CF JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x45EF JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4636 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x461E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1BDE JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x4651 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x4651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x4651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4651 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xC5443CEC6E2AFE593B266A1796A2BD97301941CF3EF55D598406DE4E2A75 0xE4 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1607:33637:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2006:75;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2212:50;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;6090:1486::-;;;;;;:::i;:::-;;:::i;1897:65::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3439:244::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;17242:9648::-;;;;;;;;;;-1:-1:-1;17242:9648:8;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;4255:1269::-;;;;;;:::i;:::-;;:::i;27420:1565::-;;;;;;;;;;-1:-1:-1;27420:1565:8;;;;;:::i;:::-;;:::i;1401:51:21:-;;;;;;;;;;;;;:::i;990:48:20:-;;;;;;;;;;;;;:::i;29267:1533:8:-;;;;;;;;;;-1:-1:-1;29267:1533:8;;;;;:::i;:::-;;:::i;2006:75::-;;;:::o;2212:50::-;;;:::o;6090:1486::-;6340:15;;6356:22;;6255:25;;;;6356:26;;;;6340:43;;;;;;;;;;;;6296:88;;6473:41;6503:10;6473:11;:29;;;;:41;;;;:::i;:::-;6453:61;-1:-1:-1;6588:24:8;6615:40;:21;6645:9;6615:29;:40::i;:::-;6588:67;;6809:34;6823:8;6833:9;6809:13;:34::i;:::-;-1:-1:-1;7006:81:8;;-1:-1:-1;7069:17:8;7006:41;:29;;;7036:10;7006:29;:41::i;:::-;:62;;:81::i;:::-;6986:101;;7139:12;7118:17;:33;;7097:122;;;;;;;;;;;;:::i;:::-;;;;;;;;;7256:21;7308:35;;;;7287:126;;;;;;;;;;;;:::i;:::-;7467:16;7449:15;:34;7445:125;;;7499:60;7512:10;7542:16;7524:15;:34;7499:12;:60::i;:::-;6090:1486;;;;;;;:::o;1897:65::-;;;;;;;;;;;;;;;;;;;:::o;3439:244::-;3492:14;3522:49;3547:23;3522:24;:49::i;:::-;3581:52;3606:26;3581:24;:52::i;:::-;-1:-1:-1;3650:26:8;3439:244;:::o;17242:9648::-;17349:25;17376:20;17640:8;:14;;;:21;17664:1;17640:25;17614:8;:15;;;:22;:51;17593:154;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;18049:19:8;;;;17831:8;18210:18;;18238:8646;18263:8;:14;;;:21;18258:1;:26;18238:8646;;18305:38;;:::i;:::-;18346:8;:14;;;18361:1;18346:17;;;;;;;;;;;;;;;;;;18381:20;;18346:17;;-1:-1:-1;18381:52:8;;18405:28;18381:52;18377:8497;;;18650:17;18670:39;18691:8;:14;;;18707:1;18670:20;:39::i;:::-;18650:59;;18728:23;18753:12;18801:11;:16;;;18769:105;;;;;;;;;;;;:::i;:::-;18727:147;;;;18968:191;19004:6;19032:17;19071:7;19100:10;19132:9;18968:14;:191::i;:::-;18948:211;-1:-1:-1;19316:23:8;;;19329:10;19316:23;:48;;19355:9;19316:48;;;19350:1;19316:48;19303:61;;18377:8497;;;;;;19389:20;;:62;;19413:38;19389:62;19385:7489;;;19668:17;19688:39;19709:8;:14;;;19725:1;19688:20;:39::i;:::-;19668:59;-1:-1:-1;19963:24:8;;;19959:2168;;20012:16;20030:26;20096:11;:16;;;20060:116;;;;;;;;;;;;:::i;:::-;20011:165;;;;20319:47;20334:8;:15;;;20350:1;20334:18;;;;;;;;;;;;;;20319:45;;;:47::i;:::-;20315:683;;;20414:136;20465:17;20512:12;20414:21;:136::i;:::-;20394:156;;20576:50;20597:8;20608:17;20576:12;:50::i;:::-;20668:17;20652:33;;;;20315:683;;;20740:235;20805:8;:15;;;20821:1;20805:18;;;;;;;;;;;;;;20854:10;20894:8;20932:17;20740:20;:235::i;:::-;21039:341;21104:8;:15;;;21120:1;21104:18;;;;;;;;;;;;;;21164:8;:15;;;21180:1;21184;21180:5;21164:22;;;;;;;;;;;;;;21213:17;21275:8;21310:9;21345:13;21039:24;:341::i;:::-;21019:361;;19959:2168;;;;;21430:26;21496:11;:16;;;21460:116;;;;;;;;;;;;:::i;:::-;21427:149;;;21765:343;21830:8;:15;;;21846:1;21830:18;;;;;;;;;;;;;;21890:8;:15;;;21906:1;21910;21906:5;21890:22;;;;;;;;;;;;;;21939:17;22001:10;22038:9;22073:13;21765:24;:343::i;:::-;21745:363;;19959:2168;;22283:23;;;22296:10;22283:23;:48;;22322:9;22283:48;;;22317:1;22283:48;22270:61;;19385:7489;;;;22356:20;;:71;;22380:47;22356:71;22352:4522;;;22447:53;;:::i;:::-;22551:15;;:18;;22567:1;;22551:18;;;;;;;;;;;;;;;;;22518:52;;:15;;;:52;22622:15;;:22;;22642:1;22638:5;;;22622:22;;;;;;;;;;;;;;;;22588:57;;:16;;;;:57;;;;22691:1;22663:25;;;:29;22752:14;;;22731:39;;22768:1;22731:20;:39::i;:::-;22710:61;;;;;;22793:24;;;22789:1867;;23217:1;23193:21;;;:25;22789:1867;;;23268:10;;:24;;23282:10;23268:24;;;;:77;;;23317:28;:4;:15;;;:26;;;:28::i;:::-;23316:29;23268:77;23243:1413;;;23386:19;23472:4;23441:56;;;:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;23386:135;;23880:199;23926:4;:15;;;23967:10;24003:11;24040:17;23880:20;:199::i;:::-;-1:-1:-1;24125:1:8;24101:21;;;:25;23243:1413;;;24596:21;;;:41;;;23243:1413;24673:16;24774:11;:16;;;24742:138;;;;;;;;;;;;:::i;:::-;24708:20;;;24707:173;;;;;-1:-1:-1;24970:45:8;24707:173;25002:12;24970:21;:45::i;:::-;24959:56;-1:-1:-1;25037:12:8;;25033:220;;25106:28;:4;:15;;;:26;;;:28::i;:::-;25073:161;;;;;;;;;;;;:::i;:::-;25333:97;;;;;25364:4;;25333:74;;25415:8;;25333:97;;25425:4;;25333:97;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;25677:10;;25313:117;;-1:-1:-1;25496:24:8;;;;;25677;;25691:10;25677:24;:50;;25717:10;;25677:50;;;25712:1;25677:50;25664:63;;22352:4522;;;;;25752:20;;:55;;25776:31;25752:55;25748:1126;;;25856:6;;25827:131;;;;;;;;;;;;:::i;:::-;25976:16;25995:54;26017:17;26036:12;25995:21;:54::i;:::-;25976:73;;26096:4;:12;;;26116:8;26096:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26158:39;26179:8;:14;;;26195:1;26158:20;:39::i;:::-;26215:35;;;;;26145:52;;-1:-1:-1;26215:13:8;:4;:13;;;;:35;;26145:52;;26241:8;;26215:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;26268:24:8;;;;25748:1126;;;26317:20;;:56;;26341:32;26317:56;26313:561;;;26451:1;26427:8;:14;;;:21;:25;26422:1;:30;26393:155;;;;;;;;;;;;:::i;:::-;26623:32;;;;;:13;:4;:13;;;;:32;;26637:17;;26623:32;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26673:43;26686:10;26698:17;26673:12;:43::i;:::-;26755:1;26734:23;;26313:561;;;26796:63;;;;;;;;;;:::i;26313:561::-;-1:-1:-1;18286:3:8;;18238:8646;;;;17242:9648;;;;;;:::o;4255:1269::-;4534:20;;;;4414:25;;4534:50;;:38;;4573:10;4534:38;:50::i;:::-;4514:70;-1:-1:-1;4658:24:8;4685:40;:21;4715:9;4685:29;:40::i;:::-;4658:67;;4771:20;4782:8;4771:10;:20::i;:::-;;;4951:90;5023:17;4951:50;4990:10;4951:8;:20;;;:38;;;;:50;;;;:::i;:90::-;4931:110;;5093:12;5072:17;:33;;5051:119;;;;;;;;;;;;:::i;:::-;5207:21;5259:35;;;;5238:123;;;;;;;;;;;;:::i;:::-;5415:16;5397:15;:34;5393:125;;;5447:60;5460:10;5490:16;5472:15;:34;5447:12;:60::i;:::-;4255:1269;;;;;;:::o;27420:1565::-;27621:25;27686:1;27670:6;:13;:17;27662:82;;;;;;;;;;;;:::i;:::-;27759:25;;;27755:303;;27814:57;27841:6;27848:1;27841:9;;;;;;;;;;;;;;27852:6;27859:1;27852:9;;;;;;;;;;;;;;27863:7;27814:26;:57::i;:::-;27800:71;;27885:162;27938:6;27945:1;27938:9;;;;;;;;;;;;;;27966:10;27994:11;28023:10;27885:20;:162::i;:::-;28073:9;28068:911;28108:1;28092:6;:13;:17;28088:1;:21;28068:911;;;28131:18;28151:19;28175:6;28182:1;28175:9;;;;;;;;;;;;;;28186:6;28193:1;28197;28193:5;28186:13;;;;;;;;;;;;;;28130:70;;;;28234:155;28279:11;28308:10;28336:11;28365:10;28234:27;:155::i;:::-;28214:175;;28404:18;28424;28459:11;28446:24;;:10;:24;;;:124;;28540:17;28567:1;28446:124;;;28498:1;28502:17;28446:124;28403:167;;;;28584:10;28617:1;28601:6;:13;:17;28597:1;:21;:131;;28719:9;28597:131;;;28637:63;28664:11;28677:6;28684:1;28688;28684:5;28677:13;;;;;;;;;;;;;;28692:7;28637:26;:63::i;:::-;28868:12;;;28878:1;28868:12;;;;;;;;;28742:152;;;;28584:144;;-1:-1:-1;28742:32:8;;;;;;:152;;28792:10;;28820;;28584:144;;28742:152;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28922:2;28908:16;;28951:17;28938:30;;28068:911;;;;;28111:3;;;;;;;28068:911;;;;27420:1565;;;;;;;:::o;1401:51:21:-;;;:::o;990:48:20:-;;;:::o;29267:1533:8:-;29544:25;;29609:56;:45;;;29655:9;29609:45;:56::i;:::-;29585:80;;29679:39;29694:10;29679:37;;;:39::i;:::-;29675:735;;;29734:176;;;;;:30;:7;:30;;;;:176;;29782:8;;29808:11;;29837:9;;29864:1;;29883:13;;29734:176;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29675:735;;;29931:40;29946:11;29931:38;;;:40::i;:::-;29927:483;;;29987:175;;;;;:30;:7;:30;;;;:175;;30035:8;;30061:10;;30089:9;;30116:1;;30135:13;;29987:175;;;:::i;29927:483::-;30193:206;;;;;:32;:7;:32;;;;:206;;30243:8;;30269:10;;30297:11;;30326:9;;30353:1;;30372:13;;30193:206;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29927:483;30439:92;30517:13;30439:56;:45;;;30485:9;30439:45;:56::i;:92::-;30419:112;;30546:213;30589:10;30622:11;30648:16;30678:17;30717:8;30740:9;30546:213;;;;;;;;;;;:::i;:::-;;;;;;;;30769:24;29267:1533;;;;;;;;:::o;2420:260:24:-;2531:20;2571:17;2582:5;2571:10;:17::i;:::-;2567:68;;;-1:-1:-1;2611:13:24;;;;2604:20;;2567:68;2651:22;;;;;:15;;;;;;:22;;2667:5;;2651:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2644:29;;2420:260;;;;;:::o;1625:373:34:-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;:::-;1759:24;:200::i;:::-;-1:-1:-1;1986:5:34;;;1625:373::o;30806:229:8:-;30902:12;30919:9;:14;;30941:6;30919:33;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30901:51;;;30970:7;30962:66;;;;;;;;;;;;:::i;:::-;30806:229;;;:::o;2201:168:19:-;2283:79;;;;;2322:4;;2283:52;;:79;;2336:8;;2346:15;;2283:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2201:168;:::o;31771:1358:8:-;31989:12;;31961:10;;31989:16;;31985:20;;31981:1006;;;32021:35;;:::i;:::-;32059:5;32065:1;32069;32065:5;32059:12;;;;;;;;;;;;;;;;;;32089:17;;32059:12;;-1:-1:-1;32089:49:8;;32110:28;32089:49;32085:892;;;32159:23;32184:12;32232:8;:13;;;32200:102;;;;;;;;;;;;:::i;:::-;32158:144;;;;32332:57;32359:6;32366:1;32359:9;;;;;;;;;;;;;;32370:6;32377:1;32370:9;;;;;;;;;;;;;;32381:7;32332:26;:57::i;:::-;32320:69;;32085:892;;;;;32414:17;;:59;;32435:38;32414:59;32410:567;;;32540:8;:13;;;32508:101;;;;;;;;;;;;:::i;:::-;-1:-1:-1;32493:116:8;-1:-1:-1;32410:567:8;;;32634:17;;:53;;32655:32;32634:53;32630:347;;;32727:4;32707:25;;32630:347;;;32757:17;;:68;;32778:47;32757:68;32753:224;;;32917:4;32886:56;;;:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;32845:117;;32753:224;31981:1006;;33017:23;;;32996:126;;;;;;;;;;;;:::i;2012:164:24:-;2134:35;;;984:42;2134:35;2012:164;;;:::o;2544:135:34:-;2629:7;2663:1;2659;:5;:13;;2671:1;2659:13;;;-1:-1:-1;2667:1:34;;2544:135;-1:-1:-1;2544:135:34:o;1928:2914:21:-;2092:12;2114:23;2156:31;;;2182:4;2156:31;;2148:80;;;;;;;;;;;;:::i;:::-;2438:29;2461:5;2438:22;:29::i;:::-;2434:466;;;2603:37;;;;;2643:6;;2603:15;;;;;;:37;;2619:5;;2634:4;;2603:37;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:46;2599:291;;;2669:182;2725:5;2752;2779:2;2803:6;2669:182;;;;;;;;;;;;:34;:182::i;:::-;2869:7;;;;2599:291;2950:4;2944:11;3070:66;3065:3;3058:79;3184:12;3177:5;3173:24;3166:4;3161:3;3157:14;3150:48;3242:12;3238:2;3234:21;3227:4;3222:3;3218:14;3211:45;3292:6;3285:4;3280:3;3276:14;3269:30;3492:1;3473;3451:4;3430:3;3411:1;3380:12;3373:5;3369:24;3346:5;3324:183;3313:194;;3535:16;3599:6;3596:1;3589:4;3584:3;3580:14;3565:41;4203:1;4195:4;4190:3;4186:14;4180:21;4177:28;4121:2;4113:6;4110:14;4103:22;4074:179;4006:6;3999:14;3975:296;3897:7;3876:409;3865:420;;4309:7;4299:2;;4414:6;4409:3;4402:19;4452:3;4438:17;;4589:6;4582:4;4577:3;4573:14;4569:27;4563:4;4556:41;4299:2;;;4636:7;4631:205;;4659:166;4711:5;4734;4757:2;4777:6;4801:10;4659:34;:166::i;:::-;1928:2914;;;;;;;:::o;8011:8269:8:-;8096:25;8233:9;8096:25;;8329:7945;8354:8;:14;;;:21;8349:1;:26;8329:7945;;8460:8;:19;;;8446:10;:33;8442:49;;8483:5;;8442:49;8504:35;;:::i;:::-;8542:8;:14;;;8557:1;8542:17;;;;;;;;;;;;;;8504:55;;8613:24;8640:132;8679:11;:22;;;8719:39;8747:10;8719:8;:19;;;:27;;:39;;;;:::i;:::-;8640:21;:132::i;:::-;8790:20;;8613:159;;-1:-1:-1;8790:67:8;;8814:43;8790:67;8786:7478;;;8954:36;;:::i;:::-;9012:39;;:::i;:::-;9104:11;:16;;;9072:137;;;;;;;;;;;;:::i;:::-;8932:277;;;;9254:15;9231:39;;:5;:12;;;:39;;;9227:415;;9294:17;9314:105;9354:43;9391:5;9354:36;:43::i;:::-;9314:14;:105::i;:::-;9294:125;;9446:147;9487:9;9522:5;:11;;;9559:5;:12;;;9446:147;;;;;;;;:::i;:::-;;;;;;;;9615:8;;;;;;;9227:415;9708:8;:19;;;9688:39;;:5;:16;;;:39;;;:103;;;;;9771:8;:20;;;9751:40;;:5;:16;;;:40;;;9688:103;9659:227;;;;;;;;;;;;:::i;:::-;10021:4;9992:49;10096:5;10131:9;10170:40;:16;:38;:40::i;:::-;10240:10;9992:284;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9992:284:8;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;9968:676;;;;;10483:42;:10;:42;;;:18;:42::i;:::-;10470:55;-1:-1:-1;10567:49:8;:17;:49;;;:25;:49::i;:::-;10547:69;;10297:338;;9968:676;8786:7478;;;;;10668:20;;:52;;10692:28;10668:52;10664:5600;;;10741:23;10766:12;10814:11;:16;;;10782:105;;;;;;;;;;;;:::i;:::-;10740:147;;;;10951:1;10934:6;:13;:18;;:83;;;;;10997:8;:19;;;10976:41;;:6;10983:1;10976:9;;;;;;;;;;;;;;:41;;;10934:83;:165;;;;;11078:8;:20;;;11041:58;;:6;11064:1;11048:6;:13;:17;11041:25;;;;;;;;;;;;;;:58;;;10934:165;10905:287;;;;;;;;;;;;:::i;:::-;11266:26;11296:191;11332:6;11360:16;11398:7;11435:1;11459:10;11296:14;:191::i;:::-;11266:221;-1:-1:-1;11576:36:8;:10;11595:16;11576:18;:36::i;:::-;11563:49;-1:-1:-1;11650:45:8;:17;11676:18;11650:25;:45::i;:::-;11630:65;;10664:5600;;;;;;11720:20;;:62;;11744:38;11720:62;11716:4548;;;11803:16;11821:26;11883:11;:16;;;11851:104;;;;;;;;;;;;:::i;:::-;11802:153;;;;11977:32;:8;:19;;;:30;;;:32::i;:::-;11973:771;;;12052:123;12099:16;12141:12;12052:21;:123::i;:::-;12033:142;;12260:49;12281:8;12292:16;12260:12;:49::i;:::-;12395:16;12379:32;;;;11973:771;;;12572:19;;12526:199;;12617:10;12653:8;12687:16;12526:20;:199::i;:::-;12803:26;12832:280;12878:8;:19;;;12919:8;:20;;;12961:16;13018:8;13049:10;13081:13;12832:24;:280::i;11716:4548::-;13345:20;;:71;;13369:47;13345:71;13341:2923;;;13436:53;;:::i;:::-;13520:10;13507:23;;13566:19;;13507:23;13548:37;;;:15;;;;:37;;;;13622:20;;;;13603:39;;;:16;;;;:39;;;;13660:21;;;:40;;;13507:10;13718:25;;;:29;;;13866:16;;;;13834:138;;13507:10;;13834:138;;;;;;;;;:::i;:::-;13800:20;;;13799:173;;;;;-1:-1:-1;14062:103:8;13799:173;14135:12;14062:21;:103::i;:::-;14051:114;-1:-1:-1;14187:12:8;;14183:217;;14256:28;:4;:15;;;:26;;;:28::i;:::-;14223:158;;;;;;;;;;;;:::i;:::-;14421:118;;;;;14452:4;;14421:53;;14503:8;;14421:118;;14534:4;;14421:118;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14421:118:8;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14417:428;;;;;14635:24;;;;;14694:36;:10;14713:16;14694:18;:36::i;13341:2923::-;14869:20;;:51;;14893:27;14869:51;14865:1399;;;14940:40;;:::i;:::-;14998:16;15204:11;:16;;;15172:131;;;;;;;;;;;;:::i;:::-;15099:22;;;15032:271;;;;;;;15321:27;;;:46;;;15032:271;-1:-1:-1;15457:103:8;15032:271;15530:12;15457:21;:103::i;:::-;15446:114;;15675:8;15659:24;;;;15702:26;15730:19;15773:41;15787:16;15805:8;15773:13;:41::i;:::-;15701:113;;-1:-1:-1;15701:113:8;-1:-1:-1;15903:36:8;:10;15922:16;15903:18;:36::i;:::-;15890:49;-1:-1:-1;15977:45:8;:17;16003:18;15977:25;:45::i;:::-;15957:65;;16139:11;16123:27;;;;14865:1399;;;;;;;16189:60;;;;;;;;;;:::i;14865:1399::-;8329:7945;;;8377:3;;8329:7945;;;;8011:8269;;;;:::o;34388:854::-;34546:19;34582:14;34598;34625:6;34616:15;;:6;:15;;;:77;;34678:6;34686;34616:77;;;34647:6;34655;34616:77;34581:112;;;;34707:7;34703:533;;;2514:42;34884:6;34892;34867:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;34857:43;;;;;;2864:66;34763:198;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;34753:209;;;;;;34745:218;;34730:234;;;;;;34703:533;2360:42;35147:6;35155;35130:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;35120:43;;;;;;2670:66;35028:194;;;;;;;;;;:::i;34388:854::-;;;;;;:::o;33257:1036::-;33461:20;33532:1;33518:11;:15;33497:133;;;;;;;;;;;;:::i;:::-;33641:16;33659;33695:11;33680:39;;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;33640:81;;;;;;;;;33763:1;33752:8;:12;:28;;;;;33779:1;33768:8;:12;33752:28;33731:143;;;;;;;;;;;;:::i;:::-;33885:20;33907:21;33945:11;33932:24;;:10;:24;;;:94;;34007:8;34017;33932:94;;;33972:8;33982;33932:94;33884:142;;-1:-1:-1;33884:142:8;-1:-1:-1;34036:26:8;34065:24;:11;34085:3;34065:19;:24::i;:::-;34036:53;-1:-1:-1;34099:17:8;34119:41;34036:53;34146:13;34119:26;:41::i;:::-;34099:61;-1:-1:-1;34170:19:8;34192:54;34227:18;34192:26;:12;34213:4;34192:20;:26::i;:::-;:34;;:54::i;:::-;34170:76;;34275:11;34263:9;:23;;;;;;;33257:1036;-1:-1:-1;;;;;;;;;;;;33257:1036:8:o;1401:322:41:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1401:322:41;;;;;:::o;1531:170:40:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;5538:446:21;5639:21;5817:16;;;5875:2;5862:16;;5911:1;5894:15;;;;5890:23;;;5858:26;;;;5854:34;5851:63;5945:26;5941:30;;5940:37;;5538:446::o;6124:952::-;6385:157;;;;;6414:4;;6385:53;;:157;;6456:5;;6479;;6502:2;;6522:6;;6385:157;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6381:689;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6800:259;:249;6882:5;6906;6929:2;6949:6;6973:17;:24;7001:1;6973:29;;:62;;7025:10;6973:62;;;7005:17;6973:62;6800:56;:249::i;:259::-;6555:515;6381:689;;5911:1727:17;6012:18;6472:4;6466:11;6502:19;6497:3;6490:32;6615:5;6609:12;6595;6591:31;6584:4;6579:3;6575:14;6568:55;6727:4;6720:5;6716:16;6710:23;6696:12;6692:42;6685:4;6680:3;6676:14;6669:66;6841:4;6834:5;6830:16;6824:23;6809:13;6805:43;6798:4;6793:3;6789:14;6782:67;6955:4;6948:5;6944:16;6938:23;6923:13;6919:43;6912:4;6907:3;6903:14;6896:67;7062:4;7055:5;7051:16;7045:23;7031:12;7027:42;7020:4;7015:3;7011:14;7004:66;7169:4;7162:5;7158:16;7152:23;7138:12;7134:42;7127:4;7122:3;7118:14;7111:66;7279:4;7272:5;7268:16;7262:23;7248:12;7244:42;7237:4;7232:3;7228:14;7221:66;7368:4;7361:5;7357:16;7351:23;7343:5;7338:3;7334:15;7327:48;7476:5;7469;7465:17;7459:24;7445:12;7441:43;7433:5;7428:3;7424:15;7417:68;7566:5;7559;7555:17;7549:24;7541:5;7536:3;7532:15;7525:49;7616:5;7611:3;7601:21;7587:35;;;6441:1191;;;:::o;1810:260:20:-;1901:18;2005:23;2042:10;1952:110;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1942:121;;;;;;1935:128;;1810:260;;;:::o;4618:401:34:-;4707:7;4738:17;4734:21;;4730:256;;;4771:204;4796:178;4859:82;4959:1;4796:45;:178::i;4771:204::-;-1:-1:-1;5010:1:34;4618:401::o;2004:392::-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;764:457::-;850:7;877:6;873:45;;-1:-1:-1;906:1:34;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;725:500:4:-;945:12;1023:87;1125:5;1144;1163:2;1179:6;1199:9;980:238;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;725:500:4;;;;;;;;:::o;1729:297:41:-;1869:12;966:10;1940:31;;1985:9;2008:1;1904:115;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1729:297:41;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;142:134::-;220:13;;238:33;220:13;238:33;:::i;458:707::-;;575:3;568:4;560:6;556:17;552:27;542:2;;-1:-1;;583:12;542:2;630:6;617:20;652:80;667:64;724:6;667:64;:::i;:::-;652:80;:::i;:::-;760:21;;;643:89;-1:-1;804:4;817:14;;;;792:17;;;906;;;897:27;;;;894:36;-1:-1;891:2;;;943:1;;933:12;891:2;968:1;953:206;978:6;975:1;972:13;953:206;;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;1046:50;;1110:14;;;;1138;;;;1000:1;993:9;953:206;;;957:14;;;;;535:630;;;;:::o;1191:722::-;;1319:3;1312:4;1304:6;1300:17;1296:27;1286:2;;-1:-1;;1327:12;1286:2;1367:6;1361:13;1389:80;1404:64;1461:6;1404:64;:::i;1389:80::-;1497:21;;;1380:89;-1:-1;1541:4;1554:14;;;;1529:17;;;1643;;;1634:27;;;;1631:36;-1:-1;1628:2;;;1680:1;;1670:12;1628:2;1705:1;1690:217;1715:6;1712:1;1709:13;1690:217;;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;1783:61;;1858:14;;;;1886;;;;1737:1;1730:9;1690:217;;2818:780;;2969:3;2962:4;2954:6;2950:17;2946:27;2936:2;;-1:-1;;2977:12;2936:2;3024:6;3011:20;3046:114;3061:98;3152:6;3061:98;:::i;3046:114::-;3188:21;;;3037:123;-1:-1;3232:4;3245:14;;;;3220:17;;;3340:1;3325:267;3350:6;3347:1;3344:13;3325:267;;;3433:3;3420:17;3224:6;3408:30;13368:4;;13347:19;3408:30;13351:3;13347:19;;13343:30;13340:2;;;3340:1;;13376:12;13340:2;13404:20;13368:4;13404:20;:::i;:::-;3232:4;3408:30;;5791:20;5816:32;5842:5;5816:32;:::i;:::-;13485:74;;13680:22;;;;15621:20;13641:16;;;13634:75;13783:18;;;13770:32;;13822:18;13811:30;;13808:2;;;3340:1;;13844:12;13808:2;13889:58;13943:3;3232:4;13934:6;3408:30;13919:22;;13889:58;:::i;:::-;13871:16;;;13864:84;3445;;-1:-1;;3543:14;;;;3571;;;;3372:1;3365:9;3325:267;;5860:132;5937:13;;5955:32;5937:13;5955:32;:::i;6000:440::-;;6101:3;6094:4;6086:6;6082:17;6078:27;6068:2;;-1:-1;;6109:12;6068:2;6156:6;6143:20;6178:64;6193:48;6234:6;6193:48;:::i;6178:64::-;6169:73;;6262:6;6255:5;6248:21;6366:3;6298:4;6357:6;6290;6348:16;;6345:25;6342:2;;;6383:1;;6373:12;6342:2;72216:6;6298:4;6290:6;6286:17;6298:4;6324:5;6320:16;72193:30;72272:1;72254:16;;;6298:4;72254:16;72247:27;6324:5;6061:379;-1:-1;;6061:379::o;6449:442::-;;6561:3;6554:4;6546:6;6542:17;6538:27;6528:2;;-1:-1;;6569:12;6528:2;6609:6;6603:13;6631:64;6646:48;6687:6;6646:48;:::i;6631:64::-;6622:73;;6715:6;6708:5;6701:21;6819:3;6751:4;6810:6;6743;6801:16;;6798:25;6795:2;;;6836:1;;6826:12;6795:2;6846:39;6878:6;6751:4;6777:5;6773:16;6751:4;6743:6;6739:17;6846:39;:::i;:::-;;6521:370;;;;:::o;11699:828::-;;11826:4;11814:9;11809:3;11805:19;11801:30;11798:2;;;-1:-1;;11834:12;11798:2;11862:20;11826:4;11862:20;:::i;:::-;11853:29;;7743:6;7737:13;74714:1;74707:5;74704:12;74694:2;;74730:1;;74720:12;74694:2;11948:104;;12110:2;12173:22;;16186:13;70176:4;70165:16;;75419:33;;75409:2;;-1:-1;;75456:12;75409:2;12143:58;12110:2;12129:5;12125:16;12118:84;;12260:2;12329:9;12325:22;5662:13;12260:2;12279:5;12275:16;12268:86;12412:2;12481:9;12477:22;5662:13;12412:2;12431:5;12427:16;12420:86;11792:735;;;;:::o;15413:134::-;15491:13;;69653:34;69642:46;;74929:35;;74919:2;;74978:1;;74968:12;15971:132;16048:13;;70074:18;70063:30;;75298:34;;75288:2;;75346:1;;75336:12;16247:512;;;16396:2;16384:9;16375:7;16371:23;16367:32;16364:2;;;-1:-1;;16402:12;16364:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;16594:2;16579:18;;16573:25;16454:82;;-1:-1;16618:18;16607:30;;16604:2;;;-1:-1;;16640:12;16604:2;16670:73;16735:7;16726:6;16715:9;16711:22;16670:73;:::i;:::-;16660:83;;;16358:401;;;;;:::o;16766:867::-;;;;17002:2;16990:9;16981:7;16977:23;16973:32;16970:2;;;-1:-1;;17008:12;16970:2;17059:17;17053:24;17097:18;;17089:6;17086:30;17083:2;;;-1:-1;;17119:12;17083:2;17149:89;17230:7;17221:6;17210:9;17206:22;17149:89;:::i;:::-;17139:99;;17296:2;17285:9;17281:18;17275:25;17261:39;;17097:18;17312:6;17309:30;17306:2;;;-1:-1;;17342:12;17306:2;17481:6;17470:9;17466:22;;;4678:3;4671:4;4663:6;4659:17;4655:27;4645:2;;-1:-1;;4686:12;4645:2;4726:6;4720:13;4748:117;4763:101;4857:6;4763:101;:::i;4748:117::-;4893:21;;;17296:2;4950:14;;;;4871:16;4925:17;;-1:-1;5030:274;5055:6;5052:1;5049:13;5030:274;;;5131:3;5125:10;4929:6;5113:23;14799:4;14778:19;5113:23;14782:3;14778:19;;14774:30;14771:2;;;-1:-1;;14807:12;14771:2;14835:20;14799:4;14835:20;:::i;:::-;14941:59;14996:3;17296:2;5113:23;;14941:59;:::i;:::-;14923:16;14916:85;14799:4;5113:23;15068:18;15062:25;17097:18;15099:6;15096:30;15093:2;;;-1:-1;;15129:12;15093:2;15174:69;15239:3;17296:2;15230:6;5113:23;15215:22;;15174:69;:::i;:::-;17296:2;15156:16;;;15149:95;;;;5143:98;;;-1:-1;5255:14;;;;5283;;;;;-1:-1;5077:1;5070:9;5030:274;;;5034:14;;17362:136;;;;;;;;14799:4;17589:9;17585:22;15769:13;17543:74;;16964:669;;;;;:::o;17640:522::-;;;17794:2;17782:9;17773:7;17769:23;17765:32;17762:2;;;-1:-1;;17800:12;17762:2;17851:17;17845:24;17889:18;17881:6;17878:30;17875:2;;;-1:-1;;17911:12;17875:2;17941:89;18022:7;18013:6;18002:9;17998:22;17941:89;:::i;:::-;17931:99;;;18067:2;18118:9;18114:22;5524:13;5542:30;5566:5;5542:30;:::i;:::-;18075:71;;;;17756:406;;;;;:::o;18169:873::-;;;;;;18363:3;18351:9;18342:7;18338:23;18334:33;18331:2;;;-1:-1;;18370:12;18331:2;18428:17;18415:31;18466:18;18458:6;18455:30;18452:2;;;-1:-1;;18488:12;18452:2;18518:78;18588:7;18579:6;18568:9;18564:22;18518:78;:::i;:::-;18508:88;;;18633:2;18676:9;18672:22;15621:20;18641:63;;18741:2;18781:9;18777:22;5382:20;5407:30;5431:5;5407:30;:::i;:::-;18749:60;-1:-1;18846:2;18885:22;;72:20;97:33;72:20;97:33;:::i;:::-;18854:63;-1:-1;18954:3;18994:22;;72:20;97:33;72:20;97:33;:::i;:::-;18963:63;;;;18325:717;;;;;;;;:::o;19049:592::-;;;19238:2;19226:9;19217:7;19213:23;19209:32;19206:2;;;-1:-1;;19244:12;19206:2;19295:17;19289:24;19333:18;;19325:6;19322:30;19319:2;;;-1:-1;;19355:12;19319:2;19489:6;19478:9;19474:22;;;2136:3;2129:4;2121:6;2117:17;2113:27;2103:2;;-1:-1;;2144:12;2103:2;2184:6;2178:13;2206:112;2221:96;2310:6;2221:96;:::i;2206:112::-;2346:21;;;2390:4;2403:14;;;;2324:16;2378:17;;;-1:-1;2483:269;2508:6;2505:1;2502:13;2483:269;;;2584:3;2578:10;2382:6;2566:23;19238:2;12696:19;2566:23;12700:3;12696:19;;12692:30;12689:2;;;-1:-1;;12725:12;12689:2;12753:20;19238:2;12753:20;:::i;:::-;2390:4;2566:23;;15909:13;15927:32;15953:5;15927:32;:::i;:::-;12841:85;;19238:2;12993:18;;12987:25;13021:30;;;13018:2;;;-1:-1;;13054:12;13018:2;13099:69;13164:3;2390:4;13155:6;2566:23;13140:22;;13099:69;:::i;:::-;13081:16;;;13074:95;-1:-1;2596:93;;-1:-1;2703:14;;;;2731;;;;2530:1;2523:9;2483:269;;;-1:-1;;19593:22;;;;15769:13;19375:131;;15769:13;;-1:-1;;;;;;;19200:441::o;19648:257::-;;19760:2;19748:9;19739:7;19735:23;19731:32;19728:2;;;-1:-1;;19766:12;19728:2;5530:6;5524:13;5542:30;5566:5;5542:30;:::i;19912:1119::-;;;;;;;20183:3;20171:9;20162:7;20158:23;20154:33;20151:2;;;-1:-1;;20190:12;20151:2;7002:6;6989:20;7014:56;7064:5;7014:56;:::i;:::-;20242:86;-1:-1;20365:2;20427:22;;6989:20;7014:56;6989:20;7014:56;:::i;:::-;20373:86;-1:-1;20496:2;20535:22;;15621:20;;-1:-1;20604:2;20670:22;;7544:20;7569:60;7544:20;7569:60;:::i;:::-;20612:90;-1:-1;20739:3;20779:22;;72:20;97:33;72:20;97:33;:::i;:::-;20748:63;-1:-1;20876:3;20861:19;;20848:33;20901:18;20890:30;;20887:2;;;-1:-1;;20923:12;20887:2;20953:62;21007:7;20998:6;20987:9;20983:22;20953:62;:::i;:::-;20943:72;;;20145:886;;;;;;;;:::o;21038:303::-;;21173:2;21161:9;21152:7;21148:23;21144:32;21141:2;;;-1:-1;;21179:12;21141:2;7373:6;7367:13;7385:53;7432:5;7385:53;:::i;21348:514::-;;;21500:2;21488:9;21479:7;21475:23;21471:32;21468:2;;;-1:-1;;21506:12;21468:2;21564:17;21551:31;21602:18;;21594:6;21591:30;21588:2;;;-1:-1;;21624:12;21588:2;21706:22;;;;7983:4;7962:19;;;7958:30;7955:2;;;-1:-1;;7991:12;7955:2;8019:20;7983:4;8019:20;:::i;:::-;7002:6;6989:20;7014:56;7064:5;7014:56;:::i;:::-;8102:98;;8268:2;8345:22;;6989:20;7014:56;6989:20;7014:56;:::i;:::-;8268:2;8283:16;;8276:98;21500:2;8495:22;;;15621:20;8456:16;;;8449:75;8614:2;8599:18;;8586:32;8627:30;;;8624:2;;;-1:-1;;8660:12;8624:2;8705:108;8809:3;8800:6;8789:9;8785:22;8705:108;:::i;:::-;8614:2;8687:16;;8680:134;-1:-1;8691:5;8268:2;21814:22;;;;15621:20;;-1:-1;;;;;21462:400::o;21869:520::-;;;22024:2;22012:9;22003:7;21999:23;21995:32;21992:2;;;-1:-1;;22030:12;21992:2;22126:18;;22088:17;22075:31;22115:30;22112:2;;;-1:-1;;22148:12;22112:2;22088:17;22075:31;22237:9;22233:22;9013:4;9001:9;8996:3;8992:19;8988:30;8985:2;;;-1:-1;;9021:12;8985:2;9049:20;9013:4;9049:20;:::i;:::-;22126:18;9134:17;9121:31;9161:30;9158:2;;;-1:-1;;9194:12;9158:2;9239:74;9309:3;9134:17;9121:31;9289:9;9285:22;9239:74;:::i;:::-;9221:16;9214:100;9381:2;;9439:9;9435:22;15621:20;9381:2;9400:5;9396:16;9389:75;22024:2;9543:9;9539:18;9526:32;22126:18;9570:6;9567:30;9564:2;;;-1:-1;;9600:12;9564:2;9743:6;9732:9;9728:22;;;;3815:3;3808:4;3800:6;3796:17;3792:27;3782:2;;-1:-1;;3823:12;3782:2;3892:117;3907:101;3870:6;3857:20;3907:101;:::i;3892:117::-;3857:20;;4037:21;;4094:14;;;;4069:17;;;-1:-1;4174:270;3870:6;3857:20;4196:1;4193:13;4174:270;;;4282:3;4269:17;4073:6;4257:30;22024:2;14132:19;4257:30;14136:3;14132:19;;14128:30;14125:2;;;-1:-1;;14161:12;14125:2;14189:20;22024:2;14189:20;:::i;:::-;9381:2;4257:30;;5791:20;5816:32;5842:5;5816:32;:::i;:::-;14270:74;;22024:2;14418:18;;14405:32;14446:30;;;14443:2;;;-1:-1;;14479:12;14443:2;14524:58;14578:3;9381:2;14569:6;4257:30;14554:22;;14524:58;:::i;:::-;14506:16;;;14499:84;-1:-1;4294:87;;-1:-1;4395:14;;;;4423;;;;4221:1;4214:9;4174:270;;;-1:-1;;22024:2;9627:16;;9620:137;-1:-1;9631:5;;22341:22;;15621:20;;-1:-1;;;;;21986:403::o;22396:507::-;;;22569:9;22560:7;22556:23;22581:3;22556:23;22552:33;22549:2;;;-1:-1;;22588:12;22549:2;9948:6;;9927:19;9923:32;9920:2;;;-1:-1;;9958:12;9920:2;9986:22;9948:6;9986:22;:::i;:::-;9977:31;;10096:83;10175:3;10151:22;10096:83;:::i;:::-;10078:16;10071:109;10280:83;10359:3;10247:2;10339:9;10335:22;10280:83;:::i;:::-;10247:2;10266:5;10262:16;10255:109;10465:60;10521:3;10432:2;10501:9;10497:22;10465:60;:::i;:::-;10432:2;10451:5;10447:16;10440:86;10627:60;10683:3;10594:2;10663:9;10659:22;10627:60;:::i;:::-;10594:2;10613:5;10609:16;10602:86;10784:60;10840:3;10750;10820:9;10816:22;10784:60;:::i;:::-;10750:3;10770:5;10766:16;10759:86;10941:60;10997:3;10907;10977:9;10973:22;10941:60;:::i;:::-;10907:3;10927:5;10923:16;10916:86;11101:60;11157:3;11067;11137:9;11133:22;11101:60;:::i;:::-;11067:3;11087:5;11083:16;11076:86;11223:3;11293:9;11289:22;5662:13;11223:3;11243:5;11239:16;11232:86;11381:3;11417:59;11472:3;11381;11452:9;11448:22;11417:59;:::i;:::-;11381:3;11401:5;11397:18;11390:87;;11538:3;;11610:9;11606:22;15769:13;11538:3;11558:5;11554:18;11547:88;;22640:100;;;22796:91;22879:7;9948:6;22859:9;22855:22;22796:91;:::i;:::-;22786:101;;;;22543:360;;;;;:::o;22910:533::-;;;;23058:2;23046:9;23037:7;23033:23;23029:32;23026:2;;;-1:-1;;23064:12;23026:2;15356:6;15350:13;15368:33;15395:5;15368:33;:::i;:::-;23227:2;23277:22;;15350:13;23116:74;;-1:-1;15368:33;15350:13;15368:33;:::i;:::-;23346:2;23395:22;;15909:13;23235:74;;-1:-1;15927:32;15909:13;15927:32;:::i;:::-;23354:73;;;;23020:423;;;;;:::o;23450:399::-;;;23582:2;23570:9;23561:7;23557:23;23553:32;23550:2;;;-1:-1;;23588:12;23550:2;15497:6;15491:13;15509:33;15536:5;15509:33;:::i;:::-;23751:2;23801:22;;15491:13;23640:74;;-1:-1;15509:33;15491:13;15509:33;:::i;23856:263::-;;23971:2;23959:9;23950:7;23946:23;23942:32;23939:2;;;-1:-1;;23977:12;23939:2;-1:-1;15769:13;;23933:186;-1:-1;23933:186::o;24416:142::-;69773:42;69762:54;24495:58;;24489:69::o;26791:323::-;;26923:5;66640:12;67238:6;67233:3;67226:19;27006:52;27051:6;67275:4;67270:3;67266:14;67275:4;27032:5;27028:16;27006:52;:::i;:::-;73013:2;72993:14;73009:7;72989:28;27070:39;;;;67275:4;27070:39;;26871:243;-1:-1;;26871:243::o;39882:800::-;40110:16;40104:23;69091:53;69138:5;69091:53;:::i;:::-;28626:66;;40288:4;40277:16;;;40271:23;70176:4;70165:16;40344:14;;;43916:35;40435:4;40424:16;;;40418:23;40495:14;;;26346:37;40586:4;40575:16;;;40569:23;40646:14;;26346:37;40002:680::o;42909:103::-;69653:34;69642:46;42970:37;;42964:48::o;43528:100::-;69979:10;69968:22;43587:36;;43581:47::o;43635:100::-;70074:18;70063:30;43694:36;;43688:47::o;43963:392::-;73100:14;73104:2;73100:14;;;;;25018:58;;73100:14;;;;;44216:2;44207:12;;25018:58;44318:12;;;44107:248::o;44362:659::-;32765:66;32745:87;;32730:1;32851:11;;26346:37;;;;44873:12;;;26346:37;44984:12;;;44607:414::o;45028:798::-;34765:66;34745:87;;73104:2;73100:14;;;;;;34730:1;34851:11;;25018:58;45567:12;;;26346:37;;;;45678:12;;;26346:37;45789:12;;;45301:525::o;45833:379::-;46197:10;46021:191::o;46219:222::-;69773:42;69762:54;;;;24642:45;;46346:2;46331:18;;46317:124::o;46448:333::-;69773:42;69762:54;;;24642:45;;69762:54;;46767:2;46752:18;;24642:45;46603:2;46588:18;;46574:207::o;46788:752::-;;69773:42;;68185:5;69762:54;24649:3;24642:45;69773:42;68185:5;69762:54;47210:2;47199:9;47195:18;24642:45;69773:42;68185:5;69762:54;47293:2;47282:9;47278:18;24642:45;;26376:5;47376:2;47365:9;47361:18;26346:37;47045:3;47413;47402:9;47398:19;47391:49;47454:76;47045:3;47034:9;47030:19;47516:6;47454:76;:::i;:::-;47446:84;47016:524;-1:-1;;;;;;;47016:524::o;47547:780::-;69773:42;69762:54;;;24642:45;;69762:54;;;47979:2;47964:18;;24642:45;48062:2;48047:18;;26346:37;;;;48145:2;48130:18;;26346:37;;;;69762:54;;48228:3;48213:19;;24642:45;69762:54;;;48312:3;48297:19;;24642:45;47814:3;47799:19;;47785:542::o;48334:333::-;69773:42;69762:54;;;;24642:45;;48653:2;48638:18;;26346:37;48489:2;48474:18;;48460:207::o;48674:222::-;26346:37;;;48801:2;48786:18;;48772:124::o;48903:440::-;26346:37;;;69773:42;69762:54;;;;49248:2;49233:18;;24642:45;70074:18;70063:30;49329:2;49314:18;;43694:36;49084:2;49069:18;;49055:288::o;49350:218::-;68552:66;68541:78;;;;26743:36;;49475:2;49460:18;;49446:122::o;49575:329::-;68552:66;68541:78;;;;26743:36;;69773:42;69762:54;49890:2;49875:18;;24642:45;49728:2;49713:18;;49699:205::o;49911:602::-;69773:42;69762:54;;;27555:73;;69762:54;;;50333:2;50318:18;;24642:45;69762:54;;50416:2;50401:18;;24642:45;50499:2;50484:18;;26346:37;;;;50145:3;50130:19;;50116:397::o;51690:1026::-;;69773:42;;27621:5;69762:54;27562:3;27555:73;69773:42;27621:5;69762:54;52271:2;52260:9;52256:18;27555:73;69773:42;27621:5;69762:54;52377:2;52366:9;52362:18;27555:73;69773:42;68185:5;69762:54;52460:2;52449:9;52445:18;24642:45;;71855:24;52551:3;52540:9;52536:19;28783:58;52056:3;52589;52578:9;52574:19;52567:49;52630:76;52056:3;52045:9;52041:19;52692:6;52630:76;:::i;:::-;52622:84;52027:689;-1:-1;;;;;;;;52027:689::o;52723:480::-;52924:2;52909:18;;69091:53;69138:5;69091:53;:::i;:::-;28294:68;;;53106:2;53091:18;;26346:37;;;;53189:2;53174:18;;;26346:37;52895:308;:::o;53210:375::-;53386:2;53371:18;;69091:53;69138:5;69091:53;:::i;:::-;28466:71;;;53571:2;53556:18;26346:37;53357:228;:::o;53592:310::-;;53739:2;53760:17;53753:47;53814:78;53739:2;53728:9;53724:18;53878:6;53814:78;:::i;53909:416::-;54109:2;54123:47;;;29432:2;54094:18;;;67226:19;29468:34;67266:14;;;29448:55;29537:12;29523;;;29516:34;29569:12;;;54080:245::o;54332:416::-;54532:2;54546:47;;;29820:2;54517:18;;;67226:19;29856:34;67266:14;;;29836:55;29925:20;29911:12;;;29904:42;29965:12;;;54503:245::o;54755:416::-;54955:2;54969:47;;;30216:2;54940:18;;;67226:19;30252:34;67266:14;;;30232:55;30321:17;30307:12;;;30300:39;30358:12;;;54926:245::o;55178:416::-;55378:2;55392:47;;;30609:2;55363:18;;;67226:19;30645:34;67266:14;;;30625:55;30714:20;30700:12;;;30693:42;30754:12;;;55349:245::o;55601:416::-;55801:2;55815:47;;;31005:2;55786:18;;;67226:19;31041:34;67266:14;;;31021:55;31110:23;31096:12;;;31089:45;31153:12;;;55772:245::o;56024:416::-;56224:2;56238:47;;;31404:2;56209:18;;;67226:19;31440:34;67266:14;;;31420:55;31509:34;31495:12;;;31488:56;31578:6;31564:12;;;31557:28;31604:12;;;56195:245::o;56447:416::-;56647:2;56661:47;;;31855:2;56632:18;;;67226:19;31891:34;67266:14;;;31871:55;31960:9;31946:12;;;31939:31;31989:12;;;56618:245::o;56870:416::-;57070:2;57084:47;;;32240:2;57055:18;;;67226:19;32276:34;67266:14;;;32256:55;32345:34;32331:12;;;32324:56;32414:9;32400:12;;;32393:31;32443:12;;;57041:245::o;57293:416::-;57493:2;57507:47;;;33101:2;57478:18;;;67226:19;33137:34;67266:14;;;33117:55;33206:23;33192:12;;;33185:45;33249:12;;;57464:245::o;57716:416::-;57916:2;57930:47;;;33500:2;57901:18;;;67226:19;33536:34;67266:14;;;33516:55;33605:14;33591:12;;;33584:36;33639:12;;;57887:245::o;58139:416::-;58339:2;58353:47;;;33890:2;58324:18;;;67226:19;33926:34;67266:14;;;33906:55;33995:26;33981:12;;;33974:48;34041:12;;;58310:245::o;58562:416::-;58762:2;58776:47;;;34292:2;58747:18;;;67226:19;34328:34;67266:14;;;34308:55;34397:26;34383:12;;;34376:48;34443:12;;;58733:245::o;58985:416::-;59185:2;59199:47;;;35101:2;59170:18;;;67226:19;35137:34;67266:14;;;35117:55;35206:16;35192:12;;;35185:38;35242:12;;;59156:245::o;59408:416::-;59608:2;59622:47;;;35493:2;59593:18;;;67226:19;35529:34;67266:14;;;35509:55;35598:21;35584:12;;;35577:43;35639:12;;;59579:245::o;59831:416::-;60031:2;60045:47;;;35890:2;60016:18;;;67226:19;35926:34;67266:14;;;35906:55;35995:11;35981:12;;;35974:33;36026:12;;;60002:245::o;60254:416::-;60454:2;60468:47;;;36277:2;60439:18;;;67226:19;36313:34;67266:14;;;36293:55;36382:24;36368:12;;;36361:46;36426:12;;;60425:245::o;60677:416::-;60877:2;60891:47;;;36982:2;60862:18;;;67226:19;37018:34;67266:14;;;36998:55;37087:6;37073:12;;;37066:28;37113:12;;;60848:245::o;61100:416::-;61300:2;61314:47;;;37364:2;61285:18;;;67226:19;37400:34;67266:14;;;37380:55;37469:22;37455:12;;;37448:44;37511:12;;;61271:245::o;61523:416::-;61723:2;61737:47;;;37762:2;61708:18;;;67226:19;37798:34;67266:14;;;37778:55;37867:24;37853:12;;;37846:46;37911:12;;;61694:245::o;61946:787::-;;62271:3;62260:9;62256:19;62248:27;;38256:86;38327:14;38233:16;38227:23;38256:86;:::i;:::-;38427:4;38420:5;38416:16;38410:23;38439:86;38427:4;38514:3;38510:14;38496:12;38439:86;:::i;:::-;;38611:4;38604:5;38600:16;38594:23;38623:63;38611:4;38675:3;38671:14;38657:12;38623:63;:::i;:::-;;38772:4;38765:5;38761:16;38755:23;38784:63;38772:4;38836:3;38832:14;38818:12;38784:63;:::i;:::-;;38927:4;38920:5;38916:16;38910:23;38939:63;38927:4;38991:3;38987:14;38973:12;38939:63;:::i;:::-;;39082:4;39075:5;39071:16;39065:23;39094:63;39082:4;39146:3;39142:14;39128:12;39094:63;:::i;:::-;;39240:4;39233:5;39229:16;39223:23;39252:63;39240:4;39304:3;39300:14;39286:12;39252:63;:::i;:::-;;39394:4;39387:5;39383:16;39377:23;39394:4;39458:3;39454:14;26346:37;39550:6;;39543:5;39539:18;39533:25;39564:63;39550:6;39614:3;39610:16;39596:12;39564:63;:::i;:::-;-1:-1;;39706:6;39695:18;;;39689:25;39768:16;;;26346:37;62420:127;62542:3;62527:19;;62518:6;62420:127;:::i;:::-;62558:73;62626:3;62615:9;62611:19;62602:6;62558:73;:::i;:::-;62642:81;62718:3;62707:9;62703:19;62694:6;62642:81;:::i;62740:414::-;;62939:2;;62960:17;62953:47;40960:14;62928:9;40960:14;69773:42;;41042:16;41036:23;69762:54;62939:2;62928:9;62924:18;24495:58;62939:2;41222:5;41218:16;41212:23;41312:14;69773:42;68185:5;69762:54;41312:14;62928:9;41312:14;24495:58;69773:42;41312:14;41406:5;41402:16;41396:23;69762:54;41496:14;62928:9;41496:14;24495:58;41496:14;41595:5;41591:16;41585:23;41662:14;62928:9;41662:14;26346:37;41662:14;41765:5;41761:16;41755:23;41832:14;62928:9;41832:14;26346:37;41832:14;41930:5;41926:16;41920:23;41900:43;;40969:4;;62928:9;41963:14;41956:38;42009:167;;;25472:5;66640:12;67238:6;67233:3;67226:19;67266:14;;;;62928:9;67266:14;25484:115;;67266:14;62939:2;25656:6;25652:17;62928:9;25643:27;;25631:39;;62939:2;25773:5;66462:14;25785:21;;-1:-1;25812:426;25837:6;25834:1;25831:13;25812:426;;;25889:20;62928:9;25893:4;25889:20;;25884:3;25877:33;25944:6;25938:13;42581:61;42627:14;42558:16;42552:23;42581:61;:::i;:::-;42710:16;;42704:23;42747:14;;;42740:38;;;42793:71;42466:14;;;42704:23;42793:71;:::i;:::-;25958:136;-1:-1;;67059:14;;;;26217;;;;25859:1;25852:9;25812:426;;;-1:-1;63006:138;;62910:244;-1:-1;;;;;;;;62910:244::o;63390:333::-;26346:37;;;63709:2;63694:18;;26346:37;63545:2;63530:18;;63516:207::o;63730:640::-;;26376:5;26353:3;26346:37;26376:5;64124:2;64113:9;64109:18;26346:37;69773:42;68185:5;69762:54;64207:2;64196:9;64192:18;24642:45;63959:3;64244:2;64233:9;64229:18;64222:48;64284:76;63959:3;63948:9;63944:19;64346:6;64284:76;:::i;:::-;64276:84;63930:440;-1:-1;;;;;;63930:440::o;64377:256::-;64439:2;64433:9;64465:17;;;64540:18;64525:34;;64561:22;;;64522:62;64519:2;;;64597:1;;64587:12;64519:2;64439;64606:22;64417:216;;-1:-1;64417:216::o;64640:304::-;;64799:18;64791:6;64788:30;64785:2;;;-1:-1;;64821:12;64785:2;-1:-1;64866:4;64854:17;;;64919:15;;64722:222::o;65987:321::-;;66130:18;66122:6;66119:30;66116:2;;;-1:-1;;66152:12;66116:2;-1:-1;66229:4;66206:17;66225:9;66202:33;66293:4;66283:15;;66053:255::o;72289:268::-;72354:1;72361:101;72375:6;72372:1;72369:13;72361:101;;;72442:11;;;72436:18;72423:11;;;72416:39;72397:2;72390:10;72361:101;;;72477:6;72474:1;72471:13;72468:2;;;-1:-1;;72354:1;72524:16;;72517:27;72338:219::o;73132:111::-;73221:1;73214:5;73211:12;73201:2;;73227:9;73201:2;73195:48;:::o;73487:117::-;69773:42;73574:5;69762:54;73549:5;73546:35;73536:2;;73595:1;;73585:12;73751:111;73832:5;68375:13;68368:21;73810:5;73807:32;73797:2;;73853:1;;73843:12;73993:115;68552:66;74078:5;68541:78;74054:5;74051:34;74041:2;;74099:1;;74089:12;74746:117;69537:30;74833:5;69526:42;74808:5;74805:35;74795:2;;74854:1;;74844:12;74870:117;69653:34;74957:5;69642:46;74932:5;74929:35;74919:2;;74978:1;;74968:12;75118:115;69979:10;75203:5;69968:22;75179:5;75176:34;75166:2;;75224:1;;75214:12"
            },
            "methodIdentifiers": {
                "EIP712_DOMAIN_SEPARATOR()": "dab400f3",
                "FEATURE_NAME()": "6ae4b4f7",
                "FEATURE_VERSION()": "031b905c",
                "GREEDY_TOKENS_BLOOM_FILTER()": "d925a56d",
                "_multiHopFill((address[],uint256,(bytes4,bytes)[]),uint256)": "a82b9f3a",
                "_sellToLiquidityProvider(address,address,uint256,address,address,bytes)": "e6f90561",
                "_sellToUniswap(address[],uint256,bool,address,address)": "d64d051a",
                "batchFill((address,address,uint256,(bytes4,uint256,bytes)[]),uint256)": "afc6728e",
                "migrate()": "8fd3ab80",
                "multiHopFill((address[],uint256,(bytes4,bytes)[]),uint256)": "21c184b6",
                "sandbox()": "1984916f"
            }
        }
    },
    "sourceTreeHashHex": "0x3550fc5e7b6d1608376afcabf52a6142c6d8e5ec33872cecb531f3a23d22135a",
    "sources": {
        "./MultiplexFeature.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../external/ILiquidityProviderSandbox.sol\";\nimport \"../fixins/FixinCommon.sol\";\nimport \"../fixins/FixinEIP712.sol\";\nimport \"../fixins/FixinTokenSpender.sol\";\nimport \"../migrations/LibMigrate.sol\";\nimport \"../transformers/LibERC20Transformer.sol\";\nimport \"../vendor/ILiquidityProvider.sol\";\nimport \"../vendor/IUniswapV2Pair.sol\";\nimport \"./interfaces/IFeature.sol\";\nimport \"./interfaces/IMultiplexFeature.sol\";\nimport \"./interfaces/INativeOrdersFeature.sol\";\nimport \"./interfaces/ITransformERC20Feature.sol\";\nimport \"./libs/LibNativeOrder.sol\";\n\n\n/// @dev This feature enables efficient batch and multi-hop trades\n///      using different liquidity sources.\ncontract MultiplexFeature is\n    IFeature,\n    IMultiplexFeature,\n    FixinCommon,\n    FixinEIP712,\n    FixinTokenSpender\n{\n    using LibERC20Transformer for IERC20TokenV06;\n    using LibSafeMathV06 for uint128;\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"MultiplexFeature\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\n\n    /// @dev The WETH token contract.\n    IEtherTokenV06 private immutable weth;\n    /// @dev The sandbox contract address.\n    ILiquidityProviderSandbox public immutable sandbox;\n    // address of the UniswapV2Factory contract.\n    address private constant UNISWAP_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n    // address of the (Sushiswap) UniswapV2Factory contract.\n    address private constant SUSHISWAP_FACTORY = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\n    // Init code hash of the UniswapV2Pair contract.\n    uint256 private constant UNISWAP_PAIR_INIT_CODE_HASH = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\n    // Init code hash of the (Sushiswap) UniswapV2Pair contract.\n    uint256 private constant SUSHISWAP_PAIR_INIT_CODE_HASH = 0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303;\n\n    constructor(\n        address zeroExAddress,\n        IEtherTokenV06 weth_,\n        ILiquidityProviderSandbox sandbox_,\n        bytes32 greedyTokensBloomFilter\n    )\n        public\n        FixinEIP712(zeroExAddress)\n        FixinTokenSpender(greedyTokensBloomFilter)\n    {\n        weth = weth_;\n        sandbox = sandbox_;\n    }\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate()\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.batchFill.selector);\n        _registerFeatureFunction(this.multiHopFill.selector);\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n\n    /// @dev Executes a batch of fills selling `fillData.inputToken`\n    ///      for `fillData.outputToken` in sequence. Refer to the\n    ///      internal variant `_batchFill` for the allowed nested\n    ///      operations.\n    /// @param fillData Encodes the input/output tokens, the sell\n    ///        amount, and the nested operations for this batch fill.\n    /// @param minBuyAmount The minimum amount of `fillData.outputToken`\n    ///        to buy. Reverts if this amount is not met.\n    /// @return outputTokenAmount The amount of the output token bought.\n    function batchFill(\n        BatchFillData memory fillData,\n        uint256 minBuyAmount\n    )\n        public\n        payable\n        override\n        returns (uint256 outputTokenAmount)\n    {\n        // Cache the sender's balance of the output token.\n        outputTokenAmount = fillData.outputToken.getTokenBalanceOf(msg.sender);\n        // Cache the contract's ETH balance prior to this call.\n        uint256 ethBalanceBefore = address(this).balance.safeSub(msg.value);\n\n        // Perform the batch fill.\n        _batchFill(fillData);\n\n        // The `outputTokenAmount` returned by `_batchFill` may not\n        // be fully accurate (e.g. due to some janky token).\n        outputTokenAmount = fillData.outputToken.getTokenBalanceOf(msg.sender)\n            .safeSub(outputTokenAmount);\n        require(\n            outputTokenAmount >= minBuyAmount,\n            \"MultiplexFeature::batchFill/UNDERBOUGHT\"\n        );\n\n        uint256 ethBalanceAfter = address(this).balance;\n        require(\n            ethBalanceAfter >= ethBalanceBefore,\n            \"MultiplexFeature::batchFill/OVERSPENT_ETH\"\n        );\n        // Refund ETH\n        if (ethBalanceAfter > ethBalanceBefore) {\n            _transferEth(msg.sender, ethBalanceAfter - ethBalanceBefore);\n        }\n    }\n\n    /// @dev Executes a sequence of fills \"hopping\" through the\n    ///      path of tokens given by `fillData.tokens`. Refer to the\n    ///      internal variant `_multiHopFill` for the allowed nested\n    ///      operations.\n    /// @param fillData Encodes the path of tokens, the sell amount,\n    ///        and the nested operations for this multi-hop fill.\n    /// @param minBuyAmount The minimum amount of the output token\n    ///        to buy. Reverts if this amount is not met.\n    /// @return outputTokenAmount The amount of the output token bought.\n    function multiHopFill(\n        MultiHopFillData memory fillData,\n        uint256 minBuyAmount\n    )\n        public\n        payable\n        override\n        returns (uint256 outputTokenAmount)\n    {\n        IERC20TokenV06 outputToken = IERC20TokenV06(fillData.tokens[fillData.tokens.length - 1]);\n        // Cache the sender's balance of the output token.\n        outputTokenAmount = outputToken.getTokenBalanceOf(msg.sender);\n        // Cache the contract's ETH balance prior to this call.\n        uint256 ethBalanceBefore = address(this).balance.safeSub(msg.value);\n\n        // Perform the multi-hop fill. Pass in `msg.value` as the maximum\n        // allowable amount of ETH for the wrapped calls to consume.\n        _multiHopFill(fillData, msg.value);\n\n        // The `outputTokenAmount` returned by `_multiHopFill` may not\n        // be fully accurate (e.g. due to some janky token).\n        outputTokenAmount = outputToken.getTokenBalanceOf(msg.sender)\n            .safeSub(outputTokenAmount);\n        require(\n            outputTokenAmount >= minBuyAmount,\n            \"MultiplexFeature::multiHopFill/UNDERBOUGHT\"\n        );\n\n        uint256 ethBalanceAfter = address(this).balance;\n        require(\n            ethBalanceAfter >= ethBalanceBefore,\n            \"MultiplexFeature::multiHopFill/OVERSPENT_ETH\"\n        );\n        // Refund ETH\n        if (ethBalanceAfter > ethBalanceBefore) {\n            _transferEth(msg.sender, ethBalanceAfter - ethBalanceBefore);\n        }\n    }\n\n    // Similar to FQT. If `fillData.sellAmount` is set to `type(uint256).max`,\n    // this is effectively a batch fill. Otherwise it can be set to perform a\n    // market sell of some amount. Note that the `outputTokenAmount` returned\n    // by this function could theoretically be inaccurate if `msg.sender` has\n    // set a token allowance on an external contract that gets called during\n    // the execution of this function.\n    function _batchFill(BatchFillData memory fillData)\n        internal\n        returns (uint256 outputTokenAmount, uint256 remainingEth)\n    {\n        // Track the remaining ETH allocated to this call.\n        remainingEth = msg.value;\n        // Track the amount of input token sold.\n        uint256 soldAmount;\n        for (uint256 i = 0; i != fillData.calls.length; i++) {\n            // Check if we've hit our target.\n            if (soldAmount >= fillData.sellAmount) { break; }\n            WrappedBatchCall memory wrappedCall = fillData.calls[i];\n            // Compute the fill amount.\n            uint256 inputTokenAmount = LibSafeMathV06.min256(\n                wrappedCall.sellAmount,\n                fillData.sellAmount.safeSub(soldAmount)\n            );\n            if (wrappedCall.selector == INativeOrdersFeature._fillRfqOrder.selector) {\n                // Decode the RFQ order and signature.\n                (\n                    LibNativeOrder.RfqOrder memory order,\n                    LibSignature.Signature memory signature\n                ) = abi.decode(\n                    wrappedCall.data,\n                    (LibNativeOrder.RfqOrder, LibSignature.Signature)\n                );\n                if (order.expiry <= uint64(block.timestamp)) {\n                    bytes32 orderHash = _getEIP712Hash(\n                        LibNativeOrder.getRfqOrderStructHash(order)\n                    );\n                    emit ExpiredRfqOrder(\n                        orderHash,\n                        order.maker,\n                        order.expiry\n                    );\n                    continue;\n                }\n                require(\n                    order.takerToken == fillData.inputToken &&\n                    order.makerToken == fillData.outputToken,\n                    \"MultiplexFeature::_batchFill/RFQ_ORDER_INVALID_TOKENS\"\n                );\n                // Try filling the RFQ order. Swallows reverts.\n                try\n                    INativeOrdersFeature(address(this))._fillRfqOrder\n                        (\n                            order,\n                            signature,\n                            inputTokenAmount.safeDowncastToUint128(),\n                            msg.sender\n                        )\n                    returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n                {\n                    // Increment the sold and bought amounts.\n                    soldAmount = soldAmount.safeAdd(takerTokenFilledAmount);\n                    outputTokenAmount = outputTokenAmount.safeAdd(makerTokenFilledAmount);\n                } catch {}\n            } else if (wrappedCall.selector == this._sellToUniswap.selector) {\n                (address[] memory tokens, bool isSushi) = abi.decode(\n                    wrappedCall.data,\n                    (address[], bool)\n                );\n                require(\n                    tokens.length >= 2 &&\n                    tokens[0] == address(fillData.inputToken) &&\n                    tokens[tokens.length - 1] == address(fillData.outputToken),\n                    \"MultiplexFeature::_batchFill/UNISWAP_INVALID_TOKENS\"\n                );\n                // Perform the Uniswap/Sushiswap trade.\n                uint256 outputTokenAmount_  = _sellToUniswap(\n                    tokens,\n                    inputTokenAmount,\n                    isSushi,\n                    address(0),\n                    msg.sender\n                );\n                // Increment the sold and bought amounts.\n                soldAmount = soldAmount.safeAdd(inputTokenAmount);\n                outputTokenAmount = outputTokenAmount.safeAdd(outputTokenAmount_);\n            } else if (wrappedCall.selector == this._sellToLiquidityProvider.selector) {\n                (address provider, bytes memory auxiliaryData) = abi.decode(\n                    wrappedCall.data,\n                    (address, bytes)\n                );\n                if (fillData.inputToken.isTokenETH()) {\n                    inputTokenAmount = LibSafeMathV06.min256(\n                        inputTokenAmount,\n                        remainingEth\n                    );\n                    // Transfer the input ETH to the provider.\n                    _transferEth(payable(provider), inputTokenAmount);\n                    // Count that ETH as spent.\n                    remainingEth -= inputTokenAmount;\n                } else {\n                    // Transfer input ERC20 tokens to the provider.\n                    _transferERC20Tokens(\n                        fillData.inputToken,\n                        msg.sender,\n                        provider,\n                        inputTokenAmount\n                    );\n                }\n                // Perform the PLP trade.\n                uint256 outputTokenAmount_ = _sellToLiquidityProvider(\n                    fillData.inputToken,\n                    fillData.outputToken,\n                    inputTokenAmount,\n                    ILiquidityProvider(provider),\n                    msg.sender,\n                    auxiliaryData\n                );\n                // Increment the sold and bought amounts.\n                soldAmount = soldAmount.safeAdd(inputTokenAmount);\n                outputTokenAmount = outputTokenAmount.safeAdd(outputTokenAmount_);\n            } else if (wrappedCall.selector == ITransformERC20Feature._transformERC20.selector) {\n                ITransformERC20Feature.TransformERC20Args memory args;\n                args.taker = msg.sender;\n                args.inputToken = fillData.inputToken;\n                args.outputToken = fillData.outputToken;\n                args.inputTokenAmount = inputTokenAmount;\n                args.minOutputTokenAmount = 0;\n                uint256 ethValue;\n                (args.transformations, ethValue) = abi.decode(\n                    wrappedCall.data,\n                    (ITransformERC20Feature.Transformation[], uint256)\n                );\n                // Do not spend more than the remaining ETH.\n                ethValue = LibSafeMathV06.min256(\n                    ethValue,\n                    remainingEth\n                );\n                if (ethValue > 0) {\n                    require(\n                        args.inputToken.isTokenETH(),\n                        \"MultiplexFeature::_batchFill/ETH_TRANSFORM_ONLY\"\n                    );\n                }\n                try ITransformERC20Feature(address(this))._transformERC20\n                    {value: ethValue}\n                    (args)\n                    returns (uint256 outputTokenAmount_)\n                {\n                    remainingEth -= ethValue;\n                    soldAmount = soldAmount.safeAdd(inputTokenAmount);\n                    outputTokenAmount = outputTokenAmount.safeAdd(outputTokenAmount_);\n                } catch {}\n            } else if (wrappedCall.selector == this._multiHopFill.selector) {\n                MultiHopFillData memory multiHopFillData;\n                uint256 ethValue;\n                (\n                    multiHopFillData.tokens,\n                    multiHopFillData.calls,\n                    ethValue\n                ) = abi.decode(\n                    wrappedCall.data,\n                    (address[], WrappedMultiHopCall[], uint256)\n                );\n                multiHopFillData.sellAmount = inputTokenAmount;\n                // Do not spend more than the remaining ETH.\n                ethValue = LibSafeMathV06.min256(\n                    ethValue,\n                    remainingEth\n                );\n                // Subtract the ethValue allocated to the nested multi-hop fill.\n                remainingEth -= ethValue;\n                (uint256 outputTokenAmount_, uint256 leftoverEth) =\n                    _multiHopFill(multiHopFillData, ethValue);\n                // Increment the sold and bought amounts.\n                soldAmount = soldAmount.safeAdd(inputTokenAmount);\n                outputTokenAmount = outputTokenAmount.safeAdd(outputTokenAmount_);\n                // Add back any ETH that wasn't used by the nested multi-hop fill.\n                remainingEth += leftoverEth;\n            } else {\n                revert(\"MultiplexFeature::_batchFill/UNRECOGNIZED_SELECTOR\");\n            }\n        }\n    }\n\n    // Internal variant of `multiHopFill`. This function can be nested within\n    // a `_batchFill`.\n    // This function executes a sequence of fills \"hopping\" through the\n    // path of tokens given by `fillData.tokens`. The nested operations that\n    // can be used as \"hops\" are:\n    // - WETH.deposit (wraps ETH)\n    // - WETH.withdraw (unwraps WETH)\n    // - _sellToUniswap (executes a Uniswap/Sushiswap swap)\n    // - _sellToLiquidityProvider (executes a PLP swap)\n    // - _transformERC20 (executes arbitrary ERC20 Transformations)\n    // This function optimizes the number of ERC20 transfers performed\n    // by having each hop transfer its output tokens directly to the\n    // target address of the next hop. Note that the `outputTokenAmount` returned\n    // by this function could theoretically be inaccurate if `msg.sender` has\n    // set a token allowance on an external contract that gets called during\n    // the execution of this function.\n    function _multiHopFill(MultiHopFillData memory fillData, uint256 totalEth)\n        public\n        returns (uint256 outputTokenAmount, uint256 remainingEth)\n    {\n        // There should be one call/hop between every two tokens\n        // in the path.\n        // tokens[0]b\u0000\u0013b\u0000\u0013calls[0]b\u0000\u0013b\u0000\u0013>tokens[1]b\u0000\u0013b\u0000\u0013...b\u0000\u0013b\u0000\u0013calls[n-1]b\u0000\u0013b\u0000\u0013>tokens[n]\n        require(\n            fillData.tokens.length == fillData.calls.length + 1,\n            \"MultiplexFeature::_multiHopFill/MISMATCHED_ARRAY_LENGTHS\"\n        );\n        // Track the remaining ETH allocated to this call.\n        remainingEth = totalEth;\n        // This variable is used as the input and output amounts of\n        // each hop. After the final hop, this will contain the output\n        // amount of the multi-hop fill.\n        outputTokenAmount = fillData.sellAmount;\n        // This variable is used to cache the address to target in the\n        // next hop. See `_computeHopRecipient` for details.\n        address nextTarget;\n        for (uint256 i = 0; i != fillData.calls.length; i++) {\n            WrappedMultiHopCall memory wrappedCall = fillData.calls[i];\n            if (wrappedCall.selector == this._sellToUniswap.selector) {\n                // If the next hop supports a \"transfer then execute\" pattern,\n                // the recipient will not be `msg.sender`. See `_computeHopRecipient`\n                // for details.\n                address recipient = _computeHopRecipient(fillData.calls, i);\n                (address[] memory tokens, bool isSushi) = abi.decode(\n                    wrappedCall.data,\n                    (address[], bool)\n                );\n                // Perform the Uniswap/Sushiswap trade.\n                outputTokenAmount = _sellToUniswap(\n                    tokens,\n                    outputTokenAmount,\n                    isSushi,\n                    nextTarget,\n                    recipient\n                );\n                // If the recipient was not `msg.sender`, it must be the target\n                // contract for the next hop.\n                nextTarget = recipient == msg.sender ? address(0) : recipient;\n            } else if (wrappedCall.selector == this._sellToLiquidityProvider.selector) {\n                // If the next hop supports a \"transfer then execute\" pattern,\n                // the recipient will not be `msg.sender`. See `_computeHopRecipient`\n                // for details.\n                address recipient = _computeHopRecipient(fillData.calls, i);\n                // If `nextTarget` was not set in the previous hop, then we\n                // need to send in the input ETH/tokens to the liquidity provider\n                // contract before executing the trade.\n                if (nextTarget == address(0)) {\n                    (address provider, bytes memory auxiliaryData) = abi.decode(\n                        wrappedCall.data,\n                        (address, bytes)\n                    );\n                    // Transfer input ETH or ERC20 tokens to the liquidity\n                    // provider contract.\n                    if (IERC20TokenV06(fillData.tokens[i]).isTokenETH()) {\n                        outputTokenAmount = LibSafeMathV06.min256(\n                            outputTokenAmount,\n                            remainingEth\n                        );\n                        _transferEth(payable(provider), outputTokenAmount);\n                        remainingEth -= outputTokenAmount;\n                    } else {\n                        _transferERC20Tokens(\n                            IERC20TokenV06(fillData.tokens[i]),\n                            msg.sender,\n                            provider,\n                            outputTokenAmount\n                        );\n                    }\n                    outputTokenAmount = _sellToLiquidityProvider(\n                        IERC20TokenV06(fillData.tokens[i]),\n                        IERC20TokenV06(fillData.tokens[i + 1]),\n                        outputTokenAmount,\n                        ILiquidityProvider(provider),\n                        recipient,\n                        auxiliaryData\n                    );\n                } else {\n                    (, bytes memory auxiliaryData) = abi.decode(\n                        wrappedCall.data,\n                        (address, bytes)\n                    );\n                    // Tokens and ETH have already been transferred to\n                    // the liquidity provider contract in the previous hop.\n                    outputTokenAmount = _sellToLiquidityProvider(\n                        IERC20TokenV06(fillData.tokens[i]),\n                        IERC20TokenV06(fillData.tokens[i + 1]),\n                        outputTokenAmount,\n                        ILiquidityProvider(nextTarget),\n                        recipient,\n                        auxiliaryData\n                    );\n                }\n                // If the recipient was not `msg.sender`, it must be the target\n                // contract for the next hop.\n                nextTarget = recipient == msg.sender ? address(0) : recipient;\n            } else if (wrappedCall.selector == ITransformERC20Feature._transformERC20.selector) {\n                ITransformERC20Feature.TransformERC20Args memory args;\n                args.inputToken = IERC20TokenV06(fillData.tokens[i]);\n                args.outputToken = IERC20TokenV06(fillData.tokens[i + 1]);\n                args.minOutputTokenAmount = 0;\n                args.taker = payable(_computeHopRecipient(fillData.calls, i));\n                if (nextTarget != address(0)) {\n                    // If `nextTarget` was set in the previous hop, then the input\n                    // token was already sent to the FlashWallet. Setting\n                    // `inputTokenAmount` to 0 indicates that no tokens need to\n                    // be pulled into the FlashWallet before executing the\n                    // transformations.\n                    args.inputTokenAmount = 0;\n                } else if (\n                    args.taker != msg.sender &&\n                    !args.inputToken.isTokenETH()\n                ) {\n                    address flashWallet = address(\n                        ITransformERC20Feature(address(this)).getTransformWallet()\n                    );\n                    // The input token has _not_ already been sent to the\n                    // FlashWallet. We also want PayTakerTransformer to\n                    // send the output token to some address other than\n                    // msg.sender, so we must transfer the input token\n                    // to the FlashWallet here.\n                    _transferERC20Tokens(\n                        args.inputToken,\n                        msg.sender,\n                        flashWallet,\n                        outputTokenAmount\n                    );\n                    args.inputTokenAmount = 0;\n                } else {\n                    // Otherwise, either:\n                    // (1) args.taker == msg.sender, in which case\n                    //     `_transformERC20` will pull the input token\n                    //     into the FlashWallet, or\n                    // (2) args.inputToken == ETH_TOKEN_ADDRESS, in which\n                    //     case ETH is attached to the call and no token\n                    //     transfer occurs.\n                    args.inputTokenAmount = outputTokenAmount;\n                }\n                uint256 ethValue;\n                (args.transformations, ethValue) = abi.decode(\n                    wrappedCall.data,\n                    (ITransformERC20Feature.Transformation[], uint256)\n                );\n                // Do not spend more than the remaining ETH.\n                ethValue = LibSafeMathV06.min256(ethValue, remainingEth);\n                if (ethValue > 0) {\n                    require(\n                        args.inputToken.isTokenETH(),\n                        \"MultiplexFeature::_multiHopFill/ETH_TRANSFORM_ONLY\"\n                    );\n                }\n                // Call `_transformERC20`.\n                outputTokenAmount = ITransformERC20Feature(address(this))\n                    ._transformERC20{value: ethValue}(args);\n                // Decrement the remaining ETH.\n                remainingEth -= ethValue;\n                // If the recipient was not `msg.sender`, it must be the target\n                // contract for the next hop.\n                nextTarget = args.taker == msg.sender ? address(0) : args.taker;\n            } else if (wrappedCall.selector == IEtherTokenV06.deposit.selector) {\n                require(\n                    i == 0,\n                    \"MultiplexFeature::_multiHopFill/DEPOSIT_FIRST_HOP_ONLY\"\n                );\n                uint256 ethValue = LibSafeMathV06.min256(outputTokenAmount, remainingEth);\n                // Wrap ETH.\n                weth.deposit{value: ethValue}();\n                nextTarget = _computeHopRecipient(fillData.calls, i);\n                weth.transfer(nextTarget, ethValue);\n                remainingEth -= ethValue;\n            } else if (wrappedCall.selector == IEtherTokenV06.withdraw.selector) {\n                require(\n                    i == fillData.calls.length - 1,\n                    \"MultiplexFeature::_multiHopFill/WITHDRAW_LAST_HOP_ONLY\"\n                );\n                // Unwrap WETH and send to `msg.sender`.\n                weth.withdraw(outputTokenAmount);\n                _transferEth(msg.sender, outputTokenAmount);\n                nextTarget = address(0);\n            } else {\n                revert(\"MultiplexFeature::_multiHopFill/UNRECOGNIZED_SELECTOR\");\n            }\n        }\n    }\n\n    // Similar to the UniswapFeature, but with a couple of differences:\n    // - Does not perform the transfer in if `pairAddress` is given,\n    //   which indicates that the transfer in was already performed\n    //   in the previous hop of a multi-hop fill.\n    // - Does not include a minBuyAmount check (which is performed in\n    //   either `batchFill` or `multiHopFill`).\n    // - Takes a `recipient` address parameter, so the output of the\n    //   final `swap` call can be sent to an address other than `msg.sender`.\n    function _sellToUniswap(\n        address[] memory tokens,\n        uint256 sellAmount,\n        bool isSushi,\n        address pairAddress,\n        address recipient\n    )\n        public\n        returns (uint256 outputTokenAmount)\n    {\n        require(tokens.length > 1, \"MultiplexFeature::_sellToUniswap/InvalidTokensLength\");\n\n        if (pairAddress == address(0)) {\n            pairAddress = _computeUniswapPairAddress(tokens[0], tokens[1], isSushi);\n            _transferERC20Tokens(\n                IERC20TokenV06(tokens[0]),\n                msg.sender,\n                pairAddress,\n                sellAmount\n            );\n        }\n\n        for (uint256 i = 0; i < tokens.length - 1; i++) {\n            (address inputToken, address outputToken) = (tokens[i], tokens[i + 1]);\n            outputTokenAmount = _computeUniswapOutputAmount(\n                pairAddress,\n                inputToken,\n                outputToken,\n                sellAmount\n            );\n            (uint256 amount0Out, uint256 amount1Out) = inputToken < outputToken\n                ? (uint256(0), outputTokenAmount)\n                : (outputTokenAmount, uint256(0));\n            address to = i < tokens.length - 2\n                ? _computeUniswapPairAddress(outputToken, tokens[i + 2], isSushi)\n                : recipient;\n            IUniswapV2Pair(pairAddress).swap(\n                amount0Out,\n                amount1Out,\n                to,\n                new bytes(0)\n            );\n            pairAddress = to;\n            sellAmount = outputTokenAmount;\n        }\n    }\n\n    // Same as the LiquidityProviderFeature, but without the transfer in\n    // (which is potentially done in the previous hop of a multi-hop fill)\n    // and without the minBuyAmount check (which is performed at the top, i.e.\n    // in either `batchFill` or `multiHopFill`).\n    function _sellToLiquidityProvider(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        ILiquidityProvider provider,\n        address recipient,\n        bytes memory auxiliaryData\n    )\n        public\n        returns (uint256 outputTokenAmount)\n    {\n        uint256 balanceBefore = IERC20TokenV06(outputToken).getTokenBalanceOf(recipient);\n        if (IERC20TokenV06(inputToken).isTokenETH()) {\n            sandbox.executeSellEthForToken(\n                provider,\n                outputToken,\n                recipient,\n                0,\n                auxiliaryData\n            );\n        } else if (IERC20TokenV06(outputToken).isTokenETH()) {\n            sandbox.executeSellTokenForEth(\n                provider,\n                inputToken,\n                recipient,\n                0,\n                auxiliaryData\n            );\n        } else {\n            sandbox.executeSellTokenForToken(\n                provider,\n                inputToken,\n                outputToken,\n                recipient,\n                0,\n                auxiliaryData\n            );\n        }\n        outputTokenAmount = IERC20TokenV06(outputToken).getTokenBalanceOf(recipient)\n            .safeSub(balanceBefore);\n        emit LiquidityProviderSwap(\n            address(inputToken),\n            address(outputToken),\n            inputTokenAmount,\n            outputTokenAmount,\n            address(provider),\n            recipient\n        );\n        return outputTokenAmount;\n    }\n\n    function _transferEth(address payable recipient, uint256 amount)\n        private\n    {\n        (bool success,) = recipient.call{value: amount}(\"\");\n        require(success, \"MultiplexFeature::_transferEth/TRANSFER_FALIED\");\n    }\n\n    // Some liquidity sources (e.g. Uniswap, Sushiswap, and PLP) can be passed\n    // a `recipient` parameter so the boguht tokens are transferred to the\n    // `recipient` address rather than `msg.sender`.\n    // Some liquidity sources (also Uniswap, Sushiswap, and PLP incidentally)\n    // support a \"transfer then execute\" pattern, where the token being sold\n    // can be transferred into the contract before calling a swap function to\n    // execute the trade.\n    // If the current hop in a multi-hop fill satisfies the first condition,\n    // and the next hop satisfies the second condition, the tokens bought\n    // in the current hop can be directly sent to the target contract of\n    // the next hop to save a transfer.\n    function _computeHopRecipient(\n        WrappedMultiHopCall[] memory calls,\n        uint256 i\n    )\n        private\n        view\n        returns (address recipient)\n    {\n        recipient = msg.sender;\n        if (i < calls.length - 1) {\n            WrappedMultiHopCall memory nextCall = calls[i + 1];\n            if (nextCall.selector == this._sellToUniswap.selector) {\n                (address[] memory tokens, bool isSushi) = abi.decode(\n                    nextCall.data,\n                    (address[], bool)\n                );\n                recipient = _computeUniswapPairAddress(tokens[0], tokens[1], isSushi);\n            } else if (nextCall.selector == this._sellToLiquidityProvider.selector) {\n                (recipient,) = abi.decode(\n                    nextCall.data,\n                    (address, bytes)\n                );\n            } else if (nextCall.selector == IEtherTokenV06.withdraw.selector) {\n                recipient = address(this);\n            } else if (nextCall.selector == ITransformERC20Feature._transformERC20.selector) {\n                recipient = address(\n                    ITransformERC20Feature(address(this)).getTransformWallet()\n                );\n            }\n        }\n        require(\n            recipient != address(0),\n            \"MultiplexFeature::_computeHopRecipient/RECIPIENT_IS_NULL\"\n        );\n    }\n\n    // Computes the the amount of output token that would be bought\n    // from Uniswap/Sushiswap given the input amount.\n    function _computeUniswapOutputAmount(\n        address pairAddress,\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount)\n    {\n        require(\n            inputAmount > 0,\n            \"MultiplexFeature::_computeUniswapOutputAmount/INSUFFICIENT_INPUT_AMOUNT\"\n        );\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pairAddress).getReserves();\n        require(\n            reserve0 > 0 && reserve1 > 0,\n            'MultiplexFeature::_computeUniswapOutputAmount/INSUFFICIENT_LIQUIDITY'\n        );\n        (uint256 inputReserve, uint256 outputReserve) = inputToken < outputToken\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 inputAmountWithFee = inputAmount.safeMul(997);\n        uint256 numerator = inputAmountWithFee.safeMul(outputReserve);\n        uint256 denominator = inputReserve.safeMul(1000).safeAdd(inputAmountWithFee);\n        return numerator / denominator;\n    }\n\n    // Computes the Uniswap/Sushiswap pair contract address for the\n    // given tokens.\n    function _computeUniswapPairAddress(\n        address tokenA,\n        address tokenB,\n        bool isSushi\n    )\n        private\n        pure\n        returns (address pairAddress)\n    {\n        (address token0, address token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        if (isSushi) {\n            return address(uint256(keccak256(abi.encodePacked(\n                hex'ff',\n                SUSHISWAP_FACTORY,\n                keccak256(abi.encodePacked(token0, token1)),\n                SUSHISWAP_PAIR_INIT_CODE_HASH\n            ))));\n        } else {\n            return address(uint256(keccak256(abi.encodePacked(\n                hex'ff',\n                UNISWAP_FACTORY,\n                keccak256(abi.encodePacked(token0, token1)),\n                UNISWAP_PAIR_INIT_CODE_HASH\n            ))));\n        }\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 33,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 40,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 41,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 38,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
        },
        "../external/ILiquidityProviderSandbox.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../vendor/ILiquidityProvider.sol\";\n\n\ninterface ILiquidityProviderSandbox {\n\n    /// @dev Calls `sellTokenForToken` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellTokenForToken(\n        ILiquidityProvider provider,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n\n    /// @dev Calls `sellEthForToken` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellEthForToken(\n        ILiquidityProvider provider,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n\n    /// @dev Calls `sellTokenForEth` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellTokenForEth(\n        ILiquidityProvider provider,\n        IERC20TokenV06 inputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n}\n"
        },
        "../vendor/ILiquidityProvider.sol": {
            "id": 25,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n"
        },
        "../fixins/FixinCommon.sol": {
            "id": 19,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/interfaces/IOwnableFeature.sol\";\nimport \"../features/interfaces/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n"
        },
        "../errors/LibCommonRichErrors.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n"
        },
        "../errors/LibOwnableRichErrors.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n"
        },
        "./interfaces/IOwnableFeature.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": {
            "id": 43,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n"
        },
        "./interfaces/ISimpleFunctionRegistryFeature.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n"
        },
        "../fixins/FixinEIP712.sol": {
            "id": 20,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\n/// @dev EIP712 helpers for features.\nabstract contract FixinEIP712 {\n\n    /// @dev The domain hash separator for the entire exchange proxy.\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\n\n    constructor(address zeroExAddress) internal {\n        // Compute `EIP712_DOMAIN_SEPARATOR`\n        {\n            uint256 chainId;\n            assembly { chainId := chainid() }\n            EIP712_DOMAIN_SEPARATOR = keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(\"\n                            \"string name,\"\n                            \"string version,\"\n                            \"uint256 chainId,\"\n                            \"address verifyingContract\"\n                        \")\"\n                    ),\n                    keccak256(\"ZeroEx\"),\n                    keccak256(\"1.0.0\"),\n                    chainId,\n                    zeroExAddress\n                )\n            );\n        }\n    }\n\n    function _getEIP712Hash(bytes32 structHash)\n        internal\n        view\n        returns (bytes32 eip712Hash)\n    {\n        return keccak256(abi.encodePacked(\n            hex\"1901\",\n            EIP712_DOMAIN_SEPARATOR,\n            structHash\n        ));\n    }\n}\n"
        },
        "../fixins/FixinTokenSpender.sol": {
            "id": 21,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../features/interfaces/ITokenSpenderFeature.sol\";\nimport \"../errors/LibSpenderRichErrors.sol\";\nimport \"../external/FeeCollector.sol\";\nimport \"../vendor/v3/IStaking.sol\";\nimport \"../vendor/v3/IStaking.sol\";\n\n\n/// @dev Helpers for moving tokens around.\nabstract contract FixinTokenSpender {\n    using LibRichErrorsV06 for bytes;\n\n    // Mask of the lower 20 bytes of a bytes32.\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n    /// @dev A bloom filter for tokens that consume all gas when `transferFrom()` fails.\n    bytes32 public immutable GREEDY_TOKENS_BLOOM_FILTER;\n\n    /// @param greedyTokensBloomFilter The bloom filter for all greedy tokens.\n    constructor(bytes32 greedyTokensBloomFilter)\n        internal\n    {\n        GREEDY_TOKENS_BLOOM_FILTER = greedyTokensBloomFilter;\n    }\n\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20Tokens(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bool success;\n        bytes memory revertData;\n\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        // If the token eats all gas when failing, we do not want to perform\n        // optimistic fall through to the old AllowanceTarget contract if the\n        // direct transferFrom() fails.\n        if (_isTokenPossiblyGreedy(token)) {\n            // If the token does not have a direct allowance on us then we use\n            // the allowance target.\n            if (token.allowance(owner, address(this)) < amount) {\n                _transferFromLegacyAllowanceTarget(\n                    token,\n                    owner,\n                    to,\n                    amount,\n                    \"\"\n                );\n                return;\n            }\n        }\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transferFrom(address,address,uint256)\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(owner, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x44), amount)\n\n            success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x64,\n                0,\n                0\n            )\n\n            let rdsize := returndatasize()\n\n            returndatacopy(add(ptr, 0x20), 0, rdsize) // reuse memory\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(add(ptr, 0x20)), 1) // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                // revertData is a bytes, so length-prefixed data\n                mstore(ptr, rdsize)\n                revertData := ptr\n\n                // update free memory pointer (ptr + 32-byte length + return data)\n                mstore(0x40, add(add(ptr, 0x20), rdsize))\n            }\n        }\n\n        if (!success) {\n            _transferFromLegacyAllowanceTarget(\n                token,\n                owner,\n                to,\n                amount,\n                revertData\n            );\n        }\n    }\n\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\n    ///      pulled from `owner` by this address.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @return amount The amount of tokens that can be pulled.\n    function _getSpendableERC20BalanceOf(\n        IERC20TokenV06 token,\n        address owner\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return LibSafeMathV06.min256(\n            token.allowance(owner, address(this)),\n            token.balanceOf(owner)\n        );\n    }\n\n    /// @dev Check if a token possibly belongs to the `GREEDY_TOKENS_BLOOM_FILTER`\n    ///      bloom filter.\n    function _isTokenPossiblyGreedy(IERC20TokenV06 token)\n        internal\n        view\n        returns (bool isPossiblyGreedy)\n    {\n        // The hash is given by:\n        // (1 << (keccak256(token) % 256)) | (1 << (token % 256))\n        bytes32 h;\n        assembly {\n            mstore(0, token)\n            h := or(shl(mod(keccak256(0, 32), 256), 1), shl(mod(token, 256), 1))\n        }\n        return (h & GREEDY_TOKENS_BLOOM_FILTER) == h;\n    }\n\n    /// @dev Transfer tokens using the legacy allowance target instead of\n    ///      allowances directly set on the exchange proxy.\n    function _transferFromLegacyAllowanceTarget(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount,\n        bytes memory initialRevertData\n    )\n        private\n    {\n        // Try the old AllowanceTarget.\n        try ITokenSpenderFeature(address(this))._spendERC20Tokens(\n                token,\n                owner,\n                to,\n                amount\n            ) {\n        } catch (bytes memory revertData) {\n            // Bubble up the first error message. (In general, the fallback to the\n            // allowance target is opportunistic. We ignore the specific error\n            // message if it fails.)\n            LibSpenderRichErrors.SpenderERC20TransferFromFailedError(\n                address(token),\n                owner,\n                to,\n                amount,\n                initialRevertData.length != 0 ? initialRevertData : revertData\n            ).rrevert();\n        }\n    }\n}\n"
        },
        "./interfaces/ITokenSpenderFeature.sol": {
            "id": 15,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev Feature that allows spending token allowances.\ninterface ITokenSpenderFeature {\n\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\n    ///      Only callable from within.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _spendERC20Tokens(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount\n    )\n        external;\n\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\n    ///      pulled from `owner`.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @return amount The amount of tokens that can be pulled.\n    function getSpendableERC20BalanceOf(IERC20TokenV06 token, address owner)\n        external\n        view\n        returns (uint256 amount);\n\n    /// @dev Get the address of the allowance target.\n    /// @return target The target of token allowances.\n    function getAllowanceTarget() external view returns (address target);\n}\n"
        },
        "../errors/LibSpenderRichErrors.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSpenderRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function SpenderERC20TransferFromFailedError(\n        address token,\n        address owner,\n        address to,\n        uint256 amount,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SpenderERC20TransferFromFailedError(address,address,address,uint256,bytes)\")),\n            token,\n            owner,\n            to,\n            amount,\n            errorData\n        );\n    }\n}\n"
        },
        "../external/FeeCollector.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol\";\nimport \"../vendor/v3/IStaking.sol\";\n\n/// @dev The collector contract for protocol fees\ncontract FeeCollector is AuthorizableV06 {\n    /// @dev Allow ether transfers to the collector.\n    receive() external payable { }\n\n    constructor() public {\n        _addAuthorizedAddress(msg.sender);\n    }\n\n    /// @dev   Approve the staking contract and join a pool. Only an authority\n    ///        can call this.\n    /// @param weth The WETH contract.\n    /// @param staking The staking contract.\n    /// @param poolId The pool ID this contract is collecting fees for.\n    function initialize(\n        IEtherTokenV06 weth,\n        IStaking staking,\n        bytes32 poolId\n    )\n        external\n        onlyAuthorized\n    {\n        weth.approve(address(staking), type(uint256).max);\n        staking.joinStakingPoolAsMaker(poolId);\n    }\n\n    /// @dev Convert all held ether to WETH. Only an authority can call this.\n    /// @param weth The WETH contract.\n    function convertToWeth(\n        IEtherTokenV06 weth\n    )\n        external\n        onlyAuthorized\n    {\n        if (address(this).balance > 0) {\n            weth.deposit{value: address(this).balance}();\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./interfaces/IAuthorizableV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibAuthorizableRichErrorsV06.sol\";\nimport \"./OwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract AuthorizableV06 is\n    OwnableV06,\n    IAuthorizableV06\n{\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        _assertSenderIsAuthorized();\n        _;\n    }\n\n    // @dev Whether an address is authorized to call privileged functions.\n    // @param 0 Address to query.\n    // @return 0 Whether the address is authorized.\n    mapping (address => bool) public override authorized;\n    // @dev Whether an address is authorized to call privileged functions.\n    // @param 0 Index of authorized address.\n    // @return 0 Authorized address.\n    address[] public override authorities;\n\n    /// @dev Initializes the `owner` address.\n    constructor()\n        public\n        OwnableV06()\n    {}\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        _addAuthorizedAddress(target);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        if (!authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\n        }\n        for (uint256 i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                _removeAuthorizedAddressAtIndex(target, i);\n                break;\n            }\n        }\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        override\n        onlyOwner\n    {\n        _removeAuthorizedAddressAtIndex(target, index);\n    }\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        override\n        view\n        returns (address[] memory)\n    {\n        return authorities;\n    }\n\n    /// @dev Reverts if msg.sender is not authorized.\n    function _assertSenderIsAuthorized()\n        internal\n        view\n    {\n        if (!authorized[msg.sender]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.SenderNotAuthorizedError(msg.sender));\n        }\n    }\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function _addAuthorizedAddress(address target)\n        internal\n    {\n        // Ensure that the target is not the zero address.\n        if (target == address(0)) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.ZeroCantBeAuthorizedError());\n        }\n\n        // Ensure that the target is not already authorized.\n        if (authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetAlreadyAuthorizedError(target));\n        }\n\n        authorized[target] = true;\n        authorities.push(target);\n        emit AuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function _removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        internal\n    {\n        if (!authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\n        }\n        if (index >= authorities.length) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.IndexOutOfBoundsError(\n                index,\n                authorities.length\n            ));\n        }\n        if (authorities[index] != target) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.AuthorizedAddressMismatchError(\n                authorities[index],\n                target\n            ));\n        }\n\n        delete authorized[target];\n        authorities[index] = authorities[authorities.length - 1];\n        authorities.pop();\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol": {
            "id": 42,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IOwnableV06.sol\";\n\n\ninterface IAuthorizableV06 is\n    IOwnableV06\n{\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n\n    /// @dev Gets all authorized addresses.\n    /// @return authorizedAddresses Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory authorizedAddresses);\n\n    /// @dev Whether an adderss is authorized to call privileged functions.\n    /// @param addr Address to query.\n    /// @return isAuthorized Whether the address is authorized.\n    function authorized(address addr) external view returns (bool isAuthorized);\n\n    /// @dev All addresseses authorized to call privileged functions.\n    /// @param idx Index of authorized address.\n    /// @return addr Authorized address.\n    function authorities(uint256 idx) external view returns (address addr);\n\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/IOwnableV06.sol": {
            "id": 43,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibAuthorizableRichErrorsV06.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibAuthorizableRichErrorsV06 {\n\n    // bytes4(keccak256(\"AuthorizedAddressMismatchError(address,address)\"))\n    bytes4 internal constant AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR =\n        0x140a84db;\n\n    // bytes4(keccak256(\"IndexOutOfBoundsError(uint256,uint256)\"))\n    bytes4 internal constant INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR =\n        0xe9f83771;\n\n    // bytes4(keccak256(\"SenderNotAuthorizedError(address)\"))\n    bytes4 internal constant SENDER_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xb65a25b9;\n\n    // bytes4(keccak256(\"TargetAlreadyAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR =\n        0xde16f1a0;\n\n    // bytes4(keccak256(\"TargetNotAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xeb5108a2;\n\n    // bytes4(keccak256(\"ZeroCantBeAuthorizedError()\"))\n    bytes internal constant ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES =\n        hex\"57654fe4\";\n\n    // solhint-disable func-name-mixedcase\n    function AuthorizedAddressMismatchError(\n        address authorized,\n        address target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR,\n            authorized,\n            target\n        );\n    }\n\n    function IndexOutOfBoundsError(\n        uint256 index,\n        uint256 length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR,\n            index,\n            length\n        );\n    }\n\n    function SenderNotAuthorizedError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SENDER_NOT_AUTHORIZED_ERROR_SELECTOR,\n            sender\n        );\n    }\n\n    function TargetAlreadyAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function TargetNotAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_NOT_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function ZeroCantBeAuthorizedError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/OwnableV06.sol": {
            "id": 35,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./interfaces/IOwnableV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibOwnableRichErrorsV06.sol\";\n\n\ncontract OwnableV06 is\n    IOwnableV06\n{\n    /// @dev The owner of this contract.\n    /// @return 0 The owner address.\n    address public override owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    /// @dev Change the owner of this contract.\n    /// @param newOwner New owner address.\n    function transferOwnership(address newOwner)\n        public\n        override\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.TransferOwnerToZeroError());\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.OnlyOwnerError(\n                msg.sender,\n                owner\n            ));\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol": {
            "id": 39,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrorsV06 {\n\n    // bytes4(keccak256(\"OnlyOwnerError(address,address)\"))\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\n        0x1de45ad1;\n\n    // bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\n        hex\"e69edc3e\";\n\n    // solhint-disable func-name-mixedcase\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_OWNER_ERROR_SELECTOR,\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\n    }\n}\n"
        },
        "../vendor/v3/IStaking.sol": {
            "id": 27,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\ninterface IStaking {\n    function joinStakingPoolAsMaker(bytes32) external;\n    function payProtocolFee(address, address, uint256) external payable;\n}\n"
        },
        "../migrations/LibMigrate.sol": {
            "id": 22,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n"
        },
        "../transformers/LibERC20Transformer.sol": {
            "id": 24,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\nlibrary LibERC20Transformer {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev ETH pseudo-token address.\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev ETH pseudo-token.\n    IERC20TokenV06 constant internal ETH_TOKEN = IERC20TokenV06(ETH_TOKEN_ADDRESS);\n    /// @dev Return value indicating success in `IERC20Transformer.transform()`.\n    ///      This is just `keccak256('TRANSFORMER_SUCCESS')`.\n    bytes4 constant internal TRANSFORMER_SUCCESS = 0x13c9929e;\n\n    /// @dev Transfer ERC20 tokens and ETH.\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\n    /// @param to The recipient.\n    /// @param amount The transfer amount.\n    function transformerTransfer(\n        IERC20TokenV06 token,\n        address payable to,\n        uint256 amount\n    )\n        internal\n    {\n        if (isTokenETH(token)) {\n            to.transfer(amount);\n        } else {\n            token.compatTransfer(to, amount);\n        }\n    }\n\n    /// @dev Check if a token is the ETH pseudo-token.\n    /// @param token The token to check.\n    /// @return isETH `true` if the token is the ETH pseudo-token.\n    function isTokenETH(IERC20TokenV06 token)\n        internal\n        pure\n        returns (bool isETH)\n    {\n        return address(token) == ETH_TOKEN_ADDRESS;\n    }\n\n    /// @dev Check the balance of an ERC20 token or ETH.\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\n    /// @param owner Holder of the tokens.\n    /// @return tokenBalance The balance of `owner`.\n    function getTokenBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 tokenBalance)\n    {\n        if (isTokenETH(token)) {\n            return owner.balance;\n        }\n        return token.balanceOf(owner);\n    }\n\n    /// @dev RLP-encode a 32-bit or less account nonce.\n    /// @param nonce A positive integer in the range 0 <= nonce < 2^32.\n    /// @return rlpNonce The RLP encoding.\n    function rlpEncodeNonce(uint32 nonce)\n        internal\n        pure\n        returns (bytes memory rlpNonce)\n    {\n        // See https://github.com/ethereum/wiki/wiki/RLP for RLP encoding rules.\n        if (nonce == 0) {\n            rlpNonce = new bytes(1);\n            rlpNonce[0] = 0x80;\n        } else if (nonce < 0x80) {\n            rlpNonce = new bytes(1);\n            rlpNonce[0] = byte(uint8(nonce));\n        } else if (nonce <= 0xFF) {\n            rlpNonce = new bytes(2);\n            rlpNonce[0] = 0x81;\n            rlpNonce[1] = byte(uint8(nonce));\n        } else if (nonce <= 0xFFFF) {\n            rlpNonce = new bytes(3);\n            rlpNonce[0] = 0x82;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[2] = byte(uint8(nonce));\n        } else if (nonce <= 0xFFFFFF) {\n            rlpNonce = new bytes(4);\n            rlpNonce[0] = 0x83;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF0000) >> 16));\n            rlpNonce[2] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[3] = byte(uint8(nonce));\n        } else {\n            rlpNonce = new bytes(5);\n            rlpNonce[0] = 0x84;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF000000) >> 24));\n            rlpNonce[2] = byte(uint8((nonce & 0xFF0000) >> 16));\n            rlpNonce[3] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[4] = byte(uint8(nonce));\n        }\n    }\n\n    /// @dev Compute the expected deployment address by `deployer` at\n    ///      the nonce given by `deploymentNonce`.\n    /// @param deployer The address of the deployer.\n    /// @param deploymentNonce The nonce that the deployer had when deploying\n    ///        a contract.\n    /// @return deploymentAddress The deployment address.\n    function getDeployedAddress(address deployer, uint32 deploymentNonce)\n        internal\n        pure\n        returns (address payable deploymentAddress)\n    {\n        // The address of if a deployed contract is the lower 20 bytes of the\n        // hash of the RLP-encoded deployer's account address + account nonce.\n        // See: https://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n        bytes memory rlpNonce = rlpEncodeNonce(deploymentNonce);\n        return address(uint160(uint256(keccak256(abi.encodePacked(\n            byte(uint8(0xC0 + 21 + rlpNonce.length)),\n            byte(uint8(0x80 + 20)),\n            deployer,\n            rlpNonce\n        )))));\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 32,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 37,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "../vendor/IUniswapV2Pair.sol": {
            "id": 26,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.12;\n\n\ninterface IUniswapV2Pair {\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n\n    function swap(\n        uint amount0Out,\n        uint amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n}\n"
        },
        "./interfaces/IFeature.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n"
        },
        "./interfaces/IMultiplexFeature.sol": {
            "id": 10,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IMultiplexFeature {\n\n    // Parameters for `batchFill`.\n    struct BatchFillData {\n        // The token being sold.\n        IERC20TokenV06 inputToken;\n        // The token being bought.\n        IERC20TokenV06 outputToken;\n        // The amount of `inputToken` to sell.\n        uint256 sellAmount;\n        // The nested calls to perform.\n        WrappedBatchCall[] calls;\n    }\n\n    // Represents a call nested within a `batchFill`.\n    struct WrappedBatchCall {\n        // The selector of the function to call.\n        bytes4 selector;\n        // Amount of `inputToken` to sell.\n        uint256 sellAmount;\n        // ABI-encoded parameters needed to perform the call.\n        bytes data;\n    }\n\n    // Parameters for `multiHopFill`.\n    struct MultiHopFillData {\n        // The sell path, i.e.\n        // tokens = [inputToken, hopToken1, ..., hopTokenN, outputToken]\n        address[] tokens;\n        // The amount of `tokens[0]` to sell.\n        uint256 sellAmount;\n        // The nested calls to perform.\n        WrappedMultiHopCall[] calls;\n    }\n\n    // Represents a call nested within a `multiHopFill`.\n    struct WrappedMultiHopCall {\n        // The selector of the function to call.\n        bytes4 selector;\n        // ABI-encoded parameters needed to perform the call.\n        bytes data;\n    }\n\n    event LiquidityProviderSwap(\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        address provider,\n        address recipient\n    );\n\n    event ExpiredRfqOrder(\n        bytes32 orderHash,\n        address maker,\n        uint64 expiry\n    );\n\n    /// @dev Executes a batch of fills selling `fillData.inputToken`\n    ///      for `fillData.outputToken` in sequence. Refer to the\n    ///      internal variant `_batchFill` for the allowed nested\n    ///      operations.\n    /// @param fillData Encodes the input/output tokens, the sell\n    ///        amount, and the nested operations for this batch fill.\n    /// @param minBuyAmount The minimum amount of `fillData.outputToken`\n    ///        to buy. Reverts if this amount is not met.\n    /// @return outputTokenAmount The amount of the output token bought.\n    function batchFill(\n        BatchFillData calldata fillData,\n        uint256 minBuyAmount\n    )\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Executes a sequence of fills \"hopping\" through the\n    ///      path of tokens given by `fillData.tokens`. Refer to the\n    ///      internal variant `_multiHopFill` for the allowed nested\n    ///      operations.\n    /// @param fillData Encodes the path of tokens, the sell amount,\n    ///        and the nested operations for this multi-hop fill.\n    /// @param minBuyAmount The minimum amount of the output token\n    ///        to buy. Reverts if this amount is not met.\n    /// @return outputTokenAmount The amount of the output token bought.\n    function multiHopFill(\n        MultiHopFillData calldata fillData,\n        uint256 minBuyAmount\n    )\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n}\n"
        },
        "./interfaces/INativeOrdersFeature.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\nimport \"./INativeOrdersEvents.sol\";\n\n\n/// @dev Feature for interacting with limit orders.\ninterface INativeOrdersFeature is\n    INativeOrdersEvents\n{\n\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\n    ///      the staking contract.\n    /// @param poolIds Staking pool IDs\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\n        external;\n\n    /// @dev Fill a limit order. The taker and sender will be the caller.\n    /// @param order The limit order. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      `msg.sender` (not `sender`).\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param sender The order sender.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        address sender\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order. Internal variant.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Cancel a single limit order. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The limit order.\n    function cancelLimitOrder(LibNativeOrder.LimitOrder calldata order)\n        external;\n\n    /// @dev Cancel a single RFQ order. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The RFQ order.\n    function cancelRfqOrder(LibNativeOrder.RfqOrder calldata order)\n        external;\n\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\n    ///      specifies the message sender as its txOrigin.\n    /// @param origins An array of origin addresses to update.\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedRfqOrigins(address[] memory origins, bool allowed)\n        external;\n\n    /// @dev Cancel multiple limit orders. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The limit orders.\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The RFQ orders.\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the order info for an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderInfo Info about the order.\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the canonical hash of a limit order.\n    /// @param order The limit order.\n    /// @return orderHash The order hash.\n    function getLimitOrderHash(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the canonical hash of an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderHash The order hash.\n    function getRfqOrderHash(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\n    ///      gas price to arrive at the required protocol fee to fill a native order.\n    /// @return multiplier The protocol fee multiplier.\n    function getProtocolFeeMultiplier()\n        external\n        view\n        returns (uint32 multiplier);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getRfqOrderRelevantState(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The limit orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetLimitOrderRelevantStates(\n        LibNativeOrder.LimitOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The RFQ orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetRfqOrderRelevantStates(\n        LibNativeOrder.RfqOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n}\n"
        },
        "./libs/LibSignature.sol": {
            "id": 18,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../../errors/LibSignatureRichErrors.sol\";\n\n\n/// @dev A library for validating signatures.\nlibrary LibSignature {\n    using LibRichErrorsV06 for bytes;\n\n    // '\\x19Ethereum Signed Message:\\n32\\x00\\x00\\x00\\x00' in a word.\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\n    ///      The valid range is given by fig (282) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\n    ///      The valid range is given by fig (283) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Retrieve the signer of a signature.\n    ///      Throws if the signature can't be validated.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    /// @return recovered The recovered signer address.\n    function getSignerOfHash(\n        bytes32 hash,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address recovered)\n    {\n        // Ensure this is a signature type that can be validated against a hash.\n        _validateHashCompatibleSignature(hash, signature);\n\n        if (signature.signatureType == SignatureType.EIP712) {\n            // Signed using EIP712\n            recovered = ecrecover(\n                hash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\n            // Signed using `eth_sign`\n            // Need to hash `hash` with \"\\x19Ethereum Signed Message:\\n32\" prefix\n            // in packed encoding.\n            bytes32 ethSignHash;\n            assembly {\n                // Use scratch space\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\n                mstore(28, hash) // length of 32 bytes\n                ethSignHash := keccak256(0, 60)\n            }\n            recovered = ecrecover(\n                ethSignHash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        }\n        // `recovered` can be null if the signature values are out of range.\n        if (recovered == address(0)) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n    }\n\n    /// @dev Validates that a signature is compatible with a hash signee.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    function _validateHashCompatibleSignature(\n        bytes32 hash,\n        Signature memory signature\n    )\n        private\n        pure\n    {\n        // Ensure the r and s are within malleability limits.\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\n        {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n\n        // Always illegal signature.\n        if (signature.signatureType == SignatureType.ILLEGAL) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\n                hash\n            ).rrevert();\n        }\n\n        // Always invalid.\n        if (signature.signatureType == SignatureType.INVALID) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\n                hash\n            ).rrevert();\n        }\n\n        // Solidity should check that the signature type is within enum range for us\n        // when abi-decoding.\n    }\n}\n"
        },
        "../errors/LibSignatureRichErrors.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSignatureRichErrors {\n\n    enum SignatureValidationErrorCodes {\n        ALWAYS_INVALID,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        WRONG_SIGNER,\n        BAD_SIGNATURE_DATA\n    }\n\n    // solhint-disable func-name-mixedcase\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32,address,bytes)\")),\n            code,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32)\")),\n            code,\n            hash\n        );\n    }\n}\n"
        },
        "./libs/LibNativeOrder.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\n\n\n/// @dev A library for common native order operations.\nlibrary LibNativeOrder {\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\n\n    // The type hash for limit orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"LimitOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"uint128 takerTokenFeeAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address sender,\",\n    //       \"address feeRecipient,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\n\n    // The type hash for RFQ orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"RfqOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\n\n    /// @dev Get the struct hash of a limit order.\n    /// @param order The limit order.\n    /// @return structHash The struct hash of the order.\n    function getLimitOrderStructHash(LimitOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.takerTokenFeeAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.sender,\n        //   order.feeRecipient,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.takerTokenFeeAmount;\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\n            // order.maker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.taker;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.sender;\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\n            // order.feeRecipient;\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\n            // order.pool;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            // order.expiry;\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\n            // order.salt;\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\n            structHash := keccak256(mem, 0x1A0)\n        }\n    }\n\n    /// @dev Get the struct hash of a RFQ order.\n    /// @param order The RFQ order.\n    /// @return structHash The struct hash of the order.\n    function getRfqOrderStructHash(RfqOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.pool;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            // order.expiry;\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\n            // order.salt;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            structHash := keccak256(mem, 0x160)\n        }\n    }\n\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\n        internal\n    {\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\n            (bool success,) = msg\n                .sender\n                .call{value: refundAmount}(\"\");\n            if (!success) {\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\n                    msg.sender,\n                    refundAmount\n                ).rrevert();\n            }\n        }\n    }\n}\n"
        },
        "../errors/LibNativeOrdersRichErrors.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibNativeOrdersRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function ProtocolFeeRefundFailed(\n        address receiver,\n        uint256 refundAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"ProtocolFeeRefundFailed(address,uint256)\")),\n            receiver,\n            refundAmount\n        );\n    }\n\n    function OrderNotFillableByOriginError(\n        bytes32 orderHash,\n        address txOrigin,\n        address orderTxOrigin\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByOriginError(bytes32,address,address)\")),\n            orderHash,\n            txOrigin,\n            orderTxOrigin\n        );\n    }\n\n    function OrderNotFillableError(\n        bytes32 orderHash,\n        uint8 orderStatus\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableError(bytes32,uint8)\")),\n            orderHash,\n            orderStatus\n        );\n    }\n\n    function OrderNotSignedByMakerError(\n        bytes32 orderHash,\n        address signer,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotSignedByMakerError(bytes32,address,address)\")),\n            orderHash,\n            signer,\n            maker\n        );\n    }\n\n    function OrderNotFillableBySenderError(\n        bytes32 orderHash,\n        address sender,\n        address orderSender\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableBySenderError(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            orderSender\n        );\n    }\n\n    function OrderNotFillableByTakerError(\n        bytes32 orderHash,\n        address taker,\n        address orderTaker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByTakerError(bytes32,address,address)\")),\n            orderHash,\n            taker,\n            orderTaker\n        );\n    }\n\n    function CancelSaltTooLowError(\n        uint256 minValidSalt,\n        uint256 oldMinValidSalt\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"CancelSaltTooLowError(uint256,uint256)\")),\n            minValidSalt,\n            oldMinValidSalt\n        );\n    }\n\n    function FillOrKillFailedError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"FillOrKillFailedError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n\n    function OnlyOrderMakerAllowed(\n        bytes32 orderHash,\n        address sender,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOrderMakerAllowed(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            maker\n        );\n    }\n\n    function BatchFillIncompleteError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"BatchFillIncompleteError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n}\n"
        },
        "./interfaces/INativeOrdersEvents.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\n/// @dev Events emitted by NativeOrdersFeature.\ninterface INativeOrdersEvents {\n\n    /// @dev Emitted whenever a `LimitOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param feeRecipient Fee recipient of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param protocolFeePaid How much protocol fee was paid.\n    /// @param pool The fee pool associated with this order.\n    event LimitOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address feeRecipient,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        uint128 takerTokenFeeFilledAmount,\n        uint256 protocolFeePaid,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever an `RfqOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param pool The fee pool associated with this order.\n    event RfqOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever a limit or RFQ order is cancelled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The order maker.\n    event OrderCancelled(\n        bytes32 orderHash,\n        address maker\n    );\n\n    /// @dev Emitted whenever Limit orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledLimitOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted whenever RFQ orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledRfqOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted when new addresses are allowed or disallowed to fill\n    ///      orders with a given txOrigin.\n    /// @param origin The address doing the allowing.\n    /// @param addrs The address being allowed/disallowed.\n    /// @param allowed Indicates whether the address should be allowed.\n    event RfqOrderOriginsAllowed(\n        address origin,\n        address[] addrs,\n        bool allowed\n    );\n}\n"
        },
        "./interfaces/ITransformERC20Feature.sol": {
            "id": 16,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../../transformers/IERC20Transformer.sol\";\nimport \"../../external/IFlashWallet.sol\";\n\n\n/// @dev Feature to composably transform between ERC20 tokens.\ninterface ITransformERC20Feature {\n\n    /// @dev Defines a transformation to run in `transformERC20()`.\n    struct Transformation {\n        // The deployment nonce for the transformer.\n        // The address of the transformer contract will be derived from this\n        // value.\n        uint32 deploymentNonce;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Arguments for `_transformERC20()`.\n    struct TransformERC20Args {\n        // The taker address.\n        address payable taker;\n        // The token being provided by the taker.\n        // If `0xeee...`, ETH is implied and should be provided with the call.`\n        IERC20TokenV06 inputToken;\n        // The token to be acquired by the taker.\n        // `0xeee...` implies ETH.\n        IERC20TokenV06 outputToken;\n        // The amount of `inputToken` to take from the taker.\n        // If set to `uint256(-1)`, the entire spendable balance of the taker\n        // will be solt.\n        uint256 inputTokenAmount;\n        // The minimum amount of `outputToken` the taker\n        // must receive for the entire transformation to succeed. If set to zero,\n        // the minimum output token transfer will not be asserted.\n        uint256 minOutputTokenAmount;\n        // The transformations to execute on the token balance(s)\n        // in sequence.\n        Transformation[] transformations;\n    }\n\n    /// @dev Raised upon a successful `transformERC20`.\n    /// @param taker The taker (caller) address.\n    /// @param inputToken The token being provided by the taker.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the taker.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the taker.\n    /// @param outputTokenAmount The amount of `outputToken` received by the taker.\n    event TransformedERC20(\n        address indexed taker,\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    /// @dev Raised when `setTransformerDeployer()` is called.\n    /// @param transformerDeployer The new deployer address.\n    event TransformerDeployerUpdated(address transformerDeployer);\n\n    /// @dev Raised when `setQuoteSigner()` is called.\n    /// @param quoteSigner The new quote signer.\n    event QuoteSignerUpdated(address quoteSigner);\n\n    /// @dev Replace the allowed deployer for transformers.\n    ///      Only callable by the owner.\n    /// @param transformerDeployer The address of the new trusted deployer\n    ///        for transformers.\n    function setTransformerDeployer(address transformerDeployer)\n        external;\n\n    /// @dev Replace the optional signer for `transformERC20()` calldata.\n    ///      Only callable by the owner.\n    /// @param quoteSigner The address of the new calldata signer.\n    function setQuoteSigner(address quoteSigner)\n        external;\n\n    /// @dev Deploy a new flash wallet instance and replace the current one with it.\n    ///      Useful if we somehow break the current wallet instance.\n    ///       Only callable by the owner.\n    /// @return wallet The new wallet instance.\n    function createTransformWallet()\n        external\n        returns (IFlashWallet wallet);\n\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\n    ///      to an ERC20 `outputToken`.\n    /// @param inputToken The token being provided by the sender.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the sender.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\n    ///        must receive for the entire transformation to succeed.\n    /// @param transformations The transformations to execute on the token balance(s)\n    ///        in sequence.\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\n    function transformERC20(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 minOutputTokenAmount,\n        Transformation[] calldata transformations\n    )\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\n    /// @param args A `TransformERC20Args` struct.\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\n    function _transformERC20(TransformERC20Args calldata args)\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Return the current wallet instance that will serve as the execution\n    ///      context for transformations.\n    /// @return wallet The wallet instance.\n    function getTransformWallet()\n        external\n        view\n        returns (IFlashWallet wallet);\n\n    /// @dev Return the allowed deployer for transformers.\n    /// @return deployer The transform deployer address.\n    function getTransformerDeployer()\n        external\n        view\n        returns (address deployer);\n\n    /// @dev Return the optional signer for `transformERC20()` calldata.\n    /// @return signer The transform deployer address.\n    function getQuoteSigner()\n        external\n        view\n        returns (address signer);\n}\n"
        },
        "../transformers/IERC20Transformer.sol": {
            "id": 23,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev A transformation callback used in `TransformERC20.transformERC20()`.\ninterface IERC20Transformer {\n\n    /// @dev Context information to pass into `transform()` by `TransformERC20.transformERC20()`.\n    struct TransformContext {\n        // The caller of `TransformERC20.transformERC20()`.\n        address payable sender;\n        // taker The taker address, which may be distinct from `sender` in the case\n        // meta-transactions.\n        address payable taker;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Called from `TransformERC20.transformERC20()`. This will be\n    ///      delegatecalled in the context of the FlashWallet instance being used.\n    /// @param context Context information.\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\n    function transform(TransformContext calldata context)\n        external\n        returns (bytes4 success);\n}\n"
        },
        "../external/IFlashWallet.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n/// @dev A contract that can execute arbitrary calls from its owner.\ninterface IFlashWallet {\n\n    /// @dev Execute an arbitrary call. Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @param value Ether to attach to the call.\n    /// @return resultData The data returned by the call.\n    function executeCall(\n        address payable target,\n        bytes calldata callData,\n        uint256 value\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\n    ///      Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @return resultData The data returned by the call.\n    function executeDelegateCall(\n        address payable target,\n        bytes calldata callData\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Allows the puppet to receive ETH.\n    receive() external payable;\n\n    /// @dev Fetch the immutable owner/deployer of this contract.\n    /// @return owner_ The immutable owner/deployer/\n    function owner() external view returns (address owner_);\n}\n"
        }
    },
    "sourceCodes": {
        "./MultiplexFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../external/ILiquidityProviderSandbox.sol\";\nimport \"../fixins/FixinCommon.sol\";\nimport \"../fixins/FixinEIP712.sol\";\nimport \"../fixins/FixinTokenSpender.sol\";\nimport \"../migrations/LibMigrate.sol\";\nimport \"../transformers/LibERC20Transformer.sol\";\nimport \"../vendor/ILiquidityProvider.sol\";\nimport \"../vendor/IUniswapV2Pair.sol\";\nimport \"./interfaces/IFeature.sol\";\nimport \"./interfaces/IMultiplexFeature.sol\";\nimport \"./interfaces/INativeOrdersFeature.sol\";\nimport \"./interfaces/ITransformERC20Feature.sol\";\nimport \"./libs/LibNativeOrder.sol\";\n\n\n/// @dev This feature enables efficient batch and multi-hop trades\n///      using different liquidity sources.\ncontract MultiplexFeature is\n    IFeature,\n    IMultiplexFeature,\n    FixinCommon,\n    FixinEIP712,\n    FixinTokenSpender\n{\n    using LibERC20Transformer for IERC20TokenV06;\n    using LibSafeMathV06 for uint128;\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"MultiplexFeature\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\n\n    /// @dev The WETH token contract.\n    IEtherTokenV06 private immutable weth;\n    /// @dev The sandbox contract address.\n    ILiquidityProviderSandbox public immutable sandbox;\n    // address of the UniswapV2Factory contract.\n    address private constant UNISWAP_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n    // address of the (Sushiswap) UniswapV2Factory contract.\n    address private constant SUSHISWAP_FACTORY = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\n    // Init code hash of the UniswapV2Pair contract.\n    uint256 private constant UNISWAP_PAIR_INIT_CODE_HASH = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\n    // Init code hash of the (Sushiswap) UniswapV2Pair contract.\n    uint256 private constant SUSHISWAP_PAIR_INIT_CODE_HASH = 0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303;\n\n    constructor(\n        address zeroExAddress,\n        IEtherTokenV06 weth_,\n        ILiquidityProviderSandbox sandbox_,\n        bytes32 greedyTokensBloomFilter\n    )\n        public\n        FixinEIP712(zeroExAddress)\n        FixinTokenSpender(greedyTokensBloomFilter)\n    {\n        weth = weth_;\n        sandbox = sandbox_;\n    }\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate()\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.batchFill.selector);\n        _registerFeatureFunction(this.multiHopFill.selector);\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n\n    /// @dev Executes a batch of fills selling `fillData.inputToken`\n    ///      for `fillData.outputToken` in sequence. Refer to the\n    ///      internal variant `_batchFill` for the allowed nested\n    ///      operations.\n    /// @param fillData Encodes the input/output tokens, the sell\n    ///        amount, and the nested operations for this batch fill.\n    /// @param minBuyAmount The minimum amount of `fillData.outputToken`\n    ///        to buy. Reverts if this amount is not met.\n    /// @return outputTokenAmount The amount of the output token bought.\n    function batchFill(\n        BatchFillData memory fillData,\n        uint256 minBuyAmount\n    )\n        public\n        payable\n        override\n        returns (uint256 outputTokenAmount)\n    {\n        // Cache the sender's balance of the output token.\n        outputTokenAmount = fillData.outputToken.getTokenBalanceOf(msg.sender);\n        // Cache the contract's ETH balance prior to this call.\n        uint256 ethBalanceBefore = address(this).balance.safeSub(msg.value);\n\n        // Perform the batch fill.\n        _batchFill(fillData);\n\n        // The `outputTokenAmount` returned by `_batchFill` may not\n        // be fully accurate (e.g. due to some janky token).\n        outputTokenAmount = fillData.outputToken.getTokenBalanceOf(msg.sender)\n            .safeSub(outputTokenAmount);\n        require(\n            outputTokenAmount >= minBuyAmount,\n            \"MultiplexFeature::batchFill/UNDERBOUGHT\"\n        );\n\n        uint256 ethBalanceAfter = address(this).balance;\n        require(\n            ethBalanceAfter >= ethBalanceBefore,\n            \"MultiplexFeature::batchFill/OVERSPENT_ETH\"\n        );\n        // Refund ETH\n        if (ethBalanceAfter > ethBalanceBefore) {\n            _transferEth(msg.sender, ethBalanceAfter - ethBalanceBefore);\n        }\n    }\n\n    /// @dev Executes a sequence of fills \"hopping\" through the\n    ///      path of tokens given by `fillData.tokens`. Refer to the\n    ///      internal variant `_multiHopFill` for the allowed nested\n    ///      operations.\n    /// @param fillData Encodes the path of tokens, the sell amount,\n    ///        and the nested operations for this multi-hop fill.\n    /// @param minBuyAmount The minimum amount of the output token\n    ///        to buy. Reverts if this amount is not met.\n    /// @return outputTokenAmount The amount of the output token bought.\n    function multiHopFill(\n        MultiHopFillData memory fillData,\n        uint256 minBuyAmount\n    )\n        public\n        payable\n        override\n        returns (uint256 outputTokenAmount)\n    {\n        IERC20TokenV06 outputToken = IERC20TokenV06(fillData.tokens[fillData.tokens.length - 1]);\n        // Cache the sender's balance of the output token.\n        outputTokenAmount = outputToken.getTokenBalanceOf(msg.sender);\n        // Cache the contract's ETH balance prior to this call.\n        uint256 ethBalanceBefore = address(this).balance.safeSub(msg.value);\n\n        // Perform the multi-hop fill. Pass in `msg.value` as the maximum\n        // allowable amount of ETH for the wrapped calls to consume.\n        _multiHopFill(fillData, msg.value);\n\n        // The `outputTokenAmount` returned by `_multiHopFill` may not\n        // be fully accurate (e.g. due to some janky token).\n        outputTokenAmount = outputToken.getTokenBalanceOf(msg.sender)\n            .safeSub(outputTokenAmount);\n        require(\n            outputTokenAmount >= minBuyAmount,\n            \"MultiplexFeature::multiHopFill/UNDERBOUGHT\"\n        );\n\n        uint256 ethBalanceAfter = address(this).balance;\n        require(\n            ethBalanceAfter >= ethBalanceBefore,\n            \"MultiplexFeature::multiHopFill/OVERSPENT_ETH\"\n        );\n        // Refund ETH\n        if (ethBalanceAfter > ethBalanceBefore) {\n            _transferEth(msg.sender, ethBalanceAfter - ethBalanceBefore);\n        }\n    }\n\n    // Similar to FQT. If `fillData.sellAmount` is set to `type(uint256).max`,\n    // this is effectively a batch fill. Otherwise it can be set to perform a\n    // market sell of some amount. Note that the `outputTokenAmount` returned\n    // by this function could theoretically be inaccurate if `msg.sender` has\n    // set a token allowance on an external contract that gets called during\n    // the execution of this function.\n    function _batchFill(BatchFillData memory fillData)\n        internal\n        returns (uint256 outputTokenAmount, uint256 remainingEth)\n    {\n        // Track the remaining ETH allocated to this call.\n        remainingEth = msg.value;\n        // Track the amount of input token sold.\n        uint256 soldAmount;\n        for (uint256 i = 0; i != fillData.calls.length; i++) {\n            // Check if we've hit our target.\n            if (soldAmount >= fillData.sellAmount) { break; }\n            WrappedBatchCall memory wrappedCall = fillData.calls[i];\n            // Compute the fill amount.\n            uint256 inputTokenAmount = LibSafeMathV06.min256(\n                wrappedCall.sellAmount,\n                fillData.sellAmount.safeSub(soldAmount)\n            );\n            if (wrappedCall.selector == INativeOrdersFeature._fillRfqOrder.selector) {\n                // Decode the RFQ order and signature.\n                (\n                    LibNativeOrder.RfqOrder memory order,\n                    LibSignature.Signature memory signature\n                ) = abi.decode(\n                    wrappedCall.data,\n                    (LibNativeOrder.RfqOrder, LibSignature.Signature)\n                );\n                if (order.expiry <= uint64(block.timestamp)) {\n                    bytes32 orderHash = _getEIP712Hash(\n                        LibNativeOrder.getRfqOrderStructHash(order)\n                    );\n                    emit ExpiredRfqOrder(\n                        orderHash,\n                        order.maker,\n                        order.expiry\n                    );\n                    continue;\n                }\n                require(\n                    order.takerToken == fillData.inputToken &&\n                    order.makerToken == fillData.outputToken,\n                    \"MultiplexFeature::_batchFill/RFQ_ORDER_INVALID_TOKENS\"\n                );\n                // Try filling the RFQ order. Swallows reverts.\n                try\n                    INativeOrdersFeature(address(this))._fillRfqOrder\n                        (\n                            order,\n                            signature,\n                            inputTokenAmount.safeDowncastToUint128(),\n                            msg.sender\n                        )\n                    returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n                {\n                    // Increment the sold and bought amounts.\n                    soldAmount = soldAmount.safeAdd(takerTokenFilledAmount);\n                    outputTokenAmount = outputTokenAmount.safeAdd(makerTokenFilledAmount);\n                } catch {}\n            } else if (wrappedCall.selector == this._sellToUniswap.selector) {\n                (address[] memory tokens, bool isSushi) = abi.decode(\n                    wrappedCall.data,\n                    (address[], bool)\n                );\n                require(\n                    tokens.length >= 2 &&\n                    tokens[0] == address(fillData.inputToken) &&\n                    tokens[tokens.length - 1] == address(fillData.outputToken),\n                    \"MultiplexFeature::_batchFill/UNISWAP_INVALID_TOKENS\"\n                );\n                // Perform the Uniswap/Sushiswap trade.\n                uint256 outputTokenAmount_  = _sellToUniswap(\n                    tokens,\n                    inputTokenAmount,\n                    isSushi,\n                    address(0),\n                    msg.sender\n                );\n                // Increment the sold and bought amounts.\n                soldAmount = soldAmount.safeAdd(inputTokenAmount);\n                outputTokenAmount = outputTokenAmount.safeAdd(outputTokenAmount_);\n            } else if (wrappedCall.selector == this._sellToLiquidityProvider.selector) {\n                (address provider, bytes memory auxiliaryData) = abi.decode(\n                    wrappedCall.data,\n                    (address, bytes)\n                );\n                if (fillData.inputToken.isTokenETH()) {\n                    inputTokenAmount = LibSafeMathV06.min256(\n                        inputTokenAmount,\n                        remainingEth\n                    );\n                    // Transfer the input ETH to the provider.\n                    _transferEth(payable(provider), inputTokenAmount);\n                    // Count that ETH as spent.\n                    remainingEth -= inputTokenAmount;\n                } else {\n                    // Transfer input ERC20 tokens to the provider.\n                    _transferERC20Tokens(\n                        fillData.inputToken,\n                        msg.sender,\n                        provider,\n                        inputTokenAmount\n                    );\n                }\n                // Perform the PLP trade.\n                uint256 outputTokenAmount_ = _sellToLiquidityProvider(\n                    fillData.inputToken,\n                    fillData.outputToken,\n                    inputTokenAmount,\n                    ILiquidityProvider(provider),\n                    msg.sender,\n                    auxiliaryData\n                );\n                // Increment the sold and bought amounts.\n                soldAmount = soldAmount.safeAdd(inputTokenAmount);\n                outputTokenAmount = outputTokenAmount.safeAdd(outputTokenAmount_);\n            } else if (wrappedCall.selector == ITransformERC20Feature._transformERC20.selector) {\n                ITransformERC20Feature.TransformERC20Args memory args;\n                args.taker = msg.sender;\n                args.inputToken = fillData.inputToken;\n                args.outputToken = fillData.outputToken;\n                args.inputTokenAmount = inputTokenAmount;\n                args.minOutputTokenAmount = 0;\n                uint256 ethValue;\n                (args.transformations, ethValue) = abi.decode(\n                    wrappedCall.data,\n                    (ITransformERC20Feature.Transformation[], uint256)\n                );\n                // Do not spend more than the remaining ETH.\n                ethValue = LibSafeMathV06.min256(\n                    ethValue,\n                    remainingEth\n                );\n                if (ethValue > 0) {\n                    require(\n                        args.inputToken.isTokenETH(),\n                        \"MultiplexFeature::_batchFill/ETH_TRANSFORM_ONLY\"\n                    );\n                }\n                try ITransformERC20Feature(address(this))._transformERC20\n                    {value: ethValue}\n                    (args)\n                    returns (uint256 outputTokenAmount_)\n                {\n                    remainingEth -= ethValue;\n                    soldAmount = soldAmount.safeAdd(inputTokenAmount);\n                    outputTokenAmount = outputTokenAmount.safeAdd(outputTokenAmount_);\n                } catch {}\n            } else if (wrappedCall.selector == this._multiHopFill.selector) {\n                MultiHopFillData memory multiHopFillData;\n                uint256 ethValue;\n                (\n                    multiHopFillData.tokens,\n                    multiHopFillData.calls,\n                    ethValue\n                ) = abi.decode(\n                    wrappedCall.data,\n                    (address[], WrappedMultiHopCall[], uint256)\n                );\n                multiHopFillData.sellAmount = inputTokenAmount;\n                // Do not spend more than the remaining ETH.\n                ethValue = LibSafeMathV06.min256(\n                    ethValue,\n                    remainingEth\n                );\n                // Subtract the ethValue allocated to the nested multi-hop fill.\n                remainingEth -= ethValue;\n                (uint256 outputTokenAmount_, uint256 leftoverEth) =\n                    _multiHopFill(multiHopFillData, ethValue);\n                // Increment the sold and bought amounts.\n                soldAmount = soldAmount.safeAdd(inputTokenAmount);\n                outputTokenAmount = outputTokenAmount.safeAdd(outputTokenAmount_);\n                // Add back any ETH that wasn't used by the nested multi-hop fill.\n                remainingEth += leftoverEth;\n            } else {\n                revert(\"MultiplexFeature::_batchFill/UNRECOGNIZED_SELECTOR\");\n            }\n        }\n    }\n\n    // Internal variant of `multiHopFill`. This function can be nested within\n    // a `_batchFill`.\n    // This function executes a sequence of fills \"hopping\" through the\n    // path of tokens given by `fillData.tokens`. The nested operations that\n    // can be used as \"hops\" are:\n    // - WETH.deposit (wraps ETH)\n    // - WETH.withdraw (unwraps WETH)\n    // - _sellToUniswap (executes a Uniswap/Sushiswap swap)\n    // - _sellToLiquidityProvider (executes a PLP swap)\n    // - _transformERC20 (executes arbitrary ERC20 Transformations)\n    // This function optimizes the number of ERC20 transfers performed\n    // by having each hop transfer its output tokens directly to the\n    // target address of the next hop. Note that the `outputTokenAmount` returned\n    // by this function could theoretically be inaccurate if `msg.sender` has\n    // set a token allowance on an external contract that gets called during\n    // the execution of this function.\n    function _multiHopFill(MultiHopFillData memory fillData, uint256 totalEth)\n        public\n        returns (uint256 outputTokenAmount, uint256 remainingEth)\n    {\n        // There should be one call/hop between every two tokens\n        // in the path.\n        // tokens[0]b\u0000\u0013b\u0000\u0013calls[0]b\u0000\u0013b\u0000\u0013>tokens[1]b\u0000\u0013b\u0000\u0013...b\u0000\u0013b\u0000\u0013calls[n-1]b\u0000\u0013b\u0000\u0013>tokens[n]\n        require(\n            fillData.tokens.length == fillData.calls.length + 1,\n            \"MultiplexFeature::_multiHopFill/MISMATCHED_ARRAY_LENGTHS\"\n        );\n        // Track the remaining ETH allocated to this call.\n        remainingEth = totalEth;\n        // This variable is used as the input and output amounts of\n        // each hop. After the final hop, this will contain the output\n        // amount of the multi-hop fill.\n        outputTokenAmount = fillData.sellAmount;\n        // This variable is used to cache the address to target in the\n        // next hop. See `_computeHopRecipient` for details.\n        address nextTarget;\n        for (uint256 i = 0; i != fillData.calls.length; i++) {\n            WrappedMultiHopCall memory wrappedCall = fillData.calls[i];\n            if (wrappedCall.selector == this._sellToUniswap.selector) {\n                // If the next hop supports a \"transfer then execute\" pattern,\n                // the recipient will not be `msg.sender`. See `_computeHopRecipient`\n                // for details.\n                address recipient = _computeHopRecipient(fillData.calls, i);\n                (address[] memory tokens, bool isSushi) = abi.decode(\n                    wrappedCall.data,\n                    (address[], bool)\n                );\n                // Perform the Uniswap/Sushiswap trade.\n                outputTokenAmount = _sellToUniswap(\n                    tokens,\n                    outputTokenAmount,\n                    isSushi,\n                    nextTarget,\n                    recipient\n                );\n                // If the recipient was not `msg.sender`, it must be the target\n                // contract for the next hop.\n                nextTarget = recipient == msg.sender ? address(0) : recipient;\n            } else if (wrappedCall.selector == this._sellToLiquidityProvider.selector) {\n                // If the next hop supports a \"transfer then execute\" pattern,\n                // the recipient will not be `msg.sender`. See `_computeHopRecipient`\n                // for details.\n                address recipient = _computeHopRecipient(fillData.calls, i);\n                // If `nextTarget` was not set in the previous hop, then we\n                // need to send in the input ETH/tokens to the liquidity provider\n                // contract before executing the trade.\n                if (nextTarget == address(0)) {\n                    (address provider, bytes memory auxiliaryData) = abi.decode(\n                        wrappedCall.data,\n                        (address, bytes)\n                    );\n                    // Transfer input ETH or ERC20 tokens to the liquidity\n                    // provider contract.\n                    if (IERC20TokenV06(fillData.tokens[i]).isTokenETH()) {\n                        outputTokenAmount = LibSafeMathV06.min256(\n                            outputTokenAmount,\n                            remainingEth\n                        );\n                        _transferEth(payable(provider), outputTokenAmount);\n                        remainingEth -= outputTokenAmount;\n                    } else {\n                        _transferERC20Tokens(\n                            IERC20TokenV06(fillData.tokens[i]),\n                            msg.sender,\n                            provider,\n                            outputTokenAmount\n                        );\n                    }\n                    outputTokenAmount = _sellToLiquidityProvider(\n                        IERC20TokenV06(fillData.tokens[i]),\n                        IERC20TokenV06(fillData.tokens[i + 1]),\n                        outputTokenAmount,\n                        ILiquidityProvider(provider),\n                        recipient,\n                        auxiliaryData\n                    );\n                } else {\n                    (, bytes memory auxiliaryData) = abi.decode(\n                        wrappedCall.data,\n                        (address, bytes)\n                    );\n                    // Tokens and ETH have already been transferred to\n                    // the liquidity provider contract in the previous hop.\n                    outputTokenAmount = _sellToLiquidityProvider(\n                        IERC20TokenV06(fillData.tokens[i]),\n                        IERC20TokenV06(fillData.tokens[i + 1]),\n                        outputTokenAmount,\n                        ILiquidityProvider(nextTarget),\n                        recipient,\n                        auxiliaryData\n                    );\n                }\n                // If the recipient was not `msg.sender`, it must be the target\n                // contract for the next hop.\n                nextTarget = recipient == msg.sender ? address(0) : recipient;\n            } else if (wrappedCall.selector == ITransformERC20Feature._transformERC20.selector) {\n                ITransformERC20Feature.TransformERC20Args memory args;\n                args.inputToken = IERC20TokenV06(fillData.tokens[i]);\n                args.outputToken = IERC20TokenV06(fillData.tokens[i + 1]);\n                args.minOutputTokenAmount = 0;\n                args.taker = payable(_computeHopRecipient(fillData.calls, i));\n                if (nextTarget != address(0)) {\n                    // If `nextTarget` was set in the previous hop, then the input\n                    // token was already sent to the FlashWallet. Setting\n                    // `inputTokenAmount` to 0 indicates that no tokens need to\n                    // be pulled into the FlashWallet before executing the\n                    // transformations.\n                    args.inputTokenAmount = 0;\n                } else if (\n                    args.taker != msg.sender &&\n                    !args.inputToken.isTokenETH()\n                ) {\n                    address flashWallet = address(\n                        ITransformERC20Feature(address(this)).getTransformWallet()\n                    );\n                    // The input token has _not_ already been sent to the\n                    // FlashWallet. We also want PayTakerTransformer to\n                    // send the output token to some address other than\n                    // msg.sender, so we must transfer the input token\n                    // to the FlashWallet here.\n                    _transferERC20Tokens(\n                        args.inputToken,\n                        msg.sender,\n                        flashWallet,\n                        outputTokenAmount\n                    );\n                    args.inputTokenAmount = 0;\n                } else {\n                    // Otherwise, either:\n                    // (1) args.taker == msg.sender, in which case\n                    //     `_transformERC20` will pull the input token\n                    //     into the FlashWallet, or\n                    // (2) args.inputToken == ETH_TOKEN_ADDRESS, in which\n                    //     case ETH is attached to the call and no token\n                    //     transfer occurs.\n                    args.inputTokenAmount = outputTokenAmount;\n                }\n                uint256 ethValue;\n                (args.transformations, ethValue) = abi.decode(\n                    wrappedCall.data,\n                    (ITransformERC20Feature.Transformation[], uint256)\n                );\n                // Do not spend more than the remaining ETH.\n                ethValue = LibSafeMathV06.min256(ethValue, remainingEth);\n                if (ethValue > 0) {\n                    require(\n                        args.inputToken.isTokenETH(),\n                        \"MultiplexFeature::_multiHopFill/ETH_TRANSFORM_ONLY\"\n                    );\n                }\n                // Call `_transformERC20`.\n                outputTokenAmount = ITransformERC20Feature(address(this))\n                    ._transformERC20{value: ethValue}(args);\n                // Decrement the remaining ETH.\n                remainingEth -= ethValue;\n                // If the recipient was not `msg.sender`, it must be the target\n                // contract for the next hop.\n                nextTarget = args.taker == msg.sender ? address(0) : args.taker;\n            } else if (wrappedCall.selector == IEtherTokenV06.deposit.selector) {\n                require(\n                    i == 0,\n                    \"MultiplexFeature::_multiHopFill/DEPOSIT_FIRST_HOP_ONLY\"\n                );\n                uint256 ethValue = LibSafeMathV06.min256(outputTokenAmount, remainingEth);\n                // Wrap ETH.\n                weth.deposit{value: ethValue}();\n                nextTarget = _computeHopRecipient(fillData.calls, i);\n                weth.transfer(nextTarget, ethValue);\n                remainingEth -= ethValue;\n            } else if (wrappedCall.selector == IEtherTokenV06.withdraw.selector) {\n                require(\n                    i == fillData.calls.length - 1,\n                    \"MultiplexFeature::_multiHopFill/WITHDRAW_LAST_HOP_ONLY\"\n                );\n                // Unwrap WETH and send to `msg.sender`.\n                weth.withdraw(outputTokenAmount);\n                _transferEth(msg.sender, outputTokenAmount);\n                nextTarget = address(0);\n            } else {\n                revert(\"MultiplexFeature::_multiHopFill/UNRECOGNIZED_SELECTOR\");\n            }\n        }\n    }\n\n    // Similar to the UniswapFeature, but with a couple of differences:\n    // - Does not perform the transfer in if `pairAddress` is given,\n    //   which indicates that the transfer in was already performed\n    //   in the previous hop of a multi-hop fill.\n    // - Does not include a minBuyAmount check (which is performed in\n    //   either `batchFill` or `multiHopFill`).\n    // - Takes a `recipient` address parameter, so the output of the\n    //   final `swap` call can be sent to an address other than `msg.sender`.\n    function _sellToUniswap(\n        address[] memory tokens,\n        uint256 sellAmount,\n        bool isSushi,\n        address pairAddress,\n        address recipient\n    )\n        public\n        returns (uint256 outputTokenAmount)\n    {\n        require(tokens.length > 1, \"MultiplexFeature::_sellToUniswap/InvalidTokensLength\");\n\n        if (pairAddress == address(0)) {\n            pairAddress = _computeUniswapPairAddress(tokens[0], tokens[1], isSushi);\n            _transferERC20Tokens(\n                IERC20TokenV06(tokens[0]),\n                msg.sender,\n                pairAddress,\n                sellAmount\n            );\n        }\n\n        for (uint256 i = 0; i < tokens.length - 1; i++) {\n            (address inputToken, address outputToken) = (tokens[i], tokens[i + 1]);\n            outputTokenAmount = _computeUniswapOutputAmount(\n                pairAddress,\n                inputToken,\n                outputToken,\n                sellAmount\n            );\n            (uint256 amount0Out, uint256 amount1Out) = inputToken < outputToken\n                ? (uint256(0), outputTokenAmount)\n                : (outputTokenAmount, uint256(0));\n            address to = i < tokens.length - 2\n                ? _computeUniswapPairAddress(outputToken, tokens[i + 2], isSushi)\n                : recipient;\n            IUniswapV2Pair(pairAddress).swap(\n                amount0Out,\n                amount1Out,\n                to,\n                new bytes(0)\n            );\n            pairAddress = to;\n            sellAmount = outputTokenAmount;\n        }\n    }\n\n    // Same as the LiquidityProviderFeature, but without the transfer in\n    // (which is potentially done in the previous hop of a multi-hop fill)\n    // and without the minBuyAmount check (which is performed at the top, i.e.\n    // in either `batchFill` or `multiHopFill`).\n    function _sellToLiquidityProvider(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        ILiquidityProvider provider,\n        address recipient,\n        bytes memory auxiliaryData\n    )\n        public\n        returns (uint256 outputTokenAmount)\n    {\n        uint256 balanceBefore = IERC20TokenV06(outputToken).getTokenBalanceOf(recipient);\n        if (IERC20TokenV06(inputToken).isTokenETH()) {\n            sandbox.executeSellEthForToken(\n                provider,\n                outputToken,\n                recipient,\n                0,\n                auxiliaryData\n            );\n        } else if (IERC20TokenV06(outputToken).isTokenETH()) {\n            sandbox.executeSellTokenForEth(\n                provider,\n                inputToken,\n                recipient,\n                0,\n                auxiliaryData\n            );\n        } else {\n            sandbox.executeSellTokenForToken(\n                provider,\n                inputToken,\n                outputToken,\n                recipient,\n                0,\n                auxiliaryData\n            );\n        }\n        outputTokenAmount = IERC20TokenV06(outputToken).getTokenBalanceOf(recipient)\n            .safeSub(balanceBefore);\n        emit LiquidityProviderSwap(\n            address(inputToken),\n            address(outputToken),\n            inputTokenAmount,\n            outputTokenAmount,\n            address(provider),\n            recipient\n        );\n        return outputTokenAmount;\n    }\n\n    function _transferEth(address payable recipient, uint256 amount)\n        private\n    {\n        (bool success,) = recipient.call{value: amount}(\"\");\n        require(success, \"MultiplexFeature::_transferEth/TRANSFER_FALIED\");\n    }\n\n    // Some liquidity sources (e.g. Uniswap, Sushiswap, and PLP) can be passed\n    // a `recipient` parameter so the boguht tokens are transferred to the\n    // `recipient` address rather than `msg.sender`.\n    // Some liquidity sources (also Uniswap, Sushiswap, and PLP incidentally)\n    // support a \"transfer then execute\" pattern, where the token being sold\n    // can be transferred into the contract before calling a swap function to\n    // execute the trade.\n    // If the current hop in a multi-hop fill satisfies the first condition,\n    // and the next hop satisfies the second condition, the tokens bought\n    // in the current hop can be directly sent to the target contract of\n    // the next hop to save a transfer.\n    function _computeHopRecipient(\n        WrappedMultiHopCall[] memory calls,\n        uint256 i\n    )\n        private\n        view\n        returns (address recipient)\n    {\n        recipient = msg.sender;\n        if (i < calls.length - 1) {\n            WrappedMultiHopCall memory nextCall = calls[i + 1];\n            if (nextCall.selector == this._sellToUniswap.selector) {\n                (address[] memory tokens, bool isSushi) = abi.decode(\n                    nextCall.data,\n                    (address[], bool)\n                );\n                recipient = _computeUniswapPairAddress(tokens[0], tokens[1], isSushi);\n            } else if (nextCall.selector == this._sellToLiquidityProvider.selector) {\n                (recipient,) = abi.decode(\n                    nextCall.data,\n                    (address, bytes)\n                );\n            } else if (nextCall.selector == IEtherTokenV06.withdraw.selector) {\n                recipient = address(this);\n            } else if (nextCall.selector == ITransformERC20Feature._transformERC20.selector) {\n                recipient = address(\n                    ITransformERC20Feature(address(this)).getTransformWallet()\n                );\n            }\n        }\n        require(\n            recipient != address(0),\n            \"MultiplexFeature::_computeHopRecipient/RECIPIENT_IS_NULL\"\n        );\n    }\n\n    // Computes the the amount of output token that would be bought\n    // from Uniswap/Sushiswap given the input amount.\n    function _computeUniswapOutputAmount(\n        address pairAddress,\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount)\n    {\n        require(\n            inputAmount > 0,\n            \"MultiplexFeature::_computeUniswapOutputAmount/INSUFFICIENT_INPUT_AMOUNT\"\n        );\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pairAddress).getReserves();\n        require(\n            reserve0 > 0 && reserve1 > 0,\n            'MultiplexFeature::_computeUniswapOutputAmount/INSUFFICIENT_LIQUIDITY'\n        );\n        (uint256 inputReserve, uint256 outputReserve) = inputToken < outputToken\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        uint256 inputAmountWithFee = inputAmount.safeMul(997);\n        uint256 numerator = inputAmountWithFee.safeMul(outputReserve);\n        uint256 denominator = inputReserve.safeMul(1000).safeAdd(inputAmountWithFee);\n        return numerator / denominator;\n    }\n\n    // Computes the Uniswap/Sushiswap pair contract address for the\n    // given tokens.\n    function _computeUniswapPairAddress(\n        address tokenA,\n        address tokenB,\n        bool isSushi\n    )\n        private\n        pure\n        returns (address pairAddress)\n    {\n        (address token0, address token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        if (isSushi) {\n            return address(uint256(keccak256(abi.encodePacked(\n                hex'ff',\n                SUSHISWAP_FACTORY,\n                keccak256(abi.encodePacked(token0, token1)),\n                SUSHISWAP_PAIR_INIT_CODE_HASH\n            ))));\n        } else {\n            return address(uint256(keccak256(abi.encodePacked(\n                hex'ff',\n                UNISWAP_FACTORY,\n                keccak256(abi.encodePacked(token0, token1)),\n                UNISWAP_PAIR_INIT_CODE_HASH\n            ))));\n        }\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "../external/ILiquidityProviderSandbox.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../vendor/ILiquidityProvider.sol\";\n\n\ninterface ILiquidityProviderSandbox {\n\n    /// @dev Calls `sellTokenForToken` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellTokenForToken(\n        ILiquidityProvider provider,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n\n    /// @dev Calls `sellEthForToken` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellEthForToken(\n        ILiquidityProvider provider,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n\n    /// @dev Calls `sellTokenForEth` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellTokenForEth(\n        ILiquidityProvider provider,\n        IERC20TokenV06 inputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n}\n",
        "../vendor/ILiquidityProvider.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n",
        "../fixins/FixinCommon.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/interfaces/IOwnableFeature.sol\";\nimport \"../features/interfaces/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n",
        "../errors/LibCommonRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n",
        "../errors/LibOwnableRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n",
        "./interfaces/IOwnableFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n",
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n",
        "./interfaces/ISimpleFunctionRegistryFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n",
        "../fixins/FixinEIP712.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\n/// @dev EIP712 helpers for features.\nabstract contract FixinEIP712 {\n\n    /// @dev The domain hash separator for the entire exchange proxy.\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\n\n    constructor(address zeroExAddress) internal {\n        // Compute `EIP712_DOMAIN_SEPARATOR`\n        {\n            uint256 chainId;\n            assembly { chainId := chainid() }\n            EIP712_DOMAIN_SEPARATOR = keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(\"\n                            \"string name,\"\n                            \"string version,\"\n                            \"uint256 chainId,\"\n                            \"address verifyingContract\"\n                        \")\"\n                    ),\n                    keccak256(\"ZeroEx\"),\n                    keccak256(\"1.0.0\"),\n                    chainId,\n                    zeroExAddress\n                )\n            );\n        }\n    }\n\n    function _getEIP712Hash(bytes32 structHash)\n        internal\n        view\n        returns (bytes32 eip712Hash)\n    {\n        return keccak256(abi.encodePacked(\n            hex\"1901\",\n            EIP712_DOMAIN_SEPARATOR,\n            structHash\n        ));\n    }\n}\n",
        "../fixins/FixinTokenSpender.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../features/interfaces/ITokenSpenderFeature.sol\";\nimport \"../errors/LibSpenderRichErrors.sol\";\nimport \"../external/FeeCollector.sol\";\nimport \"../vendor/v3/IStaking.sol\";\nimport \"../vendor/v3/IStaking.sol\";\n\n\n/// @dev Helpers for moving tokens around.\nabstract contract FixinTokenSpender {\n    using LibRichErrorsV06 for bytes;\n\n    // Mask of the lower 20 bytes of a bytes32.\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n    /// @dev A bloom filter for tokens that consume all gas when `transferFrom()` fails.\n    bytes32 public immutable GREEDY_TOKENS_BLOOM_FILTER;\n\n    /// @param greedyTokensBloomFilter The bloom filter for all greedy tokens.\n    constructor(bytes32 greedyTokensBloomFilter)\n        internal\n    {\n        GREEDY_TOKENS_BLOOM_FILTER = greedyTokensBloomFilter;\n    }\n\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20Tokens(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bool success;\n        bytes memory revertData;\n\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        // If the token eats all gas when failing, we do not want to perform\n        // optimistic fall through to the old AllowanceTarget contract if the\n        // direct transferFrom() fails.\n        if (_isTokenPossiblyGreedy(token)) {\n            // If the token does not have a direct allowance on us then we use\n            // the allowance target.\n            if (token.allowance(owner, address(this)) < amount) {\n                _transferFromLegacyAllowanceTarget(\n                    token,\n                    owner,\n                    to,\n                    amount,\n                    \"\"\n                );\n                return;\n            }\n        }\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transferFrom(address,address,uint256)\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(owner, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x44), amount)\n\n            success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x64,\n                0,\n                0\n            )\n\n            let rdsize := returndatasize()\n\n            returndatacopy(add(ptr, 0x20), 0, rdsize) // reuse memory\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(add(ptr, 0x20)), 1) // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                // revertData is a bytes, so length-prefixed data\n                mstore(ptr, rdsize)\n                revertData := ptr\n\n                // update free memory pointer (ptr + 32-byte length + return data)\n                mstore(0x40, add(add(ptr, 0x20), rdsize))\n            }\n        }\n\n        if (!success) {\n            _transferFromLegacyAllowanceTarget(\n                token,\n                owner,\n                to,\n                amount,\n                revertData\n            );\n        }\n    }\n\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\n    ///      pulled from `owner` by this address.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @return amount The amount of tokens that can be pulled.\n    function _getSpendableERC20BalanceOf(\n        IERC20TokenV06 token,\n        address owner\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return LibSafeMathV06.min256(\n            token.allowance(owner, address(this)),\n            token.balanceOf(owner)\n        );\n    }\n\n    /// @dev Check if a token possibly belongs to the `GREEDY_TOKENS_BLOOM_FILTER`\n    ///      bloom filter.\n    function _isTokenPossiblyGreedy(IERC20TokenV06 token)\n        internal\n        view\n        returns (bool isPossiblyGreedy)\n    {\n        // The hash is given by:\n        // (1 << (keccak256(token) % 256)) | (1 << (token % 256))\n        bytes32 h;\n        assembly {\n            mstore(0, token)\n            h := or(shl(mod(keccak256(0, 32), 256), 1), shl(mod(token, 256), 1))\n        }\n        return (h & GREEDY_TOKENS_BLOOM_FILTER) == h;\n    }\n\n    /// @dev Transfer tokens using the legacy allowance target instead of\n    ///      allowances directly set on the exchange proxy.\n    function _transferFromLegacyAllowanceTarget(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount,\n        bytes memory initialRevertData\n    )\n        private\n    {\n        // Try the old AllowanceTarget.\n        try ITokenSpenderFeature(address(this))._spendERC20Tokens(\n                token,\n                owner,\n                to,\n                amount\n            ) {\n        } catch (bytes memory revertData) {\n            // Bubble up the first error message. (In general, the fallback to the\n            // allowance target is opportunistic. We ignore the specific error\n            // message if it fails.)\n            LibSpenderRichErrors.SpenderERC20TransferFromFailedError(\n                address(token),\n                owner,\n                to,\n                amount,\n                initialRevertData.length != 0 ? initialRevertData : revertData\n            ).rrevert();\n        }\n    }\n}\n",
        "./interfaces/ITokenSpenderFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev Feature that allows spending token allowances.\ninterface ITokenSpenderFeature {\n\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\n    ///      Only callable from within.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _spendERC20Tokens(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount\n    )\n        external;\n\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\n    ///      pulled from `owner`.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @return amount The amount of tokens that can be pulled.\n    function getSpendableERC20BalanceOf(IERC20TokenV06 token, address owner)\n        external\n        view\n        returns (uint256 amount);\n\n    /// @dev Get the address of the allowance target.\n    /// @return target The target of token allowances.\n    function getAllowanceTarget() external view returns (address target);\n}\n",
        "../errors/LibSpenderRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSpenderRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function SpenderERC20TransferFromFailedError(\n        address token,\n        address owner,\n        address to,\n        uint256 amount,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SpenderERC20TransferFromFailedError(address,address,address,uint256,bytes)\")),\n            token,\n            owner,\n            to,\n            amount,\n            errorData\n        );\n    }\n}\n",
        "../external/FeeCollector.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol\";\nimport \"../vendor/v3/IStaking.sol\";\n\n/// @dev The collector contract for protocol fees\ncontract FeeCollector is AuthorizableV06 {\n    /// @dev Allow ether transfers to the collector.\n    receive() external payable { }\n\n    constructor() public {\n        _addAuthorizedAddress(msg.sender);\n    }\n\n    /// @dev   Approve the staking contract and join a pool. Only an authority\n    ///        can call this.\n    /// @param weth The WETH contract.\n    /// @param staking The staking contract.\n    /// @param poolId The pool ID this contract is collecting fees for.\n    function initialize(\n        IEtherTokenV06 weth,\n        IStaking staking,\n        bytes32 poolId\n    )\n        external\n        onlyAuthorized\n    {\n        weth.approve(address(staking), type(uint256).max);\n        staking.joinStakingPoolAsMaker(poolId);\n    }\n\n    /// @dev Convert all held ether to WETH. Only an authority can call this.\n    /// @param weth The WETH contract.\n    function convertToWeth(\n        IEtherTokenV06 weth\n    )\n        external\n        onlyAuthorized\n    {\n        if (address(this).balance > 0) {\n            weth.deposit{value: address(this).balance}();\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./interfaces/IAuthorizableV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibAuthorizableRichErrorsV06.sol\";\nimport \"./OwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract AuthorizableV06 is\n    OwnableV06,\n    IAuthorizableV06\n{\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        _assertSenderIsAuthorized();\n        _;\n    }\n\n    // @dev Whether an address is authorized to call privileged functions.\n    // @param 0 Address to query.\n    // @return 0 Whether the address is authorized.\n    mapping (address => bool) public override authorized;\n    // @dev Whether an address is authorized to call privileged functions.\n    // @param 0 Index of authorized address.\n    // @return 0 Authorized address.\n    address[] public override authorities;\n\n    /// @dev Initializes the `owner` address.\n    constructor()\n        public\n        OwnableV06()\n    {}\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        _addAuthorizedAddress(target);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        if (!authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\n        }\n        for (uint256 i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                _removeAuthorizedAddressAtIndex(target, i);\n                break;\n            }\n        }\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        override\n        onlyOwner\n    {\n        _removeAuthorizedAddressAtIndex(target, index);\n    }\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        override\n        view\n        returns (address[] memory)\n    {\n        return authorities;\n    }\n\n    /// @dev Reverts if msg.sender is not authorized.\n    function _assertSenderIsAuthorized()\n        internal\n        view\n    {\n        if (!authorized[msg.sender]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.SenderNotAuthorizedError(msg.sender));\n        }\n    }\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function _addAuthorizedAddress(address target)\n        internal\n    {\n        // Ensure that the target is not the zero address.\n        if (target == address(0)) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.ZeroCantBeAuthorizedError());\n        }\n\n        // Ensure that the target is not already authorized.\n        if (authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetAlreadyAuthorizedError(target));\n        }\n\n        authorized[target] = true;\n        authorities.push(target);\n        emit AuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function _removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        internal\n    {\n        if (!authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\n        }\n        if (index >= authorities.length) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.IndexOutOfBoundsError(\n                index,\n                authorities.length\n            ));\n        }\n        if (authorities[index] != target) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.AuthorizedAddressMismatchError(\n                authorities[index],\n                target\n            ));\n        }\n\n        delete authorized[target];\n        authorities[index] = authorities[authorities.length - 1];\n        authorities.pop();\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IOwnableV06.sol\";\n\n\ninterface IAuthorizableV06 is\n    IOwnableV06\n{\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n\n    /// @dev Gets all authorized addresses.\n    /// @return authorizedAddresses Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory authorizedAddresses);\n\n    /// @dev Whether an adderss is authorized to call privileged functions.\n    /// @param addr Address to query.\n    /// @return isAuthorized Whether the address is authorized.\n    function authorized(address addr) external view returns (bool isAuthorized);\n\n    /// @dev All addresseses authorized to call privileged functions.\n    /// @param idx Index of authorized address.\n    /// @return addr Authorized address.\n    function authorities(uint256 idx) external view returns (address addr);\n\n}\n",
        "@0x/contracts-utils/contracts/src/v06/IOwnableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibAuthorizableRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibAuthorizableRichErrorsV06 {\n\n    // bytes4(keccak256(\"AuthorizedAddressMismatchError(address,address)\"))\n    bytes4 internal constant AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR =\n        0x140a84db;\n\n    // bytes4(keccak256(\"IndexOutOfBoundsError(uint256,uint256)\"))\n    bytes4 internal constant INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR =\n        0xe9f83771;\n\n    // bytes4(keccak256(\"SenderNotAuthorizedError(address)\"))\n    bytes4 internal constant SENDER_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xb65a25b9;\n\n    // bytes4(keccak256(\"TargetAlreadyAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR =\n        0xde16f1a0;\n\n    // bytes4(keccak256(\"TargetNotAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xeb5108a2;\n\n    // bytes4(keccak256(\"ZeroCantBeAuthorizedError()\"))\n    bytes internal constant ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES =\n        hex\"57654fe4\";\n\n    // solhint-disable func-name-mixedcase\n    function AuthorizedAddressMismatchError(\n        address authorized,\n        address target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR,\n            authorized,\n            target\n        );\n    }\n\n    function IndexOutOfBoundsError(\n        uint256 index,\n        uint256 length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR,\n            index,\n            length\n        );\n    }\n\n    function SenderNotAuthorizedError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SENDER_NOT_AUTHORIZED_ERROR_SELECTOR,\n            sender\n        );\n    }\n\n    function TargetAlreadyAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function TargetNotAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_NOT_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function ZeroCantBeAuthorizedError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/OwnableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./interfaces/IOwnableV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibOwnableRichErrorsV06.sol\";\n\n\ncontract OwnableV06 is\n    IOwnableV06\n{\n    /// @dev The owner of this contract.\n    /// @return 0 The owner address.\n    address public override owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    /// @dev Change the owner of this contract.\n    /// @param newOwner New owner address.\n    function transferOwnership(address newOwner)\n        public\n        override\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.TransferOwnerToZeroError());\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.OnlyOwnerError(\n                msg.sender,\n                owner\n            ));\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrorsV06 {\n\n    // bytes4(keccak256(\"OnlyOwnerError(address,address)\"))\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\n        0x1de45ad1;\n\n    // bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\n        hex\"e69edc3e\";\n\n    // solhint-disable func-name-mixedcase\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_OWNER_ERROR_SELECTOR,\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\n    }\n}\n",
        "../vendor/v3/IStaking.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\ninterface IStaking {\n    function joinStakingPoolAsMaker(bytes32) external;\n    function payProtocolFee(address, address, uint256) external payable;\n}\n",
        "../migrations/LibMigrate.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n",
        "../transformers/LibERC20Transformer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\nlibrary LibERC20Transformer {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev ETH pseudo-token address.\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev ETH pseudo-token.\n    IERC20TokenV06 constant internal ETH_TOKEN = IERC20TokenV06(ETH_TOKEN_ADDRESS);\n    /// @dev Return value indicating success in `IERC20Transformer.transform()`.\n    ///      This is just `keccak256('TRANSFORMER_SUCCESS')`.\n    bytes4 constant internal TRANSFORMER_SUCCESS = 0x13c9929e;\n\n    /// @dev Transfer ERC20 tokens and ETH.\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\n    /// @param to The recipient.\n    /// @param amount The transfer amount.\n    function transformerTransfer(\n        IERC20TokenV06 token,\n        address payable to,\n        uint256 amount\n    )\n        internal\n    {\n        if (isTokenETH(token)) {\n            to.transfer(amount);\n        } else {\n            token.compatTransfer(to, amount);\n        }\n    }\n\n    /// @dev Check if a token is the ETH pseudo-token.\n    /// @param token The token to check.\n    /// @return isETH `true` if the token is the ETH pseudo-token.\n    function isTokenETH(IERC20TokenV06 token)\n        internal\n        pure\n        returns (bool isETH)\n    {\n        return address(token) == ETH_TOKEN_ADDRESS;\n    }\n\n    /// @dev Check the balance of an ERC20 token or ETH.\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\n    /// @param owner Holder of the tokens.\n    /// @return tokenBalance The balance of `owner`.\n    function getTokenBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 tokenBalance)\n    {\n        if (isTokenETH(token)) {\n            return owner.balance;\n        }\n        return token.balanceOf(owner);\n    }\n\n    /// @dev RLP-encode a 32-bit or less account nonce.\n    /// @param nonce A positive integer in the range 0 <= nonce < 2^32.\n    /// @return rlpNonce The RLP encoding.\n    function rlpEncodeNonce(uint32 nonce)\n        internal\n        pure\n        returns (bytes memory rlpNonce)\n    {\n        // See https://github.com/ethereum/wiki/wiki/RLP for RLP encoding rules.\n        if (nonce == 0) {\n            rlpNonce = new bytes(1);\n            rlpNonce[0] = 0x80;\n        } else if (nonce < 0x80) {\n            rlpNonce = new bytes(1);\n            rlpNonce[0] = byte(uint8(nonce));\n        } else if (nonce <= 0xFF) {\n            rlpNonce = new bytes(2);\n            rlpNonce[0] = 0x81;\n            rlpNonce[1] = byte(uint8(nonce));\n        } else if (nonce <= 0xFFFF) {\n            rlpNonce = new bytes(3);\n            rlpNonce[0] = 0x82;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[2] = byte(uint8(nonce));\n        } else if (nonce <= 0xFFFFFF) {\n            rlpNonce = new bytes(4);\n            rlpNonce[0] = 0x83;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF0000) >> 16));\n            rlpNonce[2] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[3] = byte(uint8(nonce));\n        } else {\n            rlpNonce = new bytes(5);\n            rlpNonce[0] = 0x84;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF000000) >> 24));\n            rlpNonce[2] = byte(uint8((nonce & 0xFF0000) >> 16));\n            rlpNonce[3] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[4] = byte(uint8(nonce));\n        }\n    }\n\n    /// @dev Compute the expected deployment address by `deployer` at\n    ///      the nonce given by `deploymentNonce`.\n    /// @param deployer The address of the deployer.\n    /// @param deploymentNonce The nonce that the deployer had when deploying\n    ///        a contract.\n    /// @return deploymentAddress The deployment address.\n    function getDeployedAddress(address deployer, uint32 deploymentNonce)\n        internal\n        pure\n        returns (address payable deploymentAddress)\n    {\n        // The address of if a deployed contract is the lower 20 bytes of the\n        // hash of the RLP-encoded deployer's account address + account nonce.\n        // See: https://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n        bytes memory rlpNonce = rlpEncodeNonce(deploymentNonce);\n        return address(uint160(uint256(keccak256(abi.encodePacked(\n            byte(uint8(0xC0 + 21 + rlpNonce.length)),\n            byte(uint8(0x80 + 20)),\n            deployer,\n            rlpNonce\n        )))));\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "../vendor/IUniswapV2Pair.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.12;\n\n\ninterface IUniswapV2Pair {\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n\n    function swap(\n        uint amount0Out,\n        uint amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n}\n",
        "./interfaces/IFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n",
        "./interfaces/IMultiplexFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IMultiplexFeature {\n\n    // Parameters for `batchFill`.\n    struct BatchFillData {\n        // The token being sold.\n        IERC20TokenV06 inputToken;\n        // The token being bought.\n        IERC20TokenV06 outputToken;\n        // The amount of `inputToken` to sell.\n        uint256 sellAmount;\n        // The nested calls to perform.\n        WrappedBatchCall[] calls;\n    }\n\n    // Represents a call nested within a `batchFill`.\n    struct WrappedBatchCall {\n        // The selector of the function to call.\n        bytes4 selector;\n        // Amount of `inputToken` to sell.\n        uint256 sellAmount;\n        // ABI-encoded parameters needed to perform the call.\n        bytes data;\n    }\n\n    // Parameters for `multiHopFill`.\n    struct MultiHopFillData {\n        // The sell path, i.e.\n        // tokens = [inputToken, hopToken1, ..., hopTokenN, outputToken]\n        address[] tokens;\n        // The amount of `tokens[0]` to sell.\n        uint256 sellAmount;\n        // The nested calls to perform.\n        WrappedMultiHopCall[] calls;\n    }\n\n    // Represents a call nested within a `multiHopFill`.\n    struct WrappedMultiHopCall {\n        // The selector of the function to call.\n        bytes4 selector;\n        // ABI-encoded parameters needed to perform the call.\n        bytes data;\n    }\n\n    event LiquidityProviderSwap(\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        address provider,\n        address recipient\n    );\n\n    event ExpiredRfqOrder(\n        bytes32 orderHash,\n        address maker,\n        uint64 expiry\n    );\n\n    /// @dev Executes a batch of fills selling `fillData.inputToken`\n    ///      for `fillData.outputToken` in sequence. Refer to the\n    ///      internal variant `_batchFill` for the allowed nested\n    ///      operations.\n    /// @param fillData Encodes the input/output tokens, the sell\n    ///        amount, and the nested operations for this batch fill.\n    /// @param minBuyAmount The minimum amount of `fillData.outputToken`\n    ///        to buy. Reverts if this amount is not met.\n    /// @return outputTokenAmount The amount of the output token bought.\n    function batchFill(\n        BatchFillData calldata fillData,\n        uint256 minBuyAmount\n    )\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Executes a sequence of fills \"hopping\" through the\n    ///      path of tokens given by `fillData.tokens`. Refer to the\n    ///      internal variant `_multiHopFill` for the allowed nested\n    ///      operations.\n    /// @param fillData Encodes the path of tokens, the sell amount,\n    ///        and the nested operations for this multi-hop fill.\n    /// @param minBuyAmount The minimum amount of the output token\n    ///        to buy. Reverts if this amount is not met.\n    /// @return outputTokenAmount The amount of the output token bought.\n    function multiHopFill(\n        MultiHopFillData calldata fillData,\n        uint256 minBuyAmount\n    )\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n}\n",
        "./interfaces/INativeOrdersFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\nimport \"./INativeOrdersEvents.sol\";\n\n\n/// @dev Feature for interacting with limit orders.\ninterface INativeOrdersFeature is\n    INativeOrdersEvents\n{\n\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\n    ///      the staking contract.\n    /// @param poolIds Staking pool IDs\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\n        external;\n\n    /// @dev Fill a limit order. The taker and sender will be the caller.\n    /// @param order The limit order. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      `msg.sender` (not `sender`).\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param sender The order sender.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        address sender\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order. Internal variant.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Cancel a single limit order. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The limit order.\n    function cancelLimitOrder(LibNativeOrder.LimitOrder calldata order)\n        external;\n\n    /// @dev Cancel a single RFQ order. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The RFQ order.\n    function cancelRfqOrder(LibNativeOrder.RfqOrder calldata order)\n        external;\n\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\n    ///      specifies the message sender as its txOrigin.\n    /// @param origins An array of origin addresses to update.\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedRfqOrigins(address[] memory origins, bool allowed)\n        external;\n\n    /// @dev Cancel multiple limit orders. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The limit orders.\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The RFQ orders.\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the order info for an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderInfo Info about the order.\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the canonical hash of a limit order.\n    /// @param order The limit order.\n    /// @return orderHash The order hash.\n    function getLimitOrderHash(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the canonical hash of an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderHash The order hash.\n    function getRfqOrderHash(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\n    ///      gas price to arrive at the required protocol fee to fill a native order.\n    /// @return multiplier The protocol fee multiplier.\n    function getProtocolFeeMultiplier()\n        external\n        view\n        returns (uint32 multiplier);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getRfqOrderRelevantState(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The limit orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetLimitOrderRelevantStates(\n        LibNativeOrder.LimitOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The RFQ orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetRfqOrderRelevantStates(\n        LibNativeOrder.RfqOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n}\n",
        "./libs/LibSignature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../../errors/LibSignatureRichErrors.sol\";\n\n\n/// @dev A library for validating signatures.\nlibrary LibSignature {\n    using LibRichErrorsV06 for bytes;\n\n    // '\\x19Ethereum Signed Message:\\n32\\x00\\x00\\x00\\x00' in a word.\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\n    ///      The valid range is given by fig (282) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\n    ///      The valid range is given by fig (283) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Retrieve the signer of a signature.\n    ///      Throws if the signature can't be validated.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    /// @return recovered The recovered signer address.\n    function getSignerOfHash(\n        bytes32 hash,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address recovered)\n    {\n        // Ensure this is a signature type that can be validated against a hash.\n        _validateHashCompatibleSignature(hash, signature);\n\n        if (signature.signatureType == SignatureType.EIP712) {\n            // Signed using EIP712\n            recovered = ecrecover(\n                hash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\n            // Signed using `eth_sign`\n            // Need to hash `hash` with \"\\x19Ethereum Signed Message:\\n32\" prefix\n            // in packed encoding.\n            bytes32 ethSignHash;\n            assembly {\n                // Use scratch space\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\n                mstore(28, hash) // length of 32 bytes\n                ethSignHash := keccak256(0, 60)\n            }\n            recovered = ecrecover(\n                ethSignHash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        }\n        // `recovered` can be null if the signature values are out of range.\n        if (recovered == address(0)) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n    }\n\n    /// @dev Validates that a signature is compatible with a hash signee.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    function _validateHashCompatibleSignature(\n        bytes32 hash,\n        Signature memory signature\n    )\n        private\n        pure\n    {\n        // Ensure the r and s are within malleability limits.\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\n        {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n\n        // Always illegal signature.\n        if (signature.signatureType == SignatureType.ILLEGAL) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\n                hash\n            ).rrevert();\n        }\n\n        // Always invalid.\n        if (signature.signatureType == SignatureType.INVALID) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\n                hash\n            ).rrevert();\n        }\n\n        // Solidity should check that the signature type is within enum range for us\n        // when abi-decoding.\n    }\n}\n",
        "../errors/LibSignatureRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSignatureRichErrors {\n\n    enum SignatureValidationErrorCodes {\n        ALWAYS_INVALID,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        WRONG_SIGNER,\n        BAD_SIGNATURE_DATA\n    }\n\n    // solhint-disable func-name-mixedcase\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32,address,bytes)\")),\n            code,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32)\")),\n            code,\n            hash\n        );\n    }\n}\n",
        "./libs/LibNativeOrder.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\n\n\n/// @dev A library for common native order operations.\nlibrary LibNativeOrder {\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\n\n    // The type hash for limit orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"LimitOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"uint128 takerTokenFeeAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address sender,\",\n    //       \"address feeRecipient,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\n\n    // The type hash for RFQ orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"RfqOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\n\n    /// @dev Get the struct hash of a limit order.\n    /// @param order The limit order.\n    /// @return structHash The struct hash of the order.\n    function getLimitOrderStructHash(LimitOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.takerTokenFeeAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.sender,\n        //   order.feeRecipient,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.takerTokenFeeAmount;\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\n            // order.maker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.taker;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.sender;\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\n            // order.feeRecipient;\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\n            // order.pool;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            // order.expiry;\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\n            // order.salt;\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\n            structHash := keccak256(mem, 0x1A0)\n        }\n    }\n\n    /// @dev Get the struct hash of a RFQ order.\n    /// @param order The RFQ order.\n    /// @return structHash The struct hash of the order.\n    function getRfqOrderStructHash(RfqOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.pool;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            // order.expiry;\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\n            // order.salt;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            structHash := keccak256(mem, 0x160)\n        }\n    }\n\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\n        internal\n    {\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\n            (bool success,) = msg\n                .sender\n                .call{value: refundAmount}(\"\");\n            if (!success) {\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\n                    msg.sender,\n                    refundAmount\n                ).rrevert();\n            }\n        }\n    }\n}\n",
        "../errors/LibNativeOrdersRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibNativeOrdersRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function ProtocolFeeRefundFailed(\n        address receiver,\n        uint256 refundAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"ProtocolFeeRefundFailed(address,uint256)\")),\n            receiver,\n            refundAmount\n        );\n    }\n\n    function OrderNotFillableByOriginError(\n        bytes32 orderHash,\n        address txOrigin,\n        address orderTxOrigin\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByOriginError(bytes32,address,address)\")),\n            orderHash,\n            txOrigin,\n            orderTxOrigin\n        );\n    }\n\n    function OrderNotFillableError(\n        bytes32 orderHash,\n        uint8 orderStatus\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableError(bytes32,uint8)\")),\n            orderHash,\n            orderStatus\n        );\n    }\n\n    function OrderNotSignedByMakerError(\n        bytes32 orderHash,\n        address signer,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotSignedByMakerError(bytes32,address,address)\")),\n            orderHash,\n            signer,\n            maker\n        );\n    }\n\n    function OrderNotFillableBySenderError(\n        bytes32 orderHash,\n        address sender,\n        address orderSender\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableBySenderError(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            orderSender\n        );\n    }\n\n    function OrderNotFillableByTakerError(\n        bytes32 orderHash,\n        address taker,\n        address orderTaker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByTakerError(bytes32,address,address)\")),\n            orderHash,\n            taker,\n            orderTaker\n        );\n    }\n\n    function CancelSaltTooLowError(\n        uint256 minValidSalt,\n        uint256 oldMinValidSalt\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"CancelSaltTooLowError(uint256,uint256)\")),\n            minValidSalt,\n            oldMinValidSalt\n        );\n    }\n\n    function FillOrKillFailedError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"FillOrKillFailedError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n\n    function OnlyOrderMakerAllowed(\n        bytes32 orderHash,\n        address sender,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOrderMakerAllowed(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            maker\n        );\n    }\n\n    function BatchFillIncompleteError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"BatchFillIncompleteError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n}\n",
        "./interfaces/INativeOrdersEvents.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\n/// @dev Events emitted by NativeOrdersFeature.\ninterface INativeOrdersEvents {\n\n    /// @dev Emitted whenever a `LimitOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param feeRecipient Fee recipient of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param protocolFeePaid How much protocol fee was paid.\n    /// @param pool The fee pool associated with this order.\n    event LimitOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address feeRecipient,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        uint128 takerTokenFeeFilledAmount,\n        uint256 protocolFeePaid,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever an `RfqOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param pool The fee pool associated with this order.\n    event RfqOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever a limit or RFQ order is cancelled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The order maker.\n    event OrderCancelled(\n        bytes32 orderHash,\n        address maker\n    );\n\n    /// @dev Emitted whenever Limit orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledLimitOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted whenever RFQ orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledRfqOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted when new addresses are allowed or disallowed to fill\n    ///      orders with a given txOrigin.\n    /// @param origin The address doing the allowing.\n    /// @param addrs The address being allowed/disallowed.\n    /// @param allowed Indicates whether the address should be allowed.\n    event RfqOrderOriginsAllowed(\n        address origin,\n        address[] addrs,\n        bool allowed\n    );\n}\n",
        "./interfaces/ITransformERC20Feature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../../transformers/IERC20Transformer.sol\";\nimport \"../../external/IFlashWallet.sol\";\n\n\n/// @dev Feature to composably transform between ERC20 tokens.\ninterface ITransformERC20Feature {\n\n    /// @dev Defines a transformation to run in `transformERC20()`.\n    struct Transformation {\n        // The deployment nonce for the transformer.\n        // The address of the transformer contract will be derived from this\n        // value.\n        uint32 deploymentNonce;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Arguments for `_transformERC20()`.\n    struct TransformERC20Args {\n        // The taker address.\n        address payable taker;\n        // The token being provided by the taker.\n        // If `0xeee...`, ETH is implied and should be provided with the call.`\n        IERC20TokenV06 inputToken;\n        // The token to be acquired by the taker.\n        // `0xeee...` implies ETH.\n        IERC20TokenV06 outputToken;\n        // The amount of `inputToken` to take from the taker.\n        // If set to `uint256(-1)`, the entire spendable balance of the taker\n        // will be solt.\n        uint256 inputTokenAmount;\n        // The minimum amount of `outputToken` the taker\n        // must receive for the entire transformation to succeed. If set to zero,\n        // the minimum output token transfer will not be asserted.\n        uint256 minOutputTokenAmount;\n        // The transformations to execute on the token balance(s)\n        // in sequence.\n        Transformation[] transformations;\n    }\n\n    /// @dev Raised upon a successful `transformERC20`.\n    /// @param taker The taker (caller) address.\n    /// @param inputToken The token being provided by the taker.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the taker.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the taker.\n    /// @param outputTokenAmount The amount of `outputToken` received by the taker.\n    event TransformedERC20(\n        address indexed taker,\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    /// @dev Raised when `setTransformerDeployer()` is called.\n    /// @param transformerDeployer The new deployer address.\n    event TransformerDeployerUpdated(address transformerDeployer);\n\n    /// @dev Raised when `setQuoteSigner()` is called.\n    /// @param quoteSigner The new quote signer.\n    event QuoteSignerUpdated(address quoteSigner);\n\n    /// @dev Replace the allowed deployer for transformers.\n    ///      Only callable by the owner.\n    /// @param transformerDeployer The address of the new trusted deployer\n    ///        for transformers.\n    function setTransformerDeployer(address transformerDeployer)\n        external;\n\n    /// @dev Replace the optional signer for `transformERC20()` calldata.\n    ///      Only callable by the owner.\n    /// @param quoteSigner The address of the new calldata signer.\n    function setQuoteSigner(address quoteSigner)\n        external;\n\n    /// @dev Deploy a new flash wallet instance and replace the current one with it.\n    ///      Useful if we somehow break the current wallet instance.\n    ///       Only callable by the owner.\n    /// @return wallet The new wallet instance.\n    function createTransformWallet()\n        external\n        returns (IFlashWallet wallet);\n\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\n    ///      to an ERC20 `outputToken`.\n    /// @param inputToken The token being provided by the sender.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the sender.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\n    ///        must receive for the entire transformation to succeed.\n    /// @param transformations The transformations to execute on the token balance(s)\n    ///        in sequence.\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\n    function transformERC20(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 minOutputTokenAmount,\n        Transformation[] calldata transformations\n    )\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\n    /// @param args A `TransformERC20Args` struct.\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\n    function _transformERC20(TransformERC20Args calldata args)\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Return the current wallet instance that will serve as the execution\n    ///      context for transformations.\n    /// @return wallet The wallet instance.\n    function getTransformWallet()\n        external\n        view\n        returns (IFlashWallet wallet);\n\n    /// @dev Return the allowed deployer for transformers.\n    /// @return deployer The transform deployer address.\n    function getTransformerDeployer()\n        external\n        view\n        returns (address deployer);\n\n    /// @dev Return the optional signer for `transformERC20()` calldata.\n    /// @return signer The transform deployer address.\n    function getQuoteSigner()\n        external\n        view\n        returns (address signer);\n}\n",
        "../transformers/IERC20Transformer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev A transformation callback used in `TransformERC20.transformERC20()`.\ninterface IERC20Transformer {\n\n    /// @dev Context information to pass into `transform()` by `TransformERC20.transformERC20()`.\n    struct TransformContext {\n        // The caller of `TransformERC20.transformERC20()`.\n        address payable sender;\n        // taker The taker address, which may be distinct from `sender` in the case\n        // meta-transactions.\n        address payable taker;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Called from `TransformERC20.transformERC20()`. This will be\n    ///      delegatecalled in the context of the FlashWallet instance being used.\n    /// @param context Context information.\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\n    function transform(TransformContext calldata context)\n        external\n        returns (bytes4 success);\n}\n",
        "../external/IFlashWallet.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n/// @dev A contract that can execute arbitrary calls from its owner.\ninterface IFlashWallet {\n\n    /// @dev Execute an arbitrary call. Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @param value Ether to attach to the call.\n    /// @return resultData The data returned by the call.\n    function executeCall(\n        address payable target,\n        bytes calldata callData,\n        uint256 value\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\n    ///      Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @return resultData The data returned by the call.\n    function executeDelegateCall(\n        address payable target,\n        bytes calldata callData\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Allows the puppet to receive ETH.\n    receive() external payable;\n\n    /// @dev Fetch the immutable owner/deployer of this contract.\n    /// @return owner_ The immutable owner/deployer/\n    function owner() external view returns (address owner_);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-erc20=/Users/michaelzhu/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap",
                        "evm.methodIdentifiers"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
