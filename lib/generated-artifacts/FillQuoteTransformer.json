{
    "schemaVersion": "2.0.0",
    "contractName": "FillQuoteTransformer",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "contract IBridgeAdapter",
                        "name": "bridgeAdapter_",
                        "type": "address"
                    },
                    {
                        "internalType": "contract INativeOrdersFeature",
                        "name": "zeroEx_",
                        "type": "address"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "bytes32",
                        "name": "orderHash",
                        "type": "bytes32"
                    }
                ],
                "name": "ProtocolFeeUnfunded",
                "type": "event"
            },
            {
                "inputs": [],
                "name": "bridgeAdapter",
                "outputs": [
                    {
                        "internalType": "contract IBridgeAdapter",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "deployer",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address payable",
                        "name": "ethRecipient",
                        "type": "address"
                    }
                ],
                "name": "die",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address payable",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address payable",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IERC20Transformer.TransformContext",
                        "name": "context",
                        "type": "tuple"
                    }
                ],
                "name": "transform",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "magicBytes",
                        "type": "bytes4"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "zeroEx",
                "outputs": [
                    {
                        "internalType": "contract INativeOrdersFeature",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "details": "A transformer that fills an ERC20 market sell/buy quote.      This transformer shortcuts bridge orders and fills them directly",
            "events": {
                "ProtocolFeeUnfunded(bytes32)": {
                    "details": "Emitted when a trade is skipped due to a lack of funds      to pay the 0x Protocol fee.",
                    "params": {
                        "orderHash": "The hash of the order that was skipped."
                    }
                }
            },
            "kind": "dev",
            "methods": {
                "constructor": {
                    "details": "Create this contract.",
                    "params": {
                        "bridgeAdapter_": "The bridge adapter contract.",
                        "zeroEx_": "The Exchange Proxy contract."
                    }
                },
                "die(address)": {
                    "details": "Destruct this contract. Only callable by the deployer and will not      succeed in the context of a delegatecall (from another contract).",
                    "params": {
                        "ethRecipient": "The recipient of ETH held in this contract."
                    }
                },
                "transform((address,address,bytes))": {
                    "details": "Sell this contract's entire balance of of `sellToken` in exchange      for `buyToken` by filling `orders`. Protocol fees should be attached      to this call. `buyToken` and excess ETH will be transferred back to the caller.",
                    "params": {
                        "context": "Context information."
                    },
                    "returns": {
                        "magicBytes": "The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`)."
                    }
                }
            },
            "stateVariables": {
                "HIGH_BIT": {
                    "details": "The highest bit of a uint256 value."
                },
                "LOWER_255_BITS": {
                    "details": "Mask of the lower 255 bits of a uint256 value."
                },
                "REFUND_RECEIVER_SENDER": {
                    "details": "If `refundReceiver` is set to this address, unpsent      protocol fees will be sent to the sender."
                },
                "REFUND_RECEIVER_TAKER": {
                    "details": "If `refundReceiver` is set to this address, unpsent      protocol fees will be sent to the taker."
                },
                "bridgeAdapter": {
                    "details": "The BridgeAdapter address"
                },
                "zeroEx": {
                    "details": "The exchange proxy contract."
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x6101006040523480156200001257600080fd5b50604051620027a5380380620027a5833981016040819052620000359162000060565b33606090811b60805230811b60a0526001600160601b031992811b831660c0521b1660e052620000b7565b6000806040838503121562000073578182fd5b825162000080816200009e565b602084015190925062000093816200009e565b809150509250929050565b6001600160a01b0381168114620000b457600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c612680620001256000398060d1528061026852806102c75280610ee25280610fa7528061119e52508061080e5280610cc55250806108b252806108e05250806108485280610876528061091f52506126806000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063be7dc09b11610050578063be7dc09b146100aa578063c9353cb5146100b2578063d5f39488146100c757610067565b806352ab413b1461006c578063832b24bb1461008a575b600080fd5b6100746100cf565b60405161008191906121cc565b60405180910390f35b61009d610098366004611e61565b6100f3565b6040516100819190612271565b61007461080c565b6100c56100c0366004611e2d565b610830565b005b61007461091d565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006100fd6117e3565b61010a6040840184612520565b8101906101179190611e99565b9050610121611872565b610144826020015173ffffffffffffffffffffffffffffffffffffffff16610941565b8061016d575061016d826040015173ffffffffffffffffffffffffffffffffffffffff16610941565b156101c6576101c66101c160006101876040880188612520565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061097392505050565b610a2f565b8160c00151518260a00151518360800151518460600151510101146101fa576101fa6101c160016101876040880188612520565b602082015161021f9073ffffffffffffffffffffffffffffffffffffffff1630610a37565b608082015260008251600181111561023357fe5b14156102515761024b8260e001518260800151610b0e565b60e08301525b60a082015151608083015151011561037d576102b67f00000000000000000000000000000000000000000000000000000000000000008360e00151846020015173ffffffffffffffffffffffffffffffffffffffff16610b909092919063ffffffff16565b6080820151511561037d576103773a7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663487b5c206040518163ffffffff1660e01b815260040160206040518083038186803b15801561032b57600080fd5b505afa15801561033f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103639190612001565b63ffffffff16610c6c90919063ffffffff16565b60608201525b47815260005b8260c00151518110156105b95760008351600181111561039f57fe5b14156103be578260e001518260400151106103b9576105b9565b6103d2565b8260e001518260200151106103d2576105b9565b8260c0015181815181106103e257fe5b60200260200101518260c0019060028111156103fa57fe5b9081600281111561040757fe5b8152505060008260a001518360c00151600281111561042257fe5b6003811061042c57fe5b6020020151905061043b6118b4565b60008460c00151600281111561044d57fe5b141561047c576104758560600151838151811061046657fe5b60200260200101518686610c9d565b905061052b565b60018460c00151600281111561048e57fe5b14156104b657610475856080015183815181106104a757fe5b60200260200101518686610e1c565b60028460c0015160028111156104c857fe5b14156104f0576104758560a0015183815181106104e157fe5b6020026020010151868661114b565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290612307565b60405180910390fd5b8051604085015161053b9161129d565b6040850152602080820151908501516105539161129d565b602085015260408101518451610568916112b9565b84528051608085015161057a916112b9565b608085015260a084015160c0850151600281111561059457fe5b6003811061059e57fe5b60200201805160019081019091529290920191506103839050565b506000825160018111156105c957fe5b14156105fe578160e00151816040015110156105f9576105f96101c1836020015183604001518560e001516112d8565b610628565b8160e0015181602001511015610628576106286101c1836040015183602001518560e00151611396565b805115801590610652575061010082015173ffffffffffffffffffffffffffffffffffffffff1615155b156107e15761010082015160009073ffffffffffffffffffffffffffffffffffffffff16600114156107025761068e6040860160208701611e2d565b73ffffffffffffffffffffffffffffffffffffffff1682600001516040516106b5906121c9565b60006040518083038185875af1925050503d80600081146106f2576040519150601f19603f3d011682016040523d82523d6000602084013e6106f7565b606091505b5050809150506107a8565b61010083015173ffffffffffffffffffffffffffffffffffffffff16600214156107335761068e6020860186611e2d565b82610100015173ffffffffffffffffffffffffffffffffffffffff168260000151604051610760906121c9565b60006040518083038185875af1925050503d806000811461079d576040519150601f19603f3d011682016040523d82523d6000602084013e6107a2565b606091505b50909150505b806107df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105229061233e565b505b507f13c9929e000000000000000000000000000000000000000000000000000000009150505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461089a5761089a6101c1337f00000000000000000000000000000000000000000000000000000000000000006113ce565b3073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610904576109046101c1307f0000000000000000000000000000000000000000000000000000000000000000611404565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14919050565b60607f505ff6a4f24a0aa989a95ffe4c8d435d76fb30dea162a3e3022e749867722deb83836040516024016109a99291906122e4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290505b92915050565b805160208201fd5b6000610a4283610941565b15610a65575073ffffffffffffffffffffffffffffffffffffffff811631610a29565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190610ab79085906004016121cc565b60206040518083038186803b158015610acf57600080fd5b505afa158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b079190611e49565b9392505050565b60007f80000000000000000000000000000000000000000000000000000000000000008084161415610b8957610b82670de0b6b3a7640000610b727f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86168261143a565b840281610b7b57fe5b048361143a565b9050610a29565b5090919050565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff85169063dd62ed3e90610be690309087906004016121ed565b60206040518083038186803b158015610bfe57600080fd5b505afa158015610c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c369190611e49565b1015610c6757610c6783837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611449565b505050565b600082610c7b57506000610a29565b82820282848281610c8857fe5b0414610b0757610b076101c1600186866114f5565b610ca56118b4565b6000610cbd8484876020015188604001516000611514565b9050600060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663df2b273760e01b888860200151896040015187604051602401610d21949392919061239b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610daa91906121ad565b600060405180830381855af49150503d8060008114610de5576040519150601f19603f3d011682016040523d82523d6000602084013e610dea565b606091505b50915091508115610e125780806020019051810190610e099190611e49565b60208501528284525b5050509392505050565b610e246118b4565b6000610e8e610e8485858860000151606001516fffffffffffffffffffffffffffffffff168960000151604001516fffffffffffffffffffffffffffffffff168a60000151608001516fffffffffffffffffffffffffffffffff16611514565b866040015161143a565b9050826060015183600001511015610fa55784516040517fdd11d22500000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163dd11d22591610f1591600401612407565b60206040518083038186803b158015610f2d57600080fd5b505afa158015610f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f659190611e49565b90507fb5d7e18f9bad5b40d7cf6bb45142dfbaef62527179ff5c249c6d6cc00176224d81604051610f969190612268565b60405180910390a15050610b07565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6274f66846060015187600001518860200151610ff9866115aa565b6040518563ffffffff1660e01b815260040161101793929190612416565b60408051808303818588803b15801561102f57600080fd5b505af19350505050801561107e575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261107b91810190611fc8565b60015b61108757611143565b8651608001516fffffffffffffffffffffffffffffffff161561111c576111196111006110fb846fffffffffffffffffffffffffffffffff168a60000151606001516fffffffffffffffffffffffffffffffff168b60000151608001516fffffffffffffffffffffffffffffffff166115d6565b6115aa565b6fffffffffffffffffffffffffffffffff8416906115f4565b91505b6fffffffffffffffffffffffffffffffff9182168452166020830152606083015160408301525b509392505050565b6111536118b4565b600061119a610e8485858860000151606001516fffffffffffffffffffffffffffffffff168960000151604001516fffffffffffffffffffffffffffffffff166000611514565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aa77476c866000015187602001516111eb856115aa565b6040518463ffffffff1660e01b815260040161120993929190612454565b6040805180830381600087803b15801561122257600080fd5b505af1925050508015611270575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261126d91810190611fc8565b60015b61127957611143565b6fffffffffffffffffffffffffffffffff9182168452166020830152509392505050565b600082820183811015610b0757610b076101c1600086866114f5565b6000828211156112d2576112d26101c1600285856114f5565b50900390565b60607fadc35ca636cd9f46b974d5bec4df8af095d0ae177ec6043620af588c03bdc6168484846040516024016113109392919061223a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b60607f498df3ae522acadbf67e6aa5fde156a5b74336950cd271175e7336907df120e38484846040516024016113109392919061223a565b60607f5cec653b364cca3880afa73ceff506d0651d11d26abbbe4a56460aa933b21b0883836040516024016109a99291906121ed565b60607fb5cf2cd09307d6c717473134badbb9761c2c97d7565566c2a71eba6cd6fc514d83836040516024016109a99291906121ed565b6000818310610b895781610b07565b606063095ea7b360e01b8383604051602401611466929190612214565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290506114ef8482611649565b50505050565b606063e946c1bb60e01b8484846040516024016113109392919061229e565b6000808651600181111561152457fe5b141561156157604085015160e087015161153d916112b9565b9050811561155c5761155981611553868561129d565b866116e3565b90505b611589565b61158661157f86602001518860e001516112b990919063ffffffff16565b84866116e3565b90505b6115a0611596828661143a565b866080015161143a565b9695505050505050565b60006fffffffffffffffffffffffffffffffff8211156115d2576115d26101c1600384611707565b5090565b60006115ec836115e68685610c6c565b90611724565b949350505050565b60008282016fffffffffffffffffffffffffffffffff8085169082161015610b0757610b076101c16000866fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff166114f5565b600060608373ffffffffffffffffffffffffffffffffffffffff168360405161167291906121ad565b6000604051808303816000865af19150503d80600081146116af576040519150601f19603f3d011682016040523d82523d6000602084013e6116b4565b606091505b50915091508180156116ca57506116ca8161174e565b156116d65750506116df565b6114ef81610a2f565b5050565b60006115ec836115e66116f78260016112b9565b6117018887610c6c565b9061129d565b606063c996af7b60e01b83836040516024016109a99291906122bf565b60008161173a5761173a6101c1600385856114f5565b600082848161174557fe5b04949350505050565b600081516000141561176257506001610807565b6020825110610807576000611778836000611793565b9050806001141561178d576001915050610807565b50919050565b6000610b078383600081602001835110156117bb576117bb6101c160058551856020016117c4565b50016020015190565b6060632800659560e01b848484604051602401611310939291906122d6565b6040805161012081019091528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016118a86118d5565b81526020016000905290565b60405180606001604052806000815260200160008152602001600081525090565b60405180606001604052806003906020820280368337509192915050565b8035610a298161260a565b600082601f83011261190e578081fd5b813561192161191c826125b1565b61258a565b81815291506020808301908481018184028601820187101561194257600080fd5b6000805b8581101561196e5782356003811061195c578283fd5b85529383019391830191600101611946565b50505050505092915050565b6000601f838184011261198b578182fd5b823561199961191c826125b1565b818152925060208084019085810160005b8481101561196e578135880160807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08181848e030112156119ea57600080fd5b6119f38261258a565b8387013581526040808501358289015260608086013582840152938501359367ffffffffffffffff80861115611a2857600080fd5b85870196508f603f880112611a3c57600080fd5b89870135955080861115611a4f57600080fd5b50611a5f89858e8801160161258a565b93508484528e82868801011115611a7557600080fd5b848287018a8601376000948401890194909452509182015285525092820192908201906001016119aa565b600082601f830112611ab0578081fd5b8135611abe61191c826125b1565b818152915060208083019084810161022080850287018301881015611ae257600080fd5b6000805b86811015611b415782848b031215611afc578182fd5b611b06606061258a565b611b108b86611cba565b8152611b208b6101808701611da7565b81870152610200850135604082015286529484019492820192600101611ae6565b5050505050505092915050565b600082601f830112611b5e578081fd5b8135611b6c61191c826125b1565b81815291506020808301908481016101e080850287018301881015611b9057600080fd5b60005b8581101561196e5782890382811215611bab57600080fd5b6060611bb68161258a565b61014080841215611bc657600080fd5b611bcf8161258a565b9350611bdb8d886118f3565b8452611be98d8989016118f3565b888501526040611bfb8e828a01611e0a565b81860152611c0b8e858a01611e0a565b8486015260809350611c1f8e858a016118f3565b8486015260a09350611c338e858a016118f3565b8486015260c09350611c478e858a016118f3565b8486015260e0935083880135848601526101009350611c688e858a01611e15565b8486015261012093508388013584860152848352611c888e838a01611da7565b838a01526101c08801359083015250875250509383019391810191600101611b93565b803560028110610a2957600080fd5b6000610180808385031215611ccd578182fd5b611cd68161258a565b915050611ce383836118f3565b8152611cf283602084016118f3565b6020820152611d048360408401611e0a565b6040820152611d168360608401611e0a565b6060820152611d288360808401611e0a565b6080820152611d3a8360a084016118f3565b60a0820152611d4c8360c084016118f3565b60c0820152611d5e8360e084016118f3565b60e0820152610100611d72848285016118f3565b908201526101208281013590820152610140611d9084828501611e15565b818301525061016080830135818301525092915050565b600060808284031215611db8578081fd5b611dc2608061258a565b9050813560048110611dd357600080fd5b8152602082013560ff81168114611de957600080fd5b80602083015250604082013560408201526060820135606082015292915050565b8035610a298161262c565b803567ffffffffffffffff81168114610a2957600080fd5b600060208284031215611e3e578081fd5b8135610b078161260a565b600060208284031215611e5a578081fd5b5051919050565b600060208284031215611e72578081fd5b813567ffffffffffffffff811115611e88578182fd5b820160608185031215610b07578182fd5b600060208284031215611eaa578081fd5b813567ffffffffffffffff80821115611ec1578283fd5b8184019150610120808387031215611ed7578384fd5b611ee08161258a565b9050611eec8684611cab565b8152611efb86602085016118f3565b6020820152611f0d86604085016118f3565b6040820152606083013582811115611f23578485fd5b611f2f8782860161197a565b606083015250608083013582811115611f46578485fd5b611f5287828601611aa0565b60808301525060a083013582811115611f69578485fd5b611f7587828601611b4e565b60a08301525060c083013582811115611f8c578485fd5b611f98878286016118fe565b60c08301525060e083013560e08201526101009150611fb9868385016118f3565b91810191909152949350505050565b60008060408385031215611fda578081fd5b8251611fe58161262c565b6020840151909250611ff68161262c565b809150509250929050565b600060208284031215612012578081fd5b815163ffffffff81168114610b07578182fd5b73ffffffffffffffffffffffffffffffffffffffff169052565b600081518084526120578160208601602086016125d1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b612094828251612025565b60208101516120a66020840182612025565b5060408101516120b96040840182612189565b5060608101516120cc6060840182612189565b5060808101516120df6080840182612189565b5060a08101516120f260a0840182612025565b5060c081015161210560c0840182612025565b5060e081015161211860e0840182612025565b506101008082015161212c82850182612025565b505061012081810151908301526101408082015161214c8285018261219f565b505061016090810151910152565b8051612165816125fd565b825260208181015160ff169083015260408082015190830152606090810151910152565b6fffffffffffffffffffffffffffffffff169052565b67ffffffffffffffff169052565b600082516121bf8184602087016125d1565b9190910192915050565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b90815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b606081016122ab856125fd565b938152602081019290925260409091015290565b604081016122cc846125fd565b9281526020015290565b60608101600885106122ab57fe5b6000600284106122f057fe5b838252604060208301526115ec604083018461203f565b60208082526012908201527f494e56414c49445f4f524445525f545950450000000000000000000000000000604082015260600190565b6020808252602a908201527f46696c6c51756f74655472616e73666f726d65722f45544845525f5452414e5360408201527f4645525f46414c49454400000000000000000000000000000000000000000000606082015260800190565b60006080825285516080830152602086015160a0830152604086015160c08301526060860151608060e08401526123d661010084018261203f565b73ffffffffffffffffffffffffffffffffffffffff9687166020850152949095166040830152506060015292915050565b6101808101610a298284612089565b61022081016124258286612089565b61243361018083018561215a565b6fffffffffffffffffffffffffffffffff8316610200830152949350505050565b60006101e082019050612468828651612025565b602085015161247a6020840182612025565b50604085015161248d6040840182612189565b5060608501516124a06060840182612189565b5060808501516124b36080840182612025565b5060a08501516124c660a0840182612025565b5060c08501516124d960c0840182612025565b5060e085015160e0830152610100808601516124f78285018261219f565b5050610120858101519083015261251261014083018561215a565b6115ec6101c0830184612189565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612554578283fd5b83018035915067ffffffffffffffff82111561256e578283fd5b60200191503681900382131561258357600080fd5b9250929050565b60405181810167ffffffffffffffff811182821017156125a957600080fd5b604052919050565b600067ffffffffffffffff8211156125c7578081fd5b5060209081020190565b60005b838110156125ec5781810151838201526020016125d4565b838111156114ef5750506000910152565b6004811061260757fe5b50565b73ffffffffffffffffffffffffffffffffffffffff8116811461260757600080fd5b6fffffffffffffffffffffffffffffffff8116811461260757600080fdfea2646970667358221220bfe38a13d7de600dba050275392841167f43760555e289253bee8c22dfb0c7dc64736f6c634300060c0033",
                "opcodes": "PUSH2 0x100 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x27A5 CODESIZE SUB DUP1 PUSH3 0x27A5 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x60 JUMP JUMPDEST CALLER PUSH1 0x60 SWAP1 DUP2 SHL PUSH1 0x80 MSTORE ADDRESS DUP2 SHL PUSH1 0xA0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP3 DUP2 SHL DUP4 AND PUSH1 0xC0 MSTORE SHL AND PUSH1 0xE0 MSTORE PUSH3 0xB7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x73 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH3 0x80 DUP2 PUSH3 0x9E JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x93 DUP2 PUSH3 0x9E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH1 0x60 SHR PUSH2 0x2680 PUSH3 0x125 PUSH1 0x0 CODECOPY DUP1 PUSH1 0xD1 MSTORE DUP1 PUSH2 0x268 MSTORE DUP1 PUSH2 0x2C7 MSTORE DUP1 PUSH2 0xEE2 MSTORE DUP1 PUSH2 0xFA7 MSTORE DUP1 PUSH2 0x119E MSTORE POP DUP1 PUSH2 0x80E MSTORE DUP1 PUSH2 0xCC5 MSTORE POP DUP1 PUSH2 0x8B2 MSTORE DUP1 PUSH2 0x8E0 MSTORE POP DUP1 PUSH2 0x848 MSTORE DUP1 PUSH2 0x876 MSTORE DUP1 PUSH2 0x91F MSTORE POP PUSH2 0x2680 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBE7DC09B GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xBE7DC09B EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0xC9353CB5 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xD5F39488 EQ PUSH2 0xC7 JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x52AB413B EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x832B24BB EQ PUSH2 0x8A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74 PUSH2 0xCF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0x21CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9D PUSH2 0x98 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E61 JUMP JUMPDEST PUSH2 0xF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x74 PUSH2 0x80C JUMP JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E2D JUMP JUMPDEST PUSH2 0x830 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x74 PUSH2 0x91D JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFD PUSH2 0x17E3 JUMP JUMPDEST PUSH2 0x10A PUSH1 0x40 DUP5 ADD DUP5 PUSH2 0x2520 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x117 SWAP2 SWAP1 PUSH2 0x1E99 JUMP JUMPDEST SWAP1 POP PUSH2 0x121 PUSH2 0x1872 JUMP JUMPDEST PUSH2 0x144 DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x941 JUMP JUMPDEST DUP1 PUSH2 0x16D JUMPI POP PUSH2 0x16D DUP3 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x941 JUMP JUMPDEST ISZERO PUSH2 0x1C6 JUMPI PUSH2 0x1C6 PUSH2 0x1C1 PUSH1 0x0 PUSH2 0x187 PUSH1 0x40 DUP9 ADD DUP9 PUSH2 0x2520 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x973 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xA2F JUMP JUMPDEST DUP2 PUSH1 0xC0 ADD MLOAD MLOAD DUP3 PUSH1 0xA0 ADD MLOAD MLOAD DUP4 PUSH1 0x80 ADD MLOAD MLOAD DUP5 PUSH1 0x60 ADD MLOAD MLOAD ADD ADD EQ PUSH2 0x1FA JUMPI PUSH2 0x1FA PUSH2 0x1C1 PUSH1 0x1 PUSH2 0x187 PUSH1 0x40 DUP9 ADD DUP9 PUSH2 0x2520 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x21F SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH2 0xA37 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x233 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x251 JUMPI PUSH2 0x24B DUP3 PUSH1 0xE0 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD PUSH2 0xB0E JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD MLOAD PUSH1 0x80 DUP4 ADD MLOAD MLOAD ADD ISZERO PUSH2 0x37D JUMPI PUSH2 0x2B6 PUSH32 0x0 DUP4 PUSH1 0xE0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB90 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD MLOAD ISZERO PUSH2 0x37D JUMPI PUSH2 0x377 GASPRICE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x487B5C20 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x33F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x363 SWAP2 SWAP1 PUSH2 0x2001 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND PUSH2 0xC6C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE JUMPDEST SELFBALANCE DUP2 MSTORE PUSH1 0x0 JUMPDEST DUP3 PUSH1 0xC0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x5B9 JUMPI PUSH1 0x0 DUP4 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x39F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x3BE JUMPI DUP3 PUSH1 0xE0 ADD MLOAD DUP3 PUSH1 0x40 ADD MLOAD LT PUSH2 0x3B9 JUMPI PUSH2 0x5B9 JUMP JUMPDEST PUSH2 0x3D2 JUMP JUMPDEST DUP3 PUSH1 0xE0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD LT PUSH2 0x3D2 JUMPI PUSH2 0x5B9 JUMP JUMPDEST DUP3 PUSH1 0xC0 ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3E2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0xC0 ADD SWAP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x3FA JUMPI INVALID JUMPDEST SWAP1 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x407 JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP PUSH1 0x0 DUP3 PUSH1 0xA0 ADD MLOAD DUP4 PUSH1 0xC0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x422 JUMPI INVALID JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x42C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP1 POP PUSH2 0x43B PUSH2 0x18B4 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0xC0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x44D JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x47C JUMPI PUSH2 0x475 DUP6 PUSH1 0x60 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x466 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP7 PUSH2 0xC9D JUMP JUMPDEST SWAP1 POP PUSH2 0x52B JUMP JUMPDEST PUSH1 0x1 DUP5 PUSH1 0xC0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x48E JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4B6 JUMPI PUSH2 0x475 DUP6 PUSH1 0x80 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4A7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP7 PUSH2 0xE1C JUMP JUMPDEST PUSH1 0x2 DUP5 PUSH1 0xC0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4C8 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4F0 JUMPI PUSH2 0x475 DUP6 PUSH1 0xA0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4E1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP7 PUSH2 0x114B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x2307 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x53B SWAP2 PUSH2 0x129D JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP6 ADD MLOAD PUSH2 0x553 SWAP2 PUSH2 0x129D JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD DUP5 MLOAD PUSH2 0x568 SWAP2 PUSH2 0x12B9 JUMP JUMPDEST DUP5 MSTORE DUP1 MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH2 0x57A SWAP2 PUSH2 0x12B9 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xC0 DUP6 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x594 JUMPI INVALID JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x59E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP1 MLOAD PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP3 SWAP1 SWAP3 ADD SWAP2 POP PUSH2 0x383 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x0 DUP3 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5C9 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x5FE JUMPI DUP2 PUSH1 0xE0 ADD MLOAD DUP2 PUSH1 0x40 ADD MLOAD LT ISZERO PUSH2 0x5F9 JUMPI PUSH2 0x5F9 PUSH2 0x1C1 DUP4 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0xE0 ADD MLOAD PUSH2 0x12D8 JUMP JUMPDEST PUSH2 0x628 JUMP JUMPDEST DUP2 PUSH1 0xE0 ADD MLOAD DUP2 PUSH1 0x20 ADD MLOAD LT ISZERO PUSH2 0x628 JUMPI PUSH2 0x628 PUSH2 0x1C1 DUP4 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0xE0 ADD MLOAD PUSH2 0x1396 JUMP JUMPDEST DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x652 JUMPI POP PUSH2 0x100 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x7E1 JUMPI PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ ISZERO PUSH2 0x702 JUMPI PUSH2 0x68E PUSH1 0x40 DUP7 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1E2D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x6B5 SWAP1 PUSH2 0x21C9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6F2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP DUP1 SWAP2 POP POP PUSH2 0x7A8 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 EQ ISZERO PUSH2 0x733 JUMPI PUSH2 0x68E PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x1E2D JUMP JUMPDEST DUP3 PUSH2 0x100 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x760 SWAP1 PUSH2 0x21C9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x79D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7A2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP2 POP POP JUMPDEST DUP1 PUSH2 0x7DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x233E JUMP JUMPDEST POP JUMPDEST POP PUSH32 0x13C9929E00000000000000000000000000000000000000000000000000000000 SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x89A JUMPI PUSH2 0x89A PUSH2 0x1C1 CALLER PUSH32 0x0 PUSH2 0x13CE JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x904 JUMPI PUSH2 0x904 PUSH2 0x1C1 ADDRESS PUSH32 0x0 PUSH2 0x1404 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFDESTRUCT JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x505FF6A4F24A0AA989A95FFE4C8D435D76FB30DEA162A3E3022E749867722DEB DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9A9 SWAP3 SWAP2 SWAP1 PUSH2 0x22E4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA42 DUP4 PUSH2 0x941 JUMP JUMPDEST ISZERO PUSH2 0xA65 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND BALANCE PUSH2 0xA29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xAB7 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x21CC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xACF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB07 SWAP2 SWAP1 PUSH2 0x1E49 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP1 DUP5 AND EQ ISZERO PUSH2 0xB89 JUMPI PUSH2 0xB82 PUSH8 0xDE0B6B3A7640000 PUSH2 0xB72 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 PUSH2 0x143A JUMP JUMPDEST DUP5 MUL DUP2 PUSH2 0xB7B JUMPI INVALID JUMPDEST DIV DUP4 PUSH2 0x143A JUMP JUMPDEST SWAP1 POP PUSH2 0xA29 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0xBE6 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x21ED JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC12 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC36 SWAP2 SWAP1 PUSH2 0x1E49 JUMP JUMPDEST LT ISZERO PUSH2 0xC67 JUMPI PUSH2 0xC67 DUP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x1449 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC7B JUMPI POP PUSH1 0x0 PUSH2 0xA29 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xC88 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xB07 JUMPI PUSH2 0xB07 PUSH2 0x1C1 PUSH1 0x1 DUP7 DUP7 PUSH2 0x14F5 JUMP JUMPDEST PUSH2 0xCA5 PUSH2 0x18B4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCBD DUP5 DUP5 DUP8 PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD PUSH1 0x0 PUSH2 0x1514 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDF2B2737 PUSH1 0xE0 SHL DUP9 DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xD21 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x239B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0xDAA SWAP2 SWAP1 PUSH2 0x21AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xDE5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDEA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0xE12 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xE09 SWAP2 SWAP1 PUSH2 0x1E49 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE DUP3 DUP5 MSTORE JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xE24 PUSH2 0x18B4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE8E PUSH2 0xE84 DUP6 DUP6 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1514 JUMP JUMPDEST DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x143A JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD LT ISZERO PUSH2 0xFA5 JUMPI DUP5 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD11D22500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP2 PUSH4 0xDD11D225 SWAP2 PUSH2 0xF15 SWAP2 PUSH1 0x4 ADD PUSH2 0x2407 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF41 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF65 SWAP2 SWAP1 PUSH2 0x1E49 JUMP JUMPDEST SWAP1 POP PUSH32 0xB5D7E18F9BAD5B40D7CF6BB45142DFBAEF62527179FF5C249C6D6CC00176224D DUP2 PUSH1 0x40 MLOAD PUSH2 0xF96 SWAP2 SWAP1 PUSH2 0x2268 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH2 0xB07 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF6274F66 DUP5 PUSH1 0x60 ADD MLOAD DUP8 PUSH1 0x0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0xFF9 DUP7 PUSH2 0x15AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1017 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2416 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x102F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x107E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x107B SWAP2 DUP2 ADD SWAP1 PUSH2 0x1FC8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1087 JUMPI PUSH2 0x1143 JUMP JUMPDEST DUP7 MLOAD PUSH1 0x80 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x111C JUMPI PUSH2 0x1119 PUSH2 0x1100 PUSH2 0x10FB DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH1 0x0 ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15D6 JUMP JUMPDEST PUSH2 0x15AA JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH2 0x15F4 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND DUP5 MSTORE AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1153 PUSH2 0x18B4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x119A PUSH2 0xE84 DUP6 DUP6 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH2 0x1514 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAA77476C DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x11EB DUP6 PUSH2 0x15AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1209 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2454 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1270 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x126D SWAP2 DUP2 ADD SWAP1 PUSH2 0x1FC8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1279 JUMPI PUSH2 0x1143 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND DUP5 MSTORE AND PUSH1 0x20 DUP4 ADD MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xB07 JUMPI PUSH2 0xB07 PUSH2 0x1C1 PUSH1 0x0 DUP7 DUP7 PUSH2 0x14F5 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x12D2 JUMPI PUSH2 0x12D2 PUSH2 0x1C1 PUSH1 0x2 DUP6 DUP6 PUSH2 0x14F5 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xADC35CA636CD9F46B974D5BEC4DF8AF095D0AE177EC6043620AF588C03BDC616 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1310 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x223A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x498DF3AE522ACADBF67E6AA5FDE156A5B74336950CD271175E7336907DF120E3 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1310 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x223A JUMP JUMPDEST PUSH1 0x60 PUSH32 0x5CEC653B364CCA3880AFA73CEFF506D0651D11D26ABBBE4A56460AA933B21B08 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9A9 SWAP3 SWAP2 SWAP1 PUSH2 0x21ED JUMP JUMPDEST PUSH1 0x60 PUSH32 0xB5CF2CD09307D6C717473134BADBB9761C2C97D7565566C2A71EBA6CD6FC514D DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9A9 SWAP3 SWAP2 SWAP1 PUSH2 0x21ED JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xB89 JUMPI DUP2 PUSH2 0xB07 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1466 SWAP3 SWAP2 SWAP1 PUSH2 0x2214 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x14EF DUP5 DUP3 PUSH2 0x1649 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1310 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x229E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1524 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1561 JUMPI PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0xE0 DUP8 ADD MLOAD PUSH2 0x153D SWAP2 PUSH2 0x12B9 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO PUSH2 0x155C JUMPI PUSH2 0x1559 DUP2 PUSH2 0x1553 DUP7 DUP6 PUSH2 0x129D JUMP JUMPDEST DUP7 PUSH2 0x16E3 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x1589 JUMP JUMPDEST PUSH2 0x1586 PUSH2 0x157F DUP7 PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0xE0 ADD MLOAD PUSH2 0x12B9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP5 DUP7 PUSH2 0x16E3 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x15A0 PUSH2 0x1596 DUP3 DUP7 PUSH2 0x143A JUMP JUMPDEST DUP7 PUSH1 0x80 ADD MLOAD PUSH2 0x143A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x15D2 JUMPI PUSH2 0x15D2 PUSH2 0x1C1 PUSH1 0x3 DUP5 PUSH2 0x1707 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15EC DUP4 PUSH2 0x15E6 DUP7 DUP6 PUSH2 0xC6C JUMP JUMPDEST SWAP1 PUSH2 0x1724 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0xB07 JUMPI PUSH2 0xB07 PUSH2 0x1C1 PUSH1 0x0 DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14F5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1672 SWAP2 SWAP1 PUSH2 0x21AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x16AF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16B4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x16CA JUMPI POP PUSH2 0x16CA DUP2 PUSH2 0x174E JUMP JUMPDEST ISZERO PUSH2 0x16D6 JUMPI POP POP PUSH2 0x16DF JUMP JUMPDEST PUSH2 0x14EF DUP2 PUSH2 0xA2F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15EC DUP4 PUSH2 0x15E6 PUSH2 0x16F7 DUP3 PUSH1 0x1 PUSH2 0x12B9 JUMP JUMPDEST PUSH2 0x1701 DUP9 DUP8 PUSH2 0xC6C JUMP JUMPDEST SWAP1 PUSH2 0x129D JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9A9 SWAP3 SWAP2 SWAP1 PUSH2 0x22BF JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x173A JUMPI PUSH2 0x173A PUSH2 0x1C1 PUSH1 0x3 DUP6 DUP6 PUSH2 0x14F5 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x1745 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1762 JUMPI POP PUSH1 0x1 PUSH2 0x807 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x807 JUMPI PUSH1 0x0 PUSH2 0x1778 DUP4 PUSH1 0x0 PUSH2 0x1793 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x178D JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x807 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB07 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x17BB JUMPI PUSH2 0x17BB PUSH2 0x1C1 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x17C4 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1310 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x22D6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18A8 PUSH2 0x18D5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xA29 DUP2 PUSH2 0x260A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x190E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1921 PUSH2 0x191C DUP3 PUSH2 0x25B1 JUMP JUMPDEST PUSH2 0x258A JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1942 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x196E JUMPI DUP3 CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x195C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1946 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 DUP2 DUP5 ADD SLT PUSH2 0x198B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1999 PUSH2 0x191C DUP3 PUSH2 0x25B1 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP3 POP PUSH1 0x20 DUP1 DUP5 ADD SWAP1 DUP6 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x196E JUMPI DUP2 CALLDATALOAD DUP9 ADD PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP2 DUP5 DUP15 SUB ADD SLT ISZERO PUSH2 0x19EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19F3 DUP3 PUSH2 0x258A JUMP JUMPDEST DUP4 DUP8 ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 ADD CALLDATALOAD DUP3 DUP10 ADD MSTORE PUSH1 0x60 DUP1 DUP7 ADD CALLDATALOAD DUP3 DUP5 ADD MSTORE SWAP4 DUP6 ADD CALLDATALOAD SWAP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP7 GT ISZERO PUSH2 0x1A28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP8 ADD SWAP7 POP DUP16 PUSH1 0x3F DUP9 ADD SLT PUSH2 0x1A3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 DUP8 ADD CALLDATALOAD SWAP6 POP DUP1 DUP7 GT ISZERO PUSH2 0x1A4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A5F DUP10 DUP6 DUP15 DUP9 ADD AND ADD PUSH2 0x258A JUMP JUMPDEST SWAP4 POP DUP5 DUP5 MSTORE DUP15 DUP3 DUP7 DUP9 ADD ADD GT ISZERO PUSH2 0x1A75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP3 DUP8 ADD DUP11 DUP7 ADD CALLDATACOPY PUSH1 0x0 SWAP5 DUP5 ADD DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE POP SWAP2 DUP3 ADD MSTORE DUP6 MSTORE POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x19AA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AB0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1ABE PUSH2 0x191C DUP3 PUSH2 0x25B1 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH2 0x220 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x1AE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1B41 JUMPI DUP3 DUP5 DUP12 SUB SLT ISZERO PUSH2 0x1AFC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1B06 PUSH1 0x60 PUSH2 0x258A JUMP JUMPDEST PUSH2 0x1B10 DUP12 DUP7 PUSH2 0x1CBA JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1B20 DUP12 PUSH2 0x180 DUP8 ADD PUSH2 0x1DA7 JUMP JUMPDEST DUP2 DUP8 ADD MSTORE PUSH2 0x200 DUP6 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE DUP7 MSTORE SWAP5 DUP5 ADD SWAP5 SWAP3 DUP3 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x1AE6 JUMP JUMPDEST POP POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1B5E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1B6C PUSH2 0x191C DUP3 PUSH2 0x25B1 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH2 0x1E0 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x1B90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x196E JUMPI DUP3 DUP10 SUB DUP3 DUP2 SLT ISZERO PUSH2 0x1BAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 PUSH2 0x1BB6 DUP2 PUSH2 0x258A JUMP JUMPDEST PUSH2 0x140 DUP1 DUP5 SLT ISZERO PUSH2 0x1BC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BCF DUP2 PUSH2 0x258A JUMP JUMPDEST SWAP4 POP PUSH2 0x1BDB DUP14 DUP9 PUSH2 0x18F3 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x1BE9 DUP14 DUP10 DUP10 ADD PUSH2 0x18F3 JUMP JUMPDEST DUP9 DUP6 ADD MSTORE PUSH1 0x40 PUSH2 0x1BFB DUP15 DUP3 DUP11 ADD PUSH2 0x1E0A JUMP JUMPDEST DUP2 DUP7 ADD MSTORE PUSH2 0x1C0B DUP15 DUP6 DUP11 ADD PUSH2 0x1E0A JUMP JUMPDEST DUP5 DUP7 ADD MSTORE PUSH1 0x80 SWAP4 POP PUSH2 0x1C1F DUP15 DUP6 DUP11 ADD PUSH2 0x18F3 JUMP JUMPDEST DUP5 DUP7 ADD MSTORE PUSH1 0xA0 SWAP4 POP PUSH2 0x1C33 DUP15 DUP6 DUP11 ADD PUSH2 0x18F3 JUMP JUMPDEST DUP5 DUP7 ADD MSTORE PUSH1 0xC0 SWAP4 POP PUSH2 0x1C47 DUP15 DUP6 DUP11 ADD PUSH2 0x18F3 JUMP JUMPDEST DUP5 DUP7 ADD MSTORE PUSH1 0xE0 SWAP4 POP DUP4 DUP9 ADD CALLDATALOAD DUP5 DUP7 ADD MSTORE PUSH2 0x100 SWAP4 POP PUSH2 0x1C68 DUP15 DUP6 DUP11 ADD PUSH2 0x1E15 JUMP JUMPDEST DUP5 DUP7 ADD MSTORE PUSH2 0x120 SWAP4 POP DUP4 DUP9 ADD CALLDATALOAD DUP5 DUP7 ADD MSTORE DUP5 DUP4 MSTORE PUSH2 0x1C88 DUP15 DUP4 DUP11 ADD PUSH2 0x1DA7 JUMP JUMPDEST DUP4 DUP11 ADD MSTORE PUSH2 0x1C0 DUP9 ADD CALLDATALOAD SWAP1 DUP4 ADD MSTORE POP DUP8 MSTORE POP POP SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1B93 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0xA29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CCD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1CD6 DUP2 PUSH2 0x258A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1CE3 DUP4 DUP4 PUSH2 0x18F3 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1CF2 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x18F3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1D04 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x1E0A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1D16 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x1E0A JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1D28 DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x1E0A JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x1D3A DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x18F3 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x1D4C DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x18F3 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x1D5E DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x18F3 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x1D72 DUP5 DUP3 DUP6 ADD PUSH2 0x18F3 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x1D90 DUP5 DUP3 DUP6 ADD PUSH2 0x1E15 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DB8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1DC2 PUSH1 0x80 PUSH2 0x258A JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x1DD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1DE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xA29 DUP2 PUSH2 0x262C JUMP JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xA29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E3E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xB07 DUP2 PUSH2 0x260A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E5A JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E72 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E88 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 ADD PUSH1 0x60 DUP2 DUP6 SUB SLT ISZERO PUSH2 0xB07 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EAA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1EC1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP PUSH2 0x120 DUP1 DUP4 DUP8 SUB SLT ISZERO PUSH2 0x1ED7 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1EE0 DUP2 PUSH2 0x258A JUMP JUMPDEST SWAP1 POP PUSH2 0x1EEC DUP7 DUP5 PUSH2 0x1CAB JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1EFB DUP7 PUSH1 0x20 DUP6 ADD PUSH2 0x18F3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1F0D DUP7 PUSH1 0x40 DUP6 ADD PUSH2 0x18F3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1F23 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1F2F DUP8 DUP3 DUP7 ADD PUSH2 0x197A JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1F46 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1F52 DUP8 DUP3 DUP7 ADD PUSH2 0x1AA0 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1F69 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1F75 DUP8 DUP3 DUP7 ADD PUSH2 0x1B4E JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1F8C JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1F98 DUP8 DUP3 DUP7 ADD PUSH2 0x18FE JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 DUP4 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x1FB9 DUP7 DUP4 DUP6 ADD PUSH2 0x18F3 JUMP JUMPDEST SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FDA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x1FE5 DUP2 PUSH2 0x262C JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x1FF6 DUP2 PUSH2 0x262C JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2012 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB07 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2057 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x25D1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2094 DUP3 DUP3 MLOAD PUSH2 0x2025 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x20A6 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0x20B9 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x2189 JUMP JUMPDEST POP PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x20CC PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x2189 JUMP JUMPDEST POP PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x20DF PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x2189 JUMP JUMPDEST POP PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x20F2 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x2105 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x2118 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0x212C DUP3 DUP6 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP POP PUSH2 0x120 DUP2 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP3 ADD MLOAD PUSH2 0x214C DUP3 DUP6 ADD DUP3 PUSH2 0x219F JUMP JUMPDEST POP POP PUSH2 0x160 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH2 0x2165 DUP2 PUSH2 0x25FD JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x21BF DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x25D1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x22AB DUP6 PUSH2 0x25FD JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x22CC DUP5 PUSH2 0x25FD JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x22AB JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP5 LT PUSH2 0x22F0 JUMPI INVALID JUMPDEST DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x15EC PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x203F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F4F524445525F545950450000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x46696C6C51756F74655472616E73666F726D65722F45544845525F5452414E53 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4645525F46414C49454400000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE DUP6 MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x80 PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x23D6 PUSH2 0x100 DUP5 ADD DUP3 PUSH2 0x203F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP5 SWAP1 SWAP6 AND PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x180 DUP2 ADD PUSH2 0xA29 DUP3 DUP5 PUSH2 0x2089 JUMP JUMPDEST PUSH2 0x220 DUP2 ADD PUSH2 0x2425 DUP3 DUP7 PUSH2 0x2089 JUMP JUMPDEST PUSH2 0x2433 PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0x215A JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x200 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP3 ADD SWAP1 POP PUSH2 0x2468 DUP3 DUP7 MLOAD PUSH2 0x2025 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x247A PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x248D PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x2189 JUMP JUMPDEST POP PUSH1 0x60 DUP6 ADD MLOAD PUSH2 0x24A0 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x2189 JUMP JUMPDEST POP PUSH1 0x80 DUP6 ADD MLOAD PUSH2 0x24B3 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH1 0xA0 DUP6 ADD MLOAD PUSH2 0x24C6 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x24D9 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP7 ADD MLOAD PUSH2 0x24F7 DUP3 DUP6 ADD DUP3 PUSH2 0x219F JUMP JUMPDEST POP POP PUSH2 0x120 DUP6 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x2512 PUSH2 0x140 DUP4 ADD DUP6 PUSH2 0x215A JUMP JUMPDEST PUSH2 0x15EC PUSH2 0x1C0 DUP4 ADD DUP5 PUSH2 0x2189 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2554 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x256E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x2583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x25A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x25C7 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25EC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x25D4 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x14EF JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x2607 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2607 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2607 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBF 0xE3 DUP11 SGT 0xD7 0xDE PUSH1 0xD 0xBA SDIV MUL PUSH22 0x392841167F43760555E289253BEE8C22DFB0C7DC6473 PUSH16 0x6C634300060C00330000000000000000 ",
                "sourceMap": "1420:15829:7:-:0;;;5740:187;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1248:10:10;1237:21;;;;;;1294:4;1268:31;;;;-1:-1:-1;;;;;;5864:30:7;;;;;::::1;::::0;5904:16;;::::1;::::0;1420:15829;;389:501:-1;;;572:2;560:9;551:7;547:23;543:32;540:2;;;-1:-1;;578:12;540:2;112:6;106:13;124:56;174:5;124:56;:::i;:::-;764:2;842:22;;298:13;630:97;;-1:-1;316:61;298:13;316:61;:::i;:::-;772:102;;;;534:356;;;;;:::o;1370:163::-;-1:-1;;;;;1304:54;;1452:58;;1442:2;;1524:1;;1514:12;1442:2;1436:97;:::o;:::-;1420:15829:7;;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "1484": [
                        {
                            "length": 32,
                            "start": 2062
                        },
                        {
                            "length": 32,
                            "start": 3269
                        }
                    ],
                    "1487": [
                        {
                            "length": 32,
                            "start": 209
                        },
                        {
                            "length": 32,
                            "start": 616
                        },
                        {
                            "length": 32,
                            "start": 711
                        },
                        {
                            "length": 32,
                            "start": 3810
                        },
                        {
                            "length": 32,
                            "start": 4007
                        },
                        {
                            "length": 32,
                            "start": 4510
                        }
                    ],
                    "2790": [
                        {
                            "length": 32,
                            "start": 2120
                        },
                        {
                            "length": 32,
                            "start": 2166
                        },
                        {
                            "length": 32,
                            "start": 2335
                        }
                    ],
                    "2793": [
                        {
                            "length": 32,
                            "start": 2226
                        },
                        {
                            "length": 32,
                            "start": 2272
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063be7dc09b11610050578063be7dc09b146100aa578063c9353cb5146100b2578063d5f39488146100c757610067565b806352ab413b1461006c578063832b24bb1461008a575b600080fd5b6100746100cf565b60405161008191906121cc565b60405180910390f35b61009d610098366004611e61565b6100f3565b6040516100819190612271565b61007461080c565b6100c56100c0366004611e2d565b610830565b005b61007461091d565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006100fd6117e3565b61010a6040840184612520565b8101906101179190611e99565b9050610121611872565b610144826020015173ffffffffffffffffffffffffffffffffffffffff16610941565b8061016d575061016d826040015173ffffffffffffffffffffffffffffffffffffffff16610941565b156101c6576101c66101c160006101876040880188612520565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061097392505050565b610a2f565b8160c00151518260a00151518360800151518460600151510101146101fa576101fa6101c160016101876040880188612520565b602082015161021f9073ffffffffffffffffffffffffffffffffffffffff1630610a37565b608082015260008251600181111561023357fe5b14156102515761024b8260e001518260800151610b0e565b60e08301525b60a082015151608083015151011561037d576102b67f00000000000000000000000000000000000000000000000000000000000000008360e00151846020015173ffffffffffffffffffffffffffffffffffffffff16610b909092919063ffffffff16565b6080820151511561037d576103773a7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663487b5c206040518163ffffffff1660e01b815260040160206040518083038186803b15801561032b57600080fd5b505afa15801561033f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103639190612001565b63ffffffff16610c6c90919063ffffffff16565b60608201525b47815260005b8260c00151518110156105b95760008351600181111561039f57fe5b14156103be578260e001518260400151106103b9576105b9565b6103d2565b8260e001518260200151106103d2576105b9565b8260c0015181815181106103e257fe5b60200260200101518260c0019060028111156103fa57fe5b9081600281111561040757fe5b8152505060008260a001518360c00151600281111561042257fe5b6003811061042c57fe5b6020020151905061043b6118b4565b60008460c00151600281111561044d57fe5b141561047c576104758560600151838151811061046657fe5b60200260200101518686610c9d565b905061052b565b60018460c00151600281111561048e57fe5b14156104b657610475856080015183815181106104a757fe5b60200260200101518686610e1c565b60028460c0015160028111156104c857fe5b14156104f0576104758560a0015183815181106104e157fe5b6020026020010151868661114b565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290612307565b60405180910390fd5b8051604085015161053b9161129d565b6040850152602080820151908501516105539161129d565b602085015260408101518451610568916112b9565b84528051608085015161057a916112b9565b608085015260a084015160c0850151600281111561059457fe5b6003811061059e57fe5b60200201805160019081019091529290920191506103839050565b506000825160018111156105c957fe5b14156105fe578160e00151816040015110156105f9576105f96101c1836020015183604001518560e001516112d8565b610628565b8160e0015181602001511015610628576106286101c1836040015183602001518560e00151611396565b805115801590610652575061010082015173ffffffffffffffffffffffffffffffffffffffff1615155b156107e15761010082015160009073ffffffffffffffffffffffffffffffffffffffff16600114156107025761068e6040860160208701611e2d565b73ffffffffffffffffffffffffffffffffffffffff1682600001516040516106b5906121c9565b60006040518083038185875af1925050503d80600081146106f2576040519150601f19603f3d011682016040523d82523d6000602084013e6106f7565b606091505b5050809150506107a8565b61010083015173ffffffffffffffffffffffffffffffffffffffff16600214156107335761068e6020860186611e2d565b82610100015173ffffffffffffffffffffffffffffffffffffffff168260000151604051610760906121c9565b60006040518083038185875af1925050503d806000811461079d576040519150601f19603f3d011682016040523d82523d6000602084013e6107a2565b606091505b50909150505b806107df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105229061233e565b505b507f13c9929e000000000000000000000000000000000000000000000000000000009150505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461089a5761089a6101c1337f00000000000000000000000000000000000000000000000000000000000000006113ce565b3073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610904576109046101c1307f0000000000000000000000000000000000000000000000000000000000000000611404565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14919050565b60607f505ff6a4f24a0aa989a95ffe4c8d435d76fb30dea162a3e3022e749867722deb83836040516024016109a99291906122e4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290505b92915050565b805160208201fd5b6000610a4283610941565b15610a65575073ffffffffffffffffffffffffffffffffffffffff811631610a29565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190610ab79085906004016121cc565b60206040518083038186803b158015610acf57600080fd5b505afa158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b079190611e49565b9392505050565b60007f80000000000000000000000000000000000000000000000000000000000000008084161415610b8957610b82670de0b6b3a7640000610b727f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86168261143a565b840281610b7b57fe5b048361143a565b9050610a29565b5090919050565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff85169063dd62ed3e90610be690309087906004016121ed565b60206040518083038186803b158015610bfe57600080fd5b505afa158015610c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c369190611e49565b1015610c6757610c6783837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611449565b505050565b600082610c7b57506000610a29565b82820282848281610c8857fe5b0414610b0757610b076101c1600186866114f5565b610ca56118b4565b6000610cbd8484876020015188604001516000611514565b9050600060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663df2b273760e01b888860200151896040015187604051602401610d21949392919061239b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610daa91906121ad565b600060405180830381855af49150503d8060008114610de5576040519150601f19603f3d011682016040523d82523d6000602084013e610dea565b606091505b50915091508115610e125780806020019051810190610e099190611e49565b60208501528284525b5050509392505050565b610e246118b4565b6000610e8e610e8485858860000151606001516fffffffffffffffffffffffffffffffff168960000151604001516fffffffffffffffffffffffffffffffff168a60000151608001516fffffffffffffffffffffffffffffffff16611514565b866040015161143a565b9050826060015183600001511015610fa55784516040517fdd11d22500000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163dd11d22591610f1591600401612407565b60206040518083038186803b158015610f2d57600080fd5b505afa158015610f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f659190611e49565b90507fb5d7e18f9bad5b40d7cf6bb45142dfbaef62527179ff5c249c6d6cc00176224d81604051610f969190612268565b60405180910390a15050610b07565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6274f66846060015187600001518860200151610ff9866115aa565b6040518563ffffffff1660e01b815260040161101793929190612416565b60408051808303818588803b15801561102f57600080fd5b505af19350505050801561107e575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261107b91810190611fc8565b60015b61108757611143565b8651608001516fffffffffffffffffffffffffffffffff161561111c576111196111006110fb846fffffffffffffffffffffffffffffffff168a60000151606001516fffffffffffffffffffffffffffffffff168b60000151608001516fffffffffffffffffffffffffffffffff166115d6565b6115aa565b6fffffffffffffffffffffffffffffffff8416906115f4565b91505b6fffffffffffffffffffffffffffffffff9182168452166020830152606083015160408301525b509392505050565b6111536118b4565b600061119a610e8485858860000151606001516fffffffffffffffffffffffffffffffff168960000151604001516fffffffffffffffffffffffffffffffff166000611514565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aa77476c866000015187602001516111eb856115aa565b6040518463ffffffff1660e01b815260040161120993929190612454565b6040805180830381600087803b15801561122257600080fd5b505af1925050508015611270575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261126d91810190611fc8565b60015b61127957611143565b6fffffffffffffffffffffffffffffffff9182168452166020830152509392505050565b600082820183811015610b0757610b076101c1600086866114f5565b6000828211156112d2576112d26101c1600285856114f5565b50900390565b60607fadc35ca636cd9f46b974d5bec4df8af095d0ae177ec6043620af588c03bdc6168484846040516024016113109392919061223a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b60607f498df3ae522acadbf67e6aa5fde156a5b74336950cd271175e7336907df120e38484846040516024016113109392919061223a565b60607f5cec653b364cca3880afa73ceff506d0651d11d26abbbe4a56460aa933b21b0883836040516024016109a99291906121ed565b60607fb5cf2cd09307d6c717473134badbb9761c2c97d7565566c2a71eba6cd6fc514d83836040516024016109a99291906121ed565b6000818310610b895781610b07565b606063095ea7b360e01b8383604051602401611466929190612214565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290506114ef8482611649565b50505050565b606063e946c1bb60e01b8484846040516024016113109392919061229e565b6000808651600181111561152457fe5b141561156157604085015160e087015161153d916112b9565b9050811561155c5761155981611553868561129d565b866116e3565b90505b611589565b61158661157f86602001518860e001516112b990919063ffffffff16565b84866116e3565b90505b6115a0611596828661143a565b866080015161143a565b9695505050505050565b60006fffffffffffffffffffffffffffffffff8211156115d2576115d26101c1600384611707565b5090565b60006115ec836115e68685610c6c565b90611724565b949350505050565b60008282016fffffffffffffffffffffffffffffffff8085169082161015610b0757610b076101c16000866fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff166114f5565b600060608373ffffffffffffffffffffffffffffffffffffffff168360405161167291906121ad565b6000604051808303816000865af19150503d80600081146116af576040519150601f19603f3d011682016040523d82523d6000602084013e6116b4565b606091505b50915091508180156116ca57506116ca8161174e565b156116d65750506116df565b6114ef81610a2f565b5050565b60006115ec836115e66116f78260016112b9565b6117018887610c6c565b9061129d565b606063c996af7b60e01b83836040516024016109a99291906122bf565b60008161173a5761173a6101c1600385856114f5565b600082848161174557fe5b04949350505050565b600081516000141561176257506001610807565b6020825110610807576000611778836000611793565b9050806001141561178d576001915050610807565b50919050565b6000610b078383600081602001835110156117bb576117bb6101c160058551856020016117c4565b50016020015190565b6060632800659560e01b848484604051602401611310939291906122d6565b6040805161012081019091528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016118a86118d5565b81526020016000905290565b60405180606001604052806000815260200160008152602001600081525090565b60405180606001604052806003906020820280368337509192915050565b8035610a298161260a565b600082601f83011261190e578081fd5b813561192161191c826125b1565b61258a565b81815291506020808301908481018184028601820187101561194257600080fd5b6000805b8581101561196e5782356003811061195c578283fd5b85529383019391830191600101611946565b50505050505092915050565b6000601f838184011261198b578182fd5b823561199961191c826125b1565b818152925060208084019085810160005b8481101561196e578135880160807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08181848e030112156119ea57600080fd5b6119f38261258a565b8387013581526040808501358289015260608086013582840152938501359367ffffffffffffffff80861115611a2857600080fd5b85870196508f603f880112611a3c57600080fd5b89870135955080861115611a4f57600080fd5b50611a5f89858e8801160161258a565b93508484528e82868801011115611a7557600080fd5b848287018a8601376000948401890194909452509182015285525092820192908201906001016119aa565b600082601f830112611ab0578081fd5b8135611abe61191c826125b1565b818152915060208083019084810161022080850287018301881015611ae257600080fd5b6000805b86811015611b415782848b031215611afc578182fd5b611b06606061258a565b611b108b86611cba565b8152611b208b6101808701611da7565b81870152610200850135604082015286529484019492820192600101611ae6565b5050505050505092915050565b600082601f830112611b5e578081fd5b8135611b6c61191c826125b1565b81815291506020808301908481016101e080850287018301881015611b9057600080fd5b60005b8581101561196e5782890382811215611bab57600080fd5b6060611bb68161258a565b61014080841215611bc657600080fd5b611bcf8161258a565b9350611bdb8d886118f3565b8452611be98d8989016118f3565b888501526040611bfb8e828a01611e0a565b81860152611c0b8e858a01611e0a565b8486015260809350611c1f8e858a016118f3565b8486015260a09350611c338e858a016118f3565b8486015260c09350611c478e858a016118f3565b8486015260e0935083880135848601526101009350611c688e858a01611e15565b8486015261012093508388013584860152848352611c888e838a01611da7565b838a01526101c08801359083015250875250509383019391810191600101611b93565b803560028110610a2957600080fd5b6000610180808385031215611ccd578182fd5b611cd68161258a565b915050611ce383836118f3565b8152611cf283602084016118f3565b6020820152611d048360408401611e0a565b6040820152611d168360608401611e0a565b6060820152611d288360808401611e0a565b6080820152611d3a8360a084016118f3565b60a0820152611d4c8360c084016118f3565b60c0820152611d5e8360e084016118f3565b60e0820152610100611d72848285016118f3565b908201526101208281013590820152610140611d9084828501611e15565b818301525061016080830135818301525092915050565b600060808284031215611db8578081fd5b611dc2608061258a565b9050813560048110611dd357600080fd5b8152602082013560ff81168114611de957600080fd5b80602083015250604082013560408201526060820135606082015292915050565b8035610a298161262c565b803567ffffffffffffffff81168114610a2957600080fd5b600060208284031215611e3e578081fd5b8135610b078161260a565b600060208284031215611e5a578081fd5b5051919050565b600060208284031215611e72578081fd5b813567ffffffffffffffff811115611e88578182fd5b820160608185031215610b07578182fd5b600060208284031215611eaa578081fd5b813567ffffffffffffffff80821115611ec1578283fd5b8184019150610120808387031215611ed7578384fd5b611ee08161258a565b9050611eec8684611cab565b8152611efb86602085016118f3565b6020820152611f0d86604085016118f3565b6040820152606083013582811115611f23578485fd5b611f2f8782860161197a565b606083015250608083013582811115611f46578485fd5b611f5287828601611aa0565b60808301525060a083013582811115611f69578485fd5b611f7587828601611b4e565b60a08301525060c083013582811115611f8c578485fd5b611f98878286016118fe565b60c08301525060e083013560e08201526101009150611fb9868385016118f3565b91810191909152949350505050565b60008060408385031215611fda578081fd5b8251611fe58161262c565b6020840151909250611ff68161262c565b809150509250929050565b600060208284031215612012578081fd5b815163ffffffff81168114610b07578182fd5b73ffffffffffffffffffffffffffffffffffffffff169052565b600081518084526120578160208601602086016125d1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b612094828251612025565b60208101516120a66020840182612025565b5060408101516120b96040840182612189565b5060608101516120cc6060840182612189565b5060808101516120df6080840182612189565b5060a08101516120f260a0840182612025565b5060c081015161210560c0840182612025565b5060e081015161211860e0840182612025565b506101008082015161212c82850182612025565b505061012081810151908301526101408082015161214c8285018261219f565b505061016090810151910152565b8051612165816125fd565b825260208181015160ff169083015260408082015190830152606090810151910152565b6fffffffffffffffffffffffffffffffff169052565b67ffffffffffffffff169052565b600082516121bf8184602087016125d1565b9190910192915050565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b90815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b606081016122ab856125fd565b938152602081019290925260409091015290565b604081016122cc846125fd565b9281526020015290565b60608101600885106122ab57fe5b6000600284106122f057fe5b838252604060208301526115ec604083018461203f565b60208082526012908201527f494e56414c49445f4f524445525f545950450000000000000000000000000000604082015260600190565b6020808252602a908201527f46696c6c51756f74655472616e73666f726d65722f45544845525f5452414e5360408201527f4645525f46414c49454400000000000000000000000000000000000000000000606082015260800190565b60006080825285516080830152602086015160a0830152604086015160c08301526060860151608060e08401526123d661010084018261203f565b73ffffffffffffffffffffffffffffffffffffffff9687166020850152949095166040830152506060015292915050565b6101808101610a298284612089565b61022081016124258286612089565b61243361018083018561215a565b6fffffffffffffffffffffffffffffffff8316610200830152949350505050565b60006101e082019050612468828651612025565b602085015161247a6020840182612025565b50604085015161248d6040840182612189565b5060608501516124a06060840182612189565b5060808501516124b36080840182612025565b5060a08501516124c660a0840182612025565b5060c08501516124d960c0840182612025565b5060e085015160e0830152610100808601516124f78285018261219f565b5050610120858101519083015261251261014083018561215a565b6115ec6101c0830184612189565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612554578283fd5b83018035915067ffffffffffffffff82111561256e578283fd5b60200191503681900382131561258357600080fd5b9250929050565b60405181810167ffffffffffffffff811182821017156125a957600080fd5b604052919050565b600067ffffffffffffffff8211156125c7578081fd5b5060209081020190565b60005b838110156125ec5781810151838201526020016125d4565b838111156114ef5750506000910152565b6004811061260757fe5b50565b73ffffffffffffffffffffffffffffffffffffffff8116811461260757600080fd5b6fffffffffffffffffffffffffffffffff8116811461260757600080fdfea2646970667358221220bfe38a13d7de600dba050275392841167f43760555e289253bee8c22dfb0c7dc64736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBE7DC09B GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xBE7DC09B EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0xC9353CB5 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xD5F39488 EQ PUSH2 0xC7 JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x52AB413B EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x832B24BB EQ PUSH2 0x8A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74 PUSH2 0xCF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0x21CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9D PUSH2 0x98 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E61 JUMP JUMPDEST PUSH2 0xF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x81 SWAP2 SWAP1 PUSH2 0x2271 JUMP JUMPDEST PUSH2 0x74 PUSH2 0x80C JUMP JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E2D JUMP JUMPDEST PUSH2 0x830 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x74 PUSH2 0x91D JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFD PUSH2 0x17E3 JUMP JUMPDEST PUSH2 0x10A PUSH1 0x40 DUP5 ADD DUP5 PUSH2 0x2520 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x117 SWAP2 SWAP1 PUSH2 0x1E99 JUMP JUMPDEST SWAP1 POP PUSH2 0x121 PUSH2 0x1872 JUMP JUMPDEST PUSH2 0x144 DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x941 JUMP JUMPDEST DUP1 PUSH2 0x16D JUMPI POP PUSH2 0x16D DUP3 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x941 JUMP JUMPDEST ISZERO PUSH2 0x1C6 JUMPI PUSH2 0x1C6 PUSH2 0x1C1 PUSH1 0x0 PUSH2 0x187 PUSH1 0x40 DUP9 ADD DUP9 PUSH2 0x2520 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x973 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xA2F JUMP JUMPDEST DUP2 PUSH1 0xC0 ADD MLOAD MLOAD DUP3 PUSH1 0xA0 ADD MLOAD MLOAD DUP4 PUSH1 0x80 ADD MLOAD MLOAD DUP5 PUSH1 0x60 ADD MLOAD MLOAD ADD ADD EQ PUSH2 0x1FA JUMPI PUSH2 0x1FA PUSH2 0x1C1 PUSH1 0x1 PUSH2 0x187 PUSH1 0x40 DUP9 ADD DUP9 PUSH2 0x2520 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x21F SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH2 0xA37 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x233 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x251 JUMPI PUSH2 0x24B DUP3 PUSH1 0xE0 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD PUSH2 0xB0E JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD MLOAD PUSH1 0x80 DUP4 ADD MLOAD MLOAD ADD ISZERO PUSH2 0x37D JUMPI PUSH2 0x2B6 PUSH32 0x0 DUP4 PUSH1 0xE0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB90 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD MLOAD ISZERO PUSH2 0x37D JUMPI PUSH2 0x377 GASPRICE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x487B5C20 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x33F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x363 SWAP2 SWAP1 PUSH2 0x2001 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND PUSH2 0xC6C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE JUMPDEST SELFBALANCE DUP2 MSTORE PUSH1 0x0 JUMPDEST DUP3 PUSH1 0xC0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x5B9 JUMPI PUSH1 0x0 DUP4 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x39F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x3BE JUMPI DUP3 PUSH1 0xE0 ADD MLOAD DUP3 PUSH1 0x40 ADD MLOAD LT PUSH2 0x3B9 JUMPI PUSH2 0x5B9 JUMP JUMPDEST PUSH2 0x3D2 JUMP JUMPDEST DUP3 PUSH1 0xE0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD LT PUSH2 0x3D2 JUMPI PUSH2 0x5B9 JUMP JUMPDEST DUP3 PUSH1 0xC0 ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3E2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0xC0 ADD SWAP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x3FA JUMPI INVALID JUMPDEST SWAP1 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x407 JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP PUSH1 0x0 DUP3 PUSH1 0xA0 ADD MLOAD DUP4 PUSH1 0xC0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x422 JUMPI INVALID JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x42C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP1 POP PUSH2 0x43B PUSH2 0x18B4 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0xC0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x44D JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x47C JUMPI PUSH2 0x475 DUP6 PUSH1 0x60 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x466 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP7 PUSH2 0xC9D JUMP JUMPDEST SWAP1 POP PUSH2 0x52B JUMP JUMPDEST PUSH1 0x1 DUP5 PUSH1 0xC0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x48E JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4B6 JUMPI PUSH2 0x475 DUP6 PUSH1 0x80 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4A7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP7 PUSH2 0xE1C JUMP JUMPDEST PUSH1 0x2 DUP5 PUSH1 0xC0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4C8 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4F0 JUMPI PUSH2 0x475 DUP6 PUSH1 0xA0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4E1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP7 PUSH2 0x114B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x2307 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x53B SWAP2 PUSH2 0x129D JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP6 ADD MLOAD PUSH2 0x553 SWAP2 PUSH2 0x129D JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD DUP5 MLOAD PUSH2 0x568 SWAP2 PUSH2 0x12B9 JUMP JUMPDEST DUP5 MSTORE DUP1 MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH2 0x57A SWAP2 PUSH2 0x12B9 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xC0 DUP6 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x594 JUMPI INVALID JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x59E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD DUP1 MLOAD PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP3 SWAP1 SWAP3 ADD SWAP2 POP PUSH2 0x383 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x0 DUP3 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5C9 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x5FE JUMPI DUP2 PUSH1 0xE0 ADD MLOAD DUP2 PUSH1 0x40 ADD MLOAD LT ISZERO PUSH2 0x5F9 JUMPI PUSH2 0x5F9 PUSH2 0x1C1 DUP4 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0xE0 ADD MLOAD PUSH2 0x12D8 JUMP JUMPDEST PUSH2 0x628 JUMP JUMPDEST DUP2 PUSH1 0xE0 ADD MLOAD DUP2 PUSH1 0x20 ADD MLOAD LT ISZERO PUSH2 0x628 JUMPI PUSH2 0x628 PUSH2 0x1C1 DUP4 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0xE0 ADD MLOAD PUSH2 0x1396 JUMP JUMPDEST DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x652 JUMPI POP PUSH2 0x100 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x7E1 JUMPI PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ ISZERO PUSH2 0x702 JUMPI PUSH2 0x68E PUSH1 0x40 DUP7 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1E2D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x6B5 SWAP1 PUSH2 0x21C9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6F2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP DUP1 SWAP2 POP POP PUSH2 0x7A8 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 EQ ISZERO PUSH2 0x733 JUMPI PUSH2 0x68E PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x1E2D JUMP JUMPDEST DUP3 PUSH2 0x100 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x760 SWAP1 PUSH2 0x21C9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x79D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7A2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP2 POP POP JUMPDEST DUP1 PUSH2 0x7DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x233E JUMP JUMPDEST POP JUMPDEST POP PUSH32 0x13C9929E00000000000000000000000000000000000000000000000000000000 SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x89A JUMPI PUSH2 0x89A PUSH2 0x1C1 CALLER PUSH32 0x0 PUSH2 0x13CE JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x904 JUMPI PUSH2 0x904 PUSH2 0x1C1 ADDRESS PUSH32 0x0 PUSH2 0x1404 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFDESTRUCT JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x505FF6A4F24A0AA989A95FFE4C8D435D76FB30DEA162A3E3022E749867722DEB DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9A9 SWAP3 SWAP2 SWAP1 PUSH2 0x22E4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA42 DUP4 PUSH2 0x941 JUMP JUMPDEST ISZERO PUSH2 0xA65 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND BALANCE PUSH2 0xA29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xAB7 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x21CC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xACF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB07 SWAP2 SWAP1 PUSH2 0x1E49 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP1 DUP5 AND EQ ISZERO PUSH2 0xB89 JUMPI PUSH2 0xB82 PUSH8 0xDE0B6B3A7640000 PUSH2 0xB72 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 PUSH2 0x143A JUMP JUMPDEST DUP5 MUL DUP2 PUSH2 0xB7B JUMPI INVALID JUMPDEST DIV DUP4 PUSH2 0x143A JUMP JUMPDEST SWAP1 POP PUSH2 0xA29 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0xBE6 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x21ED JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC12 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC36 SWAP2 SWAP1 PUSH2 0x1E49 JUMP JUMPDEST LT ISZERO PUSH2 0xC67 JUMPI PUSH2 0xC67 DUP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x1449 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC7B JUMPI POP PUSH1 0x0 PUSH2 0xA29 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xC88 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xB07 JUMPI PUSH2 0xB07 PUSH2 0x1C1 PUSH1 0x1 DUP7 DUP7 PUSH2 0x14F5 JUMP JUMPDEST PUSH2 0xCA5 PUSH2 0x18B4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCBD DUP5 DUP5 DUP8 PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD PUSH1 0x0 PUSH2 0x1514 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDF2B2737 PUSH1 0xE0 SHL DUP9 DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xD21 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x239B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0xDAA SWAP2 SWAP1 PUSH2 0x21AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xDE5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDEA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0xE12 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xE09 SWAP2 SWAP1 PUSH2 0x1E49 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE DUP3 DUP5 MSTORE JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xE24 PUSH2 0x18B4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE8E PUSH2 0xE84 DUP6 DUP6 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1514 JUMP JUMPDEST DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x143A JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD LT ISZERO PUSH2 0xFA5 JUMPI DUP5 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD11D22500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP2 PUSH4 0xDD11D225 SWAP2 PUSH2 0xF15 SWAP2 PUSH1 0x4 ADD PUSH2 0x2407 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF41 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF65 SWAP2 SWAP1 PUSH2 0x1E49 JUMP JUMPDEST SWAP1 POP PUSH32 0xB5D7E18F9BAD5B40D7CF6BB45142DFBAEF62527179FF5C249C6D6CC00176224D DUP2 PUSH1 0x40 MLOAD PUSH2 0xF96 SWAP2 SWAP1 PUSH2 0x2268 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH2 0xB07 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF6274F66 DUP5 PUSH1 0x60 ADD MLOAD DUP8 PUSH1 0x0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0xFF9 DUP7 PUSH2 0x15AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1017 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2416 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x102F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x107E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x107B SWAP2 DUP2 ADD SWAP1 PUSH2 0x1FC8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1087 JUMPI PUSH2 0x1143 JUMP JUMPDEST DUP7 MLOAD PUSH1 0x80 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x111C JUMPI PUSH2 0x1119 PUSH2 0x1100 PUSH2 0x10FB DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH1 0x0 ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15D6 JUMP JUMPDEST PUSH2 0x15AA JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH2 0x15F4 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND DUP5 MSTORE AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1153 PUSH2 0x18B4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x119A PUSH2 0xE84 DUP6 DUP6 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH2 0x1514 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAA77476C DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x11EB DUP6 PUSH2 0x15AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1209 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2454 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1270 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x126D SWAP2 DUP2 ADD SWAP1 PUSH2 0x1FC8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1279 JUMPI PUSH2 0x1143 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND DUP5 MSTORE AND PUSH1 0x20 DUP4 ADD MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xB07 JUMPI PUSH2 0xB07 PUSH2 0x1C1 PUSH1 0x0 DUP7 DUP7 PUSH2 0x14F5 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x12D2 JUMPI PUSH2 0x12D2 PUSH2 0x1C1 PUSH1 0x2 DUP6 DUP6 PUSH2 0x14F5 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xADC35CA636CD9F46B974D5BEC4DF8AF095D0AE177EC6043620AF588C03BDC616 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1310 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x223A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x498DF3AE522ACADBF67E6AA5FDE156A5B74336950CD271175E7336907DF120E3 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1310 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x223A JUMP JUMPDEST PUSH1 0x60 PUSH32 0x5CEC653B364CCA3880AFA73CEFF506D0651D11D26ABBBE4A56460AA933B21B08 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9A9 SWAP3 SWAP2 SWAP1 PUSH2 0x21ED JUMP JUMPDEST PUSH1 0x60 PUSH32 0xB5CF2CD09307D6C717473134BADBB9761C2C97D7565566C2A71EBA6CD6FC514D DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9A9 SWAP3 SWAP2 SWAP1 PUSH2 0x21ED JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xB89 JUMPI DUP2 PUSH2 0xB07 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1466 SWAP3 SWAP2 SWAP1 PUSH2 0x2214 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x14EF DUP5 DUP3 PUSH2 0x1649 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1310 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x229E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1524 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1561 JUMPI PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0xE0 DUP8 ADD MLOAD PUSH2 0x153D SWAP2 PUSH2 0x12B9 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO PUSH2 0x155C JUMPI PUSH2 0x1559 DUP2 PUSH2 0x1553 DUP7 DUP6 PUSH2 0x129D JUMP JUMPDEST DUP7 PUSH2 0x16E3 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x1589 JUMP JUMPDEST PUSH2 0x1586 PUSH2 0x157F DUP7 PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0xE0 ADD MLOAD PUSH2 0x12B9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP5 DUP7 PUSH2 0x16E3 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x15A0 PUSH2 0x1596 DUP3 DUP7 PUSH2 0x143A JUMP JUMPDEST DUP7 PUSH1 0x80 ADD MLOAD PUSH2 0x143A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x15D2 JUMPI PUSH2 0x15D2 PUSH2 0x1C1 PUSH1 0x3 DUP5 PUSH2 0x1707 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15EC DUP4 PUSH2 0x15E6 DUP7 DUP6 PUSH2 0xC6C JUMP JUMPDEST SWAP1 PUSH2 0x1724 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0xB07 JUMPI PUSH2 0xB07 PUSH2 0x1C1 PUSH1 0x0 DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14F5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1672 SWAP2 SWAP1 PUSH2 0x21AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x16AF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16B4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x16CA JUMPI POP PUSH2 0x16CA DUP2 PUSH2 0x174E JUMP JUMPDEST ISZERO PUSH2 0x16D6 JUMPI POP POP PUSH2 0x16DF JUMP JUMPDEST PUSH2 0x14EF DUP2 PUSH2 0xA2F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15EC DUP4 PUSH2 0x15E6 PUSH2 0x16F7 DUP3 PUSH1 0x1 PUSH2 0x12B9 JUMP JUMPDEST PUSH2 0x1701 DUP9 DUP8 PUSH2 0xC6C JUMP JUMPDEST SWAP1 PUSH2 0x129D JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9A9 SWAP3 SWAP2 SWAP1 PUSH2 0x22BF JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x173A JUMPI PUSH2 0x173A PUSH2 0x1C1 PUSH1 0x3 DUP6 DUP6 PUSH2 0x14F5 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x1745 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1762 JUMPI POP PUSH1 0x1 PUSH2 0x807 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x807 JUMPI PUSH1 0x0 PUSH2 0x1778 DUP4 PUSH1 0x0 PUSH2 0x1793 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x178D JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x807 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB07 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x17BB JUMPI PUSH2 0x17BB PUSH2 0x1C1 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x17C4 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1310 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x22D6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18A8 PUSH2 0x18D5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xA29 DUP2 PUSH2 0x260A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x190E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1921 PUSH2 0x191C DUP3 PUSH2 0x25B1 JUMP JUMPDEST PUSH2 0x258A JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1942 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x196E JUMPI DUP3 CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x195C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1946 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 DUP2 DUP5 ADD SLT PUSH2 0x198B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1999 PUSH2 0x191C DUP3 PUSH2 0x25B1 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP3 POP PUSH1 0x20 DUP1 DUP5 ADD SWAP1 DUP6 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x196E JUMPI DUP2 CALLDATALOAD DUP9 ADD PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP2 DUP5 DUP15 SUB ADD SLT ISZERO PUSH2 0x19EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19F3 DUP3 PUSH2 0x258A JUMP JUMPDEST DUP4 DUP8 ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 ADD CALLDATALOAD DUP3 DUP10 ADD MSTORE PUSH1 0x60 DUP1 DUP7 ADD CALLDATALOAD DUP3 DUP5 ADD MSTORE SWAP4 DUP6 ADD CALLDATALOAD SWAP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP7 GT ISZERO PUSH2 0x1A28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP8 ADD SWAP7 POP DUP16 PUSH1 0x3F DUP9 ADD SLT PUSH2 0x1A3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 DUP8 ADD CALLDATALOAD SWAP6 POP DUP1 DUP7 GT ISZERO PUSH2 0x1A4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A5F DUP10 DUP6 DUP15 DUP9 ADD AND ADD PUSH2 0x258A JUMP JUMPDEST SWAP4 POP DUP5 DUP5 MSTORE DUP15 DUP3 DUP7 DUP9 ADD ADD GT ISZERO PUSH2 0x1A75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP3 DUP8 ADD DUP11 DUP7 ADD CALLDATACOPY PUSH1 0x0 SWAP5 DUP5 ADD DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE POP SWAP2 DUP3 ADD MSTORE DUP6 MSTORE POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x19AA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AB0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1ABE PUSH2 0x191C DUP3 PUSH2 0x25B1 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH2 0x220 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x1AE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1B41 JUMPI DUP3 DUP5 DUP12 SUB SLT ISZERO PUSH2 0x1AFC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1B06 PUSH1 0x60 PUSH2 0x258A JUMP JUMPDEST PUSH2 0x1B10 DUP12 DUP7 PUSH2 0x1CBA JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1B20 DUP12 PUSH2 0x180 DUP8 ADD PUSH2 0x1DA7 JUMP JUMPDEST DUP2 DUP8 ADD MSTORE PUSH2 0x200 DUP6 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE DUP7 MSTORE SWAP5 DUP5 ADD SWAP5 SWAP3 DUP3 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x1AE6 JUMP JUMPDEST POP POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1B5E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1B6C PUSH2 0x191C DUP3 PUSH2 0x25B1 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH2 0x1E0 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x1B90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x196E JUMPI DUP3 DUP10 SUB DUP3 DUP2 SLT ISZERO PUSH2 0x1BAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 PUSH2 0x1BB6 DUP2 PUSH2 0x258A JUMP JUMPDEST PUSH2 0x140 DUP1 DUP5 SLT ISZERO PUSH2 0x1BC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BCF DUP2 PUSH2 0x258A JUMP JUMPDEST SWAP4 POP PUSH2 0x1BDB DUP14 DUP9 PUSH2 0x18F3 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x1BE9 DUP14 DUP10 DUP10 ADD PUSH2 0x18F3 JUMP JUMPDEST DUP9 DUP6 ADD MSTORE PUSH1 0x40 PUSH2 0x1BFB DUP15 DUP3 DUP11 ADD PUSH2 0x1E0A JUMP JUMPDEST DUP2 DUP7 ADD MSTORE PUSH2 0x1C0B DUP15 DUP6 DUP11 ADD PUSH2 0x1E0A JUMP JUMPDEST DUP5 DUP7 ADD MSTORE PUSH1 0x80 SWAP4 POP PUSH2 0x1C1F DUP15 DUP6 DUP11 ADD PUSH2 0x18F3 JUMP JUMPDEST DUP5 DUP7 ADD MSTORE PUSH1 0xA0 SWAP4 POP PUSH2 0x1C33 DUP15 DUP6 DUP11 ADD PUSH2 0x18F3 JUMP JUMPDEST DUP5 DUP7 ADD MSTORE PUSH1 0xC0 SWAP4 POP PUSH2 0x1C47 DUP15 DUP6 DUP11 ADD PUSH2 0x18F3 JUMP JUMPDEST DUP5 DUP7 ADD MSTORE PUSH1 0xE0 SWAP4 POP DUP4 DUP9 ADD CALLDATALOAD DUP5 DUP7 ADD MSTORE PUSH2 0x100 SWAP4 POP PUSH2 0x1C68 DUP15 DUP6 DUP11 ADD PUSH2 0x1E15 JUMP JUMPDEST DUP5 DUP7 ADD MSTORE PUSH2 0x120 SWAP4 POP DUP4 DUP9 ADD CALLDATALOAD DUP5 DUP7 ADD MSTORE DUP5 DUP4 MSTORE PUSH2 0x1C88 DUP15 DUP4 DUP11 ADD PUSH2 0x1DA7 JUMP JUMPDEST DUP4 DUP11 ADD MSTORE PUSH2 0x1C0 DUP9 ADD CALLDATALOAD SWAP1 DUP4 ADD MSTORE POP DUP8 MSTORE POP POP SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1B93 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0xA29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CCD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1CD6 DUP2 PUSH2 0x258A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1CE3 DUP4 DUP4 PUSH2 0x18F3 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1CF2 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x18F3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1D04 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x1E0A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1D16 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x1E0A JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1D28 DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x1E0A JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x1D3A DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x18F3 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x1D4C DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x18F3 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x1D5E DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x18F3 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x1D72 DUP5 DUP3 DUP6 ADD PUSH2 0x18F3 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x1D90 DUP5 DUP3 DUP6 ADD PUSH2 0x1E15 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DB8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1DC2 PUSH1 0x80 PUSH2 0x258A JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x1DD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1DE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xA29 DUP2 PUSH2 0x262C JUMP JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xA29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E3E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xB07 DUP2 PUSH2 0x260A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E5A JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E72 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E88 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 ADD PUSH1 0x60 DUP2 DUP6 SUB SLT ISZERO PUSH2 0xB07 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EAA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1EC1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP PUSH2 0x120 DUP1 DUP4 DUP8 SUB SLT ISZERO PUSH2 0x1ED7 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1EE0 DUP2 PUSH2 0x258A JUMP JUMPDEST SWAP1 POP PUSH2 0x1EEC DUP7 DUP5 PUSH2 0x1CAB JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1EFB DUP7 PUSH1 0x20 DUP6 ADD PUSH2 0x18F3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1F0D DUP7 PUSH1 0x40 DUP6 ADD PUSH2 0x18F3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1F23 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1F2F DUP8 DUP3 DUP7 ADD PUSH2 0x197A JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1F46 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1F52 DUP8 DUP3 DUP7 ADD PUSH2 0x1AA0 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1F69 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1F75 DUP8 DUP3 DUP7 ADD PUSH2 0x1B4E JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1F8C JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1F98 DUP8 DUP3 DUP7 ADD PUSH2 0x18FE JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 DUP4 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x1FB9 DUP7 DUP4 DUP6 ADD PUSH2 0x18F3 JUMP JUMPDEST SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FDA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x1FE5 DUP2 PUSH2 0x262C JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x1FF6 DUP2 PUSH2 0x262C JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2012 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB07 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2057 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x25D1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2094 DUP3 DUP3 MLOAD PUSH2 0x2025 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x20A6 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0x20B9 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x2189 JUMP JUMPDEST POP PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x20CC PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x2189 JUMP JUMPDEST POP PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x20DF PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x2189 JUMP JUMPDEST POP PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x20F2 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x2105 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x2118 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0x212C DUP3 DUP6 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP POP PUSH2 0x120 DUP2 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP3 ADD MLOAD PUSH2 0x214C DUP3 DUP6 ADD DUP3 PUSH2 0x219F JUMP JUMPDEST POP POP PUSH2 0x160 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH2 0x2165 DUP2 PUSH2 0x25FD JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x21BF DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x25D1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x22AB DUP6 PUSH2 0x25FD JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x22CC DUP5 PUSH2 0x25FD JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x22AB JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP5 LT PUSH2 0x22F0 JUMPI INVALID JUMPDEST DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x15EC PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x203F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F4F524445525F545950450000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x46696C6C51756F74655472616E73666F726D65722F45544845525F5452414E53 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4645525F46414C49454400000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE DUP6 MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x80 PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x23D6 PUSH2 0x100 DUP5 ADD DUP3 PUSH2 0x203F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP5 SWAP1 SWAP6 AND PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x180 DUP2 ADD PUSH2 0xA29 DUP3 DUP5 PUSH2 0x2089 JUMP JUMPDEST PUSH2 0x220 DUP2 ADD PUSH2 0x2425 DUP3 DUP7 PUSH2 0x2089 JUMP JUMPDEST PUSH2 0x2433 PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0x215A JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x200 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP3 ADD SWAP1 POP PUSH2 0x2468 DUP3 DUP7 MLOAD PUSH2 0x2025 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x247A PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x248D PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x2189 JUMP JUMPDEST POP PUSH1 0x60 DUP6 ADD MLOAD PUSH2 0x24A0 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x2189 JUMP JUMPDEST POP PUSH1 0x80 DUP6 ADD MLOAD PUSH2 0x24B3 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH1 0xA0 DUP6 ADD MLOAD PUSH2 0x24C6 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x24D9 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x2025 JUMP JUMPDEST POP PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP7 ADD MLOAD PUSH2 0x24F7 DUP3 DUP6 ADD DUP3 PUSH2 0x219F JUMP JUMPDEST POP POP PUSH2 0x120 DUP6 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x2512 PUSH2 0x140 DUP4 ADD DUP6 PUSH2 0x215A JUMP JUMPDEST PUSH2 0x15EC PUSH2 0x1C0 DUP4 ADD DUP5 PUSH2 0x2189 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2554 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x256E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x2583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x25A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x25C7 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25EC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x25D4 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x14EF JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x2607 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2607 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2607 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBF 0xE3 DUP11 SGT 0xD7 0xDE PUSH1 0xD 0xBA SDIV MUL PUSH22 0x392841167F43760555E289253BEE8C22DFB0C7DC6473 PUSH16 0x6C634300060C00330000000000000000 ",
                "sourceMap": "1420:15829:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5543:44;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6321:5107;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5449:45::-;;;:::i;1543:600:10:-;;;;;;:::i;:::-;;:::i;:::-;;1031:33;;;:::i;5543:44:7:-;;;:::o;6321:5107::-;6426:17;6459:25;;:::i;:::-;6498:12;;;;:7;:12;:::i;:::-;6487:41;;;;;;;:::i;:::-;6459:69;;6538:22;;:::i;:::-;6608:27;:4;:14;;;:25;;;:27::i;:::-;:57;;;;6639:26;:4;:13;;;:24;;;:26::i;:::-;6604:285;;;6681:197;:187;6752:72;6842:12;;;;:7;:12;:::i;:::-;6681:187;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6681:53:7;;-1:-1:-1;;;6681:187:7:i;:::-;:195;:197::i;:::-;7013:4;:17;;;:24;6988:4;:14;;;:21;6946:4;:16;;;:23;6903:4;:17;;;:24;:66;:106;:134;6899:377;;7062:203;:193;7133:78;7229:12;;;;:7;:12;:::i;7062:203::-;7321:14;;;;:47;;:32;;7362:4;7321:32;:47::i;:::-;7286:32;;;:82;7395:9;7382;;:22;;;;;;;;;7378:142;;;7438:71;7459:4;:15;;;7476:5;:32;;;7438:20;:71::i;:::-;7420:15;;;:89;7378:142;7664:14;;;;:21;7638:16;;;;:23;:47;:52;7634:399;;7706:63;7744:6;7753:4;:15;;;7706:4;:14;;;:29;;;;:63;;;;;:::i;:::-;7856:16;;;;:23;:28;7852:171;;7924:84;7996:11;7932:6;:31;;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7924:42;;:71;;:84;;;;:::i;:::-;7904:17;;;:104;7852:171;8064:21;8043:42;;:18;8124:1728;8148:4;:17;;;:24;8144:1;:28;8124:1728;;;8257:9;8244;;:22;;;;;;;;;8240:277;;;8348:4;:15;;;8328:5;:16;;;:35;8324:51;;8367:5;;8324:51;8240:277;;;8476:4;:15;;;8454:5;:18;;;:37;8450:53;;8495:5;;8450:53;8566:4;:17;;;8584:1;8566:20;;;;;;;;;;;;;;8531:5;:22;;:56;;;;;;;;;;;;;;;;;;;;;;;8601:18;8622:5;:20;;;8651:5;:22;;;8643:31;;;;;;;;8622:53;;;;;;;;;;;8601:74;;8720:31;;:::i;:::-;8795:16;8769:5;:22;;;:42;;;;;;;;;8765:520;;;8841:60;8858:4;:17;;;8876:10;8858:29;;;;;;;;;;;;;;8889:4;8895:5;8841:16;:60::i;:::-;8831:70;;8765:520;;;8952:15;8926:5;:22;;;:41;;;;;;;;;8922:363;;;8997:58;9013:4;:16;;;9030:10;9013:28;;;;;;;;;;;;;;9043:4;9049:5;8997:15;:58::i;8922:363::-;9106:13;9080:5;:22;;;:39;;;;;;;;;9076:209;;;9149:54;9163:4;:14;;;9178:10;9163:26;;;;;;;;;;;;;;9191:4;9197:5;9149:13;:54::i;9076:209::-;9242:28;;;;;;;;;;:::i;:::-;;;;;;;;9076:209;9394:28;;9352:16;;;;:71;;:41;:71::i;:::-;9333:16;;;:90;9502:30;;;;;9458:18;;;;:75;;:43;:75::i;:::-;9437:18;;;:96;9612:23;;;;9568:18;;:68;;:43;:68::i;:::-;9547:89;;9743:28;;9685:32;;;;:87;;:57;:87::i;:::-;9650:32;;;:122;9786:20;;;;9815:22;;;;9807:31;;;;;;;;9786:53;;;;;;;;;;:55;;;;;;;;;8174:3;;;;;-1:-1:-1;8124:1728:7;;-1:-1:-1;8124:1728:7;;-1:-1:-1;9917:9:7;9904;;:22;;;;;;;;;9900:779;;;9999:4;:15;;;9980:5;:16;;;:34;9976:314;;;10034:241;:231;10145:4;:14;;;10186:5;:16;;;10228:4;:15;;;10034:77;:231::i;:241::-;9900:779;;;10378:4;:15;;;10357:5;:18;;;:36;10353:316;;;10413:241;:231;10523:4;:13;;;10563:5;:18;;;10607:4;:15;;;10413:76;:231::i;:241::-;10734:18;;:22;;;;:59;;-1:-1:-1;10760:19:7;;;;:33;;;;10734:59;10730:636;;;10847:19;;;;10809:20;;10847:44;;5215:1;10847:44;10843:429;;;10932:13;;;;;;;;:::i;:::-;:18;;10958:5;:18;;;10932:49;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10911:70;;;;;10843:429;;;11006:19;;;;:45;;5401:1;11006:45;11002:270;;;11092:14;;;;:7;:14;:::i;11002:270::-;11202:4;:19;;;:24;;11234:5;:18;;;11202:55;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11181:76:7;;-1:-1:-1;;11002:270:7;11293:15;11285:70;;;;;;;;;;;;:::i;:::-;10730:636;;-1:-1:-1;11382:39:7;;-1:-1:-1;;6321:5107:7;;;;:::o;5449:45::-;;;:::o;1543:600:10:-;1681:10;:22;1695:8;1681:22;;1677:174;;1719:121;:94;1792:10;1804:8;1719:72;:94::i;:121::-;1918:4;1910:32;1927:15;1910:32;;1906:195;;1958:132;:105;2040:4;2047:15;1958:73;:105::i;:132::-;2123:12;2110:26;;;1031:33;;;:::o;2012:164:9:-;2134:35;;;984:42;2134:35;2012:164;;;:::o;3278:370:2:-;3451:12;3529:51;3595:9;3618:13;3486:155;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3278:370:2;;;;;:::o;1531:170:19:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;2420:260:9;2531:20;2571:17;2582:5;2571:10;:17::i;:::-;2567:68;;;-1:-1:-1;2611:13:9;;;;2604:20;;2567:68;2651:22;;;;;:15;;;;;;:22;;2667:5;;2651:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2644:29;2420:260;-1:-1:-1;;;2420:260:9:o;16682:565:7:-;16794:18;4905:8;;16833:9;:20;16832:34;16828:387;;;17014:190;17161:4;17083:55;5021:12;17105:26;;17161:4;17083:21;:55::i;:::-;17053:7;:85;:112;;;;;;17183:7;17014:21;:190::i;:::-;17007:197;;;;16828:387;-1:-1:-1;17231:9:7;;16682:565;-1:-1:-1;16682:565:7:o;1987:267:13:-;2131:39;;;;;2173:6;;2131:15;;;;;;:39;;2155:4;;2162:7;;2131:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:48;2127:121;;;2195:42;2209:5;2216:7;2233:2;2195:13;:42::i;:::-;1987:267;;;:::o;764:457:16:-;850:7;877:6;873:45;;-1:-1:-1;906:1:16;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;11469:925:7:-;11650:31;;:::i;:::-;11697:28;11728:162;11770:4;11788:5;11807;:22;;;11843:5;:22;;;11879:1;11728:28;:162::i;:::-;11697:193;;11902:12;11916:23;11951:13;11943:35;;12032:29;;;12079:5;12102:4;:14;;;12134:4;:13;;;12165:20;11992:207;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11943:266;;;;11992:207;11943:266;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11901:308;;;;12223:7;12219:169;;;12290:10;12279:33;;;;;;;;;;;;:::i;:::-;12246:30;;;:66;12326:51;;;12219:169;11469:925;;;;;;;;:::o;12434:1904::-;12606:31;;:::i;:::-;12653:28;12684:322;12719:230;12765:4;12787:5;12810:9;:15;;;:27;;;12719:230;;12855:9;:15;;;:27;;;12719:230;;12900:9;:15;;;:35;;;12719:230;;:28;:230::i;:::-;12963:9;:33;;;12684:21;:322::i;:::-;12653:353;;13127:5;:17;;;13106:5;:18;;;:38;13102:225;;;13205:15;;13180:41;;;;;13160:17;;13180:24;:6;:24;;;;:41;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13160:61;;13240:30;13260:9;13240:30;;;;;;:::i;:::-;;;;;;;;13284:14;;;;13102:225;13353:6;:21;;;13399:5;:17;;;13456:9;:15;;;13493:9;:19;;;13534:44;:20;:42;:44::i;:::-;13353:243;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13353:243:7;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;13337:995;;;;;13708:15;;:35;;;:39;;;13704:416;;13792:313;13847:240;:216;13905:22;13847:216;;13953:9;:15;;;:27;;;13847:216;;14006:9;:15;;;:35;;;13847:216;;:32;:216::i;:::-;:238;:240::i;:::-;13792:33;;;;;:313::i;:::-;13767:338;;13704:416;14133:53;;;;;;14200:55;:30;;;:55;14295:17;;;;14269:23;;;:43;13337:995;12434:1904;;;;;;:::o;14376:1015::-;14544:31;;:::i;:::-;14591:28;14622:288;14657:196;14703:4;14725:5;14748:9;:15;;;:27;;;14657:196;;14793:9;:15;;;:27;;;14657:196;;14838:1;14657:28;:196::i;14622:288::-;14591:319;;14937:6;:19;;;14995:9;:15;;;15032:9;:19;;;15073:44;:20;:42;:44::i;:::-;14937:198;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14937:198:7;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14921:464;;;;;15243:53;;;;;;15310:55;:30;;;:55;14376:1015;;;;;;:::o;2004:392:16:-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;1625:373::-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;1759:200::-;-1:-1:-1;1986:5:16;;;1625:373::o;3736:407:2:-;3910:12;3988:66;4069:9;4092:10;4116;3945:191;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3736:407:2;;;;;:::o;4149:405::-;4322:12;4400:65;4480:8;4502:12;4528:9;4357:190;;;;;;;;;;:::i;2465:335::-;2605:12;2683:57;2755:6;2775:8;2640:153;;;;;;;;;:::i;2806:365::-;2961:12;3039:58;3112:13;3139:15;2996:168;;;;;;;;;:::i;2544:135:16:-;2629:7;2663:1;2659;:5;:13;;2671:1;2659:13;;1217:351:13;1359:21;1419:22;;;1455:7;1476:9;1383:112;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1505:56:13;1544:5;1383:112;1505:30;:56::i;:::-;1217:351;;;;:::o;1401:322:20:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;15465:1143:7:-;15732:28;;15780:9;;:22;;;;;;;;;15776:657;;;15865:16;;;;15841:15;;;;:41;;:23;:41::i;:::-;15818:64;-1:-1:-1;15900:29:7;;15896:292;;15972:201;16025:20;16067:50;:16;16092:24;16067;:50::i;:::-;16139:16;15972:31;:201::i;:::-;15949:224;;15896:292;15776:657;;;16248:174;16297:43;16321:5;:18;;;16297:4;:15;;;:23;;:43;;;;:::i;:::-;16358:16;16392;16248:31;:174::i;:::-;16225:197;;15776:657;16449:152;16484:61;16506:20;16528:16;16484:21;:61::i;:::-;16559:5;:32;;;16449:21;:152::i;:::-;16442:159;15465:1143;-1:-1:-1;;;;;;15465:1143:7:o;4618:401:16:-;4707:7;4738:17;4734:21;;4730:256;;;4771:204;4796:178;4859:82;4959:1;4796:45;:178::i;4771:204::-;-1:-1:-1;5010:1:16;4618:401::o;3247:300:15:-;3411:21;3464:46;3498:11;3464:25;:9;3482:6;3464:17;:25::i;:::-;:33;;:46::i;:::-;3448:62;3247:300;-1:-1:-1;;;;3247:300:15:o;3934:395:16:-;4023:7;4058:5;;;4077;;;;;;;;4073:232;;;4098:196;4123:170;4183:58;4259:1;4123:170;;4278:1;4123:170;;:42;:170::i;6923:340:13:-;7055:15;7072:23;7099:6;:11;;7111:8;7099:21;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7054:66;;;;7134:10;:44;;;;;7148:30;7167:10;7148:18;:30::i;:::-;7130:81;;;7194:7;;;;7130:81;7220:36;7245:10;7220:24;:36::i;6923:340::-;;;:::o;3834:545:15:-;3997:21;4237:104;4329:11;4237:70;4284:22;4329:11;4304:1;4284:19;:22::i;:::-;4237:25;:9;4255:6;4237:17;:25::i;:::-;:46;;:70::i;1729:297:20:-;1869:12;966:10;1940:31;;1985:9;2008:1;1904:115;;;;;;;;;:::i;1227:392:16:-;1313:7;1340:6;1336:232;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;1362:195::-;1577:9;1593:1;1589;:5;;;;;;;1227:392;-1:-1:-1;;;;1227:392:16:o;6237:395:13:-;6337:17;6374:10;:17;6395:1;6374:22;6370:64;;;-1:-1:-1;6419:4:13;6412:11;;6370:64;6468:2;6447:10;:17;:23;6443:183;;6486:14;6503:38;6527:10;6539:1;6503:23;:38::i;:::-;6486:55;;6559:6;6569:1;6559:11;6555:61;;;6597:4;6590:11;;;;;6555:61;6443:183;6237:395;;;:::o;16122:220:14:-;16243:14;16290:21;16302:1;16305:5;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:14;14838:2;14936:13;14930:20;;14301:688::o;1334:378:17:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;341:749::-;;472:3;465:4;457:6;453:17;449:27;439:2;;-1:-1;;480:12;439:2;527:6;514:20;549:94;564:78;635:6;564:78;:::i;:::-;549:94;:::i;:::-;671:21;;;540:103;-1:-1;715:4;728:14;;;;703:17;;;817;;;808:27;;;;805:36;-1:-1;802:2;;;854:1;;844:12;802:2;879:1;;864:220;889:6;886:1;883:13;864:220;;;4647:6;4634:20;45767:1;45760:5;45757:12;45747:2;;879:1;;45773:12;45747:2;957:64;;1035:14;;;;1063;;;;911:1;904:9;864:220;;;868:14;;;;;;432:658;;;;:::o;1142:765::-;;1281:4;1288:3;1281:4;1273:6;1269:17;1265:27;1255:2;;-1:-1;;1296:12;1255:2;1343:6;1330:20;1365:109;1380:93;1466:6;1380:93;:::i;1365:109::-;1502:21;;;1356:118;-1:-1;1546:4;1559:14;;;;1534:17;;;1654:1;1639:262;1664:6;1661:1;1658:13;1639:262;;;1747:3;1734:17;1538:6;1722:30;5204:4;5183:19;5204:4;5183:19;1722:30;5187:3;5183:19;;5179:30;5176:2;;;1654:1;;5212:12;5176:2;5240:20;5204:4;5240:20;:::i;:::-;1722:30;;;14919:20;5319:75;;5521:22;;;;14919:20;5482:16;;;5475:75;5677:22;;;;14919:20;5638:16;;;5631:75;5786:18;;;5773:32;;5825:18;5814:30;;;5811:2;;;1654:1;;5847:12;5811:2;5937:6;1722:30;5922:22;;;4023:3;4004:17;5922:22;4004:17;4000:27;3990:2;;1654:1;;4031:12;3990:2;1546:4;5922:22;;4065:20;4051:34;;5825:18;39228:6;39225:30;39222:2;;;1654:1;;39258:12;39222:2;;4100:64;1546:4;5183:19;1281:4;39316:6;39312:17;39308:33;39389:15;4100:64;:::i;:::-;4091:73;;4184:6;4177:5;4170:21;4288:3;5521:22;4279:6;5922:22;4270:16;;4267:25;4264:2;;;1654:1;;4295:12;4264:2;44053:6;5521:22;5922;4208:17;1546:4;4246:5;4242:16;44030:30;1654:1;44091:16;;;;;44084:27;;;;-1:-1;5874:16;;;5867:84;1759:79;;-1:-1;1852:14;;;;1880;;;;1686:1;1679:9;1639:262;;1968:807;;2117:3;2110:4;2102:6;2098:17;2094:27;2084:2;;-1:-1;;2125:12;2084:2;2172:6;2159:20;2194:112;2209:96;2298:6;2209:96;:::i;2194:112::-;2334:21;;;2185:121;-1:-1;2378:4;2391:14;;;;2366:17;;;2492:6;2480:19;;;2471:29;;;;2468:38;-1:-1;2465:2;;;2519:1;;2509:12;2465:2;2544:1;;2529:240;2554:6;2551:1;2548:13;2529:240;;;2492:6;6137:9;6132:3;6128:19;6124:32;6121:2;;;2544:1;;6159:12;6121:2;6187:20;6202:4;6187:20;:::i;:::-;6290:77;6363:3;6339:22;6290:77;:::i;:::-;6272:16;6265:103;6468:76;6540:3;6434;6520:9;6516:22;6468:76;:::i;:::-;6450:16;;;6443:102;6625:3;6680:22;;14919:20;6652:4;6641:16;;6634:75;2622:82;;2718:14;;;;2746:16;;;;2576:1;2569:9;2529:240;;;2533:14;;;;;;;2077:698;;;;:::o;2834:801::-;;2981:3;2974:4;2966:6;2962:17;2958:27;2948:2;;-1:-1;;2989:12;2948:2;3036:6;3023:20;3058:110;3073:94;3160:6;3073:94;:::i;3058:110::-;3196:21;;;3049:119;-1:-1;3240:4;3253:14;;;;3228:17;;;3354:6;3342:19;;;3333:29;;;;3330:38;-1:-1;3327:2;;;3381:1;;3371:12;3327:2;3406:1;3391:238;3416:6;3413:1;3410:13;3391:238;;;8967:9;8962:3;8958:19;3354:6;8958:19;8954:32;8951:2;;;3406:1;;8989:12;8951:2;9032:4;9017:20;9032:4;9017:20;:::i;:::-;9717:6;;9696:19;9692:32;9689:2;;;3406:1;;9727:12;9689:2;9755:22;9717:6;9755:22;:::i;:::-;9746:31;;9865:72;9933:3;9909:22;9865:72;:::i;:::-;9847:16;9840:98;10038:72;10106:3;3240:4;10086:9;10082:22;10038:72;:::i;:::-;3240:4;10024:5;10020:16;10013:98;10179:2;10212:49;10257:3;10179:2;10237:9;10233:22;10212:49;:::i;:::-;10179:2;10198:5;10194:16;10187:75;10363:49;10408:3;9032:4;10388:9;10384:22;10363:49;:::i;:::-;9032:4;10349:5;10345:16;10338:75;10475:3;;;10509:49;10554:3;10475;10534:9;10530:22;10509:49;:::i;:::-;10475:3;10495:5;10491:16;10484:75;10621:3;;;10655:49;10700:3;10621;10680:9;10676:22;10655:49;:::i;:::-;10621:3;10641:5;10637:16;10630:75;10770:3;;;10804:49;10849:3;10770;10829:9;10825:22;10804:49;:::i;:::-;10770:3;10790:5;10786:16;10779:75;10915:3;;;;10974:9;10970:22;3710:20;10915:3;10935:5;10931:16;10924:75;11062:3;;;11098:48;11142:3;11062;11122:9;11118:22;11098:48;:::i;:::-;11062:3;11082:5;11078:18;11071:76;11208:3;;;;11269:9;11265:22;14919:20;11208:3;11228:5;11224:18;11217:77;9120:75;9102:16;9095:101;9296:76;9368:3;9717:6;9348:9;9344:22;9296:76;:::i;:::-;9278:16;;;9271:102;9453:3;9508:22;;14919:20;9469:16;;;9462:75;-1:-1;3484:80;;-1:-1;;3578:14;;;;3606:16;;;;3438:1;3431:9;3391:238;;4718:148;4794:20;;45877:1;45867:12;;45857:2;;45893:1;;45883:12;6776:2030;;6893:6;;6881:9;6876:3;6872:19;6868:32;6865:2;;;-1:-1;;6903:12;6865:2;6931:22;6893:6;6931:22;:::i;:::-;6922:31;;;7041:72;7109:3;7085:22;7041:72;:::i;:::-;7023:16;7016:98;7214:72;7282:3;7181:2;7262:9;7258:22;7214:72;:::i;:::-;7181:2;7200:5;7196:16;7189:98;7388:49;7433:3;7355:2;7413:9;7409:22;7388:49;:::i;:::-;7355:2;7374:5;7370:16;7363:75;7539:49;7584:3;7506:2;7564:9;7560:22;7539:49;:::i;:::-;7506:2;7525:5;7521:16;7514:75;7699:49;7744:3;7665;7724:9;7720:22;7699:49;:::i;:::-;7665:3;7685:5;7681:16;7674:75;7845:49;7890:3;7811;7870:9;7866:22;7845:49;:::i;:::-;7811:3;7831:5;7827:16;7820:75;7991:49;8036:3;7957;8016:9;8012:22;7991:49;:::i;:::-;7957:3;7977:5;7973:16;7966:75;8138:49;8183:3;8104;8163:9;8159:22;8138:49;:::i;:::-;8104:3;8124:5;8120:16;8113:75;8257:3;8293:49;8338:3;8257;8318:9;8314:22;8293:49;:::i;:::-;8273:18;;;8266:77;8404:3;8461:22;;;3710:20;8420:18;;;8413:77;8553:3;8589:48;8633:3;8609:22;;;8589:48;:::i;:::-;8553:3;8573:5;8569:18;8562:76;;8699:3;;8760:9;8756:22;14919:20;8699:3;8719:5;8715:18;8708:77;;6859:1947;;;;:::o;11358:773::-;;11474:4;11462:9;11457:3;11453:19;11449:30;11446:2;;;-1:-1;;11482:12;11446:2;11510:20;11474:4;11510:20;:::i;:::-;11501:29;;4971:6;4958:20;45996:1;45989:5;45986:12;45976:2;;-1:-1;;46002:12;45976:2;11596:93;;11747:2;11799:22;;15469:20;42180:4;42169:16;;46577:33;;46567:2;;-1:-1;;46614:12;46567:2;11780:47;11747:2;11766:5;11762:16;11755:73;;11886:2;11944:9;11940:22;3710:20;11886:2;11905:5;11901:16;11894:75;12027:2;12085:9;12081:22;3710:20;12027:2;12046:5;12042:16;12035:75;11440:691;;;;:::o;14574:130::-;14641:20;;14666:33;14641:20;14666:33;:::i;15269:128::-;15335:20;;42078:18;42067:30;;46456:34;;46446:2;;46504:1;;46494:12;15537:257;;15649:2;15637:9;15628:7;15624:23;15620:32;15617:2;;;-1:-1;;15655:12;15617:2;230:6;217:20;242:41;277:5;242:41;:::i;15801:263::-;;15916:2;15904:9;15895:7;15891:23;15887:32;15884:2;;;-1:-1;;15922:12;15884:2;-1:-1;3858:13;;15878:186;-1:-1;15878:186::o;16071:399::-;;16211:2;16199:9;16190:7;16186:23;16182:32;16179:2;;;-1:-1;;16217:12;16179:2;16275:17;16262:31;16313:18;16305:6;16302:30;16299:2;;;-1:-1;;16335:12;16299:2;16422:22;;12308:2;12290:16;;;12286:25;12283:2;;;-1:-1;;12314:12;16477:389;;16612:2;16600:9;16591:7;16587:23;16583:32;16580:2;;;-1:-1;;16618:12;16580:2;16676:17;16663:31;16714:18;;16706:6;16703:30;16700:2;;;-1:-1;;16736:12;16700:2;16833:6;16822:9;16818:22;;;12530:6;;12518:9;12513:3;12509:19;12505:32;12502:2;;;-1:-1;;12540:12;12502:2;12568:22;12530:6;12568:22;:::i;:::-;12559:31;;12672:58;12726:3;12702:22;12672:58;:::i;:::-;12654:16;12647:84;12830:72;12898:3;16612:2;12878:9;12874:22;12830:72;:::i;:::-;16612:2;12816:5;12812:16;12805:98;13001:72;13069:3;12968:2;13049:9;13045:22;13001:72;:::i;:::-;12968:2;12987:5;12983:16;12976:98;13171:2;13160:9;13156:18;13143:32;16714:18;13187:6;13184:30;13181:2;;;-1:-1;;13217:12;13181:2;13262:103;13361:3;13352:6;13341:9;13337:22;13262:103;:::i;:::-;13171:2;13248:5;13244:16;13237:129;;13462:3;13451:9;13447:19;13434:33;16714:18;13479:6;13476:30;13473:2;;;-1:-1;;13509:12;13473:2;13554:106;13656:3;13647:6;13636:9;13632:22;13554:106;:::i;:::-;13462:3;13540:5;13536:16;13529:132;;13755:3;13744:9;13740:19;13727:33;16714:18;13772:6;13769:30;13766:2;;;-1:-1;;13802:12;13766:2;13847:104;13947:3;13938:6;13927:9;13923:22;13847:104;:::i;:::-;13755:3;13833:5;13829:16;13822:130;;14049:3;14038:9;14034:19;14021:33;16714:18;14066:6;14063:30;14060:2;;;-1:-1;;14096:12;14060:2;14141:88;14225:3;14216:6;14205:9;14201:22;14141:88;:::i;:::-;14049:3;14127:5;14123:16;14116:114;;14297:3;14356:9;14352:22;14919:20;14297:3;14317:5;14313:16;14306:75;14452:3;;;14488:57;14541:3;14452;14521:9;14517:22;14488:57;:::i;:::-;14468:18;;;14461:85;;;;14472:5;16574:292;-1:-1;;;;16574:292::o;16873:399::-;;;17005:2;16993:9;16984:7;16980:23;16976:32;16973:2;;;-1:-1;;17011:12;16973:2;14795:6;14789:13;14807:33;14834:5;14807:33;:::i;:::-;17174:2;17224:22;;14789:13;17063:74;;-1:-1;14807:33;14789:13;14807:33;:::i;:::-;17182:74;;;;16967:305;;;;;:::o;17549:261::-;;17663:2;17651:9;17642:7;17638:23;17634:32;17631:2;;;-1:-1;;17669:12;17631:2;15213:6;15207:13;41983:10;46361:5;41972:22;46337:5;46334:34;46324:2;;-1:-1;;46372:12;17817:103;41777:42;41766:54;17878:37;;17872:48::o;18394:323::-;;18526:5;39508:12;39654:6;39649:3;39642:19;18609:52;18654:6;39691:4;39686:3;39682:14;39691:4;18635:5;18631:16;18609:52;:::i;:::-;44490:2;44470:14;44486:7;44466:28;18673:39;;;;39691:4;18673:39;;18474:243;-1:-1;;18474:243::o;23142:2139::-;23394:86;23465:14;23371:16;23365:23;23394:86;:::i;:::-;23565:4;23558:5;23554:16;23548:23;23577:86;23565:4;23652:3;23648:14;23634:12;23577:86;:::i;:::-;;23749:4;23742:5;23738:16;23732:23;23761:63;23749:4;23813:3;23809:14;23795:12;23761:63;:::i;:::-;;23910:4;23903:5;23899:16;23893:23;23922:63;23910:4;23974:3;23970:14;23956:12;23922:63;:::i;:::-;;24079:4;24072:5;24068:16;24062:23;24091:63;24079:4;24143:3;24139:14;24125:12;24091:63;:::i;:::-;;24234:4;24227:5;24223:16;24217:23;24246:63;24234:4;24298:3;24294:14;24280:12;24246:63;:::i;:::-;;24389:4;24382:5;24378:16;24372:23;24401:63;24389:4;24453:3;24449:14;24435:12;24401:63;:::i;:::-;;24545:4;24538:5;24534:16;24528:23;24557:63;24545:4;24609:3;24605:14;24591:12;24557:63;:::i;:::-;;24707:6;;24700:5;24696:18;24690:25;24721:65;24707:6;24773:3;24769:16;24755:12;24721:65;:::i;:::-;-1:-1;;24865:6;24854:18;;;24848:25;24927:16;;;18108:37;25025:6;25014:18;;;25008:25;25039:63;25085:16;;;25008:25;25039:63;:::i;:::-;-1:-1;;25181:6;25170:18;;;25164:25;25243:16;;18108:37;23264:2017::o;27233:800::-;27461:16;27455:23;40849:53;40896:5;40849:53;:::i;:::-;20968:66;;27639:4;27628:16;;;27622:23;42180:4;42169:16;27695:14;;;28664:35;27786:4;27775:16;;;27769:23;27846:14;;;18108:37;27937:4;27926:16;;;27920:23;27997:14;;18108:37;27353:680::o;28040:103::-;41657:34;41646:46;28101:37;;28095:48::o;28500:100::-;42078:18;42067:30;28559:36;;28553:47::o;28711:271::-;;19234:5;39508:12;19345:52;19390:6;19385:3;19378:4;19371:5;19367:16;19345:52;:::i;:::-;19409:16;;;;;28845:137;-1:-1;;28845:137::o;28989:379::-;29353:10;29177:191::o;29375:222::-;41777:42;41766:54;;;;17878:37;;29502:2;29487:18;;29473:124::o;29604:333::-;41777:42;41766:54;;;17878:37;;41766:54;;29923:2;29908:18;;17878:37;29759:2;29744:18;;29730:207::o;29944:333::-;41777:42;41766:54;;;;17878:37;;30263:2;30248:18;;18108:37;30099:2;30084:18;;30070:207::o;30284:444::-;41777:42;41766:54;;;;17878:37;;30631:2;30616:18;;18108:37;;;;30714:2;30699:18;;18108:37;30467:2;30452:18;;30438:290::o;30735:222::-;18108:37;;;30862:2;30847:18;;30833:124::o;30964:218::-;40561:66;40550:78;;;;18346:36;;31089:2;31074:18;;31060:122::o;31749:480::-;31950:2;31935:18;;40849:53;40896:5;40849:53;:::i;:::-;20242:68;;;32132:2;32117:18;;18108:37;;;;32215:2;32200:18;;;18108:37;31921:308;:::o;32236:375::-;32412:2;32397:18;;40849:53;40896:5;40849:53;:::i;:::-;20414:71;;;32597:2;32582:18;18108:37;32383:228;:::o;32618:510::-;32834:2;32819:18;;44850:1;44840:12;;44830:2;;44856:9;33135:479;;44981:1;44974:5;44971:12;44961:2;;44987:9;44961:2;43753:57;20805:3;20798:81;33339:2;33488;33477:9;33473:18;33466:48;33528:76;33339:2;33328:9;33324:18;33590:6;33528:76;:::i;33621:416::-;33821:2;33835:47;;;21271:2;33806:18;;;39642:19;21307:20;39682:14;;;21287:41;21347:12;;;33792:245::o;34044:416::-;34244:2;34258:47;;;21598:2;34229:18;;;39642:19;21634:34;39682:14;;;21614:55;21703:12;21689;;;21682:34;21735:12;;;34215:245::o;34467:812::-;;34782:3;34804:17;34797:47;22376:16;22370:23;34782:3;34771:9;34767:19;18108:37;22553:4;22546:5;22542:16;22536:23;22613:14;34771:9;22613:14;18108:37;22719:4;22712:5;22708:16;22702:23;22779:14;34771:9;22779:14;18108:37;22879:4;22872:5;22868:16;22862:23;34782:3;22905:14;34771:9;22905:14;22898:38;22951:71;22293:14;34771:9;22293:14;23003:12;22951:71;:::i;:::-;41777:42;41766:54;;;22553:4;35061:18;;19531:73;41766:54;;;;22719:4;35167:18;;19531:73;-1:-1;22879:4;35250:18;18108:37;34850:124;34753:526;-1:-1;;34753:526::o;35286:335::-;35469:3;35454:19;;35484:127;35458:9;35584:6;35484:127;:::i;35628:667::-;35921:3;35906:19;;35936:127;35910:9;36036:6;35936:127;:::i;:::-;36074;36196:3;36185:9;36181:19;36172:6;36074:127;:::i;:::-;41657:34;28131:5;41646:46;36280:3;36269:9;36265:19;28101:37;35892:403;;;;;;:::o;36302:659::-;;36591:3;36580:9;36576:19;36568:27;;25607:86;25678:14;25584:16;25578:23;25607:86;:::i;:::-;25778:4;25771:5;25767:16;25761:23;25790:86;25778:4;25865:3;25861:14;25847:12;25790:86;:::i;:::-;;25962:4;25955:5;25951:16;25945:23;25974:63;25962:4;26026:3;26022:14;26008:12;25974:63;:::i;:::-;;26123:4;26116:5;26112:16;26106:23;26135:63;26123:4;26187:3;26183:14;26169:12;26135:63;:::i;:::-;;26278:4;26271:5;26267:16;26261:23;26290:63;26278:4;26342:3;26338:14;26324:12;26290:63;:::i;:::-;;26433:4;26426:5;26422:16;26416:23;26445:63;26433:4;26497:3;26493:14;26479:12;26445:63;:::i;:::-;;26591:4;26584:5;26580:16;26574:23;26603:63;26591:4;26655:3;26651:14;26637:12;26603:63;:::i;:::-;;26745:4;26738:5;26734:16;26728:23;26745:4;26809:3;26805:14;18108:37;26901:6;;26894:5;26890:18;26884:25;26915:63;26901:6;26965:3;26961:16;26947:12;26915:63;:::i;:::-;-1:-1;;27057:6;27046:18;;;27040:25;27119:16;;;18108:37;36740:127;36862:3;36847:19;;36838:6;36740:127;:::i;:::-;36878:73;36946:3;36935:9;36931:19;36922:6;36878:73;:::i;36968:506::-;;;37103:11;37090:25;37154:48;37178:8;37162:14;37158:29;37154:48;37134:18;37130:73;37120:2;;-1:-1;;37207:12;37120:2;37234:33;;37288:18;;;-1:-1;37326:18;37315:30;;37312:2;;;-1:-1;;37348:12;37312:2;37193:4;37376:13;;-1:-1;37162:14;37408:38;;;37398:49;;37395:2;;;37460:1;;37450:12;37395:2;37058:416;;;;;:::o;37481:256::-;37543:2;37537:9;37569:17;;;37644:18;37629:34;;37665:22;;;37626:62;37623:2;;;37701:1;;37691:12;37623:2;37543;37710:22;37521:216;;-1:-1;37521:216::o;37744:318::-;;37917:18;37909:6;37906:30;37903:2;;;-1:-1;;37939:12;37903:2;-1:-1;37984:4;37972:17;;;38037:15;;37840:222::o;44126:268::-;44191:1;44198:101;44212:6;44209:1;44206:13;44198:101;;;44279:11;;;44273:18;44260:11;;;44253:39;44234:2;44227:10;44198:101;;;44314:6;44311:1;44308:13;44305:2;;;-1:-1;;44191:1;44361:16;;44354:27;44175:219::o;44507:111::-;44596:1;44589:5;44586:12;44576:2;;44602:9;44576:2;44570:48;:::o;45126:117::-;41777:42;45213:5;41766:54;45188:5;45185:35;45175:2;;45234:1;;45224:12;46028:117;41657:34;46115:5;41646:46;46090:5;46087:35;46077:2;;46136:1;;46126:12"
            },
            "methodIdentifiers": {
                "bridgeAdapter()": "be7dc09b",
                "deployer()": "d5f39488",
                "die(address)": "c9353cb5",
                "transform((address,address,bytes))": "832b24bb",
                "zeroEx()": "52ab413b"
            }
        }
    },
    "sourceTreeHashHex": "0xc133297c0d360653b0ce9422c7541b01445303c1151e09c741874d2247f46460",
    "sources": {
        "./FillQuoteTransformer.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"../errors/LibTransformERC20RichErrors.sol\";\nimport \"../features/interfaces/INativeOrdersFeature.sol\";\nimport \"../features/libs/LibNativeOrder.sol\";\nimport \"./bridges/IBridgeAdapter.sol\";\nimport \"./Transformer.sol\";\nimport \"./LibERC20Transformer.sol\";\n\n/// @dev A transformer that fills an ERC20 market sell/buy quote.\n///      This transformer shortcuts bridge orders and fills them directly\ncontract FillQuoteTransformer is\n    Transformer\n{\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibERC20Transformer for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n    using LibSafeMathV06 for uint128;\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Whether we are performing a market sell or buy.\n    enum Side {\n        Sell,\n        Buy\n    }\n\n    enum OrderType {\n        Bridge,\n        Limit,\n        Rfq\n    }\n\n    struct LimitOrderInfo {\n        LibNativeOrder.LimitOrder order;\n        LibSignature.Signature signature;\n        // Maximum taker token amount of this limit order to fill.\n        uint256 maxTakerTokenFillAmount;\n    }\n\n    struct RfqOrderInfo {\n        LibNativeOrder.RfqOrder order;\n        LibSignature.Signature signature;\n        // Maximum taker token amount of this limit order to fill.\n        uint256 maxTakerTokenFillAmount;\n    }\n\n    /// @dev Transform data to ABI-encode and pass into `transform()`.\n    struct TransformData {\n        // Whether we are performing a market sell or buy.\n        Side side;\n        // The token being sold.\n        // This should be an actual token, not the ETH pseudo-token.\n        IERC20TokenV06 sellToken;\n        // The token being bought.\n        // This should be an actual token, not the ETH pseudo-token.\n        IERC20TokenV06 buyToken;\n\n        // External liquidity bridge orders. Sorted by fill sequence.\n        IBridgeAdapter.BridgeOrder[] bridgeOrders;\n        // Native limit orders. Sorted by fill sequence.\n        LimitOrderInfo[] limitOrders;\n        // Native RFQ orders. Sorted by fill sequence.\n        RfqOrderInfo[] rfqOrders;\n\n        // The sequence to fill the orders in. Each item will fill the next\n        // order of that type in either `bridgeOrders`, `limitOrders`,\n        // or `rfqOrders.`\n        OrderType[] fillSequence;\n\n        // Amount of `sellToken` to sell or `buyToken` to buy.\n        // For sells, setting the high-bit indicates that\n        // `sellAmount & LOW_BITS` should be treated as a `1e18` fraction of\n        // the current balance of `sellToken`, where\n        // `1e18+ == 100%` and `0.5e18 == 50%`, etc.\n        uint256 fillAmount;\n\n        // Who to transfer unused protocol fees to.\n        // May be a valid address or one of:\n        // `address(0)`: Stay in flash wallet.\n        // `address(1)`: Send to the taker.\n        // `address(2)`: Send to the sender (caller of `transformERC20()`).\n        address payable refundReceiver;\n    }\n\n    struct FillOrderResults {\n        // The amount of taker tokens sold, according to balance checks.\n        uint256 takerTokenSoldAmount;\n        // The amount of maker tokens sold, according to balance checks.\n        uint256 makerTokenBoughtAmount;\n        // The amount of protocol fee paid.\n        uint256 protocolFeePaid;\n    }\n\n    /// @dev Intermediate state variables to get around stack limits.\n    struct FillState {\n        uint256 ethRemaining;\n        uint256 boughtAmount;\n        uint256 soldAmount;\n        uint256 protocolFee;\n        uint256 takerTokenBalanceRemaining;\n        uint256[3] currentIndices;\n        OrderType currentOrderType;\n    }\n\n    /// @dev Emitted when a trade is skipped due to a lack of funds\n    ///      to pay the 0x Protocol fee.\n    /// @param orderHash The hash of the order that was skipped.\n    event ProtocolFeeUnfunded(bytes32 orderHash);\n\n    /// @dev The highest bit of a uint256 value.\n    uint256 private constant HIGH_BIT = 2 ** 255;\n    /// @dev Mask of the lower 255 bits of a uint256 value.\n    uint256 private constant LOWER_255_BITS = HIGH_BIT - 1;\n    /// @dev If `refundReceiver` is set to this address, unpsent\n    ///      protocol fees will be sent to the taker.\n    address private constant REFUND_RECEIVER_TAKER = address(1);\n    /// @dev If `refundReceiver` is set to this address, unpsent\n    ///      protocol fees will be sent to the sender.\n    address private constant REFUND_RECEIVER_SENDER = address(2);\n\n    /// @dev The BridgeAdapter address\n    IBridgeAdapter public immutable bridgeAdapter;\n\n    /// @dev The exchange proxy contract.\n    INativeOrdersFeature public immutable zeroEx;\n\n    /// @dev Create this contract.\n    /// @param bridgeAdapter_ The bridge adapter contract.\n    /// @param zeroEx_ The Exchange Proxy contract.\n    constructor(IBridgeAdapter bridgeAdapter_, INativeOrdersFeature zeroEx_)\n        public\n        Transformer()\n    {\n        bridgeAdapter = bridgeAdapter_;\n        zeroEx = zeroEx_;\n    }\n\n    /// @dev Sell this contract's entire balance of of `sellToken` in exchange\n    ///      for `buyToken` by filling `orders`. Protocol fees should be attached\n    ///      to this call. `buyToken` and excess ETH will be transferred back to the caller.\n    /// @param context Context information.\n    /// @return magicBytes The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\n    function transform(TransformContext calldata context)\n        external\n        override\n        returns (bytes4 magicBytes)\n    {\n        TransformData memory data = abi.decode(context.data, (TransformData));\n        FillState memory state;\n\n        // Validate data fields.\n        if (data.sellToken.isTokenETH() || data.buyToken.isTokenETH()) {\n            LibTransformERC20RichErrors.InvalidTransformDataError(\n                LibTransformERC20RichErrors.InvalidTransformDataErrorCode.INVALID_TOKENS,\n                context.data\n            ).rrevert();\n        }\n\n        if (data.bridgeOrders.length\n                + data.limitOrders.length\n                + data.rfqOrders.length != data.fillSequence.length\n        ) {\n            LibTransformERC20RichErrors.InvalidTransformDataError(\n                LibTransformERC20RichErrors.InvalidTransformDataErrorCode.INVALID_ARRAY_LENGTH,\n                context.data\n            ).rrevert();\n        }\n\n        state.takerTokenBalanceRemaining = data.sellToken.getTokenBalanceOf(address(this));\n        if (data.side == Side.Sell) {\n            data.fillAmount = _normalizeFillAmount(data.fillAmount, state.takerTokenBalanceRemaining);\n        }\n\n        // Approve the exchange proxy to spend our sell tokens if native orders\n        // are present.\n        if (data.limitOrders.length + data.rfqOrders.length != 0) {\n            data.sellToken.approveIfBelow(address(zeroEx), data.fillAmount);\n            // Compute the protocol fee if a limit order is present.\n            if (data.limitOrders.length != 0) {\n                state.protocolFee = uint256(zeroEx.getProtocolFeeMultiplier())\n                    .safeMul(tx.gasprice);\n            }\n        }\n\n        state.ethRemaining = address(this).balance;\n\n        // Fill the orders.\n        for (uint256 i = 0; i < data.fillSequence.length; ++i) {\n            // Check if we've hit our targets.\n            if (data.side == Side.Sell) {\n                // Market sell check.\n                if (state.soldAmount >= data.fillAmount) { break; }\n            } else {\n                // Market buy check.\n                if (state.boughtAmount >= data.fillAmount) { break; }\n            }\n\n            state.currentOrderType = OrderType(data.fillSequence[i]);\n            uint256 orderIndex = state.currentIndices[uint256(state.currentOrderType)];\n            // Fill the order.\n            FillOrderResults memory results;\n            if (state.currentOrderType == OrderType.Bridge) {\n                results = _fillBridgeOrder(data.bridgeOrders[orderIndex], data, state);\n            } else if (state.currentOrderType == OrderType.Limit) {\n                results = _fillLimitOrder(data.limitOrders[orderIndex], data, state);\n            } else if (state.currentOrderType == OrderType.Rfq) {\n                results = _fillRfqOrder(data.rfqOrders[orderIndex], data, state);\n            } else {\n                revert(\"INVALID_ORDER_TYPE\");\n            }\n\n            // Accumulate totals.\n            state.soldAmount = state.soldAmount\n                .safeAdd(results.takerTokenSoldAmount);\n            state.boughtAmount = state.boughtAmount\n                .safeAdd(results.makerTokenBoughtAmount);\n            state.ethRemaining = state.ethRemaining\n                .safeSub(results.protocolFeePaid);\n            state.takerTokenBalanceRemaining = state.takerTokenBalanceRemaining\n                .safeSub(results.takerTokenSoldAmount);\n            state.currentIndices[uint256(state.currentOrderType)]++;\n        }\n\n        // Ensure we hit our targets.\n        if (data.side == Side.Sell) {\n            // Market sell check.\n            if (state.soldAmount < data.fillAmount) {\n                LibTransformERC20RichErrors\n                    .IncompleteFillSellQuoteError(\n                        address(data.sellToken),\n                        state.soldAmount,\n                        data.fillAmount\n                    ).rrevert();\n            }\n        } else {\n            // Market buy check.\n            if (state.boughtAmount < data.fillAmount) {\n                LibTransformERC20RichErrors\n                    .IncompleteFillBuyQuoteError(\n                        address(data.buyToken),\n                        state.boughtAmount,\n                        data.fillAmount\n                    ).rrevert();\n            }\n        }\n\n        // Refund unspent protocol fees.\n        if (state.ethRemaining > 0 && data.refundReceiver != address(0)) {\n            bool transferSuccess;\n            if (data.refundReceiver == REFUND_RECEIVER_TAKER) {\n                (transferSuccess,) = context.taker.call{value: state.ethRemaining}(\"\");\n            } else if (data.refundReceiver == REFUND_RECEIVER_SENDER) {\n                (transferSuccess,) = context.sender.call{value: state.ethRemaining}(\"\");\n            } else {\n                (transferSuccess,) = data.refundReceiver.call{value: state.ethRemaining}(\"\");\n            }\n            require(transferSuccess, \"FillQuoteTransformer/ETHER_TRANSFER_FALIED\");\n        }\n        return LibERC20Transformer.TRANSFORMER_SUCCESS;\n    }\n\n    // Fill a single bridge order.\n    function _fillBridgeOrder(\n        IBridgeAdapter.BridgeOrder memory order,\n        TransformData memory data,\n        FillState memory state\n    )\n        private\n        returns (FillOrderResults memory results)\n    {\n        uint256 takerTokenFillAmount = _computeTakerTokenFillAmount(\n            data,\n            state,\n            order.takerTokenAmount,\n            order.makerTokenAmount,\n            0\n        );\n\n        (bool success, bytes memory resultData) = address(bridgeAdapter).delegatecall(\n            abi.encodeWithSelector(\n                IBridgeAdapter.trade.selector,\n                order,\n                data.sellToken,\n                data.buyToken,\n                takerTokenFillAmount\n            )\n        );\n        if (success) {\n            results.makerTokenBoughtAmount = abi.decode(resultData, (uint256));\n            results.takerTokenSoldAmount = takerTokenFillAmount;\n        }\n    }\n\n    // Fill a single limit order.\n    function _fillLimitOrder(\n        LimitOrderInfo memory orderInfo,\n        TransformData memory data,\n        FillState memory state\n    )\n        private\n        returns (FillOrderResults memory results)\n    {\n        uint256 takerTokenFillAmount = LibSafeMathV06.min256(\n            _computeTakerTokenFillAmount(\n                data,\n                state,\n                orderInfo.order.takerAmount,\n                orderInfo.order.makerAmount,\n                orderInfo.order.takerTokenFeeAmount\n            ),\n            orderInfo.maxTakerTokenFillAmount\n        );\n\n        // Emit an event if we do not have sufficient ETH to cover the protocol fee.\n        if (state.ethRemaining < state.protocolFee) {\n            bytes32 orderHash = zeroEx.getLimitOrderHash(orderInfo.order);\n            emit ProtocolFeeUnfunded(orderHash);\n            return results; // Empty results.\n        }\n\n        try\n            zeroEx.fillLimitOrder\n                {value: state.protocolFee}\n                (\n                    orderInfo.order,\n                    orderInfo.signature,\n                    takerTokenFillAmount.safeDowncastToUint128()\n                )\n            returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n        {\n            if (orderInfo.order.takerTokenFeeAmount > 0) {\n                takerTokenFilledAmount = takerTokenFilledAmount.safeAdd128(\n                    LibMathV06.getPartialAmountFloor(\n                        takerTokenFilledAmount,\n                        orderInfo.order.takerAmount,\n                        orderInfo.order.takerTokenFeeAmount\n                    ).safeDowncastToUint128()\n                );\n            }\n            results.takerTokenSoldAmount = takerTokenFilledAmount;\n            results.makerTokenBoughtAmount = makerTokenFilledAmount;\n            results.protocolFeePaid = state.protocolFee;\n        } catch {}\n    }\n\n    // Fill a single RFQ order.\n    function _fillRfqOrder(\n        RfqOrderInfo memory orderInfo,\n        TransformData memory data,\n        FillState memory state\n    )\n        private\n        returns (FillOrderResults memory results)\n    {\n        uint256 takerTokenFillAmount = LibSafeMathV06.min256(\n            _computeTakerTokenFillAmount(\n                data,\n                state,\n                orderInfo.order.takerAmount,\n                orderInfo.order.makerAmount,\n                0\n            ),\n            orderInfo.maxTakerTokenFillAmount\n        );\n\n        try\n            zeroEx.fillRfqOrder\n                (\n                    orderInfo.order,\n                    orderInfo.signature,\n                    takerTokenFillAmount.safeDowncastToUint128()\n                )\n            returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n        {\n            results.takerTokenSoldAmount = takerTokenFilledAmount;\n            results.makerTokenBoughtAmount = makerTokenFilledAmount;\n        } catch {}\n    }\n\n    // Compute the next taker token fill amount of a generic order.\n    function _computeTakerTokenFillAmount(\n        TransformData memory data,\n        FillState memory state,\n        uint256 orderTakerAmount,\n        uint256 orderMakerAmount,\n        uint256 orderTakerTokenFeeAmount\n    )\n        private\n        pure\n        returns (uint256 takerTokenFillAmount)\n    {\n        if (data.side == Side.Sell) {\n            takerTokenFillAmount = data.fillAmount.safeSub(state.soldAmount);\n            if (orderTakerTokenFeeAmount != 0) {\n                takerTokenFillAmount = LibMathV06.getPartialAmountCeil(\n                    takerTokenFillAmount,\n                    orderTakerAmount.safeAdd(orderTakerTokenFeeAmount),\n                    orderTakerAmount\n                );\n            }\n        } else { // Buy\n            takerTokenFillAmount = LibMathV06.getPartialAmountCeil(\n                data.fillAmount.safeSub(state.boughtAmount),\n                orderMakerAmount,\n                orderTakerAmount\n            );\n        }\n        return LibSafeMathV06.min256(\n            LibSafeMathV06.min256(takerTokenFillAmount, orderTakerAmount),\n            state.takerTokenBalanceRemaining\n        );\n    }\n\n    // Convert possible proportional values to absolute quantities.\n    function _normalizeFillAmount(uint256 rawAmount, uint256 balance)\n        private\n        pure\n        returns (uint256 normalized)\n    {\n        if ((rawAmount & HIGH_BIT) == HIGH_BIT) {\n            // If the high bit of `rawAmount` is set then the lower 255 bits\n            // specify a fraction of `balance`.\n            return LibSafeMathV06.min256(\n                balance\n                    * LibSafeMathV06.min256(rawAmount & LOWER_255_BITS, 1e18)\n                    / 1e18,\n                balance\n            );\n        }\n        return rawAmount;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 19,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 16,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 20,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 15,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 18,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
        },
        "../errors/LibTransformERC20RichErrors.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibTransformERC20RichErrors {\n\n    // solhint-disable func-name-mixedcase,separate-by-one-line-in-contract\n\n    function InsufficientEthAttachedError(\n        uint256 ethAttached,\n        uint256 ethNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientEthAttachedError(uint256,uint256)\")),\n            ethAttached,\n            ethNeeded\n        );\n    }\n\n    function IncompleteTransformERC20Error(\n        address outputToken,\n        uint256 outputTokenAmount,\n        uint256 minOutputTokenAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteTransformERC20Error(address,uint256,uint256)\")),\n            outputToken,\n            outputTokenAmount,\n            minOutputTokenAmount\n        );\n    }\n\n    function NegativeTransformERC20OutputError(\n        address outputToken,\n        uint256 outputTokenLostAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"NegativeTransformERC20OutputError(address,uint256)\")),\n            outputToken,\n            outputTokenLostAmount\n        );\n    }\n\n    function TransformerFailedError(\n        address transformer,\n        bytes memory transformerData,\n        bytes memory resultData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransformerFailedError(address,bytes,bytes)\")),\n            transformer,\n            transformerData,\n            resultData\n        );\n    }\n\n    // Common Transformer errors ///////////////////////////////////////////////\n\n    function OnlyCallableByDeployerError(\n        address caller,\n        address deployer\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableByDeployerError(address,address)\")),\n            caller,\n            deployer\n        );\n    }\n\n    function InvalidExecutionContextError(\n        address actualContext,\n        address expectedContext\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidExecutionContextError(address,address)\")),\n            actualContext,\n            expectedContext\n        );\n    }\n\n    enum InvalidTransformDataErrorCode {\n        INVALID_TOKENS,\n        INVALID_ARRAY_LENGTH\n    }\n\n    function InvalidTransformDataError(\n        InvalidTransformDataErrorCode errorCode,\n        bytes memory transformData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidTransformDataError(uint8,bytes)\")),\n            errorCode,\n            transformData\n        );\n    }\n\n    // FillQuoteTransformer errors /////////////////////////////////////////////\n\n    function IncompleteFillSellQuoteError(\n        address sellToken,\n        uint256 soldAmount,\n        uint256 sellAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteFillSellQuoteError(address,uint256,uint256)\")),\n            sellToken,\n            soldAmount,\n            sellAmount\n        );\n    }\n\n    function IncompleteFillBuyQuoteError(\n        address buyToken,\n        uint256 boughtAmount,\n        uint256 buyAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteFillBuyQuoteError(address,uint256,uint256)\")),\n            buyToken,\n            boughtAmount,\n            buyAmount\n        );\n    }\n\n    function InsufficientTakerTokenError(\n        uint256 tokenBalance,\n        uint256 tokensNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientTakerTokenError(uint256,uint256)\")),\n            tokenBalance,\n            tokensNeeded\n        );\n    }\n\n    function InsufficientProtocolFeeError(\n        uint256 ethBalance,\n        uint256 ethNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientProtocolFeeError(uint256,uint256)\")),\n            ethBalance,\n            ethNeeded\n        );\n    }\n\n    function InvalidERC20AssetDataError(\n        bytes memory assetData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidERC20AssetDataError(bytes)\")),\n            assetData\n        );\n    }\n\n    function InvalidTakerFeeTokenError(\n        address token\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidTakerFeeTokenError(address)\")),\n            token\n        );\n    }\n}\n"
        },
        "../features/interfaces/INativeOrdersFeature.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\nimport \"./INativeOrdersEvents.sol\";\n\n\n/// @dev Feature for interacting with limit orders.\ninterface INativeOrdersFeature is\n    INativeOrdersEvents\n{\n\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\n    ///      the staking contract.\n    /// @param poolIds Staking pool IDs\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\n        external;\n\n    /// @dev Fill a limit order. The taker and sender will be the caller.\n    /// @param order The limit order. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      `msg.sender` (not `sender`).\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param sender The order sender.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        address sender\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order. Internal variant.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Cancel a single limit order. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The limit order.\n    function cancelLimitOrder(LibNativeOrder.LimitOrder calldata order)\n        external;\n\n    /// @dev Cancel a single RFQ order. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The RFQ order.\n    function cancelRfqOrder(LibNativeOrder.RfqOrder calldata order)\n        external;\n\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\n    ///      specifies the message sender as its txOrigin.\n    /// @param origins An array of origin addresses to update.\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedRfqOrigins(address[] memory origins, bool allowed)\n        external;\n\n    /// @dev Cancel multiple limit orders. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The limit orders.\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The RFQ orders.\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the order info for an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderInfo Info about the order.\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the canonical hash of a limit order.\n    /// @param order The limit order.\n    /// @return orderHash The order hash.\n    function getLimitOrderHash(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the canonical hash of an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderHash The order hash.\n    function getRfqOrderHash(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\n    ///      gas price to arrive at the required protocol fee to fill a native order.\n    /// @return multiplier The protocol fee multiplier.\n    function getProtocolFeeMultiplier()\n        external\n        view\n        returns (uint32 multiplier);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getRfqOrderRelevantState(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The limit orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetLimitOrderRelevantStates(\n        LibNativeOrder.LimitOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The RFQ orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetRfqOrderRelevantStates(\n        LibNativeOrder.RfqOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n}\n"
        },
        "../features/libs/LibSignature.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../../errors/LibSignatureRichErrors.sol\";\n\n\n/// @dev A library for validating signatures.\nlibrary LibSignature {\n    using LibRichErrorsV06 for bytes;\n\n    // '\\x19Ethereum Signed Message:\\n32\\x00\\x00\\x00\\x00' in a word.\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\n    ///      The valid range is given by fig (282) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\n    ///      The valid range is given by fig (283) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Retrieve the signer of a signature.\n    ///      Throws if the signature can't be validated.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    /// @return recovered The recovered signer address.\n    function getSignerOfHash(\n        bytes32 hash,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address recovered)\n    {\n        // Ensure this is a signature type that can be validated against a hash.\n        _validateHashCompatibleSignature(hash, signature);\n\n        if (signature.signatureType == SignatureType.EIP712) {\n            // Signed using EIP712\n            recovered = ecrecover(\n                hash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\n            // Signed using `eth_sign`\n            // Need to hash `hash` with \"\\x19Ethereum Signed Message:\\n32\" prefix\n            // in packed encoding.\n            bytes32 ethSignHash;\n            assembly {\n                // Use scratch space\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\n                mstore(28, hash) // length of 32 bytes\n                ethSignHash := keccak256(0, 60)\n            }\n            recovered = ecrecover(\n                ethSignHash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        }\n        // `recovered` can be null if the signature values are out of range.\n        if (recovered == address(0)) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n    }\n\n    /// @dev Validates that a signature is compatible with a hash signee.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    function _validateHashCompatibleSignature(\n        bytes32 hash,\n        Signature memory signature\n    )\n        private\n        pure\n    {\n        // Ensure the r and s are within malleability limits.\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\n        {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n\n        // Always illegal signature.\n        if (signature.signatureType == SignatureType.ILLEGAL) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\n                hash\n            ).rrevert();\n        }\n\n        // Always invalid.\n        if (signature.signatureType == SignatureType.INVALID) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\n                hash\n            ).rrevert();\n        }\n\n        // Solidity should check that the signature type is within enum range for us\n        // when abi-decoding.\n    }\n}\n"
        },
        "../errors/LibSignatureRichErrors.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSignatureRichErrors {\n\n    enum SignatureValidationErrorCodes {\n        ALWAYS_INVALID,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        WRONG_SIGNER,\n        BAD_SIGNATURE_DATA\n    }\n\n    // solhint-disable func-name-mixedcase\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32,address,bytes)\")),\n            code,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32)\")),\n            code,\n            hash\n        );\n    }\n}\n"
        },
        "../features/libs/LibNativeOrder.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\n\n\n/// @dev A library for common native order operations.\nlibrary LibNativeOrder {\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\n\n    // The type hash for limit orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"LimitOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"uint128 takerTokenFeeAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address sender,\",\n    //       \"address feeRecipient,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\n\n    // The type hash for RFQ orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"RfqOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\n\n    /// @dev Get the struct hash of a limit order.\n    /// @param order The limit order.\n    /// @return structHash The struct hash of the order.\n    function getLimitOrderStructHash(LimitOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.takerTokenFeeAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.sender,\n        //   order.feeRecipient,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.takerTokenFeeAmount;\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\n            // order.maker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.taker;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.sender;\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\n            // order.feeRecipient;\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\n            // order.pool;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            // order.expiry;\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\n            // order.salt;\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\n            structHash := keccak256(mem, 0x1A0)\n        }\n    }\n\n    /// @dev Get the struct hash of a RFQ order.\n    /// @param order The RFQ order.\n    /// @return structHash The struct hash of the order.\n    function getRfqOrderStructHash(RfqOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.pool;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            // order.expiry;\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\n            // order.salt;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            structHash := keccak256(mem, 0x160)\n        }\n    }\n\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\n        internal\n    {\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\n            (bool success,) = msg\n                .sender\n                .call{value: refundAmount}(\"\");\n            if (!success) {\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\n                    msg.sender,\n                    refundAmount\n                ).rrevert();\n            }\n        }\n    }\n}\n"
        },
        "../errors/LibNativeOrdersRichErrors.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibNativeOrdersRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function ProtocolFeeRefundFailed(\n        address receiver,\n        uint256 refundAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"ProtocolFeeRefundFailed(address,uint256)\")),\n            receiver,\n            refundAmount\n        );\n    }\n\n    function OrderNotFillableByOriginError(\n        bytes32 orderHash,\n        address txOrigin,\n        address orderTxOrigin\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByOriginError(bytes32,address,address)\")),\n            orderHash,\n            txOrigin,\n            orderTxOrigin\n        );\n    }\n\n    function OrderNotFillableError(\n        bytes32 orderHash,\n        uint8 orderStatus\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableError(bytes32,uint8)\")),\n            orderHash,\n            orderStatus\n        );\n    }\n\n    function OrderNotSignedByMakerError(\n        bytes32 orderHash,\n        address signer,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotSignedByMakerError(bytes32,address,address)\")),\n            orderHash,\n            signer,\n            maker\n        );\n    }\n\n    function OrderNotFillableBySenderError(\n        bytes32 orderHash,\n        address sender,\n        address orderSender\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableBySenderError(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            orderSender\n        );\n    }\n\n    function OrderNotFillableByTakerError(\n        bytes32 orderHash,\n        address taker,\n        address orderTaker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByTakerError(bytes32,address,address)\")),\n            orderHash,\n            taker,\n            orderTaker\n        );\n    }\n\n    function CancelSaltTooLowError(\n        uint256 minValidSalt,\n        uint256 oldMinValidSalt\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"CancelSaltTooLowError(uint256,uint256)\")),\n            minValidSalt,\n            oldMinValidSalt\n        );\n    }\n\n    function FillOrKillFailedError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"FillOrKillFailedError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n\n    function OnlyOrderMakerAllowed(\n        bytes32 orderHash,\n        address sender,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOrderMakerAllowed(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            maker\n        );\n    }\n\n    function BatchFillIncompleteError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"BatchFillIncompleteError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n}\n"
        },
        "../features/interfaces/INativeOrdersEvents.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\n/// @dev Events emitted by NativeOrdersFeature.\ninterface INativeOrdersEvents {\n\n    /// @dev Emitted whenever a `LimitOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param feeRecipient Fee recipient of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param protocolFeePaid How much protocol fee was paid.\n    /// @param pool The fee pool associated with this order.\n    event LimitOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address feeRecipient,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        uint128 takerTokenFeeFilledAmount,\n        uint256 protocolFeePaid,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever an `RfqOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param pool The fee pool associated with this order.\n    event RfqOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever a limit or RFQ order is cancelled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The order maker.\n    event OrderCancelled(\n        bytes32 orderHash,\n        address maker\n    );\n\n    /// @dev Emitted whenever Limit orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledLimitOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted whenever RFQ orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledRfqOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted when new addresses are allowed or disallowed to fill\n    ///      orders with a given txOrigin.\n    /// @param origin The address doing the allowing.\n    /// @param addrs The address being allowed/disallowed.\n    /// @param allowed Indicates whether the address should be allowed.\n    event RfqOrderOriginsAllowed(\n        address origin,\n        address[] addrs,\n        bool allowed\n    );\n}\n"
        },
        "./bridges/IBridgeAdapter.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBridgeAdapter {\n\n    struct BridgeOrder {\n        uint256 source;\n        uint256 takerTokenAmount;\n        uint256 makerTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Emitted when tokens are swapped with an external source.\n    /// @param source The unique ID for the source. See `BridgeSource.sol`\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token sold.\n    /// @param outputTokenAmount Amount of output token bought.\n    event BridgeFill(\n        uint256 source,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    function trade(\n        BridgeOrder calldata order,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n"
        },
        "./Transformer.sol": {
            "id": 10,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibTransformERC20RichErrors.sol\";\nimport \"./IERC20Transformer.sol\";\n\n\n/// @dev Abstract base class for transformers.\nabstract contract Transformer is\n    IERC20Transformer\n{\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The address of the deployer.\n    address public immutable deployer;\n    /// @dev The original address of this contract.\n    address internal immutable _implementation;\n\n    /// @dev Create this contract.\n    constructor() public {\n        deployer = msg.sender;\n        _implementation = address(this);\n    }\n\n    /// @dev Destruct this contract. Only callable by the deployer and will not\n    ///      succeed in the context of a delegatecall (from another contract).\n    /// @param ethRecipient The recipient of ETH held in this contract.\n    function die(address payable ethRecipient)\n        external\n        virtual\n    {\n        // Only the deployer can call this.\n        if (msg.sender != deployer) {\n            LibTransformERC20RichErrors\n                .OnlyCallableByDeployerError(msg.sender, deployer)\n                .rrevert();\n        }\n        // Must be executing our own context.\n        if (address(this) != _implementation) {\n            LibTransformERC20RichErrors\n                .InvalidExecutionContextError(address(this), _implementation)\n                .rrevert();\n        }\n        selfdestruct(ethRecipient);\n    }\n}\n"
        },
        "./IERC20Transformer.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev A transformation callback used in `TransformERC20.transformERC20()`.\ninterface IERC20Transformer {\n\n    /// @dev Context information to pass into `transform()` by `TransformERC20.transformERC20()`.\n    struct TransformContext {\n        // The caller of `TransformERC20.transformERC20()`.\n        address payable sender;\n        // taker The taker address, which may be distinct from `sender` in the case\n        // meta-transactions.\n        address payable taker;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Called from `TransformERC20.transformERC20()`. This will be\n    ///      delegatecalled in the context of the FlashWallet instance being used.\n    /// @param context Context information.\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\n    function transform(TransformContext calldata context)\n        external\n        returns (bytes4 success);\n}\n"
        },
        "./LibERC20Transformer.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\nlibrary LibERC20Transformer {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev ETH pseudo-token address.\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev ETH pseudo-token.\n    IERC20TokenV06 constant internal ETH_TOKEN = IERC20TokenV06(ETH_TOKEN_ADDRESS);\n    /// @dev Return value indicating success in `IERC20Transformer.transform()`.\n    ///      This is just `keccak256('TRANSFORMER_SUCCESS')`.\n    bytes4 constant internal TRANSFORMER_SUCCESS = 0x13c9929e;\n\n    /// @dev Transfer ERC20 tokens and ETH.\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\n    /// @param to The recipient.\n    /// @param amount The transfer amount.\n    function transformerTransfer(\n        IERC20TokenV06 token,\n        address payable to,\n        uint256 amount\n    )\n        internal\n    {\n        if (isTokenETH(token)) {\n            to.transfer(amount);\n        } else {\n            token.compatTransfer(to, amount);\n        }\n    }\n\n    /// @dev Check if a token is the ETH pseudo-token.\n    /// @param token The token to check.\n    /// @return isETH `true` if the token is the ETH pseudo-token.\n    function isTokenETH(IERC20TokenV06 token)\n        internal\n        pure\n        returns (bool isETH)\n    {\n        return address(token) == ETH_TOKEN_ADDRESS;\n    }\n\n    /// @dev Check the balance of an ERC20 token or ETH.\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\n    /// @param owner Holder of the tokens.\n    /// @return tokenBalance The balance of `owner`.\n    function getTokenBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 tokenBalance)\n    {\n        if (isTokenETH(token)) {\n            return owner.balance;\n        }\n        return token.balanceOf(owner);\n    }\n\n    /// @dev RLP-encode a 32-bit or less account nonce.\n    /// @param nonce A positive integer in the range 0 <= nonce < 2^32.\n    /// @return rlpNonce The RLP encoding.\n    function rlpEncodeNonce(uint32 nonce)\n        internal\n        pure\n        returns (bytes memory rlpNonce)\n    {\n        // See https://github.com/ethereum/wiki/wiki/RLP for RLP encoding rules.\n        if (nonce == 0) {\n            rlpNonce = new bytes(1);\n            rlpNonce[0] = 0x80;\n        } else if (nonce < 0x80) {\n            rlpNonce = new bytes(1);\n            rlpNonce[0] = byte(uint8(nonce));\n        } else if (nonce <= 0xFF) {\n            rlpNonce = new bytes(2);\n            rlpNonce[0] = 0x81;\n            rlpNonce[1] = byte(uint8(nonce));\n        } else if (nonce <= 0xFFFF) {\n            rlpNonce = new bytes(3);\n            rlpNonce[0] = 0x82;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[2] = byte(uint8(nonce));\n        } else if (nonce <= 0xFFFFFF) {\n            rlpNonce = new bytes(4);\n            rlpNonce[0] = 0x83;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF0000) >> 16));\n            rlpNonce[2] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[3] = byte(uint8(nonce));\n        } else {\n            rlpNonce = new bytes(5);\n            rlpNonce[0] = 0x84;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF000000) >> 24));\n            rlpNonce[2] = byte(uint8((nonce & 0xFF0000) >> 16));\n            rlpNonce[3] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[4] = byte(uint8(nonce));\n        }\n    }\n\n    /// @dev Compute the expected deployment address by `deployer` at\n    ///      the nonce given by `deploymentNonce`.\n    /// @param deployer The address of the deployer.\n    /// @param deploymentNonce The nonce that the deployer had when deploying\n    ///        a contract.\n    /// @return deploymentAddress The deployment address.\n    function getDeployedAddress(address deployer, uint32 deploymentNonce)\n        internal\n        pure\n        returns (address payable deploymentAddress)\n    {\n        // The address of if a deployed contract is the lower 20 bytes of the\n        // hash of the RLP-encoded deployer's account address + account nonce.\n        // See: https://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n        bytes memory rlpNonce = rlpEncodeNonce(deploymentNonce);\n        return address(uint160(uint256(keccak256(abi.encodePacked(\n            byte(uint8(0xC0 + 21 + rlpNonce.length)),\n            byte(uint8(0x80 + 20)),\n            deployer,\n            rlpNonce\n        )))));\n    }\n}\n"
        }
    },
    "sourceCodes": {
        "./FillQuoteTransformer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"../errors/LibTransformERC20RichErrors.sol\";\nimport \"../features/interfaces/INativeOrdersFeature.sol\";\nimport \"../features/libs/LibNativeOrder.sol\";\nimport \"./bridges/IBridgeAdapter.sol\";\nimport \"./Transformer.sol\";\nimport \"./LibERC20Transformer.sol\";\n\n/// @dev A transformer that fills an ERC20 market sell/buy quote.\n///      This transformer shortcuts bridge orders and fills them directly\ncontract FillQuoteTransformer is\n    Transformer\n{\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibERC20Transformer for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n    using LibSafeMathV06 for uint128;\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Whether we are performing a market sell or buy.\n    enum Side {\n        Sell,\n        Buy\n    }\n\n    enum OrderType {\n        Bridge,\n        Limit,\n        Rfq\n    }\n\n    struct LimitOrderInfo {\n        LibNativeOrder.LimitOrder order;\n        LibSignature.Signature signature;\n        // Maximum taker token amount of this limit order to fill.\n        uint256 maxTakerTokenFillAmount;\n    }\n\n    struct RfqOrderInfo {\n        LibNativeOrder.RfqOrder order;\n        LibSignature.Signature signature;\n        // Maximum taker token amount of this limit order to fill.\n        uint256 maxTakerTokenFillAmount;\n    }\n\n    /// @dev Transform data to ABI-encode and pass into `transform()`.\n    struct TransformData {\n        // Whether we are performing a market sell or buy.\n        Side side;\n        // The token being sold.\n        // This should be an actual token, not the ETH pseudo-token.\n        IERC20TokenV06 sellToken;\n        // The token being bought.\n        // This should be an actual token, not the ETH pseudo-token.\n        IERC20TokenV06 buyToken;\n\n        // External liquidity bridge orders. Sorted by fill sequence.\n        IBridgeAdapter.BridgeOrder[] bridgeOrders;\n        // Native limit orders. Sorted by fill sequence.\n        LimitOrderInfo[] limitOrders;\n        // Native RFQ orders. Sorted by fill sequence.\n        RfqOrderInfo[] rfqOrders;\n\n        // The sequence to fill the orders in. Each item will fill the next\n        // order of that type in either `bridgeOrders`, `limitOrders`,\n        // or `rfqOrders.`\n        OrderType[] fillSequence;\n\n        // Amount of `sellToken` to sell or `buyToken` to buy.\n        // For sells, setting the high-bit indicates that\n        // `sellAmount & LOW_BITS` should be treated as a `1e18` fraction of\n        // the current balance of `sellToken`, where\n        // `1e18+ == 100%` and `0.5e18 == 50%`, etc.\n        uint256 fillAmount;\n\n        // Who to transfer unused protocol fees to.\n        // May be a valid address or one of:\n        // `address(0)`: Stay in flash wallet.\n        // `address(1)`: Send to the taker.\n        // `address(2)`: Send to the sender (caller of `transformERC20()`).\n        address payable refundReceiver;\n    }\n\n    struct FillOrderResults {\n        // The amount of taker tokens sold, according to balance checks.\n        uint256 takerTokenSoldAmount;\n        // The amount of maker tokens sold, according to balance checks.\n        uint256 makerTokenBoughtAmount;\n        // The amount of protocol fee paid.\n        uint256 protocolFeePaid;\n    }\n\n    /// @dev Intermediate state variables to get around stack limits.\n    struct FillState {\n        uint256 ethRemaining;\n        uint256 boughtAmount;\n        uint256 soldAmount;\n        uint256 protocolFee;\n        uint256 takerTokenBalanceRemaining;\n        uint256[3] currentIndices;\n        OrderType currentOrderType;\n    }\n\n    /// @dev Emitted when a trade is skipped due to a lack of funds\n    ///      to pay the 0x Protocol fee.\n    /// @param orderHash The hash of the order that was skipped.\n    event ProtocolFeeUnfunded(bytes32 orderHash);\n\n    /// @dev The highest bit of a uint256 value.\n    uint256 private constant HIGH_BIT = 2 ** 255;\n    /// @dev Mask of the lower 255 bits of a uint256 value.\n    uint256 private constant LOWER_255_BITS = HIGH_BIT - 1;\n    /// @dev If `refundReceiver` is set to this address, unpsent\n    ///      protocol fees will be sent to the taker.\n    address private constant REFUND_RECEIVER_TAKER = address(1);\n    /// @dev If `refundReceiver` is set to this address, unpsent\n    ///      protocol fees will be sent to the sender.\n    address private constant REFUND_RECEIVER_SENDER = address(2);\n\n    /// @dev The BridgeAdapter address\n    IBridgeAdapter public immutable bridgeAdapter;\n\n    /// @dev The exchange proxy contract.\n    INativeOrdersFeature public immutable zeroEx;\n\n    /// @dev Create this contract.\n    /// @param bridgeAdapter_ The bridge adapter contract.\n    /// @param zeroEx_ The Exchange Proxy contract.\n    constructor(IBridgeAdapter bridgeAdapter_, INativeOrdersFeature zeroEx_)\n        public\n        Transformer()\n    {\n        bridgeAdapter = bridgeAdapter_;\n        zeroEx = zeroEx_;\n    }\n\n    /// @dev Sell this contract's entire balance of of `sellToken` in exchange\n    ///      for `buyToken` by filling `orders`. Protocol fees should be attached\n    ///      to this call. `buyToken` and excess ETH will be transferred back to the caller.\n    /// @param context Context information.\n    /// @return magicBytes The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\n    function transform(TransformContext calldata context)\n        external\n        override\n        returns (bytes4 magicBytes)\n    {\n        TransformData memory data = abi.decode(context.data, (TransformData));\n        FillState memory state;\n\n        // Validate data fields.\n        if (data.sellToken.isTokenETH() || data.buyToken.isTokenETH()) {\n            LibTransformERC20RichErrors.InvalidTransformDataError(\n                LibTransformERC20RichErrors.InvalidTransformDataErrorCode.INVALID_TOKENS,\n                context.data\n            ).rrevert();\n        }\n\n        if (data.bridgeOrders.length\n                + data.limitOrders.length\n                + data.rfqOrders.length != data.fillSequence.length\n        ) {\n            LibTransformERC20RichErrors.InvalidTransformDataError(\n                LibTransformERC20RichErrors.InvalidTransformDataErrorCode.INVALID_ARRAY_LENGTH,\n                context.data\n            ).rrevert();\n        }\n\n        state.takerTokenBalanceRemaining = data.sellToken.getTokenBalanceOf(address(this));\n        if (data.side == Side.Sell) {\n            data.fillAmount = _normalizeFillAmount(data.fillAmount, state.takerTokenBalanceRemaining);\n        }\n\n        // Approve the exchange proxy to spend our sell tokens if native orders\n        // are present.\n        if (data.limitOrders.length + data.rfqOrders.length != 0) {\n            data.sellToken.approveIfBelow(address(zeroEx), data.fillAmount);\n            // Compute the protocol fee if a limit order is present.\n            if (data.limitOrders.length != 0) {\n                state.protocolFee = uint256(zeroEx.getProtocolFeeMultiplier())\n                    .safeMul(tx.gasprice);\n            }\n        }\n\n        state.ethRemaining = address(this).balance;\n\n        // Fill the orders.\n        for (uint256 i = 0; i < data.fillSequence.length; ++i) {\n            // Check if we've hit our targets.\n            if (data.side == Side.Sell) {\n                // Market sell check.\n                if (state.soldAmount >= data.fillAmount) { break; }\n            } else {\n                // Market buy check.\n                if (state.boughtAmount >= data.fillAmount) { break; }\n            }\n\n            state.currentOrderType = OrderType(data.fillSequence[i]);\n            uint256 orderIndex = state.currentIndices[uint256(state.currentOrderType)];\n            // Fill the order.\n            FillOrderResults memory results;\n            if (state.currentOrderType == OrderType.Bridge) {\n                results = _fillBridgeOrder(data.bridgeOrders[orderIndex], data, state);\n            } else if (state.currentOrderType == OrderType.Limit) {\n                results = _fillLimitOrder(data.limitOrders[orderIndex], data, state);\n            } else if (state.currentOrderType == OrderType.Rfq) {\n                results = _fillRfqOrder(data.rfqOrders[orderIndex], data, state);\n            } else {\n                revert(\"INVALID_ORDER_TYPE\");\n            }\n\n            // Accumulate totals.\n            state.soldAmount = state.soldAmount\n                .safeAdd(results.takerTokenSoldAmount);\n            state.boughtAmount = state.boughtAmount\n                .safeAdd(results.makerTokenBoughtAmount);\n            state.ethRemaining = state.ethRemaining\n                .safeSub(results.protocolFeePaid);\n            state.takerTokenBalanceRemaining = state.takerTokenBalanceRemaining\n                .safeSub(results.takerTokenSoldAmount);\n            state.currentIndices[uint256(state.currentOrderType)]++;\n        }\n\n        // Ensure we hit our targets.\n        if (data.side == Side.Sell) {\n            // Market sell check.\n            if (state.soldAmount < data.fillAmount) {\n                LibTransformERC20RichErrors\n                    .IncompleteFillSellQuoteError(\n                        address(data.sellToken),\n                        state.soldAmount,\n                        data.fillAmount\n                    ).rrevert();\n            }\n        } else {\n            // Market buy check.\n            if (state.boughtAmount < data.fillAmount) {\n                LibTransformERC20RichErrors\n                    .IncompleteFillBuyQuoteError(\n                        address(data.buyToken),\n                        state.boughtAmount,\n                        data.fillAmount\n                    ).rrevert();\n            }\n        }\n\n        // Refund unspent protocol fees.\n        if (state.ethRemaining > 0 && data.refundReceiver != address(0)) {\n            bool transferSuccess;\n            if (data.refundReceiver == REFUND_RECEIVER_TAKER) {\n                (transferSuccess,) = context.taker.call{value: state.ethRemaining}(\"\");\n            } else if (data.refundReceiver == REFUND_RECEIVER_SENDER) {\n                (transferSuccess,) = context.sender.call{value: state.ethRemaining}(\"\");\n            } else {\n                (transferSuccess,) = data.refundReceiver.call{value: state.ethRemaining}(\"\");\n            }\n            require(transferSuccess, \"FillQuoteTransformer/ETHER_TRANSFER_FALIED\");\n        }\n        return LibERC20Transformer.TRANSFORMER_SUCCESS;\n    }\n\n    // Fill a single bridge order.\n    function _fillBridgeOrder(\n        IBridgeAdapter.BridgeOrder memory order,\n        TransformData memory data,\n        FillState memory state\n    )\n        private\n        returns (FillOrderResults memory results)\n    {\n        uint256 takerTokenFillAmount = _computeTakerTokenFillAmount(\n            data,\n            state,\n            order.takerTokenAmount,\n            order.makerTokenAmount,\n            0\n        );\n\n        (bool success, bytes memory resultData) = address(bridgeAdapter).delegatecall(\n            abi.encodeWithSelector(\n                IBridgeAdapter.trade.selector,\n                order,\n                data.sellToken,\n                data.buyToken,\n                takerTokenFillAmount\n            )\n        );\n        if (success) {\n            results.makerTokenBoughtAmount = abi.decode(resultData, (uint256));\n            results.takerTokenSoldAmount = takerTokenFillAmount;\n        }\n    }\n\n    // Fill a single limit order.\n    function _fillLimitOrder(\n        LimitOrderInfo memory orderInfo,\n        TransformData memory data,\n        FillState memory state\n    )\n        private\n        returns (FillOrderResults memory results)\n    {\n        uint256 takerTokenFillAmount = LibSafeMathV06.min256(\n            _computeTakerTokenFillAmount(\n                data,\n                state,\n                orderInfo.order.takerAmount,\n                orderInfo.order.makerAmount,\n                orderInfo.order.takerTokenFeeAmount\n            ),\n            orderInfo.maxTakerTokenFillAmount\n        );\n\n        // Emit an event if we do not have sufficient ETH to cover the protocol fee.\n        if (state.ethRemaining < state.protocolFee) {\n            bytes32 orderHash = zeroEx.getLimitOrderHash(orderInfo.order);\n            emit ProtocolFeeUnfunded(orderHash);\n            return results; // Empty results.\n        }\n\n        try\n            zeroEx.fillLimitOrder\n                {value: state.protocolFee}\n                (\n                    orderInfo.order,\n                    orderInfo.signature,\n                    takerTokenFillAmount.safeDowncastToUint128()\n                )\n            returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n        {\n            if (orderInfo.order.takerTokenFeeAmount > 0) {\n                takerTokenFilledAmount = takerTokenFilledAmount.safeAdd128(\n                    LibMathV06.getPartialAmountFloor(\n                        takerTokenFilledAmount,\n                        orderInfo.order.takerAmount,\n                        orderInfo.order.takerTokenFeeAmount\n                    ).safeDowncastToUint128()\n                );\n            }\n            results.takerTokenSoldAmount = takerTokenFilledAmount;\n            results.makerTokenBoughtAmount = makerTokenFilledAmount;\n            results.protocolFeePaid = state.protocolFee;\n        } catch {}\n    }\n\n    // Fill a single RFQ order.\n    function _fillRfqOrder(\n        RfqOrderInfo memory orderInfo,\n        TransformData memory data,\n        FillState memory state\n    )\n        private\n        returns (FillOrderResults memory results)\n    {\n        uint256 takerTokenFillAmount = LibSafeMathV06.min256(\n            _computeTakerTokenFillAmount(\n                data,\n                state,\n                orderInfo.order.takerAmount,\n                orderInfo.order.makerAmount,\n                0\n            ),\n            orderInfo.maxTakerTokenFillAmount\n        );\n\n        try\n            zeroEx.fillRfqOrder\n                (\n                    orderInfo.order,\n                    orderInfo.signature,\n                    takerTokenFillAmount.safeDowncastToUint128()\n                )\n            returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n        {\n            results.takerTokenSoldAmount = takerTokenFilledAmount;\n            results.makerTokenBoughtAmount = makerTokenFilledAmount;\n        } catch {}\n    }\n\n    // Compute the next taker token fill amount of a generic order.\n    function _computeTakerTokenFillAmount(\n        TransformData memory data,\n        FillState memory state,\n        uint256 orderTakerAmount,\n        uint256 orderMakerAmount,\n        uint256 orderTakerTokenFeeAmount\n    )\n        private\n        pure\n        returns (uint256 takerTokenFillAmount)\n    {\n        if (data.side == Side.Sell) {\n            takerTokenFillAmount = data.fillAmount.safeSub(state.soldAmount);\n            if (orderTakerTokenFeeAmount != 0) {\n                takerTokenFillAmount = LibMathV06.getPartialAmountCeil(\n                    takerTokenFillAmount,\n                    orderTakerAmount.safeAdd(orderTakerTokenFeeAmount),\n                    orderTakerAmount\n                );\n            }\n        } else { // Buy\n            takerTokenFillAmount = LibMathV06.getPartialAmountCeil(\n                data.fillAmount.safeSub(state.boughtAmount),\n                orderMakerAmount,\n                orderTakerAmount\n            );\n        }\n        return LibSafeMathV06.min256(\n            LibSafeMathV06.min256(takerTokenFillAmount, orderTakerAmount),\n            state.takerTokenBalanceRemaining\n        );\n    }\n\n    // Convert possible proportional values to absolute quantities.\n    function _normalizeFillAmount(uint256 rawAmount, uint256 balance)\n        private\n        pure\n        returns (uint256 normalized)\n    {\n        if ((rawAmount & HIGH_BIT) == HIGH_BIT) {\n            // If the high bit of `rawAmount` is set then the lower 255 bits\n            // specify a fraction of `balance`.\n            return LibSafeMathV06.min256(\n                balance\n                    * LibSafeMathV06.min256(rawAmount & LOWER_255_BITS, 1e18)\n                    / 1e18,\n                balance\n            );\n        }\n        return rawAmount;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "../errors/LibTransformERC20RichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibTransformERC20RichErrors {\n\n    // solhint-disable func-name-mixedcase,separate-by-one-line-in-contract\n\n    function InsufficientEthAttachedError(\n        uint256 ethAttached,\n        uint256 ethNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientEthAttachedError(uint256,uint256)\")),\n            ethAttached,\n            ethNeeded\n        );\n    }\n\n    function IncompleteTransformERC20Error(\n        address outputToken,\n        uint256 outputTokenAmount,\n        uint256 minOutputTokenAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteTransformERC20Error(address,uint256,uint256)\")),\n            outputToken,\n            outputTokenAmount,\n            minOutputTokenAmount\n        );\n    }\n\n    function NegativeTransformERC20OutputError(\n        address outputToken,\n        uint256 outputTokenLostAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"NegativeTransformERC20OutputError(address,uint256)\")),\n            outputToken,\n            outputTokenLostAmount\n        );\n    }\n\n    function TransformerFailedError(\n        address transformer,\n        bytes memory transformerData,\n        bytes memory resultData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransformerFailedError(address,bytes,bytes)\")),\n            transformer,\n            transformerData,\n            resultData\n        );\n    }\n\n    // Common Transformer errors ///////////////////////////////////////////////\n\n    function OnlyCallableByDeployerError(\n        address caller,\n        address deployer\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableByDeployerError(address,address)\")),\n            caller,\n            deployer\n        );\n    }\n\n    function InvalidExecutionContextError(\n        address actualContext,\n        address expectedContext\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidExecutionContextError(address,address)\")),\n            actualContext,\n            expectedContext\n        );\n    }\n\n    enum InvalidTransformDataErrorCode {\n        INVALID_TOKENS,\n        INVALID_ARRAY_LENGTH\n    }\n\n    function InvalidTransformDataError(\n        InvalidTransformDataErrorCode errorCode,\n        bytes memory transformData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidTransformDataError(uint8,bytes)\")),\n            errorCode,\n            transformData\n        );\n    }\n\n    // FillQuoteTransformer errors /////////////////////////////////////////////\n\n    function IncompleteFillSellQuoteError(\n        address sellToken,\n        uint256 soldAmount,\n        uint256 sellAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteFillSellQuoteError(address,uint256,uint256)\")),\n            sellToken,\n            soldAmount,\n            sellAmount\n        );\n    }\n\n    function IncompleteFillBuyQuoteError(\n        address buyToken,\n        uint256 boughtAmount,\n        uint256 buyAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IncompleteFillBuyQuoteError(address,uint256,uint256)\")),\n            buyToken,\n            boughtAmount,\n            buyAmount\n        );\n    }\n\n    function InsufficientTakerTokenError(\n        uint256 tokenBalance,\n        uint256 tokensNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientTakerTokenError(uint256,uint256)\")),\n            tokenBalance,\n            tokensNeeded\n        );\n    }\n\n    function InsufficientProtocolFeeError(\n        uint256 ethBalance,\n        uint256 ethNeeded\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InsufficientProtocolFeeError(uint256,uint256)\")),\n            ethBalance,\n            ethNeeded\n        );\n    }\n\n    function InvalidERC20AssetDataError(\n        bytes memory assetData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidERC20AssetDataError(bytes)\")),\n            assetData\n        );\n    }\n\n    function InvalidTakerFeeTokenError(\n        address token\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidTakerFeeTokenError(address)\")),\n            token\n        );\n    }\n}\n",
        "../features/interfaces/INativeOrdersFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\nimport \"./INativeOrdersEvents.sol\";\n\n\n/// @dev Feature for interacting with limit orders.\ninterface INativeOrdersFeature is\n    INativeOrdersEvents\n{\n\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\n    ///      the staking contract.\n    /// @param poolIds Staking pool IDs\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\n        external;\n\n    /// @dev Fill a limit order. The taker and sender will be the caller.\n    /// @param order The limit order. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      `msg.sender` (not `sender`).\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param sender The order sender.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        address sender\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order. Internal variant.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Cancel a single limit order. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The limit order.\n    function cancelLimitOrder(LibNativeOrder.LimitOrder calldata order)\n        external;\n\n    /// @dev Cancel a single RFQ order. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The RFQ order.\n    function cancelRfqOrder(LibNativeOrder.RfqOrder calldata order)\n        external;\n\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\n    ///      specifies the message sender as its txOrigin.\n    /// @param origins An array of origin addresses to update.\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedRfqOrigins(address[] memory origins, bool allowed)\n        external;\n\n    /// @dev Cancel multiple limit orders. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The limit orders.\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The RFQ orders.\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the order info for an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderInfo Info about the order.\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the canonical hash of a limit order.\n    /// @param order The limit order.\n    /// @return orderHash The order hash.\n    function getLimitOrderHash(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the canonical hash of an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderHash The order hash.\n    function getRfqOrderHash(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\n    ///      gas price to arrive at the required protocol fee to fill a native order.\n    /// @return multiplier The protocol fee multiplier.\n    function getProtocolFeeMultiplier()\n        external\n        view\n        returns (uint32 multiplier);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getRfqOrderRelevantState(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The limit orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetLimitOrderRelevantStates(\n        LibNativeOrder.LimitOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The RFQ orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetRfqOrderRelevantStates(\n        LibNativeOrder.RfqOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n}\n",
        "../features/libs/LibSignature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../../errors/LibSignatureRichErrors.sol\";\n\n\n/// @dev A library for validating signatures.\nlibrary LibSignature {\n    using LibRichErrorsV06 for bytes;\n\n    // '\\x19Ethereum Signed Message:\\n32\\x00\\x00\\x00\\x00' in a word.\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\n    ///      The valid range is given by fig (282) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\n    ///      The valid range is given by fig (283) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Retrieve the signer of a signature.\n    ///      Throws if the signature can't be validated.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    /// @return recovered The recovered signer address.\n    function getSignerOfHash(\n        bytes32 hash,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address recovered)\n    {\n        // Ensure this is a signature type that can be validated against a hash.\n        _validateHashCompatibleSignature(hash, signature);\n\n        if (signature.signatureType == SignatureType.EIP712) {\n            // Signed using EIP712\n            recovered = ecrecover(\n                hash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\n            // Signed using `eth_sign`\n            // Need to hash `hash` with \"\\x19Ethereum Signed Message:\\n32\" prefix\n            // in packed encoding.\n            bytes32 ethSignHash;\n            assembly {\n                // Use scratch space\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\n                mstore(28, hash) // length of 32 bytes\n                ethSignHash := keccak256(0, 60)\n            }\n            recovered = ecrecover(\n                ethSignHash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        }\n        // `recovered` can be null if the signature values are out of range.\n        if (recovered == address(0)) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n    }\n\n    /// @dev Validates that a signature is compatible with a hash signee.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    function _validateHashCompatibleSignature(\n        bytes32 hash,\n        Signature memory signature\n    )\n        private\n        pure\n    {\n        // Ensure the r and s are within malleability limits.\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\n        {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n\n        // Always illegal signature.\n        if (signature.signatureType == SignatureType.ILLEGAL) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\n                hash\n            ).rrevert();\n        }\n\n        // Always invalid.\n        if (signature.signatureType == SignatureType.INVALID) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\n                hash\n            ).rrevert();\n        }\n\n        // Solidity should check that the signature type is within enum range for us\n        // when abi-decoding.\n    }\n}\n",
        "../errors/LibSignatureRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSignatureRichErrors {\n\n    enum SignatureValidationErrorCodes {\n        ALWAYS_INVALID,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        WRONG_SIGNER,\n        BAD_SIGNATURE_DATA\n    }\n\n    // solhint-disable func-name-mixedcase\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32,address,bytes)\")),\n            code,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32)\")),\n            code,\n            hash\n        );\n    }\n}\n",
        "../features/libs/LibNativeOrder.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\n\n\n/// @dev A library for common native order operations.\nlibrary LibNativeOrder {\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\n\n    // The type hash for limit orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"LimitOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"uint128 takerTokenFeeAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address sender,\",\n    //       \"address feeRecipient,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\n\n    // The type hash for RFQ orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"RfqOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\n\n    /// @dev Get the struct hash of a limit order.\n    /// @param order The limit order.\n    /// @return structHash The struct hash of the order.\n    function getLimitOrderStructHash(LimitOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.takerTokenFeeAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.sender,\n        //   order.feeRecipient,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.takerTokenFeeAmount;\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\n            // order.maker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.taker;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.sender;\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\n            // order.feeRecipient;\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\n            // order.pool;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            // order.expiry;\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\n            // order.salt;\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\n            structHash := keccak256(mem, 0x1A0)\n        }\n    }\n\n    /// @dev Get the struct hash of a RFQ order.\n    /// @param order The RFQ order.\n    /// @return structHash The struct hash of the order.\n    function getRfqOrderStructHash(RfqOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.pool;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            // order.expiry;\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\n            // order.salt;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            structHash := keccak256(mem, 0x160)\n        }\n    }\n\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\n        internal\n    {\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\n            (bool success,) = msg\n                .sender\n                .call{value: refundAmount}(\"\");\n            if (!success) {\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\n                    msg.sender,\n                    refundAmount\n                ).rrevert();\n            }\n        }\n    }\n}\n",
        "../errors/LibNativeOrdersRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibNativeOrdersRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function ProtocolFeeRefundFailed(\n        address receiver,\n        uint256 refundAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"ProtocolFeeRefundFailed(address,uint256)\")),\n            receiver,\n            refundAmount\n        );\n    }\n\n    function OrderNotFillableByOriginError(\n        bytes32 orderHash,\n        address txOrigin,\n        address orderTxOrigin\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByOriginError(bytes32,address,address)\")),\n            orderHash,\n            txOrigin,\n            orderTxOrigin\n        );\n    }\n\n    function OrderNotFillableError(\n        bytes32 orderHash,\n        uint8 orderStatus\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableError(bytes32,uint8)\")),\n            orderHash,\n            orderStatus\n        );\n    }\n\n    function OrderNotSignedByMakerError(\n        bytes32 orderHash,\n        address signer,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotSignedByMakerError(bytes32,address,address)\")),\n            orderHash,\n            signer,\n            maker\n        );\n    }\n\n    function OrderNotFillableBySenderError(\n        bytes32 orderHash,\n        address sender,\n        address orderSender\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableBySenderError(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            orderSender\n        );\n    }\n\n    function OrderNotFillableByTakerError(\n        bytes32 orderHash,\n        address taker,\n        address orderTaker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByTakerError(bytes32,address,address)\")),\n            orderHash,\n            taker,\n            orderTaker\n        );\n    }\n\n    function CancelSaltTooLowError(\n        uint256 minValidSalt,\n        uint256 oldMinValidSalt\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"CancelSaltTooLowError(uint256,uint256)\")),\n            minValidSalt,\n            oldMinValidSalt\n        );\n    }\n\n    function FillOrKillFailedError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"FillOrKillFailedError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n\n    function OnlyOrderMakerAllowed(\n        bytes32 orderHash,\n        address sender,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOrderMakerAllowed(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            maker\n        );\n    }\n\n    function BatchFillIncompleteError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"BatchFillIncompleteError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n}\n",
        "../features/interfaces/INativeOrdersEvents.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\n/// @dev Events emitted by NativeOrdersFeature.\ninterface INativeOrdersEvents {\n\n    /// @dev Emitted whenever a `LimitOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param feeRecipient Fee recipient of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param protocolFeePaid How much protocol fee was paid.\n    /// @param pool The fee pool associated with this order.\n    event LimitOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address feeRecipient,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        uint128 takerTokenFeeFilledAmount,\n        uint256 protocolFeePaid,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever an `RfqOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param pool The fee pool associated with this order.\n    event RfqOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever a limit or RFQ order is cancelled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The order maker.\n    event OrderCancelled(\n        bytes32 orderHash,\n        address maker\n    );\n\n    /// @dev Emitted whenever Limit orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledLimitOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted whenever RFQ orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledRfqOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted when new addresses are allowed or disallowed to fill\n    ///      orders with a given txOrigin.\n    /// @param origin The address doing the allowing.\n    /// @param addrs The address being allowed/disallowed.\n    /// @param allowed Indicates whether the address should be allowed.\n    event RfqOrderOriginsAllowed(\n        address origin,\n        address[] addrs,\n        bool allowed\n    );\n}\n",
        "./bridges/IBridgeAdapter.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBridgeAdapter {\n\n    struct BridgeOrder {\n        uint256 source;\n        uint256 takerTokenAmount;\n        uint256 makerTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Emitted when tokens are swapped with an external source.\n    /// @param source The unique ID for the source. See `BridgeSource.sol`\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token sold.\n    /// @param outputTokenAmount Amount of output token bought.\n    event BridgeFill(\n        uint256 source,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    function trade(\n        BridgeOrder calldata order,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n",
        "./Transformer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibTransformERC20RichErrors.sol\";\nimport \"./IERC20Transformer.sol\";\n\n\n/// @dev Abstract base class for transformers.\nabstract contract Transformer is\n    IERC20Transformer\n{\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The address of the deployer.\n    address public immutable deployer;\n    /// @dev The original address of this contract.\n    address internal immutable _implementation;\n\n    /// @dev Create this contract.\n    constructor() public {\n        deployer = msg.sender;\n        _implementation = address(this);\n    }\n\n    /// @dev Destruct this contract. Only callable by the deployer and will not\n    ///      succeed in the context of a delegatecall (from another contract).\n    /// @param ethRecipient The recipient of ETH held in this contract.\n    function die(address payable ethRecipient)\n        external\n        virtual\n    {\n        // Only the deployer can call this.\n        if (msg.sender != deployer) {\n            LibTransformERC20RichErrors\n                .OnlyCallableByDeployerError(msg.sender, deployer)\n                .rrevert();\n        }\n        // Must be executing our own context.\n        if (address(this) != _implementation) {\n            LibTransformERC20RichErrors\n                .InvalidExecutionContextError(address(this), _implementation)\n                .rrevert();\n        }\n        selfdestruct(ethRecipient);\n    }\n}\n",
        "./IERC20Transformer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev A transformation callback used in `TransformERC20.transformERC20()`.\ninterface IERC20Transformer {\n\n    /// @dev Context information to pass into `transform()` by `TransformERC20.transformERC20()`.\n    struct TransformContext {\n        // The caller of `TransformERC20.transformERC20()`.\n        address payable sender;\n        // taker The taker address, which may be distinct from `sender` in the case\n        // meta-transactions.\n        address payable taker;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Called from `TransformERC20.transformERC20()`. This will be\n    ///      delegatecalled in the context of the FlashWallet instance being used.\n    /// @param context Context information.\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\n    function transform(TransformContext calldata context)\n        external\n        returns (bytes4 success);\n}\n",
        "./LibERC20Transformer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\nlibrary LibERC20Transformer {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev ETH pseudo-token address.\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev ETH pseudo-token.\n    IERC20TokenV06 constant internal ETH_TOKEN = IERC20TokenV06(ETH_TOKEN_ADDRESS);\n    /// @dev Return value indicating success in `IERC20Transformer.transform()`.\n    ///      This is just `keccak256('TRANSFORMER_SUCCESS')`.\n    bytes4 constant internal TRANSFORMER_SUCCESS = 0x13c9929e;\n\n    /// @dev Transfer ERC20 tokens and ETH.\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\n    /// @param to The recipient.\n    /// @param amount The transfer amount.\n    function transformerTransfer(\n        IERC20TokenV06 token,\n        address payable to,\n        uint256 amount\n    )\n        internal\n    {\n        if (isTokenETH(token)) {\n            to.transfer(amount);\n        } else {\n            token.compatTransfer(to, amount);\n        }\n    }\n\n    /// @dev Check if a token is the ETH pseudo-token.\n    /// @param token The token to check.\n    /// @return isETH `true` if the token is the ETH pseudo-token.\n    function isTokenETH(IERC20TokenV06 token)\n        internal\n        pure\n        returns (bool isETH)\n    {\n        return address(token) == ETH_TOKEN_ADDRESS;\n    }\n\n    /// @dev Check the balance of an ERC20 token or ETH.\n    /// @param token An ERC20 or the ETH pseudo-token address (`ETH_TOKEN_ADDRESS`).\n    /// @param owner Holder of the tokens.\n    /// @return tokenBalance The balance of `owner`.\n    function getTokenBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 tokenBalance)\n    {\n        if (isTokenETH(token)) {\n            return owner.balance;\n        }\n        return token.balanceOf(owner);\n    }\n\n    /// @dev RLP-encode a 32-bit or less account nonce.\n    /// @param nonce A positive integer in the range 0 <= nonce < 2^32.\n    /// @return rlpNonce The RLP encoding.\n    function rlpEncodeNonce(uint32 nonce)\n        internal\n        pure\n        returns (bytes memory rlpNonce)\n    {\n        // See https://github.com/ethereum/wiki/wiki/RLP for RLP encoding rules.\n        if (nonce == 0) {\n            rlpNonce = new bytes(1);\n            rlpNonce[0] = 0x80;\n        } else if (nonce < 0x80) {\n            rlpNonce = new bytes(1);\n            rlpNonce[0] = byte(uint8(nonce));\n        } else if (nonce <= 0xFF) {\n            rlpNonce = new bytes(2);\n            rlpNonce[0] = 0x81;\n            rlpNonce[1] = byte(uint8(nonce));\n        } else if (nonce <= 0xFFFF) {\n            rlpNonce = new bytes(3);\n            rlpNonce[0] = 0x82;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[2] = byte(uint8(nonce));\n        } else if (nonce <= 0xFFFFFF) {\n            rlpNonce = new bytes(4);\n            rlpNonce[0] = 0x83;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF0000) >> 16));\n            rlpNonce[2] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[3] = byte(uint8(nonce));\n        } else {\n            rlpNonce = new bytes(5);\n            rlpNonce[0] = 0x84;\n            rlpNonce[1] = byte(uint8((nonce & 0xFF000000) >> 24));\n            rlpNonce[2] = byte(uint8((nonce & 0xFF0000) >> 16));\n            rlpNonce[3] = byte(uint8((nonce & 0xFF00) >> 8));\n            rlpNonce[4] = byte(uint8(nonce));\n        }\n    }\n\n    /// @dev Compute the expected deployment address by `deployer` at\n    ///      the nonce given by `deploymentNonce`.\n    /// @param deployer The address of the deployer.\n    /// @param deploymentNonce The nonce that the deployer had when deploying\n    ///        a contract.\n    /// @return deploymentAddress The deployment address.\n    function getDeployedAddress(address deployer, uint32 deploymentNonce)\n        internal\n        pure\n        returns (address payable deploymentAddress)\n    {\n        // The address of if a deployed contract is the lower 20 bytes of the\n        // hash of the RLP-encoded deployer's account address + account nonce.\n        // See: https://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n        bytes memory rlpNonce = rlpEncodeNonce(deploymentNonce);\n        return address(uint160(uint256(keccak256(abi.encodePacked(\n            byte(uint8(0xC0 + 21 + rlpNonce.length)),\n            byte(uint8(0x80 + 20)),\n            deployer,\n            rlpNonce\n        )))));\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/michaelzhu/protocol/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/michaelzhu/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap",
                        "evm.methodIdentifiers"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
