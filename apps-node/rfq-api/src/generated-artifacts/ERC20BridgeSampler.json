{
    "schemaVersion": "2.0.0",
    "contractName": "ERC20BridgeSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [],
                "name": "ETH",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callDatas",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchCall",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bool",
                                "name": "success",
                                "type": "bool"
                            }
                        ],
                        "internalType": "struct ERC20BridgeSampler.CallResults[]",
                        "name": "callResults",
                        "type": "tuple[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    }
                ],
                "name": "getAllowanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "allowances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "getBalanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "balances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getBlockNumber",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getGasLeft",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableMakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableMakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature",
                        "name": "signature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableTakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    }
                ],
                "name": "getTokenDecimals",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "decimals",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "isContract",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "aToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "underlyingToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromAaveV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "l2Encoder",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "aToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "underlyingToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromAaveV3",
                "outputs": [
                    {
                        "internalType": "bytes32[]",
                        "name": "l2Params",
                        "type": "bytes32[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "vault",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct IBalancerV2Vault.BalancerV2PoolInfo",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "weth",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBancorV3",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract ICToken",
                        "name": "cToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromCompound",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IGMX",
                        "name": "reader",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "vault",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromGMX",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "stEthToken",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "wethToken",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "wstEthToken",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct LidoSampler.LidoInfo",
                        "name": "lidoInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLido",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromPlatypus",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IReadProxyAddressResolver",
                        "name": "readProxy",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "takerTokenSymbol",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "makerTokenSymbol",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromSynthetix",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "synthetix",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Factory",
                        "name": "factory",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "uniswapGasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IVelodromeRouter",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromVelodrome",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "stable",
                        "type": "bool"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IWooPP",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromWooPP",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IBalancerV2Vault",
                        "name": "vault",
                        "type": "address"
                    },
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint256",
                                "name": "assetInIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "assetOutIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "amount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "userData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IBalancerV2Vault.BatchSwapStep[]",
                        "name": "swapSteps",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "address[]",
                        "name": "swapAssets",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleMultihopBuysFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IBalancerV2Vault",
                        "name": "vault",
                        "type": "address"
                    },
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint256",
                                "name": "assetInIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "assetOutIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "amount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "userData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IBalancerV2Vault.BatchSwapStep[]",
                        "name": "swapSteps",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "address[]",
                        "name": "swapAssets",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleMultihopSellsFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "aToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "underlyingToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromAaveV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "l2Encoder",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "aToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "underlyingToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromAaveV3",
                "outputs": [
                    {
                        "internalType": "bytes32[]",
                        "name": "l2Params",
                        "type": "bytes32[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "vault",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct IBalancerV2Vault.BalancerV2PoolInfo",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "weth",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBancorV3",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract ICToken",
                        "name": "cToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCompound",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IGMX",
                        "name": "reader",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "vault",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromGMX",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "stEthToken",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "wethToken",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "wstEthToken",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct LidoSampler.LidoInfo",
                        "name": "lidoInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLido",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromPlatypus",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IReadProxyAddressResolver",
                        "name": "readProxy",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "takerTokenSymbol",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "makerTokenSymbol",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromSynthetix",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "synthetix",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Factory",
                        "name": "factory",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "uniswapGasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IVelodromeRouter",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromVelodrome",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "stable",
                        "type": "bool"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IWooPP",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromWooPP",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapTakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapMakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSingleSellFromMooniswapPool",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "numSamples",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopBuy",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "sellAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "numSamples",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopSell",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "buyAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "batchCall(bytes[])": {
                    "details": "Call multiple public functions on this contract in a single transaction.",
                    "params": {
                        "callDatas": "ABI-encoded call data for each function call."
                    },
                    "returns": {
                        "callResults": "ABI-encoded results data for each call."
                    }
                },
                "getLimitOrderFillableMakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "returns": {
                        "orderFillableMakerAssetAmounts": "How much maker asset can be filled         by each order in `orders`."
                    }
                },
                "getLimitOrderFillableTakerAmount((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),address)": {
                    "details": "Get the fillable taker amount of an order, taking into account      order state, maker fees, and maker balances."
                },
                "getLimitOrderFillableTakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native limit orders to query."
                    },
                    "returns": {
                        "orderFillableTakerAssetAmounts": "How much taker asset can be filled         by each order in `orders`."
                    }
                },
                "sampleBuysFromAaveV2(address,address,address,address,uint256[])": {
                    "details": "Sample buy quotes from AaveV2.",
                    "params": {
                        "aToken": "address of the aToken.",
                        "makerToken": "address of the maker token (what to buy).",
                        "makerTokenAmounts": "maker token sell amounts for each sample",
                        "takerToken": "address of the taker token (what to sell).",
                        "underlyingToken": "address of the underlying collateral token."
                    },
                    "returns": {
                        "takerTokenAmounts": "taker amounts bought at each maker token         amount."
                    }
                },
                "sampleBuysFromAaveV3(address,address,address,address,address,uint256[])": {
                    "details": "Sample buy quotes from AaveV3.",
                    "params": {
                        "aToken": "address of the aToken.",
                        "l2Encoder": "address of the l2 encoder.",
                        "makerToken": "address of the maker token (what to buy).",
                        "makerTokenAmounts": "maker token sell amounts for each sample",
                        "takerToken": "address of the taker token (what to sell).",
                        "underlyingToken": "address of the underlying collateral token."
                    },
                    "returns": {
                        "l2Params": "l2 encoded parameters for each sample",
                        "takerTokenAmounts": "taker amounts bought at each maker token         amount."
                    }
                },
                "sampleBuysFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBalancerV2((bytes32,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample buy quotes from Bancor. Unimplemented",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "path": "the selected conversion path from bancor",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBancorV3(address,address,address[],uint256[])": {
                    "details": "Sample buy quotes from BancorV3.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts",
                        "weth": "The WETH contract address"
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample buy quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample buy quotes from KyberDmm.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "pools": "The pool addresses involved in the multi path trade",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromLido((address,address,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from Lido.",
                    "params": {
                        "lidoInfo": "Info regarding a specific Lido deployment",
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "_0": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMStable(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from MStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "The contract address for the pool",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromShell(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromSynthetix(address,bytes32,bytes32,uint256[])": {
                    "details": "Sample buy quotes from Synthetix Atomic Swap.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample (sorted in ascending order).",
                        "makerTokenSymbol": "Symbol (currency key) of the maker token (what to buy).",
                        "takerTokenSymbol": "Symbol (currency key) of the taker token (what to sell)."
                    },
                    "returns": {
                        "synthetix": "Synthetix address.",
                        "takerTokenAmounts": "Taker amounts sold at each maker token amount."
                    }
                },
                "sampleBuysFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV2.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV3(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV3.",
                    "params": {
                        "factory": "UniswapV3 Factory contract.",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken (at most two hops)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token amount.",
                        "uniswapGasUsed": "Estimated amount of gas used",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                },
                "sampleBuysFromVelodrome(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Velodrome.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "router": "Address of Velodrome router.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "stable": "Whether the pool is a stable pool (vs volatile).",
                        "takerTokenAmounts": "Taker amounts sold at each maker token amount."
                    }
                },
                "sampleBuysFromWooPP(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from WooFI.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample (sorted in ascending order).",
                        "router": "Address of the router we are sampling from",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts bought at each taker token         amount."
                    }
                },
                "sampleMultihopBuysFromBalancerV2(address,(bytes32,uint256,uint256,uint256,bytes)[],address[],uint256[])": {
                    "details": "Sample buy quotes from Balancer V2 supporting multihops.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "swapAssets": "Array of token address for swaps.",
                        "swapSteps": "Array of swap steps (can be >= 1)."
                    }
                },
                "sampleMultihopSellsFromBalancerV2(address,(bytes32,uint256,uint256,uint256,bytes)[],address[],uint256[])": {
                    "details": "Sample sell quotes from Balancer V2 supporting multihops.",
                    "params": {
                        "swapAssets": "Array of token address for swaps.",
                        "swapSteps": "Array of swap steps (can be >= 1).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    }
                },
                "sampleSellsFromAaveV2(address,address,address,address,uint256[])": {
                    "details": "Sample sell quotes from AaveV2.",
                    "params": {
                        "aToken": "address of the aToken.",
                        "makerToken": "address of the maker token (what to buy).",
                        "takerToken": "address of the taker token (what to sell).",
                        "takerTokenAmounts": "taker token buy amounts for each sample",
                        "underlyingToken": "address of the underlying collateral token."
                    },
                    "returns": {
                        "makerTokenAmounts": "maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromAaveV3(address,address,address,address,address,uint256[])": {
                    "details": "Sample sell quotes from AaveV3.",
                    "params": {
                        "aToken": "address of the aToken.",
                        "l2Encoder": "address of the l2 encoder.",
                        "makerToken": "address of the maker token (what to buy).",
                        "takerToken": "address of the taker token (what to sell).",
                        "takerTokenAmounts": "taker token buy amounts for each sample",
                        "underlyingToken": "address of the underlying collateral token."
                    },
                    "returns": {
                        "l2Params": "l2 encoded parameters for each sample",
                        "makerTokenAmounts": "maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBalancerV2((bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample sell quotes from Bancor.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "path": "the selected conversion path from bancor"
                    }
                },
                "sampleSellsFromBancorV3(address,address,address[],uint256[])": {
                    "details": "Sample sell quotes from BancorV3.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "weth": "The WETH contract address"
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample sell quotes from KyberDmm.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pools": "The pool addresses involved in the multi path trade"
                    }
                },
                "sampleSellsFromLido((address,address,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Lido",
                    "params": {
                        "lidoInfo": "Info regarding a specific Lido deployment",
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "_0": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMStable(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the mStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMakerPsm((address,bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Maker PSM"
                },
                "sampleSellsFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "The contract address for the pool"
                    }
                },
                "sampleSellsFromShell(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromSynthetix(address,bytes32,bytes32,uint256[])": {
                    "details": "Sample sell quotes from Synthetix Atomic Swap.",
                    "params": {
                        "makerTokenSymbol": "Symbol (currency key) of the maker token (what to buy).",
                        "takerTokenAmounts": "Taker token sell amount for each sample (sorted in ascending order).",
                        "takerTokenSymbol": "Symbol (currency key) of the taker token (what to sell)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
                        "synthetix": "Synthetix address."
                    }
                },
                "sampleSellsFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Uniswap Router",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV2.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV3(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV3.",
                    "params": {
                        "factory": "UniswapV3 Factory contract.",
                        "path": "Token route. Should be takerToken -> makerToken (at most two hops).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
                        "uniswapGasUsed": "Estimated amount of gas used",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                },
                "sampleSellsFromVelodrome(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Velodrome",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of Velodrome router.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample (sorted in ascending order)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
                        "stable": "Whether the pool is a stable pool (vs volatile)."
                    }
                },
                "sampleSellsFromWooPP(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from WooFI.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the router we are sampling from",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample (sorted in ascending order)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH32 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE000000000000000000000000 PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0xCF72 PUSH3 0x5E PUSH1 0x0 CODECOPY DUP1 PUSH2 0x39F8 MSTORE DUP1 PUSH2 0x5A15 MSTORE DUP1 PUSH2 0x6A2D MSTORE POP PUSH2 0xCF72 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3C7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8322FFF2 GT PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xBD71ECF6 GT PUSH2 0x10D JUMPI DUP1 PUSH4 0xE065DE75 GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xF5A4994D GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0xBFE JUMPI DUP1 PUSH4 0xF6D6794A EQ PUSH2 0xC1E JUMPI DUP1 PUSH4 0xFAF1CEE0 EQ PUSH2 0xC3E JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0xC5E JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0xE065DE75 EQ PUSH2 0xB7E JUMPI DUP1 PUSH4 0xE382C95E EQ PUSH2 0xB9E JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0xBBE JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0xBDE JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0xCC130E83 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0xCC130E83 EQ PUSH2 0xAF0 JUMPI DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0xB10 JUMPI DUP1 PUSH4 0xDBBF62C2 EQ PUSH2 0xB30 JUMPI DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0xB5E JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0xA70 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0xA90 JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0xAB0 JUMPI DUP1 PUSH4 0xC9D350F9 EQ PUSH2 0xAD0 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x9EA0FF13 GT PUSH2 0x185 JUMPI DUP1 PUSH4 0xAA9EA72A GT PUSH2 0x154 JUMPI DUP1 PUSH4 0xAA9EA72A EQ PUSH2 0x9E2 JUMPI DUP1 PUSH4 0xAB80A910 EQ PUSH2 0xA02 JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0xA22 JUMPI DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0xA50 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x962 JUMPI DUP1 PUSH4 0xA0295B8B EQ PUSH2 0x982 JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x9A2 JUMPI DUP1 PUSH4 0xA76BBEC4 EQ PUSH2 0x9C2 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x918C2BBD GT PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x918C2BBD EQ PUSH2 0x8D4 JUMPI DUP1 PUSH4 0x9209483B EQ PUSH2 0x902 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x922 JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x942 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x8322FFF2 EQ PUSH2 0x843 JUMPI DUP1 PUSH4 0x849489A1 EQ PUSH2 0x865 JUMPI DUP1 PUSH4 0x8A2D1971 EQ PUSH2 0x885 JUMPI DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x8A5 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x42CBB15C GT PUSH2 0x2E2 JUMPI DUP1 PUSH4 0x66A1AC6B GT PUSH2 0x275 JUMPI DUP1 PUSH4 0x74C9D255 GT PUSH2 0x244 JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x7C3 JUMPI DUP1 PUSH4 0x77D375F2 EQ PUSH2 0x7E3 JUMPI DUP1 PUSH4 0x7F3E7F82 EQ PUSH2 0x803 JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x823 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x736 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x756 JUMPI DUP1 PUSH4 0x6EB9DAE5 EQ PUSH2 0x783 JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x7A3 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x57494B1D GT PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x6B6 JUMPI DUP1 PUSH4 0x5AAE4E53 EQ PUSH2 0x6D6 JUMPI DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x6F6 JUMPI DUP1 PUSH4 0x5E74363A EQ PUSH2 0x716 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x42CBB15C EQ PUSH2 0x630 JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0x652 JUMPI DUP1 PUSH4 0x51BE4EAA EQ PUSH2 0x672 JUMPI DUP1 PUSH4 0x5505000A EQ PUSH2 0x687 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x281E3432 GT PUSH2 0x35A JUMPI DUP1 PUSH4 0x3105FEC1 GT PUSH2 0x329 JUMPI DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x5A2 JUMPI DUP1 PUSH4 0x3583220F EQ PUSH2 0x5C2 JUMPI DUP1 PUSH4 0x4092E6B1 EQ PUSH2 0x5F0 JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x610 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x281E3432 EQ PUSH2 0x513 JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x533 JUMPI DUP1 PUSH4 0x2E1240F0 EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x582 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x16279055 GT PUSH2 0x396 JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x486 JUMPI DUP1 PUSH4 0x1976F526 EQ PUSH2 0x4B3 JUMPI DUP1 PUSH4 0x2339078F EQ PUSH2 0x4D3 JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x4F3 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x34EAFF9 EQ PUSH2 0x3D3 JUMPI DUP1 PUSH4 0x496D5DC EQ PUSH2 0x409 JUMPI DUP1 PUSH4 0x1022742B EQ PUSH2 0x437 JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x457 JUMPI PUSH2 0x3CE JUMP JUMPDEST CALLDATASIZE PUSH2 0x3CE JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x3EE CALLDATASIZE PUSH1 0x4 PUSH2 0xB996 JUMP JUMPDEST PUSH2 0xC7E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP2 SWAP1 PUSH2 0xC950 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x429 PUSH2 0x424 CALLDATASIZE PUSH1 0x4 PUSH2 0xB57D JUMP JUMPDEST PUSH2 0xEA0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP3 SWAP2 SWAP1 PUSH2 0xC8C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x443 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x452 CALLDATASIZE PUSH1 0x4 PUSH2 0xB80F JUMP JUMPDEST PUSH2 0x1046 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x477 PUSH2 0x472 CALLDATASIZE PUSH1 0x4 PUSH2 0xBBEA JUMP JUMPDEST PUSH2 0x11B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC83A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A6 PUSH2 0x4A1 CALLDATASIZE PUSH1 0x4 PUSH2 0xB172 JUMP JUMPDEST PUSH2 0x1319 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP2 SWAP1 PUSH2 0xC961 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x4CE CALLDATASIZE PUSH1 0x4 PUSH2 0xB94C JUMP JUMPDEST PUSH2 0x1323 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x4EE CALLDATASIZE PUSH1 0x4 PUSH2 0xBB8A JUMP JUMPDEST PUSH2 0x148E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x50E CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x16B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x52E CALLDATASIZE PUSH1 0x4 PUSH2 0xBD2E JUMP JUMPDEST PUSH2 0x1882 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x553 PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0xBC82 JUMP JUMPDEST PUSH2 0x1AD7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC96F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x57D CALLDATASIZE PUSH1 0x4 PUSH2 0xB522 JUMP JUMPDEST PUSH2 0x1DB4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x59D CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x2024 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x5BD CALLDATASIZE PUSH1 0x4 PUSH2 0xB57D JUMP JUMPDEST PUSH2 0x2182 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E2 PUSH2 0x5DD CALLDATASIZE PUSH1 0x4 PUSH2 0xB9FC JUMP JUMPDEST PUSH2 0x2306 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP3 SWAP2 SWAP1 PUSH2 0xC86E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x60B CALLDATASIZE PUSH1 0x4 PUSH2 0xB9DA JUMP JUMPDEST PUSH2 0x23D0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x61C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x62B CALLDATASIZE PUSH1 0x4 PUSH2 0xBC22 JUMP JUMPDEST PUSH2 0x263B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x645 PUSH2 0x27BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP2 SWAP1 PUSH2 0xC9AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x429 PUSH2 0x66D CALLDATASIZE PUSH1 0x4 PUSH2 0xB57D JUMP JUMPDEST PUSH2 0x27C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x645 PUSH2 0x294C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x693 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A7 PUSH2 0x6A2 CALLDATASIZE PUSH1 0x4 PUSH2 0xBA40 JUMP JUMPDEST PUSH2 0x2954 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC91A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x6D1 CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x2D11 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A7 PUSH2 0x6F1 CALLDATASIZE PUSH1 0x4 PUSH2 0xBA40 JUMP JUMPDEST PUSH2 0x3288 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x711 CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x3680 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x731 CALLDATASIZE PUSH1 0x4 PUSH2 0xBCA4 JUMP JUMPDEST PUSH2 0x36EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x742 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x751 CALLDATASIZE PUSH1 0x4 PUSH2 0xB80F JUMP JUMPDEST PUSH2 0x3744 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x762 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x776 PUSH2 0x771 CALLDATASIZE PUSH1 0x4 PUSH2 0xB657 JUMP JUMPDEST PUSH2 0x37F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP2 SWAP1 PUSH2 0xC93F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x78F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x79E CALLDATASIZE PUSH1 0x4 PUSH2 0xBCA4 JUMP JUMPDEST PUSH2 0x395A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x7BE CALLDATASIZE PUSH1 0x4 PUSH2 0xB708 JUMP JUMPDEST PUSH2 0x39A5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x477 PUSH2 0x7DE CALLDATASIZE PUSH1 0x4 PUSH2 0xBBEA JUMP JUMPDEST PUSH2 0x3A97 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x7FE CALLDATASIZE PUSH1 0x4 PUSH2 0xB3D5 JUMP JUMPDEST PUSH2 0x3AA6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x81E CALLDATASIZE PUSH1 0x4 PUSH2 0xB57D JUMP JUMPDEST PUSH2 0x3BAC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x83E CALLDATASIZE PUSH1 0x4 PUSH2 0xBD2E JUMP JUMPDEST PUSH2 0x3CBC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x84F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x858 PUSH2 0x3F09 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP2 SWAP1 PUSH2 0xC681 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x871 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x880 CALLDATASIZE PUSH1 0x4 PUSH2 0xBAA7 JUMP JUMPDEST PUSH2 0x3F21 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x891 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x8A0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB9DA JUMP JUMPDEST PUSH2 0x4048 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8C5 PUSH2 0x8C0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB698 JUMP JUMPDEST PUSH2 0x415A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCB92 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8F4 PUSH2 0x8EF CALLDATASIZE PUSH1 0x4 PUSH2 0xBAA7 JUMP JUMPDEST PUSH2 0x4480 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP3 SWAP2 SWAP1 PUSH2 0xC99C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x90E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x91D CALLDATASIZE PUSH1 0x4 PUSH2 0xBC22 JUMP JUMPDEST PUSH2 0x4653 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x92E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x93D CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x4853 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x94E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x645 PUSH2 0x95D CALLDATASIZE PUSH1 0x4 PUSH2 0xBCE8 JUMP JUMPDEST PUSH2 0x4D8C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x96E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x645 PUSH2 0x97D CALLDATASIZE PUSH1 0x4 PUSH2 0xB4CD JUMP JUMPDEST PUSH2 0x4ED1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x98E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x99D CALLDATASIZE PUSH1 0x4 PUSH2 0xBB8A JUMP JUMPDEST PUSH2 0x50E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x553 PUSH2 0x9BD CALLDATASIZE PUSH1 0x4 PUSH2 0xB5EE JUMP JUMPDEST PUSH2 0x52E3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x9DD CALLDATASIZE PUSH1 0x4 PUSH2 0xB996 JUMP JUMPDEST PUSH2 0x5420 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8F4 PUSH2 0x9FD CALLDATASIZE PUSH1 0x4 PUSH2 0xBAA7 JUMP JUMPDEST PUSH2 0x562F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xA1D CALLDATASIZE PUSH1 0x4 PUSH2 0xB3D5 JUMP JUMPDEST PUSH2 0x571A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA42 PUSH2 0xA3D CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x580C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP3 SWAP2 SWAP1 PUSH2 0xC9B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xA6B CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x595C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xA8B CALLDATASIZE PUSH1 0x4 PUSH2 0xB73C JUMP JUMPDEST PUSH2 0x59C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xAAB CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x5ABE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xABC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xACB CALLDATASIZE PUSH1 0x4 PUSH2 0xB57D JUMP JUMPDEST PUSH2 0x5C7B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xADC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E2 PUSH2 0xAEB CALLDATASIZE PUSH1 0x4 PUSH2 0xB9FC JUMP JUMPDEST PUSH2 0x5DE7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xB0B CALLDATASIZE PUSH1 0x4 PUSH2 0xB94C JUMP JUMPDEST PUSH2 0x5EFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x553 PUSH2 0xB2B CALLDATASIZE PUSH1 0x4 PUSH2 0xB5EE JUMP JUMPDEST PUSH2 0x606E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB50 PUSH2 0xB4B CALLDATASIZE PUSH1 0x4 PUSH2 0xB337 JUMP JUMPDEST PUSH2 0x615D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP3 SWAP2 SWAP1 PUSH2 0xC909 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x553 PUSH2 0xB79 CALLDATASIZE PUSH1 0x4 PUSH2 0xBC82 JUMP JUMPDEST PUSH2 0x6423 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB50 PUSH2 0xB99 CALLDATASIZE PUSH1 0x4 PUSH2 0xB337 JUMP JUMPDEST PUSH2 0x66B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xBB9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBAA7 JUMP JUMPDEST PUSH2 0x696C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xBD9 CALLDATASIZE PUSH1 0x4 PUSH2 0xB782 JUMP JUMPDEST PUSH2 0x69DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xBF9 CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x6ACF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA42 PUSH2 0xC19 CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x6C02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xC39 CALLDATASIZE PUSH1 0x4 PUSH2 0xB57D JUMP JUMPDEST PUSH2 0x6CEE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xC59 CALLDATASIZE PUSH1 0x4 PUSH2 0xB522 JUMP JUMPDEST PUSH2 0x6E67 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8C5 PUSH2 0xC79 CALLDATASIZE PUSH1 0x4 PUSH2 0xB698 JUMP JUMPDEST PUSH2 0x70C1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xC99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xCC3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x182DF0F5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD15 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD39 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD8A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDAE SWAP2 SWAP1 PUSH2 0xBEBC JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xE26 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE20 JUMPI DUP2 PUSH1 0xA EXP PUSH5 0x2540BE400 MUL DUP4 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xDF0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL DUP2 PUSH2 0xE00 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xE0D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xDD0 JUMP JUMPDEST POP PUSH2 0xE95 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xE95 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE93 JUMPI DUP3 DUP3 PUSH1 0xA EXP PUSH5 0x2540BE400 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL MUL DUP2 PUSH2 0xE73 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xE80 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xE43 JUMP JUMPDEST POP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xEBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEE7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0xEF4 DUP7 DUP7 PUSH2 0x7450 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xF06 JUMPI POP PUSH2 0x103E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x103B JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA8312B1D PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xF30 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF58 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCC1B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xFA6 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xFA3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xFE0 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xFD4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xFD9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x103B JUMP JUMPDEST DUP1 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xFF0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1004 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x101C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1032 JUMPI POP PUSH2 0x103B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xF09 JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x105F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1089 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x11B1 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x10B6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x10CA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10F1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCBD4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x113A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1137 SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x118E JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1168 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x116D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x117C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x11A9 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x119B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x108F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x11D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x11FF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1215 JUMPI PUSH2 0x130F JUMP JUMPDEST PUSH2 0x1221 DUP8 DUP8 DUP8 DUP8 PUSH2 0x7740 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x130D JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1252 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1277 SWAP3 SWAP2 SWAP1 PUSH2 0xC8E9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x128F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x12C0 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x12BD SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x12C9 JUMPI PUSH2 0x130D JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x12D6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x12EE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1304 JUMPI POP PUSH2 0x130D JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1229 JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x133E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1368 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x1373 PUSH2 0xA578 JUMP JUMPDEST PUSH2 0x137B PUSH2 0x7966 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE95 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1394 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x13A9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x13EB SWAP1 PUSH1 0x1 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xCA95 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1405 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x143A JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1437 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB7DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1443 JUMPI PUSH2 0xE95 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1452 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x146B JUMPI POP POP PUSH2 0xE95 JUMP JUMPDEST DUP1 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1478 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP PUSH1 0x1 ADD PUSH2 0x1380 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x149A DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x14D0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x14FE JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x152E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1558 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x1563 PUSH2 0xA578 JUMP JUMPDEST PUSH2 0x156B PUSH2 0x7966 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x16AB JUMPI PUSH1 0x60 PUSH2 0x1597 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x158A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x79D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x15CD SWAP1 PUSH1 0x0 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xCA95 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x161C JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1619 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB7DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1657 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x164A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x164F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0x16AB JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1669 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x1687 JUMPI POP POP POP PUSH2 0x16AB JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1694 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x1570 JUMP JUMPDEST POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x16C4 DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1706 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x1729 JUMPI PUSH2 0x1724 DUP8 DUP8 PUSH2 0x7A66 JUMP JUMPDEST PUSH2 0x172C JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x174E JUMPI PUSH2 0x1749 DUP9 DUP8 PUSH2 0x7A66 JUMP JUMPDEST PUSH2 0x1751 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE93 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x17B4 JUMPI PUSH2 0x1793 DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1786 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7AE5 JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x179F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x184E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x17DA JUMPI PUSH2 0x1793 DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1786 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x17F4 DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1786 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x1831 JUMPI PUSH2 0x1810 DUP6 PUSH4 0x9903D8B PUSH1 0xE2 SHL DUP4 PUSH2 0x7AE5 JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x181C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x184C JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x183F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x186E JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1862 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x1879 JUMPI POP PUSH2 0xE93 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1756 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x188E DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x190A SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1925 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x194F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x198B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x199F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19C3 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x1A66 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A2C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A50 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1A73 JUMPI POP POP POP PUSH2 0x1ACF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE93 JUMPI PUSH1 0x0 PUSH2 0x1AA1 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1A92 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x7BC8 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1AAE JUMPI POP PUSH2 0xE93 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1ABB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x1A76 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x1AE6 DUP6 DUP8 PUSH2 0x7995 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1AFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B28 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1B5B SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B87 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BAB SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1BC9 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x1C68 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1BFA SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C4A SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1C61 JUMPI POP POP PUSH2 0x130F JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CD9 SWAP2 SWAP1 PUSH2 0xB910 JUMP JUMPDEST PUSH2 0x1CE4 JUMPI POP POP PUSH2 0x130F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1DA7 JUMPI PUSH1 0x0 PUSH2 0x1D61 DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D0F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC6C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 DUP16 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D39 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC6C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1D54 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7E87 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D88 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1D9E JUMPI POP PUSH2 0x1DA7 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1CE7 JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1DCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1DF9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1E13 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1E6D JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1E4C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1E84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1EDE JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP5 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1EBD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA940EDAC DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1F05 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1F1A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1F2E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F54 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7F2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1F9C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1F99 SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1FD6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FCF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x201A JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1FE3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1FFB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2011 JUMPI POP PUSH2 0x201A JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1EE1 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2030 DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2048 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2072 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x20A1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7F2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2110 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x210D SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x213E JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FCF JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x214B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2163 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2179 JUMPI POP PUSH2 0x201A JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2078 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x219D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x21C7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x22FD JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x21F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x221A SWAP3 SWAP2 SWAP1 PUSH2 0xCC0D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2268 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2265 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x22A2 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2296 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x229B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x22FD JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x22B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x22C6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x22DE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x22F4 JUMPI POP PUSH2 0x22FD JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x21CD JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x2313 DUP7 PUSH2 0x7FC0 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x232B DUP8 PUSH8 0xDE0B6B3A7640000 DUP9 DUP9 PUSH2 0x80AC JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2370 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23C4 JUMPI DUP3 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x238B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x23A4 JUMPI INVALID JUMPDEST DIV DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x23B1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2376 JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x23EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2415 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF3535E6C DUP8 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2440 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2455 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x247B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC9E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x24C3 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x24C0 SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x24F1 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FCF JUMP JUMPDEST DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x24FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x2512 JUMPI POP PUSH2 0x201A JUMP JUMPDEST POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD7176CA9 DUP8 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2530 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2545 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2559 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2580 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCA0E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2597 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x25C7 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x25C4 SWAP2 DUP2 ADD SWAP1 PUSH2 0xBDE1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x25F5 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FCF JUMP JUMPDEST DUP2 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2602 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x261A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2631 JUMPI POP POP PUSH2 0x201A JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x241B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2656 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2680 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x26B7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x26D1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCAD8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x270F SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x274B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2750 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2774 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2771 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2781 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2799 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x27B1 JUMPI POP POP POP PUSH2 0x201A JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x2686 JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x27DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2807 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x2814 DUP7 DUP7 PUSH2 0x7450 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2826 JUMPI POP PUSH2 0x103E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x103B JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9E269B68 PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2850 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2878 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCC1B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2890 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x28C6 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x28C3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x28F4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xFD4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xFD9 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2901 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2915 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x292D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2943 JUMPI POP PUSH2 0x103B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2829 JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x2991 DUP8 PUSH20 0x5555555555555555555555555555555555555556 DUP9 DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2984 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x81DD JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x29AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x29D4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x29EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A22 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2A0D JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2A3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A66 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x2D06 JUMPI PUSH2 0x2A91 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2A84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x8223 JUMP JUMPDEST PUSH2 0x2A9A JUMPI PUSH2 0x2CFE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2AB9 DUP9 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2AAC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x8279 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x551E2BDF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x60 SWAP1 DUP2 SWAP1 PUSH20 0x5555555555555555555555555555555555555556 SWAP1 PUSH4 0x551E2BDF SWAP1 PUSH2 0x2AFC SWAP1 DUP15 SWAP1 DUP8 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0xC9C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2B25 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x2CFA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2B53 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2B58 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 PUSH2 0x2B64 DUP3 PUSH2 0x83D4 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP SWAP1 POP DUP1 PUSH2 0x2B7A JUMPI POP POP POP POP POP PUSH2 0x2CFE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2CF6 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2B92 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2BA7 JUMPI PUSH2 0x2CF6 JUMP JUMPDEST DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2BB3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2BC7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO PUSH2 0x2C4A JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2BE1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2BF5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP12 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C0E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2C25 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C39 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x2CEE JUMP JUMPDEST DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2C56 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C6A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ DUP1 ISZERO PUSH2 0x2CA4 JUMPI POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2C86 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C9A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT JUMPDEST ISZERO PUSH2 0x2CEE JUMPI DUP6 DUP12 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2CB6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2CCD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2CE1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2B7D JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2A6C JUMP JUMPDEST POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2D2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D58 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2D88 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2DA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2DB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2DD8 SWAP2 SWAP1 PUSH2 0xB910 JUMP JUMPDEST ISZERO DUP1 PUSH2 0x2E5D JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2E0B SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E37 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E5B SWAP2 SWAP1 PUSH2 0xB910 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2E69 JUMPI POP POP PUSH2 0x1ACF JUMP JUMPDEST PUSH2 0x2E71 PUSH2 0xA59F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2E9D SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2EB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2EC9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2EED SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2F1B SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F47 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F6B SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x2F9C SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2FB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2FC8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2FEC SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x301F SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3037 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x304B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x306F SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x30C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x30E9 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE93 JUMPI PUSH2 0x311C DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x3113 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x8436 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3128 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x313B JUMPI PUSH2 0xE93 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x316E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x319C SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCC7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x31B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x31E5 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x31E2 SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x321F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3213 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3218 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xE93 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x3237 SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 JUMPDEST DIV PUSH2 0x8436 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x3244 JUMPI POP PUSH2 0xE93 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3251 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3269 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x327F JUMPI POP PUSH2 0xE93 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x30F1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x3297 DUP7 PUSH2 0x8493 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x32C5 DUP9 PUSH20 0x5555555555555555555555555555555555555556 DUP5 DUP10 PUSH1 0x1 DUP12 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2984 JUMPI INVALID JUMPDEST SWAP1 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x32DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3308 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3356 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3341 JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x339A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x3674 JUMPI PUSH2 0x33B8 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2A84 JUMPI INVALID JUMPDEST PUSH2 0x33C1 JUMPI PUSH2 0x366C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x33D3 DUP5 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2AAC JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x196E65D PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x60 SWAP1 DUP2 SWAP1 PUSH20 0x5555555555555555555555555555555555555556 SWAP1 PUSH4 0x32DCCBA0 SWAP1 PUSH2 0x3416 SWAP1 DUP16 SWAP1 DUP8 SWAP1 DUP16 SWAP1 PUSH1 0x4 ADD PUSH2 0xC9C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x342E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x343F JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x3668 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x346D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3472 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 PUSH2 0x347E DUP3 PUSH2 0x83D4 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP SWAP1 POP DUP1 PUSH2 0x3494 JUMPI POP POP POP POP POP PUSH2 0x366C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x3664 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x34AC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x34C1 JUMPI PUSH2 0x3664 JUMP JUMPDEST DUP10 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x34CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x3508 JUMPI POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x34EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x34FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT JUMPDEST ISZERO PUSH2 0x35A6 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3519 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x352D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x355E DUP15 PUSH2 0x3559 DUP11 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x354C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x852B JUMP JUMPDEST PUSH2 0x8279 JUMP JUMPDEST DUP13 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x356A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3581 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3595 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x365C JUMP JUMPDEST DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x35B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x35C6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ DUP1 ISZERO PUSH2 0x3600 JUMPI POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x35E2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x35F6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT JUMPDEST ISZERO PUSH2 0x365C JUMPI PUSH2 0x3618 DUP15 PUSH2 0x3559 DUP11 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x354C JUMPI INVALID JUMPDEST DUP13 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3624 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x363B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x364F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3497 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x33A0 JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x36E6 SWAP1 DUP1 PUSH2 0x369F DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x36C6 SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x85C3 DUP2 MSTORE POP DUP4 PUSH2 0x86D7 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x36FB DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x372C JUMPI POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x3738 JUMPI POP DUP1 PUSH2 0x1ACF JUMP JUMPDEST PUSH2 0x36E6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x88E9 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3751 DUP5 DUP5 DUP5 PUSH2 0x1046 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x11B1 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x376B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x37F1 JUMPI PUSH2 0x37D8 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3789 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x379D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x37BE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x8B35 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x37E4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3756 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3811 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x384B JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x3838 PUSH2 0xA5CE JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3830 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x3953 JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3866 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x3884 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x3896 SWAP2 SWAP1 PUSH2 0xCCCC JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x38A3 JUMPI PUSH2 0x394B JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x38B0 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x38C2 SWAP2 SWAP1 PUSH2 0xCCCC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x38D0 SWAP3 SWAP2 SWAP1 PUSH2 0xC668 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x390D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3912 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x391F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3936 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x3851 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x398D JUMPI POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x3999 JUMPI POP DUP1 PUSH2 0x1ACF JUMP JUMPDEST PUSH2 0x36E6 DUP6 DUP5 DUP7 DUP6 PUSH2 0x88E9 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x39BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x39E8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x3A91 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3A2C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3A6C JUMPI PUSH2 0x3A67 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3A51 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8B59 JUMP JUMPDEST PUSH2 0x3A6F JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3A7E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x39EE JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3AC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3AEB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x3B20 JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x3B2E JUMPI DUP3 SWAP2 POP POP PUSH2 0x36E6 JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x3B60 JUMPI POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x3BA2 JUMPI PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3B98 JUMPI PUSH1 0x1 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B7E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD DUP1 MLOAD SWAP2 SWAP1 SWAP2 SUB SWAP1 MSTORE PUSH1 0x1 ADD PUSH2 0x3B68 JUMP JUMPDEST POP DUP3 SWAP2 POP POP PUSH2 0x36E6 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP1 DUP4 ADD DUP5 MSTORE SWAP3 DUP4 SWAP3 SWAP2 SWAP1 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x3BDD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3BF2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3C1F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x3C34 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x3CB1 SWAP1 DUP1 PUSH2 0x3C6A DUP9 DUP6 PUSH1 0x80 DUP5 ADD PUSH2 0xC81A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3C91 SWAP3 SWAP2 SWAP1 PUSH2 0xC81A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8C05 DUP2 MSTORE POP DUP5 PUSH2 0x86D7 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3CC8 DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3D0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3D20 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3D44 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3D5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3D89 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3DD9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3DFD SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x3EA0 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3E66 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3E8A SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x3EAD JUMPI POP POP POP PUSH2 0x1ACF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE93 JUMPI PUSH1 0x0 PUSH2 0x3EDB DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3ECC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x8D17 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x3EE8 JUMPI POP PUSH2 0xE93 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3EF5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x3EB0 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3F3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3F66 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE94803F4 DUP8 DUP8 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3F91 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FB7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7F2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3FE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4007 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4013 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x402B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4040 JUMPI PUSH2 0x201A JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3F6C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP1 DUP4 ADD DUP5 MSTORE SWAP3 DUP4 SWAP3 SWAP2 SWAP1 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x4079 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x408E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x40BB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x40D0 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x4150 SWAP1 DUP1 PUSH2 0x4107 DUP10 DUP10 DUP7 PUSH1 0x80 DUP6 ADD PUSH2 0xC734 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4130 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC734 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8FA9 DUP2 MSTORE POP DUP5 PUSH2 0x86D7 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4162 PUSH2 0xA5E6 JUMP JUMPDEST PUSH2 0x416A PUSH2 0xA5E6 JUMP JUMPDEST PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x41AC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x41C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x41F1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x4314 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x421A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x422F SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x426C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4271 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x430A JUMPI PUSH1 0x60 PUSH2 0x4288 DUP3 DUP11 PUSH2 0x90C3 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x1 DUP11 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4299 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x1 DUP12 SUB DUP2 MLOAD DUP2 LT PUSH2 0x42B0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x4308 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 JUMPDEST DUP10 DUP2 LT ISZERO PUSH2 0x4306 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x42DF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x42F3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x42CB JUMP JUMPDEST POP JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x41F7 JUMP JUMPDEST POP DUP1 PUSH1 0x1 DUP7 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4324 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x433A JUMPI POP PUSH2 0x4477 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x2D06 JUMPI PUSH2 0x4363 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4355 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0x9101 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x437D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x4392 SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x43CF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x43D4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x446D JUMPI PUSH1 0x60 PUSH2 0x43EB DUP3 DUP11 PUSH2 0x90C3 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x1 DUP11 SUB DUP2 MLOAD DUP2 LT PUSH2 0x43FC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x1 DUP12 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4413 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x446B JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 JUMPDEST DUP10 DUP2 LT ISZERO PUSH2 0x4469 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4442 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4456 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x442E JUMP JUMPDEST POP JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x433D JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x448E DUP5 DUP7 PUSH2 0x7995 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x44A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x44D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x44DF DUP8 DUP8 DUP8 DUP8 PUSH2 0x914C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP5 POP PUSH1 0x60 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x4502 PUSH2 0xA600 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x44FA JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 ISZERO ISZERO DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4553 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x23C4 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9881FCB4 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4584 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x45AA SWAP3 SWAP2 SWAP1 PUSH2 0xCC4F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x45C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x45D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x45FE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x460A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x461E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4636 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x464B JUMPI PUSH2 0x23C4 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x4561 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x46D5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x46CE SWAP1 DUP1 PUSH2 0x4687 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xCAF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x46AE SWAP3 SWAP2 SWAP1 PUSH2 0xCAF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x91E6 DUP2 MSTORE POP DUP4 PUSH2 0x86D7 JUMP JUMPDEST SWAP1 POP PUSH2 0x1ACF JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x46ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4717 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x474E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4768 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCAD8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x47A6 SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x47E2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x480B JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4808 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4818 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4830 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4848 JUMPI POP POP POP PUSH2 0x201A JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x471D JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4870 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x489A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x48CA SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x48E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x48F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x491A SWAP2 SWAP1 PUSH2 0xB910 JUMP JUMPDEST ISZERO DUP1 PUSH2 0x499F JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x494D SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4979 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x499D SWAP2 SWAP1 PUSH2 0xB910 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x49AB JUMPI POP POP PUSH2 0x1ACF JUMP JUMPDEST PUSH2 0x49B3 PUSH2 0xA59F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x49DF SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x49F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A0B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A2F SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x4A5D SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A89 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4AAD SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x4ADE SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4B2E SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x4B61 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B8D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4BB1 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C07 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4C2B SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE93 JUMPI DUP2 MLOAD PUSH2 0x4C51 SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x3231 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4C5D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x4C70 JUMPI PUSH2 0xE93 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x4CA3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4CD1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCC7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4CE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4D1A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4D17 SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4D48 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3213 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3218 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4D55 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4D6D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4D83 JUMPI POP PUSH2 0xE93 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x4D9C JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x4DB4 JUMPI POP PUSH1 0x1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x4DB2 JUMPI INVALID JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x4DCA JUMPI POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST DUP1 PUSH2 0x4DE0 JUMPI POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x4DED JUMPI POP PUSH1 0x0 PUSH2 0x3CB5 JUMP JUMPDEST PUSH2 0x4DF5 PUSH2 0xA620 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FB09795 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E26 SWAP3 SWAP2 SWAP1 PUSH2 0xCBB7 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4E52 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E76 SWAP2 SWAP1 PUSH2 0xBD50 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4E8F JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x4E9A JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0x4EAD JUMPI POP DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x4EBE JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x3CB5 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F02 SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4F2E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4F52 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x4F6C JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1ACF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4FFE JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x4FA9 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4FC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4FD5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4FF9 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH2 0x500A JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x501F JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x1ACF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3C2803F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x5054 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC7F2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x506C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x509D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x509A SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x50DD JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x50CB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x50D0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x1ACF JUMP JUMPDEST SWAP3 POP PUSH2 0x1ACF SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x50F3 DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5129 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x5157 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x51B1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x51BC PUSH2 0xA578 JUMP JUMPDEST PUSH2 0x51C4 PUSH2 0x7966 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x16AB JUMPI PUSH1 0x60 PUSH2 0x51E3 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x158A JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x5219 SWAP1 PUSH1 0x1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xCA95 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x5268 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5265 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB7DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5296 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x164A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x164F JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x52A5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x52BF JUMPI POP POP POP PUSH2 0x16AB JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x52CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x51C9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x52F2 DUP6 DUP8 PUSH2 0x7995 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x530A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5334 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x5343 DUP10 DUP10 DUP10 DUP10 PUSH2 0x924D JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x535B JUMPI POP PUSH2 0x5415 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5412 JUMPI PUSH1 0x0 PUSH2 0x53CC DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5380 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x53A4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x53BF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x93A2 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x53DB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x53F3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5409 JUMPI POP PUSH2 0x5412 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x535E JUMP JUMPDEST POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x543B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5465 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x182DF0F5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x54B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x54DB SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x552C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5550 SWAP2 SWAP1 PUSH2 0xBEBC JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x55C2 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE20 JUMPI DUP3 DUP3 PUSH1 0xA EXP PUSH5 0x2540BE400 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5591 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL MUL DUP2 PUSH2 0x55A2 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x55AF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5572 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xE95 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE93 JUMPI DUP2 PUSH1 0xA EXP PUSH5 0x2540BE400 MUL DUP4 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x55FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL DUP2 PUSH2 0x560F JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x561C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x55DF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x563D DUP5 DUP7 PUSH2 0x7995 JUMP JUMPDEST PUSH2 0x5649 DUP7 DUP6 DUP8 DUP7 PUSH2 0x914C JUMP JUMPDEST SWAP2 POP PUSH2 0x570F PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x569A SWAP3 SWAP2 SWAP1 PUSH2 0xCA43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x56EF SWAP3 SWAP2 SWAP1 PUSH2 0xCA43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9494 DUP2 MSTORE POP DUP5 PUSH2 0x86D7 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5735 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x575F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x5794 JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x57A2 JUMPI DUP3 SWAP2 POP POP PUSH2 0x36E6 JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x57D4 JUMPI POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x3BA2 JUMPI PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3B98 JUMPI PUSH1 0x1 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x57F2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD DUP1 MLOAD SWAP2 SWAP1 SWAP2 SUB SWAP1 MSTORE PUSH1 0x1 ADD PUSH2 0x57DC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x581A DUP5 DUP7 PUSH2 0x7995 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5832 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x585C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x58D1 JUMPI PUSH1 0x0 PUSH2 0x588B DUP10 DUP10 DUP10 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x587E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4ED1 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x589A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x58B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x58C8 JUMPI POP PUSH2 0x58D1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5862 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x5900 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x592C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5950 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x36E6 SWAP1 DUP1 PUSH2 0x597B DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x59A2 SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x95A9 DUP2 MSTORE POP DUP4 PUSH2 0x86D7 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x59DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5A05 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x3953 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5A49 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5A93 JUMPI PUSH2 0x5A8E DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5A6F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x95F0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x5A9F JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5AAB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5A0B JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5ACA DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5AE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5B0C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x5B2F JUMPI PUSH2 0x5B2A DUP8 DUP8 PUSH2 0x7A66 JUMP JUMPDEST PUSH2 0x5B32 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x5B54 JUMPI PUSH2 0x5B4F DUP9 DUP8 PUSH2 0x7A66 JUMP JUMPDEST PUSH2 0x5B57 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE93 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x5BAD JUMPI PUSH2 0x5B8C DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1786 JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5B98 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x5C47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x5BD3 JUMPI PUSH2 0x5B8C DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1786 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x5BED DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1786 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x5C2A JUMPI PUSH2 0x5C09 DUP5 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP4 PUSH2 0x7AE5 JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5C15 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x5C45 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5C38 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x5C67 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5C5B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x5C72 JUMPI POP PUSH2 0xE93 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5B5C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5C96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5CC0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x22FD JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5CED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D13 SWAP3 SWAP2 SWAP1 PUSH2 0xCC0D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5D61 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5D5E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5D8F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2296 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x229B JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5D9C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5DB0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5DC8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5DDE JUMPI POP PUSH2 0x22FD JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5CC6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x5DF4 DUP7 PUSH2 0x7FC0 JUMP JUMPDEST DUP4 MLOAD SWAP1 SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5E0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5E39 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP1 PUSH2 0x5E47 JUMPI POP PUSH2 0x5EF3 JUMP JUMPDEST PUSH2 0x5E67 DUP8 DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5E58 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP9 PUSH2 0x80AC JUMP JUMPDEST DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5E74 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5EF0 JUMPI DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5E97 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5EAB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5EC0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL DUP2 PUSH2 0x5ED0 JUMPI INVALID JUMPDEST DIV DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5EDD JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5E82 JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5F17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5F41 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x5F4C PUSH2 0xA578 JUMP JUMPDEST PUSH2 0x5F54 PUSH2 0x7966 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE95 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x5F6D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5F82 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x5FC4 SWAP1 PUSH1 0x0 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xCA95 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5FDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x6013 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6010 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB7DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x601C JUMPI PUSH2 0xE95 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x602E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x604B JUMPI POP POP PUSH2 0xE95 JUMP JUMPDEST DUP1 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6058 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP PUSH1 0x1 ADD PUSH2 0x5F59 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x607D DUP6 DUP8 PUSH2 0x7995 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6095 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x60BF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x60CE DUP10 DUP10 DUP10 DUP10 PUSH2 0x924D JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x60E6 JUMPI POP PUSH2 0x5415 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x614F SWAP1 DUP1 PUSH2 0x6106 DUP10 DUP8 DUP10 ISZERO PUSH1 0x80 DUP6 ADD PUSH2 0xC7A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x612F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x93A2 DUP2 MSTORE POP DUP7 PUSH2 0x86D7 JUMP JUMPDEST SWAP2 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x617A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x61A4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x61BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x61E7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x621C JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x6254 JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x6254 JUMPI POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x6416 JUMPI DUP4 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x6270 JUMPI POP PUSH2 0x6418 JUMP JUMPDEST DUP9 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x6413 JUMPI DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6347 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB76398E4 DUP10 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x62B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x62DA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC89C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6306 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x632A SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6336 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x640B JUMP JUMPDEST DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x640B JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5CC7BC10 DUP9 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x637D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x63A2 SWAP3 SWAP2 SWAP1 PUSH2 0xC88E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x63BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x63F2 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x63FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x6274 JUMP JUMPDEST POP POP JUMPDEST POP JUMPDEST SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x6432 DUP6 DUP8 PUSH2 0x7995 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x644A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6474 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x64A7 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x64D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x64F7 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x6515 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x65B4 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x6546 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x655E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6572 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6596 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x65AD JUMPI POP POP PUSH2 0x130F JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x65ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6601 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6625 SWAP2 SWAP1 PUSH2 0xB910 JUMP JUMPDEST PUSH2 0x6630 JUMPI POP POP PUSH2 0x130F JUMP JUMPDEST PUSH2 0x66A8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6659 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC6C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6688 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC6C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7E87 DUP2 MSTORE POP DUP8 PUSH2 0x86D7 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x66D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x66FD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6740 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x6775 JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x67AD JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x67AD JUMPI POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x6416 JUMPI DUP4 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x67C9 JUMPI POP PUSH2 0x6418 JUMP JUMPDEST DUP9 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x6413 JUMPI DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x68A0 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB76398E4 DUP10 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x680B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6833 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC89C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x684B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x685F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6883 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x688F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x6964 JUMP JUMPDEST DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6964 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5CC7BC10 DUP9 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x68D6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x68FB SWAP3 SWAP2 SWAP1 PUSH2 0xC88E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6913 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6927 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x694B SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6957 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x67CD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SWAP1 PUSH2 0x4150 SWAP1 DUP1 PUSH2 0x6991 DUP10 DUP9 DUP11 PUSH1 0x80 DUP6 ADD PUSH2 0xC9E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x69BA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC9E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x96BA DUP2 MSTORE POP DUP5 PUSH2 0x86D7 JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x69F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6A1D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x11B1 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6A61 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6AAD JUMPI PUSH2 0x6AA8 DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6A88 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9707 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x6AB0 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6ABC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6A23 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6AEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6B14 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6B43 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B69 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7F2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6B81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6BB2 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6BAF SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6BE0 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FCF JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6BED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x6B1A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x6C10 DUP5 DUP7 PUSH2 0x7995 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6C28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6C52 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x6CBD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6C76 SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6C9D SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x97D3 DUP2 MSTORE POP DUP6 PUSH2 0x86D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x5900 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC6AA JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6D09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6D33 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x22FD JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x43C2E2F5 DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6D5D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6D72 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x6D86 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6DAC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7F2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6DC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x6DF3 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6DF0 SWAP2 DUP2 ADD SWAP1 PUSH2 0xBDE1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6E21 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2296 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x229B JUMP JUMPDEST DUP2 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6E2E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6E46 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6E5D JUMPI POP POP PUSH2 0x22FD JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x6D39 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6E82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6EAC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6EC6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6F20 JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6EFF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6F37 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6F91 JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP5 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6F70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6E1A20BE DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6FB8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6FCD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x6FE1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7007 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7F2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x701F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x704F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x704C SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x707D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FCF JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x708A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x70A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x70B8 JUMPI POP PUSH2 0x201A JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6F94 JUMP JUMPDEST PUSH2 0x70C9 PUSH2 0xA5E6 JUMP JUMPDEST PUSH2 0x70D1 PUSH2 0xA5E6 JUMP JUMPDEST PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x70E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7113 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7143 JUMPI PUSH1 0x0 NOT DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7130 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7119 JUMP JUMPDEST POP PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x715C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7186 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x71B6 JUMPI PUSH1 0x0 NOT DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x71A3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x718C JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x72E9 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x71DD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x71F2 SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x722F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7234 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x72DF JUMPI PUSH1 0x60 PUSH2 0x724B DUP3 DUP11 PUSH2 0x90C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 DUP12 SUB DUP2 MLOAD DUP2 LT PUSH2 0x725E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x728D JUMPI POP DUP6 PUSH1 0x1 DUP12 SUB DUP2 MLOAD DUP2 LT PUSH2 0x7282 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 LT JUMPDEST ISZERO PUSH2 0x72DC JUMPI DUP5 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 JUMPDEST DUP11 DUP2 LT ISZERO PUSH2 0x72DA JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x72B3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x72C7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x729F JUMP JUMPDEST POP JUMPDEST POP POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x71BA JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 PUSH1 0x1 DUP8 SUB DUP2 MLOAD DUP2 LT PUSH2 0x72FC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ ISZERO PUSH2 0x7310 JUMPI POP PUSH2 0x4477 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x2D06 JUMPI PUSH2 0x732A DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4355 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x7344 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x7359 SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7396 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x739B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x7446 JUMPI PUSH1 0x60 PUSH2 0x73B2 DUP3 DUP11 PUSH2 0x90C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 DUP12 SUB DUP2 MLOAD DUP2 LT PUSH2 0x73C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x73F4 JUMPI POP DUP7 PUSH1 0x1 DUP12 SUB DUP2 MLOAD DUP2 LT PUSH2 0x73E9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 LT JUMPDEST ISZERO PUSH2 0x7443 JUMPI DUP5 DUP10 MSTORE PUSH1 0x20 DUP10 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 JUMPDEST DUP11 DUP2 LT ISZERO PUSH2 0x7441 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x741A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x742E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7406 JUMP JUMPDEST POP JUMPDEST POP POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x7313 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x748D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x74A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x74C5 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP4 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x74E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x750B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x7737 JUMPI PUSH1 0x60 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5B1DC86F PUSH3 0x249F0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x753B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x7552 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7577 SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x758F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x75C5 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x75C2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB623 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7633 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x75F3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x75F8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP1 JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7627 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH2 0x773A JUMP JUMPDEST DUP1 MLOAD PUSH2 0x7641 JUMPI PUSH1 0x0 DUP1 PUSH2 0x75FD JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x772B JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x765C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x769C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x76B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x76D4 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x7722 JUMPI DUP1 SWAP3 POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x76ED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x7701 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x7645 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 ADD PUSH2 0x7511 JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7794 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x77A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77CC SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x77E8 SWAP2 SWAP1 PUSH2 0xC9AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7800 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7814 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7838 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x784D JUMPI PUSH2 0x5EF3 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x5EF0 JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7870 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x7884 JUMPI PUSH2 0x795E JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x78A7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x78BF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x78E4 SWAP3 SWAP2 SWAP1 PUSH2 0xC8E9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x78FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x792D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x792A SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7936 JUMPI PUSH2 0x795E JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x795C JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7951 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x7851 JUMP JUMPDEST PUSH2 0x796E PUSH2 0xA578 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x79D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x79C7 SWAP1 PUSH2 0xCB0E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x79F6 PUSH2 0xA642 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x79EE JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7A54 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x7A95 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7AAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7AC1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3CB5 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x7AFB JUMPI PUSH2 0x103E JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7B1D SWAP2 SWAP1 PUSH2 0xC9AA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7B5B SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7B97 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7B9C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x7BBF JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7BBC SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7BFE SWAP2 SWAP1 PUSH2 0xC9AA JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7C2A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7C4E SWAP2 SWAP1 PUSH2 0xBE54 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP PUSH1 0x0 PUSH3 0xF4240 SWAP1 POP DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7D76 JUMPI PUSH1 0x0 PUSH2 0x7C8D DUP10 PUSH5 0xE8D4A51000 PUSH2 0x9823 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7CB1 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x7CAB DUP9 DUP6 PUSH2 0x9859 JUMP JUMPDEST SWAP1 PUSH2 0x9823 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x7CC9 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4150 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7D58 PUSH8 0xDE0B6B3A7640000 PUSH2 0x7D52 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7D13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7D27 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7D4B SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x9823 JUMP JUMPDEST SWAP1 PUSH2 0x9875 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7D66 DUP5 DUP4 PUSH2 0x989F JUMP JUMPDEST SWAP9 POP PUSH2 0x4150 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7E76 JUMPI DUP8 DUP5 DUP2 GT ISZERO PUSH2 0x7DAB JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x4150 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7DC7 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x7CAB DUP9 DUP6 PUSH2 0x989F JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x7DDF JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4150 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E64 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7E1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7E31 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7E55 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x9859 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7D66 DUP3 PUSH2 0x7D52 DUP7 DUP9 PUSH2 0x9823 JUMP JUMPDEST POP PUSH1 0x0 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7EA3 SWAP2 SWAP1 PUSH2 0xB1E8 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7F8D JUMPI PUSH1 0x40 MLOAD PUSH4 0x51400F0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x7EF6 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC9AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7F0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x7F3F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x7F3C SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7F81 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x7F6D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7F72 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x3CB5 JUMP JUMPDEST SWAP5 POP PUSH2 0x3CB5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x7EF6 SWAP1 DUP8 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xC88E JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4B83992 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7FFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x800F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8033 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x805C SWAP1 PUSH2 0xCB2B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8074 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8088 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x773A SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x80B8 DUP7 PUSH2 0x98BE JUMP JUMPDEST SWAP1 POP CHAINID PUSH1 0x1 DUP2 EQ ISZERO PUSH2 0x814F JUMPI PUSH1 0x40 MLOAD PUSH4 0xDC703E73 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xDC703E73 SWAP1 PUSH2 0x80F4 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xCC6F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x810C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8120 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8144 SWAP2 SWAP1 PUSH2 0xBE11 JUMP JUMPDEST POP SWAP1 SWAP4 POP PUSH2 0x201A SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3D142A8D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xF450AA34 SWAP1 PUSH2 0x817F SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xCC6F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x81AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x81CF SWAP2 SWAP1 PUSH2 0xBE11 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x2 EQ ISZERO PUSH2 0x81F5 JUMPI PUSH2 0x46CE DUP6 DUP6 DUP6 DUP6 PUSH2 0x995A JUMP JUMPDEST DUP3 MLOAD PUSH1 0x3 EQ ISZERO PUSH2 0x820B JUMPI PUSH2 0x46CE DUP6 DUP6 DUP6 DUP6 PUSH2 0x9AAC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x79C7 SWAP1 PUSH2 0xCB38 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x8270 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8247 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8268 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x131E JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x8227 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x8291 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x82AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x79C7 SWAP1 PUSH2 0xCB48 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x82CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x82F8 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x7737 JUMPI DUP1 ISZERO PUSH2 0x83A7 JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x8322 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8376 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x839A SWAP2 SWAP1 PUSH2 0xBD93 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x83B5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8302 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x1577DA33 PUSH1 0xE0 SHL EQ PUSH2 0x8403 JUMPI PUSH1 0x0 SWAP4 POP POP PUSH2 0x842F JUMP JUMPDEST DUP5 MLOAD PUSH1 0x3 NOT DUP2 ADD PUSH1 0x4 DUP8 ADD SWAP1 DUP2 MSTORE SWAP6 PUSH2 0x8424 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP1 PUSH1 0x24 ADD PUSH2 0xB8B3 JUMP JUMPDEST PUSH1 0x1 SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMPDEST SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x8453 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x844F JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x8462 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x773A JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x8480 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x773A JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x84AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x84D6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x3A91 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x84F7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x850B JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x84DC JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x8544 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x856E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x3A91 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x858F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x85A3 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x8574 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x85DC SWAP2 SWAP1 PUSH2 0xB1AE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x85F6 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xE8E4AF09 DUP4 DUP6 DUP5 PUSH2 0x860A DUP11 PUSH2 0x9CF0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8629 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC6FA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8641 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x8676 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8673 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x86B7 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x86A4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x86A9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x3CB5 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x86C4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x3CB5 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x86F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x871A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x872C JUMPI PUSH2 0x773A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x875D DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x8748 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x876A JUMPI POP PUSH2 0x773A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8787 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x8795 JUMPI POP POP PUSH2 0x773A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x88E0 JUMPI PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x8889 JUMPI PUSH2 0x87CC DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x87BD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP8 PUSH2 0x9D31 JUMP JUMPDEST SWAP5 POP DUP5 PUSH2 0x87D8 JUMPI PUSH2 0x8889 JUMP JUMPDEST PUSH2 0x87E7 PUSH2 0x2715 PUSH2 0x2710 DUP8 PUSH2 0x9D31 JUMP JUMPDEST SWAP5 POP DUP5 PUSH2 0x87F3 JUMPI PUSH2 0x8889 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8810 DUP10 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x0 ADD MLOAD DUP9 DUP13 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x881D JUMPI POP PUSH2 0x8889 JUMP JUMPDEST DUP1 SWAP5 POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x882C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 LT PUSH2 0x8880 JUMPI DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8846 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x885D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x886F JUMPI INVALID JUMPDEST DIV SWAP3 POP PUSH1 0x5 DUP4 GT PUSH2 0x8880 JUMPI POP PUSH2 0x8889 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x87A5 JUMP JUMPDEST POP DUP1 ISZERO DUP1 PUSH2 0x8897 JUMPI POP PUSH1 0x5 DUP2 GT JUMPDEST ISZERO PUSH2 0x88A2 JUMPI POP PUSH2 0x88E0 JUMP JUMPDEST PUSH2 0x88C0 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x88B1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x9D31 JUMP JUMPDEST DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x88CC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x8798 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP2 MLOAD PUSH1 0x60 SWAP2 SWAP1 DUP3 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x890B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8935 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x8972 JUMPI POP DUP8 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x8A3B JUMPI PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x8A30 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB0E38900 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x899D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x89C1 SWAP2 SWAP1 PUSH2 0xC9AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x89D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x89ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8A11 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8A1D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x897A JUMP JUMPDEST POP SWAP3 POP PUSH2 0x1ACF SWAP2 POP POP JUMP JUMPDEST DUP8 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x8A6C JUMPI POP DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x8B2A JUMPI PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x8A30 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBB2952FC DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x8A97 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8ABB SWAP2 SWAP1 PUSH2 0xC9AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8AD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8AE7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8B0B SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8B17 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x8A74 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP4 PUSH2 0x7D52 PUSH2 0x8B49 DUP3 PUSH1 0x1 PUSH2 0x989F JUMP JUMPDEST PUSH2 0x8B53 DUP9 DUP8 PUSH2 0x9823 JUMP JUMPDEST SWAP1 PUSH2 0x9859 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x8B97 SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8BD2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8BD7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x8BEB JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x8BFE JUMPI PUSH2 0x8BFB DUP2 PUSH1 0x0 PUSH2 0x9D89 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8C1E SWAP2 SWAP1 PUSH2 0xB2F0 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x7B6B3CA5 PUSH1 0xE1 SHL DUP6 DUP6 PUSH2 0x8C3B DUP11 PUSH2 0x9CF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8C4D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC83A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x8C8B SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8CC6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8CCB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x8CE2 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x3CB5 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8CF6 SWAP2 SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x8D02 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D4D SWAP2 SWAP1 PUSH2 0xC9AA JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8D65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8D79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8D9D SWAP2 SWAP1 PUSH2 0xBE54 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8EB4 JUMPI PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0x8E4D DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8E06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8E1A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8E3E SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x989F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8E67 DUP3 PUSH2 0x7D52 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x9823 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8E85 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x7CAB DUP10 DUP6 PUSH2 0x9859 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT PUSH2 0x8E9E JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x4150 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7D66 PUSH1 0x1 PUSH2 0x8B53 DUP6 PUSH5 0xE8D4A51000 PUSH2 0x9875 JUMP JUMPDEST DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8F99 JUMPI PUSH1 0x0 PUSH2 0x8EE3 DUP9 PUSH5 0xE8D4A51000 PUSH2 0x9823 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8F23 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7E1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8F3D PUSH8 0xDE0B6B3A7640000 PUSH2 0x7D52 DUP6 DUP6 PUSH2 0x9823 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x8F56 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4150 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8F72 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x7CAB DUP10 DUP6 PUSH2 0x989F JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x8F8B JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x4150 JUMP JUMPDEST POP SWAP6 POP PUSH2 0x4150 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8FC4 SWAP2 SWAP1 PUSH2 0xB249 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x4092E6B1 PUSH1 0xE0 SHL DUP7 DUP7 DUP7 PUSH2 0x8FE4 DUP13 PUSH2 0x9CF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8FF7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC761 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x9035 SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9070 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9075 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x908D JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x3CB5 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x90A1 SWAP2 SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x90AD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x60 SWAP1 PUSH1 0x20 PUSH1 0x2 DUP5 ADD MUL DUP2 SUB SWAP1 DUP3 PUSH2 0x90DE DUP7 DUP5 DUP5 PUSH2 0x9D95 JUMP JUMPDEST SWAP1 POP PUSH2 0x90ED DUP2 PUSH1 0x0 PUSH1 0x20 PUSH2 0x9E2B JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4150 SWAP2 SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x9147 JUMPI PUSH1 0x0 PUSH1 0x1 DUP3 DUP5 MLOAD SUB SUB PUSH1 0x20 MUL DUP5 MLOAD SUB SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x912C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH1 0x1 ADD PUSH2 0x9104 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH4 0x5E1E6325 DUP5 PUSH1 0x0 NOT DUP5 ADD DUP5 DUP2 LT PUSH2 0x916F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP8 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9197 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCBFF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x91AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x91C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8B2A SWAP2 SWAP1 PUSH2 0xBDB1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x91F1 PUSH2 0xA600 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x9205 SWAP2 SWAP1 PUSH2 0xBB5A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x921F SWAP2 SWAP1 PUSH2 0xBB3C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP6 DUP8 DUP7 PUSH2 0x923A DUP13 PUSH2 0x9CF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8FF7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCB58 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9280 SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x92AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x92D4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB623 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x936D JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x9312 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x932A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x933E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x9366 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB623 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x9382 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x5EF3 JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x938E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x93BC SWAP2 SWAP1 PUSH2 0xB2AD JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 ISZERO PUSH2 0x9460 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3CD0243B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x79A04876 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x93FC SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC68F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x9444 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x9441 SWAP2 DUP2 ADD SWAP1 PUSH2 0xBDE1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x9454 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x3CB5 JUMP JUMPDEST POP SWAP4 POP PUSH2 0x3CB5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x66410A21 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x66410A21 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x93FC SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC68F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x949F PUSH2 0xA600 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x94B3 SWAP2 SWAP1 PUSH2 0xBAC9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP3 SWAP5 POP SWAP1 SWAP3 POP PUSH1 0x60 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x94D9 PUSH2 0xA600 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x94D1 JUMPI SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x94FC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x26207F2D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x9881FCB4 SWAP1 PUSH2 0x9535 SWAP1 DUP9 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xCC4F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x954D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9561 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x9589 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x9595 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x95C2 SWAP2 SWAP1 PUSH2 0xB1AE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x95DC SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0x30D6570D DUP4 DUP6 DUP5 PUSH2 0x860A DUP11 PUSH2 0x9CF0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9618 SWAP2 SWAP1 PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x9656 SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9691 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9696 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x96AA JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x7737 JUMPI PUSH2 0x36E6 DUP2 PUSH1 0x0 PUSH2 0x9D89 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x96D4 SWAP2 SWAP1 PUSH2 0xBAF9 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x849489A1 PUSH1 0xE0 SHL DUP7 DUP7 DUP7 PUSH2 0x96F4 DUP13 PUSH2 0x9CF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8FF7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCA5E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9731 SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x976F SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x97AA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x97AF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x97C3 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x22FD JUMPI PUSH2 0x4150 DUP2 PUSH1 0x0 PUSH2 0x9D89 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x97EC SWAP2 SWAP1 PUSH2 0xB1AE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x9807 SWAP2 SWAP1 PUSH2 0xB1AE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x9817 DUP5 DUP5 DUP4 DUP10 PUSH2 0x4ED1 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x9832 JUMPI POP PUSH1 0x0 PUSH2 0x773A JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x983F JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3CB5 JUMPI PUSH2 0x3CB5 PUSH2 0x9854 PUSH1 0x1 DUP7 DUP7 PUSH2 0x9E36 JUMP JUMPDEST PUSH2 0x9E90 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x3CB5 JUMPI PUSH2 0x3CB5 PUSH2 0x9854 PUSH1 0x0 DUP7 DUP7 PUSH2 0x9E36 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x988B JUMPI PUSH2 0x988B PUSH2 0x9854 PUSH1 0x3 DUP6 DUP6 PUSH2 0x9E36 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x9896 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x98B8 JUMPI PUSH2 0x98B8 PUSH2 0x9854 PUSH1 0x2 DUP6 DUP6 PUSH2 0x9E36 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4B83992 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x98F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x990D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9931 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x805C SWAP1 PUSH2 0xCB1E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x9970 JUMPI SWAP1 POP POP SWAP1 POP PUSH2 0x998F PUSH2 0xA674 JUMP JUMPDEST PUSH2 0x9A0A PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x99C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x99EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH2 0x9E98 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0xE95 JUMPI PUSH1 0x0 DUP4 DUP3 PUSH1 0x2 DUP2 LT PUSH2 0x9A28 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9A5B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9A73 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9A87 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE POP PUSH1 0x1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x9A11 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x9AC4 JUMPI SWAP1 POP POP SWAP1 POP PUSH2 0x9AE3 PUSH2 0xA674 JUMP JUMPDEST PUSH2 0x9AEB PUSH2 0xA674 JUMP JUMPDEST PUSH2 0x9B66 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9B24 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x9B47 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE POP PUSH2 0x9E98 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x9B72 PUSH2 0xA674 JUMP JUMPDEST PUSH2 0x9BFD PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x9BAB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x9BCE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x9BF1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP1 MSTORE PUSH2 0x9E98 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x16AB JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x9CE7 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE SWAP1 SWAP2 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9C43 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x60 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9C5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP7 DUP4 PUSH1 0x2 DUP2 LT PUSH2 0x9C72 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9C84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP3 PUSH1 0x2 DUP2 LT PUSH2 0x9CB0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x9CC2 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE POP PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x9C10 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x9C04 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9D20 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x9D3E JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x9D47 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x9D54 JUMPI POP PUSH1 0x0 PUSH2 0x3CB5 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x9D61 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x9D71 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x3CB5 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x9D7F JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB5 DUP4 DUP4 PUSH2 0xA251 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP4 GT ISZERO PUSH2 0x9DAE JUMPI PUSH2 0x9DAE PUSH2 0x9854 PUSH1 0x0 DUP6 DUP6 PUSH2 0xA27B JUMP JUMPDEST DUP4 MLOAD DUP3 GT ISZERO PUSH2 0x9DC7 JUMPI PUSH2 0x9DC7 PUSH2 0x9854 PUSH1 0x1 DUP5 DUP8 MLOAD PUSH2 0xA27B JUMP JUMPDEST DUP3 DUP3 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x9DDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9E0A JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x3CB5 PUSH2 0x9E19 DUP3 PUSH2 0xA29A JUMP JUMPDEST DUP5 PUSH2 0x9E23 DUP8 PUSH2 0xA29A JUMP JUMPDEST ADD DUP4 MLOAD PUSH2 0xA2A0 JUMP JUMPDEST PUSH2 0x9147 DUP4 DUP4 DUP4 PUSH2 0xA345 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9E55 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCA6C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH2 0x9EA0 PUSH2 0xA674 JUMP JUMPDEST PUSH2 0x9EA8 PUSH2 0xA674 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP1 DUP4 ADD DUP5 MSTORE SWAP3 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x40 ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9EDA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP4 PUSH1 0x60 ADD MLOAD DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x9F0C JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP5 PUSH1 0x80 ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9F5B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x9F6F PUSH2 0xA692 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x64 DUP2 MSTORE PUSH2 0x1F4 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xBB8 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x2710 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST PUSH1 0x4 DUP2 LT ISZERO PUSH2 0xA248 JUMPI PUSH1 0x0 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP10 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0x60 ADD MLOAD DUP7 DUP7 PUSH1 0x4 DUP2 LT PUSH2 0x9FCF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FF2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA00A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA01E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA042 SWAP2 SWAP1 PUSH2 0xBA89 JUMP JUMPDEST SWAP1 POP PUSH2 0xA04D DUP2 PUSH2 0xA36C JUMP JUMPDEST PUSH2 0xA057 JUMPI POP PUSH2 0xA240 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA087 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x60 PUSH2 0xA0B3 DUP8 DUP4 PUSH2 0x8279 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x551E2BDF PUSH3 0x6DDD0 DUP13 PUSH1 0x0 ADD MLOAD DUP5 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA0F1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC9C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xA11B JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0xA23C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xA149 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA14E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 PUSH2 0xA15C DUP4 PUSH2 0x83D4 JUMP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0xA238 JUMPI DUP11 MLOAD DUP2 MLOAD DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xA176 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0xA1D6 JUMPI DUP11 MLOAD PUSH1 0x20 DUP1 DUP14 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP13 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP14 ADD MSTORE DUP1 MLOAD DUP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xA1AB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0xA1C0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP13 MSTORE PUSH2 0xA238 JUMP JUMPDEST DUP11 PUSH1 0x1 PUSH1 0x20 MUL ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA1EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0xA238 JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA206 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0xA21B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MSTORE DUP6 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 SWAP1 SWAP3 MUL ADD MSTORE JUMPDEST POP POP POP JUMPDEST POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x9F9B JUMP JUMPDEST POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0xA272 JUMPI PUSH2 0xA272 PUSH2 0x9854 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0xA27B JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9E55 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCA87 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA2CA JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x9147 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0xA2D7 JUMPI PUSH2 0x9147 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0xA311 JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xA309 JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0xA2EE JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x9147 JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP2 DUP7 SLT ISZERO PUSH2 0xA33C JUMPI DUP3 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xA320 JUMP JUMPDEST DUP6 MSTORE POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0xA364 JUMPI PUSH2 0xA364 PUSH2 0x9854 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0xA27B JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0xA37F JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x131E JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA3B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA3CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA3F1 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA41C SWAP2 SWAP1 PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA448 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA46C SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH2 0xA478 JUMPI POP PUSH1 0x0 PUSH2 0x131E JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA4B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA4C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA4E9 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA514 SWAP2 SWAP1 PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA52C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA540 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA564 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH2 0xA570 JUMPI POP PUSH1 0x0 PUSH2 0x131E JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCEBD JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCEBD JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA6D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA6EA PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST PUSH2 0xCD21 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xA70F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xA725 DUP9 DUP3 PUSH2 0xA6B0 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA712 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xA764 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xA789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xA79F DUP9 DUP3 PUSH2 0xA6BB JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA78C JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA7C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA7D4 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0xA7FC DUP9 DUP3 PUSH2 0xA6C6 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA7E6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xA824 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA83B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xA853 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA86B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA879 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0xA8A1 DUP9 DUP3 PUSH2 0xABF1 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA88B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA8C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA8D6 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xA8FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xA911 DUP9 DUP3 PUSH2 0xAC37 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA8FE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA938 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xA946 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xA96B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xA981 DUP9 DUP3 PUSH2 0xABD0 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA96E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA9A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA9B6 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0xA9DE DUP9 DUP3 PUSH2 0xAD12 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA9C8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xAA05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAA13 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH2 0x180 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xAA39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xAA4F DUP9 DUP3 PUSH2 0xAECF JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x180 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xAA3C JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xAA79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAA87 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x80 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xAAAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xAAC2 DUP9 DUP3 PUSH2 0xB072 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x80 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xAAAF JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xAAEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAAF9 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xAB1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xAB34 DUP9 DUP3 PUSH2 0xABC5 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xAB21 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xAB5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xAB69 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xAB8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xABA4 DUP9 DUP3 PUSH2 0xABD0 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xAB91 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCED1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCEDA JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCEDA JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCEE3 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCEE3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xAC02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAC10 PUSH2 0xA6E5 DUP3 PUSH2 0xCD67 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0xAC2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x88E0 DUP4 DUP3 DUP5 PUSH2 0xCE5A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCEEC JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCEEC JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCEF5 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCF02 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCF0F JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCF0F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAC8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAC95 PUSH1 0x40 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xACA3 DUP5 DUP5 PUSH2 0xABC5 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xACB4 DUP5 DUP5 DUP4 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xACD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xACDC PUSH1 0x40 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xACEA DUP5 DUP5 PUSH2 0xAC37 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xAD06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xACB4 DUP5 DUP3 DUP6 ADD PUSH2 0xA7B5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAD24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAD2E PUSH1 0xA0 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAD3C DUP5 DUP5 PUSH2 0xABC5 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xAD4D DUP5 DUP5 DUP4 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xAD61 DUP5 DUP3 DUP6 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xAD75 DUP5 DUP3 DUP6 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xAD94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xADA0 DUP5 DUP3 DUP6 ADD PUSH2 0xABF1 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xADBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xADC8 PUSH1 0x60 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xADD6 DUP5 DUP5 PUSH2 0xA6B0 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xADE7 DUP5 DUP5 DUP4 ADD PUSH2 0xABDB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xADFB DUP5 DUP3 DUP6 ADD PUSH2 0xABDB JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAE23 PUSH1 0x60 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAE31 DUP5 DUP5 PUSH2 0xA6BB JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xAE42 DUP5 DUP5 DUP4 ADD PUSH2 0xABE6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xADFB DUP5 DUP3 DUP6 ADD PUSH2 0xABE6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAE72 PUSH1 0x40 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xACA3 DUP5 DUP5 PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAE9C PUSH1 0x60 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAEAA DUP5 DUP5 PUSH2 0xA6B0 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xAEBB DUP5 DUP5 DUP4 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xADFB DUP5 DUP3 DUP6 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAEE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAEED PUSH2 0x180 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAEFB DUP5 DUP5 PUSH2 0xAC37 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xAF0C DUP5 DUP5 DUP4 ADD PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xAF20 DUP5 DUP3 DUP6 ADD PUSH2 0xB130 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xAF34 DUP5 DUP3 DUP6 ADD PUSH2 0xB130 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xAF48 DUP5 DUP3 DUP6 ADD PUSH2 0xB130 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0xAF5C DUP5 DUP3 DUP6 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0xAF70 DUP5 DUP3 DUP6 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0xAF84 DUP5 DUP3 DUP6 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0xAF99 DUP5 DUP3 DUP6 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0xAFAF DUP5 DUP3 DUP6 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 PUSH2 0xAFC5 DUP5 DUP3 DUP6 ADD PUSH2 0xB151 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 PUSH2 0xAFDB DUP5 DUP3 DUP6 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAFFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB004 PUSH1 0x60 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB012 DUP5 DUP5 PUSH2 0xA6B0 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xAEBB DUP5 DUP5 DUP4 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB035 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB03F PUSH1 0x60 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB04D DUP5 DUP5 PUSH2 0xABD0 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xB05E DUP5 DUP5 DUP4 ADD PUSH2 0xAC4D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xADFB DUP5 DUP3 DUP6 ADD PUSH2 0xB13B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB084 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB08E PUSH1 0x80 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB09C DUP5 DUP5 PUSH2 0xAC58 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xB0AD DUP5 DUP5 DUP4 ADD PUSH2 0xB15C JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xB0C1 DUP5 DUP3 DUP6 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xB0D5 DUP5 DUP3 DUP6 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB0F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB0FD PUSH1 0x60 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB10B DUP5 DUP5 PUSH2 0xA6BB JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xB11C DUP5 DUP5 DUP4 ADD PUSH2 0xA6BB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xADFB DUP5 DUP3 DUP6 ADD PUSH2 0xABBA JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCF18 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCF18 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCF21 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCF2A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCF33 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCF33 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xA6BB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB1C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB1CD DUP6 DUP6 PUSH2 0xA6BB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xA6BB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB20A DUP8 DUP8 PUSH2 0xA6BB JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xB21B DUP8 DUP3 DUP9 ADD PUSH2 0xA6BB JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xB22C DUP8 DUP3 DUP9 ADD PUSH2 0xA6BB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0xB23D DUP8 DUP3 DUP9 ADD PUSH2 0xA6BB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB25E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB26A DUP7 DUP7 PUSH2 0xA6BB JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xB27B DUP7 DUP3 DUP8 ADD PUSH2 0xA6BB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB297 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xA745 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB2CE DUP7 DUP7 PUSH2 0xA6BB JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xB2DF DUP7 DUP3 DUP8 ADD PUSH2 0xA6BB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xABBA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB30F DUP6 DUP6 PUSH2 0xA6BB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xA745 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xB350 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB35C DUP10 DUP10 PUSH2 0xA6B0 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0xB36D DUP10 DUP3 DUP11 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0xB37E DUP10 DUP3 DUP11 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0xB38F DUP10 DUP3 DUP11 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0xB3A0 DUP10 DUP3 DUP11 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB3BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB3C8 DUP10 DUP3 DUP11 ADD PUSH2 0xAADA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xB3ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB3F9 DUP9 DUP9 PUSH2 0xA6B0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0xB40A DUP9 DUP3 DUP10 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0xB41B DUP9 DUP3 DUP10 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0xB42C DUP9 DUP3 DUP10 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB454 DUP9 DUP3 DUP10 ADD PUSH2 0xAADA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB483 DUP8 DUP8 PUSH2 0xA6B0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xB494 DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xB4A5 DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB4C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB23D DUP8 DUP3 DUP9 ADD PUSH2 0xAADA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB4E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB4EF DUP8 DUP8 PUSH2 0xA6B0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xB500 DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xB511 DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0xB23D DUP8 DUP3 DUP9 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB538 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB544 DUP8 DUP8 PUSH2 0xA6B0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xB555 DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB571 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB4A5 DUP8 DUP3 DUP9 ADD PUSH2 0xA6C6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB59E DUP7 DUP7 PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB5BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5C6 DUP7 DUP3 DUP8 ADD PUSH2 0xA6C6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB5E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xAADA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xB606 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB612 DUP9 DUP9 PUSH2 0xA6B0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0xB40A DUP9 DUP3 DUP10 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB64B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ACF DUP5 DUP3 DUP6 ADD PUSH2 0xA745 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB66A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB680 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB68C DUP6 DUP3 DUP7 ADD PUSH2 0xA812 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB6AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB6C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6CF DUP7 DUP3 DUP8 ADD PUSH2 0xA85A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB6EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6F7 DUP7 DUP3 DUP8 ADD PUSH2 0xA85A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB71A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB730 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ACF DUP5 DUP3 DUP6 ADD PUSH2 0xA8B7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB74F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB765 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB771 DUP6 DUP3 DUP7 ADD PUSH2 0xA8B7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB797 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB7AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB7B9 DUP7 DUP3 DUP8 ADD PUSH2 0xA8B7 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xB7CA DUP7 DUP3 DUP8 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB7ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB803 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ACF DUP5 DUP3 DUP6 ADD PUSH2 0xA927 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB824 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB83A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB846 DUP7 DUP3 DUP8 ADD PUSH2 0xA9F4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB862 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB86E DUP7 DUP3 DUP8 ADD PUSH2 0xAA68 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB891 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB8A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ACF DUP5 DUP3 DUP6 ADD PUSH2 0xAB4A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB8C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB8DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB8E8 DUP6 DUP3 DUP7 ADD PUSH2 0xAB4A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB904 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xAB4A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB922 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xABBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB940 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xABD0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB962 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB96E DUP8 DUP8 PUSH2 0xAC37 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB98A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB555 DUP8 DUP3 DUP9 ADD PUSH2 0xA997 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB9AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB9B8 DUP8 DUP8 PUSH2 0xAC37 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xB9C9 DUP8 DUP3 DUP9 ADD PUSH2 0xAC37 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xB4A5 DUP8 DUP3 DUP9 ADD PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB9F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB544 DUP8 DUP8 PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBA12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBA1E DUP8 DUP8 PUSH2 0xAC37 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xBA2F DUP8 DUP3 DUP9 ADD PUSH2 0xABC5 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xB4A5 DUP8 DUP3 DUP9 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBA55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBA61 DUP7 DUP7 PUSH2 0xAC37 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xBA7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5C6 DUP7 DUP3 DUP8 ADD PUSH2 0xA8B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBA9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xAC42 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBABD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB483 DUP8 DUP8 PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBADC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBAE8 DUP6 DUP6 PUSH2 0xAC42 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xB0E1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBB0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBB1A DUP7 DUP7 PUSH2 0xAC42 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xBB2B DUP7 DUP3 DUP8 ADD PUSH2 0xA6BB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xA6BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBB4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xAC6E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBB6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBB79 DUP6 DUP6 PUSH2 0xAC6E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xAE07 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBBA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBBAC DUP8 DUP8 PUSH2 0xAC79 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0xBBBD DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0xBBCE DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB4C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBC00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xBC16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB483 DUP8 DUP3 DUP9 ADD PUSH2 0xACC0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBC38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBC44 DUP8 DUP8 PUSH2 0xADAC JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0xBC55 DUP8 DUP3 DUP9 ADD PUSH2 0xAC63 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0xBC66 DUP8 DUP3 DUP9 ADD PUSH2 0xAC63 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB4C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBC98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBBAC DUP8 DUP8 PUSH2 0xAE56 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBCBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBCC6 DUP8 DUP8 PUSH2 0xAE80 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0xBCD7 DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0xBC66 DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBCFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBD0A DUP7 DUP7 PUSH2 0xAECF JUMP JUMPDEST SWAP4 POP POP PUSH2 0x180 PUSH2 0xBD1C DUP7 DUP3 DUP8 ADD PUSH2 0xB072 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x200 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBD44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBCC6 DUP8 DUP8 PUSH2 0xAFE8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBD65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBD71 DUP7 DUP7 PUSH2 0xB023 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0xBD82 DUP7 DUP3 DUP8 ADD PUSH2 0xB13B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xABBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBDA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xB146 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBDC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBDD0 DUP6 DUP6 PUSH2 0xABD0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xABBA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBDF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBE00 DUP6 DUP6 PUSH2 0xABD0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xABD0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBE26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBE32 DUP7 DUP7 PUSH2 0xABD0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xBE43 DUP7 DUP3 DUP8 ADD PUSH2 0xABD0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xABD0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xBE6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBE78 DUP9 DUP9 PUSH2 0xABD0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0xBE89 DUP9 DUP3 DUP10 ADD PUSH2 0xABD0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0xBE9A DUP9 DUP3 DUP10 ADD PUSH2 0xABD0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0xBEAB DUP9 DUP3 DUP10 ADD PUSH2 0xABD0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0xB454 DUP9 DUP3 DUP10 ADD PUSH2 0xABD0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBECE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xB167 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBEE6 DUP4 DUP4 PUSH2 0xBF41 JUMP JUMPDEST POP POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBEE6 DUP4 DUP4 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB5 DUP4 DUP4 PUSH2 0xC1F7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB5 DUP4 DUP4 PUSH2 0xC393 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB5 DUP4 DUP4 PUSH2 0xC3F8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBF2A DUP4 DUP4 PUSH2 0xC60D JUMP JUMPDEST POP POP PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE23 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCD9B JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBF55 DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xBF5F DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP PUSH2 0xBF6A DUP4 PUSH2 0xA29A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBF98 JUMPI DUP2 MLOAD PUSH2 0xBF82 DUP9 DUP3 PUSH2 0xBEDA JUMP JUMPDEST SWAP8 POP PUSH2 0xBF8D DUP4 PUSH2 0xA29A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xBF6E JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBFAE DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xBFB8 DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP PUSH2 0xBFC3 DUP4 PUSH2 0xA29A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBF98 JUMPI DUP2 MLOAD PUSH2 0xBFDB DUP9 DUP3 PUSH2 0xBEEE JUMP JUMPDEST SWAP8 POP PUSH2 0xBFE6 DUP4 PUSH2 0xA29A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xBFC7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBFFC DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xC006 DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0xC018 DUP6 PUSH2 0xA29A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xC052 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0xC035 DUP6 DUP3 PUSH2 0xBEFA JUMP JUMPDEST SWAP5 POP PUSH2 0xC040 DUP4 PUSH2 0xA29A JUMP JUMPDEST PUSH1 0x20 SWAP11 SWAP1 SWAP11 ADD SWAP10 SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xC01C JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC06A DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xC074 DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0xC086 DUP6 PUSH2 0xA29A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xC052 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0xC0A3 DUP6 DUP3 PUSH2 0xBF06 JUMP JUMPDEST SWAP5 POP PUSH2 0xC0AE DUP4 PUSH2 0xA29A JUMP JUMPDEST PUSH1 0x20 SWAP11 SWAP1 SWAP11 ADD SWAP10 SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xC08A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC0CB DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xC0D5 DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0xC0E7 DUP6 PUSH2 0xA29A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xC052 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0xC104 DUP6 DUP3 PUSH2 0xBF12 JUMP JUMPDEST SWAP5 POP PUSH2 0xC10F DUP4 PUSH2 0xA29A JUMP JUMPDEST PUSH1 0x20 SWAP11 SWAP1 SWAP11 ADD SWAP10 SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xC0EB JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC12C DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xC136 DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP PUSH2 0xC141 DUP4 PUSH2 0xA29A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBF98 JUMPI DUP2 MLOAD PUSH2 0xC159 DUP9 DUP3 PUSH2 0xBF1E JUMP JUMPDEST SWAP8 POP PUSH2 0xC164 DUP4 PUSH2 0xA29A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xC145 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC17A DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xC184 DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP PUSH2 0xC18F DUP4 PUSH2 0xA29A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBF98 JUMPI DUP2 MLOAD PUSH2 0xC1A7 DUP9 DUP3 PUSH2 0xBEEE JUMP JUMPDEST SWAP8 POP PUSH2 0xC1B2 DUP4 PUSH2 0xA29A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xC193 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCDA6 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCDAB JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCDAE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1E4 DUP4 DUP6 PUSH2 0x131E JUMP JUMPDEST SWAP4 POP PUSH2 0xC1F1 DUP4 DUP6 DUP5 PUSH2 0xCE5A JUMP JUMPDEST POP POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC202 DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xC20C DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP PUSH2 0xC21C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xCE66 JUMP JUMPDEST PUSH2 0xC225 DUP2 PUSH2 0xCE92 JUMP JUMPDEST SWAP1 SWAP4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23A DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xC244 DUP2 DUP6 PUSH2 0x131E JUMP JUMPDEST SWAP4 POP PUSH2 0xC254 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xCE66 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCDBB JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE2E JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE39 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE44 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCDE4 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE4F JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC2A1 PUSH1 0x25 DUP4 PUSH2 0xCD92 JUMP JUMPDEST PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E DUP2 MSTORE PUSH5 0x2FA820A4A9 PUSH1 0xD9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH9 0x22BC31B430B733B2B9 PUSH1 0xB9 SHL SWAP1 MSTORE JUMP JUMPDEST PUSH9 0xA6F2DCE8D0CAE8D2F PUSH1 0xBB SHL SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC30A PUSH1 0x2E DUP4 PUSH2 0xCD92 JUMP JUMPDEST PUSH32 0x556E6973776170563353616D706C65722F756E737570706F7274656420746F6B DUP2 MSTORE PUSH14 0xCADC40E0C2E8D040D8CADCCEE8D PUSH1 0x93 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC35A PUSH1 0x24 DUP4 PUSH2 0xCD92 JUMP JUMPDEST PUSH32 0x556E69737761705633436F6D6D6F6E2F696E76616C69642070617468206C656E DUP2 MSTORE PUSH4 0x67746873 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 DUP5 ADD SWAP1 PUSH2 0xC3A7 DUP6 DUP3 PUSH2 0xC1C6 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0xC3BA PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0xC1C6 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0xC3CD PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0xC1C6 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xC3E0 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0xC1C6 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x80 DUP7 ADD MSTORE PUSH2 0x36E6 DUP3 DUP3 PUSH2 0xC1F7 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 DUP5 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0xC410 DUP3 DUP3 PUSH2 0xC1F7 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x11B1 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0xC1BD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0xC436 DUP5 DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xC449 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xC1CF JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xC45C PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xC1CF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0xC473 DUP5 DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xC486 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xC1BD JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xC499 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xC45C PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0xC1BD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0xC4C0 DUP6 DUP3 PUSH2 0xC1C6 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x36E6 DUP3 DUP3 PUSH2 0xC1F7 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x180 DUP4 ADD SWAP1 PUSH2 0xC4EA DUP5 DUP3 PUSH2 0xC25E JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xC4FD PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xC25E JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xC510 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xC644 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xC523 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0xC644 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0xC536 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0xC644 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0xC549 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0xC55C PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0xC56F PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0xC584 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH2 0x120 DUP3 ADD MLOAD PUSH2 0xC599 PUSH2 0x120 DUP6 ADD DUP3 PUSH2 0xC1C6 JUMP JUMPDEST POP PUSH2 0x140 DUP3 ADD MLOAD PUSH2 0xC5AE PUSH2 0x140 DUP6 ADD DUP3 PUSH2 0xC656 JUMP JUMPDEST POP PUSH2 0x160 DUP3 ADD MLOAD PUSH2 0xC45C PUSH2 0x160 DUP6 ADD DUP3 PUSH2 0xC1C6 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0xC5D4 DUP5 DUP3 PUSH2 0xC267 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xC5E7 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xC65F JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xC5FA PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xC1C6 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xC45C PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0xC1C6 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0xC61E DUP5 DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xC631 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xC45C PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xC1BD JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCDEA JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE09 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE11 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE1D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP3 DUP5 DUP7 PUSH2 0xC1D8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB5 DUP3 DUP5 PUSH2 0xC22F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x773A DUP3 DUP5 PUSH2 0xBF41 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC69D DUP3 DUP6 PUSH2 0xBF32 JUMP JUMPDEST PUSH2 0x3CB5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC6B8 DUP3 DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0x3CB5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xBF41 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xC6D3 DUP3 DUP8 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC6E0 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC6ED PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0x36E6 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xBF41 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xC708 DUP3 DUP8 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC715 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC722 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4150 DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC742 DUP3 DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC74F PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x36E6 DUP2 DUP5 PUSH2 0xBF4A JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xC76F DUP3 DUP8 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC77C PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0xBF41 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xC78E DUP2 DUP6 PUSH2 0xBF4A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4150 DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC7B0 DUP3 DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC7BD PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0x1ACF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xC1BD JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC7D8 DUP3 DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC7E5 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0x1ACF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xC64D JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC800 DUP3 DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC80D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0x1ACF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC828 DUP3 DUP6 PUSH2 0xBF41 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1ACF DUP2 DUP5 PUSH2 0xBF4A JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC848 DUP3 DUP7 PUSH2 0xBF41 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xC85A DUP2 DUP6 PUSH2 0xBF4A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x36E6 DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC87C DUP3 DUP6 PUSH2 0xBF41 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1ACF DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC69D DUP3 DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC8AA DUP3 DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC8B7 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xC1C6 JUMP JUMPDEST PUSH2 0x1ACF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xC28B JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC8D5 DUP2 DUP6 PUSH2 0xBF4A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1ACF DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC8FA DUP2 DUP6 PUSH2 0xBF4A JUMP JUMPDEST SWAP1 POP PUSH2 0x3CB5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC8D5 DUP2 DUP6 PUSH2 0xBFA3 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC92B DUP2 DUP7 PUSH2 0xBFF1 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xC85A DUP2 DUP6 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x3CB5 DUP2 DUP5 PUSH2 0xC0C0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x3CB5 DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x773A DUP3 DUP5 PUSH2 0xC1BD JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC97D DUP3 DUP7 PUSH2 0xC1BD JUMP JUMPDEST PUSH2 0xC98A PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x36E6 DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC87C DUP3 DUP6 PUSH2 0xC1BD JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x773A DUP3 DUP5 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC87C DUP3 DUP6 PUSH2 0xC25E JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC9D4 DUP3 DUP7 PUSH2 0xC25E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xC85A DUP2 DUP6 PUSH2 0xC1F7 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC9F4 DUP3 DUP7 PUSH2 0xC25E JUMP JUMPDEST PUSH2 0xCA01 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0x1ACF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xBF41 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xCA1C DUP3 DUP8 PUSH2 0xC25E JUMP JUMPDEST PUSH2 0xCA29 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xCA36 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0x36E6 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xCA51 DUP3 DUP6 PUSH2 0xC25E JUMP JUMPDEST PUSH2 0x3CB5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC60D JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xC708 DUP3 DUP8 PUSH2 0xC25E JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xCA7A DUP3 DUP7 PUSH2 0xC267 JUMP JUMPDEST PUSH2 0xC80D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xCA7A DUP3 DUP7 PUSH2 0xC270 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD PUSH2 0xCAA3 DUP3 DUP8 PUSH2 0xC279 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xCAB5 DUP2 DUP7 PUSH2 0xC05F JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xCAC9 DUP2 DUP6 PUSH2 0xBF4A JUMP JUMPDEST SWAP1 POP PUSH2 0x36E6 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xC462 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xCAE6 DUP3 DUP7 PUSH2 0xC282 JUMP JUMPDEST PUSH2 0xC80D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xC282 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xCB01 DUP3 DUP6 PUSH2 0xC282 JUMP JUMPDEST PUSH2 0x3CB5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC425 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x773A DUP2 PUSH2 0xC294 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x131E DUP3 PUSH2 0xC2DB JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x131E DUP3 PUSH2 0xC2EC JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x773A DUP2 PUSH2 0xC2FD JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x773A DUP2 PUSH2 0xC34D JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0xCB66 DUP3 DUP8 PUSH2 0xC425 JUMP JUMPDEST PUSH2 0xCB73 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0xC282 JUMP JUMPDEST PUSH2 0xCB80 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0xC282 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x4150 DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xCBA3 DUP2 DUP7 PUSH2 0xC4AC JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xC85A DUP2 DUP6 PUSH2 0xC4AC JUMP JUMPDEST PUSH2 0x200 DUP2 ADD PUSH2 0xCBC6 DUP3 DUP6 PUSH2 0xC4D8 JUMP JUMPDEST PUSH2 0x3CB5 PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0xC5C3 JUMP JUMPDEST PUSH2 0x220 DUP2 ADD PUSH2 0xCBE3 DUP3 DUP7 PUSH2 0xC4D8 JUMP JUMPDEST PUSH2 0xCBF1 PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0xC5C3 JUMP JUMPDEST PUSH2 0x1ACF PUSH2 0x200 DUP4 ADD DUP5 PUSH2 0xC25E JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC9F4 DUP3 DUP7 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC828 DUP3 DUP6 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xCC29 DUP3 DUP7 PUSH2 0xC1C6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xCC3B DUP2 DUP6 PUSH2 0xBF4A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x36E6 DUP2 DUP5 PUSH2 0xBF4A JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xCC5D DUP3 DUP6 PUSH2 0xC1C6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1ACF DUP2 DUP5 PUSH2 0xC121 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xCA7A DUP3 DUP7 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0xCC8B DUP3 DUP10 PUSH2 0xC1C6 JUMP JUMPDEST PUSH2 0xCC98 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0xC1C6 JUMP JUMPDEST PUSH2 0xCCA5 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0xC1C6 JUMP JUMPDEST PUSH2 0xCCB2 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0xC1C6 JUMP JUMPDEST PUSH2 0xCCBF PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0xC1C6 JUMP JUMPDEST PUSH2 0x8B2A PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT CALLDATASIZE DUP6 SWAP1 SUB ADD DUP2 SLT PUSH2 0xCCE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP5 ADD SWAP3 POP DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xCD01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0xCD19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xCD3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xCD5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xCD7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773A DUP3 PUSH2 0xCDFD JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773A DUP3 PUSH2 0xCD9B JUMP JUMPDEST DUP1 PUSH2 0x131E DUP2 PUSH2 0xCE9C JUMP JUMPDEST DUP1 PUSH2 0x131E DUP2 PUSH2 0xCEA9 JUMP JUMPDEST DUP1 PUSH2 0x131E DUP2 PUSH2 0xCEB3 JUMP JUMPDEST PUSH1 0xF SIGNEXTEND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773A DUP3 PUSH2 0xCDBB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773A DUP3 PUSH2 0xCDC6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773A DUP3 PUSH2 0xCDD0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773A DUP3 PUSH2 0xCDDA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773A DUP3 PUSH2 0xCDF6 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCE81 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCE69 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xC45C JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0xCEA6 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x8 DUP2 LT PUSH2 0xCEA6 JUMPI INVALID JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0xCEA6 JUMPI INVALID JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCD9B JUMP JUMPDEST DUP2 EQ PUSH2 0xCEA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCDA6 JUMP JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCDAB JUMP JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCDAE JUMP JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCDBB JUMP JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0xCEA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0xCEA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCDE4 JUMP JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCDEA JUMP JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCE09 JUMP JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCE11 JUMP JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCE1D JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0x23 0xB1 0xD0 0xEC PUSH20 0xA395BC5AC48F93CC2C0218A5B102B3C4884CA302 LOG4 PUSH30 0x248EE0C064736F6C634300060C0033000000000000000000000000000000 ",
                "sourceMap": "1555:1396:14:-:0;;;824:113:32;;;1555:1396:14;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "9986": [
                        {
                            "length": 32,
                            "start": 14840
                        },
                        {
                            "length": 32,
                            "start": 23061
                        },
                        {
                            "length": 32,
                            "start": 27181
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x6080604052600436106103c75760003560e01c80638322fff2116101f2578063bd71ecf61161010d578063e065de75116100a0578063f5a4994d1161006f578063f5a4994d14610bfe578063f6d6794a14610c1e578063faf1cee014610c3e578063fc9fe41b14610c5e576103ce565b8063e065de7514610b7e578063e382c95e14610b9e578063e78ac04514610bbe578063e8e4af0914610bde576103ce565b8063cc130e83116100dc578063cc130e8314610af0578063d9bca37214610b10578063dbbf62c214610b30578063ddd5aa2814610b5e576103ce565b8063bd71ecf614610a70578063c831908414610a90578063c8c74a3714610ab0578063c9d350f914610ad0576103ce565b80639ea0ff1311610185578063aa9ea72a11610154578063aa9ea72a146109e2578063ab80a91014610a02578063adc636bf14610a22578063b90cd2fb14610a50576103ce565b80639ea0ff1314610962578063a0295b8b14610982578063a75e744b146109a2578063a76bbec4146109c2576103ce565b8063918c2bbd116101c1578063918c2bbd146108d45780639209483b1461090257806398777748146109225780639bf3ee3514610942576103ce565b80638322fff214610843578063849489a1146108655780638a2d1971146108855780638e5a0e07146108a5576103ce565b806342cbb15c116102e257806366a1ac6b1161027557806374c9d2551161024457806374c9d255146107c357806377d375f2146107e35780637f3e7f82146108035780637f7f4f1314610823576103ce565b806366a1ac6b1461073657806368be3cf2146107565780636eb9dae514610783578063706e2f9b146107a3576103ce565b806357494b1d116102b157806357494b1d146106b65780635aae4e53146106d65780635d5b674f146106f65780635e74363a14610716576103ce565b806342cbb15c14610630578063494569db1461065257806351be4eaa146106725780635505000a14610687576103ce565b8063281e34321161035a5780633105fec1116103295780633105fec1146105a25780633583220f146105c25780634092e6b1146105f057806340bc03ae14610610576103ce565b8063281e3432146105135780632aa64319146105335780632e1240f01461056257806330d6570d14610582576103ce565b8063162790551161039657806316279055146104865780631976f526146104b35780632339078f146104d3578063252322b3146104f3576103ce565b8063034eaff9146103d35780630496d5dc146104095780631022742b14610437578063149dab0e14610457576103ce565b366103ce57005b600080fd5b3480156103df57600080fd5b506103f36103ee36600461b996565b610c7e565b604051610400919061c950565b60405180910390f35b34801561041557600080fd5b5061042961042436600461b57d565b610ea0565b60405161040092919061c8c4565b34801561044357600080fd5b506103f361045236600461b80f565b611046565b34801561046357600080fd5b5061047761047236600461bbea565b6111b9565b6040516104009392919061c83a565b34801561049257600080fd5b506104a66104a136600461b172565b611319565b604051610400919061c961565b3480156104bf57600080fd5b506103f36104ce36600461b94c565b611323565b3480156104df57600080fd5b506103f36104ee36600461bb8a565b61148e565b3480156104ff57600080fd5b506103f361050e36600461b461565b6116b8565b34801561051f57600080fd5b506103f361052e36600461bd2e565b611882565b34801561053f57600080fd5b5061055361054e36600461bc82565b611ad7565b6040516104009392919061c96f565b34801561056e57600080fd5b506103f361057d36600461b522565b611db4565b34801561058e57600080fd5b506103f361059d36600461b461565b612024565b3480156105ae57600080fd5b506103f36105bd36600461b57d565b612182565b3480156105ce57600080fd5b506105e26105dd36600461b9fc565b612306565b60405161040092919061c86e565b3480156105fc57600080fd5b506103f361060b36600461b9da565b6123d0565b34801561061c57600080fd5b506103f361062b36600461bc22565b61263b565b34801561063c57600080fd5b506106456127bc565b604051610400919061c9aa565b34801561065e57600080fd5b5061042961066d36600461b57d565b6127c0565b34801561067e57600080fd5b5061064561294c565b34801561069357600080fd5b506106a76106a236600461ba40565b612954565b6040516104009392919061c91a565b3480156106c257600080fd5b506103f36106d136600461b461565b612d11565b3480156106e257600080fd5b506106a76106f136600461ba40565b613288565b34801561070257600080fd5b506103f361071136600461b461565b613680565b34801561072257600080fd5b506103f361073136600461bca4565b6136ef565b34801561074257600080fd5b506103f361075136600461b80f565b613744565b34801561076257600080fd5b5061077661077136600461b657565b6137f9565b604051610400919061c93f565b34801561078f57600080fd5b506103f361079e36600461bca4565b61395a565b3480156107af57600080fd5b506103f36107be36600461b708565b6139a5565b3480156107cf57600080fd5b506104776107de36600461bbea565b613a97565b3480156107ef57600080fd5b506103f36107fe36600461b3d5565b613aa6565b34801561080f57600080fd5b506103f361081e36600461b57d565b613bac565b34801561082f57600080fd5b506103f361083e36600461bd2e565b613cbc565b34801561084f57600080fd5b50610858613f09565b604051610400919061c681565b34801561087157600080fd5b506103f361088036600461baa7565b613f21565b34801561089157600080fd5b506103f36108a036600461b9da565b614048565b3480156108b157600080fd5b506108c56108c036600461b698565b61415a565b6040516104009392919061cb92565b3480156108e057600080fd5b506108f46108ef36600461baa7565b614480565b60405161040092919061c99c565b34801561090e57600080fd5b506103f361091d36600461bc22565b614653565b34801561092e57600080fd5b506103f361093d36600461b461565b614853565b34801561094e57600080fd5b5061064561095d36600461bce8565b614d8c565b34801561096e57600080fd5b5061064561097d36600461b4cd565b614ed1565b34801561098e57600080fd5b506103f361099d36600461bb8a565b6150e7565b3480156109ae57600080fd5b506105536109bd36600461b5ee565b6152e3565b3480156109ce57600080fd5b506103f36109dd36600461b996565b615420565b3480156109ee57600080fd5b506108f46109fd36600461baa7565b61562f565b348015610a0e57600080fd5b506103f3610a1d36600461b3d5565b61571a565b348015610a2e57600080fd5b50610a42610a3d36600461b461565b61580c565b60405161040092919061c9b8565b348015610a5c57600080fd5b506103f3610a6b36600461b461565b61595c565b348015610a7c57600080fd5b506103f3610a8b36600461b73c565b6159c2565b348015610a9c57600080fd5b506103f3610aab36600461b461565b615abe565b348015610abc57600080fd5b506103f3610acb36600461b57d565b615c7b565b348015610adc57600080fd5b506105e2610aeb36600461b9fc565b615de7565b348015610afc57600080fd5b506103f3610b0b36600461b94c565b615efc565b348015610b1c57600080fd5b50610553610b2b36600461b5ee565b61606e565b348015610b3c57600080fd5b50610b50610b4b36600461b337565b61615d565b60405161040092919061c909565b348015610b6a57600080fd5b50610553610b7936600461bc82565b616423565b348015610b8a57600080fd5b50610b50610b9936600461b337565b6166b6565b348015610baa57600080fd5b506103f3610bb936600461baa7565b61696c565b348015610bca57600080fd5b506103f3610bd936600461b782565b6169da565b348015610bea57600080fd5b506103f3610bf936600461b461565b616acf565b348015610c0a57600080fd5b50610a42610c1936600461b461565b616c02565b348015610c2a57600080fd5b506103f3610c3936600461b57d565b616cee565b348015610c4a57600080fd5b506103f3610c5936600461b522565b616e67565b348015610c6a57600080fd5b506108c5610c7936600461b698565b6170c1565b8051606090806001600160401b0381118015610c9957600080fd5b50604051908082528060200260200182016040528015610cc3578160200160208202803683370190505b5091506000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0157600080fd5b505afa158015610d15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d39919061b92e565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7657600080fd5b505afa158015610d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dae919061bebc565b60ff169050876001600160a01b0316866001600160a01b03161415610e265760005b83811015610e205781600a0a6402540be4000283878381518110610df057fe5b60200260200101510281610e0057fe5b04858281518110610e0d57fe5b6020908102919091010152600101610dd0565b50610e95565b876001600160a01b0316876001600160a01b03161415610e955760005b83811015610e93578282600a0a6402540be400888481518110610e6257fe5b6020026020010151020281610e7357fe5b04858281518110610e8057fe5b6020908102919091010152600101610e43565b505b505050949350505050565b80516060908190806001600160401b0381118015610ebd57600080fd5b50604051908082528060200260200182016040528015610ee7578160200160208202803683370190505b509150610ef48686617450565b9250825160001415610f06575061103e565b60005b8181101561103b57866001600160a01b031663a8312b1d620249f0878481518110610f3057fe5b6020026020010151878a6040518563ffffffff1660e01b8152600401610f589392919061cc1b565b60006040518083038187803b158015610f7057600080fd5b5086fa93505050508015610fa657506040513d6000823e601f3d908101601f19168201604052610fa3919081019061b87f565b60015b610fe0573d808015610fd4576040519150601f19603f3d011682016040523d82523d6000602084013e610fd9565b606091505b505061103b565b80600188510381518110610ff057fe5b602002602001015184838151811061100457fe5b60200260200101818152505083828151811061101c57fe5b602002602001015160001415611032575061103b565b50600101610f09565b50505b935093915050565b606083516001600160401b038111801561105f57600080fd5b50604051908082528060200260200182016040528015611089578160200160208202803683370190505b50905060005b845181146111b157306001600160a01b0316639bf3ee3562030d408784815181106110b657fe5b60200260200101518785815181106110ca57fe5b6020026020010151876040518563ffffffff1660e01b81526004016110f19392919061cbd4565b60206040518083038187803b15801561110957600080fd5b5086fa9350505050801561113a575060408051601f3d908101601f191682019092526111379181019061b92e565b60015b61118e573d808015611168576040519150601f19603f3d011682016040523d82523d6000602084013e61116d565b606091505b50600083838151811061117c57fe5b602002602001018181525050506111a9565b8083838151811061119b57fe5b602002602001018181525050505b60010161108f565b509392505050565b600060608083516001600160401b03811180156111d557600080fd5b506040519080825280602002602001820160405280156111ff578160200160208202803683370190505b509050866020015151600014156112155761130f565b61122187878787617740565b909350915060005b815181101561130d57836001600160a01b0316637f9c0ecd620493e08588858151811061125257fe5b60200260200101516040518463ffffffff1660e01b815260040161127792919061c8e9565b60206040518083038187803b15801561128f57600080fd5b5086fa935050505080156112c0575060408051601f3d908101601f191682019092526112bd9181019061b92e565b60015b6112c95761130d565b808383815181106112d657fe5b6020026020010181815250508282815181106112ee57fe5b602002602001015160001415611304575061130d565b50600101611229565b505b9450945094915050565b803b15155b919050565b8051606090806001600160401b038111801561133e57600080fd5b50604051908082528060200260200182016040528015611368578160200160208202803683370190505b50915061137361a578565b61137b617966565b905060005b82811015610e955784818151811061139457fe5b6020026020010151876000815181106113a957fe5b602090810291909101015160600152604051637c26833760e11b81526001600160a01b0389169063f84d066e906113eb906001908b908b90889060040161ca95565b600060405180830381600087803b15801561140557600080fd5b505af192505050801561143a57506040513d6000823e601f3d908101601f19168201604052611437919081019061b7db565b60015b61144357610e95565b60008160008151811061145257fe5b602002602001015190506000811361146b575050610e95565b8086848151811061147857fe5b6020026020010181815250505050600101611380565b606061149a8385617995565b6020850151604080516002808252606082810190935281602001602082028036833701905050905085816000815181106114d057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106114fe57fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b038111801561152e57600080fd5b50604051908082528060200260200182016040528015611558578160200160208202803683370190505b50935061156361a578565b61156b617966565b905060005b828110156116ab5760606115978b89848151811061158a57fe5b60200260200101516179d4565b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e906115cd9060009085908a90899060040161ca95565b600060405180830381600087803b1580156115e757600080fd5b505af192505050801561161c57506040513d6000823e601f3d908101601f19168201604052611619919081019061b7db565b60015b611657573d80801561164a576040519150601f19603f3d011682016040523d82523d6000602084013e61164f565b606091505b5050506116ab565b60008160018351038151811061166957fe5b602002602001015160001902905060008113611687575050506116ab565b8089858151811061169457fe5b602002602001018181525050505050600101611570565b5050505050949350505050565b60606116c48385617995565b8151806001600160401b03811180156116dc57600080fd5b50604051908082528060200260200182016040528015611706578160200160208202803683370190505b50915060006001600160a01b03861615611729576117248787617a66565b61172c565b60005b905060006001600160a01b0386161561174e576117498887617a66565b611751565b60005b905060005b83811015610e935760016001600160a01b0388166117b45761179384632640f62c60e01b89858151811061178657fe5b6020026020010151617ae5565b87848151811061179f57fe5b6020026020010181935082815250505061184e565b6001600160a01b0389166117da57611793836359e9486260e01b89858151811061178657fe5b60006117f4846359e9486260e01b8a868151811061178657fe5b92509050801561183157611810856309903d8b60e21b83617ae5565b88858151811061181c57fe5b6020026020010181945082815250505061184c565b600087848151811061183f57fe5b6020026020010181815250505b505b80158061186e575085828151811061186257fe5b60200260200101516000145b156118795750610e93565b50600101611756565b606061188e8385617995565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d257600080fd5b505afa1580156118e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190a919061b190565b8451909150806001600160401b038111801561192557600080fd5b5060405190808252806020026020018201604052801561194f578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561198b57600080fd5b505afa15801561199f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c3919061b190565b6001600160a01b0316866001600160a01b031614158015611a665750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1857600080fd5b505afa158015611a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a50919061b190565b6001600160a01b0316876001600160a01b031614155b15611a7357505050611acf565b60005b81811015610e93576000611aa18a898b8a8681518110611a9257fe5b60200260200101518989617bc8565b905080611aae5750610e93565b80868381518110611abb57fe5b602090810291909101015250600101611a76565b949350505050565b6000806060611ae68587617995565b8351806001600160401b0381118015611afe57600080fd5b50604051908082528060200260200182016040528015611b28578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c690611b5b908a908a9060040161c6aa565b60206040518083038186803b158015611b7357600080fd5b505afa158015611b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bab919061b190565b925060006001600160a01b03841615611bc957506001935086611c68565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690611bfa908a908c9060040161c6aa565b60206040518083038186803b158015611c1257600080fd5b505afa158015611c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4a919061b190565b93506001600160a01b038416611c6157505061130f565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ca157600080fd5b505afa158015611cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd9919061b910565b611ce457505061130f565b60005b82811015611da7576000611d618a87858e60200151604051602001611d0f949392919061c6c5565b6040516020818303038152906040528a88868f60200151604051602001611d39949392919061c6c5565b6040516020818303038152906040528a8581518110611d5457fe5b6020026020010151617e87565b905080858381518110611d7057fe5b602002602001018181525050848281518110611d8857fe5b602002602001015160001415611d9e5750611da7565b50600101611ce7565b5050509450945094915050565b8051606090806001600160401b0381118015611dcf57600080fd5b50604051908082528060200260200182016040528015611df9578160200160208202803683370190505b509150856001600160a01b031684600081518110611e1357fe5b60200260200101516001600160a01b03161415611e6d5773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee84600081518110611e4c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b856001600160a01b031684600181518110611e8457fe5b60200260200101516001600160a01b03161415611ede5773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee84600181518110611ebd57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b60005b8181101561201a57856001600160a01b031663a940edac86600081518110611f0557fe5b602002602001015187600181518110611f1a57fe5b6020026020010151878581518110611f2e57fe5b60200260200101516040518463ffffffff1660e01b8152600401611f549392919061c7f2565b60206040518083038186803b158015611f6c57600080fd5b505afa925050508015611f9c575060408051601f3d908101601f19168201909252611f999181019061b92e565b60015b611fd6573d808015611fca576040519150601f19603f3d011682016040523d82523d6000602084013e611fcf565b606091505b505061201a565b80848381518110611fe357fe5b602002602001018181525050838281518110611ffb57fe5b602002602001015160001415612011575061201a565b50600101611ee1565b5050949350505050565b60606120308385617995565b8151806001600160401b038111801561204857600080fd5b50604051908082528060200260200182016040528015612072578160200160208202803683370190505b50915060005b8181101561201a57866001600160a01b03166372ea9076620c350088888886815181106120a157fe5b60200260200101516040518563ffffffff1660e01b81526004016120c79392919061c7f2565b60206040518083038187803b1580156120df57600080fd5b5086fa93505050508015612110575060408051601f3d908101601f1916820190925261210d9181019061b92e565b60015b61213e573d808015611fca576040519150601f19603f3d011682016040523d82523d6000602084013e611fcf565b8084838151811061214b57fe5b60200260200101818152505083828151811061216357fe5b602002602001015160001415612179575061201a565b50600101612078565b8051606090806001600160401b038111801561219d57600080fd5b506040519080825280602002602001820160405280156121c7578160200160208202803683370190505b50915060005b818110156122fd57856001600160a01b031663d06ca61f620249f08684815181106121f457fe5b6020026020010151886040518463ffffffff1660e01b815260040161221a92919061cc0d565b60006040518083038187803b15801561223257600080fd5b5086fa9350505050801561226857506040513d6000823e601f3d908101601f19168201604052612265919081019061b87f565b60015b6122a2573d808015612296576040519150601f19603f3d011682016040523d82523d6000602084013e61229b565b606091505b50506122fd565b806001875103815181106122b257fe5b60200260200101518483815181106122c657fe5b6020026020010181815250508382815181106122de57fe5b6020026020010151600014156122f457506122fd565b506001016121cd565b50509392505050565b6000606061231386617fc0565b9150600061232b87670de0b6b3a764000088886180ac565b8451909150806001600160401b038111801561234657600080fd5b50604051908082528060200260200182016040528015612370578160200160208202803683370190505b50925060005b818110156123c4578286828151811061238b57fe5b6020026020010151670de0b6b3a764000002816123a457fe5b048482815181106123b157fe5b6020908102919091010152600101612376565b50505094509492505050565b8051606090806001600160401b03811180156123eb57600080fd5b50604051908082528060200260200182016040528015612415578160200160208202803683370190505b50915060005b8181101561201a57866001600160a01b031663f3535e6c878760008151811061244057fe5b60200260200101518860018151811061245557fe5b60200260200101516040518463ffffffff1660e01b815260040161247b9392919061c9e6565b60206040518083038186803b15801561249357600080fd5b505afa9250505080156124c3575060408051601f3d908101601f191682019092526124c09181019061b92e565b60015b6124f1573d808015611fca576040519150601f19603f3d011682016040523d82523d6000602084013e611fcf565b808583815181106124fe57fe5b60200260200101511115612512575061201a565b50866001600160a01b031663d7176ca9878760008151811061253057fe5b60200260200101518860018151811061254557fe5b602002602001015188868151811061255957fe5b60200260200101516040518563ffffffff1660e01b8152600401612580949392919061ca0e565b604080518083038186803b15801561259757600080fd5b505afa9250505080156125c7575060408051601f3d908101601f191682019092526125c49181019061bde1565b60015b6125f5573d808015611fca576040519150601f19603f3d011682016040523d82523d6000602084013e611fcf565b8185848151811061260257fe5b60200260200101818152505084838151811061261a57fe5b60200260200101516000141561263157505061201a565b505060010161241b565b8051606090806001600160401b038111801561265657600080fd5b50604051908082528060200260200182016040528015612680578160200160208202803683370190505b50915060005b8181101561201a576000606088600001516001600160a01b0316621e84808a602001518a8a8a88815181106126b757fe5b60200260200101516040516024016126d19392919061cad8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161270f919061c675565b6000604051808303818686fa925050503d806000811461274b576040519150601f19603f3d011682016040523d82523d6000602084013e612750565b606091505b5091509150600082156127745781806020019051810190612771919061b92e565b90505b8086858151811061278157fe5b60200260200101818152505085848151811061279957fe5b6020026020010151600014156127b15750505061201a565b505050600101612686565b4390565b80516060908190806001600160401b03811180156127dd57600080fd5b50604051908082528060200260200182016040528015612807578160200160208202803683370190505b5091506128148686617450565b9250825160001415612826575061103e565b60005b8181101561103b57866001600160a01b0316639e269b68620249f087848151811061285057fe5b6020026020010151878a6040518563ffffffff1660e01b81526004016128789392919061cc1b565b60006040518083038187803b15801561289057600080fd5b5086fa935050505080156128c657506040513d6000823e601f3d908101601f191682016040526128c3919081019061b87f565b60015b6128f4573d808015610fd4576040519150601f19603f3d011682016040523d82523d6000602084013e610fd9565b8060008151811061290157fe5b602002602001015184838151811061291557fe5b60200260200101818152505083828151811061292d57fe5b602002602001015160001415612943575061103b565b50600101612829565b60005a905090565b60608060608061299187735555555555555555555555555555555555555556888860018a51038151811061298457fe5b60200260200101516181dd565b905084516001600160401b03811180156129aa57600080fd5b506040519080825280602002602001820160405280156129d4578160200160208202803683370190505b50915084516001600160401b03811180156129ee57600080fd5b50604051908082528060200260200182016040528015612a2257816020015b6060815260200190600190039081612a0d5790505b50935084516001600160401b0381118015612a3c57600080fd5b50604051908082528060200260200182016040528015612a66578160200160208202803683370190505b50925060005b8151811015612d0657612a91828281518110612a8457fe5b6020026020010151618223565b612a9a57612cfe565b6060612ab988848481518110612aac57fe5b6020026020010151618279565b60405163551e2bdf60e01b815290915060609081907355555555555555555555555555555555555555569063551e2bdf90612afc908e9087908e9060040161c9c6565b60006040518083038186803b158015612b1457600080fd5b505afa925050508015612b25575060015b612cfa573d808015612b53576040519150601f19603f3d011682016040523d82523d6000602084013e612b58565b606091505b506000612b64826183d4565b9095509350905080612b7a575050505050612cfe565b60005b8451811015612cf657848181518110612b9257fe5b602002602001015160001415612ba757612cf6565b848181518110612bb357fe5b6020026020010151898281518110612bc757fe5b60200260200101511015612c4a57848181518110612be157fe5b6020026020010151898281518110612bf557fe5b602002602001018181525050858b8281518110612c0e57fe5b6020026020010181905250838181518110612c2557fe5b60200260200101518a8281518110612c3957fe5b602002602001018181525050612cee565b848181518110612c5657fe5b6020026020010151898281518110612c6a57fe5b6020026020010151148015612ca45750838181518110612c8657fe5b60200260200101518a8281518110612c9a57fe5b6020026020010151115b15612cee57858b8281518110612cb657fe5b6020026020010181905250838181518110612ccd57fe5b60200260200101518a8281518110612ce157fe5b6020026020010181815250505b600101612b7d565b5050505b5050505b600101612a6c565b505093509350939050565b80516060908590806001600160401b0381118015612d2e57600080fd5b50604051908082528060200260200182016040528015612d58578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b62490612d8890899060040161c681565b60206040518083038186803b158015612da057600080fd5b505afa158015612db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd8919061b910565b1580612e5d5750604051630bcded8960e21b81526001600160a01b03831690632f37b62490612e0b90889060040161c681565b60206040518083038186803b158015612e2357600080fd5b505afa158015612e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5b919061b910565b155b15612e69575050611acf565b612e7161a59f565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90612e9d908a9060040161c681565b60206040518083038186803b158015612eb557600080fd5b505afa158015612ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eed919061b92e565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90612f1b90899060040161c681565b60206040518083038186803b158015612f3357600080fd5b505afa158015612f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6b919061b92e565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce690612f9c908a9060040161c681565b60206040518083038186803b158015612fb457600080fd5b505afa158015612fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fec919061b92e565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce69061301f90899060040161c681565b60206040518083038186803b15801561303757600080fd5b505afa15801561304b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306f919061b92e565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156130b157600080fd5b505afa1580156130c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e9919061b92e565b608082015260005b82811015610e935761311c82602001516003670de0b6b3a76400008161311357fe5b04600101618436565b86828151811061312857fe5b6020026020010151111561313b57610e93565b836001600160a01b031663f8d6aed4620493e084600001518560400151866020015187606001518c888151811061316e57fe5b602002602001015189608001516040518863ffffffff1660e01b815260040161319c9695949392919061cc7d565b60206040518083038187803b1580156131b457600080fd5b5086fa935050505080156131e5575060408051601f3d908101601f191682019092526131e29181019061b92e565b60015b61321f573d808015613213576040519150601f19603f3d011682016040523d82523d6000602084013e613218565b606091505b5050610e93565b8251613237906002670de0b6b3a76400005b04618436565b8111156132445750610e93565b8086838151811061325157fe5b60200260200101818152505085828151811061326957fe5b60200260200101516000141561327f5750610e93565b506001016130f1565b60608060608061329786618493565b905060606132c588735555555555555555555555555555555555555556848960018b51038151811061298457fe5b905085516001600160401b03811180156132de57600080fd5b50604051908082528060200260200182016040528015613308578160200160208202803683370190505b50925085516001600160401b038111801561332257600080fd5b5060405190808252806020026020018201604052801561335657816020015b60608152602001906001900390816133415790505b50945085516001600160401b038111801561337057600080fd5b5060405190808252806020026020018201604052801561339a578160200160208202803683370190505b50935060005b8151811015613674576133b8828281518110612a8457fe5b6133c15761366c565b60606133d384848481518110612aac57fe5b604051630196e65d60e51b81529091506060908190735555555555555555555555555555555555555556906332dccba090613416908f9087908f9060040161c9c6565b60006040518083038186803b15801561342e57600080fd5b505afa92505050801561343f575060015b613668573d80801561346d576040519150601f19603f3d011682016040523d82523d6000602084013e613472565b606091505b50600061347e826183d4565b909550935090508061349457505050505061366c565b60005b8451811015613664578481815181106134ac57fe5b6020026020010151600014156134c157613664565b8981815181106134cd57fe5b60200260200101516000148061350857508481815181106134ea57fe5b60200260200101518a82815181106134fe57fe5b6020026020010151115b156135a65784818151811061351957fe5b60200260200101518a828151811061352d57fe5b60200260200101818152505061355e8e6135598a8a8151811061354c57fe5b602002602001015161852b565b618279565b8c828151811061356a57fe5b602002602001018190525083818151811061358157fe5b60200260200101518b828151811061359557fe5b60200260200101818152505061365c565b8481815181106135b257fe5b60200260200101518a82815181106135c657fe5b602002602001015114801561360057508381815181106135e257fe5b60200260200101518b82815181106135f657fe5b6020026020010151115b1561365c576136188e6135598a8a8151811061354c57fe5b8c828151811061362457fe5b602002602001018190525083818151811061363b57fe5b60200260200101518b828151811061364f57fe5b6020026020010181815250505b600101613497565b5050505b5050505b6001016133a0565b50505093509350939050565b6040805160608181019092526136e6908061369f86896080840161c6aa565b604051602081830303815290604052815260200186886040516020016136c692919061c6aa565b60405160208183030381529060405281526020016185c3815250836186d7565b95945050505050565b60606136fb8385617995565b84602001516001600160a01b0316846001600160a01b031614801561372c575084516001600160a01b038481169116145b15613738575080611acf565b6136e6858585856188e9565b6060613751848484611046565b905060005b84518110156111b15781818151811061376b57fe5b60200260200101516000146137f1576137d882828151811061378957fe5b602002602001015186838151811061379d57fe5b6020026020010151606001516001600160801b03168784815181106137be57fe5b6020026020010151604001516001600160801b0316618b35565b8282815181106137e457fe5b6020026020010181815250505b600101613756565b6060816001600160401b038111801561381157600080fd5b5060405190808252806020026020018201604052801561384b57816020015b61383861a5ce565b8152602001906001900390816138305790505b50905060005b80831461395357600182828151811061386657fe5b60209081029190910181015191151591015283838281811061388457fe5b9050602002810190613896919061cccc565b151590506138a35761394b565b308484838181106138b057fe5b90506020028101906138c2919061cccc565b6040516138d092919061c668565b6000604051808303816000865af19150503d806000811461390d576040519150601f19603f3d011682016040523d82523d6000602084013e613912565b606091505b5083838151811061391f57fe5b602002602001015160200184848151811061393657fe5b60209081029190910101519190915290151590525b600101613851565b5092915050565b606084602001516001600160a01b0316846001600160a01b031614801561398d575084516001600160a01b038481169116145b15613999575080611acf565b6136e6858486856188e9565b606081516001600160401b03811180156139be57600080fd5b506040519080825280602002602001820160405280156139e8578160200160208202803683370190505b50905060005b82518114613a91577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316838281518110613a2c57fe5b60200260200101516001600160a01b031614613a6c57613a67838281518110613a5157fe5b60200260200101516001600160a01b0316618b59565b613a6f565b60125b60ff16828281518110613a7e57fe5b60209081029190910101526001016139ee565b50919050565b60006060809450945094915050565b8051606090806001600160401b0381118015613ac157600080fd5b50604051908082528060200260200182016040528015613aeb578160200160208202803683370190505b509150856001600160a01b0316856001600160a01b0316148015613b205750866001600160a01b0316846001600160a01b0316145b15613b2e57829150506136e6565b866001600160a01b0316856001600160a01b0316148015613b605750856001600160a01b0316846001600160a01b0316145b15613ba25760005b81811015613b98576001848281518110613b7e57fe5b602090810291909101018051919091039052600101613b68565b50829150506136e6565b5095945050505050565b60408051600280825260608083018452928392919060208301908036833701905050905083600181518110613bdd57fe5b602002602001015181600081518110613bf257fe5b60200260200101906001600160a01b031690816001600160a01b03168152505083600081518110613c1f57fe5b602002602001015181600181518110613c3457fe5b6001600160a01b03909216602092830291909101909101526040805160608101909152613cb19080613c6a88856080840161c81a565b60405160208183030381529060405281526020018787604051602001613c9192919061c81a565b6040516020818303038152906040528152602001618c05815250846186d7565b9150505b9392505050565b6060613cc88385617995565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015613d0c57600080fd5b505afa158015613d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d44919061b190565b8451909150806001600160401b0381118015613d5f57600080fd5b50604051908082528060200260200182016040528015613d89578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015613dc557600080fd5b505afa158015613dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dfd919061b190565b6001600160a01b0316866001600160a01b031614158015613ea05750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015613e5257600080fd5b505afa158015613e66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e8a919061b190565b6001600160a01b0316876001600160a01b031614155b15613ead57505050611acf565b60005b81811015610e93576000613edb8a898b8a8681518110613ecc57fe5b60200260200101518989618d17565b905080613ee85750610e93565b80868381518110613ef557fe5b602090810291909101015250600101613eb0565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b8051606090806001600160401b0381118015613f3c57600080fd5b50604051908082528060200260200182016040528015613f66578160200160208202803683370190505b50915060005b8181101561201a57866001600160a01b031663e94803f48787878581518110613f9157fe5b60200260200101516040518463ffffffff1660e01b8152600401613fb79392919061c7f2565b60206040518083038186803b158015613fcf57600080fd5b505afa158015613fe3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614007919061b92e565b83828151811061401357fe5b60200260200101818152505082818151811061402b57fe5b6020026020010151600014156140405761201a565b600101613f6c565b6040805160028082526060808301845292839291906020830190803683370190505090508360018151811061407957fe5b60200260200101518160008151811061408e57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050836000815181106140bb57fe5b6020026020010151816001815181106140d057fe5b6001600160a01b0390921660209283029190910190910152604080516060810190915261415090806141078989866080850161c734565b60405160208183030381529060405281526020018888886040516020016141309392919061c734565b6040516020818303038152906040528152602001618fa9815250846186d7565b9695505050505050565b61416261a5e6565b61416a61a5e6565b6060836001600160401b038111801561418257600080fd5b506040519080825280602002602001820160405280156141ac578160200160208202803683370190505b5090506060846001600160401b03811180156141c757600080fd5b506040519080825280602002602001820160405280156141f1578160200160208202803683370190505b50905060005b87518110156143145760006060306001600160a01b03168a848151811061421a57fe5b602002602001015160405161422f919061c675565b6000604051808303816000865af19150503d806000811461426c576040519150601f19603f3d011682016040523d82523d6000602084013e614271565b606091505b5091509150811561430a576060614288828a6190c3565b90508460018a038151811061429957fe5b60200260200101518160018b03815181106142b057fe5b60200260200101511115614308578388526020880182905260005b89811015614306578181815181106142df57fe5b60200260200101518682815181106142f357fe5b60209081029190910101526001016142cb565b505b505b50506001016141f7565b5080600186038151811061432457fe5b60200260200101516000141561433a5750614477565b60005b8651811015612d065761436387828151811061435557fe5b602002602001015183619101565b60006060306001600160a01b031689848151811061437d57fe5b6020026020010151604051614392919061c675565b6000604051808303816000865af19150503d80600081146143cf576040519150601f19603f3d011682016040523d82523d6000602084013e6143d4565b606091505b5091509150811561446d5760606143eb828a6190c3565b90508560018a03815181106143fc57fe5b60200260200101518160018b038151811061441357fe5b6020026020010151111561446b578387526020870182905260005b898110156144695781818151811061444257fe5b602002602001015187828151811061445657fe5b602090810291909101015260010161442e565b505b505b505060010161433d565b93509350939050565b6000606061448e8486617995565b8251806001600160401b03811180156144a657600080fd5b506040519080825280602002602001820160405280156144d0578160200160208202803683370190505b5091506144df8787878761914c565b60408051600180825281830190925291945060609190816020015b61450261a600565b8152602001906001900390816144fa5790505090506040518060600160405280886001600160a01b03168152602001876001600160a01b031681526020018515158152508160008151811061455357fe5b602002602001018190525060005b828110156123c457886001600160a01b0316639881fcb487838151811061458457fe5b6020026020010151846040518363ffffffff1660e01b81526004016145aa92919061cc4f565b60006040518083038186803b1580156145c257600080fd5b505afa1580156145d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526145fe919081019061b87f565b60018151811061460a57fe5b602002602001015184828151811061461e57fe5b60200260200101818152505083818151811061463657fe5b60200260200101516000141561464b576123c4565b600101614561565b60408401516060906001600160e01b0319166146d55760408051606081019091526146ce908061468786896080840161caf3565b604051602081830303815290604052815260200186886040516020016146ae92919061caf3565b60405160208183030381529060405281526020016191e6815250836186d7565b9050611acf565b8151806001600160401b03811180156146ed57600080fd5b50604051908082528060200260200182016040528015614717578160200160208202803683370190505b50915060005b8181101561201a576000606088600001516001600160a01b0316621e84808a604001518a8a8a888151811061474e57fe5b60200260200101516040516024016147689392919061cad8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516147a6919061c675565b6000604051808303818686fa925050503d80600081146147e2576040519150601f19603f3d011682016040523d82523d6000602084013e6147e7565b606091505b50915091506000821561480b5781806020019051810190614808919061b92e565b90505b8086858151811061481857fe5b60200260200101818152505085848151811061483057fe5b6020026020010151600014156148485750505061201a565b50505060010161471d565b80516060908590806001600160401b038111801561487057600080fd5b5060405190808252806020026020018201604052801561489a578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b624906148ca90899060040161c681565b60206040518083038186803b1580156148e257600080fd5b505afa1580156148f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061491a919061b910565b158061499f5750604051630bcded8960e21b81526001600160a01b03831690632f37b6249061494d90889060040161c681565b60206040518083038186803b15801561496557600080fd5b505afa158015614979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061499d919061b910565b155b156149ab575050611acf565b6149b361a59f565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f906149df908a9060040161c681565b60206040518083038186803b1580156149f757600080fd5b505afa158015614a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a2f919061b92e565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90614a5d90899060040161c681565b60206040518083038186803b158015614a7557600080fd5b505afa158015614a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614aad919061b92e565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce690614ade908a9060040161c681565b60206040518083038186803b158015614af657600080fd5b505afa158015614b0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b2e919061b92e565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690614b6190899060040161c681565b60206040518083038186803b158015614b7957600080fd5b505afa158015614b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bb1919061b92e565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b158015614bf357600080fd5b505afa158015614c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c2b919061b92e565b608082015260005b82811015610e93578151614c51906002670de0b6b3a7640000613231565b868281518110614c5d57fe5b60200260200101511115614c7057610e93565b836001600160a01b031663ba9530a6620493e084600001518560400151866020015187606001518c8881518110614ca357fe5b602002602001015189608001516040518863ffffffff1660e01b8152600401614cd19695949392919061cc7d565b60206040518083038187803b158015614ce957600080fd5b5086fa93505050508015614d1a575060408051601f3d908101601f19168201909252614d179181019061b92e565b60015b614d48573d808015613213576040519150601f19603f3d011682016040523d82523d6000602084013e613218565b80868381518110614d5557fe5b602002602001018181525050858281518110614d6d57fe5b602002602001015160001415614d835750610e93565b50600101614c33565b60008083516003811115614d9c57fe5b1480614db45750600183516003811115614db257fe5b145b80614dca575060408401516001600160801b0316155b80614de0575060608401516001600160801b0316155b15614ded57506000613cb5565b614df561a620565b600080846001600160a01b0316631fb0979588886040518363ffffffff1660e01b8152600401614e2692919061cbb7565b60a06040518083038186803b158015614e3e57600080fd5b505afa158015614e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e76919061bd50565b91945092509050600183602001516004811115614e8f57fe5b141580614e9a575080155b80614ead575086516001600160a01b0316155b15614ebe5760009350505050613cb5565b506001600160801b031695945050505050565b600080856001600160a01b031663901754d786866040518363ffffffff1660e01b8152600401614f0292919061c6aa565b60206040518083038186803b158015614f1a57600080fd5b505afa158015614f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f52919061b190565b90506001600160a01b038116614f6c576000915050611acf565b60006001600160a01b03861615614ffe576040516370a0823160e01b81526001600160a01b038716906370a0823190614fa990859060040161c681565b60206040518083038186803b158015614fc157600080fd5b505afa158015614fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ff9919061b92e565b61500a565b816001600160a01b0316315b90508381101561501f57600092505050611acf565b6040516303c2803f60e31b81526001600160a01b03831690631e1401f890620249f090615054908a908a908a9060040161c7f2565b60206040518083038187803b15801561506c57600080fd5b5086fa9350505050801561509d575060408051601f3d908101601f1916820190925261509a9181019061b92e565b60015b6150dd573d8080156150cb576040519150601f19603f3d011682016040523d82523d6000602084013e6150d0565b606091505b5060009350505050611acf565b9250611acf915050565b60606150f38385617995565b60208501516040805160028082526060828101909352816020016020820280368337019050509050858160008151811061512957fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061515757fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b038111801561518757600080fd5b506040519080825280602002602001820160405280156151b1578160200160208202803683370190505b5093506151bc61a578565b6151c4617966565b905060005b828110156116ab5760606151e38b89848151811061158a57fe5b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e906152199060019085908a90899060040161ca95565b600060405180830381600087803b15801561523357600080fd5b505af192505050801561526857506040513d6000823e601f3d908101601f19168201604052615265919081019061b7db565b60015b615296573d80801561164a576040519150601f19603f3d011682016040523d82523d6000602084013e61164f565b6000816000815181106152a557fe5b60200260200101519050600081136152bf575050506116ab565b808985815181106152cc57fe5b6020026020010181815250505050506001016151c9565b60008060606152f28587617995565b8351806001600160401b038111801561530a57600080fd5b50604051908082528060200260200182016040528015615334578160200160208202803683370190505b5091506153438989898961924d565b945092506001600160a01b03831661535b5750615415565b60005b818110156154125760006153cc8986886040516020016153809392919061c7a2565b6040516020818303038152906040528987896040516020016153a49392919061c7a2565b6040516020818303038152906040528985815181106153bf57fe5b60200260200101516193a2565b9050808483815181106153db57fe5b6020026020010181815250508382815181106153f357fe5b6020026020010151600014156154095750615412565b5060010161535e565b50505b955095509592505050565b8051606090806001600160401b038111801561543b57600080fd5b50604051908082528060200260200182016040528015615465578160200160208202803683370190505b5091506000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156154a357600080fd5b505afa1580156154b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906154db919061b92e565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561551857600080fd5b505afa15801561552c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615550919061bebc565b60ff169050876001600160a01b0316866001600160a01b031614156155c25760005b83811015610e20578282600a0a6402540be40088848151811061559157fe5b60200260200101510202816155a257fe5b048582815181106155af57fe5b6020908102919091010152600101615572565b876001600160a01b0316876001600160a01b03161415610e955760005b83811015610e935781600a0a6402540be40002838783815181106155ff57fe5b6020026020010151028161560f57fe5b0485828151811061561c57fe5b60209081029190910101526001016155df565b6000606061563d8486617995565b6156498685878661914c565b915061570f6040518060600160405280886040518060600160405280896001600160a01b031681526020018a6001600160a01b0316815260200187151581525060405160200161569a92919061ca43565b60405160208183030381529060405281526020018860405180606001604052808a6001600160a01b03168152602001896001600160a01b031681526020018715158152506040516020016156ef92919061ca43565b6040516020818303038152906040528152602001619494815250846186d7565b905094509492505050565b8051606090806001600160401b038111801561573557600080fd5b5060405190808252806020026020018201604052801561575f578160200160208202803683370190505b509150856001600160a01b0316856001600160a01b03161480156157945750866001600160a01b0316846001600160a01b0316145b156157a257829150506136e6565b866001600160a01b0316856001600160a01b03161480156157d45750856001600160a01b0316846001600160a01b0316145b15613ba25760005b81811015613b985760018482815181106157f257fe5b6020908102919091010180519190910390526001016157dc565b6000606061581a8486617995565b8251806001600160401b038111801561583257600080fd5b5060405190808252806020026020018201604052801561585c578160200160208202803683370190505b50915060005b818110156158d157600061588b89898989868151811061587e57fe5b6020026020010151614ed1565b90508084838151811061589a57fe5b6020026020010181815250508382815181106158b257fe5b6020026020010151600014156158c857506158d1565b50600101615862565b5060405163901754d760e01b81526001600160a01b0388169063901754d790615900908990899060040161c6aa565b60206040518083038186803b15801561591857600080fd5b505afa15801561592c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615950919061b190565b92505094509492505050565b6040805160608181019092526136e6908061597b86896080840161c6aa565b604051602081830303815290604052815260200186886040516020016159a292919061c6aa565b60405160208183030381529060405281526020016195a9815250836186d7565b606082516001600160401b03811180156159db57600080fd5b50604051908082528060200260200182016040528015615a05578160200160208202803683370190505b50905060005b83518114613953577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316848281518110615a4957fe5b60200260200101516001600160a01b031614615a9357615a8e83858381518110615a6f57fe5b60200260200101516001600160a01b03166195f090919063ffffffff16565b615a9f565b826001600160a01b0316315b828281518110615aab57fe5b6020908102919091010152600101615a0b565b6060615aca8385617995565b8151806001600160401b0381118015615ae257600080fd5b50604051908082528060200260200182016040528015615b0c578160200160208202803683370190505b50915060006001600160a01b03861615615b2f57615b2a8787617a66565b615b32565b60005b905060006001600160a01b03861615615b5457615b4f8887617a66565b615b57565b60005b905060005b83811015610e935760016001600160a01b038816615bad57615b8c846395b68fe760e01b89858151811061178657fe5b878481518110615b9857fe5b60200260200101819350828152505050615c47565b6001600160a01b038916615bd357615b8c8363cd7724c360e01b89858151811061178657fe5b6000615bed856395b68fe760e01b8a868151811061178657fe5b925090508015615c2a57615c098463cd7724c360e01b83617ae5565b888581518110615c1557fe5b60200260200101819450828152505050615c45565b6000878481518110615c3857fe5b6020026020010181815250505b505b801580615c675750858281518110615c5b57fe5b60200260200101516000145b15615c725750610e93565b50600101615b5c565b8051606090806001600160401b0381118015615c9657600080fd5b50604051908082528060200260200182016040528015615cc0578160200160208202803683370190505b50915060005b818110156122fd57856001600160a01b0316631f00ca74620249f0868481518110615ced57fe5b6020026020010151886040518463ffffffff1660e01b8152600401615d1392919061cc0d565b60006040518083038187803b158015615d2b57600080fd5b5086fa93505050508015615d6157506040513d6000823e601f3d908101601f19168201604052615d5e919081019061b87f565b60015b615d8f573d808015612296576040519150601f19603f3d011682016040523d82523d6000602084013e61229b565b80600081518110615d9c57fe5b6020026020010151848381518110615db057fe5b602002602001018181525050838281518110615dc857fe5b602002602001015160001415615dde57506122fd565b50600101615cc6565b60006060615df486617fc0565b8351909250806001600160401b0381118015615e0f57600080fd5b50604051908082528060200260200182016040528015615e39578160200160208202803683370190505b50915080615e475750615ef3565b615e678785600081518110615e5857fe5b602002602001015188886180ac565b82600081518110615e7457fe5b602090810291909101015260015b81811015615ef05784600081518110615e9757fe5b6020026020010151858281518110615eab57fe5b602002602001015184600081518110615ec057fe5b60200260200101510281615ed057fe5b04838281518110615edd57fe5b6020908102919091010152600101615e82565b50505b94509492505050565b8051606090806001600160401b0381118015615f1757600080fd5b50604051908082528060200260200182016040528015615f41578160200160208202803683370190505b509150615f4c61a578565b615f54617966565b905060005b82811015610e9557848181518110615f6d57fe5b602002602001015187600081518110615f8257fe5b602090810291909101015160600152604051637c26833760e11b81526001600160a01b0389169063f84d066e90615fc4906000908b908b90889060040161ca95565b600060405180830381600087803b158015615fde57600080fd5b505af192505050801561601357506040513d6000823e601f3d908101601f19168201604052616010919081019061b7db565b60015b61601c57610e95565b60008160018351038151811061602e57fe5b60200260200101516000190290506000811361604b575050610e95565b8086848151811061605857fe5b6020026020010181815250505050600101615f59565b600080606061607d8587617995565b8351806001600160401b038111801561609557600080fd5b506040519080825280602002602001820160405280156160bf578160200160208202803683370190505b5091506160ce8989898961924d565b945092506001600160a01b0383166160e65750615415565b604080516060810190915261614f9080616106898789156080850161c7a2565b604051602081830303815290604052815260200189868860405160200161612f9392919061c7a2565b60405160208183030381529060405281526020016193a2815250866186d7565b915050955095509592505050565b80516060908190806001600160401b038111801561617a57600080fd5b506040519080825280602002602001820160405280156161a4578160200160208202803683370190505b509150806001600160401b03811180156161bd57600080fd5b506040519080825280602002602001820160405280156161e7578160200160208202803683370190505b509250876001600160a01b0316866001600160a01b031614801561621c5750866001600160a01b0316856001600160a01b0316145b806162545750866001600160a01b0316866001600160a01b03161480156162545750876001600160a01b0316856001600160a01b0316145b15616416578391506001600160a01b0389166162705750616418565b8860005b8281101561641357896001600160a01b0316876001600160a01b0316141561634757816001600160a01b031663b76398e4898884815181106162b257fe5b602002602001015160006040518463ffffffff1660e01b81526004016162da9392919061c89c565b60206040518083038186803b1580156162f257600080fd5b505afa158015616306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061632a919061b92e565b85828151811061633657fe5b60200260200101818152505061640b565b896001600160a01b0316886001600160a01b0316141561640b57816001600160a01b0316635cc7bc108888848151811061637d57fe5b60200260200101516040518363ffffffff1660e01b81526004016163a292919061c88e565b60206040518083038186803b1580156163ba57600080fd5b505afa1580156163ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906163f2919061b92e565b8582815181106163fe57fe5b6020026020010181815250505b600101616274565b50505b505b965096945050505050565b60008060606164328587617995565b8351806001600160401b038111801561644a57600080fd5b50604051908082528060200260200182016040528015616474578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c6906164a7908a908a9060040161c6aa565b60206040518083038186803b1580156164bf57600080fd5b505afa1580156164d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906164f7919061b190565b925060006001600160a01b03841615616515575060019350866165b4565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690616546908a908c9060040161c6aa565b60206040518083038186803b15801561655e57600080fd5b505afa158015616572573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616596919061b190565b93506001600160a01b0384166165ad57505061130f565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156165ed57600080fd5b505afa158015616601573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616625919061b910565b61663057505061130f565b6166a860405180606001604052808987858e60200151604051602001616659949392919061c6c5565b60405160208183030381529060405281526020018a87858e60200151604051602001616688949392919061c6c5565b6040516020818303038152906040528152602001617e87815250876186d7565b925050509450945094915050565b80516060908190806001600160401b03811180156166d357600080fd5b506040519080825280602002602001820160405280156166fd578160200160208202803683370190505b509150806001600160401b038111801561671657600080fd5b50604051908082528060200260200182016040528015616740578160200160208202803683370190505b509250876001600160a01b0316866001600160a01b03161480156167755750866001600160a01b0316856001600160a01b0316145b806167ad5750866001600160a01b0316866001600160a01b03161480156167ad5750876001600160a01b0316856001600160a01b0316145b15616416578391506001600160a01b0389166167c95750616418565b8860005b8281101561641357896001600160a01b0316876001600160a01b031614156168a057816001600160a01b031663b76398e48986848151811061680b57fe5b602002602001015160006040518463ffffffff1660e01b81526004016168339392919061c89c565b60206040518083038186803b15801561684b57600080fd5b505afa15801561685f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616883919061b92e565b85828151811061688f57fe5b602002602001018181525050616964565b896001600160a01b0316886001600160a01b0316141561696457816001600160a01b0316635cc7bc10888684815181106168d657fe5b60200260200101516040518363ffffffff1660e01b81526004016168fb92919061c88e565b60206040518083038186803b15801561691357600080fd5b505afa158015616927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061694b919061b92e565b85828151811061695757fe5b6020026020010181815250505b6001016167cd565b8051604080516060818101909252909190614150908061699189888a6080850161c9e6565b60405160208183030381529060405281526020018888886040516020016169ba9392919061c9e6565b60405160208183030381529060405281526020016196ba815250846186d7565b606083516001600160401b03811180156169f357600080fd5b50604051908082528060200260200182016040528015616a1d578160200160208202803683370190505b50905060005b845181146111b1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316858281518110616a6157fe5b60200260200101516001600160a01b031614616aad57616aa88484878481518110616a8857fe5b60200260200101516001600160a01b03166197079092919063ffffffff16565b616ab0565b60005b828281518110616abc57fe5b6020908102919091010152600101616a23565b8051606090806001600160401b0381118015616aea57600080fd5b50604051908082528060200260200182016040528015616b14578160200160208202803683370190505b50915060005b8181101561201a57866001600160a01b031663838e6a22620493e08888888681518110616b4357fe5b60200260200101516040518563ffffffff1660e01b8152600401616b699392919061c7f2565b60206040518083038187803b158015616b8157600080fd5b5086fa93505050508015616bb2575060408051601f3d908101601f19168201909252616baf9181019061b92e565b60015b616be0573d808015611fca576040519150601f19603f3d011682016040523d82523d6000602084013e611fcf565b80848381518110616bed57fe5b60200260200101818152505050600101616b1a565b60006060616c108486617995565b8251806001600160401b0381118015616c2857600080fd5b50604051908082528060200260200182016040528015616c52578160200160208202803683370190505b509150616cbd60405180606001604052808988604051602001616c7692919061c6aa565b60405160208183030381529060405281526020018989604051602001616c9d92919061c6aa565b60405160208183030381529060405281526020016197d3815250856186d7565b60405163901754d760e01b81529092506001600160a01b0388169063901754d790615900908990899060040161c6aa565b8051606090806001600160401b0381118015616d0957600080fd5b50604051908082528060200260200182016040528015616d33578160200160208202803683370190505b50915060005b818110156122fd57856001600160a01b03166343c2e2f586600081518110616d5d57fe5b602002602001015187600181518110616d7257fe5b6020026020010151878581518110616d8657fe5b60200260200101516040518463ffffffff1660e01b8152600401616dac9392919061c7f2565b604080518083038186803b158015616dc357600080fd5b505afa925050508015616df3575060408051601f3d908101601f19168201909252616df09181019061bde1565b60015b616e21573d808015612296576040519150601f19603f3d011682016040523d82523d6000602084013e61229b565b81858481518110616e2e57fe5b602002602001018181525050848381518110616e4657fe5b602002602001015160001415616e5d5750506122fd565b5050600101616d39565b8051606090806001600160401b0381118015616e8257600080fd5b50604051908082528060200260200182016040528015616eac578160200160208202803683370190505b509150856001600160a01b031684600081518110616ec657fe5b60200260200101516001600160a01b03161415616f205773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee84600081518110616eff57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b856001600160a01b031684600181518110616f3757fe5b60200260200101516001600160a01b03161415616f915773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee84600181518110616f7057fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b60005b8181101561201a57856001600160a01b0316636e1a20be86600081518110616fb857fe5b602002602001015187600181518110616fcd57fe5b6020026020010151878581518110616fe157fe5b60200260200101516040518463ffffffff1660e01b81526004016170079392919061c7f2565b60206040518083038186803b15801561701f57600080fd5b505afa92505050801561704f575060408051601f3d908101601f1916820190925261704c9181019061b92e565b60015b61707d573d808015611fca576040519150601f19603f3d011682016040523d82523d6000602084013e611fcf565b8084838151811061708a57fe5b6020026020010181815250508382815181106170a257fe5b6020026020010151600014156170b8575061201a565b50600101616f94565b6170c961a5e6565b6170d161a5e6565b6060836001600160401b03811180156170e957600080fd5b50604051908082528060200260200182016040528015617113578160200160208202803683370190505b50905060005b848110156171435760001982828151811061713057fe5b6020908102919091010152600101617119565b506060846001600160401b038111801561715c57600080fd5b50604051908082528060200260200182016040528015617186578160200160208202803683370190505b50905060005b858110156171b6576000198282815181106171a357fe5b602090810291909101015260010161718c565b5060005b86518110156172e95760006060306001600160a01b03168984815181106171dd57fe5b60200260200101516040516171f2919061c675565b6000604051808303816000865af19150503d806000811461722f576040519150601f19603f3d011682016040523d82523d6000602084013e617234565b606091505b509150915081156172df57606061724b828a6190c3565b905060008160018b038151811061725e57fe5b6020026020010151905060008111801561728d57508560018b038151811061728257fe5b602002602001015181105b156172dc578488526020880183905260005b8a8110156172da578281815181106172b357fe5b60200260200101518782815181106172c757fe5b602090810291909101015260010161729f565b505b50505b50506001016171ba565b506000198160018703815181106172fc57fe5b602002602001015114156173105750614477565b60005b87518114612d065761732a88828151811061435557fe5b60006060306001600160a01b03168a848151811061734457fe5b6020026020010151604051617359919061c675565b6000604051808303816000865af19150503d8060008114617396576040519150601f19603f3d011682016040523d82523d6000602084013e61739b565b606091505b509150915081156174465760606173b2828a6190c3565b905060008160018b03815181106173c557fe5b602002602001015190506000811180156173f457508660018b03815181106173e957fe5b602002602001015181105b15617443578489526020890183905260005b8a8110156174415782818151811061741a57fe5b602002602001015188828151811061742e57fe5b6020908102919091010152600101617406565b505b50505b5050600101617313565b60606000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561748d57600080fd5b505afa1580156174a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906174c5919061b190565b905060018351036001600160401b03811180156174e157600080fd5b5060405190808252806020026020018201604052801561750b578160200160208202803683370190505b50915060005b8251811015617737576060826001600160a01b0316635b1dc86f620249f087858151811061753b57fe5b602002602001015188866001018151811061755257fe5b60200260200101516040518463ffffffff1660e01b815260040161757792919061c6aa565b60006040518083038187803b15801561758f57600080fd5b5086fa935050505080156175c557506040513d6000823e601f3d908101601f191682016040526175c2919081019061b623565b60015b617633573d8080156175f3576040519150601f19603f3d011682016040523d82523d6000602084013e6175f8565b606091505b506000805b50604051908082528060200260200182016040528015617627578160200160208202803683370190505b5094505050505061773a565b8051617641576000806175fd565b6000805b825181101561772b57600083828151811061765c57fe5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561769c57600080fd5b505afa1580156176b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906176d4919061b92e565b905082811115617722578092508382815181106176ed57fe5b602002602001015188878151811061770157fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101617645565b50505050600101617511565b50505b92915050565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561779457600080fd5b505afa1580156177a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906177cc919061b92e565b6040518263ffffffff1660e01b81526004016177e8919061c9aa565b60206040518083038186803b15801561780057600080fd5b505afa158015617814573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617838919061b190565b91508560200151516000141561784d57615ef3565b6000805b876020015151811015615ef05760028860200151828151811061787057fe5b60200260200101515110156178845761795e565b836001600160a01b0316637f9c0ecd620493e08a6020015184815181106178a757fe5b60200260200101518860018a5103815181106178bf57fe5b60200260200101516040518463ffffffff1660e01b81526004016178e492919061c8e9565b60206040518083038187803b1580156178fc57600080fd5b5086fa9350505050801561792d575060408051601f3d908101601f1916820190925261792a9181019061b92e565b60015b6179365761795e565b8281111561795c578092508860200151828151811061795157fe5b602002602001015193505b505b600101617851565b61796e61a578565b50604080516080810182523080825260006020830181905292820152606081019190915290565b806001600160a01b0316826001600160a01b031614156179d05760405162461bcd60e51b81526004016179c79061cb0e565b60405180910390fd5b5050565b604080516001808252818301909252606091829190816020015b6179f661a642565b8152602001906001900390816179ee5790505090506040518060a001604052808560000151815260200160008152602001600181526020018481526020016040518060200160405280600081525081525081600081518110617a5457fe5b60209081029190910101529392505050565b6040516303795fb160e11b81526000906001600160a01b038416906306f2bf6290617a9590859060040161c681565b60206040518083038186803b158015617aad57600080fd5b505afa158015617ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cb5919061b190565b6000806001600160a01b038516617afb5761103e565b6060856001600160a01b0316620249f08686604051602401617b1d919061c9aa565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051617b5b919061c675565b6000604051808303818686fa925050503d8060008114617b97576040519150601f19603f3d011682016040523d82523d6000602084013e617b9c565b606091505b5090925090508115617bbf5780806020019051810190617bbc919061b92e565b92505b50935093915050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401617bfe919061c9aa565b60a06040518083038186803b158015617c1657600080fd5b505afa158015617c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617c4e919061be54565b94509450505092506000620f424090508a604001516001600160a01b0316896001600160a01b03161415617d76576000617c8d8964e8d4a51000619823565b90506000617cb16b033b2e3c9fd0803ce8000000617cab8885619859565b90619823565b9050848110617cc95760009650505050505050614150565b6000617d58670de0b6b3a7640000617d528c6001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015617d1357600080fd5b505afa158015617d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617d4b919061b92e565b8690619823565b90619875565b90506000617d66848361989f565b9850614150975050505050505050565b8a604001516001600160a01b03168a6001600160a01b03161415617e76578784811115617dab57600095505050505050614150565b6000617dc76b033b2e3c9fd0803ce8000000617cab888561989f565b9050838111617ddf5760009650505050505050614150565b6000617e648a6001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015617e1d57600080fd5b505afa158015617e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617e55919061b92e565b670de0b6b3a764000090619859565b90506000617d6682617d528688619823565b5060009a9950505050505050505050565b600080600080600087806020019051810190617ea3919061b1e8565b9350935093509350816001600160a01b0316846001600160a01b03161415617f8d576040516351400f0b60e11b81526001600160a01b0384169063a2801e1690620493e090617ef6908a9060040161c9aa565b60206040518083038187803b158015617f0e57600080fd5b5086fa93505050508015617f3f575060408051601f3d908101601f19168201909252617f3c9181019061b92e565b60015b617f81573d808015617f6d576040519150601f19603f3d011682016040523d82523d6000602084013e617f72565b606091505b50600095505050505050613cb5565b9450613cb59350505050565b60405163ca19ebd960e01b81526001600160a01b0382169063ca19ebd990620493e090617ef69087908b9060040161c88e565b6000816001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b158015617ffb57600080fd5b505afa15801561800f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618033919061b190565b6001600160a01b03166321f8a7216040518163ffffffff1660e01b815260040161805c9061cb2b565b60206040518083038186803b15801561807457600080fd5b505afa158015618088573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061773a919061b190565b6000806180b8866198be565b905046600181141561814f5760405163dc703e7360e01b81526001600160a01b0383169063dc703e73906180f49089908990899060040161cc6f565b60606040518083038186803b15801561810c57600080fd5b505afa158015618120573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618144919061be11565b5090935061201a9050565b604051633d142a8d60e21b81526001600160a01b0383169063f450aa349061817f9089908990899060040161cc6f565b60606040518083038186803b15801561819757600080fd5b505afa1580156181ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906181cf919061be11565b509098975050505050505050565b60608251600214156181f5576146ce8585858561995a565b82516003141561820b576146ce85858585619aac565b60405162461bcd60e51b81526004016179c79061cb38565b6000805b82518110156182705760006001600160a01b031683828151811061824757fe5b60200260200101516001600160a01b0316141561826857600091505061131e565b600101618227565b50600192915050565b60606002835110158015618291575081516001018351145b6182ad5760405162461bcd60e51b81526004016179c79061cb48565b81516003028351601402016001600160401b03811180156182cd57600080fd5b506040519080825280601f01601f1916602001820160405280156182f8576020820181803683370190505b5090506020810160005b84518110156177375780156183a757600084600183038151811061832257fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561836257600080fd5b505afa158015618376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061839a919061bd93565b60e81b8352506003909101905b60008582815181106183b557fe5b602090810291909101015160601b835250601490910190600101618302565b602081015160009060609081906001600160e01b03198116631577da3360e01b1461840357600093505061842f565b8451600319810160048701908152956184249181016020019060240161b8b3565b600195509093509150505b9193909250565b6000828202831580159061845357508284828161844f57fe5b0414155b1561846257600091505061773a565b6706f05b59d3b200008101818110156184805760009250505061773a565b670de0b6b3a76400009004949350505050565b606081516001600160401b03811180156184ac57600080fd5b506040519080825280602002602001820160405280156184d6578160200160208202803683370190505b50905060005b8251811015613a91578260018285510303815181106184f757fe5b602002602001015182828151811061850b57fe5b6001600160a01b03909216602092830291909101909101526001016184dc565b606081516001600160401b038111801561854457600080fd5b5060405190808252806020026020018201604052801561856e578160200160208202803683370190505b50905060005b8251811015613a915782600182855103038151811061858f57fe5b60200260200101518282815181106185a357fe5b6001600160a01b0390921660209283029190910190910152600101618574565b6000806000858060200190518101906185dc919061b1ae565b915091506000858060200190518101906185f6919061b190565b90503063e8e4af0983858461860a8a619cf0565b6040518563ffffffff1660e01b8152600401618629949392919061c6fa565b60006040518083038186803b15801561864157600080fd5b505afa92505050801561867657506040513d6000823e601f3d908101601f19168201604052618673919081019061b87f565b60015b6186b7573d8080156186a4576040519150601f19603f3d011682016040523d82523d6000602084013e6186a9565b606091505b506000945050505050613cb5565b806000815181106186c457fe5b6020026020010151945050505050613cb5565b606081516001600160401b03811180156186f057600080fd5b5060405190808252806020026020018201604052801561871a578160200160208202803683370190505b50905081516000141561872c5761773a565b600061875d846000015185602001518560008151811061874857fe5b6020026020010151876040015163ffffffff16565b90508061876a575061773a565b60006187878560200151866000015184886040015163ffffffff16565b90508061879557505061773a565b60005b84518110156188e0576000805b6005811015618889576187cc8784815181106187bd57fe5b60200260200101518587619d31565b9450846187d857618889565b6187e761271561271087619d31565b9450846187f357618889565b600061881089602001518a60000151888c6040015163ffffffff16565b90508061881d5750618889565b80945087848151811061882c57fe5b602002602001015185106188805787848151811061884657fe5b602002602001015161271089868151811061885d57fe5b60200260200101518703028161886f57fe5b049250600583116188805750618889565b506001016187a5565b508015806188975750600581115b156188a257506188e0565b6188c08683815181106188b157fe5b60200260200101518486619d31565b8583815181106188cc57fe5b602090810291909101015250600101618798565b50505092915050565b604084015181516060919082816001600160401b038111801561890b57600080fd5b50604051908082528060200260200182016040528015618935578160200160208202803683370190505b50905087600001516001600160a01b0316876001600160a01b0316148015618972575087604001516001600160a01b0316866001600160a01b0316145b15618a3b5760005b82811015618a3057836001600160a01b031663b0e3890087838151811061899d57fe5b60200260200101516040518263ffffffff1660e01b81526004016189c1919061c9aa565b60206040518083038186803b1580156189d957600080fd5b505afa1580156189ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618a11919061b92e565b828281518110618a1d57fe5b602090810291909101015260010161897a565b509250611acf915050565b87604001516001600160a01b0316876001600160a01b0316148015618a6c575087516001600160a01b038781169116145b15618b2a5760005b82811015618a3057836001600160a01b031663bb2952fc878381518110618a9757fe5b60200260200101516040518263ffffffff1660e01b8152600401618abb919061c9aa565b60206040518083038186803b158015618ad357600080fd5b505afa158015618ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618b0b919061b92e565b828281518110618b1757fe5b6020908102919091010152600101618a74565b979650505050505050565b6000611acf83617d52618b4982600161989f565b618b538887619823565b90619859565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b815250604051618b97919061c675565b600060405180830381855afa9150503d8060008114618bd2576040519150601f19603f3d011682016040523d82523d6000602084013e618bd7565b606091505b5091509150818015618beb57506020815110155b15618bfe57618bfb816000619d89565b92505b5050919050565b600080606085806020019051810190618c1e919061b2f0565b90925090506000606030637b6b3ca560e11b8585618c3b8a619cf0565b604051602401618c4d9392919061c83a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051618c8b919061c675565b600060405180830381855afa9150503d8060008114618cc6576040519150601f19603f3d011682016040523d82523d6000602084013e618ccb565b606091505b509150915081618ce2576000945050505050613cb5565b80806020019051810190618cf6919061b87f565b600081518110618d0257fe5b60200260200101519450505050509392505050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401618d4d919061c9aa565b60a06040518083038186803b158015618d6557600080fd5b505afa158015618d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618d9d919061be54565b945094505050925089604001516001600160a01b0316886001600160a01b03161415618eb45760008790506000618e4d886001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015618e0657600080fd5b505afa158015618e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618e3e919061b92e565b670de0b6b3a76400009061989f565b90506000618e6782617d5285670de0b6b3a7640000619823565b90506000618e856b033b2e3c9fd0803ce8000000617cab8985619859565b9050858110618e9e576000975050505050505050614150565b6000617d666001618b538564e8d4a51000619875565b89604001516001600160a01b0316896001600160a01b03161415618f99576000618ee38864e8d4a51000619823565b90506000618f23886001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015617e1d57600080fd5b90506000618f3d670de0b6b3a7640000617d528585619823565b905085811115618f565760009650505050505050614150565b6000618f726b033b2e3c9fd0803ce8000000617cab898561989f565b9050848111618f8b576000975050505050505050614150565b509550614150945050505050565b5060009998505050505050505050565b6000806000606086806020019051810190618fc4919061b249565b919450925090506000606030634092e6b160e01b868686618fe48c619cf0565b604051602401618ff7949392919061c761565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051619035919061c675565b600060405180830381855afa9150503d8060008114619070576040519150601f19603f3d011682016040523d82523d6000602084013e619075565b606091505b50915091508161908d57600095505050505050613cb5565b808060200190518101906190a1919061b87f565b6000815181106190ad57fe5b6020026020010151955050505050509392505050565b815160609060206002840102810390826190de868484619d95565b90506190ed8160006020619e2b565b80806020019051810190614150919061b87f565b60005b8151811015619147576000600182845103036020028451039050600083838151811061912c57fe5b60209081029190910101519185019190915250600101619104565b505050565b80516000906001600160a01b038616635e1e632584600019840184811061916f57fe5b602002602001015187876040518463ffffffff1660e01b81526004016191979392919061cbff565b604080518083038186803b1580156191ae57600080fd5b505afa1580156191c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618b2a919061bdb1565b6000806191f161a600565b85806020019051810190619205919061bb5a565b9150915060008580602001905181019061921f919061bb3c565b9050600060603063205e01d760e11b85878661923a8c619cf0565b604051602401618ff7949392919061cb58565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b815260040161928092919061c6aa565b60006040518083038186803b15801561929857600080fd5b505afa1580156192ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526192d4919081019061b623565b90506001915080516000141561936d576040516315e8a07760e21b81526001600160a01b038816906357a281dc90619312908790899060040161c6aa565b60006040518083038186803b15801561932a57600080fd5b505afa15801561933e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052619366919081019061b623565b9050600091505b80518610619382576000809250925050615ef3565b80868151811061938e57fe5b602002602001015192505094509492505050565b600080600080868060200190518101906193bc919061b2ad565b925092509250801561946057604051633cd0243b60e11b81526001600160a01b038316906379a0487690620493e0906193fc906000908a9060040161c68f565b604080518083038187803b15801561941357600080fd5b5086fa93505050508015619444575060408051601f3d908101601f191682019092526194419181019061bde1565b60015b6194545760009350505050613cb5565b509350613cb592505050565b6040516366410a2160e01b81526001600160a01b038316906366410a2190620493e0906193fc906000908a9060040161c68f565b60008061949f61a600565b858060200190518101906194b3919061bac9565b60408051600180825281830190925292945090925060609190816020015b6194d961a600565b8152602001906001900390816194d157905050905081816000815181106194fc57fe5b60209081029190910101526040516326207f2d60e21b81526001600160a01b03841690639881fcb490619535908890859060040161cc4f565b60006040518083038186803b15801561954d57600080fd5b505afa158015619561573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052619589919081019061b87f565b60018151811061959557fe5b602002602001015193505050509392505050565b6000806000858060200190518101906195c2919061b1ae565b915091506000858060200190518101906195dc919061b190565b9050306330d6570d83858461860a8a619cf0565b6000806060846001600160a01b03166370a0823160e01b85604051602401619618919061c681565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051619656919061c675565b600060405180830381855afa9150503d8060008114619691576040519150601f19603f3d011682016040523d82523d6000602084013e619696565b606091505b50915091508180156196aa57506020815110155b15617737576136e6816000619d89565b600080600080868060200190518101906196d4919061baf9565b91945092509050600060603063849489a160e01b8686866196f48c619cf0565b604051602401618ff7949392919061ca5e565b6000806060856001600160a01b031663dd62ed3e60e01b868660405160240161973192919061c6aa565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161976f919061c675565b600060405180830381855afa9150503d80600081146197aa576040519150601f19603f3d011682016040523d82523d6000602084013e6197af565b606091505b50915091508180156197c357506020815110155b156122fd57614150816000619d89565b6000806000858060200190518101906197ec919061b1ae565b9150915060008086806020019051810190619807919061b1ae565b9150915061981784848389614ed1565b98975050505050505050565b6000826198325750600061773a565b8282028284828161983f57fe5b0414613cb557613cb561985460018686619e36565b619e90565b600082820183811015613cb557613cb561985460008686619e36565b60008161988b5761988b61985460038585619e36565b600082848161989657fe5b04949350505050565b6000828211156198b8576198b861985460028585619e36565b50900390565b6000816001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b1580156198f957600080fd5b505afa15801561990d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190619931919061b190565b6001600160a01b03166321f8a7216040518163ffffffff1660e01b815260040161805c9061cb1e565b6040805160028082526060828101909352816020015b606081526020019060019003908161997057905050905061998f61a674565b619a0a6040518060a00160405280886001600160a01b03168152602001876001600160a01b03168152602001866000815181106199c857fe5b60200260200101516001600160a01b03168152602001866001815181106199eb57fe5b60200260200101516001600160a01b0316815260200185815250619e98565b5090506000805b6002811015610e95576000838260028110619a2857fe5b602002015160408051600180825281830190925291925081602001602082028036833701905050858481518110619a5b57fe5b602002602001018190525080858481518110619a7357fe5b6020026020010151600081518110619a8757fe5b6001600160a01b03909216602092830291909101909101525060019182019101619a11565b60408051600480825260a08201909252606091816020015b6060815260200190600190039081619ac4579050509050619ae361a674565b619aeb61a674565b619b666040518060a00160405280896001600160a01b03168152602001886001600160a01b0316815260200187600081518110619b2457fe5b60200260200101516001600160a01b0316815260200187600181518110619b4757fe5b60200260200101516001600160a01b0316815260200186815250619e98565b91509150619b7261a674565b619bfd6040518060a001604052808a6001600160a01b03168152602001896001600160a01b0316815260200188600181518110619bab57fe5b60200260200101516001600160a01b0316815260200188600281518110619bce57fe5b60200260200101516001600160a01b0316815260200184600060028110619bf157fe5b60200201519052619e98565b5090506000805b60028110156116ab5760005b6002811015619ce757604080516002808252606082018352909160208301908036833701905050878481518110619c4357fe5b60200260200101819052506060878481518110619c5c57fe5b60200260200101519050868360028110619c7257fe5b602002015181600081518110619c8457fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848260028110619cb057fe5b602002015181600181518110619cc257fe5b6001600160a01b03909216602092830291909101909101525060019283019201619c10565b50600101619c04565b604080516001808252818301909252606091602080830190803683370190505090508181600081518110619d2057fe5b602002602001018181525050919050565b6000831580619d3e575081155b80619d47575082155b15619d5457506000613cb5565b83820282858281619d6157fe5b0414619d71576000915050613cb5565b8360018503820181619d7f57fe5b0495945050505050565b6000613cb5838361a251565b606081831115619dae57619dae6198546000858561a27b565b8351821115619dc757619dc7619854600184875161a27b565b8282036001600160401b0381118015619ddf57600080fd5b506040519080825280601f01601f191660200182016040528015619e0a576020820181803683370190505b509050613cb5619e198261a29a565b84619e238761a29a565b01835161a2a0565b61914783838361a345565b606063e946c1bb60e01b848484604051602401619e559392919061ca6c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b619ea061a674565b619ea861a674565b6040805160028082526060808301845292602083019080368337019050509050836040015181600081518110619eda57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050836060015181600181518110619f0c57fe5b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252606091816020016020820280368337019050509050846080015181600081518110619f5b57fe5b602002602001018181525050619f6f61a692565b5060408051608081018252606481526101f46020820152610bb891810191909152612710606082015260005b600481101561a24857600087600001516001600160a01b0316631698ee8289604001518a60600151868660048110619fcf57fe5b60200201516040518463ffffffff1660e01b8152600401619ff29392919061c7ca565b60206040518083038186803b15801561a00a57600080fd5b505afa15801561a01e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061a042919061ba89565b905061a04d8161a36c565b61a057575061a240565b60408051600180825281830190925260609160208083019080368337019050509050818160008151811061a08757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050606061a0b38783618279565b905089602001516001600160a01b031663551e2bdf6206ddd08c60000151848a6040518563ffffffff1660e01b815260040161a0f19392919061c9c6565b60006040518083038187803b15801561a10957600080fd5b5086fa9350505050801561a11b575060015b61a23c573d80801561a149576040519150601f19603f3d011682016040523d82523d6000602084013e61a14e565b606091505b506000606061a15c836183d4565b5091509150811561a238578a518151829060009061a17657fe5b6020026020010151111561a1d6578a516020808d01919091528c516001600160a01b0316908d01528051819060009061a1ab57fe5b60200260200101518b60006002811061a1c057fe5b60200201526001600160a01b0386168c5261a238565b8a600160200201518160008151811061a1eb57fe5b6020026020010151111561a238578060008151811061a20657fe5b60200260200101518b60016002811061a21b57fe5b6020020152858c60016001600160a01b0390921660209290920201525b5050505b5050505b600101619f9b565b50505050915091565b6000816020018351101561a2725761a272619854600585518560200161a27b565b50016020015190565b6060632800659560e01b848484604051602401619e559392919061ca87565b60200190565b602081101561a2ca576001816020036101000a038019835116818551168082178652505050619147565b8282141561a2d757619147565b8282111561a3115760208103905080820181840181515b8285101561a30957845186526020958601959094019361a2ee565b905250619147565b60208103905080820181840183515b8186121561a33c5782518252601f19928301929091019061a320565b85525050505050565b816020018351101561a3645761a364619854600585518560200161a27b565b910160200152565b6000813b8061a37f57600091505061131e565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561a3b957600080fd5b505afa15801561a3cd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061a3f1919061b190565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161a41c919061c681565b60206040518083038186803b15801561a43457600080fd5b505afa15801561a448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061a46c919061b92e565b61a4785750600061131e565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561a4b157600080fd5b505afa15801561a4c5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061a4e9919061b190565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161a514919061c681565b60206040518083038186803b15801561a52c57600080fd5b505afa15801561a540573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061a564919061b92e565b61a5705750600061131e565b506001919050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051808201909152606081526000602082015290565b604051806040016040528060008152602001606081525090565b604080516060810182526000808252602082018190529181019190915290565b6040805160608101909152600080825260208201908152600060209091015290565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b803561773a8161cebd565b805161773a8161cebd565b600082601f83011261a6d757600080fd5b813561a6ea61a6e58261cd47565b61cd21565b9150818183526020840193506020810190508385602084028201111561a70f57600080fd5b60005b8381101561a73b578161a725888261a6b0565b845250602092830192919091019060010161a712565b5050505092915050565b600082601f83011261a75657600080fd5b815161a76461a6e58261cd47565b9150818183526020840193506020810190508385602084028201111561a78957600080fd5b60005b8381101561a73b578161a79f888261a6bb565b845250602092830192919091019060010161a78c565b600082601f83011261a7c657600080fd5b813561a7d461a6e58261cd47565b81815260209384019390925082018360005b8381101561a73b578135860161a7fc888261a6c6565b845250602092830192919091019060010161a7e6565b60008083601f84011261a82457600080fd5b5081356001600160401b0381111561a83b57600080fd5b60208301915083602082028301111561a85357600080fd5b9250929050565b600082601f83011261a86b57600080fd5b813561a87961a6e58261cd47565b81815260209384019390925082018360005b8381101561a73b578135860161a8a1888261abf1565b845250602092830192919091019060010161a88b565b600082601f83011261a8c857600080fd5b813561a8d661a6e58261cd47565b9150818183526020840193506020810190508385602084028201111561a8fb57600080fd5b60005b8381101561a73b578161a911888261ac37565b845250602092830192919091019060010161a8fe565b600082601f83011261a93857600080fd5b815161a94661a6e58261cd47565b9150818183526020840193506020810190508385602084028201111561a96b57600080fd5b60005b8381101561a73b578161a981888261abd0565b845250602092830192919091019060010161a96e565b600082601f83011261a9a857600080fd5b813561a9b661a6e58261cd47565b81815260209384019390925082018360005b8381101561a73b578135860161a9de888261ad12565b845250602092830192919091019060010161a9c8565b600082601f83011261aa0557600080fd5b813561aa1361a6e58261cd47565b915081818352602084019350602081019050838561018084028201111561aa3957600080fd5b60005b8381101561a73b578161aa4f888261aecf565b845250602090920191610180919091019060010161aa3c565b600082601f83011261aa7957600080fd5b813561aa8761a6e58261cd47565b9150818183526020840193506020810190508385608084028201111561aaac57600080fd5b60005b8381101561a73b578161aac2888261b072565b8452506020909201916080919091019060010161aaaf565b600082601f83011261aaeb57600080fd5b813561aaf961a6e58261cd47565b9150818183526020840193506020810190508385602084028201111561ab1e57600080fd5b60005b8381101561a73b578161ab34888261abc5565b845250602092830192919091019060010161ab21565b600082601f83011261ab5b57600080fd5b815161ab6961a6e58261cd47565b9150818183526020840193506020810190508385602084028201111561ab8e57600080fd5b60005b8381101561a73b578161aba4888261abd0565b845250602092830192919091019060010161ab91565b805161773a8161ced1565b803561773a8161ceda565b805161773a8161ceda565b803561773a8161cee3565b805161773a8161cee3565b600082601f83011261ac0257600080fd5b813561ac1061a6e58261cd67565b9150808252602083016020830185838301111561ac2c57600080fd5b6188e083828461ce5a565b803561773a8161ceec565b805161773a8161ceec565b805161773a8161cef5565b803561773a8161cf02565b803561773a8161cf0f565b805161773a8161cf0f565b60006040828403121561ac8b57600080fd5b61ac95604061cd21565b9050600061aca3848461abc5565b825250602061acb48484830161a6b0565b60208301525092915050565b60006040828403121561acd257600080fd5b61acdc604061cd21565b9050600061acea848461ac37565b82525060208201356001600160401b0381111561ad0657600080fd5b61acb48482850161a7b5565b600060a0828403121561ad2457600080fd5b61ad2e60a061cd21565b9050600061ad3c848461abc5565b825250602061ad4d8484830161abc5565b602083015250604061ad618482850161abc5565b604083015250606061ad758482850161abc5565b60608301525060808201356001600160401b0381111561ad9457600080fd5b61ada08482850161abf1565b60808301525092915050565b60006060828403121561adbe57600080fd5b61adc8606061cd21565b9050600061add6848461a6b0565b825250602061ade78484830161abdb565b602083015250604061adfb8482850161abdb565b60408301525092915050565b60006060828403121561ae1957600080fd5b61ae23606061cd21565b9050600061ae31848461a6bb565b825250602061ae428484830161abe6565b602083015250604061adfb8482850161abe6565b60006040828403121561ae6857600080fd5b61ae72604061cd21565b9050600061aca3848461a6b0565b60006060828403121561ae9257600080fd5b61ae9c606061cd21565b9050600061aeaa848461a6b0565b825250602061aebb8484830161a6b0565b602083015250604061adfb8482850161a6b0565b6000610180828403121561aee257600080fd5b61aeed61018061cd21565b9050600061aefb848461ac37565b825250602061af0c8484830161ac37565b602083015250604061af208482850161b130565b604083015250606061af348482850161b130565b606083015250608061af488482850161b130565b60808301525060a061af5c8482850161a6b0565b60a08301525060c061af708482850161a6b0565b60c08301525060e061af848482850161a6b0565b60e08301525061010061af998482850161a6b0565b6101008301525061012061afaf8482850161abc5565b6101208301525061014061afc58482850161b151565b6101408301525061016061afdb8482850161abc5565b6101608301525092915050565b60006060828403121561affa57600080fd5b61b004606061cd21565b9050600061b012848461a6b0565b825250602061aebb8484830161abc5565b60006060828403121561b03557600080fd5b61b03f606061cd21565b9050600061b04d848461abd0565b825250602061b05e8484830161ac4d565b602083015250604061adfb8482850161b13b565b60006080828403121561b08457600080fd5b61b08e608061cd21565b9050600061b09c848461ac58565b825250602061b0ad8484830161b15c565b602083015250604061b0c18482850161abc5565b604083015250606061b0d58482850161abc5565b60608301525092915050565b60006060828403121561b0f357600080fd5b61b0fd606061cd21565b9050600061b10b848461a6bb565b825250602061b11c8484830161a6bb565b602083015250604061adfb8482850161abba565b803561773a8161cf18565b805161773a8161cf18565b805161773a8161cf21565b803561773a8161cf2a565b803561773a8161cf33565b805161773a8161cf33565b60006020828403121561b18457600080fd5b6000611acf848461a6b0565b60006020828403121561b1a257600080fd5b6000611acf848461a6bb565b6000806040838503121561b1c157600080fd5b600061b1cd858561a6bb565b925050602061b1de8582860161a6bb565b9150509250929050565b6000806000806080858703121561b1fe57600080fd5b600061b20a878761a6bb565b945050602061b21b8782880161a6bb565b935050604061b22c8782880161a6bb565b925050606061b23d8782880161a6bb565b91505092959194509250565b60008060006060848603121561b25e57600080fd5b600061b26a868661a6bb565b935050602061b27b8682870161a6bb565b92505060408401516001600160401b0381111561b29757600080fd5b61b2a38682870161a745565b9150509250925092565b60008060006060848603121561b2c257600080fd5b600061b2ce868661a6bb565b935050602061b2df8682870161a6bb565b925050604061b2a38682870161abba565b6000806040838503121561b30357600080fd5b600061b30f858561a6bb565b92505060208301516001600160401b0381111561b32b57600080fd5b61b1de8582860161a745565b60008060008060008060c0878903121561b35057600080fd5b600061b35c898961a6b0565b965050602061b36d89828a0161a6b0565b955050604061b37e89828a0161a6b0565b945050606061b38f89828a0161a6b0565b935050608061b3a089828a0161a6b0565b92505060a08701356001600160401b0381111561b3bc57600080fd5b61b3c889828a0161aada565b9150509295509295509295565b600080600080600060a0868803121561b3ed57600080fd5b600061b3f9888861a6b0565b955050602061b40a8882890161a6b0565b945050604061b41b8882890161a6b0565b935050606061b42c8882890161a6b0565b92505060808601356001600160401b0381111561b44857600080fd5b61b4548882890161aada565b9150509295509295909350565b6000806000806080858703121561b47757600080fd5b600061b483878761a6b0565b945050602061b4948782880161a6b0565b935050604061b4a58782880161a6b0565b92505060608501356001600160401b0381111561b4c157600080fd5b61b23d8782880161aada565b6000806000806080858703121561b4e357600080fd5b600061b4ef878761a6b0565b945050602061b5008782880161a6b0565b935050604061b5118782880161a6b0565b925050606061b23d8782880161abc5565b6000806000806080858703121561b53857600080fd5b600061b544878761a6b0565b945050602061b5558782880161a6b0565b93505060408501356001600160401b0381111561b57157600080fd5b61b4a58782880161a6c6565b60008060006060848603121561b59257600080fd5b600061b59e868661a6b0565b93505060208401356001600160401b0381111561b5ba57600080fd5b61b5c68682870161a6c6565b92505060408401356001600160401b0381111561b5e257600080fd5b61b2a38682870161aada565b600080600080600060a0868803121561b60657600080fd5b600061b612888861a6b0565b955050602061b40a8882890161abc5565b60006020828403121561b63557600080fd5b81516001600160401b0381111561b64b57600080fd5b611acf8482850161a745565b6000806020838503121561b66a57600080fd5b82356001600160401b0381111561b68057600080fd5b61b68c8582860161a812565b92509250509250929050565b60008060006060848603121561b6ad57600080fd5b83356001600160401b0381111561b6c357600080fd5b61b6cf8682870161a85a565b93505060208401356001600160401b0381111561b6eb57600080fd5b61b6f78682870161a85a565b925050604061b2a38682870161abc5565b60006020828403121561b71a57600080fd5b81356001600160401b0381111561b73057600080fd5b611acf8482850161a8b7565b6000806040838503121561b74f57600080fd5b82356001600160401b0381111561b76557600080fd5b61b7718582860161a8b7565b925050602061b1de8582860161a6b0565b60008060006060848603121561b79757600080fd5b83356001600160401b0381111561b7ad57600080fd5b61b7b98682870161a8b7565b935050602061b7ca8682870161a6b0565b925050604061b2a38682870161a6b0565b60006020828403121561b7ed57600080fd5b81516001600160401b0381111561b80357600080fd5b611acf8482850161a927565b60008060006060848603121561b82457600080fd5b83356001600160401b0381111561b83a57600080fd5b61b8468682870161a9f4565b93505060208401356001600160401b0381111561b86257600080fd5b61b86e8682870161aa68565b925050604061b2a38682870161ac37565b60006020828403121561b89157600080fd5b81516001600160401b0381111561b8a757600080fd5b611acf8482850161ab4a565b6000806040838503121561b8c657600080fd5b82516001600160401b0381111561b8dc57600080fd5b61b8e88582860161ab4a565b92505060208301516001600160401b0381111561b90457600080fd5b61b1de8582860161ab4a565b60006020828403121561b92257600080fd5b6000611acf848461abba565b60006020828403121561b94057600080fd5b6000611acf848461abd0565b6000806000806080858703121561b96257600080fd5b600061b96e878761ac37565b94505060208501356001600160401b0381111561b98a57600080fd5b61b5558782880161a997565b6000806000806080858703121561b9ac57600080fd5b600061b9b8878761ac37565b945050602061b9c98782880161ac37565b935050604061b4a58782880161ac37565b6000806000806080858703121561b9f057600080fd5b600061b544878761ac37565b6000806000806080858703121561ba1257600080fd5b600061ba1e878761ac37565b945050602061ba2f8782880161abc5565b935050604061b4a58782880161abc5565b60008060006060848603121561ba5557600080fd5b600061ba61868661ac37565b93505060208401356001600160401b0381111561ba7d57600080fd5b61b5c68682870161a8b7565b60006020828403121561ba9b57600080fd5b6000611acf848461ac42565b6000806000806080858703121561babd57600080fd5b600061b483878761ac37565b6000806080838503121561badc57600080fd5b600061bae8858561ac42565b925050602061b1de8582860161b0e1565b60008060006060848603121561bb0e57600080fd5b600061bb1a868661ac42565b935050602061bb2b8682870161a6bb565b925050604061b2a38682870161a6bb565b60006020828403121561bb4e57600080fd5b6000611acf848461ac6e565b6000806080838503121561bb6d57600080fd5b600061bb79858561ac6e565b925050602061b1de8582860161ae07565b60008060008060a0858703121561bba057600080fd5b600061bbac878761ac79565b945050604061bbbd8782880161a6b0565b935050606061bbce8782880161a6b0565b92505060808501356001600160401b0381111561b4c157600080fd5b6000806000806080858703121561bc0057600080fd5b84356001600160401b0381111561bc1657600080fd5b61b4838782880161acc0565b60008060008060c0858703121561bc3857600080fd5b600061bc44878761adac565b945050606061bc558782880161ac63565b935050608061bc668782880161ac63565b92505060a08501356001600160401b0381111561b4c157600080fd5b60008060008060a0858703121561bc9857600080fd5b600061bbac878761ae56565b60008060008060c0858703121561bcba57600080fd5b600061bcc6878761ae80565b945050606061bcd78782880161a6b0565b935050608061bc668782880161a6b0565b6000806000610220848603121561bcfe57600080fd5b600061bd0a868661aecf565b93505061018061bd1c8682870161b072565b92505061020061b2a38682870161ac37565b60008060008060c0858703121561bd4457600080fd5b600061bcc6878761afe8565b600080600060a0848603121561bd6557600080fd5b600061bd71868661b023565b935050606061bd828682870161b13b565b925050608061b2a38682870161abba565b60006020828403121561bda557600080fd5b6000611acf848461b146565b6000806040838503121561bdc457600080fd5b600061bdd0858561abd0565b925050602061b1de8582860161abba565b6000806040838503121561bdf457600080fd5b600061be00858561abd0565b925050602061b1de8582860161abd0565b60008060006060848603121561be2657600080fd5b600061be32868661abd0565b935050602061be438682870161abd0565b925050604061b2a38682870161abd0565b600080600080600060a0868803121561be6c57600080fd5b600061be78888861abd0565b955050602061be898882890161abd0565b945050604061be9a8882890161abd0565b935050606061beab8882890161abd0565b925050608061b4548882890161abd0565b60006020828403121561bece57600080fd5b6000611acf848461b167565b600061bee6838361bf41565b505060200190565b600061bee6838361c1c6565b6000613cb5838361c1f7565b6000613cb5838361c393565b6000613cb5838361c3f8565b600061bf2a838361c60d565b505060600190565b61bf3b8161ce23565b82525050565b61bf3b8161cd9b565b600061bf558261cd8e565b61bf5f818561cd92565b935061bf6a8361a29a565b8060005b8381101561bf9857815161bf82888261beda565b975061bf8d8361a29a565b92505060010161bf6e565b509495945050505050565b600061bfae8261cd8e565b61bfb8818561cd92565b935061bfc38361a29a565b8060005b8381101561bf9857815161bfdb888261beee565b975061bfe68361a29a565b92505060010161bfc7565b600061bffc8261cd8e565b61c006818561cd92565b93508360208202850161c0188561a29a565b8060005b8581101561c052578484038952815161c035858261befa565b945061c0408361a29a565b60209a909a019992505060010161c01c565b5091979650505050505050565b600061c06a8261cd8e565b61c074818561cd92565b93508360208202850161c0868561a29a565b8060005b8581101561c052578484038952815161c0a3858261bf06565b945061c0ae8361a29a565b60209a909a019992505060010161c08a565b600061c0cb8261cd8e565b61c0d5818561cd92565b93508360208202850161c0e78561a29a565b8060005b8581101561c052578484038952815161c104858261bf12565b945061c10f8361a29a565b60209a909a019992505060010161c0eb565b600061c12c8261cd8e565b61c136818561cd92565b935061c1418361a29a565b8060005b8381101561bf9857815161c159888261bf1e565b975061c1648361a29a565b92505060010161c145565b600061c17a8261cd8e565b61c184818561cd92565b935061c18f8361a29a565b8060005b8381101561bf9857815161c1a7888261beee565b975061c1b28361a29a565b92505060010161c193565b61bf3b8161cda6565b61bf3b8161cdab565b61bf3b8161cdae565b600061c1e4838561131e565b935061c1f183858461ce5a565b50500190565b600061c2028261cd8e565b61c20c818561cd92565b935061c21c81856020860161ce66565b61c2258161ce92565b9093019392505050565b600061c23a8261cd8e565b61c244818561131e565b935061c25481856020860161ce66565b9290920192915050565b61bf3b8161cdbb565b61bf3b8161ce2e565b61bf3b8161ce39565b61bf3b8161ce44565b61bf3b8161cde4565b61bf3b8161ce4f565b600061c2a160258361cd92565b7f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e8152642fa820a4a960d91b602082015260400192915050565b6822bc31b430b733b2b960b91b9052565b680a6f2dce8d0cae8d2f60bb1b9052565b600061c30a602e8361cd92565b7f556e6973776170563353616d706c65722f756e737570706f7274656420746f6b81526d0cadc40e0c2e8d040d8cadccee8d60931b602082015260400192915050565b600061c35a60248361cd92565b7f556e69737761705633436f6d6d6f6e2f696e76616c69642070617468206c656e8152636774687360e01b602082015260400192915050565b805160009060a084019061c3a7858261c1c6565b50602083015161c3ba602086018261c1c6565b50604083015161c3cd604086018261c1c6565b50606083015161c3e0606086018261c1c6565b50608083015184820360808601526136e6828261c1f7565b805160408084526000919084019061c410828261c1f7565b91505060208301516111b1602086018261c1bd565b8051606083019061c436848261bf41565b50602082015161c449602085018261c1cf565b50604082015161c45c604085018261c1cf565b50505050565b8051608083019061c473848261bf41565b50602082015161c486602085018261c1bd565b50604082015161c499604085018261bf41565b50606082015161c45c606085018261c1bd565b8051600090604084019061c4c0858261c1c6565b50602083015184820360208601526136e6828261c1f7565b805161018083019061c4ea848261c25e565b50602082015161c4fd602085018261c25e565b50604082015161c510604085018261c644565b50606082015161c523606085018261c644565b50608082015161c536608085018261c644565b5060a082015161c54960a085018261bf41565b5060c082015161c55c60c085018261bf41565b5060e082015161c56f60e085018261bf41565b5061010082015161c58461010085018261bf41565b5061012082015161c59961012085018261c1c6565b5061014082015161c5ae61014085018261c656565b5061016082015161c45c61016085018261c1c6565b8051608083019061c5d4848261c267565b50602082015161c5e7602085018261c65f565b50604082015161c5fa604085018261c1c6565b50606082015161c45c606085018261c1c6565b8051606083019061c61e848261bf41565b50602082015161c631602085018261bf41565b50604082015161c45c604085018261c1bd565b61bf3b8161cdea565b61bf3b8161ce09565b61bf3b8161ce11565b61bf3b8161ce1d565b6000611acf82848661c1d8565b6000613cb5828461c22f565b6020810161773a828461bf41565b6040810161c69d828561bf32565b613cb5602083018461c1c6565b6040810161c6b8828561bf41565b613cb5602083018461bf41565b6080810161c6d3828761bf41565b61c6e0602083018661bf41565b61c6ed604083018561bf41565b6136e6606083018461bf41565b6080810161c708828761bf41565b61c715602083018661bf41565b61c722604083018561bf41565b8181036060830152614150818461c16f565b6060810161c742828661bf41565b61c74f602083018561bf41565b81810360408301526136e6818461bf4a565b6080810161c76f828761bf41565b61c77c602083018661bf41565b818103604083015261c78e818561bf4a565b90508181036060830152614150818461c16f565b6060810161c7b0828661bf41565b61c7bd602083018561bf41565b611acf604083018461c1bd565b6060810161c7d8828661bf41565b61c7e5602083018561bf41565b611acf604083018461c64d565b6060810161c800828661bf41565b61c80d602083018561bf41565b611acf604083018461c1c6565b6040810161c828828561bf41565b8181036020830152611acf818461bf4a565b6060810161c848828661bf41565b818103602083015261c85a818561bf4a565b905081810360408301526136e6818461c16f565b6040810161c87c828561bf41565b8181036020830152611acf818461c16f565b6040810161c69d828561bf41565b6060810161c8aa828661bf41565b61c8b7602083018561c1c6565b611acf604083018461c28b565b6040808252810161c8d5818561bf4a565b90508181036020830152611acf818461c16f565b6040808252810161c8fa818561bf4a565b9050613cb5602083018461c1c6565b6040808252810161c8d5818561bfa3565b6060808252810161c92b818661bff1565b9050818103602083015261c85a818561c16f565b60208082528101613cb5818461c0c0565b60208082528101613cb5818461c16f565b6020810161773a828461c1bd565b6060810161c97d828661c1bd565b61c98a602083018561bf41565b81810360408301526136e6818461c16f565b6040810161c87c828561c1bd565b6020810161773a828461c1c6565b6040810161c87c828561c25e565b6060810161c9d4828661c25e565b818103602083015261c85a818561c1f7565b6060810161c9f4828661c25e565b61ca01602083018561bf41565b611acf604083018461bf41565b6080810161ca1c828761c25e565b61ca29602083018661bf41565b61ca36604083018561bf41565b6136e6606083018461c1c6565b6080810161ca51828561c25e565b613cb5602083018461c60d565b6080810161c708828761c25e565b6060810161ca7a828661c267565b61c80d602083018561c1c6565b6060810161ca7a828661c270565b60e0810161caa3828761c279565b818103602083015261cab5818661c05f565b9050818103604083015261cac9818561bf4a565b90506136e6606083018461c462565b6060810161cae6828661c282565b61c80d602083018561c282565b6080810161cb01828561c282565b613cb5602083018461c425565b6020808252810161773a8161c294565b6020810161131e8261c2db565b6020810161131e8261c2ec565b6020808252810161773a8161c2fd565b6020808252810161773a8161c34d565b60c0810161cb66828761c425565b61cb73606083018661c282565b61cb80608083018561c282565b81810360a0830152614150818461c16f565b6060808252810161cba3818661c4ac565b9050818103602083015261c85a818561c4ac565b610200810161cbc6828561c4d8565b613cb561018083018461c5c3565b610220810161cbe3828661c4d8565b61cbf161018083018561c5c3565b611acf61020083018461c25e565b6060810161c9f4828661c1c6565b6040810161c828828561c1c6565b6060810161cc29828661c1c6565b818103602083015261cc3b818561bf4a565b905081810360408301526136e6818461bf4a565b6040810161cc5d828561c1c6565b8181036020830152611acf818461c121565b6060810161ca7a828661c1c6565b60c0810161cc8b828961c1c6565b61cc98602083018861c1c6565b61cca5604083018761c1c6565b61ccb2606083018661c1c6565b61ccbf608083018561c1c6565b618b2a60a083018461c1c6565b6000808335601e193685900301811261cce457600080fd5b8084019250823591506001600160401b0382111561cd0157600080fd5b60208301925060018202360383131561cd1957600080fd5b509250929050565b6040518181016001600160401b038111828210171561cd3f57600080fd5b604052919050565b60006001600160401b0382111561cd5d57600080fd5b5060209081020190565b60006001600160401b0382111561cd7d57600080fd5b506020601f91909101601f19160190565b5190565b90815260200190565b600061773a8261cdfd565b151590565b90565b6001600160e01b03191690565b600061773a8261cd9b565b8061131e8161ce9c565b8061131e8161cea9565b8061131e8161ceb3565b600f0b90565b6001600160801b031690565b61ffff1690565b6001600160a01b031690565b62ffffff1690565b6001600160401b031690565b60ff1690565b600061773a8261cdbb565b600061773a8261cdc6565b600061773a8261cdd0565b600061773a8261cdda565b600061773a8261cdf6565b82818337506000910152565b60005b8381101561ce8157818101518382015260200161ce69565b8381111561c45c5750506000910152565b601f01601f191690565b6004811061cea657fe5b50565b6008811061cea657fe5b6002811061cea657fe5b61cec68161cd9b565b811461cea657600080fd5b61cec68161cda6565b61cec68161cdab565b61cec68161cdae565b61cec68161cdbb565b6005811061cea657600080fd5b6004811061cea657600080fd5b61cec68161cde4565b61cec68161cdea565b61cec68161ce09565b61cec68161ce11565b61cec68161ce1d56fea26469706673582212209823b1d0ec73a395bc5ac48f93cc2c0218a5b102b3c4884ca302a47d248ee0c064736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3C7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8322FFF2 GT PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xBD71ECF6 GT PUSH2 0x10D JUMPI DUP1 PUSH4 0xE065DE75 GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xF5A4994D GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0xBFE JUMPI DUP1 PUSH4 0xF6D6794A EQ PUSH2 0xC1E JUMPI DUP1 PUSH4 0xFAF1CEE0 EQ PUSH2 0xC3E JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0xC5E JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0xE065DE75 EQ PUSH2 0xB7E JUMPI DUP1 PUSH4 0xE382C95E EQ PUSH2 0xB9E JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0xBBE JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0xBDE JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0xCC130E83 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0xCC130E83 EQ PUSH2 0xAF0 JUMPI DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0xB10 JUMPI DUP1 PUSH4 0xDBBF62C2 EQ PUSH2 0xB30 JUMPI DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0xB5E JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0xA70 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0xA90 JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0xAB0 JUMPI DUP1 PUSH4 0xC9D350F9 EQ PUSH2 0xAD0 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x9EA0FF13 GT PUSH2 0x185 JUMPI DUP1 PUSH4 0xAA9EA72A GT PUSH2 0x154 JUMPI DUP1 PUSH4 0xAA9EA72A EQ PUSH2 0x9E2 JUMPI DUP1 PUSH4 0xAB80A910 EQ PUSH2 0xA02 JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0xA22 JUMPI DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0xA50 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x962 JUMPI DUP1 PUSH4 0xA0295B8B EQ PUSH2 0x982 JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x9A2 JUMPI DUP1 PUSH4 0xA76BBEC4 EQ PUSH2 0x9C2 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x918C2BBD GT PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x918C2BBD EQ PUSH2 0x8D4 JUMPI DUP1 PUSH4 0x9209483B EQ PUSH2 0x902 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x922 JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x942 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x8322FFF2 EQ PUSH2 0x843 JUMPI DUP1 PUSH4 0x849489A1 EQ PUSH2 0x865 JUMPI DUP1 PUSH4 0x8A2D1971 EQ PUSH2 0x885 JUMPI DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x8A5 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x42CBB15C GT PUSH2 0x2E2 JUMPI DUP1 PUSH4 0x66A1AC6B GT PUSH2 0x275 JUMPI DUP1 PUSH4 0x74C9D255 GT PUSH2 0x244 JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x7C3 JUMPI DUP1 PUSH4 0x77D375F2 EQ PUSH2 0x7E3 JUMPI DUP1 PUSH4 0x7F3E7F82 EQ PUSH2 0x803 JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x823 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x736 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x756 JUMPI DUP1 PUSH4 0x6EB9DAE5 EQ PUSH2 0x783 JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x7A3 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x57494B1D GT PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x6B6 JUMPI DUP1 PUSH4 0x5AAE4E53 EQ PUSH2 0x6D6 JUMPI DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x6F6 JUMPI DUP1 PUSH4 0x5E74363A EQ PUSH2 0x716 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x42CBB15C EQ PUSH2 0x630 JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0x652 JUMPI DUP1 PUSH4 0x51BE4EAA EQ PUSH2 0x672 JUMPI DUP1 PUSH4 0x5505000A EQ PUSH2 0x687 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x281E3432 GT PUSH2 0x35A JUMPI DUP1 PUSH4 0x3105FEC1 GT PUSH2 0x329 JUMPI DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x5A2 JUMPI DUP1 PUSH4 0x3583220F EQ PUSH2 0x5C2 JUMPI DUP1 PUSH4 0x4092E6B1 EQ PUSH2 0x5F0 JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x610 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x281E3432 EQ PUSH2 0x513 JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x533 JUMPI DUP1 PUSH4 0x2E1240F0 EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x582 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x16279055 GT PUSH2 0x396 JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x486 JUMPI DUP1 PUSH4 0x1976F526 EQ PUSH2 0x4B3 JUMPI DUP1 PUSH4 0x2339078F EQ PUSH2 0x4D3 JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x4F3 JUMPI PUSH2 0x3CE JUMP JUMPDEST DUP1 PUSH4 0x34EAFF9 EQ PUSH2 0x3D3 JUMPI DUP1 PUSH4 0x496D5DC EQ PUSH2 0x409 JUMPI DUP1 PUSH4 0x1022742B EQ PUSH2 0x437 JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x457 JUMPI PUSH2 0x3CE JUMP JUMPDEST CALLDATASIZE PUSH2 0x3CE JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x3EE CALLDATASIZE PUSH1 0x4 PUSH2 0xB996 JUMP JUMPDEST PUSH2 0xC7E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP2 SWAP1 PUSH2 0xC950 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x429 PUSH2 0x424 CALLDATASIZE PUSH1 0x4 PUSH2 0xB57D JUMP JUMPDEST PUSH2 0xEA0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP3 SWAP2 SWAP1 PUSH2 0xC8C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x443 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x452 CALLDATASIZE PUSH1 0x4 PUSH2 0xB80F JUMP JUMPDEST PUSH2 0x1046 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x477 PUSH2 0x472 CALLDATASIZE PUSH1 0x4 PUSH2 0xBBEA JUMP JUMPDEST PUSH2 0x11B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC83A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A6 PUSH2 0x4A1 CALLDATASIZE PUSH1 0x4 PUSH2 0xB172 JUMP JUMPDEST PUSH2 0x1319 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP2 SWAP1 PUSH2 0xC961 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x4CE CALLDATASIZE PUSH1 0x4 PUSH2 0xB94C JUMP JUMPDEST PUSH2 0x1323 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x4EE CALLDATASIZE PUSH1 0x4 PUSH2 0xBB8A JUMP JUMPDEST PUSH2 0x148E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x50E CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x16B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x52E CALLDATASIZE PUSH1 0x4 PUSH2 0xBD2E JUMP JUMPDEST PUSH2 0x1882 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x553 PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0xBC82 JUMP JUMPDEST PUSH2 0x1AD7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC96F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x57D CALLDATASIZE PUSH1 0x4 PUSH2 0xB522 JUMP JUMPDEST PUSH2 0x1DB4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x59D CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x2024 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x5BD CALLDATASIZE PUSH1 0x4 PUSH2 0xB57D JUMP JUMPDEST PUSH2 0x2182 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E2 PUSH2 0x5DD CALLDATASIZE PUSH1 0x4 PUSH2 0xB9FC JUMP JUMPDEST PUSH2 0x2306 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP3 SWAP2 SWAP1 PUSH2 0xC86E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x60B CALLDATASIZE PUSH1 0x4 PUSH2 0xB9DA JUMP JUMPDEST PUSH2 0x23D0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x61C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x62B CALLDATASIZE PUSH1 0x4 PUSH2 0xBC22 JUMP JUMPDEST PUSH2 0x263B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x645 PUSH2 0x27BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP2 SWAP1 PUSH2 0xC9AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x429 PUSH2 0x66D CALLDATASIZE PUSH1 0x4 PUSH2 0xB57D JUMP JUMPDEST PUSH2 0x27C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x645 PUSH2 0x294C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x693 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A7 PUSH2 0x6A2 CALLDATASIZE PUSH1 0x4 PUSH2 0xBA40 JUMP JUMPDEST PUSH2 0x2954 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC91A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x6D1 CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x2D11 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A7 PUSH2 0x6F1 CALLDATASIZE PUSH1 0x4 PUSH2 0xBA40 JUMP JUMPDEST PUSH2 0x3288 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x711 CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x3680 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x731 CALLDATASIZE PUSH1 0x4 PUSH2 0xBCA4 JUMP JUMPDEST PUSH2 0x36EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x742 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x751 CALLDATASIZE PUSH1 0x4 PUSH2 0xB80F JUMP JUMPDEST PUSH2 0x3744 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x762 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x776 PUSH2 0x771 CALLDATASIZE PUSH1 0x4 PUSH2 0xB657 JUMP JUMPDEST PUSH2 0x37F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP2 SWAP1 PUSH2 0xC93F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x78F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x79E CALLDATASIZE PUSH1 0x4 PUSH2 0xBCA4 JUMP JUMPDEST PUSH2 0x395A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x7BE CALLDATASIZE PUSH1 0x4 PUSH2 0xB708 JUMP JUMPDEST PUSH2 0x39A5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x477 PUSH2 0x7DE CALLDATASIZE PUSH1 0x4 PUSH2 0xBBEA JUMP JUMPDEST PUSH2 0x3A97 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x7FE CALLDATASIZE PUSH1 0x4 PUSH2 0xB3D5 JUMP JUMPDEST PUSH2 0x3AA6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x81E CALLDATASIZE PUSH1 0x4 PUSH2 0xB57D JUMP JUMPDEST PUSH2 0x3BAC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x83E CALLDATASIZE PUSH1 0x4 PUSH2 0xBD2E JUMP JUMPDEST PUSH2 0x3CBC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x84F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x858 PUSH2 0x3F09 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP2 SWAP1 PUSH2 0xC681 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x871 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x880 CALLDATASIZE PUSH1 0x4 PUSH2 0xBAA7 JUMP JUMPDEST PUSH2 0x3F21 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x891 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x8A0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB9DA JUMP JUMPDEST PUSH2 0x4048 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8C5 PUSH2 0x8C0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB698 JUMP JUMPDEST PUSH2 0x415A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCB92 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8F4 PUSH2 0x8EF CALLDATASIZE PUSH1 0x4 PUSH2 0xBAA7 JUMP JUMPDEST PUSH2 0x4480 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP3 SWAP2 SWAP1 PUSH2 0xC99C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x90E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x91D CALLDATASIZE PUSH1 0x4 PUSH2 0xBC22 JUMP JUMPDEST PUSH2 0x4653 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x92E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x93D CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x4853 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x94E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x645 PUSH2 0x95D CALLDATASIZE PUSH1 0x4 PUSH2 0xBCE8 JUMP JUMPDEST PUSH2 0x4D8C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x96E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x645 PUSH2 0x97D CALLDATASIZE PUSH1 0x4 PUSH2 0xB4CD JUMP JUMPDEST PUSH2 0x4ED1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x98E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x99D CALLDATASIZE PUSH1 0x4 PUSH2 0xBB8A JUMP JUMPDEST PUSH2 0x50E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x553 PUSH2 0x9BD CALLDATASIZE PUSH1 0x4 PUSH2 0xB5EE JUMP JUMPDEST PUSH2 0x52E3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0x9DD CALLDATASIZE PUSH1 0x4 PUSH2 0xB996 JUMP JUMPDEST PUSH2 0x5420 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8F4 PUSH2 0x9FD CALLDATASIZE PUSH1 0x4 PUSH2 0xBAA7 JUMP JUMPDEST PUSH2 0x562F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xA1D CALLDATASIZE PUSH1 0x4 PUSH2 0xB3D5 JUMP JUMPDEST PUSH2 0x571A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA42 PUSH2 0xA3D CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x580C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP3 SWAP2 SWAP1 PUSH2 0xC9B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xA6B CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x595C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xA8B CALLDATASIZE PUSH1 0x4 PUSH2 0xB73C JUMP JUMPDEST PUSH2 0x59C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xAAB CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x5ABE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xABC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xACB CALLDATASIZE PUSH1 0x4 PUSH2 0xB57D JUMP JUMPDEST PUSH2 0x5C7B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xADC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E2 PUSH2 0xAEB CALLDATASIZE PUSH1 0x4 PUSH2 0xB9FC JUMP JUMPDEST PUSH2 0x5DE7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xB0B CALLDATASIZE PUSH1 0x4 PUSH2 0xB94C JUMP JUMPDEST PUSH2 0x5EFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x553 PUSH2 0xB2B CALLDATASIZE PUSH1 0x4 PUSH2 0xB5EE JUMP JUMPDEST PUSH2 0x606E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB50 PUSH2 0xB4B CALLDATASIZE PUSH1 0x4 PUSH2 0xB337 JUMP JUMPDEST PUSH2 0x615D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP3 SWAP2 SWAP1 PUSH2 0xC909 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x553 PUSH2 0xB79 CALLDATASIZE PUSH1 0x4 PUSH2 0xBC82 JUMP JUMPDEST PUSH2 0x6423 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB50 PUSH2 0xB99 CALLDATASIZE PUSH1 0x4 PUSH2 0xB337 JUMP JUMPDEST PUSH2 0x66B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xBB9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBAA7 JUMP JUMPDEST PUSH2 0x696C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xBD9 CALLDATASIZE PUSH1 0x4 PUSH2 0xB782 JUMP JUMPDEST PUSH2 0x69DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xBF9 CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x6ACF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA42 PUSH2 0xC19 CALLDATASIZE PUSH1 0x4 PUSH2 0xB461 JUMP JUMPDEST PUSH2 0x6C02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xC39 CALLDATASIZE PUSH1 0x4 PUSH2 0xB57D JUMP JUMPDEST PUSH2 0x6CEE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH2 0xC59 CALLDATASIZE PUSH1 0x4 PUSH2 0xB522 JUMP JUMPDEST PUSH2 0x6E67 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8C5 PUSH2 0xC79 CALLDATASIZE PUSH1 0x4 PUSH2 0xB698 JUMP JUMPDEST PUSH2 0x70C1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xC99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xCC3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x182DF0F5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD15 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD39 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD8A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDAE SWAP2 SWAP1 PUSH2 0xBEBC JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xE26 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE20 JUMPI DUP2 PUSH1 0xA EXP PUSH5 0x2540BE400 MUL DUP4 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xDF0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL DUP2 PUSH2 0xE00 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xE0D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xDD0 JUMP JUMPDEST POP PUSH2 0xE95 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xE95 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE93 JUMPI DUP3 DUP3 PUSH1 0xA EXP PUSH5 0x2540BE400 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL MUL DUP2 PUSH2 0xE73 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xE80 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xE43 JUMP JUMPDEST POP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xEBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEE7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0xEF4 DUP7 DUP7 PUSH2 0x7450 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xF06 JUMPI POP PUSH2 0x103E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x103B JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA8312B1D PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xF30 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF58 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCC1B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xFA6 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xFA3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xFE0 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xFD4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xFD9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x103B JUMP JUMPDEST DUP1 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xFF0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1004 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x101C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1032 JUMPI POP PUSH2 0x103B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xF09 JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x105F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1089 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x11B1 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x10B6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x10CA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10F1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCBD4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x113A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1137 SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x118E JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1168 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x116D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x117C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x11A9 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x119B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x108F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x11D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x11FF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1215 JUMPI PUSH2 0x130F JUMP JUMPDEST PUSH2 0x1221 DUP8 DUP8 DUP8 DUP8 PUSH2 0x7740 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x130D JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1252 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1277 SWAP3 SWAP2 SWAP1 PUSH2 0xC8E9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x128F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x12C0 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x12BD SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x12C9 JUMPI PUSH2 0x130D JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x12D6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x12EE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1304 JUMPI POP PUSH2 0x130D JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1229 JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x133E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1368 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x1373 PUSH2 0xA578 JUMP JUMPDEST PUSH2 0x137B PUSH2 0x7966 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE95 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1394 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x13A9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x13EB SWAP1 PUSH1 0x1 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xCA95 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1405 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x143A JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1437 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB7DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1443 JUMPI PUSH2 0xE95 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1452 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x146B JUMPI POP POP PUSH2 0xE95 JUMP JUMPDEST DUP1 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1478 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP PUSH1 0x1 ADD PUSH2 0x1380 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x149A DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x14D0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x14FE JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x152E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1558 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x1563 PUSH2 0xA578 JUMP JUMPDEST PUSH2 0x156B PUSH2 0x7966 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x16AB JUMPI PUSH1 0x60 PUSH2 0x1597 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x158A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x79D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x15CD SWAP1 PUSH1 0x0 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xCA95 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x161C JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1619 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB7DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1657 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x164A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x164F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0x16AB JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1669 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x1687 JUMPI POP POP POP PUSH2 0x16AB JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1694 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x1570 JUMP JUMPDEST POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x16C4 DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1706 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x1729 JUMPI PUSH2 0x1724 DUP8 DUP8 PUSH2 0x7A66 JUMP JUMPDEST PUSH2 0x172C JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x174E JUMPI PUSH2 0x1749 DUP9 DUP8 PUSH2 0x7A66 JUMP JUMPDEST PUSH2 0x1751 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE93 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x17B4 JUMPI PUSH2 0x1793 DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1786 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7AE5 JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x179F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x184E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x17DA JUMPI PUSH2 0x1793 DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1786 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x17F4 DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1786 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x1831 JUMPI PUSH2 0x1810 DUP6 PUSH4 0x9903D8B PUSH1 0xE2 SHL DUP4 PUSH2 0x7AE5 JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x181C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x184C JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x183F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x186E JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1862 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x1879 JUMPI POP PUSH2 0xE93 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1756 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x188E DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x190A SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1925 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x194F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x198B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x199F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19C3 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x1A66 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A2C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A50 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1A73 JUMPI POP POP POP PUSH2 0x1ACF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE93 JUMPI PUSH1 0x0 PUSH2 0x1AA1 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1A92 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x7BC8 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1AAE JUMPI POP PUSH2 0xE93 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1ABB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x1A76 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x1AE6 DUP6 DUP8 PUSH2 0x7995 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1AFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B28 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1B5B SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B87 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BAB SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1BC9 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x1C68 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1BFA SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C4A SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1C61 JUMPI POP POP PUSH2 0x130F JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CD9 SWAP2 SWAP1 PUSH2 0xB910 JUMP JUMPDEST PUSH2 0x1CE4 JUMPI POP POP PUSH2 0x130F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1DA7 JUMPI PUSH1 0x0 PUSH2 0x1D61 DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D0F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC6C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 DUP16 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D39 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC6C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1D54 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7E87 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D88 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1D9E JUMPI POP PUSH2 0x1DA7 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1CE7 JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1DCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1DF9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1E13 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1E6D JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1E4C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1E84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1EDE JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP5 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1EBD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA940EDAC DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1F05 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1F1A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1F2E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F54 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7F2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1F9C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1F99 SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1FD6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FCF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x201A JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1FE3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1FFB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2011 JUMPI POP PUSH2 0x201A JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1EE1 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2030 DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2048 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2072 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x20A1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7F2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2110 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x210D SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x213E JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FCF JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x214B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2163 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2179 JUMPI POP PUSH2 0x201A JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2078 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x219D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x21C7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x22FD JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x21F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x221A SWAP3 SWAP2 SWAP1 PUSH2 0xCC0D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2268 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2265 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x22A2 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2296 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x229B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x22FD JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x22B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x22C6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x22DE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x22F4 JUMPI POP PUSH2 0x22FD JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x21CD JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x2313 DUP7 PUSH2 0x7FC0 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x232B DUP8 PUSH8 0xDE0B6B3A7640000 DUP9 DUP9 PUSH2 0x80AC JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2370 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23C4 JUMPI DUP3 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x238B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0x23A4 JUMPI INVALID JUMPDEST DIV DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x23B1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2376 JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x23EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2415 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF3535E6C DUP8 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2440 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2455 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x247B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC9E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x24C3 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x24C0 SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x24F1 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FCF JUMP JUMPDEST DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x24FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x2512 JUMPI POP PUSH2 0x201A JUMP JUMPDEST POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD7176CA9 DUP8 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2530 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2545 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2559 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2580 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCA0E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2597 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x25C7 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x25C4 SWAP2 DUP2 ADD SWAP1 PUSH2 0xBDE1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x25F5 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FCF JUMP JUMPDEST DUP2 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2602 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x261A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2631 JUMPI POP POP PUSH2 0x201A JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x241B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2656 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2680 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x26B7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x26D1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCAD8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x270F SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x274B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2750 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2774 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2771 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2781 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2799 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x27B1 JUMPI POP POP POP PUSH2 0x201A JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x2686 JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x27DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2807 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x2814 DUP7 DUP7 PUSH2 0x7450 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2826 JUMPI POP PUSH2 0x103E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x103B JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9E269B68 PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2850 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2878 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCC1B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2890 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x28C6 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x28C3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x28F4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xFD4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xFD9 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2901 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2915 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x292D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2943 JUMPI POP PUSH2 0x103B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2829 JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x2991 DUP8 PUSH20 0x5555555555555555555555555555555555555556 DUP9 DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2984 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x81DD JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x29AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x29D4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x29EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A22 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2A0D JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2A3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A66 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x2D06 JUMPI PUSH2 0x2A91 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2A84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x8223 JUMP JUMPDEST PUSH2 0x2A9A JUMPI PUSH2 0x2CFE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2AB9 DUP9 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2AAC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x8279 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x551E2BDF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x60 SWAP1 DUP2 SWAP1 PUSH20 0x5555555555555555555555555555555555555556 SWAP1 PUSH4 0x551E2BDF SWAP1 PUSH2 0x2AFC SWAP1 DUP15 SWAP1 DUP8 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0xC9C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2B25 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x2CFA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2B53 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2B58 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 PUSH2 0x2B64 DUP3 PUSH2 0x83D4 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP SWAP1 POP DUP1 PUSH2 0x2B7A JUMPI POP POP POP POP POP PUSH2 0x2CFE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2CF6 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2B92 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2BA7 JUMPI PUSH2 0x2CF6 JUMP JUMPDEST DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2BB3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2BC7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO PUSH2 0x2C4A JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2BE1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2BF5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP12 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C0E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2C25 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C39 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x2CEE JUMP JUMPDEST DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2C56 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C6A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ DUP1 ISZERO PUSH2 0x2CA4 JUMPI POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2C86 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C9A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT JUMPDEST ISZERO PUSH2 0x2CEE JUMPI DUP6 DUP12 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2CB6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2CCD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2CE1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2B7D JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2A6C JUMP JUMPDEST POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2D2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D58 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2D88 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2DA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2DB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2DD8 SWAP2 SWAP1 PUSH2 0xB910 JUMP JUMPDEST ISZERO DUP1 PUSH2 0x2E5D JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2E0B SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E37 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E5B SWAP2 SWAP1 PUSH2 0xB910 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2E69 JUMPI POP POP PUSH2 0x1ACF JUMP JUMPDEST PUSH2 0x2E71 PUSH2 0xA59F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2E9D SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2EB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2EC9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2EED SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2F1B SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F47 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F6B SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x2F9C SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2FB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2FC8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2FEC SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x301F SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3037 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x304B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x306F SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x30B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x30C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x30E9 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE93 JUMPI PUSH2 0x311C DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x3113 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x8436 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3128 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x313B JUMPI PUSH2 0xE93 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x316E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x319C SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCC7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x31B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x31E5 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x31E2 SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x321F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3213 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3218 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xE93 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x3237 SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 JUMPDEST DIV PUSH2 0x8436 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x3244 JUMPI POP PUSH2 0xE93 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3251 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3269 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x327F JUMPI POP PUSH2 0xE93 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x30F1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x3297 DUP7 PUSH2 0x8493 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x32C5 DUP9 PUSH20 0x5555555555555555555555555555555555555556 DUP5 DUP10 PUSH1 0x1 DUP12 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2984 JUMPI INVALID JUMPDEST SWAP1 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x32DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3308 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3356 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3341 JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x339A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x3674 JUMPI PUSH2 0x33B8 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2A84 JUMPI INVALID JUMPDEST PUSH2 0x33C1 JUMPI PUSH2 0x366C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x33D3 DUP5 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2AAC JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x196E65D PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x60 SWAP1 DUP2 SWAP1 PUSH20 0x5555555555555555555555555555555555555556 SWAP1 PUSH4 0x32DCCBA0 SWAP1 PUSH2 0x3416 SWAP1 DUP16 SWAP1 DUP8 SWAP1 DUP16 SWAP1 PUSH1 0x4 ADD PUSH2 0xC9C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x342E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x343F JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x3668 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x346D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3472 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 PUSH2 0x347E DUP3 PUSH2 0x83D4 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP SWAP1 POP DUP1 PUSH2 0x3494 JUMPI POP POP POP POP POP PUSH2 0x366C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x3664 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x34AC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x34C1 JUMPI PUSH2 0x3664 JUMP JUMPDEST DUP10 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x34CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x3508 JUMPI POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x34EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x34FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT JUMPDEST ISZERO PUSH2 0x35A6 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3519 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x352D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x355E DUP15 PUSH2 0x3559 DUP11 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x354C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x852B JUMP JUMPDEST PUSH2 0x8279 JUMP JUMPDEST DUP13 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x356A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3581 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3595 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x365C JUMP JUMPDEST DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x35B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x35C6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ DUP1 ISZERO PUSH2 0x3600 JUMPI POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x35E2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x35F6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT JUMPDEST ISZERO PUSH2 0x365C JUMPI PUSH2 0x3618 DUP15 PUSH2 0x3559 DUP11 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x354C JUMPI INVALID JUMPDEST DUP13 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3624 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x363B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x364F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3497 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x33A0 JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x36E6 SWAP1 DUP1 PUSH2 0x369F DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x36C6 SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x85C3 DUP2 MSTORE POP DUP4 PUSH2 0x86D7 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x36FB DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x372C JUMPI POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x3738 JUMPI POP DUP1 PUSH2 0x1ACF JUMP JUMPDEST PUSH2 0x36E6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x88E9 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3751 DUP5 DUP5 DUP5 PUSH2 0x1046 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x11B1 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x376B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x37F1 JUMPI PUSH2 0x37D8 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3789 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x379D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x37BE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x8B35 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x37E4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3756 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3811 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x384B JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x3838 PUSH2 0xA5CE JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3830 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x3953 JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3866 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x3884 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x3896 SWAP2 SWAP1 PUSH2 0xCCCC JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x38A3 JUMPI PUSH2 0x394B JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x38B0 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x38C2 SWAP2 SWAP1 PUSH2 0xCCCC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x38D0 SWAP3 SWAP2 SWAP1 PUSH2 0xC668 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x390D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3912 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x391F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3936 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x3851 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x398D JUMPI POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x3999 JUMPI POP DUP1 PUSH2 0x1ACF JUMP JUMPDEST PUSH2 0x36E6 DUP6 DUP5 DUP7 DUP6 PUSH2 0x88E9 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x39BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x39E8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x3A91 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3A2C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3A6C JUMPI PUSH2 0x3A67 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3A51 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8B59 JUMP JUMPDEST PUSH2 0x3A6F JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3A7E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x39EE JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3AC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3AEB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x3B20 JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x3B2E JUMPI DUP3 SWAP2 POP POP PUSH2 0x36E6 JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x3B60 JUMPI POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x3BA2 JUMPI PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3B98 JUMPI PUSH1 0x1 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B7E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD DUP1 MLOAD SWAP2 SWAP1 SWAP2 SUB SWAP1 MSTORE PUSH1 0x1 ADD PUSH2 0x3B68 JUMP JUMPDEST POP DUP3 SWAP2 POP POP PUSH2 0x36E6 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP1 DUP4 ADD DUP5 MSTORE SWAP3 DUP4 SWAP3 SWAP2 SWAP1 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x3BDD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3BF2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3C1F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x3C34 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x3CB1 SWAP1 DUP1 PUSH2 0x3C6A DUP9 DUP6 PUSH1 0x80 DUP5 ADD PUSH2 0xC81A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3C91 SWAP3 SWAP2 SWAP1 PUSH2 0xC81A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8C05 DUP2 MSTORE POP DUP5 PUSH2 0x86D7 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3CC8 DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3D0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3D20 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3D44 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3D5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3D89 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3DD9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3DFD SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x3EA0 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3E66 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3E8A SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x3EAD JUMPI POP POP POP PUSH2 0x1ACF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE93 JUMPI PUSH1 0x0 PUSH2 0x3EDB DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3ECC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x8D17 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x3EE8 JUMPI POP PUSH2 0xE93 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3EF5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x3EB0 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3F3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3F66 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE94803F4 DUP8 DUP8 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3F91 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FB7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7F2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3FE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4007 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4013 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x402B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4040 JUMPI PUSH2 0x201A JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3F6C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP1 DUP4 ADD DUP5 MSTORE SWAP3 DUP4 SWAP3 SWAP2 SWAP1 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x4079 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x408E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x40BB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x40D0 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x4150 SWAP1 DUP1 PUSH2 0x4107 DUP10 DUP10 DUP7 PUSH1 0x80 DUP6 ADD PUSH2 0xC734 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4130 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC734 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8FA9 DUP2 MSTORE POP DUP5 PUSH2 0x86D7 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4162 PUSH2 0xA5E6 JUMP JUMPDEST PUSH2 0x416A PUSH2 0xA5E6 JUMP JUMPDEST PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x41AC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x41C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x41F1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x4314 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x421A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x422F SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x426C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4271 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x430A JUMPI PUSH1 0x60 PUSH2 0x4288 DUP3 DUP11 PUSH2 0x90C3 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x1 DUP11 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4299 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x1 DUP12 SUB DUP2 MLOAD DUP2 LT PUSH2 0x42B0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x4308 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 JUMPDEST DUP10 DUP2 LT ISZERO PUSH2 0x4306 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x42DF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x42F3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x42CB JUMP JUMPDEST POP JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x41F7 JUMP JUMPDEST POP DUP1 PUSH1 0x1 DUP7 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4324 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x433A JUMPI POP PUSH2 0x4477 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x2D06 JUMPI PUSH2 0x4363 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4355 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0x9101 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x437D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x4392 SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x43CF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x43D4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x446D JUMPI PUSH1 0x60 PUSH2 0x43EB DUP3 DUP11 PUSH2 0x90C3 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x1 DUP11 SUB DUP2 MLOAD DUP2 LT PUSH2 0x43FC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x1 DUP12 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4413 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x446B JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 JUMPDEST DUP10 DUP2 LT ISZERO PUSH2 0x4469 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4442 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4456 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x442E JUMP JUMPDEST POP JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x433D JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x448E DUP5 DUP7 PUSH2 0x7995 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x44A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x44D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x44DF DUP8 DUP8 DUP8 DUP8 PUSH2 0x914C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP5 POP PUSH1 0x60 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x4502 PUSH2 0xA600 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x44FA JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 ISZERO ISZERO DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4553 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x23C4 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9881FCB4 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4584 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x45AA SWAP3 SWAP2 SWAP1 PUSH2 0xCC4F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x45C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x45D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x45FE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x460A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x461E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4636 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x464B JUMPI PUSH2 0x23C4 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x4561 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x46D5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x46CE SWAP1 DUP1 PUSH2 0x4687 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xCAF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x46AE SWAP3 SWAP2 SWAP1 PUSH2 0xCAF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x91E6 DUP2 MSTORE POP DUP4 PUSH2 0x86D7 JUMP JUMPDEST SWAP1 POP PUSH2 0x1ACF JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x46ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4717 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x474E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4768 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCAD8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x47A6 SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x47E2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x480B JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4808 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4818 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4830 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4848 JUMPI POP POP POP PUSH2 0x201A JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x471D JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4870 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x489A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x48CA SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x48E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x48F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x491A SWAP2 SWAP1 PUSH2 0xB910 JUMP JUMPDEST ISZERO DUP1 PUSH2 0x499F JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x494D SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4979 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x499D SWAP2 SWAP1 PUSH2 0xB910 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x49AB JUMPI POP POP PUSH2 0x1ACF JUMP JUMPDEST PUSH2 0x49B3 PUSH2 0xA59F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x49DF SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x49F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A0B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A2F SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x4A5D SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A89 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4AAD SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x4ADE SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4B2E SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x4B61 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B8D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4BB1 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C07 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4C2B SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE93 JUMPI DUP2 MLOAD PUSH2 0x4C51 SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x3231 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4C5D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x4C70 JUMPI PUSH2 0xE93 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x4CA3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4CD1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCC7D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4CE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4D1A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4D17 SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4D48 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3213 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3218 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4D55 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4D6D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4D83 JUMPI POP PUSH2 0xE93 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x4D9C JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x4DB4 JUMPI POP PUSH1 0x1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x4DB2 JUMPI INVALID JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x4DCA JUMPI POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST DUP1 PUSH2 0x4DE0 JUMPI POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x4DED JUMPI POP PUSH1 0x0 PUSH2 0x3CB5 JUMP JUMPDEST PUSH2 0x4DF5 PUSH2 0xA620 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FB09795 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E26 SWAP3 SWAP2 SWAP1 PUSH2 0xCBB7 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4E52 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E76 SWAP2 SWAP1 PUSH2 0xBD50 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4E8F JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x4E9A JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0x4EAD JUMPI POP DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x4EBE JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x3CB5 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F02 SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4F2E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4F52 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x4F6C JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1ACF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4FFE JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x4FA9 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4FC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4FD5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4FF9 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH2 0x500A JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x501F JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x1ACF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3C2803F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x5054 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC7F2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x506C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x509D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x509A SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x50DD JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x50CB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x50D0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x1ACF JUMP JUMPDEST SWAP3 POP PUSH2 0x1ACF SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x50F3 DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5129 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x5157 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x51B1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x51BC PUSH2 0xA578 JUMP JUMPDEST PUSH2 0x51C4 PUSH2 0x7966 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x16AB JUMPI PUSH1 0x60 PUSH2 0x51E3 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x158A JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x5219 SWAP1 PUSH1 0x1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xCA95 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x5268 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5265 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB7DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5296 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x164A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x164F JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x52A5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x52BF JUMPI POP POP POP PUSH2 0x16AB JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x52CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x51C9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x52F2 DUP6 DUP8 PUSH2 0x7995 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x530A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5334 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x5343 DUP10 DUP10 DUP10 DUP10 PUSH2 0x924D JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x535B JUMPI POP PUSH2 0x5415 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5412 JUMPI PUSH1 0x0 PUSH2 0x53CC DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5380 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x53A4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x53BF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x93A2 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x53DB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x53F3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5409 JUMPI POP PUSH2 0x5412 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x535E JUMP JUMPDEST POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x543B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5465 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x182DF0F5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x54B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x54DB SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x552C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5550 SWAP2 SWAP1 PUSH2 0xBEBC JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x55C2 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE20 JUMPI DUP3 DUP3 PUSH1 0xA EXP PUSH5 0x2540BE400 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5591 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL MUL DUP2 PUSH2 0x55A2 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x55AF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5572 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xE95 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE93 JUMPI DUP2 PUSH1 0xA EXP PUSH5 0x2540BE400 MUL DUP4 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x55FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL DUP2 PUSH2 0x560F JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x561C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x55DF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x563D DUP5 DUP7 PUSH2 0x7995 JUMP JUMPDEST PUSH2 0x5649 DUP7 DUP6 DUP8 DUP7 PUSH2 0x914C JUMP JUMPDEST SWAP2 POP PUSH2 0x570F PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x569A SWAP3 SWAP2 SWAP1 PUSH2 0xCA43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x56EF SWAP3 SWAP2 SWAP1 PUSH2 0xCA43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9494 DUP2 MSTORE POP DUP5 PUSH2 0x86D7 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5735 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x575F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x5794 JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x57A2 JUMPI DUP3 SWAP2 POP POP PUSH2 0x36E6 JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x57D4 JUMPI POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x3BA2 JUMPI PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3B98 JUMPI PUSH1 0x1 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x57F2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD DUP1 MLOAD SWAP2 SWAP1 SWAP2 SUB SWAP1 MSTORE PUSH1 0x1 ADD PUSH2 0x57DC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x581A DUP5 DUP7 PUSH2 0x7995 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5832 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x585C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x58D1 JUMPI PUSH1 0x0 PUSH2 0x588B DUP10 DUP10 DUP10 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x587E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4ED1 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x589A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x58B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x58C8 JUMPI POP PUSH2 0x58D1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5862 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x5900 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x592C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5950 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x36E6 SWAP1 DUP1 PUSH2 0x597B DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x59A2 SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x95A9 DUP2 MSTORE POP DUP4 PUSH2 0x86D7 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x59DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5A05 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x3953 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5A49 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5A93 JUMPI PUSH2 0x5A8E DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5A6F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x95F0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x5A9F JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5AAB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5A0B JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5ACA DUP4 DUP6 PUSH2 0x7995 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5AE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5B0C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x5B2F JUMPI PUSH2 0x5B2A DUP8 DUP8 PUSH2 0x7A66 JUMP JUMPDEST PUSH2 0x5B32 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x5B54 JUMPI PUSH2 0x5B4F DUP9 DUP8 PUSH2 0x7A66 JUMP JUMPDEST PUSH2 0x5B57 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE93 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x5BAD JUMPI PUSH2 0x5B8C DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1786 JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5B98 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x5C47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x5BD3 JUMPI PUSH2 0x5B8C DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1786 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x5BED DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1786 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x5C2A JUMPI PUSH2 0x5C09 DUP5 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP4 PUSH2 0x7AE5 JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5C15 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x5C45 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5C38 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x5C67 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5C5B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x5C72 JUMPI POP PUSH2 0xE93 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5B5C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5C96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5CC0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x22FD JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5CED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D13 SWAP3 SWAP2 SWAP1 PUSH2 0xCC0D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5D61 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5D5E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5D8F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2296 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x229B JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5D9C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5DB0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5DC8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5DDE JUMPI POP PUSH2 0x22FD JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5CC6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x5DF4 DUP7 PUSH2 0x7FC0 JUMP JUMPDEST DUP4 MLOAD SWAP1 SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5E0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5E39 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP1 PUSH2 0x5E47 JUMPI POP PUSH2 0x5EF3 JUMP JUMPDEST PUSH2 0x5E67 DUP8 DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5E58 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP9 PUSH2 0x80AC JUMP JUMPDEST DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5E74 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5EF0 JUMPI DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5E97 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5EAB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5EC0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL DUP2 PUSH2 0x5ED0 JUMPI INVALID JUMPDEST DIV DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5EDD JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5E82 JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5F17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5F41 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x5F4C PUSH2 0xA578 JUMP JUMPDEST PUSH2 0x5F54 PUSH2 0x7966 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE95 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x5F6D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5F82 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x5FC4 SWAP1 PUSH1 0x0 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xCA95 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5FDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x6013 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6010 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB7DB JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x601C JUMPI PUSH2 0xE95 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x602E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x604B JUMPI POP POP PUSH2 0xE95 JUMP JUMPDEST DUP1 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6058 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP PUSH1 0x1 ADD PUSH2 0x5F59 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x607D DUP6 DUP8 PUSH2 0x7995 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6095 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x60BF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x60CE DUP10 DUP10 DUP10 DUP10 PUSH2 0x924D JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x60E6 JUMPI POP PUSH2 0x5415 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x614F SWAP1 DUP1 PUSH2 0x6106 DUP10 DUP8 DUP10 ISZERO PUSH1 0x80 DUP6 ADD PUSH2 0xC7A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x612F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x93A2 DUP2 MSTORE POP DUP7 PUSH2 0x86D7 JUMP JUMPDEST SWAP2 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x617A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x61A4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x61BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x61E7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x621C JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x6254 JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x6254 JUMPI POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x6416 JUMPI DUP4 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x6270 JUMPI POP PUSH2 0x6418 JUMP JUMPDEST DUP9 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x6413 JUMPI DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6347 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB76398E4 DUP10 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x62B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x62DA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC89C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6306 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x632A SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6336 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x640B JUMP JUMPDEST DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x640B JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5CC7BC10 DUP9 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x637D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x63A2 SWAP3 SWAP2 SWAP1 PUSH2 0xC88E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x63BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x63F2 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x63FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x6274 JUMP JUMPDEST POP POP JUMPDEST POP JUMPDEST SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x6432 DUP6 DUP8 PUSH2 0x7995 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x644A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6474 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x64A7 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x64D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x64F7 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x6515 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x65B4 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x6546 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x655E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6572 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6596 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x65AD JUMPI POP POP PUSH2 0x130F JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x65ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6601 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6625 SWAP2 SWAP1 PUSH2 0xB910 JUMP JUMPDEST PUSH2 0x6630 JUMPI POP POP PUSH2 0x130F JUMP JUMPDEST PUSH2 0x66A8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6659 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC6C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6688 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC6C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7E87 DUP2 MSTORE POP DUP8 PUSH2 0x86D7 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x66D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x66FD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6740 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x6775 JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x67AD JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x67AD JUMPI POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x6416 JUMPI DUP4 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x67C9 JUMPI POP PUSH2 0x6418 JUMP JUMPDEST DUP9 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x6413 JUMPI DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x68A0 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB76398E4 DUP10 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x680B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6833 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC89C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x684B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x685F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6883 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x688F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x6964 JUMP JUMPDEST DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6964 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5CC7BC10 DUP9 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x68D6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x68FB SWAP3 SWAP2 SWAP1 PUSH2 0xC88E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6913 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6927 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x694B SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6957 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x67CD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SWAP1 PUSH2 0x4150 SWAP1 DUP1 PUSH2 0x6991 DUP10 DUP9 DUP11 PUSH1 0x80 DUP6 ADD PUSH2 0xC9E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x69BA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC9E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x96BA DUP2 MSTORE POP DUP5 PUSH2 0x86D7 JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x69F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6A1D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x11B1 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6A61 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6AAD JUMPI PUSH2 0x6AA8 DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6A88 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9707 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x6AB0 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6ABC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6A23 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6AEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6B14 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6B43 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B69 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7F2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6B81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6BB2 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6BAF SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6BE0 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FCF JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6BED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x6B1A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x6C10 DUP5 DUP7 PUSH2 0x7995 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6C28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6C52 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x6CBD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6C76 SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6C9D SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x97D3 DUP2 MSTORE POP DUP6 PUSH2 0x86D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x5900 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC6AA JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6D09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6D33 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x22FD JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x43C2E2F5 DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6D5D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6D72 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x6D86 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6DAC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7F2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6DC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x6DF3 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6DF0 SWAP2 DUP2 ADD SWAP1 PUSH2 0xBDE1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6E21 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2296 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x229B JUMP JUMPDEST DUP2 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6E2E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6E46 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6E5D JUMPI POP POP PUSH2 0x22FD JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x6D39 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6E82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6EAC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6EC6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6F20 JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6EFF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6F37 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6F91 JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP5 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6F70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x201A JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6E1A20BE DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6FB8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6FCD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x6FE1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7007 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7F2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x701F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x704F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x704C SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x707D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FCF JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x708A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x70A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x70B8 JUMPI POP PUSH2 0x201A JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6F94 JUMP JUMPDEST PUSH2 0x70C9 PUSH2 0xA5E6 JUMP JUMPDEST PUSH2 0x70D1 PUSH2 0xA5E6 JUMP JUMPDEST PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x70E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7113 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7143 JUMPI PUSH1 0x0 NOT DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7130 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7119 JUMP JUMPDEST POP PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x715C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7186 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x71B6 JUMPI PUSH1 0x0 NOT DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x71A3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x718C JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x72E9 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x71DD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x71F2 SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x722F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7234 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x72DF JUMPI PUSH1 0x60 PUSH2 0x724B DUP3 DUP11 PUSH2 0x90C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 DUP12 SUB DUP2 MLOAD DUP2 LT PUSH2 0x725E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x728D JUMPI POP DUP6 PUSH1 0x1 DUP12 SUB DUP2 MLOAD DUP2 LT PUSH2 0x7282 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 LT JUMPDEST ISZERO PUSH2 0x72DC JUMPI DUP5 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 JUMPDEST DUP11 DUP2 LT ISZERO PUSH2 0x72DA JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x72B3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x72C7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x729F JUMP JUMPDEST POP JUMPDEST POP POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x71BA JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 PUSH1 0x1 DUP8 SUB DUP2 MLOAD DUP2 LT PUSH2 0x72FC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ ISZERO PUSH2 0x7310 JUMPI POP PUSH2 0x4477 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x2D06 JUMPI PUSH2 0x732A DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4355 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x7344 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x7359 SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7396 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x739B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x7446 JUMPI PUSH1 0x60 PUSH2 0x73B2 DUP3 DUP11 PUSH2 0x90C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 DUP12 SUB DUP2 MLOAD DUP2 LT PUSH2 0x73C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x73F4 JUMPI POP DUP7 PUSH1 0x1 DUP12 SUB DUP2 MLOAD DUP2 LT PUSH2 0x73E9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 LT JUMPDEST ISZERO PUSH2 0x7443 JUMPI DUP5 DUP10 MSTORE PUSH1 0x20 DUP10 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 JUMPDEST DUP11 DUP2 LT ISZERO PUSH2 0x7441 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x741A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x742E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7406 JUMP JUMPDEST POP JUMPDEST POP POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x7313 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x748D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x74A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x74C5 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP4 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x74E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x750B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x7737 JUMPI PUSH1 0x60 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5B1DC86F PUSH3 0x249F0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x753B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x7552 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7577 SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x758F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x75C5 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x75C2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB623 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7633 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x75F3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x75F8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP1 JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7627 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH2 0x773A JUMP JUMPDEST DUP1 MLOAD PUSH2 0x7641 JUMPI PUSH1 0x0 DUP1 PUSH2 0x75FD JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x772B JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x765C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x769C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x76B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x76D4 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x7722 JUMPI DUP1 SWAP3 POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x76ED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x7701 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x7645 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 ADD PUSH2 0x7511 JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7794 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x77A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77CC SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x77E8 SWAP2 SWAP1 PUSH2 0xC9AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7800 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7814 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7838 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x784D JUMPI PUSH2 0x5EF3 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x5EF0 JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7870 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x7884 JUMPI PUSH2 0x795E JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x78A7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x78BF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x78E4 SWAP3 SWAP2 SWAP1 PUSH2 0xC8E9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x78FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x792D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x792A SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7936 JUMPI PUSH2 0x795E JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x795C JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7951 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x7851 JUMP JUMPDEST PUSH2 0x796E PUSH2 0xA578 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x79D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x79C7 SWAP1 PUSH2 0xCB0E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x79F6 PUSH2 0xA642 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x79EE JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7A54 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x7A95 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7AAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7AC1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3CB5 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x7AFB JUMPI PUSH2 0x103E JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7B1D SWAP2 SWAP1 PUSH2 0xC9AA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x7B5B SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7B97 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7B9C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x7BBF JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7BBC SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7BFE SWAP2 SWAP1 PUSH2 0xC9AA JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7C2A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7C4E SWAP2 SWAP1 PUSH2 0xBE54 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP PUSH1 0x0 PUSH3 0xF4240 SWAP1 POP DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7D76 JUMPI PUSH1 0x0 PUSH2 0x7C8D DUP10 PUSH5 0xE8D4A51000 PUSH2 0x9823 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7CB1 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x7CAB DUP9 DUP6 PUSH2 0x9859 JUMP JUMPDEST SWAP1 PUSH2 0x9823 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x7CC9 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4150 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7D58 PUSH8 0xDE0B6B3A7640000 PUSH2 0x7D52 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7D13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7D27 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7D4B SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x9823 JUMP JUMPDEST SWAP1 PUSH2 0x9875 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7D66 DUP5 DUP4 PUSH2 0x989F JUMP JUMPDEST SWAP9 POP PUSH2 0x4150 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7E76 JUMPI DUP8 DUP5 DUP2 GT ISZERO PUSH2 0x7DAB JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x4150 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7DC7 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x7CAB DUP9 DUP6 PUSH2 0x989F JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x7DDF JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4150 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E64 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7E1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7E31 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7E55 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x9859 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7D66 DUP3 PUSH2 0x7D52 DUP7 DUP9 PUSH2 0x9823 JUMP JUMPDEST POP PUSH1 0x0 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7EA3 SWAP2 SWAP1 PUSH2 0xB1E8 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7F8D JUMPI PUSH1 0x40 MLOAD PUSH4 0x51400F0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x7EF6 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC9AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7F0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x7F3F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x7F3C SWAP2 DUP2 ADD SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7F81 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x7F6D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7F72 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x3CB5 JUMP JUMPDEST SWAP5 POP PUSH2 0x3CB5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x7EF6 SWAP1 DUP8 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xC88E JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4B83992 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7FFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x800F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8033 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x805C SWAP1 PUSH2 0xCB2B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8074 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8088 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x773A SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x80B8 DUP7 PUSH2 0x98BE JUMP JUMPDEST SWAP1 POP CHAINID PUSH1 0x1 DUP2 EQ ISZERO PUSH2 0x814F JUMPI PUSH1 0x40 MLOAD PUSH4 0xDC703E73 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xDC703E73 SWAP1 PUSH2 0x80F4 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xCC6F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x810C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8120 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8144 SWAP2 SWAP1 PUSH2 0xBE11 JUMP JUMPDEST POP SWAP1 SWAP4 POP PUSH2 0x201A SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3D142A8D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xF450AA34 SWAP1 PUSH2 0x817F SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xCC6F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x81AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x81CF SWAP2 SWAP1 PUSH2 0xBE11 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x2 EQ ISZERO PUSH2 0x81F5 JUMPI PUSH2 0x46CE DUP6 DUP6 DUP6 DUP6 PUSH2 0x995A JUMP JUMPDEST DUP3 MLOAD PUSH1 0x3 EQ ISZERO PUSH2 0x820B JUMPI PUSH2 0x46CE DUP6 DUP6 DUP6 DUP6 PUSH2 0x9AAC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x79C7 SWAP1 PUSH2 0xCB38 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x8270 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8247 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8268 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x131E JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x8227 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x8291 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x82AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x79C7 SWAP1 PUSH2 0xCB48 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x82CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x82F8 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x7737 JUMPI DUP1 ISZERO PUSH2 0x83A7 JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x8322 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8376 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x839A SWAP2 SWAP1 PUSH2 0xBD93 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x83B5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8302 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x1577DA33 PUSH1 0xE0 SHL EQ PUSH2 0x8403 JUMPI PUSH1 0x0 SWAP4 POP POP PUSH2 0x842F JUMP JUMPDEST DUP5 MLOAD PUSH1 0x3 NOT DUP2 ADD PUSH1 0x4 DUP8 ADD SWAP1 DUP2 MSTORE SWAP6 PUSH2 0x8424 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP1 PUSH1 0x24 ADD PUSH2 0xB8B3 JUMP JUMPDEST PUSH1 0x1 SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMPDEST SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x8453 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x844F JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x8462 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x773A JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x8480 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x773A JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x84AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x84D6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x3A91 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x84F7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x850B JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x84DC JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x8544 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x856E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x3A91 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x858F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x85A3 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x8574 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x85DC SWAP2 SWAP1 PUSH2 0xB1AE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x85F6 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xE8E4AF09 DUP4 DUP6 DUP5 PUSH2 0x860A DUP11 PUSH2 0x9CF0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8629 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC6FA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8641 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x8676 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8673 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x86B7 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x86A4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x86A9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x3CB5 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x86C4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x3CB5 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x86F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x871A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x872C JUMPI PUSH2 0x773A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x875D DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x8748 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x876A JUMPI POP PUSH2 0x773A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8787 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x8795 JUMPI POP POP PUSH2 0x773A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x88E0 JUMPI PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x8889 JUMPI PUSH2 0x87CC DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x87BD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP8 PUSH2 0x9D31 JUMP JUMPDEST SWAP5 POP DUP5 PUSH2 0x87D8 JUMPI PUSH2 0x8889 JUMP JUMPDEST PUSH2 0x87E7 PUSH2 0x2715 PUSH2 0x2710 DUP8 PUSH2 0x9D31 JUMP JUMPDEST SWAP5 POP DUP5 PUSH2 0x87F3 JUMPI PUSH2 0x8889 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8810 DUP10 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x0 ADD MLOAD DUP9 DUP13 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x881D JUMPI POP PUSH2 0x8889 JUMP JUMPDEST DUP1 SWAP5 POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x882C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 LT PUSH2 0x8880 JUMPI DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8846 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x885D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x886F JUMPI INVALID JUMPDEST DIV SWAP3 POP PUSH1 0x5 DUP4 GT PUSH2 0x8880 JUMPI POP PUSH2 0x8889 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x87A5 JUMP JUMPDEST POP DUP1 ISZERO DUP1 PUSH2 0x8897 JUMPI POP PUSH1 0x5 DUP2 GT JUMPDEST ISZERO PUSH2 0x88A2 JUMPI POP PUSH2 0x88E0 JUMP JUMPDEST PUSH2 0x88C0 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x88B1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x9D31 JUMP JUMPDEST DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x88CC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x8798 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP2 MLOAD PUSH1 0x60 SWAP2 SWAP1 DUP3 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x890B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8935 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x8972 JUMPI POP DUP8 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0x8A3B JUMPI PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x8A30 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB0E38900 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x899D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x89C1 SWAP2 SWAP1 PUSH2 0xC9AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x89D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x89ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8A11 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8A1D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x897A JUMP JUMPDEST POP SWAP3 POP PUSH2 0x1ACF SWAP2 POP POP JUMP JUMPDEST DUP8 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x8A6C JUMPI POP DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x8B2A JUMPI PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x8A30 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBB2952FC DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x8A97 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8ABB SWAP2 SWAP1 PUSH2 0xC9AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8AD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8AE7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8B0B SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8B17 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x8A74 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP4 PUSH2 0x7D52 PUSH2 0x8B49 DUP3 PUSH1 0x1 PUSH2 0x989F JUMP JUMPDEST PUSH2 0x8B53 DUP9 DUP8 PUSH2 0x9823 JUMP JUMPDEST SWAP1 PUSH2 0x9859 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x8B97 SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8BD2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8BD7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x8BEB JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x8BFE JUMPI PUSH2 0x8BFB DUP2 PUSH1 0x0 PUSH2 0x9D89 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8C1E SWAP2 SWAP1 PUSH2 0xB2F0 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x7B6B3CA5 PUSH1 0xE1 SHL DUP6 DUP6 PUSH2 0x8C3B DUP11 PUSH2 0x9CF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8C4D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC83A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x8C8B SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8CC6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8CCB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x8CE2 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x3CB5 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8CF6 SWAP2 SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x8D02 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D4D SWAP2 SWAP1 PUSH2 0xC9AA JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8D65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8D79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8D9D SWAP2 SWAP1 PUSH2 0xBE54 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8EB4 JUMPI PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0x8E4D DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8E06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8E1A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8E3E SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x989F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8E67 DUP3 PUSH2 0x7D52 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x9823 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8E85 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x7CAB DUP10 DUP6 PUSH2 0x9859 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT PUSH2 0x8E9E JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x4150 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7D66 PUSH1 0x1 PUSH2 0x8B53 DUP6 PUSH5 0xE8D4A51000 PUSH2 0x9875 JUMP JUMPDEST DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8F99 JUMPI PUSH1 0x0 PUSH2 0x8EE3 DUP9 PUSH5 0xE8D4A51000 PUSH2 0x9823 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8F23 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7E1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8F3D PUSH8 0xDE0B6B3A7640000 PUSH2 0x7D52 DUP6 DUP6 PUSH2 0x9823 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x8F56 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4150 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8F72 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x7CAB DUP10 DUP6 PUSH2 0x989F JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x8F8B JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x4150 JUMP JUMPDEST POP SWAP6 POP PUSH2 0x4150 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8FC4 SWAP2 SWAP1 PUSH2 0xB249 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x4092E6B1 PUSH1 0xE0 SHL DUP7 DUP7 DUP7 PUSH2 0x8FE4 DUP13 PUSH2 0x9CF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8FF7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC761 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x9035 SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9070 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9075 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x908D JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x3CB5 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x90A1 SWAP2 SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x90AD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x60 SWAP1 PUSH1 0x20 PUSH1 0x2 DUP5 ADD MUL DUP2 SUB SWAP1 DUP3 PUSH2 0x90DE DUP7 DUP5 DUP5 PUSH2 0x9D95 JUMP JUMPDEST SWAP1 POP PUSH2 0x90ED DUP2 PUSH1 0x0 PUSH1 0x20 PUSH2 0x9E2B JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4150 SWAP2 SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x9147 JUMPI PUSH1 0x0 PUSH1 0x1 DUP3 DUP5 MLOAD SUB SUB PUSH1 0x20 MUL DUP5 MLOAD SUB SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x912C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH1 0x1 ADD PUSH2 0x9104 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH4 0x5E1E6325 DUP5 PUSH1 0x0 NOT DUP5 ADD DUP5 DUP2 LT PUSH2 0x916F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP8 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9197 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCBFF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x91AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x91C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8B2A SWAP2 SWAP1 PUSH2 0xBDB1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x91F1 PUSH2 0xA600 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x9205 SWAP2 SWAP1 PUSH2 0xBB5A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x921F SWAP2 SWAP1 PUSH2 0xBB3C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP6 DUP8 DUP7 PUSH2 0x923A DUP13 PUSH2 0x9CF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8FF7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCB58 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9280 SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x92AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x92D4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB623 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x936D JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x9312 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x932A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x933E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x9366 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB623 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x9382 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x5EF3 JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x938E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x93BC SWAP2 SWAP1 PUSH2 0xB2AD JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 ISZERO PUSH2 0x9460 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3CD0243B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x79A04876 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x93FC SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC68F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x9444 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x9441 SWAP2 DUP2 ADD SWAP1 PUSH2 0xBDE1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x9454 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x3CB5 JUMP JUMPDEST POP SWAP4 POP PUSH2 0x3CB5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x66410A21 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x66410A21 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x93FC SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xC68F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x949F PUSH2 0xA600 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x94B3 SWAP2 SWAP1 PUSH2 0xBAC9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP3 SWAP5 POP SWAP1 SWAP3 POP PUSH1 0x60 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x94D9 PUSH2 0xA600 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x94D1 JUMPI SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x94FC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x26207F2D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x9881FCB4 SWAP1 PUSH2 0x9535 SWAP1 DUP9 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xCC4F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x954D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9561 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x9589 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB87F JUMP JUMPDEST PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x9595 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x95C2 SWAP2 SWAP1 PUSH2 0xB1AE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x95DC SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0x30D6570D DUP4 DUP6 DUP5 PUSH2 0x860A DUP11 PUSH2 0x9CF0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9618 SWAP2 SWAP1 PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x9656 SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9691 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9696 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x96AA JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x7737 JUMPI PUSH2 0x36E6 DUP2 PUSH1 0x0 PUSH2 0x9D89 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x96D4 SWAP2 SWAP1 PUSH2 0xBAF9 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x849489A1 PUSH1 0xE0 SHL DUP7 DUP7 DUP7 PUSH2 0x96F4 DUP13 PUSH2 0x9CF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8FF7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCA5E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9731 SWAP3 SWAP2 SWAP1 PUSH2 0xC6AA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x976F SWAP2 SWAP1 PUSH2 0xC675 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x97AA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x97AF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x97C3 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x22FD JUMPI PUSH2 0x4150 DUP2 PUSH1 0x0 PUSH2 0x9D89 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x97EC SWAP2 SWAP1 PUSH2 0xB1AE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x9807 SWAP2 SWAP1 PUSH2 0xB1AE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x9817 DUP5 DUP5 DUP4 DUP10 PUSH2 0x4ED1 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x9832 JUMPI POP PUSH1 0x0 PUSH2 0x773A JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x983F JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3CB5 JUMPI PUSH2 0x3CB5 PUSH2 0x9854 PUSH1 0x1 DUP7 DUP7 PUSH2 0x9E36 JUMP JUMPDEST PUSH2 0x9E90 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x3CB5 JUMPI PUSH2 0x3CB5 PUSH2 0x9854 PUSH1 0x0 DUP7 DUP7 PUSH2 0x9E36 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x988B JUMPI PUSH2 0x988B PUSH2 0x9854 PUSH1 0x3 DUP6 DUP6 PUSH2 0x9E36 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x9896 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x98B8 JUMPI PUSH2 0x98B8 PUSH2 0x9854 PUSH1 0x2 DUP6 DUP6 PUSH2 0x9E36 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4B83992 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x98F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x990D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9931 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x805C SWAP1 PUSH2 0xCB1E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x9970 JUMPI SWAP1 POP POP SWAP1 POP PUSH2 0x998F PUSH2 0xA674 JUMP JUMPDEST PUSH2 0x9A0A PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x99C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x99EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH2 0x9E98 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0xE95 JUMPI PUSH1 0x0 DUP4 DUP3 PUSH1 0x2 DUP2 LT PUSH2 0x9A28 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9A5B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9A73 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9A87 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE POP PUSH1 0x1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x9A11 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x9AC4 JUMPI SWAP1 POP POP SWAP1 POP PUSH2 0x9AE3 PUSH2 0xA674 JUMP JUMPDEST PUSH2 0x9AEB PUSH2 0xA674 JUMP JUMPDEST PUSH2 0x9B66 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9B24 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x9B47 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE POP PUSH2 0x9E98 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x9B72 PUSH2 0xA674 JUMP JUMPDEST PUSH2 0x9BFD PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x9BAB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x9BCE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0x9BF1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP1 MSTORE PUSH2 0x9E98 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x16AB JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x9CE7 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE SWAP1 SWAP2 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9C43 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x60 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9C5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP7 DUP4 PUSH1 0x2 DUP2 LT PUSH2 0x9C72 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9C84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP3 PUSH1 0x2 DUP2 LT PUSH2 0x9CB0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x9CC2 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE POP PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x9C10 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x9C04 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9D20 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x9D3E JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x9D47 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x9D54 JUMPI POP PUSH1 0x0 PUSH2 0x3CB5 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x9D61 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x9D71 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x3CB5 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x9D7F JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB5 DUP4 DUP4 PUSH2 0xA251 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP4 GT ISZERO PUSH2 0x9DAE JUMPI PUSH2 0x9DAE PUSH2 0x9854 PUSH1 0x0 DUP6 DUP6 PUSH2 0xA27B JUMP JUMPDEST DUP4 MLOAD DUP3 GT ISZERO PUSH2 0x9DC7 JUMPI PUSH2 0x9DC7 PUSH2 0x9854 PUSH1 0x1 DUP5 DUP8 MLOAD PUSH2 0xA27B JUMP JUMPDEST DUP3 DUP3 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x9DDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9E0A JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x3CB5 PUSH2 0x9E19 DUP3 PUSH2 0xA29A JUMP JUMPDEST DUP5 PUSH2 0x9E23 DUP8 PUSH2 0xA29A JUMP JUMPDEST ADD DUP4 MLOAD PUSH2 0xA2A0 JUMP JUMPDEST PUSH2 0x9147 DUP4 DUP4 DUP4 PUSH2 0xA345 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9E55 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCA6C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH2 0x9EA0 PUSH2 0xA674 JUMP JUMPDEST PUSH2 0x9EA8 PUSH2 0xA674 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP1 DUP4 ADD DUP5 MSTORE SWAP3 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x40 ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9EDA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP4 PUSH1 0x60 ADD MLOAD DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x9F0C JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP5 PUSH1 0x80 ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9F5B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x9F6F PUSH2 0xA692 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x64 DUP2 MSTORE PUSH2 0x1F4 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xBB8 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x2710 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST PUSH1 0x4 DUP2 LT ISZERO PUSH2 0xA248 JUMPI PUSH1 0x0 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP10 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0x60 ADD MLOAD DUP7 DUP7 PUSH1 0x4 DUP2 LT PUSH2 0x9FCF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FF2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC7CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA00A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA01E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA042 SWAP2 SWAP1 PUSH2 0xBA89 JUMP JUMPDEST SWAP1 POP PUSH2 0xA04D DUP2 PUSH2 0xA36C JUMP JUMPDEST PUSH2 0xA057 JUMPI POP PUSH2 0xA240 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA087 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x60 PUSH2 0xA0B3 DUP8 DUP4 PUSH2 0x8279 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x551E2BDF PUSH3 0x6DDD0 DUP13 PUSH1 0x0 ADD MLOAD DUP5 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA0F1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xC9C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xA11B JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0xA23C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xA149 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA14E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 PUSH2 0xA15C DUP4 PUSH2 0x83D4 JUMP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0xA238 JUMPI DUP11 MLOAD DUP2 MLOAD DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xA176 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0xA1D6 JUMPI DUP11 MLOAD PUSH1 0x20 DUP1 DUP14 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP13 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP14 ADD MSTORE DUP1 MLOAD DUP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xA1AB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0xA1C0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP13 MSTORE PUSH2 0xA238 JUMP JUMPDEST DUP11 PUSH1 0x1 PUSH1 0x20 MUL ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA1EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0xA238 JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA206 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0xA21B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MSTORE DUP6 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 SWAP1 SWAP3 MUL ADD MSTORE JUMPDEST POP POP POP JUMPDEST POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x9F9B JUMP JUMPDEST POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0xA272 JUMPI PUSH2 0xA272 PUSH2 0x9854 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0xA27B JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x9E55 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCA87 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA2CA JUMPI PUSH1 0x1 DUP2 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP1 DUP3 OR DUP7 MSTORE POP POP POP PUSH2 0x9147 JUMP JUMPDEST DUP3 DUP3 EQ ISZERO PUSH2 0xA2D7 JUMPI PUSH2 0x9147 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0xA311 JUMPI PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP2 MLOAD JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xA309 JUMPI DUP5 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP5 ADD SWAP4 PUSH2 0xA2EE JUMP JUMPDEST SWAP1 MSTORE POP PUSH2 0x9147 JUMP JUMPDEST PUSH1 0x20 DUP2 SUB SWAP1 POP DUP1 DUP3 ADD DUP2 DUP5 ADD DUP4 MLOAD JUMPDEST DUP2 DUP7 SLT ISZERO PUSH2 0xA33C JUMPI DUP3 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xA320 JUMP JUMPDEST DUP6 MSTORE POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0xA364 JUMPI PUSH2 0xA364 PUSH2 0x9854 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0xA27B JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0xA37F JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x131E JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA3B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA3CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA3F1 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA41C SWAP2 SWAP1 PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA448 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA46C SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH2 0xA478 JUMPI POP PUSH1 0x0 PUSH2 0x131E JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA4B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA4C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA4E9 SWAP2 SWAP1 PUSH2 0xB190 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA514 SWAP2 SWAP1 PUSH2 0xC681 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA52C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA540 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA564 SWAP2 SWAP1 PUSH2 0xB92E JUMP JUMPDEST PUSH2 0xA570 JUMPI POP PUSH1 0x0 PUSH2 0x131E JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCEBD JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCEBD JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA6D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA6EA PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST PUSH2 0xCD21 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xA70F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xA725 DUP9 DUP3 PUSH2 0xA6B0 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA712 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xA764 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xA789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xA79F DUP9 DUP3 PUSH2 0xA6BB JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA78C JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA7C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA7D4 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0xA7FC DUP9 DUP3 PUSH2 0xA6C6 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA7E6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xA824 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA83B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xA853 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA86B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA879 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0xA8A1 DUP9 DUP3 PUSH2 0xABF1 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA88B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA8C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA8D6 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xA8FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xA911 DUP9 DUP3 PUSH2 0xAC37 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA8FE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA938 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xA946 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xA96B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xA981 DUP9 DUP3 PUSH2 0xABD0 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA96E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA9A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA9B6 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 POP DUP3 ADD DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0xA9DE DUP9 DUP3 PUSH2 0xAD12 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA9C8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xAA05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAA13 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH2 0x180 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xAA39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xAA4F DUP9 DUP3 PUSH2 0xAECF JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x180 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xAA3C JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xAA79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAA87 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x80 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xAAAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xAAC2 DUP9 DUP3 PUSH2 0xB072 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x80 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xAAAF JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xAAEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAAF9 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xAB1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xAB34 DUP9 DUP3 PUSH2 0xABC5 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xAB21 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xAB5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xAB69 PUSH2 0xA6E5 DUP3 PUSH2 0xCD47 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0xAB8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA73B JUMPI DUP2 PUSH2 0xABA4 DUP9 DUP3 PUSH2 0xABD0 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xAB91 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCED1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCEDA JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCEDA JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCEE3 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCEE3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xAC02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAC10 PUSH2 0xA6E5 DUP3 PUSH2 0xCD67 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0xAC2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x88E0 DUP4 DUP3 DUP5 PUSH2 0xCE5A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCEEC JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCEEC JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCEF5 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCF02 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCF0F JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCF0F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAC8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAC95 PUSH1 0x40 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xACA3 DUP5 DUP5 PUSH2 0xABC5 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xACB4 DUP5 DUP5 DUP4 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xACD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xACDC PUSH1 0x40 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xACEA DUP5 DUP5 PUSH2 0xAC37 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xAD06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xACB4 DUP5 DUP3 DUP6 ADD PUSH2 0xA7B5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAD24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAD2E PUSH1 0xA0 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAD3C DUP5 DUP5 PUSH2 0xABC5 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xAD4D DUP5 DUP5 DUP4 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xAD61 DUP5 DUP3 DUP6 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xAD75 DUP5 DUP3 DUP6 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xAD94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xADA0 DUP5 DUP3 DUP6 ADD PUSH2 0xABF1 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xADBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xADC8 PUSH1 0x60 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xADD6 DUP5 DUP5 PUSH2 0xA6B0 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xADE7 DUP5 DUP5 DUP4 ADD PUSH2 0xABDB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xADFB DUP5 DUP3 DUP6 ADD PUSH2 0xABDB JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAE23 PUSH1 0x60 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAE31 DUP5 DUP5 PUSH2 0xA6BB JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xAE42 DUP5 DUP5 DUP4 ADD PUSH2 0xABE6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xADFB DUP5 DUP3 DUP6 ADD PUSH2 0xABE6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAE72 PUSH1 0x40 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xACA3 DUP5 DUP5 PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAE9C PUSH1 0x60 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAEAA DUP5 DUP5 PUSH2 0xA6B0 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xAEBB DUP5 DUP5 DUP4 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xADFB DUP5 DUP3 DUP6 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAEE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAEED PUSH2 0x180 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAEFB DUP5 DUP5 PUSH2 0xAC37 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xAF0C DUP5 DUP5 DUP4 ADD PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xAF20 DUP5 DUP3 DUP6 ADD PUSH2 0xB130 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xAF34 DUP5 DUP3 DUP6 ADD PUSH2 0xB130 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xAF48 DUP5 DUP3 DUP6 ADD PUSH2 0xB130 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0xAF5C DUP5 DUP3 DUP6 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0xAF70 DUP5 DUP3 DUP6 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH2 0xAF84 DUP5 DUP3 DUP6 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 PUSH2 0xAF99 DUP5 DUP3 DUP6 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0xAFAF DUP5 DUP3 DUP6 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 PUSH2 0xAFC5 DUP5 DUP3 DUP6 ADD PUSH2 0xB151 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x160 PUSH2 0xAFDB DUP5 DUP3 DUP6 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAFFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB004 PUSH1 0x60 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB012 DUP5 DUP5 PUSH2 0xA6B0 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xAEBB DUP5 DUP5 DUP4 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB035 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB03F PUSH1 0x60 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB04D DUP5 DUP5 PUSH2 0xABD0 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xB05E DUP5 DUP5 DUP4 ADD PUSH2 0xAC4D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xADFB DUP5 DUP3 DUP6 ADD PUSH2 0xB13B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB084 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB08E PUSH1 0x80 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB09C DUP5 DUP5 PUSH2 0xAC58 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xB0AD DUP5 DUP5 DUP4 ADD PUSH2 0xB15C JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xB0C1 DUP5 DUP3 DUP6 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xB0D5 DUP5 DUP3 DUP6 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB0F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB0FD PUSH1 0x60 PUSH2 0xCD21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB10B DUP5 DUP5 PUSH2 0xA6BB JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0xB11C DUP5 DUP5 DUP4 ADD PUSH2 0xA6BB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xADFB DUP5 DUP3 DUP6 ADD PUSH2 0xABBA JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCF18 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCF18 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCF21 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCF2A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x773A DUP2 PUSH2 0xCF33 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x773A DUP2 PUSH2 0xCF33 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xA6BB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB1C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB1CD DUP6 DUP6 PUSH2 0xA6BB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xA6BB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB20A DUP8 DUP8 PUSH2 0xA6BB JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xB21B DUP8 DUP3 DUP9 ADD PUSH2 0xA6BB JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xB22C DUP8 DUP3 DUP9 ADD PUSH2 0xA6BB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0xB23D DUP8 DUP3 DUP9 ADD PUSH2 0xA6BB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB25E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB26A DUP7 DUP7 PUSH2 0xA6BB JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xB27B DUP7 DUP3 DUP8 ADD PUSH2 0xA6BB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB297 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xA745 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB2CE DUP7 DUP7 PUSH2 0xA6BB JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xB2DF DUP7 DUP3 DUP8 ADD PUSH2 0xA6BB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xABBA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB30F DUP6 DUP6 PUSH2 0xA6BB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xA745 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xB350 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB35C DUP10 DUP10 PUSH2 0xA6B0 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0xB36D DUP10 DUP3 DUP11 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0xB37E DUP10 DUP3 DUP11 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0xB38F DUP10 DUP3 DUP11 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0xB3A0 DUP10 DUP3 DUP11 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB3BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB3C8 DUP10 DUP3 DUP11 ADD PUSH2 0xAADA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xB3ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB3F9 DUP9 DUP9 PUSH2 0xA6B0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0xB40A DUP9 DUP3 DUP10 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0xB41B DUP9 DUP3 DUP10 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0xB42C DUP9 DUP3 DUP10 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB454 DUP9 DUP3 DUP10 ADD PUSH2 0xAADA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB483 DUP8 DUP8 PUSH2 0xA6B0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xB494 DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xB4A5 DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB4C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB23D DUP8 DUP3 DUP9 ADD PUSH2 0xAADA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB4E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB4EF DUP8 DUP8 PUSH2 0xA6B0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xB500 DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xB511 DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0xB23D DUP8 DUP3 DUP9 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB538 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB544 DUP8 DUP8 PUSH2 0xA6B0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xB555 DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB571 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB4A5 DUP8 DUP3 DUP9 ADD PUSH2 0xA6C6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB59E DUP7 DUP7 PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB5BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5C6 DUP7 DUP3 DUP8 ADD PUSH2 0xA6C6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB5E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xAADA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xB606 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB612 DUP9 DUP9 PUSH2 0xA6B0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0xB40A DUP9 DUP3 DUP10 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB64B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ACF DUP5 DUP3 DUP6 ADD PUSH2 0xA745 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB66A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB680 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB68C DUP6 DUP3 DUP7 ADD PUSH2 0xA812 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB6AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB6C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6CF DUP7 DUP3 DUP8 ADD PUSH2 0xA85A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB6EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6F7 DUP7 DUP3 DUP8 ADD PUSH2 0xA85A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB71A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB730 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ACF DUP5 DUP3 DUP6 ADD PUSH2 0xA8B7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB74F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB765 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB771 DUP6 DUP3 DUP7 ADD PUSH2 0xA8B7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB797 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB7AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB7B9 DUP7 DUP3 DUP8 ADD PUSH2 0xA8B7 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xB7CA DUP7 DUP3 DUP8 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB7ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB803 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ACF DUP5 DUP3 DUP6 ADD PUSH2 0xA927 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB824 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB83A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB846 DUP7 DUP3 DUP8 ADD PUSH2 0xA9F4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB862 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB86E DUP7 DUP3 DUP8 ADD PUSH2 0xAA68 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB891 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB8A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ACF DUP5 DUP3 DUP6 ADD PUSH2 0xAB4A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB8C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB8DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB8E8 DUP6 DUP3 DUP7 ADD PUSH2 0xAB4A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB904 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xAB4A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB922 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xABBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB940 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xABD0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB962 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB96E DUP8 DUP8 PUSH2 0xAC37 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB98A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB555 DUP8 DUP3 DUP9 ADD PUSH2 0xA997 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB9AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB9B8 DUP8 DUP8 PUSH2 0xAC37 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xB9C9 DUP8 DUP3 DUP9 ADD PUSH2 0xAC37 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xB4A5 DUP8 DUP3 DUP9 ADD PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB9F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB544 DUP8 DUP8 PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBA12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBA1E DUP8 DUP8 PUSH2 0xAC37 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xBA2F DUP8 DUP3 DUP9 ADD PUSH2 0xABC5 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xB4A5 DUP8 DUP3 DUP9 ADD PUSH2 0xABC5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBA55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBA61 DUP7 DUP7 PUSH2 0xAC37 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xBA7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5C6 DUP7 DUP3 DUP8 ADD PUSH2 0xA8B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBA9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xAC42 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBABD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB483 DUP8 DUP8 PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBADC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBAE8 DUP6 DUP6 PUSH2 0xAC42 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xB0E1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBB0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBB1A DUP7 DUP7 PUSH2 0xAC42 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xBB2B DUP7 DUP3 DUP8 ADD PUSH2 0xA6BB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xA6BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBB4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xAC6E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBB6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBB79 DUP6 DUP6 PUSH2 0xAC6E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xAE07 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBBA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBBAC DUP8 DUP8 PUSH2 0xAC79 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0xBBBD DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0xBBCE DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB4C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBC00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xBC16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB483 DUP8 DUP3 DUP9 ADD PUSH2 0xACC0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBC38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBC44 DUP8 DUP8 PUSH2 0xADAC JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0xBC55 DUP8 DUP3 DUP9 ADD PUSH2 0xAC63 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0xBC66 DUP8 DUP3 DUP9 ADD PUSH2 0xAC63 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xB4C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBC98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBBAC DUP8 DUP8 PUSH2 0xAE56 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBCBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBCC6 DUP8 DUP8 PUSH2 0xAE80 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0xBCD7 DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH2 0xBC66 DUP8 DUP3 DUP9 ADD PUSH2 0xA6B0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBCFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBD0A DUP7 DUP7 PUSH2 0xAECF JUMP JUMPDEST SWAP4 POP POP PUSH2 0x180 PUSH2 0xBD1C DUP7 DUP3 DUP8 ADD PUSH2 0xB072 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x200 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xAC37 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBD44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBCC6 DUP8 DUP8 PUSH2 0xAFE8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBD65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBD71 DUP7 DUP7 PUSH2 0xB023 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0xBD82 DUP7 DUP3 DUP8 ADD PUSH2 0xB13B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xABBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBDA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xB146 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBDC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBDD0 DUP6 DUP6 PUSH2 0xABD0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xABBA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBDF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBE00 DUP6 DUP6 PUSH2 0xABD0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB1DE DUP6 DUP3 DUP7 ADD PUSH2 0xABD0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBE26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBE32 DUP7 DUP7 PUSH2 0xABD0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xBE43 DUP7 DUP3 DUP8 ADD PUSH2 0xABD0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xB2A3 DUP7 DUP3 DUP8 ADD PUSH2 0xABD0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xBE6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBE78 DUP9 DUP9 PUSH2 0xABD0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0xBE89 DUP9 DUP3 DUP10 ADD PUSH2 0xABD0 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0xBE9A DUP9 DUP3 DUP10 ADD PUSH2 0xABD0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0xBEAB DUP9 DUP3 DUP10 ADD PUSH2 0xABD0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0xB454 DUP9 DUP3 DUP10 ADD PUSH2 0xABD0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBECE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP5 DUP5 PUSH2 0xB167 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBEE6 DUP4 DUP4 PUSH2 0xBF41 JUMP JUMPDEST POP POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBEE6 DUP4 DUP4 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB5 DUP4 DUP4 PUSH2 0xC1F7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB5 DUP4 DUP4 PUSH2 0xC393 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB5 DUP4 DUP4 PUSH2 0xC3F8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBF2A DUP4 DUP4 PUSH2 0xC60D JUMP JUMPDEST POP POP PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE23 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCD9B JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBF55 DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xBF5F DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP PUSH2 0xBF6A DUP4 PUSH2 0xA29A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBF98 JUMPI DUP2 MLOAD PUSH2 0xBF82 DUP9 DUP3 PUSH2 0xBEDA JUMP JUMPDEST SWAP8 POP PUSH2 0xBF8D DUP4 PUSH2 0xA29A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xBF6E JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBFAE DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xBFB8 DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP PUSH2 0xBFC3 DUP4 PUSH2 0xA29A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBF98 JUMPI DUP2 MLOAD PUSH2 0xBFDB DUP9 DUP3 PUSH2 0xBEEE JUMP JUMPDEST SWAP8 POP PUSH2 0xBFE6 DUP4 PUSH2 0xA29A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xBFC7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBFFC DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xC006 DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0xC018 DUP6 PUSH2 0xA29A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xC052 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0xC035 DUP6 DUP3 PUSH2 0xBEFA JUMP JUMPDEST SWAP5 POP PUSH2 0xC040 DUP4 PUSH2 0xA29A JUMP JUMPDEST PUSH1 0x20 SWAP11 SWAP1 SWAP11 ADD SWAP10 SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xC01C JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC06A DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xC074 DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0xC086 DUP6 PUSH2 0xA29A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xC052 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0xC0A3 DUP6 DUP3 PUSH2 0xBF06 JUMP JUMPDEST SWAP5 POP PUSH2 0xC0AE DUP4 PUSH2 0xA29A JUMP JUMPDEST PUSH1 0x20 SWAP11 SWAP1 SWAP11 ADD SWAP10 SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xC08A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC0CB DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xC0D5 DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0xC0E7 DUP6 PUSH2 0xA29A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xC052 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0xC104 DUP6 DUP3 PUSH2 0xBF12 JUMP JUMPDEST SWAP5 POP PUSH2 0xC10F DUP4 PUSH2 0xA29A JUMP JUMPDEST PUSH1 0x20 SWAP11 SWAP1 SWAP11 ADD SWAP10 SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xC0EB JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC12C DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xC136 DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP PUSH2 0xC141 DUP4 PUSH2 0xA29A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBF98 JUMPI DUP2 MLOAD PUSH2 0xC159 DUP9 DUP3 PUSH2 0xBF1E JUMP JUMPDEST SWAP8 POP PUSH2 0xC164 DUP4 PUSH2 0xA29A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xC145 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC17A DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xC184 DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP PUSH2 0xC18F DUP4 PUSH2 0xA29A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBF98 JUMPI DUP2 MLOAD PUSH2 0xC1A7 DUP9 DUP3 PUSH2 0xBEEE JUMP JUMPDEST SWAP8 POP PUSH2 0xC1B2 DUP4 PUSH2 0xA29A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xC193 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCDA6 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCDAB JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCDAE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1E4 DUP4 DUP6 PUSH2 0x131E JUMP JUMPDEST SWAP4 POP PUSH2 0xC1F1 DUP4 DUP6 DUP5 PUSH2 0xCE5A JUMP JUMPDEST POP POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC202 DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xC20C DUP2 DUP6 PUSH2 0xCD92 JUMP JUMPDEST SWAP4 POP PUSH2 0xC21C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xCE66 JUMP JUMPDEST PUSH2 0xC225 DUP2 PUSH2 0xCE92 JUMP JUMPDEST SWAP1 SWAP4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23A DUP3 PUSH2 0xCD8E JUMP JUMPDEST PUSH2 0xC244 DUP2 DUP6 PUSH2 0x131E JUMP JUMPDEST SWAP4 POP PUSH2 0xC254 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xCE66 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCDBB JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE2E JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE39 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE44 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCDE4 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE4F JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC2A1 PUSH1 0x25 DUP4 PUSH2 0xCD92 JUMP JUMPDEST PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E DUP2 MSTORE PUSH5 0x2FA820A4A9 PUSH1 0xD9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH9 0x22BC31B430B733B2B9 PUSH1 0xB9 SHL SWAP1 MSTORE JUMP JUMPDEST PUSH9 0xA6F2DCE8D0CAE8D2F PUSH1 0xBB SHL SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC30A PUSH1 0x2E DUP4 PUSH2 0xCD92 JUMP JUMPDEST PUSH32 0x556E6973776170563353616D706C65722F756E737570706F7274656420746F6B DUP2 MSTORE PUSH14 0xCADC40E0C2E8D040D8CADCCEE8D PUSH1 0x93 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC35A PUSH1 0x24 DUP4 PUSH2 0xCD92 JUMP JUMPDEST PUSH32 0x556E69737761705633436F6D6D6F6E2F696E76616C69642070617468206C656E DUP2 MSTORE PUSH4 0x67746873 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 DUP5 ADD SWAP1 PUSH2 0xC3A7 DUP6 DUP3 PUSH2 0xC1C6 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0xC3BA PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0xC1C6 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0xC3CD PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0xC1C6 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xC3E0 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0xC1C6 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x80 DUP7 ADD MSTORE PUSH2 0x36E6 DUP3 DUP3 PUSH2 0xC1F7 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 DUP5 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0xC410 DUP3 DUP3 PUSH2 0xC1F7 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x11B1 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0xC1BD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0xC436 DUP5 DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xC449 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xC1CF JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xC45C PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xC1CF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0xC473 DUP5 DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xC486 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xC1BD JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xC499 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xC45C PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0xC1BD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0xC4C0 DUP6 DUP3 PUSH2 0xC1C6 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x36E6 DUP3 DUP3 PUSH2 0xC1F7 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x180 DUP4 ADD SWAP1 PUSH2 0xC4EA DUP5 DUP3 PUSH2 0xC25E JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xC4FD PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xC25E JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xC510 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xC644 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xC523 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0xC644 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0xC536 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0xC644 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0xC549 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0xC55C PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0xC56F PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0xC584 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH2 0x120 DUP3 ADD MLOAD PUSH2 0xC599 PUSH2 0x120 DUP6 ADD DUP3 PUSH2 0xC1C6 JUMP JUMPDEST POP PUSH2 0x140 DUP3 ADD MLOAD PUSH2 0xC5AE PUSH2 0x140 DUP6 ADD DUP3 PUSH2 0xC656 JUMP JUMPDEST POP PUSH2 0x160 DUP3 ADD MLOAD PUSH2 0xC45C PUSH2 0x160 DUP6 ADD DUP3 PUSH2 0xC1C6 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0xC5D4 DUP5 DUP3 PUSH2 0xC267 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xC5E7 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xC65F JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xC5FA PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xC1C6 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xC45C PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0xC1C6 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0xC61E DUP5 DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xC631 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xBF41 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xC45C PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xC1BD JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCDEA JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE09 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE11 JUMP JUMPDEST PUSH2 0xBF3B DUP2 PUSH2 0xCE1D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ACF DUP3 DUP5 DUP7 PUSH2 0xC1D8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB5 DUP3 DUP5 PUSH2 0xC22F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x773A DUP3 DUP5 PUSH2 0xBF41 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC69D DUP3 DUP6 PUSH2 0xBF32 JUMP JUMPDEST PUSH2 0x3CB5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC6B8 DUP3 DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0x3CB5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xBF41 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xC6D3 DUP3 DUP8 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC6E0 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC6ED PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0x36E6 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xBF41 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xC708 DUP3 DUP8 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC715 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC722 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4150 DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC742 DUP3 DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC74F PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x36E6 DUP2 DUP5 PUSH2 0xBF4A JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xC76F DUP3 DUP8 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC77C PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0xBF41 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xC78E DUP2 DUP6 PUSH2 0xBF4A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4150 DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC7B0 DUP3 DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC7BD PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0x1ACF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xC1BD JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC7D8 DUP3 DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC7E5 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0x1ACF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xC64D JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC800 DUP3 DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC80D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0x1ACF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC828 DUP3 DUP6 PUSH2 0xBF41 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1ACF DUP2 DUP5 PUSH2 0xBF4A JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC848 DUP3 DUP7 PUSH2 0xBF41 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xC85A DUP2 DUP6 PUSH2 0xBF4A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x36E6 DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC87C DUP3 DUP6 PUSH2 0xBF41 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1ACF DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC69D DUP3 DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC8AA DUP3 DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xC8B7 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xC1C6 JUMP JUMPDEST PUSH2 0x1ACF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xC28B JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC8D5 DUP2 DUP6 PUSH2 0xBF4A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1ACF DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC8FA DUP2 DUP6 PUSH2 0xBF4A JUMP JUMPDEST SWAP1 POP PUSH2 0x3CB5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC8D5 DUP2 DUP6 PUSH2 0xBFA3 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xC92B DUP2 DUP7 PUSH2 0xBFF1 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xC85A DUP2 DUP6 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x3CB5 DUP2 DUP5 PUSH2 0xC0C0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x3CB5 DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x773A DUP3 DUP5 PUSH2 0xC1BD JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC97D DUP3 DUP7 PUSH2 0xC1BD JUMP JUMPDEST PUSH2 0xC98A PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x36E6 DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC87C DUP3 DUP6 PUSH2 0xC1BD JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x773A DUP3 DUP5 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC87C DUP3 DUP6 PUSH2 0xC25E JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC9D4 DUP3 DUP7 PUSH2 0xC25E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xC85A DUP2 DUP6 PUSH2 0xC1F7 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC9F4 DUP3 DUP7 PUSH2 0xC25E JUMP JUMPDEST PUSH2 0xCA01 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0x1ACF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xBF41 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xCA1C DUP3 DUP8 PUSH2 0xC25E JUMP JUMPDEST PUSH2 0xCA29 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0xCA36 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xBF41 JUMP JUMPDEST PUSH2 0x36E6 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xCA51 DUP3 DUP6 PUSH2 0xC25E JUMP JUMPDEST PUSH2 0x3CB5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC60D JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xC708 DUP3 DUP8 PUSH2 0xC25E JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xCA7A DUP3 DUP7 PUSH2 0xC267 JUMP JUMPDEST PUSH2 0xC80D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xCA7A DUP3 DUP7 PUSH2 0xC270 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD PUSH2 0xCAA3 DUP3 DUP8 PUSH2 0xC279 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xCAB5 DUP2 DUP7 PUSH2 0xC05F JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xCAC9 DUP2 DUP6 PUSH2 0xBF4A JUMP JUMPDEST SWAP1 POP PUSH2 0x36E6 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xC462 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xCAE6 DUP3 DUP7 PUSH2 0xC282 JUMP JUMPDEST PUSH2 0xC80D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xC282 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xCB01 DUP3 DUP6 PUSH2 0xC282 JUMP JUMPDEST PUSH2 0x3CB5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC425 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x773A DUP2 PUSH2 0xC294 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x131E DUP3 PUSH2 0xC2DB JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x131E DUP3 PUSH2 0xC2EC JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x773A DUP2 PUSH2 0xC2FD JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x773A DUP2 PUSH2 0xC34D JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0xCB66 DUP3 DUP8 PUSH2 0xC425 JUMP JUMPDEST PUSH2 0xCB73 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0xC282 JUMP JUMPDEST PUSH2 0xCB80 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0xC282 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x4150 DUP2 DUP5 PUSH2 0xC16F JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xCBA3 DUP2 DUP7 PUSH2 0xC4AC JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xC85A DUP2 DUP6 PUSH2 0xC4AC JUMP JUMPDEST PUSH2 0x200 DUP2 ADD PUSH2 0xCBC6 DUP3 DUP6 PUSH2 0xC4D8 JUMP JUMPDEST PUSH2 0x3CB5 PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0xC5C3 JUMP JUMPDEST PUSH2 0x220 DUP2 ADD PUSH2 0xCBE3 DUP3 DUP7 PUSH2 0xC4D8 JUMP JUMPDEST PUSH2 0xCBF1 PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0xC5C3 JUMP JUMPDEST PUSH2 0x1ACF PUSH2 0x200 DUP4 ADD DUP5 PUSH2 0xC25E JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xC9F4 DUP3 DUP7 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xC828 DUP3 DUP6 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xCC29 DUP3 DUP7 PUSH2 0xC1C6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xCC3B DUP2 DUP6 PUSH2 0xBF4A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x36E6 DUP2 DUP5 PUSH2 0xBF4A JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0xCC5D DUP3 DUP6 PUSH2 0xC1C6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1ACF DUP2 DUP5 PUSH2 0xC121 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xCA7A DUP3 DUP7 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0xCC8B DUP3 DUP10 PUSH2 0xC1C6 JUMP JUMPDEST PUSH2 0xCC98 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0xC1C6 JUMP JUMPDEST PUSH2 0xCCA5 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0xC1C6 JUMP JUMPDEST PUSH2 0xCCB2 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0xC1C6 JUMP JUMPDEST PUSH2 0xCCBF PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0xC1C6 JUMP JUMPDEST PUSH2 0x8B2A PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0xC1C6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT CALLDATASIZE DUP6 SWAP1 SUB ADD DUP2 SLT PUSH2 0xCCE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP5 ADD SWAP3 POP DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xCD01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0xCD19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xCD3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xCD5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xCD7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773A DUP3 PUSH2 0xCDFD JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773A DUP3 PUSH2 0xCD9B JUMP JUMPDEST DUP1 PUSH2 0x131E DUP2 PUSH2 0xCE9C JUMP JUMPDEST DUP1 PUSH2 0x131E DUP2 PUSH2 0xCEA9 JUMP JUMPDEST DUP1 PUSH2 0x131E DUP2 PUSH2 0xCEB3 JUMP JUMPDEST PUSH1 0xF SIGNEXTEND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773A DUP3 PUSH2 0xCDBB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773A DUP3 PUSH2 0xCDC6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773A DUP3 PUSH2 0xCDD0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773A DUP3 PUSH2 0xCDDA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773A DUP3 PUSH2 0xCDF6 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCE81 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCE69 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xC45C JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0xCEA6 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x8 DUP2 LT PUSH2 0xCEA6 JUMPI INVALID JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0xCEA6 JUMPI INVALID JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCD9B JUMP JUMPDEST DUP2 EQ PUSH2 0xCEA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCDA6 JUMP JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCDAB JUMP JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCDAE JUMP JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCDBB JUMP JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0xCEA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0xCEA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCDE4 JUMP JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCDEA JUMP JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCE09 JUMP JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCE11 JUMP JUMPDEST PUSH2 0xCEC6 DUP2 PUSH2 0xCE1D JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0x23 0xB1 0xD0 0xEC PUSH20 0xA395BC5AC48F93CC2C0218A5B102B3C4884CA302 LOG4 PUSH30 0x248EE0C064736F6C634300060C0033000000000000000000000000000000 ",
                "sourceMapi;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1907:1068:17;;;;;;;;;;-1:-1:-1;1907:1068:17;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;4134:800:22:-;;;;;;;;;;-1:-1:-1;4134:800:22;;;;;:::i;:::-;;:::i;1508:1177:8:-;;;;;;;;;;-1:-1:-1;1508:1177:8;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2065:188:32:-;;;;;;;;;;-1:-1:-1;2065:188:32;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3137:1272:5:-;;;;;;;;;;-1:-1:-1;3137:1272:5;;;;;:::i;:::-;;:::i;1264:1740:7:-;;;;;;;;;;-1:-1:-1;1264:1740:7;;;;;:::i;:::-;;:::i;4239:2334:28:-;;;;;;;;;;-1:-1:-1;4239:2334:28;;;;;:::i;:::-;;:::i;3457:890:20:-;;;;;;;;;;-1:-1:-1;3457:890:20;;;;;:::i;:::-;;:::i;1927:1714:12:-;;;;;;;;;;-1:-1:-1;1927:1714:12;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2746:1023:9:-;;;;;;;;;;-1:-1:-1;2746:1023:9;;;;;:::i;:::-;;:::i;1373:1006:19:-;;;;;;;;;;-1:-1:-1;1373:1006:19;;;;;:::i;:::-;;:::i;1213:904:29:-;;;;;;;;;;-1:-1:-1;1213:904:29;;;;;:::i;:::-;;:::i;3303:857:26:-;;;;;;;;;;-1:-1:-1;3303:857:26;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;309:1371:16:-;;;;;;;;;;-1:-1:-1;309:1371:16;;;;;:::i;:::-;;:::i;1722:1075:11:-;;;;;;;;;;-1:-1:-1;1722:1075:11;;;;;:::i;:::-;;:::i;2345:92:32:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3399:1052:17:-;;;;;;;;;;-1:-1:-1;3399:1052:17;;;;;:::i;:::-;;:::i;2259:80:32:-;;;;;;;;;;;;;:::i;1474:2048:31:-;;;;;;;;;;-1:-1:-1;1474:2048:31;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;4149:2241:4:-;;;;;;;;;;-1:-1:-1;4149:2241:4;;;;;:::i;:::-;;:::i;3999:2235:31:-;;;;;;;;;;-1:-1:-1;3999:2235:31;;;;;:::i;:::-;;:::i;2655:595:25:-;;;;;;;;;;-1:-1:-1;2655:595:25;;;;;:::i;:::-;;:::i;1475:596:18:-;;;;;;;;;;-1:-1:-1;1475:596:18;;;;;:::i;:::-;;:::i;5375:881:22:-;;;;;;;;;;-1:-1:-1;5375:881:22;;;;;:::i;:::-;;:::i;2460:454:14:-;;;;;;;;;;-1:-1:-1;2460:454:14;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2492:631:18:-;;;;;;;;;;-1:-1:-1;2492:631:18;;;;;:::i;:::-;;:::i;944:321:32:-;;;;;;;;;;-1:-1:-1;944:321:32;;;;;:::i;:::-;;:::i;3260:280:8:-;;;;;;;;;;-1:-1:-1;3260:280:8;;;;;:::i;:::-;;:::i;2502:842:0:-;;;;;;;;;;-1:-1:-1;2502:842:0;;;;;:::i;:::-;;:::i;1140:704:23:-;;;;;;;;;;-1:-1:-1;1140:704:23;;;;;:::i;:::-;;:::i;4353:891:20:-;;;;;;;;;;-1:-1:-1;4353:891:20;;;;;:::i;:::-;;:::i;853:72:9:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1058:575:34:-;;;;;;;;;;-1:-1:-1;1058:575:34;;;;;:::i;:::-;;:::i;1686:752:16:-;;;;;;;;;;-1:-1:-1;1686:752:16;;;;;:::i;:::-;;:::i;887:1957:27:-;;;;;;;;;;-1:-1:-1;887:1957:27;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;1709:1081:33:-;;;;;;;;;;-1:-1:-1;1709:1081:33;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;3223:1639:11:-;;;;;;;;;;-1:-1:-1;3223:1639:11;;;;;:::i;:::-;;:::i;1762:1962:4:-;;;;;;;;;;-1:-1:-1;1762:1962:4;;;;;:::i;:::-;;:::i;6396:964:22:-;;;;;;;;;;-1:-1:-1;6396:964:22;;;;;:::i;:::-;;:::i;2365:1194:21:-;;;;;;;;;;-1:-1:-1;2365:1194:21;;;;;:::i;:::-;;:::i;3420:1490:7:-;;;;;;;;;;-1:-1:-1;3420:1490:7;;;;;:::i;:::-;;:::i;1988:1147:13:-;;;;;;;;;;-1:-1:-1;1988:1147:13;;;;;:::i;:::-;;:::i;1271:1187:10:-;;;;;;;;;;-1:-1:-1;1271:1187:10;;;;;:::i;:::-;;:::i;3257:1016:33:-;;;;;;;;;;-1:-1:-1;3257:1016:33;;;;;:::i;:::-;;:::i;1179:843:0:-;;;;;;;;;;-1:-1:-1;1179:843:0;;;;;:::i;:::-;;:::i;1423:936:21:-;;;;;;;;;;-1:-1:-1;1423:936:21;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;2799:605:19:-;;;;;;;;;;-1:-1:-1;2799:605:19;;;;;:::i;:::-;;:::i;1271:377:32:-;;;;;;;;;;-1:-1:-1;1271:377:32;;;;;:::i;:::-;;:::i;1541:2339:28:-;;;;;;;;;;-1:-1:-1;1541:2339:28;;;;;:::i;:::-;;:::i;2468:888:29:-;;;;;;;;;;-1:-1:-1;2468:888:29;;;;;:::i;:::-;;:::i;1911:923:26:-;;;;;;;;;;-1:-1:-1;1911:923:26;;;;;:::i;:::-;;:::i;1188:1569:5:-;;;;;;;;;;-1:-1:-1;1188:1569:5;;;;;:::i;:::-;;:::i;3732:999:13:-;;;;;;;;;;-1:-1:-1;3732:999:13;;;;;:::i;:::-;;:::i;4400:1225:1:-;;;;;;;;;;-1:-1:-1;4400:1225:1;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;4184:1722:12:-;;;;;;;;;;-1:-1:-1;4184:1722:12;;;;;:::i;:::-;;:::i;2579:1226:1:-;;;;;;;;;;-1:-1:-1;2579:1226:1;;;;;:::i;:::-;;:::i;2085:652:34:-;;;;;;;;;;-1:-1:-1;2085:652:34;;;;;:::i;:::-;;:::i;1654:405:32:-;;;;;;;;;;-1:-1:-1;1654:405:32;;;;;:::i;:::-;;:::i;1430:801:25:-;;;;;;;;;;-1:-1:-1;1430:801:25;;;;;:::i;:::-;;:::i;4034:854:21:-;;;;;;;;;;-1:-1:-1;4034:854:21;;;;;:::i;:::-;;:::i;220:914:23:-;;;;;;;;;;-1:-1:-1;220:914:23;;;;;:::i;:::-;;:::i;1325:1025:9:-;;;;;;;;;;-1:-1:-1;1325:1025:9;;;;;:::i;:::-;;:::i;2850:2340:27:-;;;;;;;;;;-1:-1:-1;2850:2340:27;;;;;:::i;:::-;;:::i;2464:1186:10:-;2728:24;;2661:34;;2728:24;-1:-1:-1;;;;;2782:25:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2782:25:10;;2762:45;;2898:20;2921:6;-1:-1:-1;;;;;2921:25:10;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2898:50;;2958:22;2991:6;-1:-1:-1;;;;;2991:15:10;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2983:26;;2958:51;;3055:6;-1:-1:-1;;;;;3024:38:10;3032:10;-1:-1:-1;;;;;3024:38:10;;3020:624;;;3103:9;3098:221;3122:10;3118:1;:14;3098:221;;;3289:14;3283:2;:20;1260:4;3261:42;3224:12;3201:17;3219:1;3201:20;;;;;;;;;;;;;;:35;3200:104;;;;;;3157:17;3175:1;3157:20;;;;;;;;;;;;;;;;;:147;3134:3;;3098:221;;;;3020:624;;;3370:6;-1:-1:-1;;;;;3339:38:10;3347:10;-1:-1:-1;;;;;3339:38:10;;3335:309;;;3420:9;3415:219;3439:10;3435:1;:14;3415:219;;;3607:12;3569:14;3563:2;:20;1260:4;3518:17;3536:1;3518:20;;;;;;;;;;;;;;:42;:65;3517:102;;;;;;3474:17;3492:1;3474:20;;;;;;;;;;;;;;;;;:145;3451:3;;3415:219;;;;3335:309;2464:1186;;;;;;;;;:::o;1907:1068:17:-;2157:24;;2066:22;;;;2157:24;-1:-1:-1;;;;;2211:25:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2211:25:17;;2191:45;;2254:31;2272:6;2280:4;2254:17;:31::i;:::-;2246:39;;2299:5;:12;2315:1;2299:17;2295:81;;;2332:33;;;2295:81;2390:9;2385:584;2409:10;2405:1;:14;2385:584;;;2476:6;-1:-1:-1;;;;;2460:37:17;;1466:5;2523:17;2541:1;2523:20;;;;;;;;;;;;;;2545:5;2552:4;2460:97;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2460:97:17;;;;;;;;;;;;:::i;:::-;;;2440:519;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2939:5;;;2440:519;2646:7;2668:1;2654:4;:11;:15;2646:24;;;;;;;;;;;;;;2623:17;2641:1;2623:20;;;;;;;;;;;;;:47;;;;;2746:17;2764:1;2746:20;;;;;;;;;;;;;;2770:1;2746:25;2742:77;;;2795:5;;;2742:77;2570:263;2421:3;;2385:584;;;;1907:1068;;;;;;;;:::o;4134:800:22:-;4337:47;4443:6;:13;-1:-1:-1;;;;;4429:28:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4429:28:22;;4396:61;;4472:9;4467:461;4492:6;:13;4487:1;:18;4467:461;;4546:4;-1:-1:-1;;;;;4546:37:22;;3619:5;4607:6;4614:1;4607:9;;;;;;;;;;;;;;4618:15;4634:1;4618:18;;;;;;;;;;;;;;4638:8;4546:101;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4546:101:22;;;;;;;;-1:-1:-1;;4546:101:22;;;;;;;;;;;;:::i;:::-;;;4526:392;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4902:1;4866:30;4897:1;4866:33;;;;;;;;;;;;;:37;;;;;4761:157;4526:392;;;4739:6;4703:30;4734:1;4703:33;;;;;;;;;;;;;:42;;;;;4660:100;4526:392;4507:3;;4467:461;;;;4134:800;;;;;:::o;1508:1177:8:-;1705:21;1728;1751:34;1831:17;:24;-1:-1:-1;;;;;1817:39:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1817:39:8;;1797:59;;1870:4;:10;;;:17;1891:1;1870:22;1866:100;;;1908:47;;1866:100;1999:62;2013:4;2019:10;2031;2043:17;1999:13;:62::i;:::-;1975:86;;-1:-1:-1;1975:86:8;-1:-1:-1;2077:9:8;2072:550;2096:17;:24;2092:1;:28;2072:550;;;2160:13;-1:-1:-1;;;;;2145:40:8;;830:5;2208:4;2214:17;2232:1;2214:20;;;;;;;;;;;;;;2145:90;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2145:90:8;;;;;;;;-1:-1:-1;;2145:90:8;;;;;;;;;;;;:::i;:::-;;;2141:471;;2592:5;;2141:471;2332:6;2309:17;2327:1;2309:20;;;;;;;;;;;;;:29;;;;;2414:17;2432:1;2414:20;;;;;;;;;;;;;;2438:1;2414:25;2410:77;;;2463:5;;;2410:77;2236:265;2122:3;;2072:550;;;;1508:1177;;;;;;;;;:::o;2065:188:32:-;2192:20;;2238:8;;2065:188;;;;:::o;3137:1272:5:-;3440:24;;3373:34;;3440:24;-1:-1:-1;;;;;3494:25:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3494:25:5;;3474:45;;3529:48;;:::i;:::-;3580:18;:16;:18::i;:::-;3529:69;;3614:9;3609:794;3633:10;3629:1;:14;3609:794;;;3686:17;3704:1;3686:20;;;;;;;;;;;;;;3664:9;3674:1;3664:12;;;;;;;;;;;;;;;;;;:19;;:42;3787:91;;-1:-1:-1;;;3787:91:5;;-1:-1:-1;;;;;3787:20:5;;;;;:91;;3808:35;;3845:9;;3856:10;;3868:9;;3787:91;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3787:91:5;;;;;;;;;;;;:::i;:::-;;;3720:673;;4373:5;;3720:673;4081:21;4105:7;4113:1;4105:10;;;;;;;;;;;;;;4081:34;;4155:1;4137:14;:19;4133:71;;4180:5;;;;4133:71;4252:14;4221:17;4239:1;4221:20;;;;;;;;;;;;;:46;;;;;3891:391;;3645:3;;3609:794;;1264:1740:7;1482:34;1528:40;1545:10;1557;1528:16;:40::i;:::-;1620:14;;;;1675:16;;;1689:1;1675:16;;;1645:27;1675:16;;;;;;;;;;;;;;;;;;-1:-1:-1;1675:16:7;1645:46;;1717:10;1701;1712:1;1701:13;;;;;;;;;;;;;:26;-1:-1:-1;;;;;1701:26:7;;;-1:-1:-1;;;;;1701:26:7;;;;;1753:10;1737;1748:1;1737:13;;;;;;;;-1:-1:-1;;;;;1737:26:7;;;:13;;;;;;;;;;;:26;1795:24;;;-1:-1:-1;;;;;1849:25:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1849:25:7;;1829:45;;1884:48;;:::i;:::-;1935:18;:16;:18::i;:::-;1884:69;;1969:9;1964:1034;1988:10;1984:1;:14;1964:1034;;;2019:49;2071:48;2088:8;2098:17;2116:1;2098:20;;;;;;;;;;;;;;2071:16;:48::i;:::-;2261:90;;-1:-1:-1;;;2261:90:7;;2019:100;;-1:-1:-1;;;;;;2261:20:7;;;;;:90;;2282:34;;2019:100;;2329:10;;2341:9;;2261:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2261:90:7;;;;;;;;;;;;:::i;:::-;;;2134:854;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2968:5;;;;2134:854;2630:24;2657:7;2682:1;2665:7;:14;:18;2657:27;;;;;;;;;;;;;;-1:-1:-1;;2657:32:7;2630:59;;2732:1;2711:17;:22;2707:74;;2757:5;;;;;2707:74;2829:17;2798;2816:1;2798:20;;;;;;;;;;;;;:49;;;;;2364:498;;-1:-1:-1;2000:3:7;;1964:1034;;;;1264:1740;;;;;;;;;;:::o;4239:2334:28:-;4421:34;4467:40;4484:10;4496;4467:16;:40::i;:::-;4538:24;;;-1:-1:-1;;;;;4592:25:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4592:25:28;-1:-1:-1;4572:45:28;-1:-1:-1;4628:41:28;-1:-1:-1;;;;;4672:24:28;;;:118;;4751:39;4771:6;4779:10;4751:19;:39::i;:::-;4672:118;;;4734:1;4672:118;4628:162;-1:-1:-1;4800:41:28;-1:-1:-1;;;;;4844:24:28;;;:118;;4923:39;4943:6;4951:10;4923:19;:39::i;:::-;4844:118;;;4906:1;4844:118;4800:162;;4977:9;4972:1595;4996:10;4992:1;:14;4972:1595;;;5045:4;-1:-1:-1;;;;;5067:24:28;;5063:1353;;5148:216;5211:18;5252:52;;;5326:17;5344:1;5326:20;;;;;;;;;;;;;;5148:33;:216::i;:::-;5112:17;5130:1;5112:20;;;;;;;;;;;;;5111:253;;;;;;;;;5063:1353;;;-1:-1:-1;;;;;5389:24:28;;5385:1031;;5470:216;5533:18;5574:52;;;5648:17;5666:1;5648:20;;;;;;;5385:1031;5725:15;5782:216;5845:18;5886:52;;;5960:17;5978:1;5960:20;;;;;;;5782:216;5758:240;-1:-1:-1;5758:240:28;-1:-1:-1;6020:12:28;;6016:386;;6093:219;6160:18;-1:-1:-1;;;6283:7:28;6093:33;:219::i;:::-;6057:17;6075:1;6057:20;;;;;;;;;;;;;6056:256;;;;;;;;;6016:386;;;6382:1;6359:17;6377:1;6359:20;;;;;;;;;;;;;:24;;;;;6016:386;5385:1031;;6478:10;6477:11;:40;;;;6492:17;6510:1;6492:20;;;;;;;;;;;;;;6516:1;6492:25;6477:40;6473:84;;;6537:5;;;6473:84;-1:-1:-1;5008:3:28;;4972:1595;;3457:890:20;3654:34;3700:40;3717:10;3729;3700:16;:40::i;:::-;3750:8;3766:7;:18;;;3750:35;;3795:8;3811:3;-1:-1:-1;;;;;3811:7:20;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3853:24;;3795:26;;-1:-1:-1;3853:24:20;-1:-1:-1;;;;;3907:25:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3907:25:20;;3887:45;;3961:3;-1:-1:-1;;;;;3961:7:20;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3947:23:20;:10;-1:-1:-1;;;;;3947:23:20;;;:50;;;;;3988:3;-1:-1:-1;;;;;3988:7:20;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3974:23:20;:10;-1:-1:-1;;;;;3974:23:20;;;3947:50;3943:105;;;4013:24;;;;;3943:105;4063:9;4058:283;4082:10;4078:1;:14;4058:283;;;4113:17;4133:79;4148:7;4157:10;4169;4181:17;4199:1;4181:20;;;;;;;;;;;;;;4203:3;4208;4133:14;:79::i;:::-;4113:99;-1:-1:-1;4231:14:20;4227:58;;4265:5;;;4227:58;4321:9;4298:17;4316:1;4298:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;4094:3:20;;4058:283;;3457:890;;;;;;;:::o;1927:1714:12:-;2120:13;2135:12;2149:34;2195:40;2212:10;2224;2195:16;:40::i;:::-;2266:24;;;-1:-1:-1;;;;;2320:25:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2320:25:12;-1:-1:-1;2372:13:12;;2363:55;;-1:-1:-1;;;2363:55:12;;2300:45;;-1:-1:-1;;;;;;2363:31:12;;;;:55;;2395:10;;2407;;2363:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2356:62;-1:-1:-1;2428:17:12;-1:-1:-1;;;;;2525:18:12;;;2521:420;;-1:-1:-1;2606:4:12;;-1:-1:-1;2571:10:12;2521:420;;;2657:13;;2648:55;;-1:-1:-1;;;2648:55:12;;-1:-1:-1;;;;;2648:31:12;;;;;;:55;;2680:10;;2692;;2648:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2641:62;-1:-1:-1;;;;;;2761:27:12;;2757:108;;2808:42;;;;2757:108;-1:-1:-1;2925:5:12;;-1:-1:-1;2890:10:12;2521:420;3001:4;-1:-1:-1;;;;;2995:27:12;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2990:103;;3040:42;;;;2990:103;3108:9;3103:532;3127:10;3123:1;:14;3103:532;;;3158:17;3178:268;3243:10;3255:4;3261:9;3272:4;:11;;;3232:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3333:10;3345:4;3351:9;3362:4;:11;;;3322:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3412:17;3430:1;3412:20;;;;;;;;;;;;;;3178:36;:268::i;:::-;3158:288;;3483:9;3460:17;3478:1;3460:20;;;;;;;;;;;;;:32;;;;;3560:17;3578:1;3560:20;;;;;;;;;;;;;;3584:1;3560:25;3556:69;;;3605:5;;;3556:69;-1:-1:-1;3139:3:12;;3103:532;;;;1927:1714;;;;;;;;;;:::o;2746:1023:9:-;2993:24;;2926:34;;2993:24;-1:-1:-1;;;;;3047:25:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3047:25:9;;3027:45;;3098:4;-1:-1:-1;;;;;3087:15:9;:4;3092:1;3087:7;;;;;;;;;;;;;;-1:-1:-1;;;;;3087:15:9;;3083:59;;;883:42;3118:4;3123:1;3118:7;;;;;;;;;;;;;:13;-1:-1:-1;;;;;3118:13:9;;;-1:-1:-1;;;;;3118:13:9;;;;;3083:59;3166:4;-1:-1:-1;;;;;3155:15:9;:4;3160:1;3155:7;;;;;;;;;;;;;;-1:-1:-1;;;;;3155:15:9;;3151:59;;;883:42;3186:4;3191:1;3186:7;;;;;;;;;;;;;:13;-1:-1:-1;;;;;3186:13:9;;;-1:-1:-1;;;;;3186:13:9;;;;;3151:59;3225:9;3220:543;3244:10;3240:1;:14;3220:543;;;3289:6;-1:-1:-1;;;;;3279:42:9;;3322:4;3327:1;3322:7;;;;;;;;;;;;;;3331:4;3336:1;3331:7;;;;;;;;;;;;;;3340:17;3358:1;3340:20;;;;;;;;;;;;;;3279:82;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3279:82:9;;;;;;;;-1:-1:-1;;3279:82:9;;;;;;;;;;;;:::i;:::-;;;3275:478;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3733:5;;;3275:478;3458:6;3435:17;3453:1;3435:20;;;;;;;;;;;;;:29;;;;;3540:17;3558:1;3540:20;;;;;;;;;;;;;;3564:1;3540:25;3536:77;;;3589:5;;;3536:77;3362:265;3256:3;;3220:543;;;;2746:1023;;;;;;;:::o;1373:1006:19:-;1556:34;1602:40;1619:10;1631;1602:16;:40::i;:::-;1725:24;;;-1:-1:-1;;;;;1779:25:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1779:25:19;;1759:45;;1820:9;1815:558;1839:10;1835:1;:14;1815:558;;;1899:6;-1:-1:-1;;;;;1890:30:19;;931:5;1944:10;1956;1968:17;1986:1;1968:20;;;;;;;;;;;;;;1890:99;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1890:99:19;;;;;;;;-1:-1:-1;;1890:99:19;;;;;;;;;;;;:::i;:::-;;;1870:493;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2068:6;2045:17;2063:1;2045:20;;;;;;;;;;;;;:29;;;;;2150:17;2168:1;2150:20;;;;;;;;;;;;;;2174:1;2150:25;2146:77;;;2199:5;;;2146:77;2002:235;1851:3;;1815:558;;1213:904:29;1440:24;;1373:34;;1440:24;-1:-1:-1;;;;;1494:25:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1494:25:29;;1474:45;;1534:9;1529:582;1553:10;1549:1;:14;1529:582;;;1607:6;-1:-1:-1;;;;;1588:40:29;;845:5;1654:17;1672:1;1654:20;;;;;;;;;;;;;;1676:4;1588:93;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1588:93:29;;;;;;;;;;;;:::i;:::-;;;1584:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2081:5;;;1584:517;1788:7;1810:1;1796:4;:11;:15;1788:24;;;;;;;;;;;;;;1765:17;1783:1;1765:20;;;;;;;;;;;;;:47;;;;;1888:17;1906:1;1888:20;;;;;;;;;;;;;;1912:1;1888:25;1884:77;;;1937:5;;;1884:77;1682:293;1565:3;;1529:582;;;;1213:904;;;;;;:::o;3303:857:26:-;3520:17;3539:34;3597:30;3617:9;3597:19;:30::i;:::-;3585:42;;3789:30;3822:64;3831:9;3842:7;3851:16;3869;3822:8;:64::i;:::-;3918:24;;3789:97;;-1:-1:-1;3918:24:26;-1:-1:-1;;;;;3972:25:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3972:25:26;;3952:45;;4013:9;4008:146;4032:10;4028:1;:14;4008:146;;;4121:22;4097:17;4115:1;4097:20;;;;;;;;;;;;;;4087:7;:30;4086:57;;;;;;4063:17;4081:1;4063:20;;;;;;;;;;;;;;;;;:80;4044:3;;4008:146;;;;3303:857;;;;;;;;;:::o;309:1371:16:-;550:24;;483:34;;550:24;-1:-1:-1;;;;;604:25:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;604:25:16;;584:45;;644:9;639:1035;663:10;659:1;:14;639:1035;;;703:6;-1:-1:-1;;;;;698:27:16;;733:5;741:4;746:1;741:7;;;;;;;;;;;;;;750:4;755:1;750:7;;;;;;;;;;;;;;698:60;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;698:60:16;;;;;;;;-1:-1:-1;;698:60:16;;;;;;;;;;;;:::i;:::-;;;694:428;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;923:11;900:17;918:1;900:20;;;;;;;;;;;;;;:34;896:86;;;958:5;;;896:86;759:237;1144:6;-1:-1:-1;;;;;1139:25:16;;1172:5;1180:4;1185:1;1180:7;;;;;;;;;;;;;;1189:4;1194:1;1189:7;;;;;;;;;;;;;;1198:17;1216:1;1198:20;;;;;;;;;;;;;;1139:80;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1139:80:16;;;;;;;;-1:-1:-1;;1139:80:16;;;;;;;;;;;;:::i;:::-;;;1135:529;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1360:15;1337:17;1355:1;1337:20;;;;;;;;;;;;;:38;;;;;1451:17;1469:1;1451:20;;;;;;;;;;;;;;1475:1;1451:25;1447:77;;;1500:5;;;;1447:77;1220:318;;675:3;;639:1035;;1722:1075:11;1982:24;;1915:34;;1982:24;-1:-1:-1;;;;;2036:25:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2036:25:11;;2016:45;;2076:9;2071:720;2095:10;2091:1;:14;2071:720;;;2127:15;2144:23;2171:9;:21;;;-1:-1:-1;;;;;2171:32:11;1234:6;2285:9;:35;;;2342:12;2376:10;2408:17;2426:1;2408:20;;;;;;;;;;;;;;2241:205;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2241:205:11;;;;;;;;;;;;;;-1:-1:-1;;;;;2241:205:11;-1:-1:-1;;;;;;2241:205:11;;;;;;;;;;2171:289;;;;2241:205;2171:289;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2126:334;;;;2474:17;2513:10;2509:94;;;2566:10;2555:33;;;;;;;;;;;;:::i;:::-;2543:45;;2509:94;2639:9;2616:17;2634:1;2616:20;;;;;;;;;;;;;:32;;;;;2716:17;2734:1;2716:20;;;;;;;;;;;;;;2740:1;2716:25;2712:69;;;2761:5;;;;;2712:69;-1:-1:-1;;;2107:3:11;;2071:720;;2345:92:32;2418:12;2345:92;:::o;3399:1052:17:-;3648:24;;3557:22;;;;3648:24;-1:-1:-1;;;;;3702:25:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3702:25:17;;3682:45;;3745:31;3763:6;3771:4;3745:17;:31::i;:::-;3737:39;;3790:5;:12;3806:1;3790:17;3786:81;;;3823:33;;;3786:81;3881:9;3876:569;3900:10;3896:1;:14;3876:569;;;3967:6;-1:-1:-1;;;;;3951:36:17;;1466:5;4013:17;4031:1;4013:20;;;;;;;;;;;;;;4035:5;4042:4;3951:96;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3951:96:17;;;;;;;;;;;;:::i;:::-;;;3931:504;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4136:7;4144:1;4136:10;;;;;;;;;;;;;;4113:17;4131:1;4113:20;;;;;;;;;;;;;:33;;;;;4222:17;4240:1;4222:20;;;;;;;;;;;;;;4246:1;4222:25;4218:77;;;4271:5;;;4218:77;4060:249;3912:3;;3876:569;;2259:80:32;2297:7;2323:9;2316:16;;2259:80;:::o;1474:2048:31:-;1663:27;1692:31;1725:34;1775:35;1813:147;1839:7;949:42;1885:4;1903:17;1948:1;1921:17;:24;:28;1903:47;;;;;;;;;;;;;;1813:12;:147::i;:::-;1775:185;;2005:17;:24;-1:-1:-1;;;;;1991:39:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1991:39:31;;1971:59;;2067:17;:24;-1:-1:-1;;;;;2055:37:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2040:52;;2133:17;:24;-1:-1:-1;;;;;2119:39:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2119:39:31;;2102:56;;2174:9;2169:1347;2193:9;:16;2189:1;:20;2169:1347;;;2235:29;2251:9;2261:1;2251:12;;;;;;;;;;;;;;2235:15;:29::i;:::-;2230:77;;2284:8;;2230:77;2321:24;2348:33;2362:4;2368:9;2378:1;2368:12;;;;;;;;;;;;;;2348:13;:33::i;:::-;2485:73;;-1:-1:-1;;;2485:73:31;;2321:60;;-1:-1:-1;2396:27:31;;;;949:42;;2485:32;;:73;;2518:7;;2321:60;;2540:17;;2485:73;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2481:1025;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2638:12;2706:28;2727:6;2706:20;:28::i;:::-;2668:66;;-1:-1:-1;2668:66:31;-1:-1:-1;2668:66:31;-1:-1:-1;2668:66:31;2753:63;;2789:8;;;;;;;2753:63;2839:9;2834:658;2858:10;:17;2854:1;:21;2834:658;;;2908:10;2919:1;2908:13;;;;;;;;;;;;;;2925:1;2908:18;2904:78;;;2954:5;;2904:78;3031:10;3042:1;3031:13;;;;;;;;;;;;;;3008:17;3026:1;3008:20;;;;;;;;;;;;;;:36;3004:470;;;3095:10;3106:1;3095:13;;;;;;;;;;;;;;3072:17;3090:1;3072:20;;;;;;;;;;;;;:36;;;;;3152:11;3134:12;3147:1;3134:15;;;;;;;;;;;;;:29;;;;3209:12;3222:1;3209:15;;;;;;;;;;;;;;3189:14;3204:1;3189:17;;;;;;;;;;;;;:35;;;;;3004:470;;;3281:10;3292:1;3281:13;;;;;;;;;;;;;;3257:17;3275:1;3257:20;;;;;;;;;;;;;;:37;:76;;;;;3318:12;3331:1;3318:15;;;;;;;;;;;;;;3298:14;3313:1;3298:17;;;;;;;;;;;;;;:35;3257:76;3253:221;;;3379:11;3361:12;3374:1;3361:15;;;;;;;;;;;;;:29;;;;3436:12;3449:1;3436:15;;;;;;;;;;;;;;3416:14;3431:1;3416:17;;;;;;;;;;;;;:35;;;;;3253:221;2877:3;;2834:658;;;;2562:944;;2481:1025;2169:1347;;;;2211:3;;2169:1347;;;;1474:2048;;;;;;;;:::o;4149:2241:4:-;4453:24;;4337:34;;4410:11;;4453:24;-1:-1:-1;;;;;4507:25:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4507:25:4;-1:-1:-1;4547:24:4;;-1:-1:-1;;;4547:24:4;;4487:45;;-1:-1:-1;;;;;;4547:12:4;;;;;:24;;4560:10;;4547:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4546:25;:54;;;-1:-1:-1;4576:24:4;;-1:-1:-1;;;4576:24:4;;-1:-1:-1;;;;;4576:12:4;;;;;:24;;4589:10;;4576:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4575:25;4546:54;4542:109;;;4616:24;;;;4542:109;4661:30;;:::i;:::-;4731:27;;-1:-1:-1;;;4731:27:4;;-1:-1:-1;;;;;4731:15:4;;;;;:27;;4747:10;;4731:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4701:57;;4798:27;;-1:-1:-1;;;4798:27:4;;-1:-1:-1;;;;;4798:15:4;;;;;:27;;4814:10;;4798:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4768;;;:57;4864:38;;-1:-1:-1;;;4864:38:4;;-1:-1:-1;;;;;4864:26:4;;;;;:38;;4891:10;;4864:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4835:26;;;;:67;;;;4941:38;-1:-1:-1;;;4941:38:4;;-1:-1:-1;;;;;4941:26:4;;;;;:38;;4968:10;;4941:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4912:9;:26;;:67;;;;;5009:4;-1:-1:-1;;;;;5009:15:4;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4989;;;:37;5042:9;5037:1347;5061:10;5057:1;:14;5037:1347;;;5263:49;5269:9;:27;;;1125:1;1008:8;1118;;;;;;1130:5;1117:18;5263:5;:49::i;:::-;5240:17;5258:1;5240:20;;;;;;;;;;;;;;:72;5236:116;;;5332:5;;5236:116;5385:4;-1:-1:-1;;;;;5385:19:4;;838:5;5450:9;:27;;;5499:9;:26;;;5547:9;:27;;;5596:9;:26;;;5644:17;5662:1;5644:20;;;;;;;;;;;;;;5686:9;:17;;;5385:336;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5385:336:4;;;;;;;;-1:-1:-1;;5385:336:4;;;;;;;;;;;;:::i;:::-;;;5365:1009;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6354:5;;;5365:1009;5948:27;;5942:48;;1069:1;1008:8;1062;;5942:5;:48::i;:::-;5933:6;:57;5929:109;;;6014:5;;;5929:109;6079:6;6056:17;6074:1;6056:20;;;;;;;;;;;;;:29;;;;;6161:17;6179:1;6161:20;;;;;;;;;;;;;;6185:1;6161:25;6157:77;;;6210:5;;;6157:77;5734:514;5073:3;;5037:1347;;3999:2235:31;4187:27;4216:31;4249:34;4299:36;4338:22;4355:4;4338:16;:22::i;:::-;4299:61;;4370:35;4408:155;4434:7;949:42;4480:12;4506:17;4551:1;4524:17;:24;:28;4506:47;;;;;;;4408:155;4370:193;;4608:17;:24;-1:-1:-1;;;;;4594:39:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4594:39:31;;4574:59;;4670:17;:24;-1:-1:-1;;;;;4658:37:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4643:52;;4736:17;:24;-1:-1:-1;;;;;4722:39:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4722:39:31;;4705:56;;4777:9;4772:1456;4796:9;:16;4792:1;:20;4772:1456;;;4838:29;4854:9;4864:1;4854:12;;;;;;;4838:29;4833:77;;4887:8;;4833:77;4924:24;4951:41;4965:12;4979:9;4989:1;4979:12;;;;;;;4951:41;5095:74;;-1:-1:-1;;;5095:74:31;;4924:68;;-1:-1:-1;5007:26:31;;;;949:42;;5095:33;;:74;;5129:7;;4924:68;;5151:17;;5095:74;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5091:1127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5249:12;5316:28;5337:6;5316:20;:28::i;:::-;5279:65;;-1:-1:-1;5279:65:31;-1:-1:-1;5279:65:31;-1:-1:-1;5279:65:31;5363:63;;5399:8;;;;;;;5363:63;5449:9;5444:760;5468:9;:16;5464:1;:20;5444:760;;;5517:9;5527:1;5517:12;;;;;;;;;;;;;;5533:1;5517:17;5513:77;;;5562:5;;5513:77;5616:17;5634:1;5616:20;;;;;;;;;;;;;;5640:1;5616:25;:64;;;;5668:9;5678:1;5668:12;;;;;;;;;;;;;;5645:17;5663:1;5645:20;;;;;;;;;;;;;;:35;5616:64;5612:574;;;5731:9;5741:1;5731:12;;;;;;;;;;;;;;5708:17;5726:1;5708:20;;;;;;;;;;;;;:35;;;;;5787:50;5801:4;5807:29;5823:9;5833:1;5823:12;;;;;;;;;;;;;;5807:15;:29::i;:::-;5787:13;:50::i;:::-;5769:12;5782:1;5769:15;;;;;;;;;;;;;:68;;;;5883:12;5896:1;5883:15;;;;;;;;;;;;;;5863:14;5878:1;5863:17;;;;;;;;;;;;;:35;;;;;5612:574;;;5955:9;5965:1;5955:12;;;;;;;;;;;;;;5931:17;5949:1;5931:20;;;;;;;;;;;;;;:36;:75;;;;;5991:12;6004:1;5991:15;;;;;;;;;;;;;;5971:14;5986:1;5971:17;;;;;;;;;;;;;;:35;5931:75;5927:259;;;6052:50;6066:4;6072:29;6088:9;6098:1;6088:12;;;;;;;6052:50;6034:12;6047:1;6034:15;;;;;;;;;;;;;:68;;;;6148:12;6161:1;6148:15;;;;;;;;;;;;;;6128:14;6143:1;6128:17;;;;;;;;;;;;;:35;;;;;5927:259;5486:3;;5444:760;;;;5173:1045;;5091:1127;4772:1456;;;;4814:3;;4772:1456;;;;3999:2235;;;;;;;;;:::o;2655:595:25:-;2938:256;;;2833:34;2938:256;;;;;;2898:345;;2938:256;3000:28;3011:10;3023:4;3000:28;;;;:::i;:::-;;;;;;;;;;;;;2938:256;;;;3077:10;3089:4;3066:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2938:256;;;;3138:37;2938:256;;;3212:17;2898:22;:345::i;:::-;2879:364;2655:595;-1:-1:-1;;;;;2655:595:25:o;1475:596:18:-;1665:16;1693:40;1710:10;1722;1693:16;:40::i;:::-;1762:8;:18;;;-1:-1:-1;;;;;1748:32:18;:10;-1:-1:-1;;;;;1748:32:18;;:78;;;;-1:-1:-1;1806:19:18;;-1:-1:-1;;;;;1784:42:18;;;;;;1748:78;1744:228;;;-1:-1:-1;1944:17:18;1937:24;;1744:228;1989:75;2012:8;2022:10;2034;2046:17;1989:22;:75::i;5375:881:22:-;5578:47;5670:73;5709:6;5717:15;5734:8;5670:38;:73::i;:::-;5637:106;;5884:9;5879:371;5903:6;:13;5899:1;:17;5879:371;;;5941:30;5972:1;5941:33;;;;;;;;;;;;;;5978:1;5941:38;5937:303;;6035:190;6088:30;6119:1;6088:33;;;;;;;;;;;;;;6143:6;6150:1;6143:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6035:190:22;6186:6;6193:1;6186:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6035:190:22;:31;:190::i;:::-;5999:30;6030:1;5999:33;;;;;;;;;;;;;:226;;;;;5937:303;5918:3;;5879:371;;2460:454:14;2525:32;2601:9;-1:-1:-1;;;;;2583:35:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2569:49;;2633:9;2628:280;2648:21;;;2628:280;;2715:4;2690:11;2702:1;2690:14;;;;;;;;;;;;;;;;;;;:29;;;:22;;:29;2737:9;;2747:1;2737:12;;;;;;;;;;;;;;;;;;:::i;:::-;:24;2733:71;;-1:-1:-1;2733:71:14;;2781:8;;2733:71;2873:4;2884:9;;2894:1;2884:12;;;;;;;;;;;;;;;;;;:::i;:::-;2865:32;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2818:11;2830:1;2818:14;;;;;;;;;;;;;;:22;;2842:11;2854:1;2842:14;;;;;;;;;;;;;;;;;;2817:80;;;;;;;;;2628:280;2671:3;;2628:280;;;;2460:454;;;;:::o;2492:631:18:-;2681:16;2727:8;:18;;;-1:-1:-1;;;;;2713:32:18;:10;-1:-1:-1;;;;;2713:32:18;;:78;;;;-1:-1:-1;2771:19:18;;-1:-1:-1;;;;;2749:42:18;;;;;;2713:78;2709:228;;;-1:-1:-1;2909:17:18;2902:24;;2709:228;3041:75;3064:8;3074:10;3086;3098:17;3041:22;:75::i;944:321:32:-;1023:25;1085:6;:13;-1:-1:-1;;;;;1071:28:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1071:28:32;;1060:39;;1114:9;1109:150;1134:6;:13;1129:1;:18;1109:150;;1195:19;-1:-1:-1;;;;;1182:32:32;:6;1189:1;1182:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1182:32:32;;:66;;1222:26;:6;1229:1;1222:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1222:24:32;;:26::i;:::-;1182:66;;;1217:2;1182:66;1168:80;;:8;1177:1;1168:11;;;;;;;;;;;;;;;;;:80;1149:3;;1109:150;;;;944:321;;;:::o;3260:280:8:-;3456:21;3479;3502:34;3260:280;;;;;;;;:::o;2502:842:0:-;2783:24;;2716:34;;2783:24;-1:-1:-1;;;;;2837:25:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2837:25:0;;2817:45;;2891:15;-1:-1:-1;;;;;2877:29:0;:10;-1:-1:-1;;;;;2877:29:0;;:53;;;;;2924:6;-1:-1:-1;;;;;2910:20:0;:10;-1:-1:-1;;;;;2910:20:0;;2877:53;2873:108;;;2953:17;2946:24;;;;;2873:108;3136:6;-1:-1:-1;;;;;3122:20:0;:10;-1:-1:-1;;;;;3122:20:0;;:53;;;;;3160:15;-1:-1:-1;;;;;3146:29:0;:10;-1:-1:-1;;;;;3146:29:0;;3122:53;3118:220;;;3196:9;3191:99;3215:10;3211:1;:14;3191:99;;;3274:1;3250:17;3268:1;3250:20;;;;;;;;;;;;;;;;;:25;;;;;;;;3227:3;;3191:99;;;;3310:17;3303:24;;;;;3118:220;2502:842;;;;;;;;:::o;1140:704:23:-;1375:16;;;1389:1;1375:16;;;1296:34;1375:16;;;;;1296:34;;;1375:16;1389:1;1375:16;;;;;;;;;;-1:-1:-1;1375:16:23;1342:49;;1420:4;1425:1;1420:7;;;;;;;;;;;;;;1401:13;1415:1;1401:16;;;;;;;;;;;;;:26;-1:-1:-1;;;;;1401:26:23;;;-1:-1:-1;;;;;1401:26:23;;;;;1456:4;1461:1;1456:7;;;;;;;;;;;;;;1437:13;1451:1;1437:16;;;;;;;;-1:-1:-1;;;;;1437:26:23;;;:16;;;;;;;;;;;:26;1532:256;;;;;;;;;1492:345;;1532:256;1594:31;1605:4;1611:13;1594:31;;;;:::i;:::-;;;;;;;;;;;;;1532:256;;;;1674:4;1680;1663:22;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1532:256;;;;1729:40;1532:256;;;1806:17;1492:22;:345::i;:::-;1473:364;;;1140:704;;;;;;:::o;4353:891:20:-;4549:34;4595:40;4612:10;4624;4595:16;:40::i;:::-;4645:8;4661:7;:18;;;4645:35;;4690:8;4706:3;-1:-1:-1;;;;;4706:7:20;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4748:24;;4690:26;;-1:-1:-1;4748:24:20;-1:-1:-1;;;;;4802:25:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4802:25:20;;4782:45;;4855:3;-1:-1:-1;;;;;4855:7:20;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4841:23:20;:10;-1:-1:-1;;;;;4841:23:20;;;:50;;;;;4882:3;-1:-1:-1;;;;;4882:7:20;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4868:23:20;:10;-1:-1:-1;;;;;4868:23:20;;;4841:50;4837:105;;;4907:24;;;;;4837:105;4957:9;4952:286;4976:10;4972:1;:14;4952:286;;;5007:18;5028:78;5042:7;5051:10;5063;5075:17;5093:1;5075:20;;;;;;;;;;;;;;5097:3;5102;5028:13;:78::i;:::-;5007:99;-1:-1:-1;5125:15:20;5121:59;;5160:5;;;5121:59;5217:10;5194:17;5212:1;5194:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;4988:3:20;;4952:286;;853:72:9;883:42;853:72;:::o;1058:575:34:-;1305:24;;1238:34;;1305:24;-1:-1:-1;;;;;1359:25:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1359:25:34;;1339:45;;1399:9;1394:233;1418:10;1414:1;:14;1394:233;;;1472:6;-1:-1:-1;;;;;1472:16:34;;1489:10;1501;1513:17;1531:1;1513:20;;;;;;;;;;;;;;1472:62;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1449:17;1467:1;1449:20;;;;;;;;;;;;;:85;;;;;1552:17;1570:1;1552:20;;;;;;;;;;;;;;1576:1;1552:25;1548:69;;;1597:5;;1548:69;1430:3;;1394:233;;1686:752:16;1938:16;;;1952:1;1938:16;;;1859:34;1938:16;;;;;1859:34;;;1938:16;1952:1;1938:16;;;;;;;;;;-1:-1:-1;1938:16:16;1905:49;;1983:4;1988:1;1983:7;;;;;;;;;;;;;;1964:13;1978:1;1964:16;;;;;;;;;;;;;:26;-1:-1:-1;;;;;1964:26:16;;;-1:-1:-1;;;;;1964:26:16;;;;;2019:4;2024:1;2019:7;;;;;;;;;;;;;;2000:13;2014:1;2000:16;;;;;;;;-1:-1:-1;;;;;2000:26:16;;;:16;;;;;;;;;;;:26;2095:287;;;;;;;;;2055:376;;2095:287;2157:49;2176:6;2185:5;2192:13;2157:49;;;;:::i;:::-;;;;;;;;;;;;;2095:287;;;;2263:6;2272:5;2279:4;2244:40;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2095:287;;;;2328:35;2095:287;;;2400:17;2055:22;:376::i;:::-;2036:395;1686:752;-1:-1:-1;;;;;;1686:752:16:o;887:1957:27:-;1040:23;;:::i;:::-;1065:24;;:::i;:::-;1091:27;1157:10;-1:-1:-1;;;;;1143:25:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1143:25:27;;1130:38;;1178:36;1231:10;-1:-1:-1;;;;;1217:25:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1217:25:27;;1178:64;;1257:9;1252:701;1276:13;:20;1272:1;:24;1252:701;;;1318:15;1335:23;1370:4;-1:-1:-1;;;;;1362:18:27;1381:13;1395:1;1381:16;;;;;;;;;;;;;;1362:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1317:81;;;;1416:10;1412:531;;;1446:24;1473:34;1484:10;1496;1473;:34::i;:::-;1446:61;;1627:19;1660:1;1647:10;:14;1627:35;;;;;;;;;;;;;;1601:7;1622:1;1609:10;:14;1601:23;;;;;;;;;;;;;;:61;1597:332;;;1686:24;;;1732:19;;;:32;;;1686:20;1786:125;1810:10;1806:1;:14;1786:125;;;1878:7;1886:1;1878:10;;;;;;;;;;;;;;1853:19;1873:1;1853:22;;;;;;;;;;;;;;;;;:35;1822:3;;1786:125;;;;1597:332;1412:531;;-1:-1:-1;;1298:3:27;;1252:701;;;;1967:19;2000:1;1987:10;:14;1967:35;;;;;;;;;;;;;;2006:1;1967:40;1963:111;;;2023:40;;;1963:111;2089:9;2084:754;2108:14;:21;2104:1;:25;2084:754;;;2150:52;2163:14;2178:1;2163:17;;;;;;;;;;;;;;2182:19;2150:12;:52::i;:::-;2218:15;2235:23;2270:4;-1:-1:-1;;;;;2262:18:27;2281:14;2296:1;2281:17;;;;;;;;;;;;;;2262:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2217:82;;;;2317:10;2313:515;;;2347:24;2374:34;2385:10;2397;2374;:34::i;:::-;2347:61;;2528:10;2552:1;2539:10;:14;2528:26;;;;;;;;;;;;;;2502:7;2523:1;2510:10;:14;2502:23;;;;;;;;;;;;;;:52;2498:316;;;2578:25;;;2625:20;;;:33;;;2578:21;2680:116;2704:10;2700:1;:14;2680:116;;;2763:7;2771:1;2763:10;;;;;;;;;;;;;;2747;2758:1;2747:13;;;;;;;;;;;;;;;;;:26;2716:3;;2680:116;;;;2498:316;2313:515;;-1:-1:-1;;2131:3:27;;2084:754;;887:1957;;;;;;;;:::o;1709:1081:33:-;1903:11;1916:34;1962:40;1979:10;1991;1962:16;:40::i;:::-;2033:24;;;-1:-1:-1;;;;;2087:25:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2087:25:33;;2067:45;;2282:78;2310:6;2318:10;2330;2342:17;2282:27;:78::i;:::-;2398:18;;;2414:1;2398:18;;;;;;;;;2273:87;;-1:-1:-1;2370:25:33;;2398:18;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2370:46;;2438:61;;;;;;;;2455:10;-1:-1:-1;;;;;2438:61:33;;;;;2471:10;-1:-1:-1;;;;;2438:61:33;;;;;2491:6;2438:61;;;;;2426:6;2433:1;2426:9;;;;;;;;;;;;;:73;;;;2515:9;2510:274;2534:10;2530:1;:14;2510:274;;;2588:6;-1:-1:-1;;;;;2588:20:33;;2609:17;2627:1;2609:20;;;;;;;;;;;;;;2631:6;2588:50;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2588:50:33;;;;;;;;;;;;:::i;:::-;2639:1;2588:53;;;;;;;;;;;;;;2565:17;2583:1;2565:20;;;;;;;;;;;;;:76;;;;;2709:17;2727:1;2709:20;;;;;;;;;;;;;;2733:1;2709:25;2705:69;;;2754:5;;2705:69;2546:3;;2510:274;;3223:1639:11;3465:34;;;;3415;;-1:-1:-1;;;;;;3465:47:11;3461:554;;3663:284;;;;;;;;;3619:385;;3663:284;3729:33;3740:10;3752:9;3729:33;;;;:::i;:::-;;;;;;;;;;;;;3663:284;;;;3815:12;3829:9;3804:35;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3663:284;;;;3887:37;3663:284;;;3969:17;3619:22;:385::i;:::-;3596:408;;;;3461:554;4045:24;;;-1:-1:-1;;;;;4099:25:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4099:25:11;;4079:45;;4139:9;4134:722;4158:10;4154:1;:14;4134:722;;;4190:15;4207:23;4234:9;:21;;;-1:-1:-1;;;;;4234:32:11;1234:6;4348:9;:34;;;4404:12;4438:10;4470:17;4488:1;4470:20;;;;;;;;;;;;;;4304:204;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4304:204:11;;;;;;;;;;;;;;-1:-1:-1;;;;;4304:204:11;-1:-1:-1;;;;;;4304:204:11;;;;;;;;;;4234:288;;;;4304:204;4234:288;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4189:333;;;;4536:18;4576:10;4572:95;;;4630:10;4619:33;;;;;;;;;;;;:::i;:::-;4606:46;;4572:95;4703:10;4680:17;4698:1;4680:20;;;;;;;;;;;;;:33;;;;;4781:17;4799:1;4781:20;;;;;;;;;;;;;;4805:1;4781:25;4777:69;;;4826:5;;;;;4777:69;-1:-1:-1;;;4170:3:11;;4134:722;;1762:1962:4;2067:24;;1951:34;;2024:11;;2067:24;-1:-1:-1;;;;;2121:25:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2121:25:4;-1:-1:-1;2161:24:4;;-1:-1:-1;;;2161:24:4;;2101:45;;-1:-1:-1;;;;;;2161:12:4;;;;;:24;;2174:10;;2161:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2160:25;:54;;;-1:-1:-1;2190:24:4;;-1:-1:-1;;;2190:24:4;;-1:-1:-1;;;;;2190:12:4;;;;;:24;;2203:10;;2190:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2189:25;2160:54;2156:109;;;2230:24;;;;2156:109;2275:30;;:::i;:::-;2345:27;;-1:-1:-1;;;2345:27:4;;-1:-1:-1;;;;;2345:15:4;;;;;:27;;2361:10;;2345:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2315:57;;2412:27;;-1:-1:-1;;;2412:27:4;;-1:-1:-1;;;;;2412:15:4;;;;;:27;;2428:10;;2412:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2382;;;:57;2478:38;;-1:-1:-1;;;2478:38:4;;-1:-1:-1;;;;;2478:26:4;;;;;:38;;2505:10;;2478:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2449:26;;;;:67;;;;2555:38;-1:-1:-1;;;2555:38:4;;-1:-1:-1;;;;;2555:26:4;;;;;:38;;2582:10;;2555:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2526:9;:26;;:67;;;;;2623:4;-1:-1:-1;;;;;2623:15:4;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2603;;;:37;2656:9;2651:1067;2675:10;2671:1;:14;2651:1067;;;2883:27;;2877:48;;1069:1;1008:8;1062;;2877:48;2854:17;2872:1;2854:20;;;;;;;;;;;;;;:71;2850:115;;;2945:5;;2850:115;2998:4;-1:-1:-1;;;;;2998:19:4;;838:5;3063:9;:27;;;3112:9;:26;;;3160:9;:27;;;3209:9;:26;;;3257:17;3275:1;3257:20;;;;;;;;;;;;;;3299:9;:17;;;2998:336;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2998:336:4;;;;;;;;-1:-1:-1;;2998:336:4;;;;;;;;;;;;:::i;:::-;;;2978:730;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3413:6;3390:17;3408:1;3390:20;;;;;;;;;;;;;:29;;;;;3495:17;3513:1;3495:20;;;;;;;;;;;;;;3519:1;3495:25;3491:77;;;3544:5;;;3491:77;3347:235;2687:3;;2651:1067;;6396:964:22;6590:27;;6646:23;;:58;;;;;;;;;:132;;;-1:-1:-1;6747:31:22;6720:23;;:58;;;;;;;;;6646:132;:170;;;-1:-1:-1;6794:17:22;;;;-1:-1:-1;;;;;6794:22:22;;6646:170;:208;;;-1:-1:-1;6832:17:22;;;;-1:-1:-1;;;;;6832:22:22;;6646:208;6629:269;;;-1:-1:-1;6886:1:22;6879:8;;6629:269;6909:36;;:::i;:::-;6947;6985:21;7010:8;-1:-1:-1;;;;;7010:48:22;;7059:5;7066:9;7010:66;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6908:168;;-1:-1:-1;6908:168:22;-1:-1:-1;6908:168:22;-1:-1:-1;7124:30:22;7104:9;:16;;;:50;;;;;;;;;;:83;;;;7171:16;7170:17;7104:83;:136;;;-1:-1:-1;7203:16:22;;-1:-1:-1;;;;;7203:37:22;;7104:136;7087:197;;;7272:1;7265:8;;;;;;;7087:197;-1:-1:-1;;;;;;7316:37:22;;6396:964;-1:-1:-1;;;;;6396:964:22:o;2365:1194:21:-;2569:7;2627:15;2675:8;-1:-1:-1;;;;;2656:34:21;;2691:19;2712;2656:76;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2627:106;-1:-1:-1;;;;;;2796:27:21;;2792:66;;2846:1;2839:8;;;;;2792:66;2867:19;-1:-1:-1;;;;;2889:33:21;;;:144;;2973:60;;-1:-1:-1;;;2973:60:21;;-1:-1:-1;;;;;2973:45:21;;;;;:60;;3027:4;;2973:60;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2889:144;;;2945:4;-1:-1:-1;;;;;2937:21:21;;2889:144;2867:166;;3189:16;3175:11;:30;3171:69;;;3228:1;3221:8;;;;;;3171:69;3265:99;;-1:-1:-1;;;3265:99:21;;-1:-1:-1;;;;;3265:14:21;;;;;931:5;;3265:99;;3305:19;;3326;;3347:16;;3265:99;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3265:99:21;;;;;;;;-1:-1:-1;;3265:99:21;;;;;;;;;;;;:::i;:::-;;;3249:304;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3541:1;3534:8;;;;;;;3249:304;3419:6;-1:-1:-1;3412:13:21;;-1:-1:-1;;3412:13:21;3420:1490:7;3637:34;3683:40;3700:10;3712;3683:16;:40::i;:::-;3775:14;;;;3830:16;;;3844:1;3830:16;;;3800:27;3830:16;;;;;;;;;;;;;;;;;;-1:-1:-1;3830:16:7;3800:46;;3872:10;3856;3867:1;3856:13;;;;;;;;;;;;;:26;-1:-1:-1;;;;;3856:26:7;;;-1:-1:-1;;;;;3856:26:7;;;;;3908:10;3892;3903:1;3892:13;;;;;;;;-1:-1:-1;;;;;3892:26:7;;;:13;;;;;;;;;;;:26;3950:24;;;-1:-1:-1;;;;;4004:25:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4004:25:7;;3984:45;;4039:48;;:::i;:::-;4090:18;:16;:18::i;:::-;4039:69;;4124:9;4119:785;4143:10;4139:1;:14;4119:785;;;4174:49;4226:48;4243:8;4253:17;4271:1;4253:20;;;;;;;4226:48;4411:91;;-1:-1:-1;;;4411:91:7;;4174:100;;-1:-1:-1;;;;;;4411:20:7;;;;;:91;;4432:35;;4174:100;;4480:10;;4492:9;;4411:91;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4411:91:7;;;;;;;;;;;;:::i;:::-;;;4289:605;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4567:21;4591:7;4599:1;4591:10;;;;;;;;;;;;;;4567:34;;4641:1;4623:14;:19;4619:71;;4666:5;;;;;4619:71;4738:14;4707:17;4725:1;4707:20;;;;;;;;;;;;;:46;;;;;4515:253;;-1:-1:-1;4155:3:7;;4119:785;;1988:1147:13;2196:13;2211:12;2225:34;2271:40;2288:10;2300;2271:16;:40::i;:::-;2343:24;;;-1:-1:-1;;;;;2397:25:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2397:25:13;;2377:45;;2452:60;2471:8;2481:6;2489:10;2501;2452:18;:60::i;:::-;2433:79;-1:-1:-1;2433:79:13;-1:-1:-1;;;;;;2526:18:13;;2522:91;;2560:42;;;2522:91;2628:9;2623:506;2647:10;2643:1;:14;2623:506;;;2678:17;2698:242;2765:10;2777:4;2783:8;2754:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2841:10;2853:4;2859:8;2830:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2906:17;2924:1;2906:20;;;;;;;;;;;;;;2698:38;:242::i;:::-;2678:262;;2977:9;2954:17;2972:1;2954:20;;;;;;;;;;;;;:32;;;;;3054:17;3072:1;3054:20;;;;;;;;;;;;;;3078:1;3054:25;3050:69;;;3099:5;;;3050:69;-1:-1:-1;2659:3:13;;2623:506;;;;1988:1147;;;;;;;;;;;:::o;1271:1187:10:-;1536:24;;1469:34;;1536:24;-1:-1:-1;;;;;1590:25:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1590:25:10;;1570:45;;1706:20;1729:6;-1:-1:-1;;;;;1729:25:10;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1706:50;;1766:22;1799:6;-1:-1:-1;;;;;1799:15:10;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1791:26;;1766:51;;1863:6;-1:-1:-1;;;;;1832:38:10;1840:10;-1:-1:-1;;;;;1832:38:10;;1828:624;;;1911:9;1906:219;1930:10;1926:1;:14;1906:219;;;2098:12;2060:14;2054:2;:20;1260:4;2009:17;2027:1;2009:20;;;;;;;;;;;;;;:42;:65;2008:102;;;;;;1965:17;1983:1;1965:20;;;;;;;;;;;;;;;;;:145;1942:3;;1906:219;;1828:624;2176:6;-1:-1:-1;;;;;2145:38:10;2153:10;-1:-1:-1;;;;;2145:38:10;;2141:311;;;2226:9;2221:221;2245:10;2241:1;:14;2221:221;;;2412:14;2406:2;:20;1260:4;2384:42;2347:12;2324:17;2342:1;2324:20;;;;;;;;;;;;;;:35;2323:104;;;;;;2280:17;2298:1;2280:20;;;;;;;;;;;;;;;;;:147;2257:3;;2221:221;;3257:1016:33;3450:11;3463:34;3509:40;3526:10;3538;3509:16;:40::i;:::-;3730:78;3758:6;3766:10;3778;3790:17;3730:27;:78::i;:::-;3721:87;;3839:427;3875:350;;;;;;;;4059:6;4067:61;;;;;;;;4084:10;-1:-1:-1;;;;;4067:61:33;;;;;4100:10;-1:-1:-1;;;;;4067:61:33;;;;;4120:6;4067:61;;;;;4048:81;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3875:350;;;;3944:6;3952:61;;;;;;;;3969:10;-1:-1:-1;;;;;3952:61:33;;;;;3985:10;-1:-1:-1;;;;;3952:61:33;;;;;4005:6;3952:61;;;;;3933:81;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3875:350;;;;4169:41;3875:350;;;4239:17;3839:22;:427::i;:::-;3819:447;;3257:1016;;;;;;;:::o;1179:843:0:-;1461:24;;1394:34;;1461:24;-1:-1:-1;;;;;1515:25:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1515:25:0;;1495:45;;1569:15;-1:-1:-1;;;;;1555:29:0;:10;-1:-1:-1;;;;;1555:29:0;;:53;;;;;1602:6;-1:-1:-1;;;;;1588:20:0;:10;-1:-1:-1;;;;;1588:20:0;;1555:53;1551:108;;;1631:17;1624:24;;;;;1551:108;1814:6;-1:-1:-1;;;;;1800:20:0;:10;-1:-1:-1;;;;;1800:20:0;;:53;;;;;1838:15;-1:-1:-1;;;;;1824:29:0;:10;-1:-1:-1;;;;;1824:29:0;;1800:53;1796:220;;;1874:9;1869:99;1893:10;1889:1;:14;1869:99;;;1952:1;1928:17;1946:1;1928:20;;;;;;;;;;;;;;;;;:25;;;;;;;;1905:3;;1869:99;;1423:936:21;1610:15;1627:34;1673:40;1690:10;1702;1673:16;:40::i;:::-;1744:24;;;-1:-1:-1;;;;;1798:25:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1798:25:21;;1778:45;;1839:9;1834:431;1858:10;1854:1;:14;1834:431;;;1889:17;1909:167;1960:8;1986:10;2014;2042:17;2060:1;2042:20;;;;;;;;;;;;;;1909:33;:167::i;:::-;1889:187;;2113:9;2090:17;2108:1;2090:20;;;;;;;;;;;;;:32;;;;;2190:17;2208:1;2190:20;;;;;;;;;;;;;;2214:1;2190:25;2186:69;;;2235:5;;;2186:69;-1:-1:-1;1870:3:21;;1834:431;;;-1:-1:-1;2293:58:21;;-1:-1:-1;;;2293:58:21;;-1:-1:-1;;;;;2293:34:21;;;;;:58;;2328:10;;2340;;2293:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2275:77;;1423:936;;;;;;;;:::o;2799:605:19:-;3086:262;;;2981:34;3086:262;;;;;;3046:351;;3086:262;3148:30;3159:10;3171:6;3148:30;;;;:::i;:::-;;;;;;;;;;;;;3086:262;;;;3227:10;3239:6;3216:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3086:262;;;;3290:39;3086:262;;;3366:17;3046:22;:351::i;1271:377:32:-;1385:25;1447:6;:13;-1:-1:-1;;;;;1433:28:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1433:28:32;;1422:39;;1476:9;1471:171;1496:6;:13;1491:1;:18;1471:171;;1557:19;-1:-1:-1;;;;;1544:32:32;:6;1551:1;1544:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1544:32:32;;:87;;1597:34;1623:7;1597:6;1604:1;1597:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1597:25:32;;;:34;;;;:::i;:::-;1544:87;;;1579:7;-1:-1:-1;;;;;1579:15:32;;1544:87;1530:8;1539:1;1530:11;;;;;;;;;;;;;;;;;:101;1511:3;;1471:171;;1541:2339:28;1724:34;1770:40;1787:10;1799;1770:16;:40::i;:::-;1841:24;;;-1:-1:-1;;;;;1895:25:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1895:25:28;-1:-1:-1;1875:45:28;-1:-1:-1;1931:41:28;-1:-1:-1;;;;;1975:24:28;;;:118;;2054:39;2074:6;2082:10;2054:19;:39::i;:::-;1975:118;;;2037:1;1975:118;1931:162;-1:-1:-1;2103:41:28;-1:-1:-1;;;;;2147:24:28;;;:118;;2226:39;2246:6;2254:10;2226:19;:39::i;:::-;2147:118;;;2209:1;2147:118;2103:162;;2280:9;2275:1599;2299:10;2295:1;:14;2275:1599;;;2348:4;-1:-1:-1;;;;;2370:24:28;;2366:1357;;2451:215;2514:18;2555:51;;;2628:17;2646:1;2628:20;;;;;;;2451:215;2415:17;2433:1;2415:20;;;;;;;;;;;;;2414:252;;;;;;;;;2366:1357;;;-1:-1:-1;;;;;2691:24:28;;2687:1036;;2772:215;2835:18;2876:51;;;2949:17;2967:1;2949:20;;;;;;;2687:1036;3026:17;3087:215;3150:18;3191:51;;;3264:17;3282:1;3264:20;;;;;;;3087:215;3061:241;-1:-1:-1;3061:241:28;-1:-1:-1;3324:14:28;;3320:389;;3399:220;3466:18;-1:-1:-1;;;3588:9:28;3399:33;:220::i;:::-;3363:17;3381:1;3363:20;;;;;;;;;;;;;3362:257;;;;;;;;;3320:389;;;3689:1;3666:17;3684:1;3666:20;;;;;;;;;;;;;:24;;;;;3320:389;2687:1036;;3785:10;3784:11;:40;;;;3799:17;3817:1;3799:20;;;;;;;;;;;;;;3823:1;3799:25;3784:40;3780:84;;;3844:5;;;3780:84;-1:-1:-1;2311:3:28;;2275:1599;;2468:888:29;2694:24;;2627:34;;2694:24;-1:-1:-1;;;;;2748:25:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2748:25:29;;2728:45;;2788:9;2783:567;2807:10;2803:1;:14;2783:567;;;2861:6;-1:-1:-1;;;;;2842:39:29;;845:5;2907:17;2925:1;2907:20;;;;;;;;;;;;;;2929:4;2842:92;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2842:92:29;;;;;;;;;;;;:::i;:::-;;;2838:502;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3041:7;3049:1;3041:10;;;;;;;;;;;;;;3018:17;3036:1;3018:20;;;;;;;;;;;;;:33;;;;;3127:17;3145:1;3127:20;;;;;;;;;;;;;;3151:1;3127:25;3123:77;;;3176:5;;;3123:77;2935:279;2819:3;;2783:567;;1911:923:26;2129:17;2148:34;2206:30;2226:9;2206:19;:30::i;:::-;2267:24;;2194:42;;-1:-1:-1;2267:24:26;-1:-1:-1;;;;;2321:25:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2321:25:26;-1:-1:-1;2301:45:26;-1:-1:-1;2360:15:26;2356:83;;2391:37;;;2356:83;2472:77;2481:9;2492:17;2510:1;2492:20;;;;;;;;;;;;;;2514:16;2532;2472:8;:77::i;:::-;2449:17;2467:1;2449:20;;;;;;;;;;;;;;;;;:100;2688:1;2671:157;2695:10;2691:1;:14;2671:157;;;2797:17;2815:1;2797:20;;;;;;;;;;;;;;2773:17;2791:1;2773:20;;;;;;;;;;;;;;2750:17;2768:1;2750:20;;;;;;;;;;;;;;:43;2749:68;;;;;;2726:17;2744:1;2726:20;;;;;;;;;;;;;;;;;:91;2707:3;;2671:157;;;;1911:923;;;;;;;;;:::o;1188:1569:5:-;1492:24;;1425:34;;1492:24;-1:-1:-1;;;;;1546:25:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1546:25:5;;1526:45;;1581:48;;:::i;:::-;1632:18;:16;:18::i;:::-;1581:69;;1666:9;1661:1090;1685:10;1681:1;:14;1661:1090;;;1738:17;1756:1;1738:20;;;;;;;;;;;;;;1716:9;1726:1;1716:12;;;;;;;;;;;;;;;;;;:19;;:42;1899:90;;-1:-1:-1;;;1899:90:5;;-1:-1:-1;;;;;1899:20:5;;;;;:90;;1920:34;;1956:9;;1967:10;;1979:9;;1899:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1899:90:5;;;;;;;;;;;;:::i;:::-;;;1772:969;;2721:5;;1772:969;2398:24;2425:7;2450:1;2433:7;:14;:18;2425:27;;;;;;;;;;;;;;-1:-1:-1;;2425:32:5;2398:59;;2500:1;2479:17;:22;2475:74;;2525:5;;;;2475:74;2597:17;2566;2584:1;2566:20;;;;;;;;;;;;;:49;;;;;2002:628;;1697:3;;1661:1090;;3732:999:13;3939:13;3954:12;3968:34;4014:40;4031:10;4043;4014:16;:40::i;:::-;4086:24;;;-1:-1:-1;;;;;4140:25:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4140:25:13;;4120:45;;4194:60;4213:8;4223:6;4231:10;4243;4194:18;:60::i;:::-;4175:79;-1:-1:-1;4175:79:13;-1:-1:-1;;;;;;4268:18:13;;4264:91;;4302:42;;;4264:91;4421:262;;;;;;;;;4385:339;;4421:262;4479:39;4490:10;4502:4;4508:9;;4479:39;;;;:::i;:::-;;;;;;;;;;;;;4421:262;;;;4563:10;4575:4;4581:8;4552:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4421:262;;;;4630:38;4421:262;;;4697:17;4385:22;:339::i;:::-;4365:359;;3732:999;;;;;;;;;;:::o;4400:1225:1:-;4735:24;;4641:25;;;;4735:24;-1:-1:-1;;;;;4789:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4789:25:1;;4769:45;;4849:10;-1:-1:-1;;;;;4835:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4835:25:1;;4824:36;;4903:6;-1:-1:-1;;;;;4889:20:1;:10;-1:-1:-1;;;;;4889:20:1;;:53;;;;;4927:15;-1:-1:-1;;;;;4913:29:1;:10;-1:-1:-1;;;;;4913:29:1;;4889:53;4888:126;;;;4974:15;-1:-1:-1;;;;;4960:29:1;:10;-1:-1:-1;;;;;4960:29:1;;:53;;;;;5007:6;-1:-1:-1;;;;;4993:20:1;:10;-1:-1:-1;;;;;4993:20:1;;4960:53;4871:748;;;5059:17;;-1:-1:-1;;;;;;5094:23:1;;5090:98;;5137:36;;;5090:98;5229:9;5202:13;5253:356;5277:10;5273:1;:14;5253:356;;;5330:6;-1:-1:-1;;;;;5316:20:1;:10;-1:-1:-1;;;;;5316:20:1;;5312:283;;;5374:2;-1:-1:-1;;;;;5374:21:1;;5396:10;5408:17;5426:1;5408:20;;;;;;;;;;;;;;5430:1;5374:58;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5360:8;5369:1;5360:11;;;;;;;;;;;;;:72;;;;;5312:283;;;5475:6;-1:-1:-1;;;;;5461:20:1;:10;-1:-1:-1;;;;;5461:20:1;;5457:138;;;5519:2;-1:-1:-1;;;;;5519:23:1;;5543:10;5555:17;5573:1;5555:20;;;;;;;;;;;;;;5519:57;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5505:8;5514:1;5505:11;;;;;;;;;;;;;:71;;;;;5457:138;5289:3;;5253:356;;;;4871:748;;4400:1225;;;;;;;;;;;:::o;4184:1722:12:-;4376:13;4391:12;4405:34;4451:40;4468:10;4480;4451:16;:40::i;:::-;4522:24;;;-1:-1:-1;;;;;4576:25:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4576:25:12;-1:-1:-1;4719:13:12;;4710:55;;-1:-1:-1;;;4710:55:12;;4556:45;;-1:-1:-1;;;;;;4710:31:12;;;;:55;;4742:10;;4754;;4710:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4703:62;-1:-1:-1;4775:17:12;-1:-1:-1;;;;;4872:18:12;;;4868:485;;-1:-1:-1;4953:4:12;;-1:-1:-1;4918:10:12;4868:485;;;5069:13;;5060:55;;-1:-1:-1;;;5060:55:12;;-1:-1:-1;;;;;5060:31:12;;;;;;:55;;5092:10;;5104;;5060:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5053:62;-1:-1:-1;;;;;;5173:27:12;;5169:108;;5220:42;;;;5169:108;-1:-1:-1;5337:5:12;;-1:-1:-1;5302:10:12;4868:485;5413:4;-1:-1:-1;;;;;5407:27:12;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5402:103;;5452:42;;;;5402:103;5535:364;5571:287;;;;;;;;5640:10;5652:4;5658:9;5669:4;:11;;;5629:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5571:287;;;;5726:10;5738:4;5744:9;5755:4;:11;;;5715:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5571:287;;;;5807:36;5571:287;;;5872:17;5535:22;:364::i;:::-;5515:384;;4184:1722;;;;;;;;;;:::o;2579:1226:1:-;2915:24;;2821:25;;;;2915:24;-1:-1:-1;;;;;2969:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2969:25:1;;2949:45;;3029:10;-1:-1:-1;;;;;3015:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3015:25:1;;3004:36;;3083:6;-1:-1:-1;;;;;3069:20:1;:10;-1:-1:-1;;;;;3069:20:1;;:53;;;;;3107:15;-1:-1:-1;;;;;3093:29:1;:10;-1:-1:-1;;;;;3093:29:1;;3069:53;3068:126;;;;3154:15;-1:-1:-1;;;;;3140:29:1;:10;-1:-1:-1;;;;;3140:29:1;;:53;;;;;3187:6;-1:-1:-1;;;;;3173:20:1;:10;-1:-1:-1;;;;;3173:20:1;;3140:53;3051:748;;;3239:17;;-1:-1:-1;;;;;;3274:23:1;;3270:98;;3317:36;;;3270:98;3409:9;3382:13;3433:356;3457:10;3453:1;:14;3433:356;;;3510:6;-1:-1:-1;;;;;3496:20:1;:10;-1:-1:-1;;;;;3496:20:1;;3492:283;;;3554:2;-1:-1:-1;;;;;3554:21:1;;3576:10;3588:17;3606:1;3588:20;;;;;;;;;;;;;;3610:1;3554:58;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3540:8;3549:1;3540:11;;;;;;;;;;;;;:72;;;;;3492:283;;;3655:6;-1:-1:-1;;;;;3641:20:1;:10;-1:-1:-1;;;;;3641:20:1;;3637:138;;;3699:2;-1:-1:-1;;;;;3699:23:1;;3723:10;3735:17;3753:1;3735:20;;;;;;;;;;;;;;3699:57;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3685:8;3694:1;3685:11;;;;;;;;;;;;;:71;;;;;3637:138;3469:3;;3433:356;;2085:652:34;2331:24;;2421:268;;;2264:34;2421:268;;;;;;2264:34;;2331:24;2385:345;;2421:268;2555:42;2566:6;2574:10;2586;2555:42;;;;:::i;:::-;;;;;;;;;;;;;2421:268;;;;2490:6;2498:10;2510;2479:42;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2421:268;;;;2637:37;2421:268;;;2703:17;2385:22;:345::i;1654:405:32:-;1795:27;1861:6;:13;-1:-1:-1;;;;;1847:28:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1847:28:32;;1834:41;;1890:9;1885:168;1910:6;:13;1905:1;:18;1885:168;;1973:19;-1:-1:-1;;;;;1960:32:32;:6;1967:1;1960:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1960:32:32;;:82;;1999:43;2025:7;2034;1999:6;2006:1;1999:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1999:25:32;;;:43;;;;;:::i;:::-;1960:82;;;1995:1;1960:82;1944:10;1955:1;1944:13;;;;;;;;;;;;;;;;;:98;1925:3;;1885:168;;1430:801:25;1728:24;;1609:34;;1728:24;-1:-1:-1;;;;;1782:25:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1782:25:25;;1762:45;;1823:9;1818:407;1842:10;1838:1;:14;1818:407;;;1900:4;-1:-1:-1;;;;;1893:27:25;;984:5;1944:10;1956;1968:17;1986:1;1968:20;;;;;;;;;;;;;;1893:96;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1893:96:25;;;;;;;;-1:-1:-1;;1893:96:25;;;;;;;;;;;;:::i;:::-;;;1873:342;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2068:6;2045:17;2063:1;2045:20;;;;;;;;;;;;;:29;;;;;2002:87;1854:3;;1818:407;;4034:854:21;4220:15;4237:34;4283:40;4300:10;4312;4283:16;:40::i;:::-;4354:24;;;-1:-1:-1;;;;;4408:25:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4408:25:21;;4388:45;;4464:329;4500:252;;;;;;;;4569:8;4579:10;4558:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4500:252;;;;4635:8;4645:10;4624:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4500:252;;;;4696:41;4500:252;;;4766:17;4464:22;:329::i;:::-;4822:58;;-1:-1:-1;;;4822:58:21;;4444:349;;-1:-1:-1;;;;;;4822:34:21;;;;;:58;;4857:10;;4869;;4822:58;;;:::i;220:914:23:-;444:24;;377:34;;444:24;-1:-1:-1;;;;;498:25:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;498:25:23;;478:45;;538:9;533:595;557:10;553:1;:14;533:595;;;602:4;-1:-1:-1;;;;;592:34:23;;627:4;632:1;627:7;;;;;;;;;;;;;;636:4;641:1;636:7;;;;;;;;;;;;;;645:17;663:1;645:20;;;;;;;;;;;;;;592:74;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;592:74:23;;;;;;;;-1:-1:-1;;592:74:23;;;;;;;;;;;;:::i;:::-;;;588:530;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;807:15;784:17;802:1;784:20;;;;;;;;;;;;;:38;;;;;898:17;916:1;898:20;;;;;;;;;;;;;;922:1;898:25;894:77;;;947:5;;;;894:77;667:318;;569:3;;533:595;;1325:1025:9;1573:24;;1506:34;;1573:24;-1:-1:-1;;;;;1627:25:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1627:25:9;;1607:45;;1678:4;-1:-1:-1;;;;;1667:15:9;:4;1672:1;1667:7;;;;;;;;;;;;;;-1:-1:-1;;;;;1667:15:9;;1663:59;;;883:42;1698:4;1703:1;1698:7;;;;;;;;;;;;;:13;-1:-1:-1;;;;;1698:13:9;;;-1:-1:-1;;;;;1698:13:9;;;;;1663:59;1746:4;-1:-1:-1;;;;;1735:15:9;:4;1740:1;1735:7;;;;;;;;;;;;;;-1:-1:-1;;;;;1735:15:9;;1731:59;;;883:42;1766:4;1771:1;1766:7;;;;;;;;;;;;;:13;-1:-1:-1;;;;;1766:13:9;;;-1:-1:-1;;;;;1766:13:9;;;;;1731:59;1805:9;1800:544;1824:10;1820:1;:14;1800:544;;;1869:6;-1:-1:-1;;;;;1859:43:9;;1903:4;1908:1;1903:7;;;;;;;;;;;;;;1912:4;1917:1;1912:7;;;;;;;;;;;;;;1921:17;1939:1;1921:20;;;;;;;;;;;;;;1859:83;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1859:83:9;;;;;;;;-1:-1:-1;;1859:83:9;;;;;;;;;;;;:::i;:::-;;;1855:479;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2039:6;2016:17;2034:1;2016:20;;;;;;;;;;;;;:29;;;;;2121:17;2139:1;2121:20;;;;;;;;;;;;;;2145:1;2121:25;2117:77;;;2170:5;;;2117:77;1943:265;1836:3;;1800:544;;2850:2340:27;3002:23;;:::i;:::-;3027:24;;:::i;:::-;3053:28;3121:10;-1:-1:-1;;;;;3107:25:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3107:25:27;;3093:39;;3147:9;3142:94;3166:10;3162:1;:14;3142:94;;;-1:-1:-1;;3197:11:27;3209:1;3197:14;;;;;;;;;;;;;;;;;:28;3178:3;;3142:94;;;;3246:36;3299:10;-1:-1:-1;;;;;3285:25:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3285:25:27;;3246:64;;3325:9;3320:102;3344:10;3340:1;:14;3320:102;;;-1:-1:-1;;3375:19:27;3395:1;3375:22;;;;;;;;;;;;;;;;;:36;3356:3;;3320:102;;;;3437:9;3432:782;3456:14;:21;3452:1;:25;3432:782;;;3499:15;3516:23;3551:4;-1:-1:-1;;;;;3543:18:27;3562:14;3577:1;3562:17;;;;;;;;;;;;;;3543:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3498:82;;;;3598:10;3594:610;;;3628:24;3655:34;3666:10;3678;3655;:34::i;:::-;3628:61;;3707:21;3731:7;3752:1;3739:10;:14;3731:23;;;;;;;;;;;;;;3707:47;;3865:1;3849:13;:17;:72;;;;;3886:19;3919:1;3906:10;:14;3886:35;;;;;;;;;;;;;;3870:13;:51;3849:72;3845:345;;;3945:25;;;3992:20;;;:33;;;3945:21;4047:125;4071:10;4067:1;:14;4047:125;;;4139:7;4147:1;4139:10;;;;;;;;;;;;;;4114:19;4134:1;4114:22;;;;;;;;;;;;;;;;;:35;4083:3;;4047:125;;;;3845:345;3594:610;;;-1:-1:-1;;3479:3:27;;3432:782;;;;-1:-1:-1;;4228:19:27;4261:1;4248:10;:14;4228:35;;;;;;;;;;;;;;:50;4224:122;;;4294:41;;;4224:122;4361:9;4356:828;4381:13;:20;4376:1;:25;4356:828;;4422:51;4435:13;4449:1;4435:16;;;;;;;4422:51;4488:15;4505:23;4540:4;-1:-1:-1;;;;;4532:18:27;4551:13;4565:1;4551:16;;;;;;;;;;;;;;4532:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4487:81;;;;4586:10;4582:592;;;4616:24;4643:34;4654:10;4666;4643;:34::i;:::-;4616:61;;4695:21;4719:7;4740:1;4727:10;:14;4719:23;;;;;;;;;;;;;;4695:47;;4853:1;4837:13;:17;:64;;;;;4874:11;4899:1;4886:10;:14;4874:27;;;;;;;;;;;;;;4858:13;:43;4837:64;4833:327;;;4925:24;;;4971:19;;;:32;;;4925:20;5025:117;5049:10;5045:1;:14;5025:117;;;5109:7;5117:1;5109:10;;;;;;;;;;;;;;5092:11;5104:1;5092:14;;;;;;;;;;;;;;;;;:27;5061:3;;5025:117;;;;4833:327;4582:592;;;-1:-1:-1;;4403:3:27;;4356:828;;4457:1084:17;4545:22;4579:24;4639:6;-1:-1:-1;;;;;4623:31:17;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4579:78;;4703:1;4689:4;:11;:15;-1:-1:-1;;;;;4675:30:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4675:30:17;;4667:38;;4720:9;4715:820;4739:5;:12;4735:1;:16;4715:820;;;4806:25;4849:7;-1:-1:-1;;;;;4849:16:17;;1466:5;4891:4;4896:1;4891:7;;;;;;;;;;;;;;4900:4;4905:1;4909;4905:5;4900:11;;;;;;;;;;;;;;4849:63;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4849:63:17;;;;;;;;;;;;:::i;:::-;;;4845:680;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5508:1:17;;5494:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5494:16:17;;5487:23;;;;;;;;4845:680;4971:15;;4967:90;;5036:1;;5022:16;;4967:90;5075:17;5119:9;5114:319;5138:8;:15;5134:1;:19;5114:319;;;5182:19;5218:8;5227:1;5218:11;;;;;;;;;;;;;;-1:-1:-1;;;;;5204:38:17;;:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5182:62;;5284:9;5270:11;:23;5266:149;;;5333:11;5321:23;;5381:8;5390:1;5381:11;;;;;;;;;;;;;;5370:5;5376:1;5370:8;;;;;;;;;;;;;:22;-1:-1:-1;;;;;5370:22:17;;;-1:-1:-1;;;;;5370:22:17;;;;;5266:149;-1:-1:-1;5155:3:17;;5114:319;;;;4913:534;;-1:-1:-1;4753:3:17;;4715:820;;;;4457:1084;;;;;;:::o;3546:1210:8:-;3737:21;3760;3809:4;:13;;;-1:-1:-1;;;;;3809:24:8;;3834:4;:13;;;-1:-1:-1;;;;;3834:28:8;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3809:56;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3793:72;;3879:4;:10;;;:17;3900:1;3879:22;3875:81;;;3917:28;;3875:81;3965:23;4073:9;4068:682;4092:4;:10;;;:17;4088:1;:21;4068:682;;;4157:1;4134:4;:10;;;4145:1;4134:13;;;;;;;;;;;;;;:20;:24;4130:71;;;4178:8;;4130:71;4250:13;-1:-1:-1;;;;;4235:40:8;;830:5;4319:4;:10;;;4330:1;4319:13;;;;;;;;;;;;;;4354:17;4399:1;4372:17;:24;:28;4354:47;;;;;;;;;;;;;;4235:184;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4235:184:8;;;;;;;;-1:-1:-1;;4235:184:8;;;;;;;;;;;;:::i;:::-;;;4215:525;;4717:8;;4215:525;4488:15;4479:6;:24;4475:137;;;4545:6;4527:24;;4580:4;:10;;;4591:1;4580:13;;;;;;;;;;;;;;4573:20;;4475:137;4432:194;4215:525;4111:3;;4068:682;;753:350:6;804:38;;:::i;:::-;-1:-1:-1;873:223:6;;;;;;;;939:4;873:223;;;-1:-1:-1;873:223:6;;;;;;;;;;;;;;;;;753:350;:::o;1443:171:24:-;1555:10;-1:-1:-1;;;;;1541:24:24;:10;-1:-1:-1;;;;;1541:24:24;;;1533:74;;;;-1:-1:-1;;;1533:74:24;;;;;;;:::i;:::-;;;;;;;;;1443:171;;:::o;4916:532:7:-;5158:39;;;5195:1;5158:39;;;;;;;;;5055;;;;5158;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5106:91;;5222:192;;;;;;;;5275:8;:15;;;5222:192;;;;5318:1;5222:192;;;;5348:1;5222:192;;;;5371:6;5222:192;;;;;;;;;;;;;;;;;;;5207:9;5217:1;5207:12;;;;;;;;;;;;;;;;;:207;5432:9;4916:532;-1:-1:-1;;;4916:532:7:o;7954:262:28:-;8150:57;;-1:-1:-1;;;8150:57:28;;8065:31;;-1:-1:-1;;;;;8150:43:28;;;;;:57;;8194:12;;8150:57;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7031:628::-;7204:20;;-1:-1:-1;;;;;7257:36:28;;7253:100;;7309:33;;7253:100;7362:23;7422:22;-1:-1:-1;;;;;7422:33:28;1113:5;7514:16;7532:11;7491:53;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7491:53:28;;;;;;;;;;;;;;-1:-1:-1;;;;;7491:53:28;-1:-1:-1;;;;;;7491:53:28;;;;;;;;;;7422:132;;;;7491:53;7422:132;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7395:159:28;;-1:-1:-1;7395:159:28;-1:-1:-1;7564:89:28;;;;7620:10;7609:33;;;;;;;;;;;;:::i;:::-;7594:48;;7564:89;7031:628;;;;;;;:::o;5250:2156:20:-;5465:7;5485:22;5513:24;5539:22;5565:3;-1:-1:-1;;;;;5565:8:20;;5587:7;:21;;;5565:53;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5484:134;;;;;;;;5628:24;5663:3;5628:39;;5696:7;:23;;;-1:-1:-1;;;;;5682:37:20;:10;-1:-1:-1;;;;;5682:37:20;;5678:1703;;;5893:29;5925:30;:16;5950:4;5925:24;:30::i;:::-;5893:62;-1:-1:-1;5970:25:20;5998:58;3176:8;5998:45;:14;5893:62;5998:22;:45::i;:::-;:53;;:58::i;:::-;5970:86;;6134:16;6113:17;:37;6109:84;;6177:1;6170:8;;;;;;;;;;6109:84;6207:16;6226:53;3045:8;6226:40;6256:3;-1:-1:-1;;;;;6256:7:20;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6226:21;;:29;:40::i;:::-;:48;;:53::i;:::-;6207:72;-1:-1:-1;6293:29:20;6325:39;:21;6207:72;6325:29;:39::i;:::-;6293:71;-1:-1:-1;6379:28:20;;-1:-1:-1;;;;;;;;6379:28:20;5678:1703;6442:7;:23;;;-1:-1:-1;;;;;6428:37:20;:10;-1:-1:-1;;;;;6428:37:20;;6424:957;;;6677:16;6711:38;;;6707:85;;;6776:1;6769:8;;;;;;;;;6707:85;6805:25;6833:58;3176:8;6833:45;:14;6856:21;6833:22;:45::i;:58::-;6805:86;;6991:14;6970:17;:35;6966:82;;7032:1;7025:8;;;;;;;;;;6966:82;7062:23;7088;7100:3;-1:-1:-1;;;;;7100:8:20;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3045:8;;7088:11;:23::i;:::-;7062:49;-1:-1:-1;7165:43:20;7211:102;7062:49;7211:47;:21;7241:16;7211:29;:47::i;6424:957::-;-1:-1:-1;7398:1:20;;5250:2156;-1:-1:-1;;;;;;;;;;5250:2156:20:o;5912:1250:12:-;6094:7;6114:18;6134:12;6148:17;6167:14;6209;6185:98;;;;;;;;;;;;:::i;:::-;6113:170;;;;;;;;6404:9;-1:-1:-1;;;;;6390:23:12;:10;-1:-1:-1;;;;;6390:23:12;;6386:770;;;6502:62;;-1:-1:-1;;;6502:62:12;;-1:-1:-1;;;;;6502:30:12;;;;;1282:5;;6502:62;;6553:10;;6502:62;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6502:62:12;;;;;;;;-1:-1:-1;;6502:62:12;;;;;;;;;;;;:::i;:::-;;;6498:267;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6749:1;6742:8;;;;;;;;;6498:267;6615:6;-1:-1:-1;6608:13:12;;-1:-1:-1;;;;6608:13:12;6386:770;6868:77;;-1:-1:-1;;;6868:77:12;;-1:-1:-1;;;;;6868:39:12;;;;;1282:5;;6868:77;;6928:4;;6934:10;;6868:77;;;:::i;4978:181:26:-;5066:7;5109:9;-1:-1:-1;;;;;5109:16:26;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5092:47:26;;:60;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;4166:806::-;4362:22;4396:20;4419:23;4432:9;4419:12;:23::i;:::-;4396:46;-1:-1:-1;4511:9:26;4555:1;4544:12;;4540:426;;;4595:156;;-1:-1:-1;;;4595:156:26;;-1:-1:-1;;;;;4595:37:26;;;;;:156;;4650:12;;4680:17;;4715:22;;4595:156;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4572:179:26;;-1:-1:-1;4540:426:26;;-1:-1:-1;4540:426:26;;4805:150;;-1:-1:-1;;;4805:150:26;;-1:-1:-1;;;;;4805:31:26;;;;;:150;;4854:12;;4884:17;;4919:22;;4805:150;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4782:173:26;;4166:806;-1:-1:-1;;;;;;;;4166:806:26:o;2788:551:30:-;2984:35;3035:4;:11;3050:1;3035:16;3031:115;;;3074:61;3095:7;3104:11;3117:4;3123:11;3074:20;:61::i;3031:115::-;3159:4;:11;3174:1;3159:16;3155:112;;;3198:58;3216:7;3225:11;3238:4;3244:11;3198:17;:58::i;3155:112::-;3276:56;;-1:-1:-1;;;3276:56:30;;;;;;;:::i;8721:283::-;8804:4;;8820:157;8844:9;:16;8840:1;:20;8820:157;;;8918:1;-1:-1:-1;;;;;8885:35:30;8893:9;8903:1;8893:12;;;;;;;;;;;;;;-1:-1:-1;;;;;8885:35:30;;8881:86;;;8947:5;8940:12;;;;;8881:86;8862:3;;8820:157;;;-1:-1:-1;8993:4:30;;8721:283;-1:-1:-1;;8721:283:30:o;922:1073::-;1059:24;1136:1;1116:9;:16;:21;;:64;;;;;1161:8;:15;1179:1;1161:19;1141:9;:16;:39;1116:64;1095:147;;;;-1:-1:-1;;;1095:147:30;;;;;;;:::i;:::-;1431:8;:15;1449:1;1431:19;1407:9;:16;1426:2;1407:21;:43;-1:-1:-1;;;;;1397:54:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1397:54:30;-1:-1:-1;1383:68:30;-1:-1:-1;1525:2:30;1508:20;;1461:9;1547:442;1571:9;:16;1567:1;:20;1547:442;;;1612:5;;1608:211;;1637:14;1654:8;1667:1;1663;:5;1654:15;;;;;;;;;;;;;;-1:-1:-1;;;;;1654:19:30;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1738:3;1734:17;1724:28;;-1:-1:-1;1785:1:30;1778:9;;;;1702:103;1832:20;1855:9;1865:1;1855:12;;;;;;;;;;;;;;;;;;1922:2;1918:14;1908:25;;-1:-1:-1;1962:2:30;1955:10;;;;1589:3;;1547:442;;9010:721;9269:2;9251:21;;9245:28;9104:12;;9118:24;;;;-1:-1:-1;;;;;;9297:60:30;;-1:-1:-1;;;9297:60:30;9293:128;;9381:5;9373:37;;;;;9293:128;9472:19;;-1:-1:-1;;9468:27:30;;9493:1;9524:20;;9557:28;;;9524:20;9630:48;;;;;;;;;;:::i;:::-;9696:4;;-1:-1:-1;9604:74:30;;-1:-1:-1;9604:74:30;-1:-1:-1;;9010:721:30;;;;;;:::o;6759:318:4:-;6818:9;6852:5;;;6871:6;;;;;:21;;;6891:1;6886;6881:2;:6;;;;;;:11;;6871:21;6867:60;;;6915:1;6908:8;;;;;6867:60;6955:8;6949:15;;6978:7;;;6974:46;;;7008:1;7001:8;;;;;;6974:46;1008:8;7042:9;;;;-1:-1:-1;;;;6759:318:4:o;2001:328:30:-;2099:32;2175:9;:16;-1:-1:-1;;;;;2154:38:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2154:38:30;;2143:49;;2207:9;2202:121;2226:9;:16;2222:1;:20;2202:121;;;2277:9;2310:1;2306;2287:9;:16;:20;:24;2277:35;;;;;;;;;;;;;;2263:8;2272:1;2263:11;;;;;;;;-1:-1:-1;;;;;2263:49:30;;;:11;;;;;;;;;;;:49;2244:3;;2202:121;;2335:322;2431:32;2507:8;:15;-1:-1:-1;;;;;2486:37:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2486:37:30;;2475:48;;2538:9;2533:118;2557:8;:15;2553:1;:19;2533:118;;;2607:8;2638:1;2634;2616:8;:15;:19;:23;2607:33;;;;;;;;;;;;;;2593:8;2602:1;2593:11;;;;;;;;-1:-1:-1;;;;;2593:47:30;;;:11;;;;;;;;;;;:47;2574:3;;2533:118;;3256:683:25;3433:17;3463:18;3483:12;3510:14;3499:46;;;;;;;;;;;;:::i;:::-;3462:83;;;;3555:18;3587:14;3576:37;;;;;;;;;;;;:::i;:::-;3555:58;-1:-1:-1;3628:4:25;:25;3654:4;3660:10;3555:58;3684:31;3704:10;3684:19;:31::i;:::-;3628:88;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3628:88:25;;;;;;;;;;;;:::i;:::-;;;3624:309;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3921:1;3914:8;;;;;;;;3624:309;3795:7;3803:1;3795:10;;;;;;;;;;;;;;3788:17;;;;;;;;1652:2704:2;1802:34;1882:17;:24;-1:-1:-1;;;;;1868:39:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1868:39:2;;1848:59;;1921:17;:24;1949:1;1921:29;1917:84;;;1966:24;;1917:84;2011:18;2032:89;2058:4;:19;;;2079:4;:19;;;2100:17;2118:1;2100:20;;;;;;;;;;;;;;2032:4;:25;;;:89;;:::i;:::-;2011:110;-1:-1:-1;2135:15:2;2131:70;;2166:24;;;2131:70;2211:17;2231:79;2257:4;:19;;;2278:4;:19;;;2299:10;2231:4;:25;;;:79;;:::i;:::-;2211:99;-1:-1:-1;2324:14:2;2320:69;;2354:24;;;;2320:69;2404:9;2399:1951;2423:17;:24;2419:1;:28;2399:1951;;;2468:11;2502:12;2497:1394;1644:1;2520:4;:37;2497:1394;;;2693:70;2719:17;2737:1;2719:20;;;;;;;;;;;;;;2741:9;2752:10;2693:25;:70::i;:::-;2680:83;-1:-1:-1;2785:15:2;2781:67;;2824:5;;2781:67;2878:202;2926:59;1339:3;3052:10;2878:25;:202::i;:::-;2865:215;-1:-1:-1;3102:15:2;3098:67;;3141:5;;3098:67;3182:18;3203:79;3229:4;:19;;;3250:4;:19;;;3271:10;3203:4;:25;;;:79;;:::i;:::-;3182:100;-1:-1:-1;3304:15:2;3300:67;;3343:5;;;3300:67;3500:10;3488:22;;3602:17;3620:1;3602:20;;;;;;;;;;;;;;3589:9;:33;3585:292;;3716:17;3734:1;3716:20;;;;;;;;;;;;;;1339:3;3666:17;3684:1;3666:20;;;;;;;;;;;;;;3654:9;:32;3653:59;3652:84;;;;;;3646:90;;1497:8;3762:3;:41;3758:101;;3831:5;;;3758:101;-1:-1:-1;2559:6:2;;2497:1394;;;-1:-1:-1;3908:8:2;;;:52;;;1497:8;3920:3;:40;3908:52;3904:96;;;3980:5;;;3904:96;4269:70;4295:17;4313:1;4295:20;;;;;;;;;;;;;;4317:9;4328:10;4269:25;:70::i;:::-;4246:17;4264:1;4246:20;;;;;;;;;;;;;;;;;:93;-1:-1:-1;2449:3:2;;2399:1951;;;;1652:2704;;;;;;:::o;3129:1048:18:-;3376:20;;;;3428:24;;3323:16;;3376:20;3323:16;3428:24;-1:-1:-1;;;;;3499:25:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3499:25:18;;3462:62;;3553:8;:19;;;-1:-1:-1;;;;;3539:33:18;:10;-1:-1:-1;;;;;3539:33:18;;:71;;;;;3590:8;:20;;;-1:-1:-1;;;;;3576:34:18;:10;-1:-1:-1;;;;;3576:34:18;;3539:71;3535:281;;;3631:9;3626:142;3650:10;3646:1;:14;3626:142;;;3708:6;-1:-1:-1;;;;;3708:23:18;;3732:17;3750:1;3732:20;;;;;;;;;;;;;;3708:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3685:17;3703:1;3685:20;;;;;;;;;;;;;;;;;:68;3662:3;;3626:142;;;-1:-1:-1;3788:17:18;-1:-1:-1;3781:24:18;;-1:-1:-1;;3781:24:18;3535:281;3844:8;:20;;;-1:-1:-1;;;;;3830:34:18;:10;-1:-1:-1;;;;;3830:34:18;;:71;;;;-1:-1:-1;3882:19:18;;-1:-1:-1;;;;;3868:33:18;;;;;;3830:71;3826:281;;;3922:9;3917:142;3941:10;3937:1;:14;3917:142;;;3999:6;-1:-1:-1;;;;;3999:23:18;;4023:17;4041:1;4023:20;;;;;;;;;;;;;;3999:45;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3976:17;3994:1;3976:20;;;;;;;;;;;;;;;;;:68;3953:3;;3917:142;;3826:281;4153:17;3129:1048;-1:-1:-1;;;;;;;3129:1048:18:o;3482:491:52:-;3621:21;3857:78;3923:11;3857:57;3891:22;3923:11;3911:1;3891:19;:22::i;:::-;3857:25;:9;3875:6;3857:17;:25::i;:::-;:33;;:57::i;3507:363:50:-;3576:19;3623:2;3607:18;;3636:15;3653:23;3688:5;-1:-1:-1;;;;;3680:25:50;3706:18;;;;;;;;;;;;;-1:-1:-1;;;3706:18:50;;;3680:45;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3635:90;;;;3739:10;:37;;;;;3774:2;3753:10;:17;:23;;3739:37;3735:129;;;3814:38;3838:10;3850:1;3814:23;:38::i;:::-;3792:61;;3735:129;3507:363;;;;;:::o;1850:670:23:-;2030:17;2060:13;2075:22;2112:14;2101:48;;;;;;;;;;;;:::i;:::-;2059:90;;-1:-1:-1;2059:90:23;-1:-1:-1;2161:12:23;2175:23;2210:4;-1:-1:-1;;;2059:90:23;;2316:31;2336:10;2316:19;:31::i;:::-;2240:108;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2240:108:23;;;;;;;;;;;;;;-1:-1:-1;;;;;2240:108:23;-1:-1:-1;;;;;;2240:108:23;;;;;;;;;;2202:156;;;;2240:108;2202:156;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2160:198;;;;2373:7;2368:47;;2403:1;2396:8;;;;;;;;2368:47;2486:10;2475:35;;;;;;;;;;;;:::i;:::-;2511:1;2475:38;;;;;;;;;;;;;;2468:45;;;;;;1850:670;;;;;:::o;7412:2130:20:-;7626:7;7646:22;7674:24;7700:22;7726:3;-1:-1:-1;;;;;7726:8:20;;7748:7;:21;;;7726:53;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7645:134;;;;;;;;7808:7;:23;;;-1:-1:-1;;;;;7794:37:20;:10;-1:-1:-1;;;;;7794:37:20;;7790:1727;;;7945:29;7977:16;7945:48;;8007:23;8033:22;8045:3;-1:-1:-1;;;;;8045:7:20;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3045:8;;8033:11;:22::i;:::-;8007:48;-1:-1:-1;8108:29:20;8140:59;8007:48;8140:34;:21;3045:8;8140:29;:34::i;:59::-;8108:91;-1:-1:-1;8213:25:20;8241:58;3176:8;8241:45;:14;8108:91;8241:22;:45::i;:58::-;8213:86;;8377:16;8356:17;:37;8352:84;;8420:1;8413:8;;;;;;;;;;;8352:84;8450:43;8496:48;8542:1;8497:35;:21;8527:4;8497:29;:35::i;7790:1727::-;8704:7;:23;;;-1:-1:-1;;;;;8690:37:20;:10;-1:-1:-1;;;;;8690:37:20;;8686:831;;;8841:29;8873:30;:16;8898:4;8873:24;:30::i;:::-;8841:62;;8917:26;8946:23;8958:3;-1:-1:-1;;;;;8958:8:20;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8946:23;8917:52;-1:-1:-1;9023:29:20;9055:62;3045:8;9055:49;:21;8917:52;9055:29;:49::i;:62::-;9023:94;;9159:14;9135:21;:38;9131:85;;;9200:1;9193:8;;;;;;;;;;9131:85;9229:25;9257:58;3176:8;9257:45;:14;9280:21;9257:22;:45::i;:58::-;9229:86;;9407:14;9386:17;:35;9382:82;;9448:1;9441:8;;;;;;;;;;;9382:82;-1:-1:-1;9485:21:20;-1:-1:-1;9478:28:20;;-1:-1:-1;;;;;9478:28:20;8686:831;-1:-1:-1;9534:1:20;;7412:2130;-1:-1:-1;;;;;;;;;7412:2130:20:o;2444:825:16:-;2619:17;2649:15;2666:14;2682:22;2732:14;2708:91;;;;;;;;;;;;:::i;:::-;2648:151;;-1:-1:-1;2648:151:16;-1:-1:-1;2648:151:16;-1:-1:-1;2811:12:16;2825:23;2860:4;-1:-1:-1;;;2648:151:16;;;3052:31;3072:10;3052:19;:31::i;:::-;2890:207;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2890:207:16;;;;;;;;;;;;;;-1:-1:-1;;;;;2890:207:16;-1:-1:-1;;;;;;2890:207:16;;;;;;;;;;2852:255;;;;2890:207;2852:255;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2810:297;;;;3122:7;3117:47;;3152:1;3145:8;;;;;;;;;3117:47;3235:10;3224:35;;;;;;;;;;;;:::i;:::-;3260:1;3224:38;;;;;;;;;;;;;;3217:45;;;;;;;2444:825;;;;;:::o;5328:407:27:-;5456:11;;5412:16;;5492:2;5487:1;5471:17;;5470:24;5456:38;;;5412:16;5597:22;5456:4;:38;:11;5597:10;:22::i;:::-;5574:45;-1:-1:-1;5629:29:27;5574:45;5650:1;5653:4;5629:20;:29::i;:::-;5707:7;5696:32;;;;;;;;;;;;:::i;5833:352::-;5928:9;5923:256;5947:7;:14;5943:1;:18;5923:256;;;5982:13;6039:1;6035;6018:7;:14;:18;:22;6012:2;:29;5998:4;:11;:43;5982:59;;6055:14;6072:7;6080:1;6072:10;;;;;;;;;;;;;;;;;;6130:16;;;6123:32;;;;-1:-1:-1;5963:3:27;;5923:256;;;;5833:352;;:::o;5180:375:33:-;5423:24;;5379:11;;-1:-1:-1;;;;;5470:19:33;;;5423:17;-1:-1:-1;;5508:14:33;;5490:33;;;;;;;;;;;;;5525:10;5537;5470:78;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;4868:863:11:-;5045:17;5075:20;5097:26;;:::i;:::-;5138:14;5127:47;;;;;;;;;;;;:::i;:::-;5074:100;;;;5184:20;5218:14;5207:36;;;;;;;;;;;;:::i;:::-;5184:59;-1:-1:-1;5254:12:11;5268:23;5303:4;-1:-1:-1;;;5425:9:11;5452:13;5184:59;5514:31;5534:10;5514:19;:31::i;:::-;5333:226;;;;;;;;;;;:::i;5809:808:13:-;5972:15;5989:13;6107:25;6151:8;-1:-1:-1;;;;;6135:37:13;;6173:10;6185;6135:61;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6135:61:13;;;;;;;;;;;;:::i;:::-;6107:89;;6217:4;6206:15;;6235:8;:15;6254:1;6235:20;6231:251;;;6380:61;;-1:-1:-1;;;6380:61:13;;-1:-1:-1;;;;;6380:37:13;;;;;:61;;6418:10;;6430;;6380:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6380:61:13;;;;;;;;;;;;:::i;:::-;6369:72;;6466:5;6455:16;;6231:251;6506:8;:15;6496:6;:25;6492:82;;6553:1;6557:5;6537:26;;;;;;;6492:82;6594:8;6603:6;6594:16;;;;;;;;;;;;;;6584:26;;5809:808;;;;;;;;:::o;4737:1066::-;4921:7;4941:18;4961:12;4975:13;5003:14;4992:52;;;;;;;;;;;;:::i;:::-;4940:104;;;;;;5218:8;5214:583;;;5246:78;;-1:-1:-1;;;5246:78:13;;-1:-1:-1;;;;;5246:31:13;;;;;1371:5;;5246:78;;5309:1;;5313:10;;5246:78;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5246:78:13;;;;;;;;-1:-1:-1;;5246:78:13;;;;;;;;;;;;:::i;:::-;;;5242:257;;5483:1;5476:8;;;;;;;5242:257;-1:-1:-1;5430:6:13;-1:-1:-1;5423:13:13;;-1:-1:-1;;;5423:13:13;5214:583;5533:79;;-1:-1:-1;;;5533:79:13;;-1:-1:-1;;;;;5533:32:13;;;;;1371:5;;5533:79;;5597:1;;5601:10;;5533:79;;;:::i;4279:467:33:-;4467:7;4487:23;4512:22;;:::i;:::-;4549:14;4538:57;;;;;;;;;;;;:::i;:::-;4634:18;;;4650:1;4634:18;;;;;;;;;4486:109;;-1:-1:-1;4486:109:33;;-1:-1:-1;4606:25:33;;4634:18;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;4606:46;;4674:5;4662:6;4669:1;4662:9;;;;;;;;;;;;;;;;;:17;4696:40;;-1:-1:-1;;;4696:40:33;;-1:-1:-1;;;;;4696:20:33;;;;;:40;;4717:10;;4729:6;;4696:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4696:40:33;;;;;;;;;;;;:::i;:::-;4737:1;4696:43;;;;;;;;;;;;;;4689:50;;;;;4279:467;;;;;:::o;3410:690:19:-;3589:17;3619:18;3639:14;3668;3657:46;;;;;;;;;;;;:::i;:::-;3618:85;;;;3713:18;3745:14;3734:37;;;;;;;;;;;;:::i;:::-;3713:58;-1:-1:-1;3785:4:19;:27;3813:6;3821:10;3713:58;3845:31;3865:10;3845:19;:31::i;4934:393:50:-;5019:15;5047;5064:23;5099:5;-1:-1:-1;;;;;5091:25:50;5153:24;;;5179:5;5130:55;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5130:55:50;;;;;;;;;;;;;;-1:-1:-1;;;;;5130:55:50;-1:-1:-1;;;;;;5130:55:50;;;;;;;;;;5091:104;;;;5130:55;5091:104;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5046:149;;;;5209:10;:37;;;;;5244:2;5223:10;:17;:23;;5209:37;5205:116;;;5272:38;5296:10;5308:1;5272:23;:38::i;2743:784:34:-;2921:7;2941:14;2957:19;2978;3025:14;3001:88;;;;;;;;;;;;:::i;:::-;2940:149;;-1:-1:-1;2940:149:34;-1:-1:-1;2940:149:34;-1:-1:-1;3100:12:34;3114:23;3149:4;-1:-1:-1;;;2940:149:34;;;3354:31;3374:10;3354:19;:31::i;:::-;3179:220;;;;;;;;;;;:::i;4216:455:50:-;4348:18;4379:15;4396:23;4431:5;-1:-1:-1;;;;;4423:25:50;4485:24;;;4511:5;4518:7;4462:64;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4462:64:50;;;;;;;;;;;;;;-1:-1:-1;;;;;4462:64:50;-1:-1:-1;;;;;;4462:64:50;;;;;;;;;;4423:113;;;;4462:64;4423:113;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4378:158;;;;4550:10;:37;;;;;4585:2;4564:10;:17;:23;;4550:37;4546:119;;;4616:38;4640:10;4652:1;4616:23;:38::i;4894:534:21:-;5075:17;5105:16;5123:27;5165:14;5154:46;;;;;;;;;;;;:::i;:::-;5104:96;;;;5211:17;5230:27;5272:14;5261:46;;;;;;;;;;;;:::i;:::-;5210:97;;;;5324;5358:8;5368:19;5389;5410:10;5324:33;:97::i;:::-;5317:104;4894:534;-1:-1:-1;;;;;;;;4894:534:21:o;762:475:53:-;824:7;847:6;843:45;;-1:-1:-1;876:1:53;869:8;;843:45;909:5;;;913:1;909;:5;:1;928:5;;;;;:10;924:289;;954:248;996:192;1060:64;1146:1;1169;996:42;:192::i;:::-;954:24;:248::i;2056:410::-;2118:7;2149:5;;;2168;;;2164:278;;;2189:242;2231:186;2295:58;2375:1;2398;2231:42;:186::i;1243:410::-;1305:7;1328:6;1324:278;;1350:241;1392:185;1456:57;1535:1;1558;1392:42;:185::i;1350:241::-;1611:9;1627:1;1623;:5;;;;;;;1243:410;-1:-1:-1;;;;1243:410:53:o;1659:391::-;1721:7;1748:1;1744;:5;1740:282;;;1765:246;1807:190;1871:62;1955:1;1978;1807:42;:190::i;1765:246::-;-1:-1:-1;2038:5:53;;;1659:391::o;5165:189:26:-;5246:10;5303:9;-1:-1:-1;;;;;5303:16:26;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5286:47:26;;:60;;;;;;;;;;;;;;:::i;3345:877:30:-;3607:25;;;3630:1;3607:25;;;3548:35;3607:25;;;;;;;;;;;;;;;;;;;;;;;;;;3595:37;;3643:33;;:::i;:::-;3682:267;3710:229;;;;;;;;3758:7;-1:-1:-1;;;;;3710:229:30;;;;;3796:11;-1:-1:-1;;;;;3710:229:30;;;;;3837:4;3842:1;3837:7;;;;;;;;;;;;;;-1:-1:-1;;;;;3710:229:30;;;;;3875:4;3880:1;3875:7;;;;;;;;;;;;;;-1:-1:-1;;;;;3710:229:30;;;;;3913:11;3710:229;;;3682:14;:267::i;:::-;3642:307;;;3960:17;3996:9;3991:225;4015:1;4011;:5;3991:225;;;4037:22;4062:8;4071:1;4062:11;;;;;;;;;;;4110:23;;;4131:1;4110:23;;;;;;;;;4062:11;;-1:-1:-1;4110:23:30;;;;;;;;;;;;-1:-1:-1;4110:23:30;4087:9;4097;4087:20;;;;;;;;;;;;;:46;;;;4173:7;4147:9;4157;4147:20;;;;;;;;;;;;;;4168:1;4147:23;;;;;;;;-1:-1:-1;;;;;4147:33:30;;;:23;;;;;;;;;;;:33;-1:-1:-1;4194:11:30;;;;;4018:3;3991:225;;4228:1405;4487:25;;;4510:1;4487:25;;;;;;;;;4428:35;;4487:25;;;;;;;;;;;;;;;;;;;;4475:37;;4523:41;;:::i;:::-;4566:33;;:::i;:::-;4603:267;4631:229;;;;;;;;4679:7;-1:-1:-1;;;;;4631:229:30;;;;;4717:11;-1:-1:-1;;;;;4631:229:30;;;;;4758:4;4763:1;4758:7;;;;;;;;;;;;;;-1:-1:-1;;;;;4631:229:30;;;;;4796:4;4801:1;4796:7;;;;;;;;;;;;;;-1:-1:-1;;;;;4631:229:30;;;;;4834:11;4631:229;;;4603:14;:267::i;:::-;4522:348;;;;4882:42;;:::i;:::-;4930:274;4958:236;;;;;;;;5006:7;-1:-1:-1;;;;;4958:236:30;;;;;5044:11;-1:-1:-1;;;;;4958:236:30;;;;;5085:4;5090:1;5085:7;;;;;;;;;;;;;;-1:-1:-1;;;;;4958:236:30;;;;;5123:4;5128:1;5123:7;;;;;;;;;;;;;;-1:-1:-1;;;;;4958:236:30;;;;;5161:15;5177:1;5161:18;;;;;;;;;;;4958:236;;4930:14;:274::i;:::-;4881:323;;;5215:17;5251:9;5246:381;5270:1;5266;:5;5246:381;;;5297:9;5292:325;5316:1;5312;:5;5292:325;;;5365:23;;;5386:1;5365:23;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5365:23:30;5342:9;5352;5342:20;;;;;;;;;;;;;:46;;;;5406:35;5444:9;5454;5444:20;;;;;;;;;;;;;;5406:58;;5499:16;5516:1;5499:19;;;;;;;;;;;5482:11;5494:1;5482:14;;;;;;;;;;;;;:36;-1:-1:-1;;;;;5482:36:30;;;-1:-1:-1;;;;;5482:36:30;;;;;5553:17;5571:1;5553:20;;;;;;;;;;;5536:11;5548:1;5536:14;;;;;;;;-1:-1:-1;;;;;5536:37:30;;;:14;;;;;;;;;;;:37;-1:-1:-1;5591:11:30;;;;;5319:3;5292:325;;;-1:-1:-1;5273:3:30;;5246:381;;1122:144:24;1223:16;;;1237:1;1223:16;;;;;;;;;1185:20;;1223:16;;;;;;;;;;;-1:-1:-1;1223:16:24;1217:22;;1258:1;1249:3;1253:1;1249:6;;;;;;;;;;;;;:10;;;;;1122:144;;;:::o;4362:388:2:-;4506:21;4543:14;;;:29;;-1:-1:-1;4561:11:2;;4543:29;:49;;;-1:-1:-1;4576:16:2;;4543:49;4539:63;;;-1:-1:-1;4601:1:2;4594:8;;4539:63;4624:18;;;4636:6;4624:9;:18;:9;4656:13;;;;;:23;4652:37;;4688:1;4681:8;;;;;4652:37;4732:11;4726:1;4712:11;:15;4707:1;:21;4706:37;;;;;;;4362:388;-1:-1:-1;;;;;4362:388:2:o;15946:170:51:-;16021:14;16064:21;16076:1;16079:5;16064:11;:21::i;6390:1107::-;6470:19;6646:2;6639:4;:9;6635:316;;;6664:276;6706:220;6775:83;6880:4;6906:2;6706:47;:220::i;6664:276::-;6969:1;:8;6964:2;:13;6960:326;;;6993:282;7035:226;7104:85;7211:2;7235:1;:8;7035:47;:226::i;6993:282::-;7378:4;7373:2;:9;-1:-1:-1;;;;;7363:20:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7363:20:51;;7354:29;;7393:74;7401:23;:6;:21;:23::i;:::-;7447:4;7426:18;:1;:16;:18::i;:::-;:25;7453:6;:13;7393:7;:74::i;16352:137::-;16444:38;16457:1;16460:5;16475;16444:12;:38::i;1340:206:57:-;1439:12;808:10;1493:28;;1523:9;1534:1;1537;1470:69;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1470:69:57;;;;;;;;;;;;;;-1:-1:-1;;;;;1470:69:57;-1:-1:-1;;;;;;1470:69:57;;;;;;;;;;;-1:-1:-1;1340:206:57;;;;;:::o;1382:150:56:-;1505:9;1499:16;1492:4;1481:9;1477:20;1470:46;6049:2032:30;6145:33;;:::i;:::-;6180:34;;:::i;:::-;6257:23;;;6278:1;6257:23;;;6226:28;6257:23;;;;;6226:28;6257:23;;;;;;;;;;-1:-1:-1;6257:23:30;6226:54;;6300:6;:17;;;6290:4;6295:1;6290:7;;;;;;;;;;;;;:27;-1:-1:-1;;;;;6290:27:30;;;-1:-1:-1;;;;;6290:27:30;;;;;6337:6;:18;;;6327:4;6332:1;6327:7;;;;;;;;-1:-1:-1;;;;;6327:28:30;;;;:7;;;;;;;;;;;:28;6398:16;;;6412:1;6398:16;;;;;;;;;6366:29;;6398:16;;;;;;;;;;;;-1:-1:-1;6398:16:30;6366:48;;6442:6;:18;;;6424:12;6437:1;6424:15;;;;;;;;;;;;;:36;;;;;6471:30;;:::i;:::-;-1:-1:-1;6471:102:30;;;;;;;;6512:8;6471:102;;6530:8;6471:102;;;;6548:7;6471:102;;;;;;;6565:6;6471:102;;;;-1:-1:-1;6583:1492:30;6607:20;6603:1;:24;6583:1492;;;6648:19;6670:6;:14;;;-1:-1:-1;;;;;6670:22:30;;6718:6;:17;;;6762:6;:18;;;6799:13;6813:1;6799:16;;;;;;;;;;;6670:159;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6648:181;;6848:17;6860:4;6848:11;:17::i;:::-;6843:65;;6885:8;;;6843:65;6957:23;;;6978:1;6957:23;;;;;;;;;6922:32;;6957:23;;;;;;;;;;;-1:-1:-1;6957:23:30;6922:58;;7008:4;6994:8;7003:1;6994:11;;;;;;;;;;;;;:18;-1:-1:-1;;;;;6994:18:30;;;-1:-1:-1;;;;;6994:18:30;;;;;7026:24;7053:29;7067:4;7073:8;7053:13;:29::i;:::-;7026:56;;7117:6;:18;;;-1:-1:-1;;;;;7117:39:30;;910:5;7209:6;:14;;;7245:11;7278:12;7117:191;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7097:968;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7371:12;7385:30;7421:28;7442:6;7421:20;:28::i;:::-;7370:79;;;;;7471:7;7467:584;;;7582:19;;7563:16;;:13;;7599:1;;7563:16;;;;;;;;;;:38;7559:474;;;7651:19;;;7629;;;:41;;;;7710:11;;-1:-1:-1;;;;;7696:25:30;:11;;;:25;7769:16;;;;7668:1;;7769:16;;;;;;;;;;7747;7764:1;7747:19;;;;;;;;;;:38;-1:-1:-1;;;;;7811:18:30;;;;7559:474;;;7881:16;7898:1;7881:19;;;;7862:13;7876:1;7862:16;;;;;;;;;;;;;;:38;7858:175;;;7950:13;7964:1;7950:16;;;;;;;;;;;;;;7928;7945:1;7928:19;;;;;;;;;;:38;8006:4;7992:8;8001:1;-1:-1:-1;;;;;7992:18:30;;;:11;;;;;;:18;7858:175;7324:741;;;7097:968;6583:1492;;;;6629:3;;6583:1492;;;;6049:2032;;;;;;:::o;14133:684:51:-;14208:14;14249:5;14257:2;14249:10;14238:1;:8;:21;14234:352;;;14275:300;14317:244;14386:95;14503:1;:8;14533:5;14541:2;14533:10;14317:47;:244::i;14275:300::-;-1:-1:-1;14764:13:51;14666:2;14764:13;14758:20;;14133:684::o;1281:292:54:-;1445:12;1264:10;1499:37;;1538:9;1549:6;1557:8;1476:90;;;;;;;;;;:::i;1438:200:51:-;1589:2;1578:14;;1438:200::o;1877:4205::-;1977:2;1968:6;:11;1964:4112;;;2266:1;2256:6;2252:2;2248:15;2243:3;2239:25;2235:33;2317:4;2313:9;2304:6;2298:13;2294:29;2366:4;2359;2353:11;2349:22;2407:1;2404;2401:8;2395:4;2388:22;2205:219;;;;;;2528:4;2518:6;:14;2514:59;;;2552:7;;2514:59;3262:4;3253:6;:13;3249:2817;;;3588:2;3580:6;3576:15;3566:25;;3636:6;3628;3624:19;3686:6;3680:4;3676:17;3993:4;3987:11;4196:242;4236:4;4228:6;4225:16;4196:242;;;4306:13;;4293:27;;4367:2;4403:13;;;;4355:15;;;;4196:242;;;4507:18;;-1:-1:-1;3295:1248:51;;;4788:2;4780:6;4776:15;4766:25;;4836:6;4828;4824:19;4886:6;4880:4;4876:17;5196:6;5190:13;5710:235;5749:4;5743;5739:15;5710:235;;;5819:11;;5806:25;;-1:-1:-1;;5864:13:51;;;;5910;;;;5710:235;;;6015:19;;-1:-1:-1;;1877:4205:51;;;:::o;15053:650::-;15160:5;15168:2;15160:10;15149:1;:8;:21;15145:352;;;15186:300;15228:244;15297:95;15414:1;:8;15444:5;15452:2;15444:10;15228:47;:244::i;15186:300::-;15666:13;;15577:2;15666:13;15659:28;15645:52::o;8087:628:30:-;8152:12;8301:17;;8349:13;8345:64;;8389:5;8382:12;;;;;8345:64;8087:628;8494:4;-1:-1:-1;;;;;8494:11:30;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;8479:39:30;;8527:4;8479:54;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8475:102;;-1:-1:-1;8561:5:30;8554:12;;8475:102;8605:4;-1:-1:-1;;;;;8605:11:30;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;8590:39:30;;8638:4;8590:54;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8586:102;;-1:-1:-1;8672:5:30;8665:12;;8586:102;-1:-1:-1;8704:4:30;8087:628;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;142:134::-;220:13;;238:33;220:13;238:33;:::i;458:707::-;;575:3;568:4;560:6;556:17;552:27;542:2;;593:1;590;583:12;542:2;630:6;617:20;652:80;667:64;724:6;667:64;:::i;:::-;652:80;:::i;:::-;643:89;;749:5;774:6;767:5;760:21;804:4;796:6;792:17;782:27;;826:4;821:3;817:14;810:21;;879:6;926:3;918:4;910:6;906:17;901:3;897:27;894:36;891:2;;;943:1;940;933:12;891:2;968:1;953:206;978:6;975:1;972:13;953:206;;;1036:3;1058:37;1091:3;1079:10;1058:37;:::i;:::-;1046:50;;-1:-1;1119:4;1110:14;;;;1138;;;;;1000:1;993:9;953:206;;;957:14;535:630;;;;;;;:::o;1191:722::-;;1319:3;1312:4;1304:6;1300:17;1296:27;1286:2;;1337:1;1334;1327:12;1286:2;1367:6;1361:13;1389:80;1404:64;1461:6;1404:64;:::i;1389:80::-;1380:89;;1486:5;1511:6;1504:5;1497:21;1541:4;1533:6;1529:17;1519:27;;1563:4;1558:3;1554:14;1547:21;;1616:6;1663:3;1655:4;1647:6;1643:17;1638:3;1634:27;1631:36;1628:2;;;1680:1;1677;1670:12;1628:2;1705:1;1690:217;1715:6;1712:1;1709:13;1690:217;;;1773:3;1795:48;1839:3;1827:10;1795:48;:::i;:::-;1783:61;;-1:-1;1867:4;1858:14;;;;1886;;;;;1737:1;1730:9;1690:217;;1941:753;;2083:3;2076:4;2068:6;2064:17;2060:27;2050:2;;2101:1;2098;2091:12;2050:2;2138:6;2125:20;2160:105;2175:89;2257:6;2175:89;:::i;2160:105::-;2293:21;;;2337:4;2325:17;;;;2151:114;;-1:-1;2350:14;;2325:17;2445:1;2430:258;2455:6;2452:1;2449:13;2430:258;;;2538:3;2525:17;2517:6;2513:30;2562:62;2620:3;2608:10;2562:62;:::i;:::-;2550:75;;-1:-1;2648:4;2639:14;;;;2667;;;;;2477:1;2470:9;2430:258;;2718:363;;;2859:3;2852:4;2844:6;2840:17;2836:27;2826:2;;2877:1;2874;2867:12;2826:2;-1:-1;2897:20;;-1:-1;;;;;2926:30;;2923:2;;;2969:1;2966;2959:12;2923:2;3003:4;2995:6;2991:17;2979:29;;3054:3;3046:4;3038:6;3034:17;3024:8;3020:32;3017:41;3014:2;;;3071:1;3068;3061:12;3014:2;2819:262;;;;;:::o;3105:705::-;;3231:3;3224:4;3216:6;3212:17;3208:27;3198:2;;3249:1;3246;3239:12;3198:2;3286:6;3273:20;3308:89;3323:73;3389:6;3323:73;:::i;3308:89::-;3425:21;;;3469:4;3457:17;;;;3299:98;;-1:-1;3482:14;;3457:17;3577:1;3562:242;3587:6;3584:1;3581:13;3562:242;;;3670:3;3657:17;3649:6;3645:30;3694:46;3736:3;3724:10;3694:46;:::i;:::-;3682:59;;-1:-1;3764:4;3755:14;;;;3783;;;;;3609:1;3602:9;3562:242;;3852:779;;3993:3;3986:4;3978:6;3974:17;3970:27;3960:2;;4011:1;4008;4001:12;3960:2;4048:6;4035:20;4070:104;4085:88;4166:6;4085:88;:::i;4070:104::-;4061:113;;4191:5;4216:6;4209:5;4202:21;4246:4;4238:6;4234:17;4224:27;;4268:4;4263:3;4259:14;4252:21;;4321:6;4368:3;4360:4;4352:6;4348:17;4343:3;4339:27;4336:36;4333:2;;;4385:1;4382;4375:12;4333:2;4410:1;4395:230;4420:6;4417:1;4414:13;4395:230;;;4478:3;4500:61;4557:3;4545:10;4500:61;:::i;:::-;4488:74;;-1:-1;4585:4;4576:14;;;;4604;;;;;4442:1;4435:9;4395:230;;4656:719;;4783:3;4776:4;4768:6;4764:17;4760:27;4750:2;;4801:1;4798;4791:12;4750:2;4831:6;4825:13;4853:79;4868:63;4924:6;4868:63;:::i;4853:79::-;4844:88;;4949:5;4974:6;4967:5;4960:21;5004:4;4996:6;4992:17;4982:27;;5026:4;5021:3;5017:14;5010:21;;5079:6;5126:3;5118:4;5110:6;5106:17;5101:3;5097:27;5094:36;5091:2;;;5143:1;5140;5133:12;5091:2;5168:1;5153:216;5178:6;5175:1;5172:13;5153:216;;;5236:3;5258:47;5301:3;5289:10;5258:47;:::i;:::-;5246:60;;-1:-1;5329:4;5320:14;;;;5348;;;;;5200:1;5193:9;5153:216;;5431:774;;5580:3;5573:4;5565:6;5561:17;5557:27;5547:2;;5598:1;5595;5588:12;5547:2;5635:6;5622:20;5657:112;5672:96;5761:6;5672:96;:::i;5657:112::-;5797:21;;;5841:4;5829:17;;;;5648:121;;-1:-1;5854:14;;5829:17;5949:1;5934:265;5959:6;5956:1;5953:13;5934:265;;;6042:3;6029:17;6021:6;6017:30;6066:69;6131:3;6119:10;6066:69;:::i;:::-;6054:82;;-1:-1;6159:4;6150:14;;;;6178;;;;;5981:1;5974:9;5934:265;;6251:795;;6396:3;6389:4;6381:6;6377:17;6373:27;6363:2;;6414:1;6411;6404:12;6363:2;6451:6;6438:20;6473:108;6488:92;6573:6;6488:92;:::i;6473:108::-;6464:117;;6598:5;6623:6;6616:5;6609:21;6653:4;6645:6;6641:17;6631:27;;6675:4;6670:3;6666:14;6659:21;;6728:6;6777:3;6767:6;6759;6755:19;6750:3;6746:29;6743:38;6740:2;;;6794:1;6791;6784:12;6740:2;6819:1;6804:236;6829:6;6826:1;6823:13;6804:236;;;6887:3;6909:65;6970:3;6958:10;6909:65;:::i;:::-;6897:78;;-1:-1;6998:4;6989:14;;;;7026:6;7017:16;;;;;6851:1;6844:9;6804:236;;7091:788;;7235:3;7228:4;7220:6;7216:17;7212:27;7202:2;;7253:1;7250;7243:12;7202:2;7290:6;7277:20;7312:107;7327:91;7411:6;7327:91;:::i;7312:107::-;7303:116;;7436:5;7461:6;7454:5;7447:21;7491:4;7483:6;7479:17;7469:27;;7513:4;7508:3;7504:14;7497:21;;7566:6;7613:3;7605:4;7597:6;7593:17;7588:3;7584:27;7581:36;7578:2;;;7630:1;7627;7620:12;7578:2;7655:1;7640:233;7665:6;7662:1;7659:13;7640:233;;;7723:3;7745:64;7805:3;7793:10;7745:64;:::i;:::-;7733:77;;-1:-1;7833:4;7824:14;;;;7861:4;7852:14;;;;;7687:1;7680:9;7640:233;;7905:707;;8022:3;8015:4;8007:6;8003:17;7999:27;7989:2;;8040:1;8037;8030:12;7989:2;8077:6;8064:20;8099:80;8114:64;8171:6;8114:64;:::i;8099:80::-;8090:89;;8196:5;8221:6;8214:5;8207:21;8251:4;8243:6;8239:17;8229:27;;8273:4;8268:3;8264:14;8257:21;;8326:6;8373:3;8365:4;8357:6;8353:17;8348:3;8344:27;8341:36;8338:2;;;8390:1;8387;8380:12;8338:2;8415:1;8400:206;8425:6;8422:1;8419:13;8400:206;;;8483:3;8505:37;8538:3;8526:10;8505:37;:::i;:::-;8493:50;;-1:-1;8566:4;8557:14;;;;8585;;;;;8447:1;8440:9;8400:206;;8638:722;;8766:3;8759:4;8751:6;8747:17;8743:27;8733:2;;8784:1;8781;8774:12;8733:2;8814:6;8808:13;8836:80;8851:64;8908:6;8851:64;:::i;8836:80::-;8827:89;;8933:5;8958:6;8951:5;8944:21;8988:4;8980:6;8976:17;8966:27;;9010:4;9005:3;9001:14;8994:21;;9063:6;9110:3;9102:4;9094:6;9090:17;9085:3;9081:27;9078:36;9075:2;;;9127:1;9124;9117:12;9075:2;9152:1;9137:217;9162:6;9159:1;9156:13;9137:217;;;9220:3;9242:48;9286:3;9274:10;9242:48;:::i;:::-;9230:61;;-1:-1;9314:4;9305:14;;;;9333;;;;;9184:1;9177:9;9137:217;;9368:128;9443:13;;9461:30;9443:13;9461:30;:::i;9503:130::-;9570:20;;9595:33;9570:20;9595:33;:::i;9640:134::-;9718:13;;9736:33;9718:13;9736:33;:::i;9781:128::-;9847:20;;9872:32;9847:20;9872:32;:::i;9916:132::-;9993:13;;10011:32;9993:13;10011:32;:::i;10056:440::-;;10157:3;10150:4;10142:6;10138:17;10134:27;10124:2;;10175:1;10172;10165:12;10124:2;10212:6;10199:20;10234:64;10249:48;10290:6;10249:48;:::i;10234:64::-;10225:73;;10318:6;10311:5;10304:21;10354:4;10346:6;10342:17;10387:4;10380:5;10376:16;10422:3;10413:6;10408:3;10404:16;10401:25;10398:2;;;10439:1;10436;10429:12;10398:2;10449:41;10483:6;10478:3;10473;10449:41;:::i;10504:182::-;10597:20;;10622:59;10597:20;10622:59;:::i;11968:182::-;12070:13;;12088:57;12070:13;12088:57;:::i;12881:166::-;12975:13;;12993:49;12975:13;12993:49;:::i;13054:166::-;13139:20;;13164:51;13139:20;13164:51;:::i;13227:128::-;13293:20;;13318:32;13293:20;13318:32;:::i;13362:132::-;13439:13;;13457:32;13439:13;13457:32;:::i;13689:482::-;;13815:4;13803:9;13798:3;13794:19;13790:30;13787:2;;;13833:1;13830;13823:12;13787:2;13851:20;13866:4;13851:20;:::i;:::-;13842:29;-1:-1;13923:1;13955:49;14000:3;13980:9;13955:49;:::i;:::-;13930:75;;-1:-1;14067:2;14100:49;14145:3;14121:22;;;14100:49;:::i;:::-;14093:4;14086:5;14082:16;14075:75;14026:135;13781:390;;;;:::o;14223:643::-;;14347:4;14335:9;14330:3;14326:19;14322:30;14319:2;;;14365:1;14362;14355:12;14319:2;14383:20;14398:4;14383:20;:::i;:::-;14374:29;-1:-1;14457:1;14489:74;14559:3;14539:9;14489:74;:::i;:::-;14464:100;;-1:-1;14654:2;14639:18;;14626:32;-1:-1;;;;;14667:30;;14664:2;;;14710:1;14707;14700:12;14664:2;14745:99;14840:3;14831:6;14820:9;14816:22;14745:99;:::i;14917:1027::-;;15038:4;15026:9;15021:3;15017:19;15013:30;15010:2;;;15056:1;15053;15046:12;15010:2;15074:20;15089:4;15074:20;:::i;:::-;15065:29;-1:-1;15146:1;15178:49;15223:3;15203:9;15178:49;:::i;:::-;15153:75;;-1:-1;15297:2;15330:49;15375:3;15351:22;;;15330:49;:::i;:::-;15323:4;15316:5;15312:16;15305:75;15249:142;15450:2;15483:49;15528:3;15519:6;15508:9;15504:22;15483:49;:::i;:::-;15476:4;15469:5;15465:16;15458:75;15401:143;15596:2;15629:49;15674:3;15665:6;15654:9;15650:22;15629:49;:::i;:::-;15622:4;15615:5;15611:16;15604:75;15554:136;15772:3;15761:9;15757:19;15744:33;-1:-1;;;;;15789:6;15786:30;15783:2;;;15829:1;15826;15819:12;15783:2;15864:58;15918:3;15909:6;15898:9;15894:22;15864:58;:::i;:::-;15857:4;15850:5;15846:16;15839:84;15700:234;15004:940;;;;:::o;15987:659::-;;16103:4;16091:9;16086:3;16082:19;16078:30;16075:2;;;16121:1;16118;16111:12;16075:2;16139:20;16154:4;16139:20;:::i;:::-;16130:29;-1:-1;16216:1;16248:49;16293:3;16273:9;16248:49;:::i;:::-;16223:75;;-1:-1;16380:2;16413:48;16457:3;16433:22;;;16413:48;:::i;:::-;16406:4;16399:5;16395:16;16388:74;16319:154;16543:2;16576:48;16620:3;16611:6;16600:9;16596:22;16576:48;:::i;:::-;16569:4;16562:5;16558:16;16551:74;16483:153;16069:577;;;;:::o;16689:703::-;;16816:4;16804:9;16799:3;16795:19;16791:30;16788:2;;;16834:1;16831;16824:12;16788:2;16852:20;16867:4;16852:20;:::i;:::-;16843:29;-1:-1;16929:1;16961:60;17017:3;16997:9;16961:60;:::i;:::-;16936:86;;-1:-1;17104:2;17137:59;17192:3;17168:22;;;17137:59;:::i;:::-;17130:4;17123:5;17119:16;17112:85;17043:165;17278:2;17311:59;17366:3;17357:6;17346:9;17342:22;17311:59;:::i;17440:481::-;;17562:4;17550:9;17545:3;17541:19;17537:30;17534:2;;;17580:1;17577;17570:12;17534:2;17598:20;17613:4;17598:20;:::i;:::-;17589:29;-1:-1;17672:1;17704:49;17749:3;17729:9;17704:49;:::i;17962:630::-;;18077:4;18065:9;18060:3;18056:19;18052:30;18049:2;;;18095:1;18092;18085:12;18049:2;18113:20;18128:4;18113:20;:::i;:::-;18104:29;-1:-1;18189:1;18221:49;18266:3;18246:9;18221:49;:::i;:::-;18196:75;;-1:-1;18337:2;18370:49;18415:3;18391:22;;;18370:49;:::i;:::-;18363:4;18356:5;18352:16;18345:75;18292:139;18488:2;18521:49;18566:3;18557:6;18546:9;18542:22;18521:49;:::i;18633:2032::-;;18750:6;18738:9;18733:3;18729:19;18725:32;18722:2;;;18770:1;18767;18760:12;18722:2;18788:22;18803:6;18788:22;:::i;:::-;18779:31;-1:-1;18866:1;18898:73;18967:3;18947:9;18898:73;:::i;:::-;18873:99;;-1:-1;19039:2;19072:73;19141:3;19117:22;;;19072:73;:::i;:::-;19065:4;19058:5;19054:16;19047:99;18993:164;19214:2;19247:49;19292:3;19283:6;19272:9;19268:22;19247:49;:::i;:::-;19240:4;19233:5;19229:16;19222:75;19167:141;19365:2;19398:49;19443:3;19434:6;19423:9;19419:22;19398:49;:::i;:::-;19391:4;19384:5;19380:16;19373:75;19318:141;19524:3;19558:49;19603:3;19594:6;19583:9;19579:22;19558:49;:::i;:::-;19551:4;19544:5;19540:16;19533:75;19469:150;19670:3;19704:49;19749:3;19740:6;19729:9;19725:22;19704:49;:::i;:::-;19697:4;19690:5;19686:16;19679:75;19629:136;19816:3;19850:49;19895:3;19886:6;19875:9;19871:22;19850:49;:::i;:::-;19843:4;19836:5;19832:16;19825:75;19775:136;19963:3;19997:49;20042:3;20033:6;20022:9;20018:22;19997:49;:::i;:::-;19990:4;19983:5;19979:16;19972:75;19921:137;20116:3;20152:49;20197:3;20188:6;20177:9;20173:22;20152:49;:::i;:::-;20143:6;20136:5;20132:18;20125:77;20068:145;20263:3;20299:49;20344:3;20335:6;20324:9;20320:22;20299:49;:::i;:::-;20290:6;20283:5;20279:18;20272:77;20223:137;20412:3;20448:48;20492:3;20483:6;20472:9;20468:22;20448:48;:::i;:::-;20439:6;20432:5;20428:18;20421:76;20370:138;20558:3;20594:49;20639:3;20630:6;20619:9;20615:22;20594:49;:::i;:::-;20585:6;20578:5;20574:18;20567:77;20518:137;18716:1949;;;;:::o;20714:642::-;;20833:4;20821:9;20816:3;20812:19;20808:30;20805:2;;;20851:1;20848;20841:12;20805:2;20869:20;20884:4;20869:20;:::i;:::-;20860:29;-1:-1;20945:1;20977:49;21022:3;21002:9;20977:49;:::i;:::-;20952:75;;-1:-1;21097:2;21130:49;21175:3;21151:22;;;21130:49;:::i;21396:698::-;;21523:4;21511:9;21506:3;21502:19;21498:30;21495:2;;;21541:1;21538;21531:12;21495:2;21559:20;21574:4;21559:20;:::i;:::-;21550:29;-1:-1;21634:1;21666:60;21722:3;21702:9;21666:60;:::i;:::-;21641:86;;-1:-1;21790:2;21823:76;21895:3;21871:22;;;21823:76;:::i;:::-;21816:4;21809:5;21805:16;21798:102;21748:163;21979:2;22012:60;22068:3;22059:6;22048:9;22044:22;22012:60;:::i;22134:773::-;;22250:4;22238:9;22233:3;22229:19;22225:30;22222:2;;;22268:1;22265;22258:12;22222:2;22286:20;22301:4;22286:20;:::i;:::-;22277:29;-1:-1;22365:1;22397:67;22460:3;22440:9;22397:67;:::i;:::-;22372:93;;-1:-1;22523:2;22556:47;22599:3;22575:22;;;22556:47;:::i;:::-;22549:4;22542:5;22538:16;22531:73;22486:129;22662:2;22695:49;22740:3;22731:6;22720:9;22716:22;22695:49;:::i;:::-;22688:4;22681:5;22677:16;22670:75;22625:131;22803:2;22836:49;22881:3;22872:6;22861:9;22857:22;22836:49;:::i;:::-;22829:4;22822:5;22818:16;22811:75;22766:131;22216:691;;;;:::o;22937:655::-;;23065:4;23053:9;23048:3;23044:19;23040:30;23037:2;;;23083:1;23080;23073:12;23037:2;23101:20;23116:4;23101:20;:::i;:::-;23092:29;-1:-1;23171:1;23203:60;23259:3;23239:9;23203:60;:::i;:::-;23178:86;;-1:-1;23323:2;23356:60;23412:3;23388:22;;;23356:60;:::i;:::-;23349:4;23342:5;23338:16;23331:86;23285:143;23480:2;23513:57;23566:3;23557:6;23546:9;23542:22;23513:57;:::i;23599:130::-;23666:20;;23691:33;23666:20;23691:33;:::i;23736:134::-;23814:13;;23832:33;23814:13;23832:33;:::i;23877:132::-;23954:13;;23972:32;23954:13;23972:32;:::i;24294:128::-;24360:20;;24385:32;24360:20;24385:32;:::i;24429:126::-;24494:20;;24519:31;24494:20;24519:31;:::i;24562:130::-;24638:13;;24656:31;24638:13;24656:31;:::i;24699:241::-;;24803:2;24791:9;24782:7;24778:23;24774:32;24771:2;;;24819:1;24816;24809:12;24771:2;24854:1;24871:53;24916:7;24896:9;24871:53;:::i;24947:263::-;;25062:2;25050:9;25041:7;25037:23;25033:32;25030:2;;;25078:1;25075;25068:12;25030:2;25113:1;25130:64;25186:7;25166:9;25130:64;:::i;25503:431::-;;;25651:2;25639:9;25630:7;25626:23;25622:32;25619:2;;;25667:1;25664;25657:12;25619:2;25702:1;25719:72;25783:7;25763:9;25719:72;:::i;:::-;25709:82;;25681:116;25828:2;25846:72;25910:7;25901:6;25890:9;25886:22;25846:72;:::i;:::-;25836:82;;25807:117;25613:321;;;;;:::o;25941:736::-;;;;;26139:3;26127:9;26118:7;26114:23;26110:33;26107:2;;;26156:1;26153;26146:12;26107:2;26191:1;26208:72;26272:7;26252:9;26208:72;:::i;:::-;26198:82;;26170:116;26317:2;26335:72;26399:7;26390:6;26379:9;26375:22;26335:72;:::i;:::-;26325:82;;26296:117;26444:2;26462:72;26526:7;26517:6;26506:9;26502:22;26462:72;:::i;:::-;26452:82;;26423:117;26571:2;26589:72;26653:7;26644:6;26633:9;26629:22;26589:72;:::i;:::-;26579:82;;26550:117;26101:576;;;;;;;:::o;26684:696::-;;;;26874:2;26862:9;26853:7;26849:23;26845:32;26842:2;;;26890:1;26887;26880:12;26842:2;26925:1;26942:72;27006:7;26986:9;26942:72;:::i;:::-;26932:82;;26904:116;27051:2;27069:72;27133:7;27124:6;27113:9;27109:22;27069:72;:::i;:::-;27059:82;;27030:117;27199:2;27188:9;27184:18;27178:25;-1:-1;;;;;27215:6;27212:30;27209:2;;;27255:1;27252;27245:12;27209:2;27275:89;27356:7;27347:6;27336:9;27332:22;27275:89;:::i;:::-;27265:99;;27157:213;26836:544;;;;;:::o;27387:561::-;;;;27549:2;27537:9;27528:7;27524:23;27520:32;27517:2;;;27565:1;27562;27555:12;27517:2;27600:1;27617:72;27681:7;27661:9;27617:72;:::i;:::-;27607:82;;27579:116;27726:2;27744:72;27808:7;27799:6;27788:9;27784:22;27744:72;:::i;:::-;27734:82;;27705:117;27853:2;27871:61;27924:7;27915:6;27904:9;27900:22;27871:61;:::i;27955:544::-;;;28120:2;28108:9;28099:7;28095:23;28091:32;28088:2;;;28136:1;28133;28126:12;28088:2;28171:1;28188:72;28252:7;28232:9;28188:72;:::i;:::-;28178:82;;28150:116;28318:2;28307:9;28303:18;28297:25;-1:-1;;;;;28334:6;28331:30;28328:2;;;28374:1;28371;28364:12;28328:2;28394:89;28475:7;28466:6;28455:9;28451:22;28394:89;:::i;28506:1005::-;;;;;;;28720:3;28708:9;28699:7;28695:23;28691:33;28688:2;;;28737:1;28734;28727:12;28688:2;28772:1;28789:53;28834:7;28814:9;28789:53;:::i;:::-;28779:63;;28751:97;28879:2;28897:53;28942:7;28933:6;28922:9;28918:22;28897:53;:::i;:::-;28887:63;;28858:98;28987:2;29005:53;29050:7;29041:6;29030:9;29026:22;29005:53;:::i;:::-;28995:63;;28966:98;29095:2;29113:53;29158:7;29149:6;29138:9;29134:22;29113:53;:::i;:::-;29103:63;;29074:98;29203:3;29222:53;29267:7;29258:6;29247:9;29243:22;29222:53;:::i;:::-;29212:63;;29182:99;29340:3;29329:9;29325:19;29312:33;-1:-1;;;;;29357:6;29354:30;29351:2;;;29397:1;29394;29387:12;29351:2;29417:78;29487:7;29478:6;29467:9;29463:22;29417:78;:::i;:::-;29407:88;;29291:210;28682:829;;;;;;;;:::o;29518:879::-;;;;;;29715:3;29703:9;29694:7;29690:23;29686:33;29683:2;;;29732:1;29729;29722:12;29683:2;29767:1;29784:53;29829:7;29809:9;29784:53;:::i;:::-;29774:63;;29746:97;29874:2;29892:53;29937:7;29928:6;29917:9;29913:22;29892:53;:::i;:::-;29882:63;;29853:98;29982:2;30000:53;30045:7;30036:6;30025:9;30021:22;30000:53;:::i;:::-;29990:63;;29961:98;30090:2;30108:53;30153:7;30144:6;30133:9;30129:22;30108:53;:::i;:::-;30098:63;;30069:98;30226:3;30215:9;30211:19;30198:33;-1:-1;;;;;30243:6;30240:30;30237:2;;;30283:1;30280;30273:12;30237:2;30303:78;30373:7;30364:6;30353:9;30349:22;30303:78;:::i;:::-;30293:88;;30177:210;29677:720;;;;;;;;:::o;30404:753::-;;;;;30584:3;30572:9;30563:7;30559:23;30555:33;30552:2;;;30601:1;30598;30591:12;30552:2;30636:1;30653:53;30698:7;30678:9;30653:53;:::i;:::-;30643:63;;30615:97;30743:2;30761:53;30806:7;30797:6;30786:9;30782:22;30761:53;:::i;:::-;30751:63;;30722:98;30851:2;30869:53;30914:7;30905:6;30894:9;30890:22;30869:53;:::i;:::-;30859:63;;30830:98;30987:2;30976:9;30972:18;30959:32;-1:-1;;;;;31003:6;31000:30;30997:2;;;31043:1;31040;31033:12;30997:2;31063:78;31133:7;31124:6;31113:9;31109:22;31063:78;:::i;31164:617::-;;;;;31319:3;31307:9;31298:7;31294:23;31290:33;31287:2;;;31336:1;31333;31326:12;31287:2;31371:1;31388:53;31433:7;31413:9;31388:53;:::i;:::-;31378:63;;31350:97;31478:2;31496:53;31541:7;31532:6;31521:9;31517:22;31496:53;:::i;:::-;31486:63;;31457:98;31586:2;31604:53;31649:7;31640:6;31629:9;31625:22;31604:53;:::i;:::-;31594:63;;31565:98;31694:2;31712:53;31757:7;31748:6;31737:9;31733:22;31712:53;:::i;31788:889::-;;;;;31993:3;31981:9;31972:7;31968:23;31964:33;31961:2;;;32010:1;32007;32000:12;31961:2;32045:1;32062:53;32107:7;32087:9;32062:53;:::i;:::-;32052:63;;32024:97;32152:2;32170:53;32215:7;32206:6;32195:9;32191:22;32170:53;:::i;:::-;32160:63;;32131:98;32288:2;32277:9;32273:18;32260:32;-1:-1;;;;;32304:6;32301:30;32298:2;;;32344:1;32341;32334:12;32298:2;32364:78;32434:7;32425:6;32414:9;32410:22;32364:78;:::i;32684:763::-;;;;32872:2;32860:9;32851:7;32847:23;32843:32;32840:2;;;32888:1;32885;32878:12;32840:2;32923:1;32940:53;32985:7;32965:9;32940:53;:::i;:::-;32930:63;;32902:97;33058:2;33047:9;33043:18;33030:32;-1:-1;;;;;33074:6;33071:30;33068:2;;;33114:1;33111;33104:12;33068:2;33134:78;33204:7;33195:6;33184:9;33180:22;33134:78;:::i;:::-;33124:88;;33009:209;33277:2;33266:9;33262:18;33249:32;-1:-1;;;;;33293:6;33290:30;33287:2;;;33333:1;33330;33323:12;33287:2;33353:78;33423:7;33414:6;33403:9;33399:22;33353:78;:::i;33454:879::-;;;;;;33651:3;33639:9;33630:7;33626:23;33622:33;33619:2;;;33668:1;33665;33658:12;33619:2;33703:1;33720:53;33765:7;33745:9;33720:53;:::i;:::-;33710:63;;33682:97;33810:2;33828:53;33873:7;33864:6;33853:9;33849:22;33828:53;:::i;34340:392::-;;34480:2;34468:9;34459:7;34455:23;34451:32;34448:2;;;34496:1;34493;34486:12;34448:2;34531:24;;-1:-1;;;;;34564:30;;34561:2;;;34607:1;34604;34597:12;34561:2;34627:89;34708:7;34699:6;34688:9;34684:22;34627:89;:::i;34739:419::-;;;34889:2;34877:9;34868:7;34864:23;34860:32;34857:2;;;34905:1;34902;34895:12;34857:2;34940:31;;-1:-1;;;;;34980:30;;34977:2;;;35023:1;35020;35013:12;34977:2;35051:91;35134:7;35125:6;35114:9;35110:22;35051:91;:::i;:::-;35033:109;;;;34919:229;34851:307;;;;;:::o;35165:799::-;;;;35371:2;35359:9;35350:7;35346:23;35342:32;35339:2;;;35387:1;35384;35377:12;35339:2;35422:31;;-1:-1;;;;;35462:30;;35459:2;;;35505:1;35502;35495:12;35459:2;35525:87;35604:7;35595:6;35584:9;35580:22;35525:87;:::i;:::-;35515:97;;35401:217;35677:2;35666:9;35662:18;35649:32;-1:-1;;;;;35693:6;35690:30;35687:2;;;35733:1;35730;35723:12;35687:2;35753:87;35832:7;35823:6;35812:9;35808:22;35753:87;:::i;:::-;35743:97;;35628:218;35877:2;35895:53;35940:7;35931:6;35920:9;35916:22;35895:53;:::i;35971:425::-;;36124:2;36112:9;36103:7;36099:23;36095:32;36092:2;;;36140:1;36137;36130:12;36092:2;36175:31;;-1:-1;;;;;36215:30;;36212:2;;;36258:1;36255;36248:12;36212:2;36278:102;36372:7;36363:6;36352:9;36348:22;36278:102;:::i;36403:550::-;;;36573:2;36561:9;36552:7;36548:23;36544:32;36541:2;;;36589:1;36586;36579:12;36541:2;36624:31;;-1:-1;;;;;36664:30;;36661:2;;;36707:1;36704;36697:12;36661:2;36727:102;36821:7;36812:6;36801:9;36797:22;36727:102;:::i;:::-;36717:112;;36603:232;36866:2;36884:53;36929:7;36920:6;36909:9;36905:22;36884:53;:::i;36960:675::-;;;;37147:2;37135:9;37126:7;37122:23;37118:32;37115:2;;;37163:1;37160;37153:12;37115:2;37198:31;;-1:-1;;;;;37238:30;;37235:2;;;37281:1;37278;37271:12;37235:2;37301:102;37395:7;37386:6;37375:9;37371:22;37301:102;:::i;:::-;37291:112;;37177:232;37440:2;37458:53;37503:7;37494:6;37483:9;37479:22;37458:53;:::i;:::-;37448:63;;37419:98;37548:2;37566:53;37611:7;37602:6;37591:9;37587:22;37566:53;:::i;37642:390::-;;37781:2;37769:9;37760:7;37756:23;37752:32;37749:2;;;37797:1;37794;37787:12;37749:2;37832:24;;-1:-1;;;;;37865:30;;37862:2;;;37908:1;37905;37898:12;37862:2;37928:88;38008:7;37999:6;37988:9;37984:22;37928:88;:::i;38039:909::-;;;;38300:2;38288:9;38279:7;38275:23;38271:32;38268:2;;;38316:1;38313;38306:12;38268:2;38351:31;;-1:-1;;;;;38391:30;;38388:2;;;38434:1;38431;38424:12;38388:2;38454:106;38552:7;38543:6;38532:9;38528:22;38454:106;:::i;:::-;38444:116;;38330:236;38625:2;38614:9;38610:18;38597:32;-1:-1;;;;;38641:6;38638:30;38635:2;;;38681:1;38678;38671:12;38635:2;38701:105;38798:7;38789:6;38778:9;38774:22;38701:105;:::i;:::-;38691:115;;38576:236;38843:2;38861:71;38924:7;38915:6;38904:9;38900:22;38861:71;:::i;38955:392::-;;39095:2;39083:9;39074:7;39070:23;39066:32;39063:2;;;39111:1;39108;39101:12;39063:2;39146:24;;-1:-1;;;;;39179:30;;39176:2;;;39222:1;39219;39212:12;39176:2;39242:89;39323:7;39314:6;39303:9;39299:22;39242:89;:::i;39354:657::-;;;39536:2;39524:9;39515:7;39511:23;39507:32;39504:2;;;39552:1;39549;39542:12;39504:2;39587:24;;-1:-1;;;;;39620:30;;39617:2;;;39663:1;39660;39653:12;39617:2;39683:89;39764:7;39755:6;39744:9;39740:22;39683:89;:::i;:::-;39673:99;;39566:212;39830:2;39819:9;39815:18;39809:25;-1:-1;;;;;39846:6;39843:30;39840:2;;;39886:1;39883;39876:12;39840:2;39906:89;39987:7;39978:6;39967:9;39963:22;39906:89;:::i;40018:257::-;;40130:2;40118:9;40109:7;40105:23;40101:32;40098:2;;;40146:1;40143;40136:12;40098:2;40181:1;40198:61;40251:7;40231:9;40198:61;:::i;40282:263::-;;40397:2;40385:9;40376:7;40372:23;40368:32;40365:2;;;40413:1;40410;40403:12;40365:2;40448:1;40465:64;40521:7;40501:9;40465:64;:::i;40552:1141::-;;;;;40840:3;40828:9;40819:7;40815:23;40811:33;40808:2;;;40857:1;40854;40847:12;40808:2;40892:1;40909:79;40980:7;40960:9;40909:79;:::i;:::-;40899:89;;40871:123;41053:2;41042:9;41038:18;41025:32;-1:-1;;;;;41069:6;41066:30;41063:2;;;41109:1;41106;41099:12;41063:2;41129:110;41231:7;41222:6;41211:9;41207:22;41129:110;:::i;41700:881::-;;;;;41944:3;41932:9;41923:7;41919:23;41915:33;41912:2;;;41961:1;41958;41951:12;41912:2;41996:1;42013:69;42074:7;42054:9;42013:69;:::i;:::-;42003:79;;41975:113;42119:2;42137:77;42206:7;42197:6;42186:9;42182:22;42137:77;:::i;:::-;42127:87;;42098:122;42251:2;42269:77;42338:7;42329:6;42318:9;42314:22;42269:77;:::i;42588:917::-;;;;;42807:3;42795:9;42786:7;42782:23;42778:33;42775:2;;;42824:1;42821;42814:12;42775:2;42859:1;42876:67;42935:7;42915:9;42876:67;:::i;43512:821::-;;;;;43726:3;43714:9;43705:7;43701:23;43697:33;43694:2;;;43743:1;43740;43733:12;43694:2;43778:1;43795:87;43874:7;43854:9;43795:87;:::i;:::-;43785:97;;43757:131;43919:2;43937:53;43982:7;43973:6;43962:9;43958:22;43937:53;:::i;:::-;43927:63;;43898:98;44027:2;44045:53;44090:7;44081:6;44070:9;44066:22;44045:53;:::i;44340:865::-;;;;44579:2;44567:9;44558:7;44554:23;44550:32;44547:2;;;44595:1;44592;44585:12;44547:2;44630:1;44647:80;44719:7;44699:9;44647:80;:::i;:::-;44637:90;;44609:124;44792:2;44781:9;44777:18;44764:32;-1:-1;;;;;44808:6;44805:30;44802:2;;;44848:1;44845;44838:12;44802:2;44868:102;44962:7;44953:6;44942:9;44938:22;44868:102;:::i;45212:311::-;;45351:2;45339:9;45330:7;45326:23;45322:32;45319:2;;;45367:1;45364;45357:12;45319:2;45402:1;45419:88;45499:7;45479:9;45419:88;:::i;45530:805::-;;;;;45736:3;45724:9;45715:7;45711:23;45707:33;45704:2;;;45753:1;45750;45743:12;45704:2;45788:1;45805:79;45876:7;45856:9;45805:79;:::i;46342:508::-;;;46528:3;46516:9;46507:7;46503:23;46499:33;46496:2;;;46545:1;46542;46535:12;46496:2;46580:1;46597:90;46679:7;46659:9;46597:90;:::i;:::-;46587:100;;46559:134;46724:2;46742:92;46826:7;46817:6;46806:9;46802:22;46742:92;:::i;46857:599::-;;;;47038:2;47026:9;47017:7;47013:23;47009:32;47006:2;;;47054:1;47051;47044:12;47006:2;47089:1;47106:80;47178:7;47158:9;47106:80;:::i;:::-;47096:90;;47068:124;47223:2;47241:72;47305:7;47296:6;47285:9;47281:22;47241:72;:::i;:::-;47231:82;;47202:117;47350:2;47368:72;47432:7;47423:6;47412:9;47408:22;47368:72;:::i;48255:261::-;;48369:2;48357:9;48348:7;48344:23;48340:32;48337:2;;;48385:1;48382;48375:12;48337:2;48420:1;48437:63;48492:7;48472:9;48437:63;:::i;48523:452::-;;;48681:3;48669:9;48660:7;48656:23;48652:33;48649:2;;;48698:1;48695;48688:12;48649:2;48733:1;48750:63;48805:7;48785:9;48750:63;:::i;:::-;48740:73;;48712:107;48850:2;48868:91;48951:7;48942:6;48931:9;48927:22;48868:91;:::i;48982:828::-;;;;;49199:3;49187:9;49178:7;49174:23;49170:33;49167:2;;;49216:1;49213;49206:12;49167:2;49251:1;49268:90;49350:7;49330:9;49268:90;:::i;:::-;49258:100;;49230:134;49395:2;49413:53;49458:7;49449:6;49438:9;49434:22;49413:53;:::i;:::-;49403:63;;49374:98;49503:2;49521:53;49566:7;49557:6;49546:9;49542:22;49521:53;:::i;:::-;49511:63;;49482:98;49639:3;49628:9;49624:19;49611:33;-1:-1;;;;;49656:6;49653:30;49650:2;;;49696:1;49693;49686:12;49817:909;;;;;50032:3;50020:9;50011:7;50007:23;50003:33;50000:2;;;50049:1;50046;50039:12;50000:2;50084:31;;-1:-1;;;;;50124:30;;50121:2;;;50167:1;50164;50157:12;50121:2;50187:88;50267:7;50258:6;50247:9;50243:22;50187:88;:::i;50733:805::-;;;;;50938:3;50926:9;50917:7;50913:23;50909:33;50906:2;;;50955:1;50952;50945:12;50906:2;50990:1;51007:80;51079:7;51059:9;51007:80;:::i;:::-;50997:90;;50969:124;51124:2;51142:52;51186:7;51177:6;51166:9;51162:22;51142:52;:::i;:::-;51132:62;;51103:97;51231:3;51250:52;51294:7;51285:6;51274:9;51270:22;51250:52;:::i;:::-;51240:62;;51210:98;51367:3;51356:9;51352:19;51339:33;-1:-1;;;;;51384:6;51381:30;51378:2;;;51424:1;51421;51414:12;51545:820;;;;;51758:3;51746:9;51737:7;51733:23;51729:33;51726:2;;;51775:1;51772;51765:12;51726:2;51810:1;51827:86;51905:7;51885:9;51827:86;:::i;52372:807::-;;;;;52578:3;52566:9;52557:7;52553:23;52549:33;52546:2;;;52595:1;52592;52585:12;52546:2;52630:1;52647:79;52718:7;52698:9;52647:79;:::i;:::-;52637:89;;52609:123;52763:2;52781:53;52826:7;52817:6;52806:9;52802:22;52781:53;:::i;:::-;52771:63;;52742:98;52871:3;52890:53;52935:7;52926:6;52915:9;52911:22;52890:53;:::i;53186:640::-;;;;53397:3;53385:9;53376:7;53372:23;53368:33;53365:2;;;53414:1;53411;53404:12;53365:2;53449:1;53466:81;53539:7;53519:9;53466:81;:::i;:::-;53456:91;;53428:125;53584:3;53603:80;53675:7;53666:6;53655:9;53651:22;53603:80;:::i;:::-;53593:90;;53563:126;53720:3;53739:71;53802:7;53793:6;53782:9;53778:22;53739:71;:::i;53833:815::-;;;;;54043:3;54031:9;54022:7;54018:23;54014:33;54011:2;;;54060:1;54057;54050:12;54011:2;54095:1;54112:83;54187:7;54167:9;54112:83;:::i;54655:585::-;;;;54828:3;54816:9;54807:7;54803:23;54799:33;54796:2;;;54845:1;54842;54835:12;54796:2;54880:1;54897:91;54980:7;54960:9;54897:91;:::i;:::-;54887:101;;54859:135;55025:2;55043:64;55099:7;55090:6;55079:9;55075:22;55043:64;:::i;:::-;55033:74;;55004:109;55144:3;55163:61;55216:7;55207:6;55196:9;55192:22;55163:61;:::i;55247:261::-;;55361:2;55349:9;55340:7;55336:23;55332:32;55329:2;;;55377:1;55374;55367:12;55329:2;55412:1;55429:63;55484:7;55464:9;55429:63;:::i;55785:393::-;;;55914:2;55902:9;55893:7;55889:23;55885:32;55882:2;;;55930:1;55927;55920:12;55882:2;55965:1;55982:64;56038:7;56018:9;55982:64;:::i;:::-;55972:74;;55944:108;56083:2;56101:61;56154:7;56145:6;56134:9;56130:22;56101:61;:::i;56185:399::-;;;56317:2;56305:9;56296:7;56292:23;56288:32;56285:2;;;56333:1;56330;56323:12;56285:2;56368:1;56385:64;56441:7;56421:9;56385:64;:::i;:::-;56375:74;;56347:108;56486:2;56504:64;56560:7;56551:6;56540:9;56536:22;56504:64;:::i;56591:535::-;;;;56740:2;56728:9;56719:7;56715:23;56711:32;56708:2;;;56756:1;56753;56746:12;56708:2;56791:1;56808:64;56864:7;56844:9;56808:64;:::i;:::-;56798:74;;56770:108;56909:2;56927:64;56983:7;56974:6;56963:9;56959:22;56927:64;:::i;:::-;56917:74;;56888:109;57028:2;57046:64;57102:7;57093:6;57082:9;57078:22;57046:64;:::i;57133:809::-;;;;;;57316:3;57304:9;57295:7;57291:23;57287:33;57284:2;;;57333:1;57330;57323:12;57284:2;57368:1;57385:64;57441:7;57421:9;57385:64;:::i;:::-;57375:74;;57347:108;57486:2;57504:64;57560:7;57551:6;57540:9;57536:22;57504:64;:::i;:::-;57494:74;;57465:109;57605:2;57623:64;57679:7;57670:6;57659:9;57655:22;57623:64;:::i;:::-;57613:74;;57584:109;57724:2;57742:64;57798:7;57789:6;57778:9;57774:22;57742:64;:::i;:::-;57732:74;;57703:109;57843:3;57862:64;57918:7;57909:6;57898:9;57894:22;57862:64;:::i;57949:259::-;;58062:2;58050:9;58041:7;58037:23;58033:32;58030:2;;;58078:1;58075;58068:12;58030:2;58113:1;58130:62;58184:7;58164:9;58130:62;:::i;58216:173::-;;58303:46;58345:3;58337:6;58303:46;:::i;:::-;-1:-1;;58378:4;58369:14;;58296:93::o;58398:173::-;;58485:46;58527:3;58519:6;58485:46;:::i;58580:189::-;;58699:64;58759:3;58751:6;58699:64;:::i;58778:281::-;;58943:110;59049:3;59041:6;58943:110;:::i;59068:269::-;;59227:104;59327:3;59319:6;59227:104;:::i;59346:285::-;;59489:102;59587:3;59579:6;59489:102;:::i;:::-;-1:-1;;59620:4;59611:14;;59482:149::o;59821:142::-;59912:45;59951:5;59912:45;:::i;:::-;59907:3;59900:58;59894:69;;:::o;59970:127::-;60059:32;60085:5;60059:32;:::i;60365:690::-;;60510:54;60558:5;60510:54;:::i;:::-;60577:86;60656:6;60651:3;60577:86;:::i;:::-;60570:93;;60684:56;60734:5;60684:56;:::i;:::-;60760:7;60788:1;60773:260;60798:6;60795:1;60792:13;60773:260;;;60865:6;60859:13;60886:63;60945:3;60930:13;60886:63;:::i;:::-;60879:70;;60966:60;61019:6;60966:60;:::i;:::-;60956:70;-1:-1;;60820:1;60813:9;60773:260;;;-1:-1;61046:3;;60489:566;-1:-1;;;;;60489:566::o;61094:690::-;;61239:54;61287:5;61239:54;:::i;:::-;61306:86;61385:6;61380:3;61306:86;:::i;:::-;61299:93;;61413:56;61463:5;61413:56;:::i;:::-;61489:7;61517:1;61502:260;61527:6;61524:1;61521:13;61502:260;;;61594:6;61588:13;61615:63;61674:3;61659:13;61615:63;:::i;:::-;61608:70;;61695:60;61748:6;61695:60;:::i;:::-;61685:70;-1:-1;;61549:1;61542:9;61502:260;;61819:920;;61982:63;62039:5;61982:63;:::i;:::-;62058:95;62146:6;62141:3;62058:95;:::i;:::-;62051:102;;62176:3;62218:4;62210:6;62206:17;62201:3;62197:27;62245:65;62304:5;62245:65;:::i;:::-;62330:7;62358:1;62343:357;62368:6;62365:1;62362:13;62343:357;;;62430:9;62424:4;62420:20;62415:3;62408:33;62475:6;62469:13;62497:82;62574:4;62559:13;62497:82;:::i;:::-;62489:90;;62596:69;62658:6;62596:69;:::i;:::-;62688:4;62679:14;;;;;62586:79;-1:-1;;62390:1;62383:9;62343:357;;;-1:-1;62713:4;;61961:778;-1:-1;;;;;;;61961:778::o;62838:1104::-;;63047:86;63127:5;63047:86;:::i;:::-;63146:118;63257:6;63252:3;63146:118;:::i;:::-;63139:125;;63287:3;63329:4;63321:6;63317:17;63312:3;63308:27;63356:88;63438:5;63356:88;:::i;:::-;63464:7;63492:1;63477:426;63502:6;63499:1;63496:13;63477:426;;;63564:9;63558:4;63554:20;63549:3;63542:33;63609:6;63603:13;63631:128;63754:4;63739:13;63631:128;:::i;:::-;63623:136;;63776:92;63861:6;63776:92;:::i;:::-;63891:4;63882:14;;;;;63766:102;-1:-1;;63524:1;63517:9;63477:426;;64041:1080;;64244:83;64321:5;64244:83;:::i;:::-;64340:115;64448:6;64443:3;64340:115;:::i;:::-;64333:122;;64478:3;64520:4;64512:6;64508:17;64503:3;64499:27;64547:85;64626:5;64547:85;:::i;:::-;64652:7;64680:1;64665:417;64690:6;64687:1;64684:13;64665:417;;;64752:9;64746:4;64742:20;64737:3;64730:33;64797:6;64791:13;64819:122;64936:4;64921:13;64819:122;:::i;:::-;64811:130;;64958:89;65040:6;64958:89;:::i;:::-;65070:4;65061:14;;;;;64948:99;-1:-1;;64712:1;64705:9;64665:417;;65178:914;;65379:82;65455:5;65379:82;:::i;:::-;65474:114;65581:6;65576:3;65474:114;:::i;:::-;65467:121;;65609:84;65687:5;65609:84;:::i;:::-;65713:7;65741:1;65726:344;65751:6;65748:1;65745:13;65726:344;;;65818:6;65812:13;65839:119;65954:3;65939:13;65839:119;:::i;:::-;65832:126;;65975:88;66056:6;65975:88;:::i;:::-;65965:98;-1:-1;;65773:1;65766:9;65726:344;;66131:690;;66276:54;66324:5;66276:54;:::i;:::-;66343:86;66422:6;66417:3;66343:86;:::i;:::-;66336:93;;66450:56;66500:5;66450:56;:::i;:::-;66526:7;66554:1;66539:260;66564:6;66561:1;66558:13;66539:260;;;66631:6;66625:13;66652:63;66711:3;66696:13;66652:63;:::i;:::-;66645:70;;66732:60;66785:6;66732:60;:::i;:::-;66722:70;-1:-1;;66586:1;66579:9;66539:260;;66829:94;66896:21;66911:5;66896:21;:::i;67041:103::-;67114:24;67132:5;67114:24;:::i;67271:100::-;67342:23;67359:5;67342:23;:::i;67401:310::-;;67533:88;67614:6;67609:3;67533:88;:::i;:::-;67526:95;;67633:43;67669:6;67664:3;67657:5;67633:43;:::i;:::-;-1:-1;;67689:16;;67519:192::o;67719:323::-;;67819:38;67851:5;67819:38;:::i;:::-;67869:60;67922:6;67917:3;67869:60;:::i;:::-;67862:67;;67934:52;67979:6;67974:3;67967:4;67960:5;67956:16;67934:52;:::i;:::-;68007:29;68029:6;68007:29;:::i;:::-;67998:39;;;;67799:243;-1:-1;;;67799:243::o;68399:356::-;;68527:38;68559:5;68527:38;:::i;:::-;68577:88;68658:6;68653:3;68577:88;:::i;:::-;68570:95;;68670:52;68715:6;68710:3;68703:4;68696:5;68692:16;68670:52;:::i;:::-;68734:16;;;;;68507:248;-1:-1;;68507:248::o;68762:164::-;68859:61;68914:5;68859:61;:::i;69977:164::-;70079:56;70129:5;70079:56;:::i;70148:194::-;70265:71;70330:5;70265:71;:::i;70504:150::-;70599:49;70642:5;70599:49;:::i;70661:110::-;70742:23;70759:5;70742:23;:::i;70778:140::-;70868:44;70906:5;70868:44;:::i;70926:374::-;;71086:67;71150:2;71145:3;71086:67;:::i;:::-;71186:34;71166:55;;-1:-1;;;71250:2;71241:12;;71234:29;71291:2;71282:12;;71072:228;-1:-1;;71072:228::o;71309:166::-;-1:-1;;;71445:24;;71438:37::o;71484:166::-;-1:-1;;;71620:24;;71613:37::o;71659:383::-;;71819:67;71883:2;71878:3;71819:67;:::i;:::-;71919:34;71899:55;;-1:-1;;;71983:2;71974:12;;71967:38;72033:2;72024:12;;71805:237;-1:-1;;71805:237::o;72051:373::-;;72211:67;72275:2;72270:3;72211:67;:::i;:::-;72311:34;72291:55;;-1:-1;;;72375:2;72366:12;;72359:28;72415:2;72406:12;;72197:227;-1:-1;;72197:227::o;72517:1060::-;72740:23;;72517:1060;;72672:4;72663:14;;;72769:63;72667:3;72740:23;72769:63;:::i;:::-;72692:146;72919:4;72912:5;72908:16;72902:23;72931:63;72988:4;72983:3;72979:14;72965:12;72931:63;:::i;:::-;72848:152;73082:4;73075:5;73071:16;73065:23;73094:63;73151:4;73146:3;73142:14;73128:12;73094:63;:::i;:::-;73010:153;73238:4;73231:5;73227:16;73221:23;73250:63;73307:4;73302:3;73298:14;73284:12;73250:63;:::i;:::-;73173:146;73396:4;73389:5;73385:16;73379:23;73448:3;73442:4;73438:14;73431:4;73426:3;73422:14;73415:38;73468:71;73534:4;73520:12;73468:71;:::i;73669:564::-;73884:23;;73818:4;73920:38;;;73669:564;;73809:14;;;;73973:71;73809:14;73884:23;73973:71;:::i;:::-;73965:79;;73838:218;74132:4;74125:5;74121:16;74115:23;74144:57;74195:4;74190:3;74186:14;74172:12;74144:57;:::i;74309:678::-;74529:23;;74456:4;74447:14;;;74558:63;74451:3;74529:23;74558:63;:::i;:::-;74476:151;74721:4;74714:5;74710:16;74704:23;74733:61;74788:4;74783:3;74779:14;74765:12;74733:61;:::i;:::-;74637:163;74893:4;74886:5;74882:16;74876:23;74905:61;74960:4;74955:3;74951:14;74937:12;74905:61;:::i;:::-;74810:162;74429:558;;;:::o;75081:839::-;75308:23;;75240:4;75231:14;;;75337:63;75235:3;75308:23;75337:63;:::i;:::-;75260:146;75494:4;75487:5;75483:16;75477:23;75506:57;75557:4;75552:3;75548:14;75534:12;75506:57;:::i;:::-;75416:153;75647:4;75640:5;75636:16;75630:23;75659:79;75732:4;75727:3;75723:14;75709:12;75659:79;:::i;:::-;75579:165;75830:4;75823:5;75819:16;75813:23;75842:57;75893:4;75888:3;75884:14;75870:12;75842:57;:::i;75994:582::-;76218:23;;75994:582;;76145:4;76136:14;;;76247:63;76140:3;76218:23;76247:63;:::i;:::-;76165:151;76395:4;76388:5;76384:16;76378:23;76447:3;76441:4;76437:14;76430:4;76425:3;76421:14;76414:38;76467:71;76533:4;76519:12;76467:71;:::i;76648:2141::-;76871:23;;76797:6;76788:16;;;76900:87;76792:3;76871:23;76900:87;:::i;:::-;76819:174;77072:4;77065:5;77061:16;77055:23;77084:87;77165:4;77160:3;77156:14;77142:12;77084:87;:::i;:::-;77003:174;77257:4;77250:5;77246:16;77240:23;77269:63;77326:4;77321:3;77317:14;77303:12;77269:63;:::i;:::-;77187:151;77418:4;77411:5;77407:16;77401:23;77430:63;77487:4;77482:3;77478:14;77464:12;77430:63;:::i;:::-;77348:151;77587:4;77580:5;77576:16;77570:23;77599:63;77656:4;77651:3;77647:14;77633:12;77599:63;:::i;:::-;77509:159;77742:4;77735:5;77731:16;77725:23;77754:63;77811:4;77806:3;77802:14;77788:12;77754:63;:::i;:::-;77678:145;77897:4;77890:5;77886:16;77880:23;77909:63;77966:4;77961:3;77957:14;77943:12;77909:63;:::i;:::-;77833:145;78053:4;78046:5;78042:16;78036:23;78065:63;78122:4;78117:3;78113:14;78099:12;78065:63;:::i;:::-;77988:146;78215:6;78208:5;78204:18;78198:25;78229:65;78286:6;78281:3;78277:16;78263:12;78229:65;:::i;:::-;78144:156;78373:6;78366:5;78362:18;78356:25;78387:65;78444:6;78439:3;78435:16;78421:12;78387:65;:::i;:::-;78310:148;78533:6;78526:5;78522:18;78516:25;78547:63;78602:6;78597:3;78593:16;78579:12;78547:63;:::i;:::-;78468:148;78689:6;78682:5;78678:18;78672:25;78703:65;78760:6;78755:3;78751:16;78737:12;78703:65;:::i;78859:800::-;79081:23;;79006:4;78997:14;;;79110:79;79001:3;79081:23;79110:79;:::i;:::-;79026:169;79265:4;79258:5;79254:16;79248:23;79277:59;79330:4;79325:3;79321:14;79307:12;79277:59;:::i;:::-;79205:137;79412:4;79405:5;79401:16;79395:23;79424:63;79481:4;79476:3;79472:14;79458:12;79424:63;:::i;:::-;79352:141;79563:4;79556:5;79552:16;79546:23;79575:63;79632:4;79627:3;79623:14;79609:12;79575:63;:::i;79709:620::-;79914:23;;79848:4;79839:14;;;79943:63;79843:3;79914:23;79943:63;:::i;:::-;79868:144;80083:4;80076:5;80072:16;80066:23;80095:63;80152:4;80147:3;80143:14;80129:12;80095:63;:::i;:::-;80022:142;80239:4;80232:5;80228:16;80222:23;80251:57;80302:4;80297:3;80293:14;80279:12;80251:57;:::i;81016:103::-;81089:24;81107:5;81089:24;:::i;81126:110::-;81207:23;81224:5;81207:23;:::i;81473:100::-;81544:23;81561:5;81544:23;:::i;81580:97::-;81649:22;81665:5;81649:22;:::i;81684:291::-;;81847:103;81946:3;81937:6;81929;81847:103;:::i;81982:271::-;;82135:93;82224:3;82215:6;82135:93;:::i;82260:222::-;82387:2;82372:18;;82401:71;82376:9;82445:6;82401:71;:::i;82489:349::-;82652:2;82637:18;;82666:79;82641:9;82718:6;82666:79;:::i;:::-;82756:72;82824:2;82813:9;82809:18;82800:6;82756:72;:::i;82845:333::-;83000:2;82985:18;;83014:71;82989:9;83058:6;83014:71;:::i;:::-;83096:72;83164:2;83153:9;83149:18;83140:6;83096:72;:::i;83185:556::-;83396:3;83381:19;;83411:71;83385:9;83455:6;83411:71;:::i;:::-;83493:72;83561:2;83550:9;83546:18;83537:6;83493:72;:::i;:::-;83576;83644:2;83633:9;83629:18;83620:6;83576:72;:::i;:::-;83659;83727:2;83716:9;83712:18;83703:6;83659:72;:::i;83748:704::-;84009:3;83994:19;;84024:71;83998:9;84068:6;84024:71;:::i;:::-;84106:72;84174:2;84163:9;84159:18;84150:6;84106:72;:::i;:::-;84189;84257:2;84246:9;84242:18;84233:6;84189:72;:::i;:::-;84309:9;84303:4;84299:20;84294:2;84283:9;84279:18;84272:48;84334:108;84437:4;84428:6;84334:108;:::i;84459:592::-;84692:2;84677:18;;84706:71;84681:9;84750:6;84706:71;:::i;:::-;84788:72;84856:2;84845:9;84841:18;84832:6;84788:72;:::i;:::-;84908:9;84902:4;84898:20;84893:2;84882:9;84878:18;84871:48;84933:108;85036:4;85027:6;84933:108;:::i;85058:852::-;85369:3;85354:19;;85384:71;85358:9;85428:6;85384:71;:::i;:::-;85466:72;85534:2;85523:9;85519:18;85510:6;85466:72;:::i;:::-;85586:9;85580:4;85576:20;85571:2;85560:9;85556:18;85549:48;85611:108;85714:4;85705:6;85611:108;:::i;:::-;85603:116;;85767:9;85761:4;85757:20;85752:2;85741:9;85737:18;85730:48;85792:108;85895:4;85886:6;85792:108;:::i;85917:432::-;86094:2;86079:18;;86108:71;86083:9;86152:6;86108:71;:::i;:::-;86190:72;86258:2;86247:9;86243:18;86234:6;86190:72;:::i;:::-;86273:66;86335:2;86324:9;86320:18;86311:6;86273:66;:::i;86356:440::-;86537:2;86522:18;;86551:71;86526:9;86595:6;86551:71;:::i;:::-;86633:72;86701:2;86690:9;86686:18;86677:6;86633:72;:::i;:::-;86716:70;86782:2;86771:9;86767:18;86758:6;86716:70;:::i;86803:444::-;86986:2;86971:18;;87000:71;86975:9;87044:6;87000:71;:::i;:::-;87082:72;87150:2;87139:9;87135:18;87126:6;87082:72;:::i;:::-;87165;87233:2;87222:9;87218:18;87209:6;87165:72;:::i;87254:481::-;87459:2;87444:18;;87473:71;87448:9;87517:6;87473:71;:::i;:::-;87592:9;87586:4;87582:20;87577:2;87566:9;87562:18;87555:48;87617:108;87720:4;87711:6;87617:108;:::i;87742:740::-;88025:2;88010:18;;88039:71;88014:9;88083:6;88039:71;:::i;:::-;88158:9;88152:4;88148:20;88143:2;88132:9;88128:18;88121:48;88183:108;88286:4;88277:6;88183:108;:::i;:::-;88175:116;;88339:9;88333:4;88329:20;88324:2;88313:9;88309:18;88302:48;88364:108;88467:4;88458:6;88364:108;:::i;88489:481::-;88694:2;88679:18;;88708:71;88683:9;88752:6;88708:71;:::i;:::-;88827:9;88821:4;88817:20;88812:2;88801:9;88797:18;88790:48;88852:108;88955:4;88946:6;88852:108;:::i;88977:333::-;89132:2;89117:18;;89146:71;89121:9;89190:6;89146:71;:::i;89317:458::-;89507:2;89492:18;;89521:71;89496:9;89565:6;89521:71;:::i;:::-;89603:72;89671:2;89660:9;89656:18;89647:6;89603:72;:::i;:::-;89686:79;89761:2;89750:9;89746:18;89737:6;89686:79;:::i;89782:629::-;90037:2;90051:47;;;90022:18;;90112:108;90022:18;90206:6;90112:108;:::i;:::-;90104:116;;90268:9;90262:4;90258:20;90253:2;90242:9;90238:18;90231:48;90293:108;90396:4;90387:6;90293:108;:::i;90418:481::-;90623:2;90637:47;;;90608:18;;90698:108;90608:18;90792:6;90698:108;:::i;:::-;90690:116;;90817:72;90885:2;90874:9;90870:18;90861:6;90817:72;:::i;90906:629::-;91161:2;91175:47;;;91146:18;;91236:108;91146:18;91330:6;91236:108;:::i;91542:924::-;91893:2;91907:47;;;91878:18;;91968:126;91878:18;92080:6;91968:126;:::i;:::-;91960:134;;92142:9;92136:4;92132:20;92127:2;92116:9;92112:18;92105:48;92167:108;92270:4;92261:6;92167:108;:::i;92473:486::-;92708:2;92722:47;;;92693:18;;92783:166;92693:18;92935:6;92783:166;:::i;92966:370::-;93143:2;93157:47;;;93128:18;;93218:108;93128:18;93312:6;93218:108;:::i;93343:210::-;93464:2;93449:18;;93478:65;93453:9;93516:6;93478:65;:::i;93560:580::-;93787:2;93772:18;;93801:65;93776:9;93839:6;93801:65;:::i;:::-;93877:72;93945:2;93934:9;93930:18;93921:6;93877:72;:::i;:::-;93997:9;93991:4;93987:20;93982:2;93971:9;93967:18;93960:48;94022:108;94125:4;94116:6;94022:108;:::i;94147:469::-;94346:2;94331:18;;94360:65;94335:9;94398:6;94360:65;:::i;94623:222::-;94750:2;94735:18;;94764:71;94739:9;94808:6;94764:71;:::i;94852:521::-;95077:2;95062:18;;95091:91;95066:9;95155:6;95091:91;:::i;95380:730::-;95658:2;95643:18;;95672:98;95647:9;95743:6;95672:98;:::i;:::-;95818:9;95812:4;95808:20;95803:2;95792:9;95788:18;95781:48;95843:76;95914:4;95905:6;95843:76;:::i;96117:476::-;96316:2;96301:18;;96330:87;96305:9;96390:6;96330:87;:::i;:::-;96428:72;96496:2;96485:9;96481:18;96472:6;96428:72;:::i;:::-;96511;96579:2;96568:9;96564:18;96555:6;96511:72;:::i;96600:588::-;96827:3;96812:19;;96842:87;96816:9;96902:6;96842:87;:::i;:::-;96940:72;97008:2;96997:9;96993:18;96984:6;96940:72;:::i;:::-;97023;97091:2;97080:9;97076:18;97067:6;97023:72;:::i;:::-;97106;97174:2;97163:9;97159:18;97150:6;97106:72;:::i;97195:498::-;97432:3;97417:19;;97447:97;97421:9;97517:6;97447:97;:::i;:::-;97555:128;97679:2;97668:9;97664:18;97655:6;97555:128;:::i;98183:736::-;98460:3;98445:19;;98475:87;98449:9;98535:6;98475:87;:::i;98926:482::-;99128:2;99113:18;;99142:90;99117:9;99205:6;99142:90;:::i;:::-;99243:72;99311:2;99300:9;99296:18;99287:6;99243:72;:::i;99415:512::-;99632:2;99617:18;;99646:105;99621:9;99724:6;99646:105;:::i;99934:1136::-;100387:3;100372:19;;100402:83;100376:9;100458:6;100402:83;:::i;:::-;100533:9;100527:4;100523:20;100518:2;100507:9;100503:18;100496:48;100558:172;100725:4;100716:6;100558:172;:::i;:::-;100550:180;;100778:9;100772:4;100768:20;100763:2;100752:9;100748:18;100741:48;100803:108;100906:4;100897:6;100803:108;:::i;:::-;100795:116;;100922:138;101056:2;101045:9;101041:18;101032:6;100922:138;:::i;101077:436::-;101256:2;101241:18;;101270:69;101245:9;101312:6;101270:69;:::i;:::-;101350:70;101416:2;101405:9;101401:18;101392:6;101350:70;:::i;101520:438::-;101727:3;101712:19;;101742:69;101716:9;101784:6;101742:69;:::i;:::-;101822:126;101944:2;101933:9;101929:18;101920:6;101822:126;:::i;101965:416::-;102165:2;102179:47;;;102150:18;;102240:131;102150:18;102240:131;:::i;102388:348::-;102578:2;102563:18;;102592:134;102567:9;102592:134;:::i;102743:348::-;102933:2;102918:18;;102947:134;102922:9;102947:134;:::i;103098:416::-;103298:2;103312:47;;;103283:18;;103373:131;103283:18;103373:131;:::i;103521:416::-;103721:2;103735:47;;;103706:18;;103796:131;103706:18;103796:131;:::i;103944:806::-;104255:3;104240:19;;104270:125;104244:9;104368:6;104270:125;:::i;:::-;104406:70;104472:2;104461:9;104457:18;104448:6;104406:70;:::i;:::-;104487:71;104553:3;104542:9;104538:19;104529:6;104487:71;:::i;:::-;104607:9;104601:4;104597:20;104591:3;104580:9;104576:19;104569:49;104632:108;104735:4;104726:6;104632:108;:::i;104757:888::-;105090:2;105104:47;;;105075:18;;105165:108;105075:18;105259:6;105165:108;:::i;:::-;105157:116;;105321:9;105315:4;105311:20;105306:2;105295:9;105291:18;105284:48;105346:108;105449:4;105440:6;105346:108;:::i;105652:555::-;105917:3;105902:19;;105932:127;105906:9;106032:6;105932:127;:::i;:::-;106070;106192:3;106181:9;106177:19;106168:6;106070:127;:::i;106214:703::-;106525:3;106510:19;;106540:127;106514:9;106640:6;106540:127;:::i;:::-;106678;106800:3;106789:9;106785:19;106776:6;106678:127;:::i;:::-;106816:91;106902:3;106891:9;106887:19;106878:6;106816:91;:::i;107153:444::-;107336:2;107321:18;;107350:71;107325:9;107394:6;107350:71;:::i;107604:481::-;107809:2;107794:18;;107823:71;107798:9;107867:6;107823:71;:::i;108092:740::-;108375:2;108360:18;;108389:71;108364:9;108433:6;108389:71;:::i;:::-;108508:9;108502:4;108498:20;108493:2;108482:9;108478:18;108471:48;108533:108;108636:4;108627:6;108533:108;:::i;:::-;108525:116;;108689:9;108683:4;108679:20;108674:2;108663:9;108659:18;108652:48;108714:108;108817:4;108808:6;108714:108;:::i;108839:593::-;109100:2;109085:18;;109114:71;109089:9;109158:6;109114:71;:::i;:::-;109233:9;109227:4;109223:20;109218:2;109207:9;109203:18;109196:48;109258:164;109417:4;109408:6;109258:164;:::i;109439:444::-;109622:2;109607:18;;109636:71;109611:9;109680:6;109636:71;:::i;109890:780::-;110157:3;110142:19;;110172:71;110146:9;110216:6;110172:71;:::i;:::-;110254:72;110322:2;110311:9;110307:18;110298:6;110254:72;:::i;:::-;110337;110405:2;110394:9;110390:18;110381:6;110337:72;:::i;:::-;110420;110488:2;110477:9;110473:18;110464:6;110420:72;:::i;:::-;110503:73;110571:3;110560:9;110556:19;110547:6;110503:73;:::i;:::-;110587;110655:3;110644:9;110640:19;110631:6;110587:73;:::i;110677:506::-;;;110799:25;;-1:-1;;110871:14;110867:29;;;110863:48;110839:73;;110829:2;;110926:1;110923;110916:12;110829:2;110957:18;110947:8;110943:33;110935:41;;111010:4;110997:18;110987:28;;-1:-1;;;;;111027:6;111024:30;111021:2;;;111067:1;111064;111057:12;111021:2;111095;111089:4;111085:13;111077:21;;111149:4;111141:6;111137:17;111121:14;111117:38;111111:4;111107:49;111104:2;;;111169:1;111166;111159:12;111104:2;110767:416;;;;;;:::o;111190:256::-;111252:2;111246:9;111278:17;;;-1:-1;;;;;111338:34;;111374:22;;;111335:62;111332:2;;;111410:1;111407;111400:12;111332:2;111426;111419:22;111230:216;;-1:-1;111230:216::o;111453:304::-;;-1:-1;;;;;111604:6;111601:30;111598:2;;;111644:1;111641;111634:12;111598:2;-1:-1;111679:4;111667:17;;;111732:15;;111535:222::o;114396:321::-;;-1:-1;;;;;114531:6;114528:30;114525:2;;;114571:1;114568;114561:12;114525:2;-1:-1;114702:4;114638;114615:17;;;;-1:-1;;114611:33;114692:15;;114462:255::o;115928:137::-;116031:12;;116002:63::o;118066:178::-;118184:19;;;118233:4;118224:14;;118177:67::o;120129:91::-;;120191:24;120209:5;120191:24;:::i;120333:85::-;120399:13;120392:21;;120375:43::o;120425:72::-;120487:5;120470:27::o;120504:144::-;-1:-1;;;;;;120565:78;;120548:100::o;120655:117::-;;120743:24;120761:5;120743:24;:::i;121983:148::-;122066:5;122072:54;122066:5;122072:54;:::i;122138:178::-;122236:5;122242:69;122236:5;122242:69;:::i;122472:134::-;122548:5;122554:47;122548:5;122554:47;:::i;122613:87::-;122685:2;122674:21;;122657:43::o;122785:113::-;-1:-1;;;;;122847:46;;122830:68::o;122905:84::-;122977:6;122966:18;;122949:40::o;122996:121::-;-1:-1;;;;;123058:54;;123041:76::o;123124:86::-;123196:8;123185:20;;123168:42::o;123296:96::-;-1:-1;;;;;123357:30;;123340:52::o;123399:81::-;123470:4;123459:16;;123442:38::o;123487:129::-;;123574:37;123605:5;123574:37;:::i;125765:148::-;;125863:45;125902:5;125863:45;:::i;125920:178::-;;126033:60;126087:5;126033:60;:::i;126254:134::-;;126345:38;126377:5;126345:38;:::i;126395:114::-;;126481:23;126498:5;126481:23;:::i;126760:145::-;126841:6;126836:3;126831;126818:30;-1:-1;126897:1;126879:16;;126872:27;126811:94::o;126914:268::-;126979:1;126986:101;127000:6;126997:1;126994:13;126986:101;;;127067:11;;;127061:18;127048:11;;;127041:39;127022:2;127015:10;126986:101;;;127102:6;127099:1;127096:13;127093:2;;;-1:-1;;127167:1;127149:16;;127142:27;126963:219::o;127190:97::-;127278:2;127258:14;-1:-1;;127254:28;;127238:49::o;127295:112::-;127385:1;127378:5;127375:12;127365:2;;127391:9;127365:2;127359:48;:::o;127414:127::-;127519:1;127512:5;127509:12;127499:2;;127525:9;127664:105;127747:1;127740:5;127737:12;127727:2;;127753:9;127776:117;127845:24;127863:5;127845:24;:::i;:::-;127838:5;127835:35;127825:2;;127884:1;127881;127874:12;128040:111;128106:21;128121:5;128106:21;:::i;128158:117::-;128227:24;128245:5;128227:24;:::i;128282:115::-;128350:23;128367:5;128350:23;:::i;128404:169::-;128499:50;128543:5;128499:50;:::i;130268:110::-;130353:1;130346:5;130343:12;130333:2;;130369:1;130366;130359:12;130385:112;130472:1;130465:5;130462:12;130452:2;;130488:1;130485;130478:12;130504:115;130572:23;130589:5;130572:23;:::i;130748:117::-;130817:24;130835:5;130817:24;:::i;130872:115::-;130940:23;130957:5;130940:23;:::i;131118:115::-;131186:23;131203:5;131186:23;:::i;131240:113::-;131307:22;131323:5;131307:22;:::i"
            }
        }
    },
    "sourceTreeHashHex": "0x162fa3134952294eee60dbd33edbf8c2986c7cd9787fa2df7823e1e786149054",
    "sources": {
        "./ERC20BridgeSampler.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./AaveV2Sampler.sol\";\nimport \"./AaveV3Sampler.sol\";\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BalancerV2BatchSampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./BancorV3Sampler.sol\";\nimport \"./CompoundSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./GMXSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LidoSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./PlatypusSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SynthetixSampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./VelodromeSampler.sol\";\nimport \"./WooPPSampler.sol\";\nimport \"./UtilitySampler.sol\";\n\ncontract ERC20BridgeSampler is\n    AaveV2Sampler,\n    AaveV3Sampler,\n    BalancerSampler,\n    BalancerV2Sampler,\n    BalancerV2BatchSampler,\n    BancorSampler,\n    BancorV3Sampler,\n    CompoundSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    GMXSampler,\n    KyberDmmSampler,\n    LidoSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    NativeOrderSampler,\n    PlatypusSampler,\n    ShellSampler,\n    SynthetixSampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    VelodromeSampler,\n    WooPPSampler,\n    UtilitySampler\n{\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas) external returns (CallResults[] memory callResults) {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n\n    receive() external payable {}\n}\n"
        },
        "./AaveV2Sampler.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ncontract AaveV2Sampler {\n    /// @dev Sample sell quotes from AaveV2.\n    /// @param aToken address of the aToken.\n    /// @param underlyingToken address of the underlying collateral token.\n    /// @param takerToken address of the taker token (what to sell).\n    /// @param makerToken address of the maker token (what to buy).\n    /// @param takerTokenAmounts taker token buy amounts for each sample\n    /// @return makerTokenAmounts maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromAaveV2(\n        address aToken,\n        address underlyingToken,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public pure returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (takerToken == underlyingToken && makerToken == aToken) {\n            return takerTokenAmounts;\n        }\n\n        // Aave V2 balances sometimes have a rounding error causing\n        // 1 fewer wei from being outputted during unwraps\n        if (takerToken == aToken && makerToken == underlyingToken) {\n            for (uint256 i = 0; i < numSamples; i++) {\n                takerTokenAmounts[i] -= 1;\n            }\n            return takerTokenAmounts;\n        }\n    }\n\n    /// @dev Sample buy quotes from AaveV2.\n    /// @param aToken address of the aToken.\n    /// @param underlyingToken address of the underlying collateral token.\n    /// @param takerToken address of the taker token (what to sell).\n    /// @param makerToken address of the maker token (what to buy).\n    /// @param makerTokenAmounts maker token sell amounts for each sample\n    /// @return takerTokenAmounts taker amounts bought at each maker token\n    ///         amount.\n    function sampleBuysFromAaveV2(\n        address aToken,\n        address underlyingToken,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public pure returns (uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        if (takerToken == underlyingToken && makerToken == aToken) {\n            return makerTokenAmounts;\n        }\n\n        // Aave V2 balances sometimes have a rounding error causing\n        // 1 fewer wei from being outputted during unwraps\n        if (takerToken == aToken && makerToken == underlyingToken) {\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] -= 1;\n            }\n            return makerTokenAmounts;\n        }\n    }\n}\n"
        },
        "./AaveV3Sampler.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n// Minimal Aave V3 L2Encoder interface\ninterface IL2Encoder {\n    /**\n     * @notice Encodes supply parameters from standard input to compact representation of 1 bytes32\n     * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param referralCode referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @return compact representation of supply parameters\n     */\n    function encodeSupplyParams(address asset, uint256 amount, uint16 referralCode) external view returns (bytes32);\n\n    /**\n     * @notice Encodes withdraw parameters from standard input to compact representation of 1 bytes32\n     * @dev Without a to parameter as the compact calls to L2Pool will use msg.sender as to\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     * @return compact representation of withdraw parameters\n     */\n    function encodeWithdrawParams(address asset, uint256 amount) external view returns (bytes32);\n}\n\ncontract AaveV3Sampler {\n    /// @dev Sample sell quotes from AaveV3.\n    /// @param l2Encoder address of the l2 encoder.\n    /// @param aToken address of the aToken.\n    /// @param underlyingToken address of the underlying collateral token.\n    /// @param takerToken address of the taker token (what to sell).\n    /// @param makerToken address of the maker token (what to buy).\n    /// @param takerTokenAmounts taker token buy amounts for each sample\n    /// @return l2Params l2 encoded parameters for each sample\n    /// @return makerTokenAmounts maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromAaveV3(\n        address l2Encoder,\n        address aToken,\n        address underlyingToken,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (bytes32[] memory l2Params, uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        l2Params = new bytes32[](numSamples);\n\n        if (\n            (takerToken == aToken && makerToken == underlyingToken) ||\n            (takerToken == underlyingToken && makerToken == aToken)\n        ) {\n            makerTokenAmounts = takerTokenAmounts;\n            if (l2Encoder == address(0)) {\n                return (l2Params, makerTokenAmounts);\n            }\n\n            IL2Encoder l2 = IL2Encoder(l2Encoder);\n            for (uint256 i = 0; i < numSamples; i++) {\n                if (makerToken == aToken) {\n                    l2Params[i] = l2.encodeSupplyParams(takerToken, makerTokenAmounts[i], 0);\n                } else if (takerToken == aToken) {\n                    l2Params[i] = l2.encodeWithdrawParams(makerToken, makerTokenAmounts[i]);\n                }\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from AaveV3.\n    /// @param l2Encoder address of the l2 encoder.\n    /// @param aToken address of the aToken.\n    /// @param underlyingToken address of the underlying collateral token.\n    /// @param takerToken address of the taker token (what to sell).\n    /// @param makerToken address of the maker token (what to buy).\n    /// @param makerTokenAmounts maker token sell amounts for each sample\n    /// @return l2Params l2 encoded parameters for each sample\n    /// @return takerTokenAmounts taker amounts bought at each maker token\n    ///         amount.\n    function sampleBuysFromAaveV3(\n        address l2Encoder,\n        address aToken,\n        address underlyingToken,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (bytes32[] memory l2Params, uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        l2Params = new bytes32[](numSamples);\n\n        if (\n            (takerToken == aToken && makerToken == underlyingToken) ||\n            (takerToken == underlyingToken && makerToken == aToken)\n        ) {\n            takerTokenAmounts = makerTokenAmounts;\n            if (l2Encoder == address(0)) {\n                return (l2Params, takerTokenAmounts);\n            }\n\n            IL2Encoder l2 = IL2Encoder(l2Encoder);\n            for (uint256 i = 0; i < numSamples; i++) {\n                if (makerToken == aToken) {\n                    l2Params[i] = l2.encodeSupplyParams(takerToken, makerTokenAmounts[i], 0);\n                } else if (takerToken == aToken) {\n                    l2Params[i] = l2.encodeWithdrawParams(makerToken, makerTokenAmounts[i]);\n                }\n            }\n        }\n    }\n}\n"
        },
        "./BalancerSampler.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\n\ncontract BalancerSampler {\n    /// @dev Base gas limit for Balancer calls.\n    uint256 private constant BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 private constant BONE = 10 ** 18;\n    uint256 private constant MAX_IN_RATIO = BONE / 2;\n    uint256 private constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn{gas: BALANCER_CALL_GAS}(\n                    poolState.takerTokenBalance,\n                    poolState.takerTokenWeight,\n                    poolState.makerTokenBalance,\n                    poolState.makerTokenWeight,\n                    takerTokenAmounts[i],\n                    poolState.swapFee\n                )\n            returns (uint256 amount) {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut{gas: BALANCER_CALL_GAS}(\n                    poolState.takerTokenBalance,\n                    poolState.takerTokenWeight,\n                    poolState.makerTokenBalance,\n                    poolState.makerTokenWeight,\n                    makerTokenAmounts[i],\n                    poolState.swapFee\n                )\n            returns (uint256 amount) {\n                // Handles this revert scenario:\n                // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n                if (amount > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                    break;\n                }\n\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b) private pure returns (uint256 c) {\n        uint256 c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint256 c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint256 c2 = c1 / BONE;\n        return c2;\n    }\n}\n"
        },
        "./interfaces/IBalancer.sol": {
            "id": 35,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n\n    function getDenormalizedWeight(address token) external view returns (uint256);\n\n    function getBalance(address token) external view returns (uint256);\n\n    function getSwapFee() external view returns (uint256);\n\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n"
        },
        "./BalancerV2Sampler.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"./interfaces/IBalancerV2Vault.sol\";\nimport \"./BalancerV2Common.sol\";\n\ncontract BalancerV2Sampler is SamplerUtils, BalancerV2Common {\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        IBalancerV2Vault.BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public returns (uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        address[] memory swapAssets = new address[](2);\n        swapAssets[0] = takerToken;\n        swapAssets[1] = makerToken;\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds = _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps = _createSwapSteps(poolInfo, takerTokenAmounts[i]);\n\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            returns (\n                // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n                int256[] memory amounts\n            ) {\n                // Outgoing balance is negative so we need to flip the sign\n                int256 amountOutFromPool = amounts[amounts.length - 1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        IBalancerV2Vault.BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public returns (uint256[] memory takerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        address[] memory swapAssets = new address[](2);\n        swapAssets[0] = takerToken;\n        swapAssets[1] = makerToken;\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds = _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps = _createSwapSteps(poolInfo, makerTokenAmounts[i]);\n\n            try\n                // For buys we specify the makerToken which is what taker will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (int256[] memory amounts) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _createSwapSteps(\n        IBalancerV2Vault.BalancerV2PoolInfo memory poolInfo,\n        uint256 amount\n    ) private pure returns (IBalancerV2Vault.BatchSwapStep[] memory) {\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps = new IBalancerV2Vault.BatchSwapStep[](1);\n        swapSteps[0] = IBalancerV2Vault.BatchSwapStep({\n            poolId: poolInfo.poolId,\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            amount: amount,\n            userData: \"\"\n        });\n\n        return swapSteps;\n    }\n}\n"
        },
        "./SamplerUtils.sol": {
            "id": 24,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract SamplerUtils {\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress) internal view virtual returns (uint8 decimals) {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v) internal pure returns (uint256[] memory arr) {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken) internal pure {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 50,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\nlibrary LibERC20TokenV06 {\n    bytes private constant DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(IERC20TokenV06 token, address spender, uint256 allowance) internal {\n        bytes memory callData = abi.encodeWithSelector(token.approve.selector, spender, allowance);\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(IERC20TokenV06 token, address spender, uint256 amount) internal {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(IERC20TokenV06 token, address to, uint256 amount) internal {\n        bytes memory callData = abi.encodeWithSelector(token.transfer.selector, to, amount);\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(IERC20TokenV06 token, address from, address to, uint256 amount) internal {\n        bytes memory callData = abi.encodeWithSelector(token.transferFrom.selector, from, to, amount);\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token) internal view returns (uint8 tokenDecimals) {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(\n        IERC20TokenV06 token,\n        address owner,\n        address spender\n    ) internal view returns (uint256 allowance_) {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(token.allowance.selector, owner, spender)\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner) internal view returns (uint256 balance) {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(token.balanceOf.selector, owner)\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(address target, bytes memory callData) private {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        // Revert if the call reverted.\n        if (!didSucceed) {\n            LibRichErrorsV06.rrevert(resultData);\n        }\n        // If we get back 0 returndata, this may be a non-standard ERC-20 that\n        // does not return a boolean. Check that it at least contains code.\n        if (resultData.length == 0) {\n            uint256 size;\n            assembly {\n                size := extcodesize(target)\n            }\n            require(size > 0, \"invalid token address, contains no code\");\n            return;\n        }\n        // If we get back at least 32 bytes, we know the target address\n        // contains code, and we assume it is a token that returned a boolean\n        // success value, which must be true.\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return;\n            } else {\n                LibRichErrorsV06.rrevert(resultData);\n            }\n        }\n        // If 0 < returndatasize < 32, the target is a contract, but not a\n        // valid token.\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 56,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nlibrary LibRichErrorsV06 {\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message) internal pure returns (bytes memory) {\n        return abi.encodeWithSelector(STANDARD_ERROR_SELECTOR, bytes(message));\n    }\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData) internal pure {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 51,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\nlibrary LibBytesV06 {\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input) internal pure returns (uint256 memoryAddress) {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input) internal pure returns (uint256 memoryAddress) {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(uint256 dest, uint256 source, uint256 length) internal pure {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    for {\n\n                    } lt(source, sEnd) {\n\n                    } {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    for {\n\n                    } slt(dest, dEnd) {\n\n                    } {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(bytes memory b, uint256 from, uint256 to) internal pure returns (bytes memory result) {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                    from,\n                    to\n                )\n            );\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                    to,\n                    b.length\n                )\n            );\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(result.contentAddress(), b.contentAddress() + from, result.length);\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(bytes memory b, uint256 from, uint256 to) internal pure returns (bytes memory result) {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                    from,\n                    to\n                )\n            );\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                    to,\n                    b.length\n                )\n            );\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b) internal pure returns (bytes1 result) {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                    b.length,\n                    0\n                )\n            );\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(bytes memory lhs, bytes memory rhs) internal pure returns (bool equal) {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(bytes memory b, uint256 index) internal pure returns (address result) {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                    b.length,\n                    index + 20 // 20 is length of address\n                )\n            );\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(bytes memory b, uint256 index, address input) internal pure {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                    b.length,\n                    index + 20 // 20 is length of address\n                )\n            );\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(bytes memory b, uint256 index) internal pure returns (bytes32 result) {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                    b.length,\n                    index + 32\n                )\n            );\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(bytes memory b, uint256 index, bytes32 input) internal pure {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                    b.length,\n                    index + 32\n                )\n            );\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(bytes memory b, uint256 index) internal pure returns (uint256 result) {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(bytes memory b, uint256 index, uint256 input) internal pure {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(bytes memory b, uint256 index) internal pure returns (bytes4 result) {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                    b.length,\n                    index + 4\n                )\n            );\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length) internal pure {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 54,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nlibrary LibBytesRichErrorsV06 {\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR = 0x28006595;\n\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    ) internal pure returns (bytes memory) {\n        return abi.encodeWithSelector(INVALID_BYTE_OPERATION_ERROR_SELECTOR, errorCode, offset, required);\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 49,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\ninterface IERC20TokenV06 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply() external view returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner) external view returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals() external view returns (uint8);\n}\n"
        },
        "./interfaces/IBalancerV2Vault.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n/// @dev Minimal Balancer V2 Vault interface\n///      for documentation refer to https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\ninterface IBalancerV2Vault {\n    enum SwapKind {\n        GIVEN_IN,\n        GIVEN_OUT\n    }\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    struct BalancerV2PoolInfo {\n        bytes32 poolId;\n        address vault;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] calldata swaps,\n        address[] calldata assets,\n        FundManagement calldata funds\n    ) external returns (int256[] memory assetDeltas);\n}\n"
        },
        "./BalancerV2Common.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancerV2Vault.sol\";\n\ncontract BalancerV2Common {\n    function _createSwapFunds() internal view returns (IBalancerV2Vault.FundManagement memory) {\n        return\n            IBalancerV2Vault.FundManagement({\n                sender: address(this),\n                fromInternalBalance: false,\n                recipient: payable(address(this)),\n                toInternalBalance: false\n            });\n    }\n}\n"
        },
        "./BalancerV2BatchSampler.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancerV2Vault.sol\";\nimport \"./BalancerV2Common.sol\";\n\ncontract BalancerV2BatchSampler is BalancerV2Common {\n    // Replaces amount for first step with each takerTokenAmount and calls queryBatchSwap using supplied steps\n    /// @dev Sample sell quotes from Balancer V2 supporting multihops.\n    /// @param swapSteps Array of swap steps (can be >= 1).\n    /// @param swapAssets Array of token address for swaps.\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    function sampleMultihopSellsFromBalancerV2(\n        IBalancerV2Vault vault,\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps,\n        address[] memory swapAssets,\n        uint256[] memory takerTokenAmounts\n    ) public returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds = _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            swapSteps[0].amount = takerTokenAmounts[i];\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            returns (\n                // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n                int256[] memory amounts\n            ) {\n                // Outgoing balance is negative so we need to flip the sign\n                // Note - queryBatchSwap will return a delta for each token in the assets array and last asset should be tokenOut\n                int256 amountOutFromPool = amounts[amounts.length - 1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    // Replaces amount for first step with each makerTokenAmount and calls queryBatchSwap using supplied steps\n    /// @dev Sample buy quotes from Balancer V2 supporting multihops.\n    /// @param swapSteps Array of swap steps (can be >= 1).\n    /// @param swapAssets Array of token address for swaps.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    function sampleMultihopBuysFromBalancerV2(\n        IBalancerV2Vault vault,\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps,\n        address[] memory swapAssets,\n        uint256[] memory makerTokenAmounts\n    ) public returns (uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds = _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            swapSteps[0].amount = makerTokenAmounts[i];\n            try\n                // Uses GIVEN_OUT type for Buy\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (\n                // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n                int256[] memory amounts\n            ) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n"
        },
        "./BancorSampler.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract BancorSampler {\n    /// @dev Base gas limit for Bancor calls.\n    uint256 private constant BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts) {\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try IBancorNetwork(bancorNetwork).rateByPath{gas: BANCOR_CALL_GAS}(path, takerTokenAmounts[i]) returns (\n                uint256 amount\n            ) {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts) {}\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) internal view returns (address bancorNetwork, address[] memory path) {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork).rateByPath{gas: BANCOR_CALL_GAS}(\n                    opts.paths[i],\n                    takerTokenAmounts[takerTokenAmounts.length - 1]\n                )\n            returns (uint256 amount) {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IBancor.sol": {
            "id": 37,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n    function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n\n    function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n"
        },
        "./BancorV3Sampler.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2022 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancorV3.sol\";\n\ncontract BancorV3Sampler {\n    /// @dev Gas limit for BancorV3 calls.\n    uint256 private constant BancorV3_CALL_GAS = 150e3; // 150k\n\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    /// @dev Sample sell quotes from BancorV3.\n    /// @param weth The WETH contract address\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancorV3(\n        address weth,\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (path[0] == weth) {\n            path[0] = ETH;\n        }\n        if (path[1] == weth) {\n            path[1] = ETH;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try IBancorV3(router).tradeOutputBySourceAmount(path[0], path[1], takerTokenAmounts[i]) returns (\n                uint256 amount\n            ) {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from BancorV3.\n    /// @param weth The WETH contract address\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancorV3(\n        address weth,\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        if (path[0] == weth) {\n            path[0] = ETH;\n        }\n        if (path[1] == weth) {\n            path[1] = ETH;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try IBancorV3(router).tradeInputByTargetAmount(path[0], path[1], makerTokenAmounts[i]) returns (\n                uint256 amount\n            ) {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IBancorV3.sol": {
            "id": 38,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2022 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IBancorV3 {\n    /**\n     * @dev returns the output amount when trading by providing the source amount\n     */\n    function tradeOutputBySourceAmount(\n        address sourceToken,\n        address targetToken,\n        uint256 sourceAmount\n    ) external view returns (uint256);\n\n    /**\n     * @dev returns the input amount when trading by providing the target amount\n     */\n    function tradeInputByTargetAmount(\n        address sourceToken,\n        address targetToken,\n        uint256 targetAmount\n    ) external view returns (uint256);\n}\n"
        },
        "./CompoundSampler.sol": {
            "id": 10,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n// Minimal CToken interface\ninterface ICToken {\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CompoundSampler is SamplerUtils {\n    uint256 private constant EXCHANGE_RATE_SCALE = 1e10;\n\n    function sampleSellsFromCompound(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        // Exchange rate is scaled by 1 * 10^(18 - 8 + Underlying Token Decimals\n        uint256 exchangeRate = cToken.exchangeRateStored();\n        uint256 cTokenDecimals = uint256(cToken.decimals());\n\n        if (address(makerToken) == address(cToken)) {\n            // mint\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] =\n                    (takerTokenAmounts[i] * EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals) /\n                    exchangeRate;\n            }\n        } else if (address(takerToken) == address(cToken)) {\n            // redeem\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] =\n                    (takerTokenAmounts[i] * exchangeRate) /\n                    (EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals);\n            }\n        }\n    }\n\n    function sampleBuysFromCompound(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        // Exchange rate is scaled by 1 * 10^(18 - 8 + Underlying Token Decimals\n        uint256 exchangeRate = cToken.exchangeRateStored();\n        uint256 cTokenDecimals = uint256(cToken.decimals());\n\n        if (address(makerToken) == address(cToken)) {\n            // mint\n            for (uint256 i = 0; i < numSamples; i++) {\n                takerTokenAmounts[i] =\n                    (makerTokenAmounts[i] * exchangeRate) /\n                    (EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals);\n            }\n        } else if (address(takerToken) == address(cToken)) {\n            // redeem\n            for (uint256 i = 0; i < numSamples; i++) {\n                takerTokenAmounts[i] =\n                    (makerTokenAmounts[i] * EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals) /\n                    exchangeRate;\n            }\n        }\n    }\n}\n"
        },
        "./CurveSampler.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ncontract CurveSampler is SamplerUtils, ApproximateBuys {\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 private constant CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) = curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                abi.encodeWithSelector(\n                    curveInfo.sellQuoteFunctionSelector,\n                    fromTokenIdx,\n                    toTokenIdx,\n                    takerTokenAmounts[i]\n                )\n            );\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return\n                _sampleApproximateBuys(\n                    ApproximateBuyQuoteOpts({\n                        makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                        takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                        getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                    }),\n                    makerTokenAmounts\n                );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) = curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                abi.encodeWithSelector(\n                    curveInfo.buyQuoteFunctionSelector,\n                    fromTokenIdx,\n                    toTokenIdx,\n                    makerTokenAmounts[i]\n                )\n            );\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            takerTokenAmounts[i] = sellAmount;\n            // Break early if there are 0 amounts\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    ) private view returns (uint256 buyAmount) {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) = abi.decode(takerTokenData, (int128, CurveInfo));\n        int128 makerTokenIdx = abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) = address(this).staticcall(\n            abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            )\n        );\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "./interfaces/ICurve.sol": {
            "id": 39,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(int128 i, int128 j, uint256 sellAmount, uint256 minBuyAmount) external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(int128 i, int128 j, uint256 sellAmount) external returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(int128 i, int128 j, uint256 buyAmount) external returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(int128 i) external returns (address tokenAddress);\n}\n"
        },
        "./ApproximateBuys.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\ncontract ApproximateBuys {\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function(bytes memory, bytes memory, uint256) internal view returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    ) internal view returns (uint256[] memory takerTokenAmounts) {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(opts.makerTokenData, opts.takerTokenData, makerTokenAmounts[0]);\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(opts.takerTokenData, opts.makerTokenData, sellAmount);\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256 eps = 0;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(makerTokenAmounts[i], buyAmount, sellAmount);\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(opts.takerTokenData, opts.makerTokenData, sellAmount);\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    eps = ((buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS) / makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (eps == 0 || eps > APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                break;\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(makerTokenAmounts[i], buyAmount, sellAmount);\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal view returns (uint256 partialAmount) {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 52,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\nlibrary LibMathV06 {\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (uint256 partialAmount) {\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(numerator, denominator, target));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (uint256 partialAmount) {\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(numerator, denominator, target));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target).safeAdd(denominator.safeSub(1)).safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (uint256 partialAmount) {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (uint256 partialAmount) {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target).safeAdd(denominator.safeSub(1)).safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (bool isError) {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(target, numerator, denominator);\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (bool isError) {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(target, numerator, denominator);\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 53,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\nlibrary LibSafeMathV06 {\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                    a,\n                    b\n                )\n            );\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                    a,\n                    b\n                )\n            );\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                    a,\n                    b\n                )\n            );\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                    a,\n                    b\n                )\n            );\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b) internal pure returns (uint128) {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                    a,\n                    b\n                )\n            );\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b) internal pure returns (uint128) {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                    a,\n                    b\n                )\n            );\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b) internal pure returns (uint128) {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                    a,\n                    b\n                )\n            );\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b) internal pure returns (uint128) {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                    a,\n                    b\n                )\n            );\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a) internal pure returns (uint128) {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256DowncastError(\n                    LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                    a\n                )\n            );\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 57,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nlibrary LibSafeMathRichErrorsV06 {\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR = 0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR = 0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    function Uint256BinOpError(BinOpErrorCodes errorCode, uint256 a, uint256 b) internal pure returns (bytes memory) {\n        return abi.encodeWithSelector(UINT256_BINOP_ERROR_SELECTOR, errorCode, a, b);\n    }\n\n    function Uint256DowncastError(DowncastErrorCodes errorCode, uint256 a) internal pure returns (bytes memory) {\n        return abi.encodeWithSelector(UINT256_DOWNCAST_ERROR_SELECTOR, errorCode, a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 55,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nlibrary LibMathRichErrorsV06 {\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR = hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR = 0x339f3de2;\n\n    function DivisionByZeroError() internal pure returns (bytes memory) {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (bytes memory) {\n        return abi.encodeWithSelector(ROUNDING_ERROR_SELECTOR, numerator, denominator, target);\n    }\n}\n"
        },
        "./DODOSampler.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is SamplerUtils, ApproximateBuys {\n    /// @dev Gas limit for DODO calls.\n    uint256 private constant DODO_CALL_GAS = 300e3; // 300k\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken, opts.helper), // taker token data\n                abi.encode(makerToken, pool, baseToken, opts.helper), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken, opts.helper),\n                takerTokenData: abi.encode(takerToken, pool, baseToken, opts.helper),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    ) private view returns (uint256) {\n        (address takerToken, address pool, address baseToken, address helper) = abi.decode(\n            takerTokenData,\n            (address, address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try IDODO(pool).querySellBaseToken{gas: DODO_CALL_GAS}(sellAmount) returns (uint256 amount) {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try IDODOHelper(helper).querySellQuoteToken{gas: DODO_CALL_GAS}(pool, sellAmount) returns (uint256 amount) {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n}\n"
        },
        "./DODOV2Sampler.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken) external view returns (address[] memory machines);\n}\n\ninterface IDODOV2Pool {\n    function querySellBase(\n        address trader,\n        uint256 payBaseAmount\n    ) external view returns (uint256 receiveQuoteAmount, uint256 mtFee);\n\n    function querySellQuote(\n        address trader,\n        uint256 payQuoteAmount\n    ) external view returns (uint256 receiveBaseAmount, uint256 mtFee);\n}\n\ncontract DODOV2Sampler is SamplerUtils, ApproximateBuys {\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 private constant DODO_V2_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODOV2(\n                abi.encode(takerToken, pool, sellBase), // taker token data\n                abi.encode(makerToken, pool, sellBase), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, !sellBase),\n                takerTokenData: abi.encode(takerToken, pool, sellBase),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODOV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODOV2(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    ) private view returns (uint256) {\n        (address takerToken, address pool, bool sellBase) = abi.decode(takerTokenData, (address, address, bool));\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        // since we use approximate buy for sell and buy functions\n        if (sellBase) {\n            try IDODOV2Pool(pool).querySellBase{gas: DODO_V2_CALL_GAS}(address(0), sellAmount) returns (\n                uint256 amount,\n                uint256\n            ) {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            try IDODOV2Pool(pool).querySellQuote{gas: DODO_V2_CALL_GAS}(address(0), sellAmount) returns (\n                uint256 amount,\n                uint256\n            ) {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    ) internal view returns (address machine, bool sellBase) {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n}\n"
        },
        "./GMXSampler.sol": {
            "id": 16,
            "content": "pragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IGMX.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ncontract GMXSampler is SamplerUtils, ApproximateBuys {\n    struct GMXInfo {\n        address reader;\n        address vault;\n        address[] path;\n    }\n\n    function sampleSellsFromGMX(\n        IGMX reader,\n        address vault,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try IGMX(reader).getMaxAmountIn(IVault(vault), path[0], path[1]) returns (uint256 maxAmountIn) {\n                // Break early if GMX does not have enough liquidity to perform the swap\n                if (takerTokenAmounts[i] > maxAmountIn) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n            try IGMX(reader).getAmountOut(IVault(vault), path[0], path[1], takerTokenAmounts[i]) returns (\n                uint256 amountAfterFees,\n                uint256 feeAmount\n            ) {\n                makerTokenAmounts[i] = amountAfterFees;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function sampleBuysFromGMX(\n        IGMX reader,\n        address vault,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        address[] memory invertBuyPath = new address[](2);\n        invertBuyPath[0] = path[1];\n        invertBuyPath[1] = path[0];\n        return\n            _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(address(reader), vault, invertBuyPath),\n                    takerTokenData: abi.encode(address(reader), vault, path),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromGMX\n                }),\n                makerTokenAmounts\n            );\n    }\n\n    function _sampleSellForApproximateBuyFromGMX(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    ) private view returns (uint256 buyAmount) {\n        (address _reader, address _vault, address[] memory _path) = abi.decode(\n            takerTokenData,\n            (address, address, address[])\n        );\n\n        (bool success, bytes memory resultData) = address(this).staticcall(\n            abi.encodeWithSelector(\n                this.sampleSellsFromGMX.selector,\n                _reader,\n                _vault,\n                _path,\n                _toSingleValueArray(sellAmount)\n            )\n        );\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "./interfaces/IGMX.sol": {
            "id": 40,
            "content": "pragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IGMX {\n    function getMaxAmountIn(IVault _vault, address _tokenIn, address _tokenOut) external view returns (uint256);\n\n    function getAmountOut(\n        IVault _vault,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) external view returns (uint256, uint256);\n}\n\ninterface IVault {\n    function getFeeBasisPoints(\n        address _token,\n        uint256 _usdgDelta,\n        uint256 _feeBasisPoints,\n        uint256 _taxBasisPoints,\n        bool _increment\n    ) external view returns (uint256);\n\n    function stableSwapFeeBasisPoints() external view returns (uint256);\n\n    function stableTokens(address _token) external view returns (bool);\n\n    function tokenDecimals(address _token) external view returns (uint256);\n\n    function getMaxPrice(address _token) external view returns (uint256);\n\n    function getMinPrice(address _token) external view returns (uint256);\n}\n"
        },
        "./KyberDmmSampler.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IKyberDmmPool {\n    function totalSupply() external view returns (uint256);\n}\n\ninterface IKyberDmmFactory {\n    function getPools(address token0, address token1) external view returns (address[] memory _tokenPools);\n}\n\ninterface IKyberDmmRouter {\n    function factory() external view returns (address);\n\n    function getAmountsOut(\n        uint256 amountIn,\n        address[] calldata pools,\n        address[] calldata path\n    ) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(\n        uint256 amountOut,\n        address[] calldata pools,\n        address[] calldata path\n    ) external view returns (uint256[] memory amounts);\n}\n\ncontract KyberDmmSampler {\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 private constant KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (address[] memory pools, uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, makerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsOut{gas: KYBER_DMM_CALL_GAS}(takerTokenAmounts[i], pools, path)\n            returns (uint256[] memory amounts) {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (address[] memory pools, uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, takerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsIn{gas: KYBER_DMM_CALL_GAS}(makerTokenAmounts[i], pools, path)\n            returns (uint256[] memory amounts) {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _getKyberDmmPools(address router, address[] memory path) private view returns (address[] memory pools) {\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        pools = new address[](path.length - 1);\n        for (uint256 i = 0; i < pools.length; i++) {\n            // find the best pool\n            address[] memory allPools;\n            try factory.getPools{gas: KYBER_DMM_CALL_GAS}(path[i], path[i + 1]) returns (address[] memory allPools) {\n                if (allPools.length == 0) {\n                    return new address[](0);\n                }\n\n                uint256 maxSupply = 0;\n                for (uint256 j = 0; j < allPools.length; j++) {\n                    uint256 totalSupply = IKyberDmmPool(allPools[j]).totalSupply();\n                    if (totalSupply > maxSupply) {\n                        maxSupply = totalSupply;\n                        pools[i] = allPools[j];\n                    }\n                }\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n"
        },
        "./LidoSampler.sol": {
            "id": 18,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\ninterface IWstETH {\n    function getWstETHByStETH(uint256 _stETHAmount) external view returns (uint256);\n\n    function getStETHByWstETH(uint256 _wstETHAmount) external view returns (uint256);\n}\n\ncontract LidoSampler is SamplerUtils {\n    struct LidoInfo {\n        address stEthToken;\n        address wethToken;\n        address wstEthToken;\n    }\n\n    /// @dev Sample sell quotes from Lido\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory) {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken == lidoInfo.wethToken && makerToken == address(lidoInfo.stEthToken)) {\n            // Minting stETH is always 1:1 therefore we can just return the same amounts back.\n            return takerTokenAmounts;\n        }\n\n        return _sampleSellsForWrapped(lidoInfo, takerToken, makerToken, takerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Lido.\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory) {\n        if (takerToken == lidoInfo.wethToken && makerToken == address(lidoInfo.stEthToken)) {\n            // Minting stETH is always 1:1 therefore we can just return the same amounts back.\n            return makerTokenAmounts;\n        }\n\n        // Swap out `makerToken` and `takerToken` and re-use `_sampleSellsForWrapped`.\n        return _sampleSellsForWrapped(lidoInfo, makerToken, takerToken, makerTokenAmounts);\n    }\n\n    function _sampleSellsForWrapped(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) private view returns (uint256[] memory) {\n        IWstETH wstETH = IWstETH(lidoInfo.wstEthToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        uint256[] memory makerTokenAmounts = new uint256[](numSamples);\n\n        if (takerToken == lidoInfo.stEthToken && makerToken == lidoInfo.wstEthToken) {\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] = wstETH.getWstETHByStETH(takerTokenAmounts[i]);\n            }\n            return makerTokenAmounts;\n        }\n\n        if (takerToken == lidoInfo.wstEthToken && makerToken == lidoInfo.stEthToken) {\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] = wstETH.getStETHByWstETH(takerTokenAmounts[i]);\n            }\n            return makerTokenAmounts;\n        }\n\n        // Returns 0 values.\n        return makerTokenAmounts;\n    }\n}\n"
        },
        "./MakerPSMSampler.sol": {
            "id": 20,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Get the address of DAI\n    // @return address of DAI contract\n    function dai() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(address usr, uint256 gemAmt) external;\n\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(address usr, uint256 gemAmt) external;\n}\n\ninterface IVAT {\n    // @dev Get a collateral type by identifier\n    // @param ilkIdentifier bytes32 identifier. Example: ethers.utils.formatBytes32String(\"PSM-USDC-A\")\n    // @return ilk\n    // @return ilk.Art Total Normalised Debt in wad\n    // @return ilk.rate Accumulated Rates in ray\n    // @return ilk.spot Price with Safety Margin in ray\n    // @return ilk.line Debt Ceiling in rad\n    // @return ilk.dust Urn Debt Floor in rad\n    function ilks(\n        bytes32 ilkIdentifier\n    ) external view returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\n}\n\ncontract MakerPSMSampler is SamplerUtils {\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    /// @dev Gas limit for MakerPsm calls.\n    uint256 private constant MAKER_PSM_CALL_GAS = 300e3; // 300k\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 private constant WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 private constant RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 private constant RAD = 10 ** 45;\n\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.m\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _samplePSMSell(psmInfo, makerToken, takerToken, takerTokenAmounts[i], psm, vat);\n\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 sellAmount = _samplePSMBuy(psmInfo, makerToken, takerToken, makerTokenAmounts[i], psm, vat);\n\n            if (sellAmount == 0) {\n                break;\n            }\n\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n\n    function _samplePSMSell(\n        MakerPsmInfo memory psmInfo,\n        address makerToken,\n        address takerToken,\n        uint256 takerTokenAmount,\n        IPSM psm,\n        IVAT vat\n    ) private view returns (uint256) {\n        (uint256 totalDebtInWad, , , uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(\n            psmInfo.ilkIdentifier\n        );\n        uint256 gemTokenBaseUnit = uint256(1e6);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            // Convert USDC 6 decimals to 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount.safeMul(1e12);\n\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 feeInWad = takerTokenAmountInWad.safeMul(psm.tin()).safeDiv(WAD);\n            uint256 makerTokenAmountInWad = takerTokenAmountInWad.safeSub(feeInWad);\n\n            return makerTokenAmountInWad;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            // Selling DAI for USDC, already in 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount;\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy from it\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            uint256 feeDivisorInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 makerTokenAmountInGemTokenBaseUnits = takerTokenAmountInWad.safeMul(gemTokenBaseUnit).safeDiv(\n                feeDivisorInWad\n            );\n\n            return makerTokenAmountInGemTokenBaseUnits;\n        }\n\n        return 0;\n    }\n\n    function _samplePSMBuy(\n        MakerPsmInfo memory psmInfo,\n        address makerToken,\n        address takerToken,\n        uint256 makerTokenAmount,\n        IPSM psm,\n        IVAT vat\n    ) private view returns (uint256) {\n        (uint256 totalDebtInWad, , , uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(\n            psmInfo.ilkIdentifier\n        );\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount;\n            uint256 feeDivisorInWad = WAD.safeSub(psm.tin()); // eg. 0.999 * 10 ** 18 with 0.1% tin;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(WAD).safeDiv(feeDivisorInWad);\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 takerTokenAmountInGemInGemBaseUnits = (takerTokenAmountInWad.safeDiv(1e12)).safeAdd(1); // Add 1 to deal with cut off decimals converting to lower decimals\n\n            return takerTokenAmountInGemInGemBaseUnits;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount.safeMul(1e12);\n            uint256 feeMultiplierInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(feeMultiplierInWad).safeDiv(WAD);\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            return takerTokenAmountInWad;\n        }\n\n        return 0;\n    }\n}\n"
        },
        "./MStableSampler.sol": {
            "id": 19,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ncontract MStableSampler is SamplerUtils, ApproximateBuys {\n    /// @dev Default gas limit for mStable calls.\n    uint256 private constant DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(router).getSwapOutput{gas: DEFAULT_CALL_GAS}(takerToken, makerToken, takerTokenAmounts[i])\n            returns (uint256 amount) {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        return\n            _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(makerToken, router),\n                    takerTokenData: abi.encode(takerToken, router),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n                }),\n                makerTokenAmounts\n            );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    ) private view returns (uint256 buyAmount) {\n        (address takerToken, address router) = abi.decode(takerTokenData, (address, address));\n        address makerToken = abi.decode(makerTokenData, (address));\n        try this.sampleSellsFromMStable(router, takerToken, makerToken, _toSingleValueArray(sellAmount)) returns (\n            uint256[] memory amounts\n        ) {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "./interfaces/IMStable.sol": {
            "id": 41,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\ninterface IMStable {\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    ) external view returns (uint256 swapOutput);\n}\n"
        },
        "./MooniswapSampler.sol": {
            "id": 21,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ncontract MooniswapSampler is SamplerUtils, ApproximateBuys {\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 private constant MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (IMooniswap pool, uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n\n        pool = IMooniswap(IMooniswapRegistry(registry).pools(takerToken, makerToken));\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    ) public view returns (uint256) {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken));\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn{gas: MOONISWAP_CALL_GAS}(mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n        returns (uint256 amount) {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (IMooniswap pool, uint256[] memory takerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, makerToken),\n                takerTokenData: abi.encode(registry, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(IMooniswapRegistry(registry).pools(takerToken, makerToken));\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    ) private view returns (uint256 buyAmount) {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(registry, mooniswapTakerToken, mooniswapMakerToken, sellAmount);\n    }\n}\n"
        },
        "./interfaces/IMooniswap.sol": {
            "id": 42,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\ninterface IMooniswapRegistry {\n    function pools(address token1, address token2) external view returns (address);\n}\n\ninterface IMooniswap {\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    ) external view returns (uint256 returnAmount);\n}\n"
        },
        "./NativeOrderSampler.sol": {
            "id": 22,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\ninterface IExchange {\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order) external view returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    ) external view returns (OrderInfo memory orderInfo, uint128 actualFillableTakerTokenAmount, bool isSignatureValid);\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 internal constant DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    ) public view returns (uint256[] memory orderFillableTakerAssetAmounts) {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount{gas: DEFAULT_CALL_GAS}(orders[i], orderSignatures[i], exchange)\n            returns (uint256 amount) {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    ) public view returns (uint256[] memory orderFillableMakerAssetAmounts) {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(orders, orderSignatures, exchange);\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    ) public view virtual returns (uint256 fillableTakerAmount) {\n        if (\n            signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0\n        ) {\n            return 0;\n        }\n\n        (IExchange.OrderInfo memory orderInfo, uint128 remainingFillableTakerAmount, bool isSignatureValid) = exchange\n            .getLimitOrderRelevantState(order, signature);\n\n        if (\n            orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n            !isSignatureValid ||\n            order.makerToken == IERC20TokenV06(0)\n        ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n"
        },
        "./PlatypusSampler.sol": {
            "id": 23,
            "content": "pragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IPlatypus.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ncontract PlatypusSampler is SamplerUtils, ApproximateBuys {\n    function sampleSellsFromPlatypus(\n        address pool,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try IPlatypus(pool).quotePotentialSwap(path[0], path[1], takerTokenAmounts[i]) returns (\n                uint256 amountAfterFees,\n                uint256 feeAmount\n            ) {\n                makerTokenAmounts[i] = amountAfterFees;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory result) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function sampleBuysFromPlatypus(\n        address pool,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        address[] memory invertBuyPath = new address[](2);\n        invertBuyPath[0] = path[1];\n        invertBuyPath[1] = path[0];\n        return\n            _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(pool, invertBuyPath),\n                    takerTokenData: abi.encode(pool, path),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromPlatypus\n                }),\n                makerTokenAmounts\n            );\n    }\n\n    function _sampleSellForApproximateBuyFromPlatypus(\n        bytes memory makerTokenData,\n        bytes memory takerTokenData,\n        uint256 sellAmount\n    ) private view returns (uint256 buyAmount) {\n        (address _pool, address[] memory _path) = abi.decode(makerTokenData, (address, address[]));\n\n        (bool success, bytes memory resultData) = address(this).staticcall(\n            abi.encodeWithSelector(this.sampleSellsFromPlatypus.selector, _pool, _path, _toSingleValueArray(sellAmount))\n        );\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "./interfaces/IPlatypus.sol": {
            "id": 43,
            "content": "pragma solidity ^0.6;\n\ninterface IPlatypus {\n    function quotePotentialSwap(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\n\n    function assetOf(address token) external view returns (address);\n}\n"
        },
        "./ShellSampler.sol": {
            "id": 25,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./interfaces/IShell.sol\";\nimport \"./SamplerUtils.sol\";\n\ncontract ShellSampler is SamplerUtils, ApproximateBuys {\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    /// @dev Default gas limit for Shell calls.\n    uint256 private constant DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap{gas: DEFAULT_CALL_GAS}(takerToken, makerToken, takerTokenAmounts[i])\n            returns (uint256 amount) {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        return\n            _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(makerToken, pool),\n                    takerTokenData: abi.encode(takerToken, pool),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromShell\n                }),\n                makerTokenAmounts\n            );\n    }\n\n    function _sampleSellForApproximateBuyFromShell(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    ) private view returns (uint256 buyAmount) {\n        (address takerToken, address pool) = abi.decode(takerTokenData, (address, address));\n        address makerToken = abi.decode(makerTokenData, (address));\n\n        try this.sampleSellsFromShell(pool, takerToken, makerToken, _toSingleValueArray(sellAmount)) returns (\n            uint256[] memory amounts\n        ) {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "./interfaces/IShell.sol": {
            "id": 44,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\ninterface IShell {\n    function viewOriginSwap(address from, address to, uint256 fromAmount) external view returns (uint256 toAmount);\n\n    function viewTargetSwap(address from, address to, uint256 toAmount) external view returns (uint256 fromAmount);\n}\n"
        },
        "./SynthetixSampler.sol": {
            "id": 26,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2022 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IReadProxyAddressResolver {\n    function target() external view returns (address);\n}\n\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n}\n\ninterface IExchanger {\n    // Ethereum Mainnet\n    function getAmountsForAtomicExchange(\n        uint256 sourceAmount,\n        bytes32 sourceCurrencyKey,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint256 amountReceived, uint256 fee, uint256 exchangeFeeRate);\n\n    // Optimism\n    function getAmountsForExchange(\n        uint256 sourceAmount,\n        bytes32 sourceCurrencyKey,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint256 amountReceived, uint256 fee, uint256 exchangeFeeRate);\n}\n\ncontract SynthetixSampler {\n    /// @dev Sample sell quotes from Synthetix Atomic Swap.\n    /// @param takerTokenSymbol Symbol (currency key) of the taker token (what to sell).\n    /// @param makerTokenSymbol Symbol (currency key) of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample (sorted in ascending order).\n    /// @return synthetix Synthetix address.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromSynthetix(\n        IReadProxyAddressResolver readProxy,\n        bytes32 takerTokenSymbol,\n        bytes32 makerTokenSymbol,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (address synthetix, uint256[] memory makerTokenAmounts) {\n        synthetix = getSynthetixAddress(readProxy);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (numSamples == 0) {\n            return (synthetix, makerTokenAmounts);\n        }\n\n        makerTokenAmounts[0] = exchange(readProxy, takerTokenAmounts[0], takerTokenSymbol, makerTokenSymbol);\n\n        // Synthetix atomic swap has a fixed rate. Calculate the rest based on the first value (and save gas).\n        for (uint256 i = 1; i < numSamples; i++) {\n            makerTokenAmounts[i] = (makerTokenAmounts[0] * takerTokenAmounts[i]) / takerTokenAmounts[0];\n        }\n    }\n\n    /// @dev Sample buy quotes from Synthetix Atomic Swap.\n    /// @param takerTokenSymbol Symbol (currency key) of the taker token (what to sell).\n    /// @param makerTokenSymbol Symbol (currency key) of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample (sorted in ascending order).\n    /// @return synthetix Synthetix address.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromSynthetix(\n        IReadProxyAddressResolver readProxy,\n        bytes32 takerTokenSymbol,\n        bytes32 makerTokenSymbol,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (address synthetix, uint256[] memory takerTokenAmounts) {\n        synthetix = getSynthetixAddress(readProxy);\n        // Since Synthetix atomic have a fixed rate, we can pick any reasonablely size takerTokenAmount (fixed to 1 ether here) and calculate the rest.\n        uint256 amountReceivedForEther = exchange(readProxy, 1 ether, takerTokenSymbol, makerTokenSymbol);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            takerTokenAmounts[i] = (1 ether * makerTokenAmounts[i]) / amountReceivedForEther;\n        }\n    }\n\n    function exchange(\n        IReadProxyAddressResolver readProxy,\n        uint256 sourceAmount,\n        bytes32 sourceCurrencyKey,\n        bytes32 destinationCurrencyKey\n    ) private view returns (uint256 amountReceived) {\n        IExchanger exchanger = getExchanger(readProxy);\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n\n        if (chainId == 1) {\n            (amountReceived, , ) = exchanger.getAmountsForAtomicExchange(\n                sourceAmount,\n                sourceCurrencyKey,\n                destinationCurrencyKey\n            );\n        } else {\n            (amountReceived, , ) = exchanger.getAmountsForExchange(\n                sourceAmount,\n                sourceCurrencyKey,\n                destinationCurrencyKey\n            );\n        }\n    }\n\n    function getSynthetixAddress(IReadProxyAddressResolver readProxy) private view returns (address) {\n        return IAddressResolver(readProxy.target()).getAddress(\"Synthetix\");\n    }\n\n    function getExchanger(IReadProxyAddressResolver readProxy) private view returns (IExchanger) {\n        return IExchanger(IAddressResolver(readProxy.target()).getAddress(\"Exchanger\"));\n    }\n}\n"
        },
        "./TwoHopSampler.sol": {
            "id": 27,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 numSamples\n    ) public returns (HopInfo memory firstHop, HopInfo memory secondHop, uint256[] memory buyAmounts) {\n        buyAmounts = new uint256[](numSamples);\n        uint256[] memory intermediateAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < firstHopCalls.length; i++) {\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256[] memory amounts = getAmounts(returnData, numSamples);\n                // Use the amount from the largest size for comparison.\n                if (amounts[numSamples - 1] > intermediateAmounts[numSamples - 1]) {\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                    for (uint256 j = 0; j < numSamples; j++) {\n                        intermediateAmounts[j] = amounts[j];\n                    }\n                }\n            }\n        }\n\n        if (intermediateAmounts[numSamples - 1] == 0) {\n            return (firstHop, secondHop, buyAmounts);\n        }\n\n        for (uint256 i = 0; i < secondHopCalls.length; i++) {\n            writeAmounts(secondHopCalls[i], intermediateAmounts);\n\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[i]);\n            if (didSucceed) {\n                uint256[] memory amounts = getAmounts(returnData, numSamples);\n                // Use the amount from the largest size for comparison.\n                if (amounts[numSamples - 1] > buyAmounts[numSamples - 1]) {\n                    secondHop.sourceIndex = i;\n                    secondHop.returnData = returnData;\n                    for (uint256 j = 0; j < numSamples; j++) {\n                        buyAmounts[j] = amounts[j];\n                    }\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 numSamples\n    ) public returns (HopInfo memory firstHop, HopInfo memory secondHop, uint256[] memory sellAmounts) {\n        sellAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            sellAmounts[i] = uint256(-1);\n        }\n\n        uint256[] memory intermediateAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            intermediateAmounts[i] = uint256(-1);\n        }\n\n        for (uint256 i = 0; i < secondHopCalls.length; i++) {\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[i]);\n            if (didSucceed) {\n                uint256[] memory amounts = getAmounts(returnData, numSamples);\n                uint256 largestAmount = amounts[numSamples - 1];\n\n                // Use the amount from the largest size for comparison.\n                if (largestAmount > 0 && largestAmount < intermediateAmounts[numSamples - 1]) {\n                    secondHop.sourceIndex = i;\n                    secondHop.returnData = returnData;\n                    for (uint256 j = 0; j < numSamples; j++) {\n                        intermediateAmounts[j] = amounts[j];\n                    }\n                }\n            }\n        }\n\n        if (intermediateAmounts[numSamples - 1] == uint256(-1)) {\n            return (firstHop, secondHop, sellAmounts);\n        }\n\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            writeAmounts(firstHopCalls[i], intermediateAmounts);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256[] memory amounts = getAmounts(returnData, numSamples);\n                uint256 largestAmount = amounts[numSamples - 1];\n\n                // Use the amount from the largest size for comparison.\n                if (largestAmount > 0 && largestAmount < sellAmounts[numSamples - 1]) {\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                    for (uint256 j = 0; j < numSamples; j++) {\n                        sellAmounts[j] = amounts[j];\n                    }\n                }\n            }\n        }\n    }\n\n    /// @dev Extract amounts from `data` by creating a copy assuming that such uint256[] array exists\n    /// at the end of `data`.\n    function getAmounts(bytes memory data, uint256 amountsLength) private pure returns (uint256[] memory) {\n        uint256 start = data.length - (amountsLength + 2) * 32; // Copy offset and length as well.\n        uint256 end = data.length;\n        bytes memory amounts = data.slice(start, end);\n        amounts.writeUint256(0, 0x20); // Overwrite offset.\n        return abi.decode(amounts, (uint256[]));\n    }\n\n    /// @dev Writes amounts arary to the end of data assuming that there is space reserved.\n    function writeAmounts(bytes memory data, uint256[] memory amounts) private pure {\n        for (uint256 i = 0; i < amounts.length; i++) {\n            uint256 index = data.length - 32 * (amounts.length - i - 1);\n            uint256 amount = amounts[i];\n            assembly {\n                mstore(add(data, index), amount)\n            }\n        }\n    }\n}\n"
        },
        "./UniswapSampler.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IUniswapExchangeFactory {\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress) external view returns (address);\n}\n\ncontract UniswapSampler is SamplerUtils {\n    /// @dev Gas limit for Uniswap calls.\n    uint256 private constant UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0)\n            ? IUniswapExchangeQuotes(0)\n            : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0)\n            ? IUniswapExchangeQuotes(0)\n            : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0)\n            ? IUniswapExchangeQuotes(0)\n            : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0)\n            ? IUniswapExchangeQuotes(0)\n            : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    ) private view returns (uint256 outputAmount, bool didSucceed) {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) = uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n            abi.encodeWithSelector(functionSelector, inputAmount)\n        );\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param router Address of the Uniswap router.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(\n        address router,\n        address tokenAddress\n    ) private view returns (IUniswapExchangeQuotes exchange) {\n        exchange = IUniswapExchangeQuotes(address(IUniswapExchangeFactory(router).getExchange(tokenAddress)));\n    }\n}\n"
        },
        "./interfaces/IUniswapExchangeQuotes.sol": {
            "id": 45,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\ninterface IUniswapExchangeQuotes {\n    function getEthToTokenInputPrice(uint256 ethSold) external view returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(uint256 tokensSold) external view returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\n}\n"
        },
        "./UniswapV2Sampler.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\ncontract UniswapV2Sampler {\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 private constant UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try IUniswapV2Router01(router).getAmountsOut{gas: UNISWAPV2_CALL_GAS}(takerTokenAmounts[i], path) returns (\n                uint256[] memory amounts\n            ) {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try IUniswapV2Router01(router).getAmountsIn{gas: UNISWAPV2_CALL_GAS}(makerTokenAmounts[i], path) returns (\n                uint256[] memory amounts\n            ) {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IUniswapV2Router01.sol": {
            "id": 46,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\ninterface IUniswapV2Router01 {\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
        },
        "./UniswapV3Sampler.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2022 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\nimport \"./UniswapV3Common.sol\";\nimport \"./interfaces/IUniswapV3.sol\";\n\ncontract UniswapV3Sampler is UniswapV3Common {\n    IUniswapV3MultiQuoter private constant multiQuoter =\n        IUniswapV3MultiQuoter(0x5555555555555555555555555555555555555556);\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param factory UniswapV3 Factory contract.\n    /// @param path Token route. Should be takerToken -> makerToken (at most two hops).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return uniswapGasUsed Estimated amount of gas used\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (bytes[] memory uniswapPaths, uint256[] memory uniswapGasUsed, uint256[] memory makerTokenAmounts)\n    {\n        IUniswapV3Pool[][] memory poolPaths = getPoolPaths(\n            factory,\n            multiQuoter,\n            path,\n            takerTokenAmounts[takerTokenAmounts.length - 1]\n        );\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n        uniswapGasUsed = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < poolPaths.length; ++i) {\n            if (!isValidPoolPath(poolPaths[i])) {\n                continue;\n            }\n\n            bytes memory uniswapPath = toUniswapPath(path, poolPaths[i]);\n\n            uint256[] memory amountsOut;\n            uint256[] memory gasEstimates;\n\n            try multiQuoter.quoteExactMultiInput(factory, uniswapPath, takerTokenAmounts) {} catch (\n                bytes memory reason\n            ) {\n                bool success;\n                (success, amountsOut, gasEstimates) = catchMultiSwapResult(reason);\n\n                if (!success) {\n                    continue;\n                }\n\n                for (uint256 j = 0; j < amountsOut.length; ++j) {\n                    if (amountsOut[j] == 0) {\n                        break;\n                    }\n\n                    if (makerTokenAmounts[j] < amountsOut[j]) {\n                        makerTokenAmounts[j] = amountsOut[j];\n                        uniswapPaths[j] = uniswapPath;\n                        uniswapGasUsed[j] = gasEstimates[j];\n                    } else if (makerTokenAmounts[j] == amountsOut[j] && uniswapGasUsed[j] > gasEstimates[j]) {\n                        uniswapPaths[j] = uniswapPath;\n                        uniswapGasUsed[j] = gasEstimates[j];\n                    }\n                }\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param factory UniswapV3 Factory contract.\n    /// @param path Token route. Should be takerToken -> makerToken (at most two hops).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return uniswapGasUsed Estimated amount of gas used\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (bytes[] memory uniswapPaths, uint256[] memory uniswapGasUsed, uint256[] memory takerTokenAmounts)\n    {\n        IERC20TokenV06[] memory reversedPath = reverseTokenPath(path);\n        IUniswapV3Pool[][] memory poolPaths = getPoolPaths(\n            factory,\n            multiQuoter,\n            reversedPath,\n            makerTokenAmounts[makerTokenAmounts.length - 1]\n        );\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n        uniswapGasUsed = new uint256[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < poolPaths.length; ++i) {\n            if (!isValidPoolPath(poolPaths[i])) {\n                continue;\n            }\n\n            bytes memory uniswapPath = toUniswapPath(reversedPath, poolPaths[i]);\n\n            uint256[] memory amountsIn;\n            uint256[] memory gasEstimates;\n\n            try multiQuoter.quoteExactMultiOutput(factory, uniswapPath, makerTokenAmounts) {} catch (\n                bytes memory reason\n            ) {\n                bool success;\n                (success, amountsIn, gasEstimates) = catchMultiSwapResult(reason);\n\n                if (!success) {\n                    continue;\n                }\n\n                for (uint256 j = 0; j < amountsIn.length; ++j) {\n                    if (amountsIn[j] == 0) {\n                        break;\n                    }\n\n                    if (takerTokenAmounts[j] == 0 || takerTokenAmounts[j] > amountsIn[j]) {\n                        takerTokenAmounts[j] = amountsIn[j];\n                        uniswapPaths[j] = toUniswapPath(path, reversePoolPath(poolPaths[i]));\n                        uniswapGasUsed[j] = gasEstimates[j];\n                    } else if (takerTokenAmounts[j] == amountsIn[j] && uniswapGasUsed[j] > gasEstimates[j]) {\n                        uniswapPaths[j] = toUniswapPath(path, reversePoolPath(poolPaths[i]));\n                        uniswapGasUsed[j] = gasEstimates[j];\n                    }\n                }\n            }\n        }\n    }\n}\n"
        },
        "./UniswapV3Common.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2022 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\nimport \"./interfaces/IUniswapV3.sol\";\n\ncontract UniswapV3Common {\n    /// @dev Gas limit for UniswapV3 calls\n    uint256 private constant POOL_FILTERING_GAS_LIMIT = 450e3;\n\n    function toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    ) internal view returns (bytes memory uniswapPath) {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Common/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly {\n            o := add(uniswapPath, 32)\n        }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n\n    function reverseTokenPath(\n        IERC20TokenV06[] memory tokenPath\n    ) internal pure returns (IERC20TokenV06[] memory reversed) {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function reversePoolPath(\n        IUniswapV3Pool[] memory poolPath\n    ) internal pure returns (IUniswapV3Pool[] memory reversed) {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    /// @dev Returns `poolPaths` to sample against. The caller is responsible for not using path involinvg zero address(es).\n    function getPoolPaths(\n        IUniswapV3Factory factory,\n        IUniswapV3MultiQuoter multiQuoter,\n        IERC20TokenV06[] memory path,\n        uint256 inputAmount\n    ) internal view returns (IUniswapV3Pool[][] memory poolPaths) {\n        if (path.length == 2) {\n            return getPoolPathSingleHop(factory, multiQuoter, path, inputAmount);\n        }\n        if (path.length == 3) {\n            return getPoolPathTwoHop(factory, multiQuoter, path, inputAmount);\n        }\n        revert(\"UniswapV3Sampler/unsupported token path length\");\n    }\n\n    function getPoolPathSingleHop(\n        IUniswapV3Factory factory,\n        IUniswapV3MultiQuoter multiQuoter,\n        IERC20TokenV06[] memory path,\n        uint256 inputAmount\n    ) private view returns (IUniswapV3Pool[][] memory poolPaths) {\n        poolPaths = new IUniswapV3Pool[][](2);\n        (IUniswapV3Pool[2] memory topPools, ) = getTopTwoPools(\n            GetTopTwoPoolsParams({\n                factory: factory,\n                multiQuoter: multiQuoter,\n                inputToken: path[0],\n                outputToken: path[1],\n                inputAmount: inputAmount\n            })\n        );\n\n        uint256 pathCount = 0;\n        for (uint256 i = 0; i < 2; i++) {\n            IUniswapV3Pool topPool = topPools[i];\n            poolPaths[pathCount] = new IUniswapV3Pool[](1);\n            poolPaths[pathCount][0] = topPool;\n            pathCount++;\n        }\n    }\n\n    function getPoolPathTwoHop(\n        IUniswapV3Factory factory,\n        IUniswapV3MultiQuoter multiQuoter,\n        IERC20TokenV06[] memory path,\n        uint256 inputAmount\n    ) private view returns (IUniswapV3Pool[][] memory poolPaths) {\n        poolPaths = new IUniswapV3Pool[][](4);\n        (IUniswapV3Pool[2] memory firstHopTopPools, uint256[2] memory firstHopAmounts) = getTopTwoPools(\n            GetTopTwoPoolsParams({\n                factory: factory,\n                multiQuoter: multiQuoter,\n                inputToken: path[0],\n                outputToken: path[1],\n                inputAmount: inputAmount\n            })\n        );\n\n        (IUniswapV3Pool[2] memory secondHopTopPools, ) = getTopTwoPools(\n            GetTopTwoPoolsParams({\n                factory: factory,\n                multiQuoter: multiQuoter,\n                inputToken: path[1],\n                outputToken: path[2],\n                inputAmount: firstHopAmounts[0]\n            })\n        );\n\n        uint256 pathCount = 0;\n        for (uint256 i = 0; i < 2; i++) {\n            for (uint256 j = 0; j < 2; j++) {\n                poolPaths[pathCount] = new IUniswapV3Pool[](2);\n                IUniswapV3Pool[] memory currentPath = poolPaths[pathCount];\n                currentPath[0] = firstHopTopPools[i];\n                currentPath[1] = secondHopTopPools[j];\n                pathCount++;\n            }\n        }\n    }\n\n    struct GetTopTwoPoolsParams {\n        IUniswapV3Factory factory;\n        IUniswapV3MultiQuoter multiQuoter;\n        IERC20TokenV06 inputToken;\n        IERC20TokenV06 outputToken;\n        uint256 inputAmount;\n    }\n\n    /// @dev Returns top 0-2 pools and corresponding output amounts based on swaping `inputAmount`.\n    /// Addresses in `topPools` can be zero addresses when there are pool isn't available.\n    function getTopTwoPools(\n        GetTopTwoPoolsParams memory params\n    ) private view returns (IUniswapV3Pool[2] memory topPools, uint256[2] memory topOutputAmounts) {\n        IERC20TokenV06[] memory path = new IERC20TokenV06[](2);\n        path[0] = params.inputToken;\n        path[1] = params.outputToken;\n\n        uint256[] memory inputAmounts = new uint256[](1);\n        inputAmounts[0] = params.inputAmount;\n\n        uint24[4] memory validPoolFees = [uint24(0.0001e6), uint24(0.0005e6), uint24(0.003e6), uint24(0.01e6)];\n        for (uint256 i = 0; i < validPoolFees.length; ++i) {\n            IUniswapV3Pool pool = params.factory.getPool(\n                address(params.inputToken),\n                address(params.outputToken),\n                validPoolFees[i]\n            );\n            if (!isValidPool(pool)) {\n                continue;\n            }\n\n            IUniswapV3Pool[] memory poolPath = new IUniswapV3Pool[](1);\n            poolPath[0] = pool;\n            bytes memory uniswapPath = toUniswapPath(path, poolPath);\n\n            try\n                params.multiQuoter.quoteExactMultiInput{gas: POOL_FILTERING_GAS_LIMIT}(\n                    params.factory,\n                    uniswapPath,\n                    inputAmounts\n                )\n            {} catch (bytes memory reason) {\n                (bool success, uint256[] memory outputAmounts, ) = catchMultiSwapResult(reason);\n                if (success) {\n                    // Keeping track of the top 2 pools.\n                    if (outputAmounts[0] > topOutputAmounts[0]) {\n                        topOutputAmounts[1] = topOutputAmounts[0];\n                        topPools[1] = topPools[0];\n                        topOutputAmounts[0] = outputAmounts[0];\n                        topPools[0] = pool;\n                    } else if (outputAmounts[0] > topOutputAmounts[1]) {\n                        topOutputAmounts[1] = outputAmounts[0];\n                        topPools[1] = pool;\n                    }\n                }\n            }\n        }\n    }\n\n    function isValidPool(IUniswapV3Pool pool) internal view returns (bool isValid) {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // Must have a balance of both tokens.\n        if (IERC20TokenV06(pool.token0()).balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (IERC20TokenV06(pool.token1()).balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function isValidPoolPath(IUniswapV3Pool[] memory poolPaths) internal pure returns (bool) {\n        for (uint256 i = 0; i < poolPaths.length; i++) {\n            if (address(poolPaths[i]) == address(0)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function catchMultiSwapResult(\n        bytes memory revertReason\n    ) internal pure returns (bool success, uint256[] memory amounts, uint256[] memory gasEstimates) {\n        bytes4 selector;\n        assembly {\n            selector := mload(add(revertReason, 32))\n        }\n\n        if (selector != bytes4(keccak256(\"result(uint256[],uint256[])\"))) {\n            return (false, amounts, gasEstimates);\n        }\n\n        assembly {\n            let length := sub(mload(revertReason), 4)\n            revertReason := add(revertReason, 4)\n            mstore(revertReason, length)\n        }\n        (amounts, gasEstimates) = abi.decode(revertReason, (uint256[], uint256[]));\n        return (true, amounts, gasEstimates);\n    }\n}\n"
        },
        "./interfaces/IUniswapV3.sol": {
            "id": 47,
            "content": "pragma solidity >=0.6;\n\ninterface IUniswapV3QuoterV2 {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (IUniswapV3Factory);\n\n    // @notice Returns the amount out received for a given exact input swap without executing the swap\n    // @param path The path of the swap, i.e. each token pair and the pool fee\n    // @param amountIn The amount of the first token to swap\n    // @return amountOut The amount of the last token that would be received\n    // @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    // @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    // @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInput(\n        bytes memory path,\n        uint256 amountIn\n    )\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    // @notice Returns the amount in required for a given exact output swap without executing the swap\n    // @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    // @param amountOut The amount of the last token to receive\n    // @return amountIn The amount of first token required to be paid\n    // @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    // @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    // @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutput(\n        bytes memory path,\n        uint256 amountOut\n    )\n        external\n        returns (\n            uint256 amountIn,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n}\n\ninterface IUniswapV3Pool {\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(\n        int24 tick\n    )\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n}\n\ninterface IUniswapV3Factory {\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param a The contract address of either token0 or token1\n    /// @param b The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(address a, address b, uint24 fee) external view returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3MultiQuoter {\n    // @notice Returns the amounts out received for a given set of exact input swaps without executing the swap\n    /// @param factory The factory contract managing UniswapV3 pools\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountsIn The amounts in of the first token to swap\n    function quoteExactMultiInput(\n        IUniswapV3Factory factory,\n        bytes memory path,\n        uint256[] memory amountsIn\n    ) external view;\n\n    /// @notice Returns the amounts in received for a given set of exact output swaps without executing the swap\n    /// @param factory The factory contract managing UniswapV3 pools\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountsOut The amounts out of the last token to receive\n    function quoteExactMultiOutput(\n        IUniswapV3Factory factory,\n        bytes memory path,\n        uint256[] memory amountsOut\n    ) external view;\n}\n"
        },
        "./VelodromeSampler.sol": {
            "id": 33,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2022 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\nstruct VeloRoute {\n    address from;\n    address to;\n    bool stable;\n}\n\ninterface IVelodromeRouter {\n    function getAmountOut(\n        uint256 amountIn,\n        address tokenIn,\n        address tokenOut\n    ) external view returns (uint256 amount, bool stable);\n\n    function getAmountsOut(\n        uint256 amountIn,\n        VeloRoute[] calldata routes\n    ) external view returns (uint256[] memory amounts);\n}\n\ncontract VelodromeSampler is SamplerUtils, ApproximateBuys {\n    /// @dev Sample sell quotes from Velodrome\n    /// @param router Address of Velodrome router.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample (sorted in ascending order).\n    /// @return stable Whether the pool is a stable pool (vs volatile).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromVelodrome(\n        IVelodromeRouter router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (bool stable, uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // Sampling should not mix stable and volatile pools.\n        // Find the most liquid pool based on max(takerTokenAmounts) and stick with it.\n        stable = _isMostLiquidPoolStablePool(router, takerToken, makerToken, takerTokenAmounts);\n        VeloRoute[] memory routes = new VeloRoute[](1);\n        routes[0] = VeloRoute({from: takerToken, to: makerToken, stable: stable});\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            makerTokenAmounts[i] = router.getAmountsOut(takerTokenAmounts[i], routes)[1];\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Velodrome.\n    /// @param router Address of Velodrome router.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return stable Whether the pool is a stable pool (vs volatile).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromVelodrome(\n        IVelodromeRouter router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (bool stable, uint256[] memory takerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n\n        // Sampling should not mix stable and volatile pools.\n        // Find the most liquid pool based on the reverse swap (maker -> taker) and stick with it.\n        stable = _isMostLiquidPoolStablePool(router, makerToken, takerToken, makerTokenAmounts);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                takerTokenData: abi.encode(router, VeloRoute({from: takerToken, to: makerToken, stable: stable})),\n                makerTokenData: abi.encode(router, VeloRoute({from: makerToken, to: takerToken, stable: stable})),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromVelodrome\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromVelodrome(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    ) internal view returns (uint256) {\n        (IVelodromeRouter router, VeloRoute memory route) = abi.decode(takerTokenData, (IVelodromeRouter, VeloRoute));\n\n        VeloRoute[] memory routes = new VeloRoute[](1);\n        routes[0] = route;\n        return router.getAmountsOut(sellAmount, routes)[1];\n    }\n\n    /// @dev Returns whether the most liquid pool is a stable pool.\n    /// @param router Address of Velodrome router.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token buy amount for each sample (sorted in ascending order)\n    /// @return stable Whether the pool is a stable pool (vs volatile).\n    function _isMostLiquidPoolStablePool(\n        IVelodromeRouter router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) internal view returns (bool stable) {\n        uint256 numSamples = takerTokenAmounts.length;\n        (, stable) = router.getAmountOut(takerTokenAmounts[numSamples - 1], takerToken, makerToken);\n    }\n}\n"
        },
        "./WooPPSampler.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\nimport \"./SamplerUtils.sol\";\nimport \"./ApproximateBuys.sol\";\n\ninterface IWooPP {\n    /// @dev query the amount to swap fromToken -> toToken\n    /// @param fromToken the from token\n    /// @param toToken the to token\n    /// @param fromAmount the amount of fromToken to swap\n    /// @return toAmount the predicted amount to receive\n    function querySwap(address fromToken, address toToken, uint256 fromAmount) external view returns (uint256 toAmount);\n}\n\ncontract WooPPSampler is SamplerUtils, ApproximateBuys {\n    /// @dev Sample sell quotes from WooFI.\n    /// @param router Address of the router we are sampling from\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample (sorted in ascending order).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromWooPP(\n        IWooPP router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            makerTokenAmounts[i] = router.querySwap(takerToken, makerToken, takerTokenAmounts[i]);\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from WooFI.\n    /// @param router Address of the router we are sampling from\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample (sorted in ascending order).\n    /// @return takerTokenAmounts Taker amounts bought at each taker token\n    ///         amount.\n    function sampleBuysFromWooPP(\n        IWooPP router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                takerTokenData: abi.encode(router, takerToken, makerToken),\n                makerTokenData: abi.encode(router, makerToken, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromWoofi\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromWoofi(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    ) internal view returns (uint256) {\n        (IWooPP _router, address _takerToken, address _makerToken) = abi.decode(\n            takerTokenData,\n            (IWooPP, address, address)\n        );\n        (bool success, bytes memory resultData) = address(this).staticcall(\n            abi.encodeWithSelector(\n                this.sampleSellsFromWooPP.selector,\n                _router,\n                _takerToken,\n                _makerToken,\n                _toSingleValueArray(sellAmount)\n            )\n        );\n        if (!success) {\n            return 0;\n        }\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "./UtilitySampler.sol": {
            "id": 32,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens) public view returns (uint256[] memory decimals) {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS ? 18 : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(\n        IERC20TokenV06[] memory tokens,\n        address account\n    ) public view returns (uint256[] memory balances) {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS ? account.balance : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(\n        IERC20TokenV06[] memory tokens,\n        address account,\n        address spender\n    ) public view returns (uint256[] memory allowances) {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS ? 0 : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account) public view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    function getGasLeft() public returns (uint256) {\n        return gasleft();\n    }\n\n    function getBlockNumber() public view returns (uint256) {\n        return block.number;\n    }\n}\n"
        }
    },
    "sourceCodes": {
        "./ERC20BridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./AaveV2Sampler.sol\";\nimport \"./AaveV3Sampler.sol\";\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BalancerV2BatchSampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./BancorV3Sampler.sol\";\nimport \"./CompoundSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./GMXSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LidoSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./PlatypusSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SynthetixSampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./VelodromeSampler.sol\";\nimport \"./WooPPSampler.sol\";\nimport \"./UtilitySampler.sol\";\n\ncontract ERC20BridgeSampler is\n    AaveV2Sampler,\n    AaveV3Sampler,\n    BalancerSampler,\n    BalancerV2Sampler,\n    BalancerV2BatchSampler,\n    BancorSampler,\n    BancorV3Sampler,\n    CompoundSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    GMXSampler,\n    KyberDmmSampler,\n    LidoSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    NativeOrderSampler,\n    PlatypusSampler,\n    ShellSampler,\n    SynthetixSampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    VelodromeSampler,\n    WooPPSampler,\n    UtilitySampler\n{\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas) external returns (CallResults[] memory callResults) {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n\n    receive() external payable {}\n}\n",
        "./AaveV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ncontract AaveV2Sampler {\n    /// @dev Sample sell quotes from AaveV2.\n    /// @param aToken address of the aToken.\n    /// @param underlyingToken address of the underlying collateral token.\n    /// @param takerToken address of the taker token (what to sell).\n    /// @param makerToken address of the maker token (what to buy).\n    /// @param takerTokenAmounts taker token buy amounts for each sample\n    /// @return makerTokenAmounts maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromAaveV2(\n        address aToken,\n        address underlyingToken,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public pure returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (takerToken == underlyingToken && makerToken == aToken) {\n            return takerTokenAmounts;\n        }\n\n        // Aave V2 balances sometimes have a rounding error causing\n        // 1 fewer wei from being outputted during unwraps\n        if (takerToken == aToken && makerToken == underlyingToken) {\n            for (uint256 i = 0; i < numSamples; i++) {\n                takerTokenAmounts[i] -= 1;\n            }\n            return takerTokenAmounts;\n        }\n    }\n\n    /// @dev Sample buy quotes from AaveV2.\n    /// @param aToken address of the aToken.\n    /// @param underlyingToken address of the underlying collateral token.\n    /// @param takerToken address of the taker token (what to sell).\n    /// @param makerToken address of the maker token (what to buy).\n    /// @param makerTokenAmounts maker token sell amounts for each sample\n    /// @return takerTokenAmounts taker amounts bought at each maker token\n    ///         amount.\n    function sampleBuysFromAaveV2(\n        address aToken,\n        address underlyingToken,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public pure returns (uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        if (takerToken == underlyingToken && makerToken == aToken) {\n            return makerTokenAmounts;\n        }\n\n        // Aave V2 balances sometimes have a rounding error causing\n        // 1 fewer wei from being outputted during unwraps\n        if (takerToken == aToken && makerToken == underlyingToken) {\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] -= 1;\n            }\n            return makerTokenAmounts;\n        }\n    }\n}\n",
        "./AaveV3Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n// Minimal Aave V3 L2Encoder interface\ninterface IL2Encoder {\n    /**\n     * @notice Encodes supply parameters from standard input to compact representation of 1 bytes32\n     * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param referralCode referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @return compact representation of supply parameters\n     */\n    function encodeSupplyParams(address asset, uint256 amount, uint16 referralCode) external view returns (bytes32);\n\n    /**\n     * @notice Encodes withdraw parameters from standard input to compact representation of 1 bytes32\n     * @dev Without a to parameter as the compact calls to L2Pool will use msg.sender as to\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     * @return compact representation of withdraw parameters\n     */\n    function encodeWithdrawParams(address asset, uint256 amount) external view returns (bytes32);\n}\n\ncontract AaveV3Sampler {\n    /// @dev Sample sell quotes from AaveV3.\n    /// @param l2Encoder address of the l2 encoder.\n    /// @param aToken address of the aToken.\n    /// @param underlyingToken address of the underlying collateral token.\n    /// @param takerToken address of the taker token (what to sell).\n    /// @param makerToken address of the maker token (what to buy).\n    /// @param takerTokenAmounts taker token buy amounts for each sample\n    /// @return l2Params l2 encoded parameters for each sample\n    /// @return makerTokenAmounts maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromAaveV3(\n        address l2Encoder,\n        address aToken,\n        address underlyingToken,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (bytes32[] memory l2Params, uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        l2Params = new bytes32[](numSamples);\n\n        if (\n            (takerToken == aToken && makerToken == underlyingToken) ||\n            (takerToken == underlyingToken && makerToken == aToken)\n        ) {\n            makerTokenAmounts = takerTokenAmounts;\n            if (l2Encoder == address(0)) {\n                return (l2Params, makerTokenAmounts);\n            }\n\n            IL2Encoder l2 = IL2Encoder(l2Encoder);\n            for (uint256 i = 0; i < numSamples; i++) {\n                if (makerToken == aToken) {\n                    l2Params[i] = l2.encodeSupplyParams(takerToken, makerTokenAmounts[i], 0);\n                } else if (takerToken == aToken) {\n                    l2Params[i] = l2.encodeWithdrawParams(makerToken, makerTokenAmounts[i]);\n                }\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from AaveV3.\n    /// @param l2Encoder address of the l2 encoder.\n    /// @param aToken address of the aToken.\n    /// @param underlyingToken address of the underlying collateral token.\n    /// @param takerToken address of the taker token (what to sell).\n    /// @param makerToken address of the maker token (what to buy).\n    /// @param makerTokenAmounts maker token sell amounts for each sample\n    /// @return l2Params l2 encoded parameters for each sample\n    /// @return takerTokenAmounts taker amounts bought at each maker token\n    ///         amount.\n    function sampleBuysFromAaveV3(\n        address l2Encoder,\n        address aToken,\n        address underlyingToken,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (bytes32[] memory l2Params, uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        l2Params = new bytes32[](numSamples);\n\n        if (\n            (takerToken == aToken && makerToken == underlyingToken) ||\n            (takerToken == underlyingToken && makerToken == aToken)\n        ) {\n            takerTokenAmounts = makerTokenAmounts;\n            if (l2Encoder == address(0)) {\n                return (l2Params, takerTokenAmounts);\n            }\n\n            IL2Encoder l2 = IL2Encoder(l2Encoder);\n            for (uint256 i = 0; i < numSamples; i++) {\n                if (makerToken == aToken) {\n                    l2Params[i] = l2.encodeSupplyParams(takerToken, makerTokenAmounts[i], 0);\n                } else if (takerToken == aToken) {\n                    l2Params[i] = l2.encodeWithdrawParams(makerToken, makerTokenAmounts[i]);\n                }\n            }\n        }\n    }\n}\n",
        "./BalancerSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\n\ncontract BalancerSampler {\n    /// @dev Base gas limit for Balancer calls.\n    uint256 private constant BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 private constant BONE = 10 ** 18;\n    uint256 private constant MAX_IN_RATIO = BONE / 2;\n    uint256 private constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn{gas: BALANCER_CALL_GAS}(\n                    poolState.takerTokenBalance,\n                    poolState.takerTokenWeight,\n                    poolState.makerTokenBalance,\n                    poolState.makerTokenWeight,\n                    takerTokenAmounts[i],\n                    poolState.swapFee\n                )\n            returns (uint256 amount) {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut{gas: BALANCER_CALL_GAS}(\n                    poolState.takerTokenBalance,\n                    poolState.takerTokenWeight,\n                    poolState.makerTokenBalance,\n                    poolState.makerTokenWeight,\n                    makerTokenAmounts[i],\n                    poolState.swapFee\n                )\n            returns (uint256 amount) {\n                // Handles this revert scenario:\n                // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n                if (amount > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                    break;\n                }\n\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b) private pure returns (uint256 c) {\n        uint256 c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint256 c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint256 c2 = c1 / BONE;\n        return c2;\n    }\n}\n",
        "./interfaces/IBalancer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n\n    function getDenormalizedWeight(address token) external view returns (uint256);\n\n    function getBalance(address token) external view returns (uint256);\n\n    function getSwapFee() external view returns (uint256);\n\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n",
        "./BalancerV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"./interfaces/IBalancerV2Vault.sol\";\nimport \"./BalancerV2Common.sol\";\n\ncontract BalancerV2Sampler is SamplerUtils, BalancerV2Common {\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        IBalancerV2Vault.BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public returns (uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        address[] memory swapAssets = new address[](2);\n        swapAssets[0] = takerToken;\n        swapAssets[1] = makerToken;\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds = _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps = _createSwapSteps(poolInfo, takerTokenAmounts[i]);\n\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            returns (\n                // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n                int256[] memory amounts\n            ) {\n                // Outgoing balance is negative so we need to flip the sign\n                int256 amountOutFromPool = amounts[amounts.length - 1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        IBalancerV2Vault.BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public returns (uint256[] memory takerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        address[] memory swapAssets = new address[](2);\n        swapAssets[0] = takerToken;\n        swapAssets[1] = makerToken;\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds = _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps = _createSwapSteps(poolInfo, makerTokenAmounts[i]);\n\n            try\n                // For buys we specify the makerToken which is what taker will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (int256[] memory amounts) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _createSwapSteps(\n        IBalancerV2Vault.BalancerV2PoolInfo memory poolInfo,\n        uint256 amount\n    ) private pure returns (IBalancerV2Vault.BatchSwapStep[] memory) {\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps = new IBalancerV2Vault.BatchSwapStep[](1);\n        swapSteps[0] = IBalancerV2Vault.BatchSwapStep({\n            poolId: poolInfo.poolId,\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            amount: amount,\n            userData: \"\"\n        });\n\n        return swapSteps;\n    }\n}\n",
        "./SamplerUtils.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract SamplerUtils {\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress) internal view virtual returns (uint8 decimals) {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v) internal pure returns (uint256[] memory arr) {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken) internal pure {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\nlibrary LibERC20TokenV06 {\n    bytes private constant DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(IERC20TokenV06 token, address spender, uint256 allowance) internal {\n        bytes memory callData = abi.encodeWithSelector(token.approve.selector, spender, allowance);\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(IERC20TokenV06 token, address spender, uint256 amount) internal {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(IERC20TokenV06 token, address to, uint256 amount) internal {\n        bytes memory callData = abi.encodeWithSelector(token.transfer.selector, to, amount);\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(IERC20TokenV06 token, address from, address to, uint256 amount) internal {\n        bytes memory callData = abi.encodeWithSelector(token.transferFrom.selector, from, to, amount);\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token) internal view returns (uint8 tokenDecimals) {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(\n        IERC20TokenV06 token,\n        address owner,\n        address spender\n    ) internal view returns (uint256 allowance_) {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(token.allowance.selector, owner, spender)\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner) internal view returns (uint256 balance) {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(token.balanceOf.selector, owner)\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(address target, bytes memory callData) private {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        // Revert if the call reverted.\n        if (!didSucceed) {\n            LibRichErrorsV06.rrevert(resultData);\n        }\n        // If we get back 0 returndata, this may be a non-standard ERC-20 that\n        // does not return a boolean. Check that it at least contains code.\n        if (resultData.length == 0) {\n            uint256 size;\n            assembly {\n                size := extcodesize(target)\n            }\n            require(size > 0, \"invalid token address, contains no code\");\n            return;\n        }\n        // If we get back at least 32 bytes, we know the target address\n        // contains code, and we assume it is a token that returned a boolean\n        // success value, which must be true.\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return;\n            } else {\n                LibRichErrorsV06.rrevert(resultData);\n            }\n        }\n        // If 0 < returndatasize < 32, the target is a contract, but not a\n        // valid token.\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nlibrary LibRichErrorsV06 {\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message) internal pure returns (bytes memory) {\n        return abi.encodeWithSelector(STANDARD_ERROR_SELECTOR, bytes(message));\n    }\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData) internal pure {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\nlibrary LibBytesV06 {\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input) internal pure returns (uint256 memoryAddress) {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input) internal pure returns (uint256 memoryAddress) {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(uint256 dest, uint256 source, uint256 length) internal pure {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    for {\n\n                    } lt(source, sEnd) {\n\n                    } {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    for {\n\n                    } slt(dest, dEnd) {\n\n                    } {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(bytes memory b, uint256 from, uint256 to) internal pure returns (bytes memory result) {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                    from,\n                    to\n                )\n            );\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                    to,\n                    b.length\n                )\n            );\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(result.contentAddress(), b.contentAddress() + from, result.length);\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(bytes memory b, uint256 from, uint256 to) internal pure returns (bytes memory result) {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                    from,\n                    to\n                )\n            );\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                    to,\n                    b.length\n                )\n            );\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b) internal pure returns (bytes1 result) {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                    b.length,\n                    0\n                )\n            );\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(bytes memory lhs, bytes memory rhs) internal pure returns (bool equal) {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(bytes memory b, uint256 index) internal pure returns (address result) {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                    b.length,\n                    index + 20 // 20 is length of address\n                )\n            );\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(bytes memory b, uint256 index, address input) internal pure {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                    b.length,\n                    index + 20 // 20 is length of address\n                )\n            );\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(bytes memory b, uint256 index) internal pure returns (bytes32 result) {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                    b.length,\n                    index + 32\n                )\n            );\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(bytes memory b, uint256 index, bytes32 input) internal pure {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                    b.length,\n                    index + 32\n                )\n            );\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(bytes memory b, uint256 index) internal pure returns (uint256 result) {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(bytes memory b, uint256 index, uint256 input) internal pure {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(bytes memory b, uint256 index) internal pure returns (bytes4 result) {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(\n                LibBytesRichErrorsV06.InvalidByteOperationError(\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                    b.length,\n                    index + 4\n                )\n            );\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length) internal pure {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nlibrary LibBytesRichErrorsV06 {\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR = 0x28006595;\n\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    ) internal pure returns (bytes memory) {\n        return abi.encodeWithSelector(INVALID_BYTE_OPERATION_ERROR_SELECTOR, errorCode, offset, required);\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\ninterface IERC20TokenV06 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply() external view returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner) external view returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals() external view returns (uint8);\n}\n",
        "./interfaces/IBalancerV2Vault.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n/// @dev Minimal Balancer V2 Vault interface\n///      for documentation refer to https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\ninterface IBalancerV2Vault {\n    enum SwapKind {\n        GIVEN_IN,\n        GIVEN_OUT\n    }\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    struct BalancerV2PoolInfo {\n        bytes32 poolId;\n        address vault;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] calldata swaps,\n        address[] calldata assets,\n        FundManagement calldata funds\n    ) external returns (int256[] memory assetDeltas);\n}\n",
        "./BalancerV2Common.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancerV2Vault.sol\";\n\ncontract BalancerV2Common {\n    function _createSwapFunds() internal view returns (IBalancerV2Vault.FundManagement memory) {\n        return\n            IBalancerV2Vault.FundManagement({\n                sender: address(this),\n                fromInternalBalance: false,\n                recipient: payable(address(this)),\n                toInternalBalance: false\n            });\n    }\n}\n",
        "./BalancerV2BatchSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancerV2Vault.sol\";\nimport \"./BalancerV2Common.sol\";\n\ncontract BalancerV2BatchSampler is BalancerV2Common {\n    // Replaces amount for first step with each takerTokenAmount and calls queryBatchSwap using supplied steps\n    /// @dev Sample sell quotes from Balancer V2 supporting multihops.\n    /// @param swapSteps Array of swap steps (can be >= 1).\n    /// @param swapAssets Array of token address for swaps.\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    function sampleMultihopSellsFromBalancerV2(\n        IBalancerV2Vault vault,\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps,\n        address[] memory swapAssets,\n        uint256[] memory takerTokenAmounts\n    ) public returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds = _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            swapSteps[0].amount = takerTokenAmounts[i];\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            returns (\n                // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n                int256[] memory amounts\n            ) {\n                // Outgoing balance is negative so we need to flip the sign\n                // Note - queryBatchSwap will return a delta for each token in the assets array and last asset should be tokenOut\n                int256 amountOutFromPool = amounts[amounts.length - 1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    // Replaces amount for first step with each makerTokenAmount and calls queryBatchSwap using supplied steps\n    /// @dev Sample buy quotes from Balancer V2 supporting multihops.\n    /// @param swapSteps Array of swap steps (can be >= 1).\n    /// @param swapAssets Array of token address for swaps.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    function sampleMultihopBuysFromBalancerV2(\n        IBalancerV2Vault vault,\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps,\n        address[] memory swapAssets,\n        uint256[] memory makerTokenAmounts\n    ) public returns (uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds = _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            swapSteps[0].amount = makerTokenAmounts[i];\n            try\n                // Uses GIVEN_OUT type for Buy\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (\n                // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n                int256[] memory amounts\n            ) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./BancorSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract BancorSampler {\n    /// @dev Base gas limit for Bancor calls.\n    uint256 private constant BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts) {\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try IBancorNetwork(bancorNetwork).rateByPath{gas: BANCOR_CALL_GAS}(path, takerTokenAmounts[i]) returns (\n                uint256 amount\n            ) {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts) {}\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) internal view returns (address bancorNetwork, address[] memory path) {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork).rateByPath{gas: BANCOR_CALL_GAS}(\n                    opts.paths[i],\n                    takerTokenAmounts[takerTokenAmounts.length - 1]\n                )\n            returns (uint256 amount) {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n",
        "./interfaces/IBancor.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n    function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n\n    function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n",
        "./BancorV3Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2022 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancorV3.sol\";\n\ncontract BancorV3Sampler {\n    /// @dev Gas limit for BancorV3 calls.\n    uint256 private constant BancorV3_CALL_GAS = 150e3; // 150k\n\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    /// @dev Sample sell quotes from BancorV3.\n    /// @param weth The WETH contract address\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancorV3(\n        address weth,\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (path[0] == weth) {\n            path[0] = ETH;\n        }\n        if (path[1] == weth) {\n            path[1] = ETH;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try IBancorV3(router).tradeOutputBySourceAmount(path[0], path[1], takerTokenAmounts[i]) returns (\n                uint256 amount\n            ) {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from BancorV3.\n    /// @param weth The WETH contract address\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancorV3(\n        address weth,\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        if (path[0] == weth) {\n            path[0] = ETH;\n        }\n        if (path[1] == weth) {\n            path[1] = ETH;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try IBancorV3(router).tradeInputByTargetAmount(path[0], path[1], makerTokenAmounts[i]) returns (\n                uint256 amount\n            ) {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./interfaces/IBancorV3.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2022 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IBancorV3 {\n    /**\n     * @dev returns the output amount when trading by providing the source amount\n     */\n    function tradeOutputBySourceAmount(\n        address sourceToken,\n        address targetToken,\n        uint256 sourceAmount\n    ) external view returns (uint256);\n\n    /**\n     * @dev returns the input amount when trading by providing the target amount\n     */\n    function tradeInputByTargetAmount(\n        address sourceToken,\n        address targetToken,\n        uint256 targetAmount\n    ) external view returns (uint256);\n}\n",
        "./CompoundSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n// Minimal CToken interface\ninterface ICToken {\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CompoundSampler is SamplerUtils {\n    uint256 private constant EXCHANGE_RATE_SCALE = 1e10;\n\n    function sampleSellsFromCompound(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        // Exchange rate is scaled by 1 * 10^(18 - 8 + Underlying Token Decimals\n        uint256 exchangeRate = cToken.exchangeRateStored();\n        uint256 cTokenDecimals = uint256(cToken.decimals());\n\n        if (address(makerToken) == address(cToken)) {\n            // mint\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] =\n                    (takerTokenAmounts[i] * EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals) /\n                    exchangeRate;\n            }\n        } else if (address(takerToken) == address(cToken)) {\n            // redeem\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] =\n                    (takerTokenAmounts[i] * exchangeRate) /\n                    (EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals);\n            }\n        }\n    }\n\n    function sampleBuysFromCompound(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        // Exchange rate is scaled by 1 * 10^(18 - 8 + Underlying Token Decimals\n        uint256 exchangeRate = cToken.exchangeRateStored();\n        uint256 cTokenDecimals = uint256(cToken.decimals());\n\n        if (address(makerToken) == address(cToken)) {\n            // mint\n            for (uint256 i = 0; i < numSamples; i++) {\n                takerTokenAmounts[i] =\n                    (makerTokenAmounts[i] * exchangeRate) /\n                    (EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals);\n            }\n        } else if (address(takerToken) == address(cToken)) {\n            // redeem\n            for (uint256 i = 0; i < numSamples; i++) {\n                takerTokenAmounts[i] =\n                    (makerTokenAmounts[i] * EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals) /\n                    exchangeRate;\n            }\n        }\n    }\n}\n",
        "./CurveSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ncontract CurveSampler is SamplerUtils, ApproximateBuys {\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 private constant CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) = curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                abi.encodeWithSelector(\n                    curveInfo.sellQuoteFunctionSelector,\n                    fromTokenIdx,\n                    toTokenIdx,\n                    takerTokenAmounts[i]\n                )\n            );\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return\n                _sampleApproximateBuys(\n                    ApproximateBuyQuoteOpts({\n                        makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                        takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                        getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                    }),\n                    makerTokenAmounts\n                );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) = curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                abi.encodeWithSelector(\n                    curveInfo.buyQuoteFunctionSelector,\n                    fromTokenIdx,\n                    toTokenIdx,\n                    makerTokenAmounts[i]\n                )\n            );\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            takerTokenAmounts[i] = sellAmount;\n            // Break early if there are 0 amounts\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    ) private view returns (uint256 buyAmount) {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) = abi.decode(takerTokenData, (int128, CurveInfo));\n        int128 makerTokenIdx = abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) = address(this).staticcall(\n            abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            )\n        );\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/ICurve.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(int128 i, int128 j, uint256 sellAmount, uint256 minBuyAmount) external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(int128 i, int128 j, uint256 sellAmount) external returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(int128 i, int128 j, uint256 buyAmount) external returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(int128 i) external returns (address tokenAddress);\n}\n",
        "./ApproximateBuys.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\ncontract ApproximateBuys {\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function(bytes memory, bytes memory, uint256) internal view returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    ) internal view returns (uint256[] memory takerTokenAmounts) {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(opts.makerTokenData, opts.takerTokenData, makerTokenAmounts[0]);\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(opts.takerTokenData, opts.makerTokenData, sellAmount);\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256 eps = 0;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(makerTokenAmounts[i], buyAmount, sellAmount);\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(opts.takerTokenData, opts.makerTokenData, sellAmount);\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    eps = ((buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS) / makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (eps == 0 || eps > APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                break;\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(makerTokenAmounts[i], buyAmount, sellAmount);\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal view returns (uint256 partialAmount) {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\nlibrary LibMathV06 {\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (uint256 partialAmount) {\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(numerator, denominator, target));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (uint256 partialAmount) {\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(numerator, denominator, target));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target).safeAdd(denominator.safeSub(1)).safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (uint256 partialAmount) {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (uint256 partialAmount) {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target).safeAdd(denominator.safeSub(1)).safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (bool isError) {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(target, numerator, denominator);\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (bool isError) {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(target, numerator, denominator);\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\nlibrary LibSafeMathV06 {\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                    a,\n                    b\n                )\n            );\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                    a,\n                    b\n                )\n            );\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                    a,\n                    b\n                )\n            );\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                    a,\n                    b\n                )\n            );\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b) internal pure returns (uint128) {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                    a,\n                    b\n                )\n            );\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b) internal pure returns (uint128) {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                    a,\n                    b\n                )\n            );\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b) internal pure returns (uint128) {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                    a,\n                    b\n                )\n            );\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b) internal pure returns (uint128) {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256BinOpError(\n                    LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                    a,\n                    b\n                )\n            );\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b) internal pure returns (uint128) {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a) internal pure returns (uint128) {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(\n                LibSafeMathRichErrorsV06.Uint256DowncastError(\n                    LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                    a\n                )\n            );\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nlibrary LibSafeMathRichErrorsV06 {\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR = 0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR = 0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    function Uint256BinOpError(BinOpErrorCodes errorCode, uint256 a, uint256 b) internal pure returns (bytes memory) {\n        return abi.encodeWithSelector(UINT256_BINOP_ERROR_SELECTOR, errorCode, a, b);\n    }\n\n    function Uint256DowncastError(DowncastErrorCodes errorCode, uint256 a) internal pure returns (bytes memory) {\n        return abi.encodeWithSelector(UINT256_DOWNCAST_ERROR_SELECTOR, errorCode, a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nlibrary LibMathRichErrorsV06 {\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR = hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR = 0x339f3de2;\n\n    function DivisionByZeroError() internal pure returns (bytes memory) {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (bytes memory) {\n        return abi.encodeWithSelector(ROUNDING_ERROR_SELECTOR, numerator, denominator, target);\n    }\n}\n",
        "./DODOSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is SamplerUtils, ApproximateBuys {\n    /// @dev Gas limit for DODO calls.\n    uint256 private constant DODO_CALL_GAS = 300e3; // 300k\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken, opts.helper), // taker token data\n                abi.encode(makerToken, pool, baseToken, opts.helper), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken, opts.helper),\n                takerTokenData: abi.encode(takerToken, pool, baseToken, opts.helper),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    ) private view returns (uint256) {\n        (address takerToken, address pool, address baseToken, address helper) = abi.decode(\n            takerTokenData,\n            (address, address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try IDODO(pool).querySellBaseToken{gas: DODO_CALL_GAS}(sellAmount) returns (uint256 amount) {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try IDODOHelper(helper).querySellQuoteToken{gas: DODO_CALL_GAS}(pool, sellAmount) returns (uint256 amount) {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n}\n",
        "./DODOV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken) external view returns (address[] memory machines);\n}\n\ninterface IDODOV2Pool {\n    function querySellBase(\n        address trader,\n        uint256 payBaseAmount\n    ) external view returns (uint256 receiveQuoteAmount, uint256 mtFee);\n\n    function querySellQuote(\n        address trader,\n        uint256 payQuoteAmount\n    ) external view returns (uint256 receiveBaseAmount, uint256 mtFee);\n}\n\ncontract DODOV2Sampler is SamplerUtils, ApproximateBuys {\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 private constant DODO_V2_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODOV2(\n                abi.encode(takerToken, pool, sellBase), // taker token data\n                abi.encode(makerToken, pool, sellBase), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, !sellBase),\n                takerTokenData: abi.encode(takerToken, pool, sellBase),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODOV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODOV2(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    ) private view returns (uint256) {\n        (address takerToken, address pool, bool sellBase) = abi.decode(takerTokenData, (address, address, bool));\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        // since we use approximate buy for sell and buy functions\n        if (sellBase) {\n            try IDODOV2Pool(pool).querySellBase{gas: DODO_V2_CALL_GAS}(address(0), sellAmount) returns (\n                uint256 amount,\n                uint256\n            ) {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            try IDODOV2Pool(pool).querySellQuote{gas: DODO_V2_CALL_GAS}(address(0), sellAmount) returns (\n                uint256 amount,\n                uint256\n            ) {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    ) internal view returns (address machine, bool sellBase) {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n}\n",
        "./GMXSampler.sol": "pragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IGMX.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ncontract GMXSampler is SamplerUtils, ApproximateBuys {\n    struct GMXInfo {\n        address reader;\n        address vault;\n        address[] path;\n    }\n\n    function sampleSellsFromGMX(\n        IGMX reader,\n        address vault,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try IGMX(reader).getMaxAmountIn(IVault(vault), path[0], path[1]) returns (uint256 maxAmountIn) {\n                // Break early if GMX does not have enough liquidity to perform the swap\n                if (takerTokenAmounts[i] > maxAmountIn) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n            try IGMX(reader).getAmountOut(IVault(vault), path[0], path[1], takerTokenAmounts[i]) returns (\n                uint256 amountAfterFees,\n                uint256 feeAmount\n            ) {\n                makerTokenAmounts[i] = amountAfterFees;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function sampleBuysFromGMX(\n        IGMX reader,\n        address vault,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        address[] memory invertBuyPath = new address[](2);\n        invertBuyPath[0] = path[1];\n        invertBuyPath[1] = path[0];\n        return\n            _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(address(reader), vault, invertBuyPath),\n                    takerTokenData: abi.encode(address(reader), vault, path),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromGMX\n                }),\n                makerTokenAmounts\n            );\n    }\n\n    function _sampleSellForApproximateBuyFromGMX(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    ) private view returns (uint256 buyAmount) {\n        (address _reader, address _vault, address[] memory _path) = abi.decode(\n            takerTokenData,\n            (address, address, address[])\n        );\n\n        (bool success, bytes memory resultData) = address(this).staticcall(\n            abi.encodeWithSelector(\n                this.sampleSellsFromGMX.selector,\n                _reader,\n                _vault,\n                _path,\n                _toSingleValueArray(sellAmount)\n            )\n        );\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/IGMX.sol": "pragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IGMX {\n    function getMaxAmountIn(IVault _vault, address _tokenIn, address _tokenOut) external view returns (uint256);\n\n    function getAmountOut(\n        IVault _vault,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) external view returns (uint256, uint256);\n}\n\ninterface IVault {\n    function getFeeBasisPoints(\n        address _token,\n        uint256 _usdgDelta,\n        uint256 _feeBasisPoints,\n        uint256 _taxBasisPoints,\n        bool _increment\n    ) external view returns (uint256);\n\n    function stableSwapFeeBasisPoints() external view returns (uint256);\n\n    function stableTokens(address _token) external view returns (bool);\n\n    function tokenDecimals(address _token) external view returns (uint256);\n\n    function getMaxPrice(address _token) external view returns (uint256);\n\n    function getMinPrice(address _token) external view returns (uint256);\n}\n",
        "./KyberDmmSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IKyberDmmPool {\n    function totalSupply() external view returns (uint256);\n}\n\ninterface IKyberDmmFactory {\n    function getPools(address token0, address token1) external view returns (address[] memory _tokenPools);\n}\n\ninterface IKyberDmmRouter {\n    function factory() external view returns (address);\n\n    function getAmountsOut(\n        uint256 amountIn,\n        address[] calldata pools,\n        address[] calldata path\n    ) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(\n        uint256 amountOut,\n        address[] calldata pools,\n        address[] calldata path\n    ) external view returns (uint256[] memory amounts);\n}\n\ncontract KyberDmmSampler {\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 private constant KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (address[] memory pools, uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, makerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsOut{gas: KYBER_DMM_CALL_GAS}(takerTokenAmounts[i], pools, path)\n            returns (uint256[] memory amounts) {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (address[] memory pools, uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, takerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsIn{gas: KYBER_DMM_CALL_GAS}(makerTokenAmounts[i], pools, path)\n            returns (uint256[] memory amounts) {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _getKyberDmmPools(address router, address[] memory path) private view returns (address[] memory pools) {\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        pools = new address[](path.length - 1);\n        for (uint256 i = 0; i < pools.length; i++) {\n            // find the best pool\n            address[] memory allPools;\n            try factory.getPools{gas: KYBER_DMM_CALL_GAS}(path[i], path[i + 1]) returns (address[] memory allPools) {\n                if (allPools.length == 0) {\n                    return new address[](0);\n                }\n\n                uint256 maxSupply = 0;\n                for (uint256 j = 0; j < allPools.length; j++) {\n                    uint256 totalSupply = IKyberDmmPool(allPools[j]).totalSupply();\n                    if (totalSupply > maxSupply) {\n                        maxSupply = totalSupply;\n                        pools[i] = allPools[j];\n                    }\n                }\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n",
        "./LidoSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\ninterface IWstETH {\n    function getWstETHByStETH(uint256 _stETHAmount) external view returns (uint256);\n\n    function getStETHByWstETH(uint256 _wstETHAmount) external view returns (uint256);\n}\n\ncontract LidoSampler is SamplerUtils {\n    struct LidoInfo {\n        address stEthToken;\n        address wethToken;\n        address wstEthToken;\n    }\n\n    /// @dev Sample sell quotes from Lido\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory) {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken == lidoInfo.wethToken && makerToken == address(lidoInfo.stEthToken)) {\n            // Minting stETH is always 1:1 therefore we can just return the same amounts back.\n            return takerTokenAmounts;\n        }\n\n        return _sampleSellsForWrapped(lidoInfo, takerToken, makerToken, takerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Lido.\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory) {\n        if (takerToken == lidoInfo.wethToken && makerToken == address(lidoInfo.stEthToken)) {\n            // Minting stETH is always 1:1 therefore we can just return the same amounts back.\n            return makerTokenAmounts;\n        }\n\n        // Swap out `makerToken` and `takerToken` and re-use `_sampleSellsForWrapped`.\n        return _sampleSellsForWrapped(lidoInfo, makerToken, takerToken, makerTokenAmounts);\n    }\n\n    function _sampleSellsForWrapped(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) private view returns (uint256[] memory) {\n        IWstETH wstETH = IWstETH(lidoInfo.wstEthToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        uint256[] memory makerTokenAmounts = new uint256[](numSamples);\n\n        if (takerToken == lidoInfo.stEthToken && makerToken == lidoInfo.wstEthToken) {\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] = wstETH.getWstETHByStETH(takerTokenAmounts[i]);\n            }\n            return makerTokenAmounts;\n        }\n\n        if (takerToken == lidoInfo.wstEthToken && makerToken == lidoInfo.stEthToken) {\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] = wstETH.getStETHByWstETH(takerTokenAmounts[i]);\n            }\n            return makerTokenAmounts;\n        }\n\n        // Returns 0 values.\n        return makerTokenAmounts;\n    }\n}\n",
        "./MakerPSMSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Get the address of DAI\n    // @return address of DAI contract\n    function dai() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(address usr, uint256 gemAmt) external;\n\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(address usr, uint256 gemAmt) external;\n}\n\ninterface IVAT {\n    // @dev Get a collateral type by identifier\n    // @param ilkIdentifier bytes32 identifier. Example: ethers.utils.formatBytes32String(\"PSM-USDC-A\")\n    // @return ilk\n    // @return ilk.Art Total Normalised Debt in wad\n    // @return ilk.rate Accumulated Rates in ray\n    // @return ilk.spot Price with Safety Margin in ray\n    // @return ilk.line Debt Ceiling in rad\n    // @return ilk.dust Urn Debt Floor in rad\n    function ilks(\n        bytes32 ilkIdentifier\n    ) external view returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\n}\n\ncontract MakerPSMSampler is SamplerUtils {\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    /// @dev Gas limit for MakerPsm calls.\n    uint256 private constant MAKER_PSM_CALL_GAS = 300e3; // 300k\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 private constant WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 private constant RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 private constant RAD = 10 ** 45;\n\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.m\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _samplePSMSell(psmInfo, makerToken, takerToken, takerTokenAmounts[i], psm, vat);\n\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 sellAmount = _samplePSMBuy(psmInfo, makerToken, takerToken, makerTokenAmounts[i], psm, vat);\n\n            if (sellAmount == 0) {\n                break;\n            }\n\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n\n    function _samplePSMSell(\n        MakerPsmInfo memory psmInfo,\n        address makerToken,\n        address takerToken,\n        uint256 takerTokenAmount,\n        IPSM psm,\n        IVAT vat\n    ) private view returns (uint256) {\n        (uint256 totalDebtInWad, , , uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(\n            psmInfo.ilkIdentifier\n        );\n        uint256 gemTokenBaseUnit = uint256(1e6);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            // Convert USDC 6 decimals to 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount.safeMul(1e12);\n\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 feeInWad = takerTokenAmountInWad.safeMul(psm.tin()).safeDiv(WAD);\n            uint256 makerTokenAmountInWad = takerTokenAmountInWad.safeSub(feeInWad);\n\n            return makerTokenAmountInWad;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            // Selling DAI for USDC, already in 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount;\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy from it\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            uint256 feeDivisorInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 makerTokenAmountInGemTokenBaseUnits = takerTokenAmountInWad.safeMul(gemTokenBaseUnit).safeDiv(\n                feeDivisorInWad\n            );\n\n            return makerTokenAmountInGemTokenBaseUnits;\n        }\n\n        return 0;\n    }\n\n    function _samplePSMBuy(\n        MakerPsmInfo memory psmInfo,\n        address makerToken,\n        address takerToken,\n        uint256 makerTokenAmount,\n        IPSM psm,\n        IVAT vat\n    ) private view returns (uint256) {\n        (uint256 totalDebtInWad, , , uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(\n            psmInfo.ilkIdentifier\n        );\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount;\n            uint256 feeDivisorInWad = WAD.safeSub(psm.tin()); // eg. 0.999 * 10 ** 18 with 0.1% tin;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(WAD).safeDiv(feeDivisorInWad);\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 takerTokenAmountInGemInGemBaseUnits = (takerTokenAmountInWad.safeDiv(1e12)).safeAdd(1); // Add 1 to deal with cut off decimals converting to lower decimals\n\n            return takerTokenAmountInGemInGemBaseUnits;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount.safeMul(1e12);\n            uint256 feeMultiplierInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(feeMultiplierInWad).safeDiv(WAD);\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            return takerTokenAmountInWad;\n        }\n\n        return 0;\n    }\n}\n",
        "./MStableSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ncontract MStableSampler is SamplerUtils, ApproximateBuys {\n    /// @dev Default gas limit for mStable calls.\n    uint256 private constant DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(router).getSwapOutput{gas: DEFAULT_CALL_GAS}(takerToken, makerToken, takerTokenAmounts[i])\n            returns (uint256 amount) {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        return\n            _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(makerToken, router),\n                    takerTokenData: abi.encode(takerToken, router),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n                }),\n                makerTokenAmounts\n            );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    ) private view returns (uint256 buyAmount) {\n        (address takerToken, address router) = abi.decode(takerTokenData, (address, address));\n        address makerToken = abi.decode(makerTokenData, (address));\n        try this.sampleSellsFromMStable(router, takerToken, makerToken, _toSingleValueArray(sellAmount)) returns (\n            uint256[] memory amounts\n        ) {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "./interfaces/IMStable.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\ninterface IMStable {\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    ) external view returns (uint256 swapOutput);\n}\n",
        "./MooniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ncontract MooniswapSampler is SamplerUtils, ApproximateBuys {\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 private constant MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (IMooniswap pool, uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n\n        pool = IMooniswap(IMooniswapRegistry(registry).pools(takerToken, makerToken));\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    ) public view returns (uint256) {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken));\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn{gas: MOONISWAP_CALL_GAS}(mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n        returns (uint256 amount) {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (IMooniswap pool, uint256[] memory takerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, makerToken),\n                takerTokenData: abi.encode(registry, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(IMooniswapRegistry(registry).pools(takerToken, makerToken));\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    ) private view returns (uint256 buyAmount) {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(registry, mooniswapTakerToken, mooniswapMakerToken, sellAmount);\n    }\n}\n",
        "./interfaces/IMooniswap.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\ninterface IMooniswapRegistry {\n    function pools(address token1, address token2) external view returns (address);\n}\n\ninterface IMooniswap {\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    ) external view returns (uint256 returnAmount);\n}\n",
        "./NativeOrderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\ninterface IExchange {\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order) external view returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    ) external view returns (OrderInfo memory orderInfo, uint128 actualFillableTakerTokenAmount, bool isSignatureValid);\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 internal constant DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    ) public view returns (uint256[] memory orderFillableTakerAssetAmounts) {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount{gas: DEFAULT_CALL_GAS}(orders[i], orderSignatures[i], exchange)\n            returns (uint256 amount) {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    ) public view returns (uint256[] memory orderFillableMakerAssetAmounts) {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(orders, orderSignatures, exchange);\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    ) public view virtual returns (uint256 fillableTakerAmount) {\n        if (\n            signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0\n        ) {\n            return 0;\n        }\n\n        (IExchange.OrderInfo memory orderInfo, uint128 remainingFillableTakerAmount, bool isSignatureValid) = exchange\n            .getLimitOrderRelevantState(order, signature);\n\n        if (\n            orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n            !isSignatureValid ||\n            order.makerToken == IERC20TokenV06(0)\n        ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n",
        "./PlatypusSampler.sol": "pragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IPlatypus.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ncontract PlatypusSampler is SamplerUtils, ApproximateBuys {\n    function sampleSellsFromPlatypus(\n        address pool,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try IPlatypus(pool).quotePotentialSwap(path[0], path[1], takerTokenAmounts[i]) returns (\n                uint256 amountAfterFees,\n                uint256 feeAmount\n            ) {\n                makerTokenAmounts[i] = amountAfterFees;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory result) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function sampleBuysFromPlatypus(\n        address pool,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        address[] memory invertBuyPath = new address[](2);\n        invertBuyPath[0] = path[1];\n        invertBuyPath[1] = path[0];\n        return\n            _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(pool, invertBuyPath),\n                    takerTokenData: abi.encode(pool, path),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromPlatypus\n                }),\n                makerTokenAmounts\n            );\n    }\n\n    function _sampleSellForApproximateBuyFromPlatypus(\n        bytes memory makerTokenData,\n        bytes memory takerTokenData,\n        uint256 sellAmount\n    ) private view returns (uint256 buyAmount) {\n        (address _pool, address[] memory _path) = abi.decode(makerTokenData, (address, address[]));\n\n        (bool success, bytes memory resultData) = address(this).staticcall(\n            abi.encodeWithSelector(this.sampleSellsFromPlatypus.selector, _pool, _path, _toSingleValueArray(sellAmount))\n        );\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/IPlatypus.sol": "pragma solidity ^0.6;\n\ninterface IPlatypus {\n    function quotePotentialSwap(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\n\n    function assetOf(address token) external view returns (address);\n}\n",
        "./ShellSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./interfaces/IShell.sol\";\nimport \"./SamplerUtils.sol\";\n\ncontract ShellSampler is SamplerUtils, ApproximateBuys {\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    /// @dev Default gas limit for Shell calls.\n    uint256 private constant DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap{gas: DEFAULT_CALL_GAS}(takerToken, makerToken, takerTokenAmounts[i])\n            returns (uint256 amount) {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        return\n            _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(makerToken, pool),\n                    takerTokenData: abi.encode(takerToken, pool),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromShell\n                }),\n                makerTokenAmounts\n            );\n    }\n\n    function _sampleSellForApproximateBuyFromShell(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    ) private view returns (uint256 buyAmount) {\n        (address takerToken, address pool) = abi.decode(takerTokenData, (address, address));\n        address makerToken = abi.decode(makerTokenData, (address));\n\n        try this.sampleSellsFromShell(pool, takerToken, makerToken, _toSingleValueArray(sellAmount)) returns (\n            uint256[] memory amounts\n        ) {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "./interfaces/IShell.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\ninterface IShell {\n    function viewOriginSwap(address from, address to, uint256 fromAmount) external view returns (uint256 toAmount);\n\n    function viewTargetSwap(address from, address to, uint256 toAmount) external view returns (uint256 fromAmount);\n}\n",
        "./SynthetixSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2022 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IReadProxyAddressResolver {\n    function target() external view returns (address);\n}\n\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n}\n\ninterface IExchanger {\n    // Ethereum Mainnet\n    function getAmountsForAtomicExchange(\n        uint256 sourceAmount,\n        bytes32 sourceCurrencyKey,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint256 amountReceived, uint256 fee, uint256 exchangeFeeRate);\n\n    // Optimism\n    function getAmountsForExchange(\n        uint256 sourceAmount,\n        bytes32 sourceCurrencyKey,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint256 amountReceived, uint256 fee, uint256 exchangeFeeRate);\n}\n\ncontract SynthetixSampler {\n    /// @dev Sample sell quotes from Synthetix Atomic Swap.\n    /// @param takerTokenSymbol Symbol (currency key) of the taker token (what to sell).\n    /// @param makerTokenSymbol Symbol (currency key) of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample (sorted in ascending order).\n    /// @return synthetix Synthetix address.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromSynthetix(\n        IReadProxyAddressResolver readProxy,\n        bytes32 takerTokenSymbol,\n        bytes32 makerTokenSymbol,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (address synthetix, uint256[] memory makerTokenAmounts) {\n        synthetix = getSynthetixAddress(readProxy);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (numSamples == 0) {\n            return (synthetix, makerTokenAmounts);\n        }\n\n        makerTokenAmounts[0] = exchange(readProxy, takerTokenAmounts[0], takerTokenSymbol, makerTokenSymbol);\n\n        // Synthetix atomic swap has a fixed rate. Calculate the rest based on the first value (and save gas).\n        for (uint256 i = 1; i < numSamples; i++) {\n            makerTokenAmounts[i] = (makerTokenAmounts[0] * takerTokenAmounts[i]) / takerTokenAmounts[0];\n        }\n    }\n\n    /// @dev Sample buy quotes from Synthetix Atomic Swap.\n    /// @param takerTokenSymbol Symbol (currency key) of the taker token (what to sell).\n    /// @param makerTokenSymbol Symbol (currency key) of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample (sorted in ascending order).\n    /// @return synthetix Synthetix address.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromSynthetix(\n        IReadProxyAddressResolver readProxy,\n        bytes32 takerTokenSymbol,\n        bytes32 makerTokenSymbol,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (address synthetix, uint256[] memory takerTokenAmounts) {\n        synthetix = getSynthetixAddress(readProxy);\n        // Since Synthetix atomic have a fixed rate, we can pick any reasonablely size takerTokenAmount (fixed to 1 ether here) and calculate the rest.\n        uint256 amountReceivedForEther = exchange(readProxy, 1 ether, takerTokenSymbol, makerTokenSymbol);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            takerTokenAmounts[i] = (1 ether * makerTokenAmounts[i]) / amountReceivedForEther;\n        }\n    }\n\n    function exchange(\n        IReadProxyAddressResolver readProxy,\n        uint256 sourceAmount,\n        bytes32 sourceCurrencyKey,\n        bytes32 destinationCurrencyKey\n    ) private view returns (uint256 amountReceived) {\n        IExchanger exchanger = getExchanger(readProxy);\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n\n        if (chainId == 1) {\n            (amountReceived, , ) = exchanger.getAmountsForAtomicExchange(\n                sourceAmount,\n                sourceCurrencyKey,\n                destinationCurrencyKey\n            );\n        } else {\n            (amountReceived, , ) = exchanger.getAmountsForExchange(\n                sourceAmount,\n                sourceCurrencyKey,\n                destinationCurrencyKey\n            );\n        }\n    }\n\n    function getSynthetixAddress(IReadProxyAddressResolver readProxy) private view returns (address) {\n        return IAddressResolver(readProxy.target()).getAddress(\"Synthetix\");\n    }\n\n    function getExchanger(IReadProxyAddressResolver readProxy) private view returns (IExchanger) {\n        return IExchanger(IAddressResolver(readProxy.target()).getAddress(\"Exchanger\"));\n    }\n}\n",
        "./TwoHopSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 numSamples\n    ) public returns (HopInfo memory firstHop, HopInfo memory secondHop, uint256[] memory buyAmounts) {\n        buyAmounts = new uint256[](numSamples);\n        uint256[] memory intermediateAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < firstHopCalls.length; i++) {\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256[] memory amounts = getAmounts(returnData, numSamples);\n                // Use the amount from the largest size for comparison.\n                if (amounts[numSamples - 1] > intermediateAmounts[numSamples - 1]) {\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                    for (uint256 j = 0; j < numSamples; j++) {\n                        intermediateAmounts[j] = amounts[j];\n                    }\n                }\n            }\n        }\n\n        if (intermediateAmounts[numSamples - 1] == 0) {\n            return (firstHop, secondHop, buyAmounts);\n        }\n\n        for (uint256 i = 0; i < secondHopCalls.length; i++) {\n            writeAmounts(secondHopCalls[i], intermediateAmounts);\n\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[i]);\n            if (didSucceed) {\n                uint256[] memory amounts = getAmounts(returnData, numSamples);\n                // Use the amount from the largest size for comparison.\n                if (amounts[numSamples - 1] > buyAmounts[numSamples - 1]) {\n                    secondHop.sourceIndex = i;\n                    secondHop.returnData = returnData;\n                    for (uint256 j = 0; j < numSamples; j++) {\n                        buyAmounts[j] = amounts[j];\n                    }\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 numSamples\n    ) public returns (HopInfo memory firstHop, HopInfo memory secondHop, uint256[] memory sellAmounts) {\n        sellAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            sellAmounts[i] = uint256(-1);\n        }\n\n        uint256[] memory intermediateAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            intermediateAmounts[i] = uint256(-1);\n        }\n\n        for (uint256 i = 0; i < secondHopCalls.length; i++) {\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[i]);\n            if (didSucceed) {\n                uint256[] memory amounts = getAmounts(returnData, numSamples);\n                uint256 largestAmount = amounts[numSamples - 1];\n\n                // Use the amount from the largest size for comparison.\n                if (largestAmount > 0 && largestAmount < intermediateAmounts[numSamples - 1]) {\n                    secondHop.sourceIndex = i;\n                    secondHop.returnData = returnData;\n                    for (uint256 j = 0; j < numSamples; j++) {\n                        intermediateAmounts[j] = amounts[j];\n                    }\n                }\n            }\n        }\n\n        if (intermediateAmounts[numSamples - 1] == uint256(-1)) {\n            return (firstHop, secondHop, sellAmounts);\n        }\n\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            writeAmounts(firstHopCalls[i], intermediateAmounts);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256[] memory amounts = getAmounts(returnData, numSamples);\n                uint256 largestAmount = amounts[numSamples - 1];\n\n                // Use the amount from the largest size for comparison.\n                if (largestAmount > 0 && largestAmount < sellAmounts[numSamples - 1]) {\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                    for (uint256 j = 0; j < numSamples; j++) {\n                        sellAmounts[j] = amounts[j];\n                    }\n                }\n            }\n        }\n    }\n\n    /// @dev Extract amounts from `data` by creating a copy assuming that such uint256[] array exists\n    /// at the end of `data`.\n    function getAmounts(bytes memory data, uint256 amountsLength) private pure returns (uint256[] memory) {\n        uint256 start = data.length - (amountsLength + 2) * 32; // Copy offset and length as well.\n        uint256 end = data.length;\n        bytes memory amounts = data.slice(start, end);\n        amounts.writeUint256(0, 0x20); // Overwrite offset.\n        return abi.decode(amounts, (uint256[]));\n    }\n\n    /// @dev Writes amounts arary to the end of data assuming that there is space reserved.\n    function writeAmounts(bytes memory data, uint256[] memory amounts) private pure {\n        for (uint256 i = 0; i < amounts.length; i++) {\n            uint256 index = data.length - 32 * (amounts.length - i - 1);\n            uint256 amount = amounts[i];\n            assembly {\n                mstore(add(data, index), amount)\n            }\n        }\n    }\n}\n",
        "./UniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IUniswapExchangeFactory {\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress) external view returns (address);\n}\n\ncontract UniswapSampler is SamplerUtils {\n    /// @dev Gas limit for Uniswap calls.\n    uint256 private constant UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0)\n            ? IUniswapExchangeQuotes(0)\n            : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0)\n            ? IUniswapExchangeQuotes(0)\n            : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0)\n            ? IUniswapExchangeQuotes(0)\n            : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0)\n            ? IUniswapExchangeQuotes(0)\n            : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    ) private view returns (uint256 outputAmount, bool didSucceed) {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) = uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n            abi.encodeWithSelector(functionSelector, inputAmount)\n        );\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param router Address of the Uniswap router.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(\n        address router,\n        address tokenAddress\n    ) private view returns (IUniswapExchangeQuotes exchange) {\n        exchange = IUniswapExchangeQuotes(address(IUniswapExchangeFactory(router).getExchange(tokenAddress)));\n    }\n}\n",
        "./interfaces/IUniswapExchangeQuotes.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\ninterface IUniswapExchangeQuotes {\n    function getEthToTokenInputPrice(uint256 ethSold) external view returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(uint256 tokensSold) external view returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\n}\n",
        "./UniswapV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\ncontract UniswapV2Sampler {\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 private constant UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try IUniswapV2Router01(router).getAmountsOut{gas: UNISWAPV2_CALL_GAS}(takerTokenAmounts[i], path) returns (\n                uint256[] memory amounts\n            ) {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try IUniswapV2Router01(router).getAmountsIn{gas: UNISWAPV2_CALL_GAS}(makerTokenAmounts[i], path) returns (\n                uint256[] memory amounts\n            ) {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./interfaces/IUniswapV2Router01.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\ninterface IUniswapV2Router01 {\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n",
        "./UniswapV3Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2022 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\nimport \"./UniswapV3Common.sol\";\nimport \"./interfaces/IUniswapV3.sol\";\n\ncontract UniswapV3Sampler is UniswapV3Common {\n    IUniswapV3MultiQuoter private constant multiQuoter =\n        IUniswapV3MultiQuoter(0x5555555555555555555555555555555555555556);\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param factory UniswapV3 Factory contract.\n    /// @param path Token route. Should be takerToken -> makerToken (at most two hops).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return uniswapGasUsed Estimated amount of gas used\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (bytes[] memory uniswapPaths, uint256[] memory uniswapGasUsed, uint256[] memory makerTokenAmounts)\n    {\n        IUniswapV3Pool[][] memory poolPaths = getPoolPaths(\n            factory,\n            multiQuoter,\n            path,\n            takerTokenAmounts[takerTokenAmounts.length - 1]\n        );\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n        uniswapGasUsed = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < poolPaths.length; ++i) {\n            if (!isValidPoolPath(poolPaths[i])) {\n                continue;\n            }\n\n            bytes memory uniswapPath = toUniswapPath(path, poolPaths[i]);\n\n            uint256[] memory amountsOut;\n            uint256[] memory gasEstimates;\n\n            try multiQuoter.quoteExactMultiInput(factory, uniswapPath, takerTokenAmounts) {} catch (\n                bytes memory reason\n            ) {\n                bool success;\n                (success, amountsOut, gasEstimates) = catchMultiSwapResult(reason);\n\n                if (!success) {\n                    continue;\n                }\n\n                for (uint256 j = 0; j < amountsOut.length; ++j) {\n                    if (amountsOut[j] == 0) {\n                        break;\n                    }\n\n                    if (makerTokenAmounts[j] < amountsOut[j]) {\n                        makerTokenAmounts[j] = amountsOut[j];\n                        uniswapPaths[j] = uniswapPath;\n                        uniswapGasUsed[j] = gasEstimates[j];\n                    } else if (makerTokenAmounts[j] == amountsOut[j] && uniswapGasUsed[j] > gasEstimates[j]) {\n                        uniswapPaths[j] = uniswapPath;\n                        uniswapGasUsed[j] = gasEstimates[j];\n                    }\n                }\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param factory UniswapV3 Factory contract.\n    /// @param path Token route. Should be takerToken -> makerToken (at most two hops).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return uniswapGasUsed Estimated amount of gas used\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (bytes[] memory uniswapPaths, uint256[] memory uniswapGasUsed, uint256[] memory takerTokenAmounts)\n    {\n        IERC20TokenV06[] memory reversedPath = reverseTokenPath(path);\n        IUniswapV3Pool[][] memory poolPaths = getPoolPaths(\n            factory,\n            multiQuoter,\n            reversedPath,\n            makerTokenAmounts[makerTokenAmounts.length - 1]\n        );\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n        uniswapGasUsed = new uint256[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < poolPaths.length; ++i) {\n            if (!isValidPoolPath(poolPaths[i])) {\n                continue;\n            }\n\n            bytes memory uniswapPath = toUniswapPath(reversedPath, poolPaths[i]);\n\n            uint256[] memory amountsIn;\n            uint256[] memory gasEstimates;\n\n            try multiQuoter.quoteExactMultiOutput(factory, uniswapPath, makerTokenAmounts) {} catch (\n                bytes memory reason\n            ) {\n                bool success;\n                (success, amountsIn, gasEstimates) = catchMultiSwapResult(reason);\n\n                if (!success) {\n                    continue;\n                }\n\n                for (uint256 j = 0; j < amountsIn.length; ++j) {\n                    if (amountsIn[j] == 0) {\n                        break;\n                    }\n\n                    if (takerTokenAmounts[j] == 0 || takerTokenAmounts[j] > amountsIn[j]) {\n                        takerTokenAmounts[j] = amountsIn[j];\n                        uniswapPaths[j] = toUniswapPath(path, reversePoolPath(poolPaths[i]));\n                        uniswapGasUsed[j] = gasEstimates[j];\n                    } else if (takerTokenAmounts[j] == amountsIn[j] && uniswapGasUsed[j] > gasEstimates[j]) {\n                        uniswapPaths[j] = toUniswapPath(path, reversePoolPath(poolPaths[i]));\n                        uniswapGasUsed[j] = gasEstimates[j];\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "./UniswapV3Common.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2022 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity >=0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\nimport \"./interfaces/IUniswapV3.sol\";\n\ncontract UniswapV3Common {\n    /// @dev Gas limit for UniswapV3 calls\n    uint256 private constant POOL_FILTERING_GAS_LIMIT = 450e3;\n\n    function toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    ) internal view returns (bytes memory uniswapPath) {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Common/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly {\n            o := add(uniswapPath, 32)\n        }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n\n    function reverseTokenPath(\n        IERC20TokenV06[] memory tokenPath\n    ) internal pure returns (IERC20TokenV06[] memory reversed) {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function reversePoolPath(\n        IUniswapV3Pool[] memory poolPath\n    ) internal pure returns (IUniswapV3Pool[] memory reversed) {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    /// @dev Returns `poolPaths` to sample against. The caller is responsible for not using path involinvg zero address(es).\n    function getPoolPaths(\n        IUniswapV3Factory factory,\n        IUniswapV3MultiQuoter multiQuoter,\n        IERC20TokenV06[] memory path,\n        uint256 inputAmount\n    ) internal view returns (IUniswapV3Pool[][] memory poolPaths) {\n        if (path.length == 2) {\n            return getPoolPathSingleHop(factory, multiQuoter, path, inputAmount);\n        }\n        if (path.length == 3) {\n            return getPoolPathTwoHop(factory, multiQuoter, path, inputAmount);\n        }\n        revert(\"UniswapV3Sampler/unsupported token path length\");\n    }\n\n    function getPoolPathSingleHop(\n        IUniswapV3Factory factory,\n        IUniswapV3MultiQuoter multiQuoter,\n        IERC20TokenV06[] memory path,\n        uint256 inputAmount\n    ) private view returns (IUniswapV3Pool[][] memory poolPaths) {\n        poolPaths = new IUniswapV3Pool[][](2);\n        (IUniswapV3Pool[2] memory topPools, ) = getTopTwoPools(\n            GetTopTwoPoolsParams({\n                factory: factory,\n                multiQuoter: multiQuoter,\n                inputToken: path[0],\n                outputToken: path[1],\n                inputAmount: inputAmount\n            })\n        );\n\n        uint256 pathCount = 0;\n        for (uint256 i = 0; i < 2; i++) {\n            IUniswapV3Pool topPool = topPools[i];\n            poolPaths[pathCount] = new IUniswapV3Pool[](1);\n            poolPaths[pathCount][0] = topPool;\n            pathCount++;\n        }\n    }\n\n    function getPoolPathTwoHop(\n        IUniswapV3Factory factory,\n        IUniswapV3MultiQuoter multiQuoter,\n        IERC20TokenV06[] memory path,\n        uint256 inputAmount\n    ) private view returns (IUniswapV3Pool[][] memory poolPaths) {\n        poolPaths = new IUniswapV3Pool[][](4);\n        (IUniswapV3Pool[2] memory firstHopTopPools, uint256[2] memory firstHopAmounts) = getTopTwoPools(\n            GetTopTwoPoolsParams({\n                factory: factory,\n                multiQuoter: multiQuoter,\n                inputToken: path[0],\n                outputToken: path[1],\n                inputAmount: inputAmount\n            })\n        );\n\n        (IUniswapV3Pool[2] memory secondHopTopPools, ) = getTopTwoPools(\n            GetTopTwoPoolsParams({\n                factory: factory,\n                multiQuoter: multiQuoter,\n                inputToken: path[1],\n                outputToken: path[2],\n                inputAmount: firstHopAmounts[0]\n            })\n        );\n\n        uint256 pathCount = 0;\n        for (uint256 i = 0; i < 2; i++) {\n            for (uint256 j = 0; j < 2; j++) {\n                poolPaths[pathCount] = new IUniswapV3Pool[](2);\n                IUniswapV3Pool[] memory currentPath = poolPaths[pathCount];\n                currentPath[0] = firstHopTopPools[i];\n                currentPath[1] = secondHopTopPools[j];\n                pathCount++;\n            }\n        }\n    }\n\n    struct GetTopTwoPoolsParams {\n        IUniswapV3Factory factory;\n        IUniswapV3MultiQuoter multiQuoter;\n        IERC20TokenV06 inputToken;\n        IERC20TokenV06 outputToken;\n        uint256 inputAmount;\n    }\n\n    /// @dev Returns top 0-2 pools and corresponding output amounts based on swaping `inputAmount`.\n    /// Addresses in `topPools` can be zero addresses when there are pool isn't available.\n    function getTopTwoPools(\n        GetTopTwoPoolsParams memory params\n    ) private view returns (IUniswapV3Pool[2] memory topPools, uint256[2] memory topOutputAmounts) {\n        IERC20TokenV06[] memory path = new IERC20TokenV06[](2);\n        path[0] = params.inputToken;\n        path[1] = params.outputToken;\n\n        uint256[] memory inputAmounts = new uint256[](1);\n        inputAmounts[0] = params.inputAmount;\n\n        uint24[4] memory validPoolFees = [uint24(0.0001e6), uint24(0.0005e6), uint24(0.003e6), uint24(0.01e6)];\n        for (uint256 i = 0; i < validPoolFees.length; ++i) {\n            IUniswapV3Pool pool = params.factory.getPool(\n                address(params.inputToken),\n                address(params.outputToken),\n                validPoolFees[i]\n            );\n            if (!isValidPool(pool)) {\n                continue;\n            }\n\n            IUniswapV3Pool[] memory poolPath = new IUniswapV3Pool[](1);\n            poolPath[0] = pool;\n            bytes memory uniswapPath = toUniswapPath(path, poolPath);\n\n            try\n                params.multiQuoter.quoteExactMultiInput{gas: POOL_FILTERING_GAS_LIMIT}(\n                    params.factory,\n                    uniswapPath,\n                    inputAmounts\n                )\n            {} catch (bytes memory reason) {\n                (bool success, uint256[] memory outputAmounts, ) = catchMultiSwapResult(reason);\n                if (success) {\n                    // Keeping track of the top 2 pools.\n                    if (outputAmounts[0] > topOutputAmounts[0]) {\n                        topOutputAmounts[1] = topOutputAmounts[0];\n                        topPools[1] = topPools[0];\n                        topOutputAmounts[0] = outputAmounts[0];\n                        topPools[0] = pool;\n                    } else if (outputAmounts[0] > topOutputAmounts[1]) {\n                        topOutputAmounts[1] = outputAmounts[0];\n                        topPools[1] = pool;\n                    }\n                }\n            }\n        }\n    }\n\n    function isValidPool(IUniswapV3Pool pool) internal view returns (bool isValid) {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // Must have a balance of both tokens.\n        if (IERC20TokenV06(pool.token0()).balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (IERC20TokenV06(pool.token1()).balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function isValidPoolPath(IUniswapV3Pool[] memory poolPaths) internal pure returns (bool) {\n        for (uint256 i = 0; i < poolPaths.length; i++) {\n            if (address(poolPaths[i]) == address(0)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function catchMultiSwapResult(\n        bytes memory revertReason\n    ) internal pure returns (bool success, uint256[] memory amounts, uint256[] memory gasEstimates) {\n        bytes4 selector;\n        assembly {\n            selector := mload(add(revertReason, 32))\n        }\n\n        if (selector != bytes4(keccak256(\"result(uint256[],uint256[])\"))) {\n            return (false, amounts, gasEstimates);\n        }\n\n        assembly {\n            let length := sub(mload(revertReason), 4)\n            revertReason := add(revertReason, 4)\n            mstore(revertReason, length)\n        }\n        (amounts, gasEstimates) = abi.decode(revertReason, (uint256[], uint256[]));\n        return (true, amounts, gasEstimates);\n    }\n}\n",
        "./interfaces/IUniswapV3.sol": "pragma solidity >=0.6;\n\ninterface IUniswapV3QuoterV2 {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (IUniswapV3Factory);\n\n    // @notice Returns the amount out received for a given exact input swap without executing the swap\n    // @param path The path of the swap, i.e. each token pair and the pool fee\n    // @param amountIn The amount of the first token to swap\n    // @return amountOut The amount of the last token that would be received\n    // @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    // @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    // @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInput(\n        bytes memory path,\n        uint256 amountIn\n    )\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    // @notice Returns the amount in required for a given exact output swap without executing the swap\n    // @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    // @param amountOut The amount of the last token to receive\n    // @return amountIn The amount of first token required to be paid\n    // @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    // @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    // @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutput(\n        bytes memory path,\n        uint256 amountOut\n    )\n        external\n        returns (\n            uint256 amountIn,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n}\n\ninterface IUniswapV3Pool {\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(\n        int24 tick\n    )\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n}\n\ninterface IUniswapV3Factory {\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param a The contract address of either token0 or token1\n    /// @param b The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(address a, address b, uint24 fee) external view returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3MultiQuoter {\n    // @notice Returns the amounts out received for a given set of exact input swaps without executing the swap\n    /// @param factory The factory contract managing UniswapV3 pools\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountsIn The amounts in of the first token to swap\n    function quoteExactMultiInput(\n        IUniswapV3Factory factory,\n        bytes memory path,\n        uint256[] memory amountsIn\n    ) external view;\n\n    /// @notice Returns the amounts in received for a given set of exact output swaps without executing the swap\n    /// @param factory The factory contract managing UniswapV3 pools\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountsOut The amounts out of the last token to receive\n    function quoteExactMultiOutput(\n        IUniswapV3Factory factory,\n        bytes memory path,\n        uint256[] memory amountsOut\n    ) external view;\n}\n",
        "./VelodromeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2022 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\nstruct VeloRoute {\n    address from;\n    address to;\n    bool stable;\n}\n\ninterface IVelodromeRouter {\n    function getAmountOut(\n        uint256 amountIn,\n        address tokenIn,\n        address tokenOut\n    ) external view returns (uint256 amount, bool stable);\n\n    function getAmountsOut(\n        uint256 amountIn,\n        VeloRoute[] calldata routes\n    ) external view returns (uint256[] memory amounts);\n}\n\ncontract VelodromeSampler is SamplerUtils, ApproximateBuys {\n    /// @dev Sample sell quotes from Velodrome\n    /// @param router Address of Velodrome router.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample (sorted in ascending order).\n    /// @return stable Whether the pool is a stable pool (vs volatile).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromVelodrome(\n        IVelodromeRouter router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (bool stable, uint256[] memory makerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // Sampling should not mix stable and volatile pools.\n        // Find the most liquid pool based on max(takerTokenAmounts) and stick with it.\n        stable = _isMostLiquidPoolStablePool(router, takerToken, makerToken, takerTokenAmounts);\n        VeloRoute[] memory routes = new VeloRoute[](1);\n        routes[0] = VeloRoute({from: takerToken, to: makerToken, stable: stable});\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            makerTokenAmounts[i] = router.getAmountsOut(takerTokenAmounts[i], routes)[1];\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Velodrome.\n    /// @param router Address of Velodrome router.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return stable Whether the pool is a stable pool (vs volatile).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromVelodrome(\n        IVelodromeRouter router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (bool stable, uint256[] memory takerTokenAmounts) {\n        _assertValidPair(makerToken, takerToken);\n\n        // Sampling should not mix stable and volatile pools.\n        // Find the most liquid pool based on the reverse swap (maker -> taker) and stick with it.\n        stable = _isMostLiquidPoolStablePool(router, makerToken, takerToken, makerTokenAmounts);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                takerTokenData: abi.encode(router, VeloRoute({from: takerToken, to: makerToken, stable: stable})),\n                makerTokenData: abi.encode(router, VeloRoute({from: makerToken, to: takerToken, stable: stable})),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromVelodrome\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromVelodrome(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    ) internal view returns (uint256) {\n        (IVelodromeRouter router, VeloRoute memory route) = abi.decode(takerTokenData, (IVelodromeRouter, VeloRoute));\n\n        VeloRoute[] memory routes = new VeloRoute[](1);\n        routes[0] = route;\n        return router.getAmountsOut(sellAmount, routes)[1];\n    }\n\n    /// @dev Returns whether the most liquid pool is a stable pool.\n    /// @param router Address of Velodrome router.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token buy amount for each sample (sorted in ascending order)\n    /// @return stable Whether the pool is a stable pool (vs volatile).\n    function _isMostLiquidPoolStablePool(\n        IVelodromeRouter router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) internal view returns (bool stable) {\n        uint256 numSamples = takerTokenAmounts.length;\n        (, stable) = router.getAmountOut(takerTokenAmounts[numSamples - 1], takerToken, makerToken);\n    }\n}\n",
        "./WooPPSampler.sol": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\nimport \"./SamplerUtils.sol\";\nimport \"./ApproximateBuys.sol\";\n\ninterface IWooPP {\n    /// @dev query the amount to swap fromToken -> toToken\n    /// @param fromToken the from token\n    /// @param toToken the to token\n    /// @param fromAmount the amount of fromToken to swap\n    /// @return toAmount the predicted amount to receive\n    function querySwap(address fromToken, address toToken, uint256 fromAmount) external view returns (uint256 toAmount);\n}\n\ncontract WooPPSampler is SamplerUtils, ApproximateBuys {\n    /// @dev Sample sell quotes from WooFI.\n    /// @param router Address of the router we are sampling from\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample (sorted in ascending order).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromWooPP(\n        IWooPP router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    ) public view returns (uint256[] memory makerTokenAmounts) {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            makerTokenAmounts[i] = router.querySwap(takerToken, makerToken, takerTokenAmounts[i]);\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from WooFI.\n    /// @param router Address of the router we are sampling from\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample (sorted in ascending order).\n    /// @return takerTokenAmounts Taker amounts bought at each taker token\n    ///         amount.\n    function sampleBuysFromWooPP(\n        IWooPP router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    ) public view returns (uint256[] memory takerTokenAmounts) {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                takerTokenData: abi.encode(router, takerToken, makerToken),\n                makerTokenData: abi.encode(router, makerToken, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromWoofi\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromWoofi(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    ) internal view returns (uint256) {\n        (IWooPP _router, address _takerToken, address _makerToken) = abi.decode(\n            takerTokenData,\n            (IWooPP, address, address)\n        );\n        (bool success, bytes memory resultData) = address(this).staticcall(\n            abi.encodeWithSelector(\n                this.sampleSellsFromWooPP.selector,\n                _router,\n                _takerToken,\n                _makerToken,\n                _toSingleValueArray(sellAmount)\n            )\n        );\n        if (!success) {\n            return 0;\n        }\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./UtilitySampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens) public view returns (uint256[] memory decimals) {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS ? 18 : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(\n        IERC20TokenV06[] memory tokens,\n        address account\n    ) public view returns (uint256[] memory balances) {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS ? account.balance : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(\n        IERC20TokenV06[] memory tokens,\n        address account,\n        address spender\n    ) public view returns (uint256[] memory allowances) {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS ? 0 : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account) public view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    function getGasLeft() public returns (uint256) {\n        return gasleft();\n    }\n\n    function getBlockNumber() public view returns (uint256) {\n        return block.number;\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/davidwalsh/code/0x-api/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/davidwalsh/code/0x-api/node_modules/@0x/contracts-erc20",
                "@uniswap/v3-core=/Users/davidwalsh/code/0x-api/node_modules/@uniswap/v3-core",
                "@uniswap/v3-periphery=/Users/davidwalsh/code/0x-api/node_modules/@uniswap/v3-periphery"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": false,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
