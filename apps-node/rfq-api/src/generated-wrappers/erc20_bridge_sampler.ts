/* eslint-disable */
import {
    AwaitTransactionSuccessOpts,
    EncoderOverrides,
    ContractFunctionObj,
    ContractTxFunctionObj,
    SendTransactionOpts,
    BaseContract,
    PromiseWithTransactionHash,
    methodAbiToFunctionSignature,
    linkLibrariesInBytecode,
} from '@0x/base-contract';
import { schemas } from '@0x/json-schemas';
import {
    BlockParam,
    BlockParamLiteral,
    BlockRange,
    CallData,
    ContractAbi,
    ContractArtifact,
    DecodedLogArgs,
    MethodAbi,
    TransactionReceiptWithDecodedLogs,
    TxData,
    TxDataPayable,
    TxAccessListWithGas,
    SupportedProvider,
} from 'ethereum-types';
import { AbiEncoder, BigNumber, classUtils, EncodingRules, hexUtils, logUtils, providerUtils } from '@0x/utils';
import { EventCallback, IndexedFilterValues, SimpleContractArtifact } from '@0x/types';
import { Web3Wrapper } from '@0x/web3-wrapper';
import { assert } from '@0x/assert';
import * as ethers from 'ethers-legacy';
// tslint:enable:no-unused-variable

/* istanbul ignore next */
// tslint:disable:array-type
// tslint:disable:no-parameter-reassignment
// tslint:disable-next-line:class-name
export class ERC20BridgeSamplerContract extends BaseContract {
    /**
     * @ignore
     */
    public static deployedBytecode =
        '0x6080604052600436106103c75760003560e01c80638322fff2116101f2578063bd71ecf61161010d578063e065de75116100a0578063f5a4994d1161006f578063f5a4994d14610bfe578063f6d6794a14610c1e578063faf1cee014610c3e578063fc9fe41b14610c5e576103ce565b8063e065de7514610b7e578063e382c95e14610b9e578063e78ac04514610bbe578063e8e4af0914610bde576103ce565b8063cc130e83116100dc578063cc130e8314610af0578063d9bca37214610b10578063dbbf62c214610b30578063ddd5aa2814610b5e576103ce565b8063bd71ecf614610a70578063c831908414610a90578063c8c74a3714610ab0578063c9d350f914610ad0576103ce565b80639ea0ff1311610185578063aa9ea72a11610154578063aa9ea72a146109e2578063ab80a91014610a02578063adc636bf14610a22578063b90cd2fb14610a50576103ce565b80639ea0ff1314610962578063a0295b8b14610982578063a75e744b146109a2578063a76bbec4146109c2576103ce565b8063918c2bbd116101c1578063918c2bbd146108d45780639209483b1461090257806398777748146109225780639bf3ee3514610942576103ce565b80638322fff214610843578063849489a1146108655780638a2d1971146108855780638e5a0e07146108a5576103ce565b806342cbb15c116102e257806366a1ac6b1161027557806374c9d2551161024457806374c9d255146107c357806377d375f2146107e35780637f3e7f82146108035780637f7f4f1314610823576103ce565b806366a1ac6b1461073657806368be3cf2146107565780636eb9dae514610783578063706e2f9b146107a3576103ce565b806357494b1d116102b157806357494b1d146106b65780635aae4e53146106d65780635d5b674f146106f65780635e74363a14610716576103ce565b806342cbb15c14610630578063494569db1461065257806351be4eaa146106725780635505000a14610687576103ce565b8063281e34321161035a5780633105fec1116103295780633105fec1146105a25780633583220f146105c25780634092e6b1146105f057806340bc03ae14610610576103ce565b8063281e3432146105135780632aa64319146105335780632e1240f01461056257806330d6570d14610582576103ce565b8063162790551161039657806316279055146104865780631976f526146104b35780632339078f146104d3578063252322b3146104f3576103ce565b8063034eaff9146103d35780630496d5dc146104095780631022742b14610437578063149dab0e14610457576103ce565b366103ce57005b600080fd5b3480156103df57600080fd5b506103f36103ee36600461b996565b610c7e565b604051610400919061c950565b60405180910390f35b34801561041557600080fd5b5061042961042436600461b57d565b610ea0565b60405161040092919061c8c4565b34801561044357600080fd5b506103f361045236600461b80f565b611046565b34801561046357600080fd5b5061047761047236600461bbea565b6111b9565b6040516104009392919061c83a565b34801561049257600080fd5b506104a66104a136600461b172565b611319565b604051610400919061c961565b3480156104bf57600080fd5b506103f36104ce36600461b94c565b611323565b3480156104df57600080fd5b506103f36104ee36600461bb8a565b61148e565b3480156104ff57600080fd5b506103f361050e36600461b461565b6116b8565b34801561051f57600080fd5b506103f361052e36600461bd2e565b611882565b34801561053f57600080fd5b5061055361054e36600461bc82565b611ad7565b6040516104009392919061c96f565b34801561056e57600080fd5b506103f361057d36600461b522565b611db4565b34801561058e57600080fd5b506103f361059d36600461b461565b612024565b3480156105ae57600080fd5b506103f36105bd36600461b57d565b612182565b3480156105ce57600080fd5b506105e26105dd36600461b9fc565b612306565b60405161040092919061c86e565b3480156105fc57600080fd5b506103f361060b36600461b9da565b6123d0565b34801561061c57600080fd5b506103f361062b36600461bc22565b61263b565b34801561063c57600080fd5b506106456127bc565b604051610400919061c9aa565b34801561065e57600080fd5b5061042961066d36600461b57d565b6127c0565b34801561067e57600080fd5b5061064561294c565b34801561069357600080fd5b506106a76106a236600461ba40565b612954565b6040516104009392919061c91a565b3480156106c257600080fd5b506103f36106d136600461b461565b612d11565b3480156106e257600080fd5b506106a76106f136600461ba40565b613288565b34801561070257600080fd5b506103f361071136600461b461565b613680565b34801561072257600080fd5b506103f361073136600461bca4565b6136ef565b34801561074257600080fd5b506103f361075136600461b80f565b613744565b34801561076257600080fd5b5061077661077136600461b657565b6137f9565b604051610400919061c93f565b34801561078f57600080fd5b506103f361079e36600461bca4565b61395a565b3480156107af57600080fd5b506103f36107be36600461b708565b6139a5565b3480156107cf57600080fd5b506104776107de36600461bbea565b613a97565b3480156107ef57600080fd5b506103f36107fe36600461b3d5565b613aa6565b34801561080f57600080fd5b506103f361081e36600461b57d565b613bac565b34801561082f57600080fd5b506103f361083e36600461bd2e565b613cbc565b34801561084f57600080fd5b50610858613f09565b604051610400919061c681565b34801561087157600080fd5b506103f361088036600461baa7565b613f21565b34801561089157600080fd5b506103f36108a036600461b9da565b614048565b3480156108b157600080fd5b506108c56108c036600461b698565b61415a565b6040516104009392919061cb92565b3480156108e057600080fd5b506108f46108ef36600461baa7565b614480565b60405161040092919061c99c565b34801561090e57600080fd5b506103f361091d36600461bc22565b614653565b34801561092e57600080fd5b506103f361093d36600461b461565b614853565b34801561094e57600080fd5b5061064561095d36600461bce8565b614d8c565b34801561096e57600080fd5b5061064561097d36600461b4cd565b614ed1565b34801561098e57600080fd5b506103f361099d36600461bb8a565b6150e7565b3480156109ae57600080fd5b506105536109bd36600461b5ee565b6152e3565b3480156109ce57600080fd5b506103f36109dd36600461b996565b615420565b3480156109ee57600080fd5b506108f46109fd36600461baa7565b61562f565b348015610a0e57600080fd5b506103f3610a1d36600461b3d5565b61571a565b348015610a2e57600080fd5b50610a42610a3d36600461b461565b61580c565b60405161040092919061c9b8565b348015610a5c57600080fd5b506103f3610a6b36600461b461565b61595c565b348015610a7c57600080fd5b506103f3610a8b36600461b73c565b6159c2565b348015610a9c57600080fd5b506103f3610aab36600461b461565b615abe565b348015610abc57600080fd5b506103f3610acb36600461b57d565b615c7b565b348015610adc57600080fd5b506105e2610aeb36600461b9fc565b615de7565b348015610afc57600080fd5b506103f3610b0b36600461b94c565b615efc565b348015610b1c57600080fd5b50610553610b2b36600461b5ee565b61606e565b348015610b3c57600080fd5b50610b50610b4b36600461b337565b61615d565b60405161040092919061c909565b348015610b6a57600080fd5b50610553610b7936600461bc82565b616423565b348015610b8a57600080fd5b50610b50610b9936600461b337565b6166b6565b348015610baa57600080fd5b506103f3610bb936600461baa7565b61696c565b348015610bca57600080fd5b506103f3610bd936600461b782565b6169da565b348015610bea57600080fd5b506103f3610bf936600461b461565b616acf565b348015610c0a57600080fd5b50610a42610c1936600461b461565b616c02565b348015610c2a57600080fd5b506103f3610c3936600461b57d565b616cee565b348015610c4a57600080fd5b506103f3610c5936600461b522565b616e67565b348015610c6a57600080fd5b506108c5610c7936600461b698565b6170c1565b8051606090806001600160401b0381118015610c9957600080fd5b50604051908082528060200260200182016040528015610cc3578160200160208202803683370190505b5091506000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0157600080fd5b505afa158015610d15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d39919061b92e565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7657600080fd5b505afa158015610d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dae919061bebc565b60ff169050876001600160a01b0316866001600160a01b03161415610e265760005b83811015610e205781600a0a6402540be4000283878381518110610df057fe5b60200260200101510281610e0057fe5b04858281518110610e0d57fe5b6020908102919091010152600101610dd0565b50610e95565b876001600160a01b0316876001600160a01b03161415610e955760005b83811015610e93578282600a0a6402540be400888481518110610e6257fe5b6020026020010151020281610e7357fe5b04858281518110610e8057fe5b6020908102919091010152600101610e43565b505b505050949350505050565b80516060908190806001600160401b0381118015610ebd57600080fd5b50604051908082528060200260200182016040528015610ee7578160200160208202803683370190505b509150610ef48686617450565b9250825160001415610f06575061103e565b60005b8181101561103b57866001600160a01b031663a8312b1d620249f0878481518110610f3057fe5b6020026020010151878a6040518563ffffffff1660e01b8152600401610f589392919061cc1b565b60006040518083038187803b158015610f7057600080fd5b5086fa93505050508015610fa657506040513d6000823e601f3d908101601f19168201604052610fa3919081019061b87f565b60015b610fe0573d808015610fd4576040519150601f19603f3d011682016040523d82523d6000602084013e610fd9565b606091505b505061103b565b80600188510381518110610ff057fe5b602002602001015184838151811061100457fe5b60200260200101818152505083828151811061101c57fe5b602002602001015160001415611032575061103b565b50600101610f09565b50505b935093915050565b606083516001600160401b038111801561105f57600080fd5b50604051908082528060200260200182016040528015611089578160200160208202803683370190505b50905060005b845181146111b157306001600160a01b0316639bf3ee3562030d408784815181106110b657fe5b60200260200101518785815181106110ca57fe5b6020026020010151876040518563ffffffff1660e01b81526004016110f19392919061cbd4565b60206040518083038187803b15801561110957600080fd5b5086fa9350505050801561113a575060408051601f3d908101601f191682019092526111379181019061b92e565b60015b61118e573d808015611168576040519150601f19603f3d011682016040523d82523d6000602084013e61116d565b606091505b50600083838151811061117c57fe5b602002602001018181525050506111a9565b8083838151811061119b57fe5b602002602001018181525050505b60010161108f565b509392505050565b600060608083516001600160401b03811180156111d557600080fd5b506040519080825280602002602001820160405280156111ff578160200160208202803683370190505b509050866020015151600014156112155761130f565b61122187878787617740565b909350915060005b815181101561130d57836001600160a01b0316637f9c0ecd620493e08588858151811061125257fe5b60200260200101516040518463ffffffff1660e01b815260040161127792919061c8e9565b60206040518083038187803b15801561128f57600080fd5b5086fa935050505080156112c0575060408051601f3d908101601f191682019092526112bd9181019061b92e565b60015b6112c95761130d565b808383815181106112d657fe5b6020026020010181815250508282815181106112ee57fe5b602002602001015160001415611304575061130d565b50600101611229565b505b9450945094915050565b803b15155b919050565b8051606090806001600160401b038111801561133e57600080fd5b50604051908082528060200260200182016040528015611368578160200160208202803683370190505b50915061137361a578565b61137b617966565b905060005b82811015610e955784818151811061139457fe5b6020026020010151876000815181106113a957fe5b602090810291909101015160600152604051637c26833760e11b81526001600160a01b0389169063f84d066e906113eb906001908b908b90889060040161ca95565b600060405180830381600087803b15801561140557600080fd5b505af192505050801561143a57506040513d6000823e601f3d908101601f19168201604052611437919081019061b7db565b60015b61144357610e95565b60008160008151811061145257fe5b602002602001015190506000811361146b575050610e95565b8086848151811061147857fe5b6020026020010181815250505050600101611380565b606061149a8385617995565b6020850151604080516002808252606082810190935281602001602082028036833701905050905085816000815181106114d057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106114fe57fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b038111801561152e57600080fd5b50604051908082528060200260200182016040528015611558578160200160208202803683370190505b50935061156361a578565b61156b617966565b905060005b828110156116ab5760606115978b89848151811061158a57fe5b60200260200101516179d4565b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e906115cd9060009085908a90899060040161ca95565b600060405180830381600087803b1580156115e757600080fd5b505af192505050801561161c57506040513d6000823e601f3d908101601f19168201604052611619919081019061b7db565b60015b611657573d80801561164a576040519150601f19603f3d011682016040523d82523d6000602084013e61164f565b606091505b5050506116ab565b60008160018351038151811061166957fe5b602002602001015160001902905060008113611687575050506116ab565b8089858151811061169457fe5b602002602001018181525050505050600101611570565b5050505050949350505050565b60606116c48385617995565b8151806001600160401b03811180156116dc57600080fd5b50604051908082528060200260200182016040528015611706578160200160208202803683370190505b50915060006001600160a01b03861615611729576117248787617a66565b61172c565b60005b905060006001600160a01b0386161561174e576117498887617a66565b611751565b60005b905060005b83811015610e935760016001600160a01b0388166117b45761179384632640f62c60e01b89858151811061178657fe5b6020026020010151617ae5565b87848151811061179f57fe5b6020026020010181935082815250505061184e565b6001600160a01b0389166117da57611793836359e9486260e01b89858151811061178657fe5b60006117f4846359e9486260e01b8a868151811061178657fe5b92509050801561183157611810856309903d8b60e21b83617ae5565b88858151811061181c57fe5b6020026020010181945082815250505061184c565b600087848151811061183f57fe5b6020026020010181815250505b505b80158061186e575085828151811061186257fe5b60200260200101516000145b156118795750610e93565b50600101611756565b606061188e8385617995565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d257600080fd5b505afa1580156118e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190a919061b190565b8451909150806001600160401b038111801561192557600080fd5b5060405190808252806020026020018201604052801561194f578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561198b57600080fd5b505afa15801561199f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c3919061b190565b6001600160a01b0316866001600160a01b031614158015611a665750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1857600080fd5b505afa158015611a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a50919061b190565b6001600160a01b0316876001600160a01b031614155b15611a7357505050611acf565b60005b81811015610e93576000611aa18a898b8a8681518110611a9257fe5b60200260200101518989617bc8565b905080611aae5750610e93565b80868381518110611abb57fe5b602090810291909101015250600101611a76565b949350505050565b6000806060611ae68587617995565b8351806001600160401b0381118015611afe57600080fd5b50604051908082528060200260200182016040528015611b28578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c690611b5b908a908a9060040161c6aa565b60206040518083038186803b158015611b7357600080fd5b505afa158015611b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bab919061b190565b925060006001600160a01b03841615611bc957506001935086611c68565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690611bfa908a908c9060040161c6aa565b60206040518083038186803b158015611c1257600080fd5b505afa158015611c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4a919061b190565b93506001600160a01b038416611c6157505061130f565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ca157600080fd5b505afa158015611cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd9919061b910565b611ce457505061130f565b60005b82811015611da7576000611d618a87858e60200151604051602001611d0f949392919061c6c5565b6040516020818303038152906040528a88868f60200151604051602001611d39949392919061c6c5565b6040516020818303038152906040528a8581518110611d5457fe5b6020026020010151617e87565b905080858381518110611d7057fe5b602002602001018181525050848281518110611d8857fe5b602002602001015160001415611d9e5750611da7565b50600101611ce7565b5050509450945094915050565b8051606090806001600160401b0381118015611dcf57600080fd5b50604051908082528060200260200182016040528015611df9578160200160208202803683370190505b509150856001600160a01b031684600081518110611e1357fe5b60200260200101516001600160a01b03161415611e6d5773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee84600081518110611e4c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b856001600160a01b031684600181518110611e8457fe5b60200260200101516001600160a01b03161415611ede5773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee84600181518110611ebd57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b60005b8181101561201a57856001600160a01b031663a940edac86600081518110611f0557fe5b602002602001015187600181518110611f1a57fe5b6020026020010151878581518110611f2e57fe5b60200260200101516040518463ffffffff1660e01b8152600401611f549392919061c7f2565b60206040518083038186803b158015611f6c57600080fd5b505afa925050508015611f9c575060408051601f3d908101601f19168201909252611f999181019061b92e565b60015b611fd6573d808015611fca576040519150601f19603f3d011682016040523d82523d6000602084013e611fcf565b606091505b505061201a565b80848381518110611fe357fe5b602002602001018181525050838281518110611ffb57fe5b602002602001015160001415612011575061201a565b50600101611ee1565b5050949350505050565b60606120308385617995565b8151806001600160401b038111801561204857600080fd5b50604051908082528060200260200182016040528015612072578160200160208202803683370190505b50915060005b8181101561201a57866001600160a01b03166372ea9076620c350088888886815181106120a157fe5b60200260200101516040518563ffffffff1660e01b81526004016120c79392919061c7f2565b60206040518083038187803b1580156120df57600080fd5b5086fa93505050508015612110575060408051601f3d908101601f1916820190925261210d9181019061b92e565b60015b61213e573d808015611fca576040519150601f19603f3d011682016040523d82523d6000602084013e611fcf565b8084838151811061214b57fe5b60200260200101818152505083828151811061216357fe5b602002602001015160001415612179575061201a565b50600101612078565b8051606090806001600160401b038111801561219d57600080fd5b506040519080825280602002602001820160405280156121c7578160200160208202803683370190505b50915060005b818110156122fd57856001600160a01b031663d06ca61f620249f08684815181106121f457fe5b6020026020010151886040518463ffffffff1660e01b815260040161221a92919061cc0d565b60006040518083038187803b15801561223257600080fd5b5086fa9350505050801561226857506040513d6000823e601f3d908101601f19168201604052612265919081019061b87f565b60015b6122a2573d808015612296576040519150601f19603f3d011682016040523d82523d6000602084013e61229b565b606091505b50506122fd565b806001875103815181106122b257fe5b60200260200101518483815181106122c657fe5b6020026020010181815250508382815181106122de57fe5b6020026020010151600014156122f457506122fd565b506001016121cd565b50509392505050565b6000606061231386617fc0565b9150600061232b87670de0b6b3a764000088886180ac565b8451909150806001600160401b038111801561234657600080fd5b50604051908082528060200260200182016040528015612370578160200160208202803683370190505b50925060005b818110156123c4578286828151811061238b57fe5b6020026020010151670de0b6b3a764000002816123a457fe5b048482815181106123b157fe5b6020908102919091010152600101612376565b50505094509492505050565b8051606090806001600160401b03811180156123eb57600080fd5b50604051908082528060200260200182016040528015612415578160200160208202803683370190505b50915060005b8181101561201a57866001600160a01b031663f3535e6c878760008151811061244057fe5b60200260200101518860018151811061245557fe5b60200260200101516040518463ffffffff1660e01b815260040161247b9392919061c9e6565b60206040518083038186803b15801561249357600080fd5b505afa9250505080156124c3575060408051601f3d908101601f191682019092526124c09181019061b92e565b60015b6124f1573d808015611fca576040519150601f19603f3d011682016040523d82523d6000602084013e611fcf565b808583815181106124fe57fe5b60200260200101511115612512575061201a565b50866001600160a01b031663d7176ca9878760008151811061253057fe5b60200260200101518860018151811061254557fe5b602002602001015188868151811061255957fe5b60200260200101516040518563ffffffff1660e01b8152600401612580949392919061ca0e565b604080518083038186803b15801561259757600080fd5b505afa9250505080156125c7575060408051601f3d908101601f191682019092526125c49181019061bde1565b60015b6125f5573d808015611fca576040519150601f19603f3d011682016040523d82523d6000602084013e611fcf565b8185848151811061260257fe5b60200260200101818152505084838151811061261a57fe5b60200260200101516000141561263157505061201a565b505060010161241b565b8051606090806001600160401b038111801561265657600080fd5b50604051908082528060200260200182016040528015612680578160200160208202803683370190505b50915060005b8181101561201a576000606088600001516001600160a01b0316621e84808a602001518a8a8a88815181106126b757fe5b60200260200101516040516024016126d19392919061cad8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161270f919061c675565b6000604051808303818686fa925050503d806000811461274b576040519150601f19603f3d011682016040523d82523d6000602084013e612750565b606091505b5091509150600082156127745781806020019051810190612771919061b92e565b90505b8086858151811061278157fe5b60200260200101818152505085848151811061279957fe5b6020026020010151600014156127b15750505061201a565b505050600101612686565b4390565b80516060908190806001600160401b03811180156127dd57600080fd5b50604051908082528060200260200182016040528015612807578160200160208202803683370190505b5091506128148686617450565b9250825160001415612826575061103e565b60005b8181101561103b57866001600160a01b0316639e269b68620249f087848151811061285057fe5b6020026020010151878a6040518563ffffffff1660e01b81526004016128789392919061cc1b565b60006040518083038187803b15801561289057600080fd5b5086fa935050505080156128c657506040513d6000823e601f3d908101601f191682016040526128c3919081019061b87f565b60015b6128f4573d808015610fd4576040519150601f19603f3d011682016040523d82523d6000602084013e610fd9565b8060008151811061290157fe5b602002602001015184838151811061291557fe5b60200260200101818152505083828151811061292d57fe5b602002602001015160001415612943575061103b565b50600101612829565b60005a905090565b60608060608061299187735555555555555555555555555555555555555556888860018a51038151811061298457fe5b60200260200101516181dd565b905084516001600160401b03811180156129aa57600080fd5b506040519080825280602002602001820160405280156129d4578160200160208202803683370190505b50915084516001600160401b03811180156129ee57600080fd5b50604051908082528060200260200182016040528015612a2257816020015b6060815260200190600190039081612a0d5790505b50935084516001600160401b0381118015612a3c57600080fd5b50604051908082528060200260200182016040528015612a66578160200160208202803683370190505b50925060005b8151811015612d0657612a91828281518110612a8457fe5b6020026020010151618223565b612a9a57612cfe565b6060612ab988848481518110612aac57fe5b6020026020010151618279565b60405163551e2bdf60e01b815290915060609081907355555555555555555555555555555555555555569063551e2bdf90612afc908e9087908e9060040161c9c6565b60006040518083038186803b158015612b1457600080fd5b505afa925050508015612b25575060015b612cfa573d808015612b53576040519150601f19603f3d011682016040523d82523d6000602084013e612b58565b606091505b506000612b64826183d4565b9095509350905080612b7a575050505050612cfe565b60005b8451811015612cf657848181518110612b9257fe5b602002602001015160001415612ba757612cf6565b848181518110612bb357fe5b6020026020010151898281518110612bc757fe5b60200260200101511015612c4a57848181518110612be157fe5b6020026020010151898281518110612bf557fe5b602002602001018181525050858b8281518110612c0e57fe5b6020026020010181905250838181518110612c2557fe5b60200260200101518a8281518110612c3957fe5b602002602001018181525050612cee565b848181518110612c5657fe5b6020026020010151898281518110612c6a57fe5b6020026020010151148015612ca45750838181518110612c8657fe5b60200260200101518a8281518110612c9a57fe5b6020026020010151115b15612cee57858b8281518110612cb657fe5b6020026020010181905250838181518110612ccd57fe5b60200260200101518a8281518110612ce157fe5b6020026020010181815250505b600101612b7d565b5050505b5050505b600101612a6c565b505093509350939050565b80516060908590806001600160401b0381118015612d2e57600080fd5b50604051908082528060200260200182016040528015612d58578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b62490612d8890899060040161c681565b60206040518083038186803b158015612da057600080fd5b505afa158015612db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd8919061b910565b1580612e5d5750604051630bcded8960e21b81526001600160a01b03831690632f37b62490612e0b90889060040161c681565b60206040518083038186803b158015612e2357600080fd5b505afa158015612e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5b919061b910565b155b15612e69575050611acf565b612e7161a59f565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90612e9d908a9060040161c681565b60206040518083038186803b158015612eb557600080fd5b505afa158015612ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eed919061b92e565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90612f1b90899060040161c681565b60206040518083038186803b158015612f3357600080fd5b505afa158015612f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6b919061b92e565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce690612f9c908a9060040161c681565b60206040518083038186803b158015612fb457600080fd5b505afa158015612fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fec919061b92e565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce69061301f90899060040161c681565b60206040518083038186803b15801561303757600080fd5b505afa15801561304b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306f919061b92e565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156130b157600080fd5b505afa1580156130c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e9919061b92e565b608082015260005b82811015610e935761311c82602001516003670de0b6b3a76400008161311357fe5b04600101618436565b86828151811061312857fe5b6020026020010151111561313b57610e93565b836001600160a01b031663f8d6aed4620493e084600001518560400151866020015187606001518c888151811061316e57fe5b602002602001015189608001516040518863ffffffff1660e01b815260040161319c9695949392919061cc7d565b60206040518083038187803b1580156131b457600080fd5b5086fa935050505080156131e5575060408051601f3d908101601f191682019092526131e29181019061b92e565b60015b61321f573d808015613213576040519150601f19603f3d011682016040523d82523d6000602084013e613218565b606091505b5050610e93565b8251613237906002670de0b6b3a76400005b04618436565b8111156132445750610e93565b8086838151811061325157fe5b60200260200101818152505085828151811061326957fe5b60200260200101516000141561327f5750610e93565b506001016130f1565b60608060608061329786618493565b905060606132c588735555555555555555555555555555555555555556848960018b51038151811061298457fe5b905085516001600160401b03811180156132de57600080fd5b50604051908082528060200260200182016040528015613308578160200160208202803683370190505b50925085516001600160401b038111801561332257600080fd5b5060405190808252806020026020018201604052801561335657816020015b60608152602001906001900390816133415790505b50945085516001600160401b038111801561337057600080fd5b5060405190808252806020026020018201604052801561339a578160200160208202803683370190505b50935060005b8151811015613674576133b8828281518110612a8457fe5b6133c15761366c565b60606133d384848481518110612aac57fe5b604051630196e65d60e51b81529091506060908190735555555555555555555555555555555555555556906332dccba090613416908f9087908f9060040161c9c6565b60006040518083038186803b15801561342e57600080fd5b505afa92505050801561343f575060015b613668573d80801561346d576040519150601f19603f3d011682016040523d82523d6000602084013e613472565b606091505b50600061347e826183d4565b909550935090508061349457505050505061366c565b60005b8451811015613664578481815181106134ac57fe5b6020026020010151600014156134c157613664565b8981815181106134cd57fe5b60200260200101516000148061350857508481815181106134ea57fe5b60200260200101518a82815181106134fe57fe5b6020026020010151115b156135a65784818151811061351957fe5b60200260200101518a828151811061352d57fe5b60200260200101818152505061355e8e6135598a8a8151811061354c57fe5b602002602001015161852b565b618279565b8c828151811061356a57fe5b602002602001018190525083818151811061358157fe5b60200260200101518b828151811061359557fe5b60200260200101818152505061365c565b8481815181106135b257fe5b60200260200101518a82815181106135c657fe5b602002602001015114801561360057508381815181106135e257fe5b60200260200101518b82815181106135f657fe5b6020026020010151115b1561365c576136188e6135598a8a8151811061354c57fe5b8c828151811061362457fe5b602002602001018190525083818151811061363b57fe5b60200260200101518b828151811061364f57fe5b6020026020010181815250505b600101613497565b5050505b5050505b6001016133a0565b50505093509350939050565b6040805160608181019092526136e6908061369f86896080840161c6aa565b604051602081830303815290604052815260200186886040516020016136c692919061c6aa565b60405160208183030381529060405281526020016185c3815250836186d7565b95945050505050565b60606136fb8385617995565b84602001516001600160a01b0316846001600160a01b031614801561372c575084516001600160a01b038481169116145b15613738575080611acf565b6136e6858585856188e9565b6060613751848484611046565b905060005b84518110156111b15781818151811061376b57fe5b60200260200101516000146137f1576137d882828151811061378957fe5b602002602001015186838151811061379d57fe5b6020026020010151606001516001600160801b03168784815181106137be57fe5b6020026020010151604001516001600160801b0316618b35565b8282815181106137e457fe5b6020026020010181815250505b600101613756565b6060816001600160401b038111801561381157600080fd5b5060405190808252806020026020018201604052801561384b57816020015b61383861a5ce565b8152602001906001900390816138305790505b50905060005b80831461395357600182828151811061386657fe5b60209081029190910181015191151591015283838281811061388457fe5b9050602002810190613896919061cccc565b151590506138a35761394b565b308484838181106138b057fe5b90506020028101906138c2919061cccc565b6040516138d092919061c668565b6000604051808303816000865af19150503d806000811461390d576040519150601f19603f3d011682016040523d82523d6000602084013e613912565b606091505b5083838151811061391f57fe5b602002602001015160200184848151811061393657fe5b60209081029190910101519190915290151590525b600101613851565b5092915050565b606084602001516001600160a01b0316846001600160a01b031614801561398d575084516001600160a01b038481169116145b15613999575080611acf565b6136e6858486856188e9565b606081516001600160401b03811180156139be57600080fd5b506040519080825280602002602001820160405280156139e8578160200160208202803683370190505b50905060005b82518114613a91577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316838281518110613a2c57fe5b60200260200101516001600160a01b031614613a6c57613a67838281518110613a5157fe5b60200260200101516001600160a01b0316618b59565b613a6f565b60125b60ff16828281518110613a7e57fe5b60209081029190910101526001016139ee565b50919050565b60006060809450945094915050565b8051606090806001600160401b0381118015613ac157600080fd5b50604051908082528060200260200182016040528015613aeb578160200160208202803683370190505b509150856001600160a01b0316856001600160a01b0316148015613b205750866001600160a01b0316846001600160a01b0316145b15613b2e57829150506136e6565b866001600160a01b0316856001600160a01b0316148015613b605750856001600160a01b0316846001600160a01b0316145b15613ba25760005b81811015613b98576001848281518110613b7e57fe5b602090810291909101018051919091039052600101613b68565b50829150506136e6565b5095945050505050565b60408051600280825260608083018452928392919060208301908036833701905050905083600181518110613bdd57fe5b602002602001015181600081518110613bf257fe5b60200260200101906001600160a01b031690816001600160a01b03168152505083600081518110613c1f57fe5b602002602001015181600181518110613c3457fe5b6001600160a01b03909216602092830291909101909101526040805160608101909152613cb19080613c6a88856080840161c81a565b60405160208183030381529060405281526020018787604051602001613c9192919061c81a565b6040516020818303038152906040528152602001618c05815250846186d7565b9150505b9392505050565b6060613cc88385617995565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015613d0c57600080fd5b505afa158015613d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d44919061b190565b8451909150806001600160401b0381118015613d5f57600080fd5b50604051908082528060200260200182016040528015613d89578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015613dc557600080fd5b505afa158015613dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dfd919061b190565b6001600160a01b0316866001600160a01b031614158015613ea05750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015613e5257600080fd5b505afa158015613e66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e8a919061b190565b6001600160a01b0316876001600160a01b031614155b15613ead57505050611acf565b60005b81811015610e93576000613edb8a898b8a8681518110613ecc57fe5b60200260200101518989618d17565b905080613ee85750610e93565b80868381518110613ef557fe5b602090810291909101015250600101613eb0565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b8051606090806001600160401b0381118015613f3c57600080fd5b50604051908082528060200260200182016040528015613f66578160200160208202803683370190505b50915060005b8181101561201a57866001600160a01b031663e94803f48787878581518110613f9157fe5b60200260200101516040518463ffffffff1660e01b8152600401613fb79392919061c7f2565b60206040518083038186803b158015613fcf57600080fd5b505afa158015613fe3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614007919061b92e565b83828151811061401357fe5b60200260200101818152505082818151811061402b57fe5b6020026020010151600014156140405761201a565b600101613f6c565b6040805160028082526060808301845292839291906020830190803683370190505090508360018151811061407957fe5b60200260200101518160008151811061408e57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050836000815181106140bb57fe5b6020026020010151816001815181106140d057fe5b6001600160a01b0390921660209283029190910190910152604080516060810190915261415090806141078989866080850161c734565b60405160208183030381529060405281526020018888886040516020016141309392919061c734565b6040516020818303038152906040528152602001618fa9815250846186d7565b9695505050505050565b61416261a5e6565b61416a61a5e6565b6060836001600160401b038111801561418257600080fd5b506040519080825280602002602001820160405280156141ac578160200160208202803683370190505b5090506060846001600160401b03811180156141c757600080fd5b506040519080825280602002602001820160405280156141f1578160200160208202803683370190505b50905060005b87518110156143145760006060306001600160a01b03168a848151811061421a57fe5b602002602001015160405161422f919061c675565b6000604051808303816000865af19150503d806000811461426c576040519150601f19603f3d011682016040523d82523d6000602084013e614271565b606091505b5091509150811561430a576060614288828a6190c3565b90508460018a038151811061429957fe5b60200260200101518160018b03815181106142b057fe5b60200260200101511115614308578388526020880182905260005b89811015614306578181815181106142df57fe5b60200260200101518682815181106142f357fe5b60209081029190910101526001016142cb565b505b505b50506001016141f7565b5080600186038151811061432457fe5b60200260200101516000141561433a5750614477565b60005b8651811015612d065761436387828151811061435557fe5b602002602001015183619101565b60006060306001600160a01b031689848151811061437d57fe5b6020026020010151604051614392919061c675565b6000604051808303816000865af19150503d80600081146143cf576040519150601f19603f3d011682016040523d82523d6000602084013e6143d4565b606091505b5091509150811561446d5760606143eb828a6190c3565b90508560018a03815181106143fc57fe5b60200260200101518160018b038151811061441357fe5b6020026020010151111561446b578387526020870182905260005b898110156144695781818151811061444257fe5b602002602001015187828151811061445657fe5b602090810291909101015260010161442e565b505b505b505060010161433d565b93509350939050565b6000606061448e8486617995565b8251806001600160401b03811180156144a657600080fd5b506040519080825280602002602001820160405280156144d0578160200160208202803683370190505b5091506144df8787878761914c565b60408051600180825281830190925291945060609190816020015b61450261a600565b8152602001906001900390816144fa5790505090506040518060600160405280886001600160a01b03168152602001876001600160a01b031681526020018515158152508160008151811061455357fe5b602002602001018190525060005b828110156123c457886001600160a01b0316639881fcb487838151811061458457fe5b6020026020010151846040518363ffffffff1660e01b81526004016145aa92919061cc4f565b60006040518083038186803b1580156145c257600080fd5b505afa1580156145d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526145fe919081019061b87f565b60018151811061460a57fe5b602002602001015184828151811061461e57fe5b60200260200101818152505083818151811061463657fe5b60200260200101516000141561464b576123c4565b600101614561565b60408401516060906001600160e01b0319166146d55760408051606081019091526146ce908061468786896080840161caf3565b604051602081830303815290604052815260200186886040516020016146ae92919061caf3565b60405160208183030381529060405281526020016191e6815250836186d7565b9050611acf565b8151806001600160401b03811180156146ed57600080fd5b50604051908082528060200260200182016040528015614717578160200160208202803683370190505b50915060005b8181101561201a576000606088600001516001600160a01b0316621e84808a604001518a8a8a888151811061474e57fe5b60200260200101516040516024016147689392919061cad8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516147a6919061c675565b6000604051808303818686fa925050503d80600081146147e2576040519150601f19603f3d011682016040523d82523d6000602084013e6147e7565b606091505b50915091506000821561480b5781806020019051810190614808919061b92e565b90505b8086858151811061481857fe5b60200260200101818152505085848151811061483057fe5b6020026020010151600014156148485750505061201a565b50505060010161471d565b80516060908590806001600160401b038111801561487057600080fd5b5060405190808252806020026020018201604052801561489a578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b624906148ca90899060040161c681565b60206040518083038186803b1580156148e257600080fd5b505afa1580156148f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061491a919061b910565b158061499f5750604051630bcded8960e21b81526001600160a01b03831690632f37b6249061494d90889060040161c681565b60206040518083038186803b15801561496557600080fd5b505afa158015614979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061499d919061b910565b155b156149ab575050611acf565b6149b361a59f565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f906149df908a9060040161c681565b60206040518083038186803b1580156149f757600080fd5b505afa158015614a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a2f919061b92e565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90614a5d90899060040161c681565b60206040518083038186803b158015614a7557600080fd5b505afa158015614a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614aad919061b92e565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce690614ade908a9060040161c681565b60206040518083038186803b158015614af657600080fd5b505afa158015614b0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b2e919061b92e565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690614b6190899060040161c681565b60206040518083038186803b158015614b7957600080fd5b505afa158015614b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bb1919061b92e565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b158015614bf357600080fd5b505afa158015614c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c2b919061b92e565b608082015260005b82811015610e93578151614c51906002670de0b6b3a7640000613231565b868281518110614c5d57fe5b60200260200101511115614c7057610e93565b836001600160a01b031663ba9530a6620493e084600001518560400151866020015187606001518c8881518110614ca357fe5b602002602001015189608001516040518863ffffffff1660e01b8152600401614cd19695949392919061cc7d565b60206040518083038187803b158015614ce957600080fd5b5086fa93505050508015614d1a575060408051601f3d908101601f19168201909252614d179181019061b92e565b60015b614d48573d808015613213576040519150601f19603f3d011682016040523d82523d6000602084013e613218565b80868381518110614d5557fe5b602002602001018181525050858281518110614d6d57fe5b602002602001015160001415614d835750610e93565b50600101614c33565b60008083516003811115614d9c57fe5b1480614db45750600183516003811115614db257fe5b145b80614dca575060408401516001600160801b0316155b80614de0575060608401516001600160801b0316155b15614ded57506000613cb5565b614df561a620565b600080846001600160a01b0316631fb0979588886040518363ffffffff1660e01b8152600401614e2692919061cbb7565b60a06040518083038186803b158015614e3e57600080fd5b505afa158015614e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e76919061bd50565b91945092509050600183602001516004811115614e8f57fe5b141580614e9a575080155b80614ead575086516001600160a01b0316155b15614ebe5760009350505050613cb5565b506001600160801b031695945050505050565b600080856001600160a01b031663901754d786866040518363ffffffff1660e01b8152600401614f0292919061c6aa565b60206040518083038186803b158015614f1a57600080fd5b505afa158015614f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f52919061b190565b90506001600160a01b038116614f6c576000915050611acf565b60006001600160a01b03861615614ffe576040516370a0823160e01b81526001600160a01b038716906370a0823190614fa990859060040161c681565b60206040518083038186803b158015614fc157600080fd5b505afa158015614fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ff9919061b92e565b61500a565b816001600160a01b0316315b90508381101561501f57600092505050611acf565b6040516303c2803f60e31b81526001600160a01b03831690631e1401f890620249f090615054908a908a908a9060040161c7f2565b60206040518083038187803b15801561506c57600080fd5b5086fa9350505050801561509d575060408051601f3d908101601f1916820190925261509a9181019061b92e565b60015b6150dd573d8080156150cb576040519150601f19603f3d011682016040523d82523d6000602084013e6150d0565b606091505b5060009350505050611acf565b9250611acf915050565b60606150f38385617995565b60208501516040805160028082526060828101909352816020016020820280368337019050509050858160008151811061512957fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061515757fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b038111801561518757600080fd5b506040519080825280602002602001820160405280156151b1578160200160208202803683370190505b5093506151bc61a578565b6151c4617966565b905060005b828110156116ab5760606151e38b89848151811061158a57fe5b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e906152199060019085908a90899060040161ca95565b600060405180830381600087803b15801561523357600080fd5b505af192505050801561526857506040513d6000823e601f3d908101601f19168201604052615265919081019061b7db565b60015b615296573d80801561164a576040519150601f19603f3d011682016040523d82523d6000602084013e61164f565b6000816000815181106152a557fe5b60200260200101519050600081136152bf575050506116ab565b808985815181106152cc57fe5b6020026020010181815250505050506001016151c9565b60008060606152f28587617995565b8351806001600160401b038111801561530a57600080fd5b50604051908082528060200260200182016040528015615334578160200160208202803683370190505b5091506153438989898961924d565b945092506001600160a01b03831661535b5750615415565b60005b818110156154125760006153cc8986886040516020016153809392919061c7a2565b6040516020818303038152906040528987896040516020016153a49392919061c7a2565b6040516020818303038152906040528985815181106153bf57fe5b60200260200101516193a2565b9050808483815181106153db57fe5b6020026020010181815250508382815181106153f357fe5b6020026020010151600014156154095750615412565b5060010161535e565b50505b955095509592505050565b8051606090806001600160401b038111801561543b57600080fd5b50604051908082528060200260200182016040528015615465578160200160208202803683370190505b5091506000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156154a357600080fd5b505afa1580156154b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906154db919061b92e565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561551857600080fd5b505afa15801561552c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615550919061bebc565b60ff169050876001600160a01b0316866001600160a01b031614156155c25760005b83811015610e20578282600a0a6402540be40088848151811061559157fe5b60200260200101510202816155a257fe5b048582815181106155af57fe5b6020908102919091010152600101615572565b876001600160a01b0316876001600160a01b03161415610e955760005b83811015610e935781600a0a6402540be40002838783815181106155ff57fe5b6020026020010151028161560f57fe5b0485828151811061561c57fe5b60209081029190910101526001016155df565b6000606061563d8486617995565b6156498685878661914c565b915061570f6040518060600160405280886040518060600160405280896001600160a01b031681526020018a6001600160a01b0316815260200187151581525060405160200161569a92919061ca43565b60405160208183030381529060405281526020018860405180606001604052808a6001600160a01b03168152602001896001600160a01b031681526020018715158152506040516020016156ef92919061ca43565b6040516020818303038152906040528152602001619494815250846186d7565b905094509492505050565b8051606090806001600160401b038111801561573557600080fd5b5060405190808252806020026020018201604052801561575f578160200160208202803683370190505b509150856001600160a01b0316856001600160a01b03161480156157945750866001600160a01b0316846001600160a01b0316145b156157a257829150506136e6565b866001600160a01b0316856001600160a01b03161480156157d45750856001600160a01b0316846001600160a01b0316145b15613ba25760005b81811015613b985760018482815181106157f257fe5b6020908102919091010180519190910390526001016157dc565b6000606061581a8486617995565b8251806001600160401b038111801561583257600080fd5b5060405190808252806020026020018201604052801561585c578160200160208202803683370190505b50915060005b818110156158d157600061588b89898989868151811061587e57fe5b6020026020010151614ed1565b90508084838151811061589a57fe5b6020026020010181815250508382815181106158b257fe5b6020026020010151600014156158c857506158d1565b50600101615862565b5060405163901754d760e01b81526001600160a01b0388169063901754d790615900908990899060040161c6aa565b60206040518083038186803b15801561591857600080fd5b505afa15801561592c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615950919061b190565b92505094509492505050565b6040805160608181019092526136e6908061597b86896080840161c6aa565b604051602081830303815290604052815260200186886040516020016159a292919061c6aa565b60405160208183030381529060405281526020016195a9815250836186d7565b606082516001600160401b03811180156159db57600080fd5b50604051908082528060200260200182016040528015615a05578160200160208202803683370190505b50905060005b83518114613953577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316848281518110615a4957fe5b60200260200101516001600160a01b031614615a9357615a8e83858381518110615a6f57fe5b60200260200101516001600160a01b03166195f090919063ffffffff16565b615a9f565b826001600160a01b0316315b828281518110615aab57fe5b6020908102919091010152600101615a0b565b6060615aca8385617995565b8151806001600160401b0381118015615ae257600080fd5b50604051908082528060200260200182016040528015615b0c578160200160208202803683370190505b50915060006001600160a01b03861615615b2f57615b2a8787617a66565b615b32565b60005b905060006001600160a01b03861615615b5457615b4f8887617a66565b615b57565b60005b905060005b83811015610e935760016001600160a01b038816615bad57615b8c846395b68fe760e01b89858151811061178657fe5b878481518110615b9857fe5b60200260200101819350828152505050615c47565b6001600160a01b038916615bd357615b8c8363cd7724c360e01b89858151811061178657fe5b6000615bed856395b68fe760e01b8a868151811061178657fe5b925090508015615c2a57615c098463cd7724c360e01b83617ae5565b888581518110615c1557fe5b60200260200101819450828152505050615c45565b6000878481518110615c3857fe5b6020026020010181815250505b505b801580615c675750858281518110615c5b57fe5b60200260200101516000145b15615c725750610e93565b50600101615b5c565b8051606090806001600160401b0381118015615c9657600080fd5b50604051908082528060200260200182016040528015615cc0578160200160208202803683370190505b50915060005b818110156122fd57856001600160a01b0316631f00ca74620249f0868481518110615ced57fe5b6020026020010151886040518463ffffffff1660e01b8152600401615d1392919061cc0d565b60006040518083038187803b158015615d2b57600080fd5b5086fa93505050508015615d6157506040513d6000823e601f3d908101601f19168201604052615d5e919081019061b87f565b60015b615d8f573d808015612296576040519150601f19603f3d011682016040523d82523d6000602084013e61229b565b80600081518110615d9c57fe5b6020026020010151848381518110615db057fe5b602002602001018181525050838281518110615dc857fe5b602002602001015160001415615dde57506122fd565b50600101615cc6565b60006060615df486617fc0565b8351909250806001600160401b0381118015615e0f57600080fd5b50604051908082528060200260200182016040528015615e39578160200160208202803683370190505b50915080615e475750615ef3565b615e678785600081518110615e5857fe5b602002602001015188886180ac565b82600081518110615e7457fe5b602090810291909101015260015b81811015615ef05784600081518110615e9757fe5b6020026020010151858281518110615eab57fe5b602002602001015184600081518110615ec057fe5b60200260200101510281615ed057fe5b04838281518110615edd57fe5b6020908102919091010152600101615e82565b50505b94509492505050565b8051606090806001600160401b0381118015615f1757600080fd5b50604051908082528060200260200182016040528015615f41578160200160208202803683370190505b509150615f4c61a578565b615f54617966565b905060005b82811015610e9557848181518110615f6d57fe5b602002602001015187600081518110615f8257fe5b602090810291909101015160600152604051637c26833760e11b81526001600160a01b0389169063f84d066e90615fc4906000908b908b90889060040161ca95565b600060405180830381600087803b158015615fde57600080fd5b505af192505050801561601357506040513d6000823e601f3d908101601f19168201604052616010919081019061b7db565b60015b61601c57610e95565b60008160018351038151811061602e57fe5b60200260200101516000190290506000811361604b575050610e95565b8086848151811061605857fe5b6020026020010181815250505050600101615f59565b600080606061607d8587617995565b8351806001600160401b038111801561609557600080fd5b506040519080825280602002602001820160405280156160bf578160200160208202803683370190505b5091506160ce8989898961924d565b945092506001600160a01b0383166160e65750615415565b604080516060810190915261614f9080616106898789156080850161c7a2565b604051602081830303815290604052815260200189868860405160200161612f9392919061c7a2565b60405160208183030381529060405281526020016193a2815250866186d7565b915050955095509592505050565b80516060908190806001600160401b038111801561617a57600080fd5b506040519080825280602002602001820160405280156161a4578160200160208202803683370190505b509150806001600160401b03811180156161bd57600080fd5b506040519080825280602002602001820160405280156161e7578160200160208202803683370190505b509250876001600160a01b0316866001600160a01b031614801561621c5750866001600160a01b0316856001600160a01b0316145b806162545750866001600160a01b0316866001600160a01b03161480156162545750876001600160a01b0316856001600160a01b0316145b15616416578391506001600160a01b0389166162705750616418565b8860005b8281101561641357896001600160a01b0316876001600160a01b0316141561634757816001600160a01b031663b76398e4898884815181106162b257fe5b602002602001015160006040518463ffffffff1660e01b81526004016162da9392919061c89c565b60206040518083038186803b1580156162f257600080fd5b505afa158015616306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061632a919061b92e565b85828151811061633657fe5b60200260200101818152505061640b565b896001600160a01b0316886001600160a01b0316141561640b57816001600160a01b0316635cc7bc108888848151811061637d57fe5b60200260200101516040518363ffffffff1660e01b81526004016163a292919061c88e565b60206040518083038186803b1580156163ba57600080fd5b505afa1580156163ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906163f2919061b92e565b8582815181106163fe57fe5b6020026020010181815250505b600101616274565b50505b505b965096945050505050565b60008060606164328587617995565b8351806001600160401b038111801561644a57600080fd5b50604051908082528060200260200182016040528015616474578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c6906164a7908a908a9060040161c6aa565b60206040518083038186803b1580156164bf57600080fd5b505afa1580156164d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906164f7919061b190565b925060006001600160a01b03841615616515575060019350866165b4565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690616546908a908c9060040161c6aa565b60206040518083038186803b15801561655e57600080fd5b505afa158015616572573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616596919061b190565b93506001600160a01b0384166165ad57505061130f565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156165ed57600080fd5b505afa158015616601573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616625919061b910565b61663057505061130f565b6166a860405180606001604052808987858e60200151604051602001616659949392919061c6c5565b60405160208183030381529060405281526020018a87858e60200151604051602001616688949392919061c6c5565b6040516020818303038152906040528152602001617e87815250876186d7565b925050509450945094915050565b80516060908190806001600160401b03811180156166d357600080fd5b506040519080825280602002602001820160405280156166fd578160200160208202803683370190505b509150806001600160401b038111801561671657600080fd5b50604051908082528060200260200182016040528015616740578160200160208202803683370190505b509250876001600160a01b0316866001600160a01b03161480156167755750866001600160a01b0316856001600160a01b0316145b806167ad5750866001600160a01b0316866001600160a01b03161480156167ad5750876001600160a01b0316856001600160a01b0316145b15616416578391506001600160a01b0389166167c95750616418565b8860005b8281101561641357896001600160a01b0316876001600160a01b031614156168a057816001600160a01b031663b76398e48986848151811061680b57fe5b602002602001015160006040518463ffffffff1660e01b81526004016168339392919061c89c565b60206040518083038186803b15801561684b57600080fd5b505afa15801561685f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616883919061b92e565b85828151811061688f57fe5b602002602001018181525050616964565b896001600160a01b0316886001600160a01b0316141561696457816001600160a01b0316635cc7bc10888684815181106168d657fe5b60200260200101516040518363ffffffff1660e01b81526004016168fb92919061c88e565b60206040518083038186803b15801561691357600080fd5b505afa158015616927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061694b919061b92e565b85828151811061695757fe5b6020026020010181815250505b6001016167cd565b8051604080516060818101909252909190614150908061699189888a6080850161c9e6565b60405160208183030381529060405281526020018888886040516020016169ba9392919061c9e6565b60405160208183030381529060405281526020016196ba815250846186d7565b606083516001600160401b03811180156169f357600080fd5b50604051908082528060200260200182016040528015616a1d578160200160208202803683370190505b50905060005b845181146111b1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316858281518110616a6157fe5b60200260200101516001600160a01b031614616aad57616aa88484878481518110616a8857fe5b60200260200101516001600160a01b03166197079092919063ffffffff16565b616ab0565b60005b828281518110616abc57fe5b6020908102919091010152600101616a23565b8051606090806001600160401b0381118015616aea57600080fd5b50604051908082528060200260200182016040528015616b14578160200160208202803683370190505b50915060005b8181101561201a57866001600160a01b031663838e6a22620493e08888888681518110616b4357fe5b60200260200101516040518563ffffffff1660e01b8152600401616b699392919061c7f2565b60206040518083038187803b158015616b8157600080fd5b5086fa93505050508015616bb2575060408051601f3d908101601f19168201909252616baf9181019061b92e565b60015b616be0573d808015611fca576040519150601f19603f3d011682016040523d82523d6000602084013e611fcf565b80848381518110616bed57fe5b60200260200101818152505050600101616b1a565b60006060616c108486617995565b8251806001600160401b0381118015616c2857600080fd5b50604051908082528060200260200182016040528015616c52578160200160208202803683370190505b509150616cbd60405180606001604052808988604051602001616c7692919061c6aa565b60405160208183030381529060405281526020018989604051602001616c9d92919061c6aa565b60405160208183030381529060405281526020016197d3815250856186d7565b60405163901754d760e01b81529092506001600160a01b0388169063901754d790615900908990899060040161c6aa565b8051606090806001600160401b0381118015616d0957600080fd5b50604051908082528060200260200182016040528015616d33578160200160208202803683370190505b50915060005b818110156122fd57856001600160a01b03166343c2e2f586600081518110616d5d57fe5b602002602001015187600181518110616d7257fe5b6020026020010151878581518110616d8657fe5b60200260200101516040518463ffffffff1660e01b8152600401616dac9392919061c7f2565b604080518083038186803b158015616dc357600080fd5b505afa925050508015616df3575060408051601f3d908101601f19168201909252616df09181019061bde1565b60015b616e21573d808015612296576040519150601f19603f3d011682016040523d82523d6000602084013e61229b565b81858481518110616e2e57fe5b602002602001018181525050848381518110616e4657fe5b602002602001015160001415616e5d5750506122fd565b5050600101616d39565b8051606090806001600160401b0381118015616e8257600080fd5b50604051908082528060200260200182016040528015616eac578160200160208202803683370190505b509150856001600160a01b031684600081518110616ec657fe5b60200260200101516001600160a01b03161415616f205773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee84600081518110616eff57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b856001600160a01b031684600181518110616f3757fe5b60200260200101516001600160a01b03161415616f915773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee84600181518110616f7057fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b60005b8181101561201a57856001600160a01b0316636e1a20be86600081518110616fb857fe5b602002602001015187600181518110616fcd57fe5b6020026020010151878581518110616fe157fe5b60200260200101516040518463ffffffff1660e01b81526004016170079392919061c7f2565b60206040518083038186803b15801561701f57600080fd5b505afa92505050801561704f575060408051601f3d908101601f1916820190925261704c9181019061b92e565b60015b61707d573d808015611fca576040519150601f19603f3d011682016040523d82523d6000602084013e611fcf565b8084838151811061708a57fe5b6020026020010181815250508382815181106170a257fe5b6020026020010151600014156170b8575061201a565b50600101616f94565b6170c961a5e6565b6170d161a5e6565b6060836001600160401b03811180156170e957600080fd5b50604051908082528060200260200182016040528015617113578160200160208202803683370190505b50905060005b848110156171435760001982828151811061713057fe5b6020908102919091010152600101617119565b506060846001600160401b038111801561715c57600080fd5b50604051908082528060200260200182016040528015617186578160200160208202803683370190505b50905060005b858110156171b6576000198282815181106171a357fe5b602090810291909101015260010161718c565b5060005b86518110156172e95760006060306001600160a01b03168984815181106171dd57fe5b60200260200101516040516171f2919061c675565b6000604051808303816000865af19150503d806000811461722f576040519150601f19603f3d011682016040523d82523d6000602084013e617234565b606091505b509150915081156172df57606061724b828a6190c3565b905060008160018b038151811061725e57fe5b6020026020010151905060008111801561728d57508560018b038151811061728257fe5b602002602001015181105b156172dc578488526020880183905260005b8a8110156172da578281815181106172b357fe5b60200260200101518782815181106172c757fe5b602090810291909101015260010161729f565b505b50505b50506001016171ba565b506000198160018703815181106172fc57fe5b602002602001015114156173105750614477565b60005b87518114612d065761732a88828151811061435557fe5b60006060306001600160a01b03168a848151811061734457fe5b6020026020010151604051617359919061c675565b6000604051808303816000865af19150503d8060008114617396576040519150601f19603f3d011682016040523d82523d6000602084013e61739b565b606091505b509150915081156174465760606173b2828a6190c3565b905060008160018b03815181106173c557fe5b602002602001015190506000811180156173f457508660018b03815181106173e957fe5b602002602001015181105b15617443578489526020890183905260005b8a8110156174415782818151811061741a57fe5b602002602001015188828151811061742e57fe5b6020908102919091010152600101617406565b505b50505b5050600101617313565b60606000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561748d57600080fd5b505afa1580156174a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906174c5919061b190565b905060018351036001600160401b03811180156174e157600080fd5b5060405190808252806020026020018201604052801561750b578160200160208202803683370190505b50915060005b8251811015617737576060826001600160a01b0316635b1dc86f620249f087858151811061753b57fe5b602002602001015188866001018151811061755257fe5b60200260200101516040518463ffffffff1660e01b815260040161757792919061c6aa565b60006040518083038187803b15801561758f57600080fd5b5086fa935050505080156175c557506040513d6000823e601f3d908101601f191682016040526175c2919081019061b623565b60015b617633573d8080156175f3576040519150601f19603f3d011682016040523d82523d6000602084013e6175f8565b606091505b506000805b50604051908082528060200260200182016040528015617627578160200160208202803683370190505b5094505050505061773a565b8051617641576000806175fd565b6000805b825181101561772b57600083828151811061765c57fe5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561769c57600080fd5b505afa1580156176b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906176d4919061b92e565b905082811115617722578092508382815181106176ed57fe5b602002602001015188878151811061770157fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101617645565b50505050600101617511565b50505b92915050565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561779457600080fd5b505afa1580156177a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906177cc919061b92e565b6040518263ffffffff1660e01b81526004016177e8919061c9aa565b60206040518083038186803b15801561780057600080fd5b505afa158015617814573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617838919061b190565b91508560200151516000141561784d57615ef3565b6000805b876020015151811015615ef05760028860200151828151811061787057fe5b60200260200101515110156178845761795e565b836001600160a01b0316637f9c0ecd620493e08a6020015184815181106178a757fe5b60200260200101518860018a5103815181106178bf57fe5b60200260200101516040518463ffffffff1660e01b81526004016178e492919061c8e9565b60206040518083038187803b1580156178fc57600080fd5b5086fa9350505050801561792d575060408051601f3d908101601f1916820190925261792a9181019061b92e565b60015b6179365761795e565b8281111561795c578092508860200151828151811061795157fe5b602002602001015193505b505b600101617851565b61796e61a578565b50604080516080810182523080825260006020830181905292820152606081019190915290565b806001600160a01b0316826001600160a01b031614156179d05760405162461bcd60e51b81526004016179c79061cb0e565b60405180910390fd5b5050565b604080516001808252818301909252606091829190816020015b6179f661a642565b8152602001906001900390816179ee5790505090506040518060a001604052808560000151815260200160008152602001600181526020018481526020016040518060200160405280600081525081525081600081518110617a5457fe5b60209081029190910101529392505050565b6040516303795fb160e11b81526000906001600160a01b038416906306f2bf6290617a9590859060040161c681565b60206040518083038186803b158015617aad57600080fd5b505afa158015617ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cb5919061b190565b6000806001600160a01b038516617afb5761103e565b6060856001600160a01b0316620249f08686604051602401617b1d919061c9aa565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051617b5b919061c675565b6000604051808303818686fa925050503d8060008114617b97576040519150601f19603f3d011682016040523d82523d6000602084013e617b9c565b606091505b5090925090508115617bbf5780806020019051810190617bbc919061b92e565b92505b50935093915050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401617bfe919061c9aa565b60a06040518083038186803b158015617c1657600080fd5b505afa158015617c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617c4e919061be54565b94509450505092506000620f424090508a604001516001600160a01b0316896001600160a01b03161415617d76576000617c8d8964e8d4a51000619823565b90506000617cb16b033b2e3c9fd0803ce8000000617cab8885619859565b90619823565b9050848110617cc95760009650505050505050614150565b6000617d58670de0b6b3a7640000617d528c6001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015617d1357600080fd5b505afa158015617d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617d4b919061b92e565b8690619823565b90619875565b90506000617d66848361989f565b9850614150975050505050505050565b8a604001516001600160a01b03168a6001600160a01b03161415617e76578784811115617dab57600095505050505050614150565b6000617dc76b033b2e3c9fd0803ce8000000617cab888561989f565b9050838111617ddf5760009650505050505050614150565b6000617e648a6001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015617e1d57600080fd5b505afa158015617e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617e55919061b92e565b670de0b6b3a764000090619859565b90506000617d6682617d528688619823565b5060009a9950505050505050505050565b600080600080600087806020019051810190617ea3919061b1e8565b9350935093509350816001600160a01b0316846001600160a01b03161415617f8d576040516351400f0b60e11b81526001600160a01b0384169063a2801e1690620493e090617ef6908a9060040161c9aa565b60206040518083038187803b158015617f0e57600080fd5b5086fa93505050508015617f3f575060408051601f3d908101601f19168201909252617f3c9181019061b92e565b60015b617f81573d808015617f6d576040519150601f19603f3d011682016040523d82523d6000602084013e617f72565b606091505b50600095505050505050613cb5565b9450613cb59350505050565b60405163ca19ebd960e01b81526001600160a01b0382169063ca19ebd990620493e090617ef69087908b9060040161c88e565b6000816001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b158015617ffb57600080fd5b505afa15801561800f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618033919061b190565b6001600160a01b03166321f8a7216040518163ffffffff1660e01b815260040161805c9061cb2b565b60206040518083038186803b15801561807457600080fd5b505afa158015618088573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061773a919061b190565b6000806180b8866198be565b905046600181141561814f5760405163dc703e7360e01b81526001600160a01b0383169063dc703e73906180f49089908990899060040161cc6f565b60606040518083038186803b15801561810c57600080fd5b505afa158015618120573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618144919061be11565b5090935061201a9050565b604051633d142a8d60e21b81526001600160a01b0383169063f450aa349061817f9089908990899060040161cc6f565b60606040518083038186803b15801561819757600080fd5b505afa1580156181ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906181cf919061be11565b509098975050505050505050565b60608251600214156181f5576146ce8585858561995a565b82516003141561820b576146ce85858585619aac565b60405162461bcd60e51b81526004016179c79061cb38565b6000805b82518110156182705760006001600160a01b031683828151811061824757fe5b60200260200101516001600160a01b0316141561826857600091505061131e565b600101618227565b50600192915050565b60606002835110158015618291575081516001018351145b6182ad5760405162461bcd60e51b81526004016179c79061cb48565b81516003028351601402016001600160401b03811180156182cd57600080fd5b506040519080825280601f01601f1916602001820160405280156182f8576020820181803683370190505b5090506020810160005b84518110156177375780156183a757600084600183038151811061832257fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561836257600080fd5b505afa158015618376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061839a919061bd93565b60e81b8352506003909101905b60008582815181106183b557fe5b602090810291909101015160601b835250601490910190600101618302565b602081015160009060609081906001600160e01b03198116631577da3360e01b1461840357600093505061842f565b8451600319810160048701908152956184249181016020019060240161b8b3565b600195509093509150505b9193909250565b6000828202831580159061845357508284828161844f57fe5b0414155b1561846257600091505061773a565b6706f05b59d3b200008101818110156184805760009250505061773a565b670de0b6b3a76400009004949350505050565b606081516001600160401b03811180156184ac57600080fd5b506040519080825280602002602001820160405280156184d6578160200160208202803683370190505b50905060005b8251811015613a91578260018285510303815181106184f757fe5b602002602001015182828151811061850b57fe5b6001600160a01b03909216602092830291909101909101526001016184dc565b606081516001600160401b038111801561854457600080fd5b5060405190808252806020026020018201604052801561856e578160200160208202803683370190505b50905060005b8251811015613a915782600182855103038151811061858f57fe5b60200260200101518282815181106185a357fe5b6001600160a01b0390921660209283029190910190910152600101618574565b6000806000858060200190518101906185dc919061b1ae565b915091506000858060200190518101906185f6919061b190565b90503063e8e4af0983858461860a8a619cf0565b6040518563ffffffff1660e01b8152600401618629949392919061c6fa565b60006040518083038186803b15801561864157600080fd5b505afa92505050801561867657506040513d6000823e601f3d908101601f19168201604052618673919081019061b87f565b60015b6186b7573d8080156186a4576040519150601f19603f3d011682016040523d82523d6000602084013e6186a9565b606091505b506000945050505050613cb5565b806000815181106186c457fe5b6020026020010151945050505050613cb5565b606081516001600160401b03811180156186f057600080fd5b5060405190808252806020026020018201604052801561871a578160200160208202803683370190505b50905081516000141561872c5761773a565b600061875d846000015185602001518560008151811061874857fe5b6020026020010151876040015163ffffffff16565b90508061876a575061773a565b60006187878560200151866000015184886040015163ffffffff16565b90508061879557505061773a565b60005b84518110156188e0576000805b6005811015618889576187cc8784815181106187bd57fe5b60200260200101518587619d31565b9450846187d857618889565b6187e761271561271087619d31565b9450846187f357618889565b600061881089602001518a60000151888c6040015163ffffffff16565b90508061881d5750618889565b80945087848151811061882c57fe5b602002602001015185106188805787848151811061884657fe5b602002602001015161271089868151811061885d57fe5b60200260200101518703028161886f57fe5b049250600583116188805750618889565b506001016187a5565b508015806188975750600581115b156188a257506188e0565b6188c08683815181106188b157fe5b60200260200101518486619d31565b8583815181106188cc57fe5b602090810291909101015250600101618798565b50505092915050565b604084015181516060919082816001600160401b038111801561890b57600080fd5b50604051908082528060200260200182016040528015618935578160200160208202803683370190505b50905087600001516001600160a01b0316876001600160a01b0316148015618972575087604001516001600160a01b0316866001600160a01b0316145b15618a3b5760005b82811015618a3057836001600160a01b031663b0e3890087838151811061899d57fe5b60200260200101516040518263ffffffff1660e01b81526004016189c1919061c9aa565b60206040518083038186803b1580156189d957600080fd5b505afa1580156189ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618a11919061b92e565b828281518110618a1d57fe5b602090810291909101015260010161897a565b509250611acf915050565b87604001516001600160a01b0316876001600160a01b0316148015618a6c575087516001600160a01b038781169116145b15618b2a5760005b82811015618a3057836001600160a01b031663bb2952fc878381518110618a9757fe5b60200260200101516040518263ffffffff1660e01b8152600401618abb919061c9aa565b60206040518083038186803b158015618ad357600080fd5b505afa158015618ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618b0b919061b92e565b828281518110618b1757fe5b6020908102919091010152600101618a74565b979650505050505050565b6000611acf83617d52618b4982600161989f565b618b538887619823565b90619859565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b815250604051618b97919061c675565b600060405180830381855afa9150503d8060008114618bd2576040519150601f19603f3d011682016040523d82523d6000602084013e618bd7565b606091505b5091509150818015618beb57506020815110155b15618bfe57618bfb816000619d89565b92505b5050919050565b600080606085806020019051810190618c1e919061b2f0565b90925090506000606030637b6b3ca560e11b8585618c3b8a619cf0565b604051602401618c4d9392919061c83a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051618c8b919061c675565b600060405180830381855afa9150503d8060008114618cc6576040519150601f19603f3d011682016040523d82523d6000602084013e618ccb565b606091505b509150915081618ce2576000945050505050613cb5565b80806020019051810190618cf6919061b87f565b600081518110618d0257fe5b60200260200101519450505050509392505050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401618d4d919061c9aa565b60a06040518083038186803b158015618d6557600080fd5b505afa158015618d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618d9d919061be54565b945094505050925089604001516001600160a01b0316886001600160a01b03161415618eb45760008790506000618e4d886001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015618e0657600080fd5b505afa158015618e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618e3e919061b92e565b670de0b6b3a76400009061989f565b90506000618e6782617d5285670de0b6b3a7640000619823565b90506000618e856b033b2e3c9fd0803ce8000000617cab8985619859565b9050858110618e9e576000975050505050505050614150565b6000617d666001618b538564e8d4a51000619875565b89604001516001600160a01b0316896001600160a01b03161415618f99576000618ee38864e8d4a51000619823565b90506000618f23886001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015617e1d57600080fd5b90506000618f3d670de0b6b3a7640000617d528585619823565b905085811115618f565760009650505050505050614150565b6000618f726b033b2e3c9fd0803ce8000000617cab898561989f565b9050848111618f8b576000975050505050505050614150565b509550614150945050505050565b5060009998505050505050505050565b6000806000606086806020019051810190618fc4919061b249565b919450925090506000606030634092e6b160e01b868686618fe48c619cf0565b604051602401618ff7949392919061c761565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051619035919061c675565b600060405180830381855afa9150503d8060008114619070576040519150601f19603f3d011682016040523d82523d6000602084013e619075565b606091505b50915091508161908d57600095505050505050613cb5565b808060200190518101906190a1919061b87f565b6000815181106190ad57fe5b6020026020010151955050505050509392505050565b815160609060206002840102810390826190de868484619d95565b90506190ed8160006020619e2b565b80806020019051810190614150919061b87f565b60005b8151811015619147576000600182845103036020028451039050600083838151811061912c57fe5b60209081029190910101519185019190915250600101619104565b505050565b80516000906001600160a01b038616635e1e632584600019840184811061916f57fe5b602002602001015187876040518463ffffffff1660e01b81526004016191979392919061cbff565b604080518083038186803b1580156191ae57600080fd5b505afa1580156191c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618b2a919061bdb1565b6000806191f161a600565b85806020019051810190619205919061bb5a565b9150915060008580602001905181019061921f919061bb3c565b9050600060603063205e01d760e11b85878661923a8c619cf0565b604051602401618ff7949392919061cb58565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b815260040161928092919061c6aa565b60006040518083038186803b15801561929857600080fd5b505afa1580156192ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526192d4919081019061b623565b90506001915080516000141561936d576040516315e8a07760e21b81526001600160a01b038816906357a281dc90619312908790899060040161c6aa565b60006040518083038186803b15801561932a57600080fd5b505afa15801561933e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052619366919081019061b623565b9050600091505b80518610619382576000809250925050615ef3565b80868151811061938e57fe5b602002602001015192505094509492505050565b600080600080868060200190518101906193bc919061b2ad565b925092509250801561946057604051633cd0243b60e11b81526001600160a01b038316906379a0487690620493e0906193fc906000908a9060040161c68f565b604080518083038187803b15801561941357600080fd5b5086fa93505050508015619444575060408051601f3d908101601f191682019092526194419181019061bde1565b60015b6194545760009350505050613cb5565b509350613cb592505050565b6040516366410a2160e01b81526001600160a01b038316906366410a2190620493e0906193fc906000908a9060040161c68f565b60008061949f61a600565b858060200190518101906194b3919061bac9565b60408051600180825281830190925292945090925060609190816020015b6194d961a600565b8152602001906001900390816194d157905050905081816000815181106194fc57fe5b60209081029190910101526040516326207f2d60e21b81526001600160a01b03841690639881fcb490619535908890859060040161cc4f565b60006040518083038186803b15801561954d57600080fd5b505afa158015619561573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052619589919081019061b87f565b60018151811061959557fe5b602002602001015193505050509392505050565b6000806000858060200190518101906195c2919061b1ae565b915091506000858060200190518101906195dc919061b190565b9050306330d6570d83858461860a8a619cf0565b6000806060846001600160a01b03166370a0823160e01b85604051602401619618919061c681565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051619656919061c675565b600060405180830381855afa9150503d8060008114619691576040519150601f19603f3d011682016040523d82523d6000602084013e619696565b606091505b50915091508180156196aa57506020815110155b15617737576136e6816000619d89565b600080600080868060200190518101906196d4919061baf9565b91945092509050600060603063849489a160e01b8686866196f48c619cf0565b604051602401618ff7949392919061ca5e565b6000806060856001600160a01b031663dd62ed3e60e01b868660405160240161973192919061c6aa565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161976f919061c675565b600060405180830381855afa9150503d80600081146197aa576040519150601f19603f3d011682016040523d82523d6000602084013e6197af565b606091505b50915091508180156197c357506020815110155b156122fd57614150816000619d89565b6000806000858060200190518101906197ec919061b1ae565b9150915060008086806020019051810190619807919061b1ae565b9150915061981784848389614ed1565b98975050505050505050565b6000826198325750600061773a565b8282028284828161983f57fe5b0414613cb557613cb561985460018686619e36565b619e90565b600082820183811015613cb557613cb561985460008686619e36565b60008161988b5761988b61985460038585619e36565b600082848161989657fe5b04949350505050565b6000828211156198b8576198b861985460028585619e36565b50900390565b6000816001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b1580156198f957600080fd5b505afa15801561990d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190619931919061b190565b6001600160a01b03166321f8a7216040518163ffffffff1660e01b815260040161805c9061cb1e565b6040805160028082526060828101909352816020015b606081526020019060019003908161997057905050905061998f61a674565b619a0a6040518060a00160405280886001600160a01b03168152602001876001600160a01b03168152602001866000815181106199c857fe5b60200260200101516001600160a01b03168152602001866001815181106199eb57fe5b60200260200101516001600160a01b0316815260200185815250619e98565b5090506000805b6002811015610e95576000838260028110619a2857fe5b602002015160408051600180825281830190925291925081602001602082028036833701905050858481518110619a5b57fe5b602002602001018190525080858481518110619a7357fe5b6020026020010151600081518110619a8757fe5b6001600160a01b03909216602092830291909101909101525060019182019101619a11565b60408051600480825260a08201909252606091816020015b6060815260200190600190039081619ac4579050509050619ae361a674565b619aeb61a674565b619b666040518060a00160405280896001600160a01b03168152602001886001600160a01b0316815260200187600081518110619b2457fe5b60200260200101516001600160a01b0316815260200187600181518110619b4757fe5b60200260200101516001600160a01b0316815260200186815250619e98565b91509150619b7261a674565b619bfd6040518060a001604052808a6001600160a01b03168152602001896001600160a01b0316815260200188600181518110619bab57fe5b60200260200101516001600160a01b0316815260200188600281518110619bce57fe5b60200260200101516001600160a01b0316815260200184600060028110619bf157fe5b60200201519052619e98565b5090506000805b60028110156116ab5760005b6002811015619ce757604080516002808252606082018352909160208301908036833701905050878481518110619c4357fe5b60200260200101819052506060878481518110619c5c57fe5b60200260200101519050868360028110619c7257fe5b602002015181600081518110619c8457fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848260028110619cb057fe5b602002015181600181518110619cc257fe5b6001600160a01b03909216602092830291909101909101525060019283019201619c10565b50600101619c04565b604080516001808252818301909252606091602080830190803683370190505090508181600081518110619d2057fe5b602002602001018181525050919050565b6000831580619d3e575081155b80619d47575082155b15619d5457506000613cb5565b83820282858281619d6157fe5b0414619d71576000915050613cb5565b8360018503820181619d7f57fe5b0495945050505050565b6000613cb5838361a251565b606081831115619dae57619dae6198546000858561a27b565b8351821115619dc757619dc7619854600184875161a27b565b8282036001600160401b0381118015619ddf57600080fd5b506040519080825280601f01601f191660200182016040528015619e0a576020820181803683370190505b509050613cb5619e198261a29a565b84619e238761a29a565b01835161a2a0565b61914783838361a345565b606063e946c1bb60e01b848484604051602401619e559392919061ca6c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b619ea061a674565b619ea861a674565b6040805160028082526060808301845292602083019080368337019050509050836040015181600081518110619eda57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050836060015181600181518110619f0c57fe5b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252606091816020016020820280368337019050509050846080015181600081518110619f5b57fe5b602002602001018181525050619f6f61a692565b5060408051608081018252606481526101f46020820152610bb891810191909152612710606082015260005b600481101561a24857600087600001516001600160a01b0316631698ee8289604001518a60600151868660048110619fcf57fe5b60200201516040518463ffffffff1660e01b8152600401619ff29392919061c7ca565b60206040518083038186803b15801561a00a57600080fd5b505afa15801561a01e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061a042919061ba89565b905061a04d8161a36c565b61a057575061a240565b60408051600180825281830190925260609160208083019080368337019050509050818160008151811061a08757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050606061a0b38783618279565b905089602001516001600160a01b031663551e2bdf6206ddd08c60000151848a6040518563ffffffff1660e01b815260040161a0f19392919061c9c6565b60006040518083038187803b15801561a10957600080fd5b5086fa9350505050801561a11b575060015b61a23c573d80801561a149576040519150601f19603f3d011682016040523d82523d6000602084013e61a14e565b606091505b506000606061a15c836183d4565b5091509150811561a238578a518151829060009061a17657fe5b6020026020010151111561a1d6578a516020808d01919091528c516001600160a01b0316908d01528051819060009061a1ab57fe5b60200260200101518b60006002811061a1c057fe5b60200201526001600160a01b0386168c5261a238565b8a600160200201518160008151811061a1eb57fe5b6020026020010151111561a238578060008151811061a20657fe5b60200260200101518b60016002811061a21b57fe5b6020020152858c60016001600160a01b0390921660209290920201525b5050505b5050505b600101619f9b565b50505050915091565b6000816020018351101561a2725761a272619854600585518560200161a27b565b50016020015190565b6060632800659560e01b848484604051602401619e559392919061ca87565b60200190565b602081101561a2ca576001816020036101000a038019835116818551168082178652505050619147565b8282141561a2d757619147565b8282111561a3115760208103905080820181840181515b8285101561a30957845186526020958601959094019361a2ee565b905250619147565b60208103905080820181840183515b8186121561a33c5782518252601f19928301929091019061a320565b85525050505050565b816020018351101561a3645761a364619854600585518560200161a27b565b910160200152565b6000813b8061a37f57600091505061131e565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561a3b957600080fd5b505afa15801561a3cd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061a3f1919061b190565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161a41c919061c681565b60206040518083038186803b15801561a43457600080fd5b505afa15801561a448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061a46c919061b92e565b61a4785750600061131e565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561a4b157600080fd5b505afa15801561a4c5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061a4e9919061b190565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161a514919061c681565b60206040518083038186803b15801561a52c57600080fd5b505afa15801561a540573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061a564919061b92e565b61a5705750600061131e565b506001919050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051808201909152606081526000602082015290565b604051806040016040528060008152602001606081525090565b604080516060810182526000808252602082018190529181019190915290565b6040805160608101909152600080825260208201908152600060209091015290565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b803561773a8161cebd565b805161773a8161cebd565b600082601f83011261a6d757600080fd5b813561a6ea61a6e58261cd47565b61cd21565b9150818183526020840193506020810190508385602084028201111561a70f57600080fd5b60005b8381101561a73b578161a725888261a6b0565b845250602092830192919091019060010161a712565b5050505092915050565b600082601f83011261a75657600080fd5b815161a76461a6e58261cd47565b9150818183526020840193506020810190508385602084028201111561a78957600080fd5b60005b8381101561a73b578161a79f888261a6bb565b845250602092830192919091019060010161a78c565b600082601f83011261a7c657600080fd5b813561a7d461a6e58261cd47565b81815260209384019390925082018360005b8381101561a73b578135860161a7fc888261a6c6565b845250602092830192919091019060010161a7e6565b60008083601f84011261a82457600080fd5b5081356001600160401b0381111561a83b57600080fd5b60208301915083602082028301111561a85357600080fd5b9250929050565b600082601f83011261a86b57600080fd5b813561a87961a6e58261cd47565b81815260209384019390925082018360005b8381101561a73b578135860161a8a1888261abf1565b845250602092830192919091019060010161a88b565b600082601f83011261a8c857600080fd5b813561a8d661a6e58261cd47565b9150818183526020840193506020810190508385602084028201111561a8fb57600080fd5b60005b8381101561a73b578161a911888261ac37565b845250602092830192919091019060010161a8fe565b600082601f83011261a93857600080fd5b815161a94661a6e58261cd47565b9150818183526020840193506020810190508385602084028201111561a96b57600080fd5b60005b8381101561a73b578161a981888261abd0565b845250602092830192919091019060010161a96e565b600082601f83011261a9a857600080fd5b813561a9b661a6e58261cd47565b81815260209384019390925082018360005b8381101561a73b578135860161a9de888261ad12565b845250602092830192919091019060010161a9c8565b600082601f83011261aa0557600080fd5b813561aa1361a6e58261cd47565b915081818352602084019350602081019050838561018084028201111561aa3957600080fd5b60005b8381101561a73b578161aa4f888261aecf565b845250602090920191610180919091019060010161aa3c565b600082601f83011261aa7957600080fd5b813561aa8761a6e58261cd47565b9150818183526020840193506020810190508385608084028201111561aaac57600080fd5b60005b8381101561a73b578161aac2888261b072565b8452506020909201916080919091019060010161aaaf565b600082601f83011261aaeb57600080fd5b813561aaf961a6e58261cd47565b9150818183526020840193506020810190508385602084028201111561ab1e57600080fd5b60005b8381101561a73b578161ab34888261abc5565b845250602092830192919091019060010161ab21565b600082601f83011261ab5b57600080fd5b815161ab6961a6e58261cd47565b9150818183526020840193506020810190508385602084028201111561ab8e57600080fd5b60005b8381101561a73b578161aba4888261abd0565b845250602092830192919091019060010161ab91565b805161773a8161ced1565b803561773a8161ceda565b805161773a8161ceda565b803561773a8161cee3565b805161773a8161cee3565b600082601f83011261ac0257600080fd5b813561ac1061a6e58261cd67565b9150808252602083016020830185838301111561ac2c57600080fd5b6188e083828461ce5a565b803561773a8161ceec565b805161773a8161ceec565b805161773a8161cef5565b803561773a8161cf02565b803561773a8161cf0f565b805161773a8161cf0f565b60006040828403121561ac8b57600080fd5b61ac95604061cd21565b9050600061aca3848461abc5565b825250602061acb48484830161a6b0565b60208301525092915050565b60006040828403121561acd257600080fd5b61acdc604061cd21565b9050600061acea848461ac37565b82525060208201356001600160401b0381111561ad0657600080fd5b61acb48482850161a7b5565b600060a0828403121561ad2457600080fd5b61ad2e60a061cd21565b9050600061ad3c848461abc5565b825250602061ad4d8484830161abc5565b602083015250604061ad618482850161abc5565b604083015250606061ad758482850161abc5565b60608301525060808201356001600160401b0381111561ad9457600080fd5b61ada08482850161abf1565b60808301525092915050565b60006060828403121561adbe57600080fd5b61adc8606061cd21565b9050600061add6848461a6b0565b825250602061ade78484830161abdb565b602083015250604061adfb8482850161abdb565b60408301525092915050565b60006060828403121561ae1957600080fd5b61ae23606061cd21565b9050600061ae31848461a6bb565b825250602061ae428484830161abe6565b602083015250604061adfb8482850161abe6565b60006040828403121561ae6857600080fd5b61ae72604061cd21565b9050600061aca3848461a6b0565b60006060828403121561ae9257600080fd5b61ae9c606061cd21565b9050600061aeaa848461a6b0565b825250602061aebb8484830161a6b0565b602083015250604061adfb8482850161a6b0565b6000610180828403121561aee257600080fd5b61aeed61018061cd21565b9050600061aefb848461ac37565b825250602061af0c8484830161ac37565b602083015250604061af208482850161b130565b604083015250606061af348482850161b130565b606083015250608061af488482850161b130565b60808301525060a061af5c8482850161a6b0565b60a08301525060c061af708482850161a6b0565b60c08301525060e061af848482850161a6b0565b60e08301525061010061af998482850161a6b0565b6101008301525061012061afaf8482850161abc5565b6101208301525061014061afc58482850161b151565b6101408301525061016061afdb8482850161abc5565b6101608301525092915050565b60006060828403121561affa57600080fd5b61b004606061cd21565b9050600061b012848461a6b0565b825250602061aebb8484830161abc5565b60006060828403121561b03557600080fd5b61b03f606061cd21565b9050600061b04d848461abd0565b825250602061b05e8484830161ac4d565b602083015250604061adfb8482850161b13b565b60006080828403121561b08457600080fd5b61b08e608061cd21565b9050600061b09c848461ac58565b825250602061b0ad8484830161b15c565b602083015250604061b0c18482850161abc5565b604083015250606061b0d58482850161abc5565b60608301525092915050565b60006060828403121561b0f357600080fd5b61b0fd606061cd21565b9050600061b10b848461a6bb565b825250602061b11c8484830161a6bb565b602083015250604061adfb8482850161abba565b803561773a8161cf18565b805161773a8161cf18565b805161773a8161cf21565b803561773a8161cf2a565b803561773a8161cf33565b805161773a8161cf33565b60006020828403121561b18457600080fd5b6000611acf848461a6b0565b60006020828403121561b1a257600080fd5b6000611acf848461a6bb565b6000806040838503121561b1c157600080fd5b600061b1cd858561a6bb565b925050602061b1de8582860161a6bb565b9150509250929050565b6000806000806080858703121561b1fe57600080fd5b600061b20a878761a6bb565b945050602061b21b8782880161a6bb565b935050604061b22c8782880161a6bb565b925050606061b23d8782880161a6bb565b91505092959194509250565b60008060006060848603121561b25e57600080fd5b600061b26a868661a6bb565b935050602061b27b8682870161a6bb565b92505060408401516001600160401b0381111561b29757600080fd5b61b2a38682870161a745565b9150509250925092565b60008060006060848603121561b2c257600080fd5b600061b2ce868661a6bb565b935050602061b2df8682870161a6bb565b925050604061b2a38682870161abba565b6000806040838503121561b30357600080fd5b600061b30f858561a6bb565b92505060208301516001600160401b0381111561b32b57600080fd5b61b1de8582860161a745565b60008060008060008060c0878903121561b35057600080fd5b600061b35c898961a6b0565b965050602061b36d89828a0161a6b0565b955050604061b37e89828a0161a6b0565b945050606061b38f89828a0161a6b0565b935050608061b3a089828a0161a6b0565b92505060a08701356001600160401b0381111561b3bc57600080fd5b61b3c889828a0161aada565b9150509295509295509295565b600080600080600060a0868803121561b3ed57600080fd5b600061b3f9888861a6b0565b955050602061b40a8882890161a6b0565b945050604061b41b8882890161a6b0565b935050606061b42c8882890161a6b0565b92505060808601356001600160401b0381111561b44857600080fd5b61b4548882890161aada565b9150509295509295909350565b6000806000806080858703121561b47757600080fd5b600061b483878761a6b0565b945050602061b4948782880161a6b0565b935050604061b4a58782880161a6b0565b92505060608501356001600160401b0381111561b4c157600080fd5b61b23d8782880161aada565b6000806000806080858703121561b4e357600080fd5b600061b4ef878761a6b0565b945050602061b5008782880161a6b0565b935050604061b5118782880161a6b0565b925050606061b23d8782880161abc5565b6000806000806080858703121561b53857600080fd5b600061b544878761a6b0565b945050602061b5558782880161a6b0565b93505060408501356001600160401b0381111561b57157600080fd5b61b4a58782880161a6c6565b60008060006060848603121561b59257600080fd5b600061b59e868661a6b0565b93505060208401356001600160401b0381111561b5ba57600080fd5b61b5c68682870161a6c6565b92505060408401356001600160401b0381111561b5e257600080fd5b61b2a38682870161aada565b600080600080600060a0868803121561b60657600080fd5b600061b612888861a6b0565b955050602061b40a8882890161abc5565b60006020828403121561b63557600080fd5b81516001600160401b0381111561b64b57600080fd5b611acf8482850161a745565b6000806020838503121561b66a57600080fd5b82356001600160401b0381111561b68057600080fd5b61b68c8582860161a812565b92509250509250929050565b60008060006060848603121561b6ad57600080fd5b83356001600160401b0381111561b6c357600080fd5b61b6cf8682870161a85a565b93505060208401356001600160401b0381111561b6eb57600080fd5b61b6f78682870161a85a565b925050604061b2a38682870161abc5565b60006020828403121561b71a57600080fd5b81356001600160401b0381111561b73057600080fd5b611acf8482850161a8b7565b6000806040838503121561b74f57600080fd5b82356001600160401b0381111561b76557600080fd5b61b7718582860161a8b7565b925050602061b1de8582860161a6b0565b60008060006060848603121561b79757600080fd5b83356001600160401b0381111561b7ad57600080fd5b61b7b98682870161a8b7565b935050602061b7ca8682870161a6b0565b925050604061b2a38682870161a6b0565b60006020828403121561b7ed57600080fd5b81516001600160401b0381111561b80357600080fd5b611acf8482850161a927565b60008060006060848603121561b82457600080fd5b83356001600160401b0381111561b83a57600080fd5b61b8468682870161a9f4565b93505060208401356001600160401b0381111561b86257600080fd5b61b86e8682870161aa68565b925050604061b2a38682870161ac37565b60006020828403121561b89157600080fd5b81516001600160401b0381111561b8a757600080fd5b611acf8482850161ab4a565b6000806040838503121561b8c657600080fd5b82516001600160401b0381111561b8dc57600080fd5b61b8e88582860161ab4a565b92505060208301516001600160401b0381111561b90457600080fd5b61b1de8582860161ab4a565b60006020828403121561b92257600080fd5b6000611acf848461abba565b60006020828403121561b94057600080fd5b6000611acf848461abd0565b6000806000806080858703121561b96257600080fd5b600061b96e878761ac37565b94505060208501356001600160401b0381111561b98a57600080fd5b61b5558782880161a997565b6000806000806080858703121561b9ac57600080fd5b600061b9b8878761ac37565b945050602061b9c98782880161ac37565b935050604061b4a58782880161ac37565b6000806000806080858703121561b9f057600080fd5b600061b544878761ac37565b6000806000806080858703121561ba1257600080fd5b600061ba1e878761ac37565b945050602061ba2f8782880161abc5565b935050604061b4a58782880161abc5565b60008060006060848603121561ba5557600080fd5b600061ba61868661ac37565b93505060208401356001600160401b0381111561ba7d57600080fd5b61b5c68682870161a8b7565b60006020828403121561ba9b57600080fd5b6000611acf848461ac42565b6000806000806080858703121561babd57600080fd5b600061b483878761ac37565b6000806080838503121561badc57600080fd5b600061bae8858561ac42565b925050602061b1de8582860161b0e1565b60008060006060848603121561bb0e57600080fd5b600061bb1a868661ac42565b935050602061bb2b8682870161a6bb565b925050604061b2a38682870161a6bb565b60006020828403121561bb4e57600080fd5b6000611acf848461ac6e565b6000806080838503121561bb6d57600080fd5b600061bb79858561ac6e565b925050602061b1de8582860161ae07565b60008060008060a0858703121561bba057600080fd5b600061bbac878761ac79565b945050604061bbbd8782880161a6b0565b935050606061bbce8782880161a6b0565b92505060808501356001600160401b0381111561b4c157600080fd5b6000806000806080858703121561bc0057600080fd5b84356001600160401b0381111561bc1657600080fd5b61b4838782880161acc0565b60008060008060c0858703121561bc3857600080fd5b600061bc44878761adac565b945050606061bc558782880161ac63565b935050608061bc668782880161ac63565b92505060a08501356001600160401b0381111561b4c157600080fd5b60008060008060a0858703121561bc9857600080fd5b600061bbac878761ae56565b60008060008060c0858703121561bcba57600080fd5b600061bcc6878761ae80565b945050606061bcd78782880161a6b0565b935050608061bc668782880161a6b0565b6000806000610220848603121561bcfe57600080fd5b600061bd0a868661aecf565b93505061018061bd1c8682870161b072565b92505061020061b2a38682870161ac37565b60008060008060c0858703121561bd4457600080fd5b600061bcc6878761afe8565b600080600060a0848603121561bd6557600080fd5b600061bd71868661b023565b935050606061bd828682870161b13b565b925050608061b2a38682870161abba565b60006020828403121561bda557600080fd5b6000611acf848461b146565b6000806040838503121561bdc457600080fd5b600061bdd0858561abd0565b925050602061b1de8582860161abba565b6000806040838503121561bdf457600080fd5b600061be00858561abd0565b925050602061b1de8582860161abd0565b60008060006060848603121561be2657600080fd5b600061be32868661abd0565b935050602061be438682870161abd0565b925050604061b2a38682870161abd0565b600080600080600060a0868803121561be6c57600080fd5b600061be78888861abd0565b955050602061be898882890161abd0565b945050604061be9a8882890161abd0565b935050606061beab8882890161abd0565b925050608061b4548882890161abd0565b60006020828403121561bece57600080fd5b6000611acf848461b167565b600061bee6838361bf41565b505060200190565b600061bee6838361c1c6565b6000613cb5838361c1f7565b6000613cb5838361c393565b6000613cb5838361c3f8565b600061bf2a838361c60d565b505060600190565b61bf3b8161ce23565b82525050565b61bf3b8161cd9b565b600061bf558261cd8e565b61bf5f818561cd92565b935061bf6a8361a29a565b8060005b8381101561bf9857815161bf82888261beda565b975061bf8d8361a29a565b92505060010161bf6e565b509495945050505050565b600061bfae8261cd8e565b61bfb8818561cd92565b935061bfc38361a29a565b8060005b8381101561bf9857815161bfdb888261beee565b975061bfe68361a29a565b92505060010161bfc7565b600061bffc8261cd8e565b61c006818561cd92565b93508360208202850161c0188561a29a565b8060005b8581101561c052578484038952815161c035858261befa565b945061c0408361a29a565b60209a909a019992505060010161c01c565b5091979650505050505050565b600061c06a8261cd8e565b61c074818561cd92565b93508360208202850161c0868561a29a565b8060005b8581101561c052578484038952815161c0a3858261bf06565b945061c0ae8361a29a565b60209a909a019992505060010161c08a565b600061c0cb8261cd8e565b61c0d5818561cd92565b93508360208202850161c0e78561a29a565b8060005b8581101561c052578484038952815161c104858261bf12565b945061c10f8361a29a565b60209a909a019992505060010161c0eb565b600061c12c8261cd8e565b61c136818561cd92565b935061c1418361a29a565b8060005b8381101561bf9857815161c159888261bf1e565b975061c1648361a29a565b92505060010161c145565b600061c17a8261cd8e565b61c184818561cd92565b935061c18f8361a29a565b8060005b8381101561bf9857815161c1a7888261beee565b975061c1b28361a29a565b92505060010161c193565b61bf3b8161cda6565b61bf3b8161cdab565b61bf3b8161cdae565b600061c1e4838561131e565b935061c1f183858461ce5a565b50500190565b600061c2028261cd8e565b61c20c818561cd92565b935061c21c81856020860161ce66565b61c2258161ce92565b9093019392505050565b600061c23a8261cd8e565b61c244818561131e565b935061c25481856020860161ce66565b9290920192915050565b61bf3b8161cdbb565b61bf3b8161ce2e565b61bf3b8161ce39565b61bf3b8161ce44565b61bf3b8161cde4565b61bf3b8161ce4f565b600061c2a160258361cd92565b7f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e8152642fa820a4a960d91b602082015260400192915050565b6822bc31b430b733b2b960b91b9052565b680a6f2dce8d0cae8d2f60bb1b9052565b600061c30a602e8361cd92565b7f556e6973776170563353616d706c65722f756e737570706f7274656420746f6b81526d0cadc40e0c2e8d040d8cadccee8d60931b602082015260400192915050565b600061c35a60248361cd92565b7f556e69737761705633436f6d6d6f6e2f696e76616c69642070617468206c656e8152636774687360e01b602082015260400192915050565b805160009060a084019061c3a7858261c1c6565b50602083015161c3ba602086018261c1c6565b50604083015161c3cd604086018261c1c6565b50606083015161c3e0606086018261c1c6565b50608083015184820360808601526136e6828261c1f7565b805160408084526000919084019061c410828261c1f7565b91505060208301516111b1602086018261c1bd565b8051606083019061c436848261bf41565b50602082015161c449602085018261c1cf565b50604082015161c45c604085018261c1cf565b50505050565b8051608083019061c473848261bf41565b50602082015161c486602085018261c1bd565b50604082015161c499604085018261bf41565b50606082015161c45c606085018261c1bd565b8051600090604084019061c4c0858261c1c6565b50602083015184820360208601526136e6828261c1f7565b805161018083019061c4ea848261c25e565b50602082015161c4fd602085018261c25e565b50604082015161c510604085018261c644565b50606082015161c523606085018261c644565b50608082015161c536608085018261c644565b5060a082015161c54960a085018261bf41565b5060c082015161c55c60c085018261bf41565b5060e082015161c56f60e085018261bf41565b5061010082015161c58461010085018261bf41565b5061012082015161c59961012085018261c1c6565b5061014082015161c5ae61014085018261c656565b5061016082015161c45c61016085018261c1c6565b8051608083019061c5d4848261c267565b50602082015161c5e7602085018261c65f565b50604082015161c5fa604085018261c1c6565b50606082015161c45c606085018261c1c6565b8051606083019061c61e848261bf41565b50602082015161c631602085018261bf41565b50604082015161c45c604085018261c1bd565b61bf3b8161cdea565b61bf3b8161ce09565b61bf3b8161ce11565b61bf3b8161ce1d565b6000611acf82848661c1d8565b6000613cb5828461c22f565b6020810161773a828461bf41565b6040810161c69d828561bf32565b613cb5602083018461c1c6565b6040810161c6b8828561bf41565b613cb5602083018461bf41565b6080810161c6d3828761bf41565b61c6e0602083018661bf41565b61c6ed604083018561bf41565b6136e6606083018461bf41565b6080810161c708828761bf41565b61c715602083018661bf41565b61c722604083018561bf41565b8181036060830152614150818461c16f565b6060810161c742828661bf41565b61c74f602083018561bf41565b81810360408301526136e6818461bf4a565b6080810161c76f828761bf41565b61c77c602083018661bf41565b818103604083015261c78e818561bf4a565b90508181036060830152614150818461c16f565b6060810161c7b0828661bf41565b61c7bd602083018561bf41565b611acf604083018461c1bd565b6060810161c7d8828661bf41565b61c7e5602083018561bf41565b611acf604083018461c64d565b6060810161c800828661bf41565b61c80d602083018561bf41565b611acf604083018461c1c6565b6040810161c828828561bf41565b8181036020830152611acf818461bf4a565b6060810161c848828661bf41565b818103602083015261c85a818561bf4a565b905081810360408301526136e6818461c16f565b6040810161c87c828561bf41565b8181036020830152611acf818461c16f565b6040810161c69d828561bf41565b6060810161c8aa828661bf41565b61c8b7602083018561c1c6565b611acf604083018461c28b565b6040808252810161c8d5818561bf4a565b90508181036020830152611acf818461c16f565b6040808252810161c8fa818561bf4a565b9050613cb5602083018461c1c6565b6040808252810161c8d5818561bfa3565b6060808252810161c92b818661bff1565b9050818103602083015261c85a818561c16f565b60208082528101613cb5818461c0c0565b60208082528101613cb5818461c16f565b6020810161773a828461c1bd565b6060810161c97d828661c1bd565b61c98a602083018561bf41565b81810360408301526136e6818461c16f565b6040810161c87c828561c1bd565b6020810161773a828461c1c6565b6040810161c87c828561c25e565b6060810161c9d4828661c25e565b818103602083015261c85a818561c1f7565b6060810161c9f4828661c25e565b61ca01602083018561bf41565b611acf604083018461bf41565b6080810161ca1c828761c25e565b61ca29602083018661bf41565b61ca36604083018561bf41565b6136e6606083018461c1c6565b6080810161ca51828561c25e565b613cb5602083018461c60d565b6080810161c708828761c25e565b6060810161ca7a828661c267565b61c80d602083018561c1c6565b6060810161ca7a828661c270565b60e0810161caa3828761c279565b818103602083015261cab5818661c05f565b9050818103604083015261cac9818561bf4a565b90506136e6606083018461c462565b6060810161cae6828661c282565b61c80d602083018561c282565b6080810161cb01828561c282565b613cb5602083018461c425565b6020808252810161773a8161c294565b6020810161131e8261c2db565b6020810161131e8261c2ec565b6020808252810161773a8161c2fd565b6020808252810161773a8161c34d565b60c0810161cb66828761c425565b61cb73606083018661c282565b61cb80608083018561c282565b81810360a0830152614150818461c16f565b6060808252810161cba3818661c4ac565b9050818103602083015261c85a818561c4ac565b610200810161cbc6828561c4d8565b613cb561018083018461c5c3565b610220810161cbe3828661c4d8565b61cbf161018083018561c5c3565b611acf61020083018461c25e565b6060810161c9f4828661c1c6565b6040810161c828828561c1c6565b6060810161cc29828661c1c6565b818103602083015261cc3b818561bf4a565b905081810360408301526136e6818461bf4a565b6040810161cc5d828561c1c6565b8181036020830152611acf818461c121565b6060810161ca7a828661c1c6565b60c0810161cc8b828961c1c6565b61cc98602083018861c1c6565b61cca5604083018761c1c6565b61ccb2606083018661c1c6565b61ccbf608083018561c1c6565b618b2a60a083018461c1c6565b6000808335601e193685900301811261cce457600080fd5b8084019250823591506001600160401b0382111561cd0157600080fd5b60208301925060018202360383131561cd1957600080fd5b509250929050565b6040518181016001600160401b038111828210171561cd3f57600080fd5b604052919050565b60006001600160401b0382111561cd5d57600080fd5b5060209081020190565b60006001600160401b0382111561cd7d57600080fd5b506020601f91909101601f19160190565b5190565b90815260200190565b600061773a8261cdfd565b151590565b90565b6001600160e01b03191690565b600061773a8261cd9b565b8061131e8161ce9c565b8061131e8161cea9565b8061131e8161ceb3565b600f0b90565b6001600160801b031690565b61ffff1690565b6001600160a01b031690565b62ffffff1690565b6001600160401b031690565b60ff1690565b600061773a8261cdbb565b600061773a8261cdc6565b600061773a8261cdd0565b600061773a8261cdda565b600061773a8261cdf6565b82818337506000910152565b60005b8381101561ce8157818101518382015260200161ce69565b8381111561c45c5750506000910152565b601f01601f191690565b6004811061cea657fe5b50565b6008811061cea657fe5b6002811061cea657fe5b61cec68161cd9b565b811461cea657600080fd5b61cec68161cda6565b61cec68161cdab565b61cec68161cdae565b61cec68161cdbb565b6005811061cea657600080fd5b6004811061cea657600080fd5b61cec68161cde4565b61cec68161cdea565b61cec68161ce09565b61cec68161ce11565b61cec68161ce1d56fea26469706673582212209823b1d0ec73a395bc5ac48f93cc2c0218a5b102b3c4884ca302a47d248ee0c064736f6c634300060c0033';
    public static contractName = 'ERC20BridgeSampler';
    private readonly _methodABIIndex: { [name: string]: number } = {};
    public static async deployFrom0xArtifactAsync(
        artifact: ContractArtifact | SimpleContractArtifact,
        supportedProvider: SupportedProvider,
        txDefaults: Partial<TxData>,
        logDecodeDependencies: { [contractName: string]: ContractArtifact | SimpleContractArtifact },
    ): Promise<ERC20BridgeSamplerContract> {
        assert.doesConformToSchema('txDefaults', txDefaults, schemas.txDataSchema);
        if (artifact.compilerOutput === undefined) {
            throw new Error('Compiler output not found in the artifact file');
        }
        const provider = providerUtils.standardizeOrThrow(supportedProvider);
        const bytecode = artifact.compilerOutput.evm.bytecode.object;
        const abi = artifact.compilerOutput.abi;
        const logDecodeDependenciesAbiOnly: { [contractName: string]: ContractAbi } = {};
        if (Object.keys(logDecodeDependencies) !== undefined) {
            for (const key of Object.keys(logDecodeDependencies)) {
                logDecodeDependenciesAbiOnly[key] = logDecodeDependencies[key].compilerOutput.abi;
            }
        }
        return ERC20BridgeSamplerContract.deployAsync(
            bytecode,
            abi,
            provider,
            txDefaults,
            logDecodeDependenciesAbiOnly,
        );
    }

    public static async deployWithLibrariesFrom0xArtifactAsync(
        artifact: ContractArtifact,
        libraryArtifacts: { [libraryName: string]: ContractArtifact },
        supportedProvider: SupportedProvider,
        txDefaults: Partial<TxData>,
        logDecodeDependencies: { [contractName: string]: ContractArtifact | SimpleContractArtifact },
    ): Promise<ERC20BridgeSamplerContract> {
        assert.doesConformToSchema('txDefaults', txDefaults, schemas.txDataSchema);
        if (artifact.compilerOutput === undefined) {
            throw new Error('Compiler output not found in the artifact file');
        }
        const provider = providerUtils.standardizeOrThrow(supportedProvider);
        const abi = artifact.compilerOutput.abi;
        const logDecodeDependenciesAbiOnly: { [contractName: string]: ContractAbi } = {};
        if (Object.keys(logDecodeDependencies) !== undefined) {
            for (const key of Object.keys(logDecodeDependencies)) {
                logDecodeDependenciesAbiOnly[key] = logDecodeDependencies[key].compilerOutput.abi;
            }
        }
        const libraryAddresses = await ERC20BridgeSamplerContract._deployLibrariesAsync(
            artifact,
            libraryArtifacts,
            new Web3Wrapper(provider),
            txDefaults,
        );
        const bytecode = linkLibrariesInBytecode(artifact, libraryAddresses);
        return ERC20BridgeSamplerContract.deployAsync(
            bytecode,
            abi,
            provider,
            txDefaults,
            logDecodeDependenciesAbiOnly,
        );
    }

    public static async deployAsync(
        bytecode: string,
        abi: ContractAbi,
        supportedProvider: SupportedProvider,
        txDefaults: Partial<TxData>,
        logDecodeDependencies: { [contractName: string]: ContractAbi },
    ): Promise<ERC20BridgeSamplerContract> {
        assert.isHexString('bytecode', bytecode);
        assert.doesConformToSchema('txDefaults', txDefaults, schemas.txDataSchema);
        const provider = providerUtils.standardizeOrThrow(supportedProvider);
        const constructorAbi = BaseContract._lookupConstructorAbi(abi);
        [] = BaseContract._formatABIDataItemList(constructorAbi.inputs, [], BaseContract._bigNumberToString);
        const iface = new ethers.utils.Interface(abi);
        const deployInfo = iface.deployFunction;
        const txData = deployInfo.encode(bytecode, []);
        const web3Wrapper = new Web3Wrapper(provider);
        const txDataWithDefaults = await BaseContract._applyDefaultsToContractTxDataAsync(
            {
                data: txData,
                ...txDefaults,
            },
            web3Wrapper.estimateGasAsync.bind(web3Wrapper),
        );
        const txHash = await web3Wrapper.sendTransactionAsync(txDataWithDefaults);
        logUtils.log(`transactionHash: ${txHash}`);
        const txReceipt = await web3Wrapper.awaitTransactionSuccessAsync(txHash);
        logUtils.log(`ERC20BridgeSampler successfully deployed at ${txReceipt.contractAddress}`);
        const contractInstance = new ERC20BridgeSamplerContract(
            txReceipt.contractAddress as string,
            provider,
            txDefaults,
            logDecodeDependencies,
        );
        contractInstance.constructorArgs = [];
        return contractInstance;
    }

    /**
     * @returns      The contract ABI
     */
    public static ABI(): ContractAbi {
        const abi = [
            {
                inputs: [],
                name: 'ETH',
                outputs: [
                    {
                        name: '',
                        type: 'address',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'callDatas',
                        type: 'bytes[]',
                    },
                ],
                name: 'batchCall',
                outputs: [
                    {
                        name: 'callResults',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'data',
                                type: 'bytes',
                            },
                            {
                                name: 'success',
                                type: 'bool',
                            },
                        ],
                    },
                ],
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'tokens',
                        type: 'address[]',
                    },
                    {
                        name: 'account',
                        type: 'address',
                    },
                    {
                        name: 'spender',
                        type: 'address',
                    },
                ],
                name: 'getAllowanceOf',
                outputs: [
                    {
                        name: 'allowances',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'tokens',
                        type: 'address[]',
                    },
                    {
                        name: 'account',
                        type: 'address',
                    },
                ],
                name: 'getBalanceOf',
                outputs: [
                    {
                        name: 'balances',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [],
                name: 'getBlockNumber',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [],
                name: 'getGasLeft',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'orders',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'makerToken',
                                type: 'address',
                            },
                            {
                                name: 'takerToken',
                                type: 'address',
                            },
                            {
                                name: 'makerAmount',
                                type: 'uint128',
                            },
                            {
                                name: 'takerAmount',
                                type: 'uint128',
                            },
                            {
                                name: 'takerTokenFeeAmount',
                                type: 'uint128',
                            },
                            {
                                name: 'maker',
                                type: 'address',
                            },
                            {
                                name: 'taker',
                                type: 'address',
                            },
                            {
                                name: 'sender',
                                type: 'address',
                            },
                            {
                                name: 'feeRecipient',
                                type: 'address',
                            },
                            {
                                name: 'pool',
                                type: 'bytes32',
                            },
                            {
                                name: 'expiry',
                                type: 'uint64',
                            },
                            {
                                name: 'salt',
                                type: 'uint256',
                            },
                        ],
                    },
                    {
                        name: 'orderSignatures',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'signatureType',
                                type: 'uint8',
                            },
                            {
                                name: 'v',
                                type: 'uint8',
                            },
                            {
                                name: 'r',
                                type: 'bytes32',
                            },
                            {
                                name: 's',
                                type: 'bytes32',
                            },
                        ],
                    },
                    {
                        name: 'exchange',
                        type: 'address',
                    },
                ],
                name: 'getLimitOrderFillableMakerAssetAmounts',
                outputs: [
                    {
                        name: 'orderFillableMakerAssetAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'order',
                        type: 'tuple',
                        components: [
                            {
                                name: 'makerToken',
                                type: 'address',
                            },
                            {
                                name: 'takerToken',
                                type: 'address',
                            },
                            {
                                name: 'makerAmount',
                                type: 'uint128',
                            },
                            {
                                name: 'takerAmount',
                                type: 'uint128',
                            },
                            {
                                name: 'takerTokenFeeAmount',
                                type: 'uint128',
                            },
                            {
                                name: 'maker',
                                type: 'address',
                            },
                            {
                                name: 'taker',
                                type: 'address',
                            },
                            {
                                name: 'sender',
                                type: 'address',
                            },
                            {
                                name: 'feeRecipient',
                                type: 'address',
                            },
                            {
                                name: 'pool',
                                type: 'bytes32',
                            },
                            {
                                name: 'expiry',
                                type: 'uint64',
                            },
                            {
                                name: 'salt',
                                type: 'uint256',
                            },
                        ],
                    },
                    {
                        name: 'signature',
                        type: 'tuple',
                        components: [
                            {
                                name: 'signatureType',
                                type: 'uint8',
                            },
                            {
                                name: 'v',
                                type: 'uint8',
                            },
                            {
                                name: 'r',
                                type: 'bytes32',
                            },
                            {
                                name: 's',
                                type: 'bytes32',
                            },
                        ],
                    },
                    {
                        name: 'exchange',
                        type: 'address',
                    },
                ],
                name: 'getLimitOrderFillableTakerAmount',
                outputs: [
                    {
                        name: 'fillableTakerAmount',
                        type: 'uint256',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'orders',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'makerToken',
                                type: 'address',
                            },
                            {
                                name: 'takerToken',
                                type: 'address',
                            },
                            {
                                name: 'makerAmount',
                                type: 'uint128',
                            },
                            {
                                name: 'takerAmount',
                                type: 'uint128',
                            },
                            {
                                name: 'takerTokenFeeAmount',
                                type: 'uint128',
                            },
                            {
                                name: 'maker',
                                type: 'address',
                            },
                            {
                                name: 'taker',
                                type: 'address',
                            },
                            {
                                name: 'sender',
                                type: 'address',
                            },
                            {
                                name: 'feeRecipient',
                                type: 'address',
                            },
                            {
                                name: 'pool',
                                type: 'bytes32',
                            },
                            {
                                name: 'expiry',
                                type: 'uint64',
                            },
                            {
                                name: 'salt',
                                type: 'uint256',
                            },
                        ],
                    },
                    {
                        name: 'orderSignatures',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'signatureType',
                                type: 'uint8',
                            },
                            {
                                name: 'v',
                                type: 'uint8',
                            },
                            {
                                name: 'r',
                                type: 'bytes32',
                            },
                            {
                                name: 's',
                                type: 'bytes32',
                            },
                        ],
                    },
                    {
                        name: 'exchange',
                        type: 'address',
                    },
                ],
                name: 'getLimitOrderFillableTakerAssetAmounts',
                outputs: [
                    {
                        name: 'orderFillableTakerAssetAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'tokens',
                        type: 'address[]',
                    },
                ],
                name: 'getTokenDecimals',
                outputs: [
                    {
                        name: 'decimals',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'account',
                        type: 'address',
                    },
                ],
                name: 'isContract',
                outputs: [
                    {
                        name: '',
                        type: 'bool',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'aToken',
                        type: 'address',
                    },
                    {
                        name: 'underlyingToken',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromAaveV2',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'pure',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'l2Encoder',
                        type: 'address',
                    },
                    {
                        name: 'aToken',
                        type: 'address',
                    },
                    {
                        name: 'underlyingToken',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromAaveV3',
                outputs: [
                    {
                        name: 'l2Params',
                        type: 'bytes32[]',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'poolAddress',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromBalancer',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'poolInfo',
                        type: 'tuple',
                        components: [
                            {
                                name: 'poolId',
                                type: 'bytes32',
                            },
                            {
                                name: 'vault',
                                type: 'address',
                            },
                        ],
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromBalancerV2',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'opts',
                        type: 'tuple',
                        components: [
                            {
                                name: 'registry',
                                type: 'address',
                            },
                            {
                                name: 'paths',
                                type: 'address[][]',
                            },
                        ],
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromBancor',
                outputs: [
                    {
                        name: 'bancorNetwork',
                        type: 'address',
                    },
                    {
                        name: 'path',
                        type: 'address[]',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'weth',
                        type: 'address',
                    },
                    {
                        name: 'router',
                        type: 'address',
                    },
                    {
                        name: 'path',
                        type: 'address[]',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromBancorV3',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'cToken',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromCompound',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'curveInfo',
                        type: 'tuple',
                        components: [
                            {
                                name: 'poolAddress',
                                type: 'address',
                            },
                            {
                                name: 'sellQuoteFunctionSelector',
                                type: 'bytes4',
                            },
                            {
                                name: 'buyQuoteFunctionSelector',
                                type: 'bytes4',
                            },
                        ],
                    },
                    {
                        name: 'fromTokenIdx',
                        type: 'int128',
                    },
                    {
                        name: 'toTokenIdx',
                        type: 'int128',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromCurve',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'opts',
                        type: 'tuple',
                        components: [
                            {
                                name: 'registry',
                                type: 'address',
                            },
                            {
                                name: 'helper',
                                type: 'address',
                            },
                        ],
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromDODO',
                outputs: [
                    {
                        name: 'sellBase',
                        type: 'bool',
                    },
                    {
                        name: 'pool',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'registry',
                        type: 'address',
                    },
                    {
                        name: 'offset',
                        type: 'uint256',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromDODOV2',
                outputs: [
                    {
                        name: 'sellBase',
                        type: 'bool',
                    },
                    {
                        name: 'pool',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'reader',
                        type: 'address',
                    },
                    {
                        name: 'vault',
                        type: 'address',
                    },
                    {
                        name: 'path',
                        type: 'address[]',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromGMX',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'router',
                        type: 'address',
                    },
                    {
                        name: 'path',
                        type: 'address[]',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromKyberDmm',
                outputs: [
                    {
                        name: 'pools',
                        type: 'address[]',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'lidoInfo',
                        type: 'tuple',
                        components: [
                            {
                                name: 'stEthToken',
                                type: 'address',
                            },
                            {
                                name: 'wethToken',
                                type: 'address',
                            },
                            {
                                name: 'wstEthToken',
                                type: 'address',
                            },
                        ],
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromLido',
                outputs: [
                    {
                        name: '',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'router',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromMStable',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'psmInfo',
                        type: 'tuple',
                        components: [
                            {
                                name: 'psmAddress',
                                type: 'address',
                            },
                            {
                                name: 'ilkIdentifier',
                                type: 'bytes32',
                            },
                            {
                                name: 'gemTokenAddress',
                                type: 'address',
                            },
                        ],
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromMakerPsm',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'registry',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromMooniswap',
                outputs: [
                    {
                        name: 'pool',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'pool',
                        type: 'address',
                    },
                    {
                        name: 'path',
                        type: 'address[]',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromPlatypus',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'pool',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromShell',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'readProxy',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenSymbol',
                        type: 'bytes32',
                    },
                    {
                        name: 'makerTokenSymbol',
                        type: 'bytes32',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromSynthetix',
                outputs: [
                    {
                        name: 'synthetix',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'router',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromUniswap',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'router',
                        type: 'address',
                    },
                    {
                        name: 'path',
                        type: 'address[]',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromUniswapV2',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'factory',
                        type: 'address',
                    },
                    {
                        name: 'path',
                        type: 'address[]',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromUniswapV3',
                outputs: [
                    {
                        name: 'uniswapPaths',
                        type: 'bytes[]',
                    },
                    {
                        name: 'uniswapGasUsed',
                        type: 'uint256[]',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'router',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromVelodrome',
                outputs: [
                    {
                        name: 'stable',
                        type: 'bool',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'router',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleBuysFromWooPP',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'vault',
                        type: 'address',
                    },
                    {
                        name: 'swapSteps',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'poolId',
                                type: 'bytes32',
                            },
                            {
                                name: 'assetInIndex',
                                type: 'uint256',
                            },
                            {
                                name: 'assetOutIndex',
                                type: 'uint256',
                            },
                            {
                                name: 'amount',
                                type: 'uint256',
                            },
                            {
                                name: 'userData',
                                type: 'bytes',
                            },
                        ],
                    },
                    {
                        name: 'swapAssets',
                        type: 'address[]',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleMultihopBuysFromBalancerV2',
                outputs: [
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'vault',
                        type: 'address',
                    },
                    {
                        name: 'swapSteps',
                        type: 'tuple[]',
                        components: [
                            {
                                name: 'poolId',
                                type: 'bytes32',
                            },
                            {
                                name: 'assetInIndex',
                                type: 'uint256',
                            },
                            {
                                name: 'assetOutIndex',
                                type: 'uint256',
                            },
                            {
                                name: 'amount',
                                type: 'uint256',
                            },
                            {
                                name: 'userData',
                                type: 'bytes',
                            },
                        ],
                    },
                    {
                        name: 'swapAssets',
                        type: 'address[]',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleMultihopSellsFromBalancerV2',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'aToken',
                        type: 'address',
                    },
                    {
                        name: 'underlyingToken',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromAaveV2',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'pure',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'l2Encoder',
                        type: 'address',
                    },
                    {
                        name: 'aToken',
                        type: 'address',
                    },
                    {
                        name: 'underlyingToken',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromAaveV3',
                outputs: [
                    {
                        name: 'l2Params',
                        type: 'bytes32[]',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'poolAddress',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromBalancer',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'poolInfo',
                        type: 'tuple',
                        components: [
                            {
                                name: 'poolId',
                                type: 'bytes32',
                            },
                            {
                                name: 'vault',
                                type: 'address',
                            },
                        ],
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromBalancerV2',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'opts',
                        type: 'tuple',
                        components: [
                            {
                                name: 'registry',
                                type: 'address',
                            },
                            {
                                name: 'paths',
                                type: 'address[][]',
                            },
                        ],
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromBancor',
                outputs: [
                    {
                        name: 'bancorNetwork',
                        type: 'address',
                    },
                    {
                        name: 'path',
                        type: 'address[]',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'weth',
                        type: 'address',
                    },
                    {
                        name: 'router',
                        type: 'address',
                    },
                    {
                        name: 'path',
                        type: 'address[]',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromBancorV3',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'cToken',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromCompound',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'curveInfo',
                        type: 'tuple',
                        components: [
                            {
                                name: 'poolAddress',
                                type: 'address',
                            },
                            {
                                name: 'sellQuoteFunctionSelector',
                                type: 'bytes4',
                            },
                            {
                                name: 'buyQuoteFunctionSelector',
                                type: 'bytes4',
                            },
                        ],
                    },
                    {
                        name: 'fromTokenIdx',
                        type: 'int128',
                    },
                    {
                        name: 'toTokenIdx',
                        type: 'int128',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromCurve',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'opts',
                        type: 'tuple',
                        components: [
                            {
                                name: 'registry',
                                type: 'address',
                            },
                            {
                                name: 'helper',
                                type: 'address',
                            },
                        ],
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromDODO',
                outputs: [
                    {
                        name: 'sellBase',
                        type: 'bool',
                    },
                    {
                        name: 'pool',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'registry',
                        type: 'address',
                    },
                    {
                        name: 'offset',
                        type: 'uint256',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromDODOV2',
                outputs: [
                    {
                        name: 'sellBase',
                        type: 'bool',
                    },
                    {
                        name: 'pool',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'reader',
                        type: 'address',
                    },
                    {
                        name: 'vault',
                        type: 'address',
                    },
                    {
                        name: 'path',
                        type: 'address[]',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromGMX',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'router',
                        type: 'address',
                    },
                    {
                        name: 'path',
                        type: 'address[]',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromKyberDmm',
                outputs: [
                    {
                        name: 'pools',
                        type: 'address[]',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'lidoInfo',
                        type: 'tuple',
                        components: [
                            {
                                name: 'stEthToken',
                                type: 'address',
                            },
                            {
                                name: 'wethToken',
                                type: 'address',
                            },
                            {
                                name: 'wstEthToken',
                                type: 'address',
                            },
                        ],
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromLido',
                outputs: [
                    {
                        name: '',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'router',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromMStable',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'psmInfo',
                        type: 'tuple',
                        components: [
                            {
                                name: 'psmAddress',
                                type: 'address',
                            },
                            {
                                name: 'ilkIdentifier',
                                type: 'bytes32',
                            },
                            {
                                name: 'gemTokenAddress',
                                type: 'address',
                            },
                        ],
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromMakerPsm',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'registry',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromMooniswap',
                outputs: [
                    {
                        name: 'pool',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'pool',
                        type: 'address',
                    },
                    {
                        name: 'path',
                        type: 'address[]',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromPlatypus',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'pool',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromShell',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'readProxy',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenSymbol',
                        type: 'bytes32',
                    },
                    {
                        name: 'makerTokenSymbol',
                        type: 'bytes32',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromSynthetix',
                outputs: [
                    {
                        name: 'synthetix',
                        type: 'address',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'router',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromUniswap',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'router',
                        type: 'address',
                    },
                    {
                        name: 'path',
                        type: 'address[]',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromUniswapV2',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'factory',
                        type: 'address',
                    },
                    {
                        name: 'path',
                        type: 'address[]',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromUniswapV3',
                outputs: [
                    {
                        name: 'uniswapPaths',
                        type: 'bytes[]',
                    },
                    {
                        name: 'uniswapGasUsed',
                        type: 'uint256[]',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'router',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromVelodrome',
                outputs: [
                    {
                        name: 'stable',
                        type: 'bool',
                    },
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'router',
                        type: 'address',
                    },
                    {
                        name: 'takerToken',
                        type: 'address',
                    },
                    {
                        name: 'makerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                name: 'sampleSellsFromWooPP',
                outputs: [
                    {
                        name: 'makerTokenAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'registry',
                        type: 'address',
                    },
                    {
                        name: 'mooniswapTakerToken',
                        type: 'address',
                    },
                    {
                        name: 'mooniswapMakerToken',
                        type: 'address',
                    },
                    {
                        name: 'takerTokenAmount',
                        type: 'uint256',
                    },
                ],
                name: 'sampleSingleSellFromMooniswapPool',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                stateMutability: 'view',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'firstHopCalls',
                        type: 'bytes[]',
                    },
                    {
                        name: 'secondHopCalls',
                        type: 'bytes[]',
                    },
                    {
                        name: 'numSamples',
                        type: 'uint256',
                    },
                ],
                name: 'sampleTwoHopBuy',
                outputs: [
                    {
                        name: 'firstHop',
                        type: 'tuple',
                        components: [
                            {
                                name: 'sourceIndex',
                                type: 'uint256',
                            },
                            {
                                name: 'returnData',
                                type: 'bytes',
                            },
                        ],
                    },
                    {
                        name: 'secondHop',
                        type: 'tuple',
                        components: [
                            {
                                name: 'sourceIndex',
                                type: 'uint256',
                            },
                            {
                                name: 'returnData',
                                type: 'bytes',
                            },
                        ],
                    },
                    {
                        name: 'sellAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'nonpayable',
                type: 'function',
            },
            {
                inputs: [
                    {
                        name: 'firstHopCalls',
                        type: 'bytes[]',
                    },
                    {
                        name: 'secondHopCalls',
                        type: 'bytes[]',
                    },
                    {
                        name: 'numSamples',
                        type: 'uint256',
                    },
                ],
                name: 'sampleTwoHopSell',
                outputs: [
                    {
                        name: 'firstHop',
                        type: 'tuple',
                        components: [
                            {
                                name: 'sourceIndex',
                                type: 'uint256',
                            },
                            {
                                name: 'returnData',
                                type: 'bytes',
                            },
                        ],
                    },
                    {
                        name: 'secondHop',
                        type: 'tuple',
                        components: [
                            {
                                name: 'sourceIndex',
                                type: 'uint256',
                            },
                            {
                                name: 'returnData',
                                type: 'bytes',
                            },
                        ],
                    },
                    {
                        name: 'buyAmounts',
                        type: 'uint256[]',
                    },
                ],
                stateMutability: 'nonpayable',
                type: 'function',
            },
        ] as ContractAbi;
        return abi;
    }

    protected static async _deployLibrariesAsync(
        artifact: ContractArtifact,
        libraryArtifacts: { [libraryName: string]: ContractArtifact },
        web3Wrapper: Web3Wrapper,
        txDefaults: Partial<TxData>,
        libraryAddresses: { [libraryName: string]: string } = {},
    ): Promise<{ [libraryName: string]: string }> {
        const links = artifact.compilerOutput.evm.bytecode.linkReferences || {};
        // Go through all linked libraries, recursively deploying them if necessary.
        for (const link of Object.values(links)) {
            for (const libraryName of Object.keys(link)) {
                if (!libraryAddresses[libraryName]) {
                    // Library not yet deployed.
                    const libraryArtifact = libraryArtifacts[libraryName];
                    if (!libraryArtifact) {
                        throw new Error(`Missing artifact for linked library "${libraryName}"`);
                    }
                    // Deploy any dependent libraries used by this library.
                    await ERC20BridgeSamplerContract._deployLibrariesAsync(
                        libraryArtifact,
                        libraryArtifacts,
                        web3Wrapper,
                        txDefaults,
                        libraryAddresses,
                    );
                    // Deploy this library.
                    const linkedLibraryBytecode = linkLibrariesInBytecode(libraryArtifact, libraryAddresses);
                    const txDataWithDefaults = await BaseContract._applyDefaultsToContractTxDataAsync(
                        {
                            data: linkedLibraryBytecode,
                            ...txDefaults,
                        },
                        web3Wrapper.estimateGasAsync.bind(web3Wrapper),
                    );
                    const txHash = await web3Wrapper.sendTransactionAsync(txDataWithDefaults);
                    logUtils.log(`transactionHash: ${txHash}`);
                    const { contractAddress } = await web3Wrapper.awaitTransactionSuccessAsync(txHash);
                    logUtils.log(`${libraryArtifact.contractName} successfully deployed at ${contractAddress}`);
                    libraryAddresses[libraryArtifact.contractName] = contractAddress as string;
                }
            }
        }
        return libraryAddresses;
    }

    public getFunctionSignature(methodName: string): string {
        const index = this._methodABIIndex[methodName];
        const methodAbi = ERC20BridgeSamplerContract.ABI()[index] as MethodAbi; // tslint:disable-line:no-unnecessary-type-assertion
        const functionSignature = methodAbiToFunctionSignature(methodAbi);
        return functionSignature;
    }

    public getABIDecodedTransactionData<T>(methodName: string, callData: string): T {
        const functionSignature = this.getFunctionSignature(methodName);
        const self = this as any as ERC20BridgeSamplerContract;
        const abiEncoder = self._lookupAbiEncoder(functionSignature);
        const abiDecodedCallData = abiEncoder.strictDecode<T>(callData);
        return abiDecodedCallData;
    }

    public getABIDecodedReturnData<T>(methodName: string, callData: string): T {
        if (this._encoderOverrides.decodeOutput) {
            return this._encoderOverrides.decodeOutput(methodName, callData);
        }
        const functionSignature = this.getFunctionSignature(methodName);
        const self = this as any as ERC20BridgeSamplerContract;
        const abiEncoder = self._lookupAbiEncoder(functionSignature);
        const abiDecodedCallData = abiEncoder.strictDecodeReturnValue<T>(callData);
        return abiDecodedCallData;
    }

    public getSelector(methodName: string): string {
        const functionSignature = this.getFunctionSignature(methodName);
        const self = this as any as ERC20BridgeSamplerContract;
        const abiEncoder = self._lookupAbiEncoder(functionSignature);
        return abiEncoder.getSelector();
    }

    public ETH(): ContractTxFunctionObj<string> {
        const self = this as any as ERC20BridgeSamplerContract;
        const functionSignature = 'ETH()';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<string> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<string>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, []);
            },
        };
    }
    /**
     * Call multiple public functions on this contract in a single transaction.
     * @param callDatas ABI-encoded call data for each function call.
     */
    public batchCall(callDatas: string[]): ContractTxFunctionObj<Array<{ data: string; success: boolean }>> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isArray('callDatas', callDatas);
        const functionSignature = 'batchCall(bytes[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<Array<{ data: string; success: boolean }>> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<Array<{ data: string; success: boolean }>>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [callDatas]);
            },
        };
    }
    public getAllowanceOf(tokens: string[], account: string, spender: string): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isArray('tokens', tokens);
        assert.isString('account', account);
        assert.isString('spender', spender);
        const functionSignature = 'getAllowanceOf(address[],address,address)';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    tokens,
                    account.toLowerCase(),
                    spender.toLowerCase(),
                ]);
            },
        };
    }
    public getBalanceOf(tokens: string[], account: string): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isArray('tokens', tokens);
        assert.isString('account', account);
        const functionSignature = 'getBalanceOf(address[],address)';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [tokens, account.toLowerCase()]);
            },
        };
    }
    public getBlockNumber(): ContractTxFunctionObj<BigNumber> {
        const self = this as any as ERC20BridgeSamplerContract;
        const functionSignature = 'getBlockNumber()';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, []);
            },
        };
    }
    public getGasLeft(): ContractTxFunctionObj<BigNumber> {
        const self = this as any as ERC20BridgeSamplerContract;
        const functionSignature = 'getGasLeft()';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, []);
            },
        };
    }
    /**
     * Queries the fillable taker asset amounts of native orders.
     * Effectively ignores orders that have empty signatures or
     * @param orders Native orders to query.
     * @param orderSignatures Signatures for each respective order in `orders`.
     * @param exchange The V4 exchange.
     */
    public getLimitOrderFillableMakerAssetAmounts(
        orders: Array<{
            makerToken: string;
            takerToken: string;
            makerAmount: BigNumber;
            takerAmount: BigNumber;
            takerTokenFeeAmount: BigNumber;
            maker: string;
            taker: string;
            sender: string;
            feeRecipient: string;
            pool: string;
            expiry: BigNumber;
            salt: BigNumber;
        }>,
        orderSignatures: Array<{ signatureType: number | BigNumber; v: number | BigNumber; r: string; s: string }>,
        exchange: string,
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isArray('orders', orders);
        assert.isArray('orderSignatures', orderSignatures);
        assert.isString('exchange', exchange);
        const functionSignature =
            'getLimitOrderFillableMakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    orders,
                    orderSignatures,
                    exchange.toLowerCase(),
                ]);
            },
        };
    }
    /**
     * Get the fillable taker amount of an order, taking into account
     * order state, maker fees, and maker balances.
     */
    public getLimitOrderFillableTakerAmount(
        order: {
            makerToken: string;
            takerToken: string;
            makerAmount: BigNumber;
            takerAmount: BigNumber;
            takerTokenFeeAmount: BigNumber;
            maker: string;
            taker: string;
            sender: string;
            feeRecipient: string;
            pool: string;
            expiry: BigNumber;
            salt: BigNumber;
        },
        signature: { signatureType: number | BigNumber; v: number | BigNumber; r: string; s: string },
        exchange: string,
    ): ContractTxFunctionObj<BigNumber> {
        const self = this as any as ERC20BridgeSamplerContract;

        assert.isString('exchange', exchange);
        const functionSignature =
            'getLimitOrderFillableTakerAmount((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),address)';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [order, signature, exchange.toLowerCase()]);
            },
        };
    }
    /**
     * Queries the fillable taker asset amounts of native orders.
     * Effectively ignores orders that have empty signatures or
     * maker/taker asset amounts (returning 0).
     * @param orders Native limit orders to query.
     * @param orderSignatures Signatures for each respective order in `orders`.
     * @param exchange The V4 exchange.
     */
    public getLimitOrderFillableTakerAssetAmounts(
        orders: Array<{
            makerToken: string;
            takerToken: string;
            makerAmount: BigNumber;
            takerAmount: BigNumber;
            takerTokenFeeAmount: BigNumber;
            maker: string;
            taker: string;
            sender: string;
            feeRecipient: string;
            pool: string;
            expiry: BigNumber;
            salt: BigNumber;
        }>,
        orderSignatures: Array<{ signatureType: number | BigNumber; v: number | BigNumber; r: string; s: string }>,
        exchange: string,
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isArray('orders', orders);
        assert.isArray('orderSignatures', orderSignatures);
        assert.isString('exchange', exchange);
        const functionSignature =
            'getLimitOrderFillableTakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    orders,
                    orderSignatures,
                    exchange.toLowerCase(),
                ]);
            },
        };
    }
    public getTokenDecimals(tokens: string[]): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isArray('tokens', tokens);
        const functionSignature = 'getTokenDecimals(address[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [tokens]);
            },
        };
    }
    public isContract(account: string): ContractTxFunctionObj<boolean> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('account', account);
        const functionSignature = 'isContract(address)';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<boolean> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<boolean>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [account.toLowerCase()]);
            },
        };
    }
    /**
     * Sample buy quotes from AaveV2.
     * @param aToken address of the aToken.
     * @param underlyingToken address of the underlying collateral token.
     * @param takerToken address of the taker token (what to sell).
     * @param makerToken address of the maker token (what to buy).
     * @param makerTokenAmounts maker token sell amounts for each sample
     */
    public sampleBuysFromAaveV2(
        aToken: string,
        underlyingToken: string,
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('aToken', aToken);
        assert.isString('underlyingToken', underlyingToken);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromAaveV2(address,address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                let rawCallResult;
                if (self._deployedBytecodeIfExists) {
                    rawCallResult = await self._evmExecAsync(this.getABIEncodedTransactionData());
                } else {
                    rawCallResult = await self._performCallAsync(
                        { data: this.getABIEncodedTransactionData(), ...callData },
                        defaultBlock,
                    );
                }
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    aToken.toLowerCase(),
                    underlyingToken.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from AaveV3.
     * @param l2Encoder address of the l2 encoder.
     * @param aToken address of the aToken.
     * @param underlyingToken address of the underlying collateral token.
     * @param takerToken address of the taker token (what to sell).
     * @param makerToken address of the maker token (what to buy).
     * @param makerTokenAmounts maker token sell amounts for each sample
     */
    public sampleBuysFromAaveV3(
        l2Encoder: string,
        aToken: string,
        underlyingToken: string,
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[string[], BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('l2Encoder', l2Encoder);
        assert.isString('aToken', aToken);
        assert.isString('underlyingToken', underlyingToken);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromAaveV3(address,address,address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[string[], BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[string[], BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    l2Encoder.toLowerCase(),
                    aToken.toLowerCase(),
                    underlyingToken.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from Balancer.
     * @param poolAddress Address of the Balancer pool to query.
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param makerTokenAmounts Maker token buy amount for each sample.
     */
    public sampleBuysFromBalancer(
        poolAddress: string,
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('poolAddress', poolAddress);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromBalancer(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    poolAddress.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from Balancer V2.
     * @param poolInfo Struct with pool related data
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param makerTokenAmounts Maker token buy amount for each sample.
     */
    public sampleBuysFromBalancerV2(
        poolInfo: { poolId: string; vault: string },
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;

        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromBalancerV2((bytes32,address),address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    poolInfo,
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from Bancor. Unimplemented
     * @param opts BancorSamplerOpts The Bancor registry contract address and paths
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param makerTokenAmounts Maker token buy amount for each sample.
     */
    public sampleBuysFromBancor(
        opts: { registry: string; paths: string[][] },
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[string, string[], BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;

        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromBancor((address,address[][]),address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[string, string[], BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[string, string[], BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    opts,
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from BancorV3.
     * @param weth The WETH contract address
     * @param router Router to look up tokens and amounts
     * @param path Token route. Should be takerToken -> makerToken.
     * @param makerTokenAmounts Maker token buy amount for each sample.
     */
    public sampleBuysFromBancorV3(
        weth: string,
        router: string,
        path: string[],
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('weth', weth);
        assert.isString('router', router);
        assert.isArray('path', path);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromBancorV3(address,address,address[],uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    weth.toLowerCase(),
                    router.toLowerCase(),
                    path,
                    makerTokenAmounts,
                ]);
            },
        };
    }
    public sampleBuysFromCompound(
        cToken: string,
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('cToken', cToken);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromCompound(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    cToken.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from Curve.
     * @param curveInfo Curve information specific to this token pair.
     * @param fromTokenIdx Index of the taker token (what to sell).
     * @param toTokenIdx Index of the maker token (what to buy).
     * @param makerTokenAmounts Maker token buy amount for each sample.
     */
    public sampleBuysFromCurve(
        curveInfo: { poolAddress: string; sellQuoteFunctionSelector: string; buyQuoteFunctionSelector: string },
        fromTokenIdx: BigNumber,
        toTokenIdx: BigNumber,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;

        assert.isBigNumber('fromTokenIdx', fromTokenIdx);
        assert.isBigNumber('toTokenIdx', toTokenIdx);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromCurve((address,bytes4,bytes4),int128,int128,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    curveInfo,
                    fromTokenIdx,
                    toTokenIdx,
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from DODO.
     * @param opts DODOSamplerOpts DODO Registry and helper addresses
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param makerTokenAmounts Maker token sell amount for each sample.
     */
    public sampleBuysFromDODO(
        opts: { registry: string; helper: string },
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[boolean, string, BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;

        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromDODO((address,address),address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[boolean, string, BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[boolean, string, BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    opts,
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from DODO.
     * @param registry Address of the registry to look up.
     * @param offset offset index for the pool in the registry.
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param makerTokenAmounts Maker token sell amount for each sample.
     */
    public sampleBuysFromDODOV2(
        registry: string,
        offset: BigNumber,
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[boolean, string, BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('registry', registry);
        assert.isBigNumber('offset', offset);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromDODOV2(address,uint256,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[boolean, string, BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[boolean, string, BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    registry.toLowerCase(),
                    offset,
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    public sampleBuysFromGMX(
        reader: string,
        vault: string,
        path: string[],
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('reader', reader);
        assert.isString('vault', vault);
        assert.isArray('path', path);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromGMX(address,address,address[],uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    reader.toLowerCase(),
                    vault.toLowerCase(),
                    path,
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from KyberDmm.
     * @param router Router to look up tokens and amounts
     * @param path Token route. Should be takerToken -> makerToken.
     * @param makerTokenAmounts Maker token buy amount for each sample.
     */
    public sampleBuysFromKyberDmm(
        router: string,
        path: string[],
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[string[], BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('router', router);
        assert.isArray('path', path);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromKyberDmm(address,address[],uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[string[], BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[string[], BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [router.toLowerCase(), path, makerTokenAmounts]);
            },
        };
    }
    /**
     * Sample buy quotes from Lido.
     * @param lidoInfo Info regarding a specific Lido deployment
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param makerTokenAmounts Maker token buy amount for each sample.
     */
    public sampleBuysFromLido(
        lidoInfo: { stEthToken: string; wethToken: string; wstEthToken: string },
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;

        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromLido((address,address,address),address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    lidoInfo,
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from MStable contract
     * @param router Address of the mStable contract
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param makerTokenAmounts Maker token buy amount for each sample.
     */
    public sampleBuysFromMStable(
        router: string,
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('router', router);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromMStable(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    router.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    public sampleBuysFromMakerPsm(
        psmInfo: { psmAddress: string; ilkIdentifier: string; gemTokenAddress: string },
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;

        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromMakerPsm((address,bytes32,address),address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    psmInfo,
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from Mooniswap.
     * @param registry Address of the Mooniswap Registry.
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param makerTokenAmounts Maker token sell amount for each sample.
     */
    public sampleBuysFromMooniswap(
        registry: string,
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[string, BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('registry', registry);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromMooniswap(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[string, BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[string, BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    registry.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    public sampleBuysFromPlatypus(
        pool: string,
        path: string[],
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('pool', pool);
        assert.isArray('path', path);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromPlatypus(address,address[],uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [pool.toLowerCase(), path, makerTokenAmounts]);
            },
        };
    }
    /**
     * Sample buy quotes from Shell pool contract
     * @param pool Address of the Shell pool contract
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param makerTokenAmounts Maker token buy amount for each sample.
     */
    public sampleBuysFromShell(
        pool: string,
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('pool', pool);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromShell(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    pool.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from Synthetix Atomic Swap.
     * @param takerTokenSymbol Symbol (currency key) of the taker token (what to
     *     sell).
     * @param makerTokenSymbol Symbol (currency key) of the maker token (what to
     *     buy).
     * @param makerTokenAmounts Maker token buy amount for each sample (sorted in
     *     ascending order).
     */
    public sampleBuysFromSynthetix(
        readProxy: string,
        takerTokenSymbol: string,
        makerTokenSymbol: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[string, BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('readProxy', readProxy);
        assert.isString('takerTokenSymbol', takerTokenSymbol);
        assert.isString('makerTokenSymbol', makerTokenSymbol);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromSynthetix(address,bytes32,bytes32,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[string, BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[string, BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    readProxy.toLowerCase(),
                    takerTokenSymbol,
                    makerTokenSymbol,
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from Uniswap.
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param makerTokenAmounts Maker token sell amount for each sample.
     */
    public sampleBuysFromUniswap(
        router: string,
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('router', router);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromUniswap(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    router.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from UniswapV2.
     * @param router Router to look up tokens and amounts
     * @param path Token route. Should be takerToken -> makerToken.
     * @param makerTokenAmounts Maker token buy amount for each sample.
     */
    public sampleBuysFromUniswapV2(
        router: string,
        path: string[],
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('router', router);
        assert.isArray('path', path);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromUniswapV2(address,address[],uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [router.toLowerCase(), path, makerTokenAmounts]);
            },
        };
    }
    /**
     * Sample buy quotes from UniswapV3.
     * @param factory UniswapV3 Factory contract.
     * @param path Token route. Should be takerToken -> makerToken (at most two
     *     hops).
     * @param makerTokenAmounts Maker token buy amount for each sample.
     */
    public sampleBuysFromUniswapV3(
        factory: string,
        path: string[],
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[string[], BigNumber[], BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('factory', factory);
        assert.isArray('path', path);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromUniswapV3(address,address[],uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[string[], BigNumber[], BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[string[], BigNumber[], BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [factory.toLowerCase(), path, makerTokenAmounts]);
            },
        };
    }
    /**
     * Sample buy quotes from Velodrome.
     * @param router Address of Velodrome router.
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param makerTokenAmounts Maker token buy amount for each sample.
     */
    public sampleBuysFromVelodrome(
        router: string,
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[boolean, BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('router', router);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromVelodrome(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[boolean, BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[boolean, BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    router.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from WooFI.
     * @param router Address of the router we are sampling from
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param makerTokenAmounts Maker token sell amount for each sample (sorted in
     *     ascending order).
     */
    public sampleBuysFromWooPP(
        router: string,
        takerToken: string,
        makerToken: string,
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('router', router);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature = 'sampleBuysFromWooPP(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    router.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample buy quotes from Balancer V2 supporting multihops.
     * @param swapSteps Array of swap steps (can be >= 1).
     * @param swapAssets Array of token address for swaps.
     * @param makerTokenAmounts Maker token buy amount for each sample.
     */
    public sampleMultihopBuysFromBalancerV2(
        vault: string,
        swapSteps: Array<{
            poolId: string;
            assetInIndex: BigNumber;
            assetOutIndex: BigNumber;
            amount: BigNumber;
            userData: string;
        }>,
        swapAssets: string[],
        makerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('vault', vault);
        assert.isArray('swapSteps', swapSteps);
        assert.isArray('swapAssets', swapAssets);
        assert.isArray('makerTokenAmounts', makerTokenAmounts);
        const functionSignature =
            'sampleMultihopBuysFromBalancerV2(address,(bytes32,uint256,uint256,uint256,bytes)[],address[],uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    vault.toLowerCase(),
                    swapSteps,
                    swapAssets,
                    makerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from Balancer V2 supporting multihops.
     * @param swapSteps Array of swap steps (can be >= 1).
     * @param swapAssets Array of token address for swaps.
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleMultihopSellsFromBalancerV2(
        vault: string,
        swapSteps: Array<{
            poolId: string;
            assetInIndex: BigNumber;
            assetOutIndex: BigNumber;
            amount: BigNumber;
            userData: string;
        }>,
        swapAssets: string[],
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('vault', vault);
        assert.isArray('swapSteps', swapSteps);
        assert.isArray('swapAssets', swapAssets);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature =
            'sampleMultihopSellsFromBalancerV2(address,(bytes32,uint256,uint256,uint256,bytes)[],address[],uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    vault.toLowerCase(),
                    swapSteps,
                    swapAssets,
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from AaveV2.
     * @param aToken address of the aToken.
     * @param underlyingToken address of the underlying collateral token.
     * @param takerToken address of the taker token (what to sell).
     * @param makerToken address of the maker token (what to buy).
     * @param takerTokenAmounts taker token buy amounts for each sample
     */
    public sampleSellsFromAaveV2(
        aToken: string,
        underlyingToken: string,
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('aToken', aToken);
        assert.isString('underlyingToken', underlyingToken);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromAaveV2(address,address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                let rawCallResult;
                if (self._deployedBytecodeIfExists) {
                    rawCallResult = await self._evmExecAsync(this.getABIEncodedTransactionData());
                } else {
                    rawCallResult = await self._performCallAsync(
                        { data: this.getABIEncodedTransactionData(), ...callData },
                        defaultBlock,
                    );
                }
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    aToken.toLowerCase(),
                    underlyingToken.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from AaveV3.
     * @param l2Encoder address of the l2 encoder.
     * @param aToken address of the aToken.
     * @param underlyingToken address of the underlying collateral token.
     * @param takerToken address of the taker token (what to sell).
     * @param makerToken address of the maker token (what to buy).
     * @param takerTokenAmounts taker token buy amounts for each sample
     */
    public sampleSellsFromAaveV3(
        l2Encoder: string,
        aToken: string,
        underlyingToken: string,
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[string[], BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('l2Encoder', l2Encoder);
        assert.isString('aToken', aToken);
        assert.isString('underlyingToken', underlyingToken);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromAaveV3(address,address,address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[string[], BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[string[], BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    l2Encoder.toLowerCase(),
                    aToken.toLowerCase(),
                    underlyingToken.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from Balancer.
     * @param poolAddress Address of the Balancer pool to query.
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromBalancer(
        poolAddress: string,
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('poolAddress', poolAddress);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromBalancer(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    poolAddress.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from Balancer V2.
     * @param poolInfo Struct with pool related data
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromBalancerV2(
        poolInfo: { poolId: string; vault: string },
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;

        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromBalancerV2((bytes32,address),address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    poolInfo,
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from Bancor.
     * @param opts BancorSamplerOpts The Bancor registry contract address and paths
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromBancor(
        opts: { registry: string; paths: string[][] },
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[string, string[], BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;

        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromBancor((address,address[][]),address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[string, string[], BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[string, string[], BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    opts,
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from BancorV3.
     * @param weth The WETH contract address
     * @param router Router to look up tokens and amounts
     * @param path Token route. Should be takerToken -> makerToken
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromBancorV3(
        weth: string,
        router: string,
        path: string[],
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('weth', weth);
        assert.isString('router', router);
        assert.isArray('path', path);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromBancorV3(address,address,address[],uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    weth.toLowerCase(),
                    router.toLowerCase(),
                    path,
                    takerTokenAmounts,
                ]);
            },
        };
    }
    public sampleSellsFromCompound(
        cToken: string,
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('cToken', cToken);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromCompound(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    cToken.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from Curve.
     * @param curveInfo Curve information specific to this token pair.
     * @param fromTokenIdx Index of the taker token (what to sell).
     * @param toTokenIdx Index of the maker token (what to buy).
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromCurve(
        curveInfo: { poolAddress: string; sellQuoteFunctionSelector: string; buyQuoteFunctionSelector: string },
        fromTokenIdx: BigNumber,
        toTokenIdx: BigNumber,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;

        assert.isBigNumber('fromTokenIdx', fromTokenIdx);
        assert.isBigNumber('toTokenIdx', toTokenIdx);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromCurve((address,bytes4,bytes4),int128,int128,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    curveInfo,
                    fromTokenIdx,
                    toTokenIdx,
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from DODO.
     * @param opts DODOSamplerOpts DODO Registry and helper addresses
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromDODO(
        opts: { registry: string; helper: string },
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[boolean, string, BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;

        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromDODO((address,address),address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[boolean, string, BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[boolean, string, BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    opts,
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from DODO V2.
     * @param registry Address of the registry to look up.
     * @param offset offset index for the pool in the registry.
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromDODOV2(
        registry: string,
        offset: BigNumber,
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[boolean, string, BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('registry', registry);
        assert.isBigNumber('offset', offset);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromDODOV2(address,uint256,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[boolean, string, BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[boolean, string, BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    registry.toLowerCase(),
                    offset,
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    public sampleSellsFromGMX(
        reader: string,
        vault: string,
        path: string[],
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('reader', reader);
        assert.isString('vault', vault);
        assert.isArray('path', path);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromGMX(address,address,address[],uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    reader.toLowerCase(),
                    vault.toLowerCase(),
                    path,
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from KyberDmm.
     * @param router Router to look up tokens and amounts
     * @param path Token route. Should be takerToken -> makerToken
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromKyberDmm(
        router: string,
        path: string[],
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[string[], BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('router', router);
        assert.isArray('path', path);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromKyberDmm(address,address[],uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[string[], BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[string[], BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [router.toLowerCase(), path, takerTokenAmounts]);
            },
        };
    }
    /**
     * Sample sell quotes from Lido
     * @param lidoInfo Info regarding a specific Lido deployment
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromLido(
        lidoInfo: { stEthToken: string; wethToken: string; wstEthToken: string },
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;

        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromLido((address,address,address),address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    lidoInfo,
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from the mStable contract
     * @param router Address of the mStable contract
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromMStable(
        router: string,
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('router', router);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromMStable(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    router.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from Maker PSM
     */
    public sampleSellsFromMakerPsm(
        psmInfo: { psmAddress: string; ilkIdentifier: string; gemTokenAddress: string },
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;

        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromMakerPsm((address,bytes32,address),address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    psmInfo,
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from Mooniswap.
     * @param registry Address of the Mooniswap Registry.
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromMooniswap(
        registry: string,
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[string, BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('registry', registry);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromMooniswap(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[string, BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[string, BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    registry.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    public sampleSellsFromPlatypus(
        pool: string,
        path: string[],
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('pool', pool);
        assert.isArray('path', path);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromPlatypus(address,address[],uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [pool.toLowerCase(), path, takerTokenAmounts]);
            },
        };
    }
    /**
     * Sample sell quotes from the Shell pool contract
     * @param pool Address of the Shell pool contract
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromShell(
        pool: string,
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('pool', pool);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromShell(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    pool.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from Synthetix Atomic Swap.
     * @param takerTokenSymbol Symbol (currency key) of the taker token (what to
     *     sell).
     * @param makerTokenSymbol Symbol (currency key) of the maker token (what to
     *     buy).
     * @param takerTokenAmounts Taker token sell amount for each sample (sorted in
     *     ascending order).
     */
    public sampleSellsFromSynthetix(
        readProxy: string,
        takerTokenSymbol: string,
        makerTokenSymbol: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[string, BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('readProxy', readProxy);
        assert.isString('takerTokenSymbol', takerTokenSymbol);
        assert.isString('makerTokenSymbol', makerTokenSymbol);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromSynthetix(address,bytes32,bytes32,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[string, BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[string, BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    readProxy.toLowerCase(),
                    takerTokenSymbol,
                    makerTokenSymbol,
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from Uniswap.
     * @param router Address of the Uniswap Router
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromUniswap(
        router: string,
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('router', router);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromUniswap(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    router.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from UniswapV2.
     * @param router Router to look up tokens and amounts
     * @param path Token route. Should be takerToken -> makerToken
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromUniswapV2(
        router: string,
        path: string[],
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('router', router);
        assert.isArray('path', path);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromUniswapV2(address,address[],uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [router.toLowerCase(), path, takerTokenAmounts]);
            },
        };
    }
    /**
     * Sample sell quotes from UniswapV3.
     * @param factory UniswapV3 Factory contract.
     * @param path Token route. Should be takerToken -> makerToken (at most two
     *     hops).
     * @param takerTokenAmounts Taker token sell amount for each sample.
     */
    public sampleSellsFromUniswapV3(
        factory: string,
        path: string[],
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[string[], BigNumber[], BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('factory', factory);
        assert.isArray('path', path);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromUniswapV3(address,address[],uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[string[], BigNumber[], BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[string[], BigNumber[], BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [factory.toLowerCase(), path, takerTokenAmounts]);
            },
        };
    }
    /**
     * Sample sell quotes from Velodrome
     * @param router Address of Velodrome router.
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param takerTokenAmounts Taker token sell amount for each sample (sorted in
     *     ascending order).
     */
    public sampleSellsFromVelodrome(
        router: string,
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<[boolean, BigNumber[]]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('router', router);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromVelodrome(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<[boolean, BigNumber[]]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<[boolean, BigNumber[]]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    router.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    /**
     * Sample sell quotes from WooFI.
     * @param router Address of the router we are sampling from
     * @param takerToken Address of the taker token (what to sell).
     * @param makerToken Address of the maker token (what to buy).
     * @param takerTokenAmounts Taker token sell amount for each sample (sorted in
     *     ascending order).
     */
    public sampleSellsFromWooPP(
        router: string,
        takerToken: string,
        makerToken: string,
        takerTokenAmounts: BigNumber[],
    ): ContractTxFunctionObj<BigNumber[]> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('router', router);
        assert.isString('takerToken', takerToken);
        assert.isString('makerToken', makerToken);
        assert.isArray('takerTokenAmounts', takerTokenAmounts);
        const functionSignature = 'sampleSellsFromWooPP(address,address,address,uint256[])';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber[]> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber[]>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    router.toLowerCase(),
                    takerToken.toLowerCase(),
                    makerToken.toLowerCase(),
                    takerTokenAmounts,
                ]);
            },
        };
    }
    public sampleSingleSellFromMooniswapPool(
        registry: string,
        mooniswapTakerToken: string,
        mooniswapMakerToken: string,
        takerTokenAmount: BigNumber,
    ): ContractTxFunctionObj<BigNumber> {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isString('registry', registry);
        assert.isString('mooniswapTakerToken', mooniswapTakerToken);
        assert.isString('mooniswapMakerToken', mooniswapMakerToken);
        assert.isBigNumber('takerTokenAmount', takerTokenAmount);
        const functionSignature = 'sampleSingleSellFromMooniswapPool(address,address,address,uint256)';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(callData: Partial<CallData> = {}, defaultBlock?: BlockParam): Promise<BigNumber> {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<BigNumber>(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [
                    registry.toLowerCase(),
                    mooniswapTakerToken.toLowerCase(),
                    mooniswapMakerToken.toLowerCase(),
                    takerTokenAmount,
                ]);
            },
        };
    }
    public sampleTwoHopBuy(
        firstHopCalls: string[],
        secondHopCalls: string[],
        numSamples: BigNumber,
    ): ContractTxFunctionObj<
        [{ sourceIndex: BigNumber; returnData: string }, { sourceIndex: BigNumber; returnData: string }, BigNumber[]]
    > {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isArray('firstHopCalls', firstHopCalls);
        assert.isArray('secondHopCalls', secondHopCalls);
        assert.isBigNumber('numSamples', numSamples);
        const functionSignature = 'sampleTwoHopBuy(bytes[],bytes[],uint256)';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<
                [
                    { sourceIndex: BigNumber; returnData: string },
                    { sourceIndex: BigNumber; returnData: string },
                    BigNumber[],
                ]
            > {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<
                    [
                        { sourceIndex: BigNumber; returnData: string },
                        { sourceIndex: BigNumber; returnData: string },
                        BigNumber[],
                    ]
                >(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [firstHopCalls, secondHopCalls, numSamples]);
            },
        };
    }
    public sampleTwoHopSell(
        firstHopCalls: string[],
        secondHopCalls: string[],
        numSamples: BigNumber,
    ): ContractTxFunctionObj<
        [{ sourceIndex: BigNumber; returnData: string }, { sourceIndex: BigNumber; returnData: string }, BigNumber[]]
    > {
        const self = this as any as ERC20BridgeSamplerContract;
        assert.isArray('firstHopCalls', firstHopCalls);
        assert.isArray('secondHopCalls', secondHopCalls);
        assert.isBigNumber('numSamples', numSamples);
        const functionSignature = 'sampleTwoHopSell(bytes[],bytes[],uint256)';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            async sendTransactionAsync(
                txData?: Partial<TxData> | undefined,
                opts: SendTransactionOpts = { shouldValidate: true },
            ): Promise<string> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync(
                    { data: this.getABIEncodedTransactionData(), ...txData },
                    this.estimateGasAsync.bind(this),
                );
                if (opts.shouldValidate !== false) {
                    await this.callAsync(txDataWithDefaults);
                }
                return self._web3Wrapper.sendTransactionAsync(txDataWithDefaults);
            },
            awaitTransactionSuccessAsync(
                txData?: Partial<TxData>,
                opts: AwaitTransactionSuccessOpts = { shouldValidate: true },
            ): PromiseWithTransactionHash<TransactionReceiptWithDecodedLogs> {
                return self._promiseWithTransactionHash(this.sendTransactionAsync(txData, opts), opts);
            },
            async estimateGasAsync(txData?: Partial<TxData> | undefined): Promise<number> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.estimateGasAsync(txDataWithDefaults);
            },
            async createAccessListAsync(
                txData?: Partial<TxData> | undefined,
                defaultBlock?: BlockParam,
            ): Promise<TxAccessListWithGas> {
                const txDataWithDefaults = await self._applyDefaultsToTxDataAsync({
                    data: this.getABIEncodedTransactionData(),
                    ...txData,
                });
                return self._web3Wrapper.createAccessListAsync(txDataWithDefaults, defaultBlock);
            },
            async callAsync(
                callData: Partial<CallData> = {},
                defaultBlock?: BlockParam,
            ): Promise<
                [
                    { sourceIndex: BigNumber; returnData: string },
                    { sourceIndex: BigNumber; returnData: string },
                    BigNumber[],
                ]
            > {
                BaseContract._assertCallParams(callData, defaultBlock);
                const rawCallResult = await self._performCallAsync(
                    { data: this.getABIEncodedTransactionData(), ...callData },
                    defaultBlock,
                );
                const abiEncoder = self._lookupAbiEncoder(functionSignature);
                BaseContract._throwIfUnexpectedEmptyCallResult(rawCallResult, abiEncoder);
                return abiEncoder.strictDecodeReturnValue<
                    [
                        { sourceIndex: BigNumber; returnData: string },
                        { sourceIndex: BigNumber; returnData: string },
                        BigNumber[],
                    ]
                >(rawCallResult);
            },
            getABIEncodedTransactionData(): string {
                return self._strictEncodeArguments(functionSignature, [firstHopCalls, secondHopCalls, numSamples]);
            },
        };
    }

    constructor(
        address: string,
        supportedProvider: SupportedProvider,
        txDefaults?: Partial<TxData>,
        logDecodeDependencies?: { [contractName: string]: ContractAbi },
        deployedBytecode: string | undefined = ERC20BridgeSamplerContract.deployedBytecode,
        encoderOverrides?: Partial<EncoderOverrides>,
    ) {
        super(
            'ERC20BridgeSampler',
            ERC20BridgeSamplerContract.ABI(),
            address,
            supportedProvider,
            txDefaults,
            logDecodeDependencies,
            deployedBytecode,
            encoderOverrides,
        );
        classUtils.bindAll(this, ['_abiEncoderByFunctionSignature', 'address', '_web3Wrapper']);
        ERC20BridgeSamplerContract.ABI().forEach((item, index) => {
            if (item.type === 'function') {
                const methodAbi = item as MethodAbi;
                this._methodABIIndex[methodAbi.name] = index;
            }
        });
    }
}

// tslint:disable:max-file-line-count
// tslint:enable:no-unbound-method no-parameter-reassignment no-consecutive-blank-lines ordered-imports align
// tslint:enable:trailing-comma whitespace no-trailing-whitespace
